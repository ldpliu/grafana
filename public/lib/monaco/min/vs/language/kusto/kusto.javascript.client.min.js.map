{"version":3,"sources":["webpack://grafana/../lib/monaco/min/vs/language/kusto/kusto.javascript.client.min.js"],"sourcesContent":["Bridge.assembly(\"Kusto.JavaScript.Client\",function($asm,globals){\"use strict\";Bridge.define(\"Kusto.Charting.AnomalyDataHelper2\",{statics:{props:{TimestampColumnName:null,ValueColumnName:null,SeriesColumnName:null,AnomalySerieSuffix:null},ctors:{init:function(){this.TimestampColumnName=\"Timestamp\";this.ValueColumnName=\"Value\";this.SeriesColumnName=\"Series\";this.AnomalySerieSuffix=\"(anomaly)\"}},methods:{EnchanceDataWithAnomalyDataFromServiceAsync:function(kustoContext,data){var $step=0,$task1,$taskResult1,$jumpFromFinally,$tcs=new System.Threading.Tasks.TaskCompletionSource,$returnValue,res,dataAsCsl,query,results,$t,$async_e,$asyncBody=Bridge.fn.bind(this,function(){try{for(;;){$step=System.Array.min([0,1],$step);switch($step){case 0:if(res=new Kusto.Charting.AnomalyDataHelper2.AnomalyDataFromServiceResult,kustoContext==null){res.Data=data;res.HasErrors=!0;res.Message=\"Failed sending the request for anomalies to the service\";$tcs.setResult(res);return}if(dataAsCsl=Kusto.Charting.AnomalyDataHelper2.DataItemsToDataTableLiteral(data),query=(dataAsCsl||\"\")+(System.String.format(\"| summarize dt = makelist({0}, 100000), y=makelist({1}, 100000) by {2}\\r\\n| extend (anomalies, scores, baseline)=series_decompose_anomalies(y)\\r\\n| project dt, y, anomalies, Series\\r\\n| mvexpand dt to typeof(datetime), y to typeof(double), anomalies to typeof(double) limit 1000000\\r\\n| where anomalies != 0\\r\\n| project dt, anomaly_value = (anomalies * anomalies)*y, Series\",Kusto.Charting.AnomalyDataHelper2.TimestampColumnName,Kusto.Charting.AnomalyDataHelper2.ValueColumnName,Kusto.Charting.AnomalyDataHelper2.SeriesColumnName)||\"\"),System.Text.Encoding.UTF8.GetByteCount$2(query)>2e6){res.Data=data;res.HasErrors=!0;res.Message=\"The anomalies request to the service exceeds the 2MB limit, consider adding more filters\";$tcs.setResult(res);return}if($task1=kustoContext.Kusto$Charting$IKustoClientContext$ExecuteQueryAsync(Kusto.Charting.AnomalyDataHelper2.AnomalyInputOutputRecord,query),$step=1,$task1.isCompleted())continue;$task1.continue($asyncBody);return;case 1:if($taskResult1=$task1.getAwaitedResult(),results=$taskResult1,results=($t=Kusto.Charting.AnomalyDataHelper2.AnomalyInputOutputRecord,System.Linq.Enumerable.from(results,$t).ToArray($t)),results==null||!System.Linq.Enumerable.from(results,Kusto.Charting.AnomalyDataHelper2.AnomalyInputOutputRecord).any()){res.Data=data;res.HasErrors=!0;res.Message=\"Failed retrieving the anomalies result from the service\";$tcs.setResult(res);return}data.AddRange(System.Linq.Enumerable.from(results,Kusto.Charting.AnomalyDataHelper2.AnomalyInputOutputRecord).select($asm.$.Kusto.Charting.AnomalyDataHelper2.f1));res.Data=data;res.HasErrors=!1;res.Message=\"\";$tcs.setResult(res);return;default:$tcs.setResult(null);return}}}catch($async_e1){$async_e=System.Exception.create($async_e1);$tcs.setException($async_e)}},arguments);return $asyncBody(),$tcs.task},DataItemsToDataTableLiteral:function(items){var $t,result=new System.Text.StringBuilder,item,seriesName;result.append(\"datatable\");result.appendLine(System.String.format(\"({0}:datetime,{1}:double,{2}:string)\",Kusto.Charting.AnomalyDataHelper2.TimestampColumnName,Kusto.Charting.AnomalyDataHelper2.ValueColumnName,Kusto.Charting.AnomalyDataHelper2.SeriesColumnName));result.append(\"[\");$t=Bridge.getEnumerator(items,Kusto.Charting.DataItem);try{while($t.moveNext())item=$t.Current,result.append(\"datetime(\"),result.append(System.DateTime.format(item.ArgumentDateTime,\"o\")),result.append(\"),\"),result.append(\"double(\"),result.append(System.Double.format(item.ValueData)),result.append(\"),\"),seriesName=Kusto.Cloud.Platform.Text.StringLiteral.GetLiteral(item.SeriesName),result.append(seriesName),result.appendLine(\",\")}finally{Bridge.is($t,System.IDisposable)&&$t.System$IDisposable$Dispose()}return result.appendLine(\"]\"),result.toString()},EnchanceDataWithAnomalyDataFromColumns:function(data,anomalyColumns,anomalySeriesMap){var $t,$t1,valueData,anomalyColumn,anomalyData,anomalyPointsCount,i,valuePoint,anomalyPoint,seriesName,a,a1;anomalySeriesMap.v=new(System.Collections.Generic.Dictionary$2(System.String,System.String).ctor);var result=new(System.Collections.Generic.List$1(Kusto.Charting.DataItem).ctor),anomalyColumnsHashset=new(System.Collections.Generic.HashSet$1(System.String).$ctor1)(anomalyColumns),valueColumn=System.Linq.Enumerable.from(data,Kusto.Charting.DataItem).where(function(d){return!anomalyColumnsHashset.contains(d.ValueName)}).select($asm.$.Kusto.Charting.AnomalyDataHelper2.f2).firstOrDefault(null,null);if(System.String.isNullOrEmpty(valueColumn))return data;result.AddRange(System.Linq.Enumerable.from(data,Kusto.Charting.DataItem).where(function(d){return!anomalyColumnsHashset.contains(d.ValueName)}));valueData=System.Linq.Enumerable.from(data,Kusto.Charting.DataItem).where(function(d){return System.String.equals(d.ValueName,valueColumn)}).ToArray(Kusto.Charting.DataItem);$t=Bridge.getEnumerator(anomalyColumns);try{while($t.moveNext()){if(anomalyColumn={v:$t.Current},anomalyData=System.Linq.Enumerable.from(data,Kusto.Charting.DataItem).where(function($me,anomalyColumn){return function(d){return System.String.equals(d.ValueName,anomalyColumn.v)}}(this,anomalyColumn)).ToArray(Kusto.Charting.DataItem),valueData.length!==anomalyData.length)return data;for(anomalyPointsCount=0,i=0;i<valueData.length;i=i+1|0)valuePoint=valueData[System.Array.index(i,valueData)],anomalyPoint=anomalyData[System.Array.index(i,anomalyData)],anomalyPoint.ValueData!==0&&(anomalyPointsCount=anomalyPointsCount+1|0,seriesName=(anomalyPoint.SeriesName||\"\")+(Kusto.Charting.AnomalyDataHelper2.AnomalySerieSuffix||\"\"),a=($t1=new Kusto.Charting.DataItem.ctor,$t1.ArgumentDateTime=anomalyPoint.ArgumentDateTime,$t1.ArgumentData=anomalyPoint.ArgumentData,$t1.SeriesName=seriesName,$t1.ValueData=valuePoint.ValueData,$t1.PrefferredChartKind=Kusto.Charting.ChartKind.Point,$t1),result.add(a),anomalySeriesMap.v.containsKey(seriesName)||anomalySeriesMap.v.add(seriesName,valuePoint.SeriesName));anomalyPointsCount===0&&(a1=($t1=new Kusto.Charting.DataItem.ctor,$t1.ArgumentDateTime=anomalyData[System.Array.index(0,anomalyData)].ArgumentDateTime,$t1.ArgumentData=null,$t1.SeriesName=(anomalyData[System.Array.index(0,anomalyData)].SeriesName||\"\")+(Kusto.Charting.AnomalyDataHelper2.AnomalySerieSuffix||\"\"),$t1.ValueData=Number.NaN,$t1.PrefferredChartKind=Kusto.Charting.ChartKind.Point,$t1),result.add(a1))}}finally{Bridge.is($t,System.IDisposable)&&$t.System$IDisposable$Dispose()}return result}}}});Bridge.ns(\"Kusto.Charting.AnomalyDataHelper2\",$asm.$);Bridge.apply($asm.$.Kusto.Charting.AnomalyDataHelper2,{f1:function(r){var $t1;return $t1=new Kusto.Charting.DataItem.ctor,$t1.ArgumentDateTime=r.Timestamp,$t1.ArgumentData=System.DateTime.format(r.Timestamp,\"o\"),$t1.SeriesName=(r.Series||\"\")+(Kusto.Charting.AnomalyDataHelper2.AnomalySerieSuffix||\"\"),$t1.ValueData=r.Value,$t1.PrefferredChartKind=Kusto.Charting.ChartKind.Point,$t1},f2:function(d){return d.ValueName}});Bridge.define(\"Kusto.Charting.AnomalyDataHelper2.AnomalyDataFromServiceResult\",{$kind:\"nested class\",fields:{Data:null,HasErrors:!1,Message:null}});Bridge.define(\"Kusto.Charting.AnomalyDataHelper2.AnomalyInputOutputRecord\",{$kind:\"nested class\",fields:{Timestamp:null,Value:0,Series:null},ctors:{init:function(){this.Timestamp=System.DateTime.getDefaultValue()}}});Bridge.define(\"Kusto.Charting.ArgumentColumnType\",{$kind:\"enum\",statics:{fields:{None:0,Numeric:2,DateTime:4,TimeSpan:8,String:16,Object:32,Geospatial:64,DateTimeOrTimeSpan:12,StringOrDateTimeOrTimeSpan:28,NumericOrDateTimeOrTimeSpan:14,StringOrObject:48,AllExceptGeospatial:62}},$flags:!0});Bridge.define(\"Kusto.Charting.ArgumentRestrictions\",{$kind:\"enum\",statics:{fields:{None:0,MustHave:1,NotIncludedInSeries:2,GeospatialAsSeries:4,PreferLast:8,NumericAsSeries:16}},$flags:!0});Bridge.define(\"Kusto.Charting.ChartKind\",{$kind:\"enum\",statics:{fields:{Unspecified:0,Line:1,Point:2,Bar:3}}});Bridge.define(\"Kusto.Charting.ChartLimitsPolicy\",{props:{MaxPointsPerChartError:0,MaxPointsPerChartWarning:0,MaxSeriesPerChartError:0,MaxSeriesPerChartWarning:0,MaxDatetimePeriodError:null},ctors:{init:function(){this.MaxDatetimePeriodError=new System.TimeSpan},ctor:function(maxPointsPerChartError,maxPointsPerChartWarning,maxSeriesPerChartError,maxSeriesPerChartWarning,maxDatetimePeriodError){this.$initialize();this.MaxPointsPerChartError=maxPointsPerChartError;this.MaxPointsPerChartWarning=maxPointsPerChartWarning;this.MaxSeriesPerChartError=maxSeriesPerChartError;this.MaxSeriesPerChartWarning=maxSeriesPerChartWarning;this.MaxDatetimePeriodError=maxDatetimePeriodError}}});Bridge.define(\"Kusto.Charting.DataChartsHelper\",{statics:{fields:{c_minFractionOfIntervalsToDetectDistribution:0,c_minElementsAmountToFillGapsWithNans:0,c_decimalRoundingPrecision:0,c_doubleAcceptableApproximation:0,c_defaultArgumentNumeric:0,c_defaultArgumentString:null,c_defaultArgumentDatetime:null},ctors:{init:function(){this.c_defaultArgumentDatetime=System.DateTime.getDefaultValue();this.c_minFractionOfIntervalsToDetectDistribution=.8;this.c_minElementsAmountToFillGapsWithNans=4;this.c_decimalRoundingPrecision=8;this.c_doubleAcceptableApproximation=1e-8;this.c_defaultArgumentNumeric=Number.NaN;this.c_defaultArgumentString=\"<empty>\";this.c_defaultArgumentDatetime=Bridge.getDefaultValue(System.DateTime)}},methods:{GetData:function(table,argumentColumnType,argumentRestrictions,seriesColumns,accumulateResults,xColumn,yColumns){argumentColumnType===void 0&&(argumentColumnType=16);argumentRestrictions===void 0&&(argumentRestrictions=0);seriesColumns===void 0&&(seriesColumns=null);accumulateResults===void 0&&(accumulateResults=!1);xColumn===void 0&&(xColumn=null);yColumns===void 0&&(yColumns=null);var chartProps=Kusto.Charting.DataChartsHelper.GetMetaData(table,argumentColumnType,argumentRestrictions,seriesColumns,xColumn,yColumns);return Kusto.Charting.DataChartsHelper.GetData$1(table,chartProps,accumulateResults)},GetData$1:function(table,metaData,accumulateResults){var i,baseSeriesName;if(accumulateResults===void 0&&(accumulateResults=!1),table==null||metaData==null)return System.Linq.Enumerable.empty();var tableSchema=table.Kusto$Charting$IChartingDataSource$GetSchema(),allColumns=System.Linq.Enumerable.from(tableSchema,System.Tuple$2(System.String,Kusto.Charting.ArgumentColumnType)).select($asm.$.Kusto.Charting.DataChartsHelper.f1).toList(Kusto.Charting.DataChartsHelper.ColumnDesc),seriesList=System.Linq.Enumerable.from(metaData.Kusto$Charting$IChartMetaData$SeriesIndexes,System.Int32).any()?System.Linq.Enumerable.from(allColumns,Kusto.Charting.DataChartsHelper.ColumnDesc).where(function(col){return System.Linq.Enumerable.from(metaData.Kusto$Charting$IChartMetaData$SeriesIndexes,System.Int32).contains(col.Index)}).ToArray(Kusto.Charting.DataChartsHelper.ColumnDesc):null,dataColumns=System.Linq.Enumerable.from(allColumns,Kusto.Charting.DataChartsHelper.ColumnDesc).where(function(col){return System.Linq.Enumerable.from(metaData.Kusto$Charting$IChartMetaData$DataIndexes,System.Int32).contains(col.Index)}).ToArray(Kusto.Charting.DataChartsHelper.ColumnDesc),unusedColumns=System.Linq.Enumerable.from(allColumns,Kusto.Charting.DataChartsHelper.ColumnDesc).where(function(col){return System.Linq.Enumerable.from(metaData.Kusto$Charting$IChartMetaData$UnusedIndexes,System.Int32).contains(col.Index)}).ToArray(Kusto.Charting.DataChartsHelper.ColumnDesc),argumentData=new Kusto.Charting.DataChartsHelper.ArgumentData(metaData.Kusto$Charting$IChartMetaData$ArgumentDataColumnIndex,metaData.Kusto$Charting$IChartMetaData$ArgumentDataColumnIndex>=0?allColumns.getItem(metaData.Kusto$Charting$IChartMetaData$ArgumentDataColumnIndex).Name:\"\",metaData.Kusto$Charting$IChartMetaData$ArgumentDataColumnIndex>=0?System.Linq.Enumerable.from(tableSchema,System.Tuple$2(System.String,Kusto.Charting.ArgumentColumnType)).elementAt(metaData.Kusto$Charting$IChartMetaData$ArgumentDataColumnIndex).Item2:Kusto.Charting.ArgumentColumnType.None,metaData.Kusto$Charting$IChartMetaData$ArgumentColumnType,metaData.Kusto$Charting$IChartMetaData$GeospatialColumnIndexes),result=new(System.Collections.Generic.List$1(Kusto.Charting.DataItem).ctor),lastValues=new(System.Collections.Generic.Dictionary$2(System.String,System.Double).ctor);for(i=0;i<table.Kusto$Charting$IChartingDataSource$RowsCount;i=i+1|0)baseSeriesName=Kusto.Charting.DataChartsHelper.GetBaseSeriesName(table,seriesList,i),metaData.Kusto$Charting$IChartMetaData$IsDataFormedAsSeries?Kusto.Charting.DataChartsHelper.ResolveDataSeriesFromDataRow(result,table,dataColumns,unusedColumns,i,baseSeriesName,metaData.Kusto$Charting$IChartMetaData$ArgumentColumnType,accumulateResults,metaData.Kusto$Charting$IChartMetaData$ArgumentDataColumnIndex):(argumentData.ResolveArgumentFromRow(table,i),Kusto.Charting.DataChartsHelper.ResolveDataItemsFromDataRow(result,table,dataColumns,unusedColumns,i,baseSeriesName,argumentData,lastValues,accumulateResults));return metaData.Kusto$Charting$IChartMetaData$ArgumentColumnType!==Kusto.Charting.ArgumentColumnType.Geospatial&&(result=Kusto.Charting.DataChartsHelper.RemoveNaNPointsIfNeeded(result,lastValues)),result},GetMetaData:function(table,argumentColumnType,argumentRestrictions,seriesColumns,xColumn,yColumns){var tableSchema,metaData,isTableValidForCharting,tempDataIndex,firstDataIndex;return(argumentColumnType===void 0&&(argumentColumnType=16),argumentRestrictions===void 0&&(argumentRestrictions=0),seriesColumns===void 0&&(seriesColumns=null),xColumn===void 0&&(xColumn=null),yColumns===void 0&&(yColumns=null),tableSchema=table.Kusto$Charting$IChartingDataSource$GetSchema(),tableSchema==null||!System.Linq.Enumerable.from(tableSchema,System.Tuple$2(System.String,Kusto.Charting.ArgumentColumnType)).any())?null:(seriesColumns==null&&(seriesColumns=new(System.Collections.Generic.List$1(System.String).ctor)),yColumns==null&&(yColumns=new(System.Collections.Generic.List$1(System.String).ctor)),metaData={v:new Kusto.Charting.DataChartsHelper.ChartMetaData(argumentColumnType)},Kusto.Charting.DataChartsHelper.ResolvePredefinedColumnsIndexes(table,seriesColumns,yColumns,xColumn,argumentRestrictions,metaData),isTableValidForCharting=!1,metaData.v.IsDataFormedAsSeries||(isTableValidForCharting=Kusto.Charting.DataChartsHelper.DetectChartDimensionsUsingColumnTypesAndData(tableSchema,table,argumentRestrictions,metaData),metaData.v.IsDataFormedAsSeries=!isTableValidForCharting),metaData.v.IsDataFormedAsSeries&&(isTableValidForCharting=Kusto.Charting.DataChartsHelper.DetectChartDimensionsUsingData(tableSchema,table,seriesColumns,argumentRestrictions,metaData)),!isTableValidForCharting)?null:(tempDataIndex=metaData.v.DataIndexes,metaData.v.DataIndexesList=System.Linq.Enumerable.from(tableSchema,System.Tuple$2(System.String,Kusto.Charting.ArgumentColumnType)).select(function(col,index){return index!==metaData.v.ArgumentDataColumnIndex&&!metaData.v.GeospatiaColumnlIndexesList.contains(index)&&(!System.Linq.Enumerable.from(tempDataIndex,System.Int32).any()||System.Linq.Enumerable.from(tempDataIndex,System.Int32).contains(index))&&!System.Linq.Enumerable.from(metaData.v.SeriesIndexes,System.Int32).contains(index)&&(!metaData.v.IsDataFormedAsSeries&&System.Enum.hasFlag(Kusto.Charting.ArgumentColumnType.NumericOrDateTimeOrTimeSpan,Bridge.box(col.Item2,Kusto.Charting.ArgumentColumnType,System.Enum.toStringFn(Kusto.Charting.ArgumentColumnType)))||metaData.v.IsDataFormedAsSeries&&System.Enum.hasFlag(Kusto.Charting.ArgumentColumnType.StringOrObject,Bridge.box(col.Item2,Kusto.Charting.ArgumentColumnType,System.Enum.toStringFn(Kusto.Charting.ArgumentColumnType))))?index:-1}).where($asm.$.Kusto.Charting.DataChartsHelper.f2).toList(System.Int32),metaData.v.ArgumentColumnType===Kusto.Charting.ArgumentColumnType.Geospatial&&(metaData.v.DataIndexesList.Count>1&&(firstDataIndex=System.Linq.Enumerable.from(metaData.v.DataIndexesList,System.Int32).first(),metaData.v.DataIndexesList.clear(),metaData.v.DataIndexesList.add(firstDataIndex)),argumentRestrictions===Kusto.Charting.ArgumentRestrictions.GeospatialAsSeries&&(metaData.v.ArgumentDataColumnIndex===-1||!System.Linq.Enumerable.from(metaData.v.DataIndexesList,System.Int32).any())))?null:(metaData.v.UnusedIndexes=System.Linq.Enumerable.range(0,System.Linq.Enumerable.from(tableSchema,System.Tuple$2(System.String,Kusto.Charting.ArgumentColumnType)).count()).except(metaData.v.DataIndexes).except(metaData.v.GeospatialColumnIndexes).except(metaData.v.SeriesIndexes).except(System.Array.init([metaData.v.ArgumentDataColumnIndex],System.Int32)).toList(System.Int32),metaData.v)},RemoveNaNPointsIfNeeded:function(result,lastValues){var $t,emptySeries=System.Linq.Enumerable.from(lastValues,System.Collections.Generic.KeyValuePair$2(System.String,System.Double)).where($asm.$.Kusto.Charting.DataChartsHelper.f3).toDictionary($asm.$.Kusto.Charting.DataChartsHelper.f4,$asm.$.Kusto.Charting.DataChartsHelper.f5,System.String,System.Boolean),seriesStatistics,r,stats,partialEmptySeries;emptySeries.Count>0&&(result=System.Linq.Enumerable.from(result,Kusto.Charting.DataItem).where(function(d){return!emptySeries.containsKey(d.SeriesName)}).toList(Kusto.Charting.DataItem));seriesStatistics=new(System.Collections.Generic.Dictionary$2(System.String,Kusto.Charting.DataChartsHelper.SeriesStatsCounters).ctor);$t=Bridge.getEnumerator(result);try{while($t.moveNext())r=$t.Current,stats={},seriesStatistics.tryGetValue(r.SeriesName,stats)||(stats.v=new Kusto.Charting.DataChartsHelper.SeriesStatsCounters),stats.v.TotalPoints=stats.v.TotalPoints.inc(),Kusto.Charting.ExtendedDouble.IsFinite(r.ValueData)&&(stats.v.NonNanPoints=stats.v.NonNanPoints.inc()),seriesStatistics.setItem(r.SeriesName,stats.v)}finally{Bridge.is($t,System.IDisposable)&&$t.System$IDisposable$Dispose()}return partialEmptySeries=System.Linq.Enumerable.from(seriesStatistics,System.Collections.Generic.KeyValuePair$2(System.String,Kusto.Charting.DataChartsHelper.SeriesStatsCounters)).where($asm.$.Kusto.Charting.DataChartsHelper.f6).toDictionary($asm.$.Kusto.Charting.DataChartsHelper.f4,$asm.$.Kusto.Charting.DataChartsHelper.f5,System.String,System.Boolean),partialEmptySeries.Count>0&&(result=System.Linq.Enumerable.from(result,Kusto.Charting.DataItem).where(function(r1){return!partialEmptySeries.containsKey(r1.SeriesName)||Kusto.Charting.ExtendedDouble.IsFinite(r1.ValueData)}).toList(Kusto.Charting.DataItem)),result},GetDataForLineChart:function(options,dataSource,data,yColumnsToResolve,argumentType){var $t,$t1,isTimechart=options.Visualization===Kusto.Data.Utils.VisualizationKind.TimeLineChart||options.Visualization===Kusto.Data.Utils.VisualizationKind.TimeLineWithAnomalyChart,isLinechart=options.Visualization===Kusto.Data.Utils.VisualizationKind.LineChart,isLikelyTimechart=options.Visualization===Kusto.Data.Utils.VisualizationKind.ScatterChart||options.Visualization===Kusto.Data.Utils.VisualizationKind.AreaChart||options.Visualization===Kusto.Data.Utils.VisualizationKind.StackedAreaChart,expectedArgTypes=null,expectedArgType;expectedArgTypes=isTimechart?System.Array.init([Kusto.Charting.ArgumentColumnType.DateTime,Kusto.Charting.ArgumentColumnType.TimeSpan],Kusto.Charting.ArgumentColumnType):isLinechart?System.Array.init([Kusto.Charting.ArgumentColumnType.Numeric,Kusto.Charting.ArgumentColumnType.DateTime,Kusto.Charting.ArgumentColumnType.TimeSpan],Kusto.Charting.ArgumentColumnType):isLikelyTimechart?System.Array.init([Kusto.Charting.ArgumentColumnType.DateTime,Kusto.Charting.ArgumentColumnType.TimeSpan,Kusto.Charting.ArgumentColumnType.Numeric],Kusto.Charting.ArgumentColumnType):System.Array.init([Kusto.Charting.ArgumentColumnType.Numeric,Kusto.Charting.ArgumentColumnType.DateTime,Kusto.Charting.ArgumentColumnType.TimeSpan],Kusto.Charting.ArgumentColumnType);$t=Bridge.getEnumerator(expectedArgTypes);try{while($t.moveNext())if(expectedArgType=$t.Current,data=($t1=Kusto.Charting.DataItem,System.Linq.Enumerable.from(Kusto.Charting.DataChartsHelper.GetData(dataSource,expectedArgType,18,options.Series,options.Accumulate,options.XColumn,yColumnsToResolve),$t1).toList($t1)),data!=null&&data.Count!==0)break}finally{Bridge.is($t,System.IDisposable)&&$t.System$IDisposable$Dispose()}return argumentType.v=Kusto.Charting.DataChartsHelper.ResolveArgumentType(data),data},IsNumericType:function(type,considerDateTimeAndTimeSpanAsNumeric){if(considerDateTimeAndTimeSpanAsNumeric===void 0&&(considerDateTimeAndTimeSpanAsNumeric=!0),type==null)return!1;else if(Bridge.referenceEquals(type,System.TimeSpan)||Bridge.referenceEquals(type,System.DateTime))return considerDateTimeAndTimeSpanAsNumeric;else if(Bridge.referenceEquals(type,System.Byte)||Bridge.referenceEquals(type,System.Decimal)||Bridge.referenceEquals(type,System.Double)||Bridge.referenceEquals(type,System.Int16)||Bridge.referenceEquals(type,System.Int32)||Bridge.referenceEquals(type,System.Int64)||Bridge.referenceEquals(type,System.SByte)||Bridge.referenceEquals(type,System.UInt16)||Bridge.referenceEquals(type,System.UInt32)||Bridge.referenceEquals(type,System.UInt64))return!0;else if(Bridge.referenceEquals(type,System.Object)&&Bridge.Reflection.isGenericType(type)&&Bridge.referenceEquals(Bridge.Reflection.getGenericTypeDefinition(type),System.Nullable$1))return Kusto.Charting.DataChartsHelper.IsNumericType(System.Nullable.getUnderlyingType(type),considerDateTimeAndTimeSpanAsNumeric);return!1},GetAllArgumentColumns:function(table,columnsToExclude){var i,columnName;columnsToExclude===void 0&&(columnsToExclude=null);var result=new(System.Collections.Generic.List$1(System.String).ctor),schema=table.Kusto$Charting$IChartingDataSource$GetSchema(),n=System.Linq.Enumerable.from(table.Kusto$Charting$IChartingDataSource$GetSchema(),System.Tuple$2(System.String,Kusto.Charting.ArgumentColumnType)).count(),columnsToExcludeDefined=columnsToExclude!=null&&System.Linq.Enumerable.from(columnsToExclude,System.String).any();if(n>1)for(i=0;i<n;i=i+1|0)(columnName=System.Linq.Enumerable.from(schema,System.Tuple$2(System.String,Kusto.Charting.ArgumentColumnType)).elementAt(i).Item1,columnsToExcludeDefined&&System.Linq.Enumerable.from(columnsToExclude,System.String).contains(columnName))||result.add(columnName);return result},GetFirstStringColumnName:function(table,amountToSkip){var schema,n,i;for(amountToSkip===void 0&&(amountToSkip=0),schema=table.Kusto$Charting$IChartingDataSource$GetSchema(),n=System.Linq.Enumerable.from(table.Kusto$Charting$IChartingDataSource$GetSchema(),System.Tuple$2(System.String,Kusto.Charting.ArgumentColumnType)).count(),i=0;i<n;i=i+1|0)if(System.Linq.Enumerable.from(schema,System.Tuple$2(System.String,Kusto.Charting.ArgumentColumnType)).elementAt(i).Item2===Kusto.Charting.ArgumentColumnType.String)if(amountToSkip===0)return System.Linq.Enumerable.from(schema,System.Tuple$2(System.String,Kusto.Charting.ArgumentColumnType)).elementAt(i).Item1;else amountToSkip=amountToSkip-1|0;return null},FillGapsWithNaNs:function(data,argType){var $t,dataGroups,result,dg,serieDataItems;if(data==null||!System.Linq.Enumerable.from(data,Kusto.Charting.DataItem).any()||data.Count<Kusto.Charting.DataChartsHelper.c_minElementsAmountToFillGapsWithNans)return data;dataGroups=System.Linq.Enumerable.from(data,Kusto.Charting.DataItem).groupBy($asm.$.Kusto.Charting.DataChartsHelper.f7);result=new(System.Collections.Generic.List$1(Kusto.Charting.DataItem).$ctor2)(data.Count);$t=Bridge.getEnumerator(dataGroups);try{while($t.moveNext())dg=$t.Current,serieDataItems=Kusto.Charting.DataChartsHelper.FillGapsWithNaNs$1(dg.select($asm.$.Kusto.Charting.DataChartsHelper.f8),argType),result.AddRange(serieDataItems)}finally{Bridge.is($t,System.IDisposable)&&$t.System$IDisposable$Dispose()}return result},FillGapsWithNaNs$1:function(data,argType){var $t,argData,result,prevItem,item,currentDistance,gapLength,mod,j,newItem;if(System.Linq.Enumerable.from(data,Kusto.Charting.DataItem).count()<Kusto.Charting.DataChartsHelper.c_minElementsAmountToFillGapsWithNans)return data;switch(argType){case Kusto.Charting.ArgumentColumnType.TimeSpan:case Kusto.Charting.ArgumentColumnType.DateTime:data=System.Linq.Enumerable.from(data,Kusto.Charting.DataItem).orderBy($asm.$.Kusto.Charting.DataChartsHelper.f9);argData=System.Linq.Enumerable.from(data,Kusto.Charting.DataItem).select($asm.$.Kusto.Charting.DataChartsHelper.f10).ToArray(System.Double);break;case Kusto.Charting.ArgumentColumnType.Numeric:data=System.Linq.Enumerable.from(data,Kusto.Charting.DataItem).orderBy($asm.$.Kusto.Charting.DataChartsHelper.f11);argData=System.Linq.Enumerable.from(data,Kusto.Charting.DataItem).select($asm.$.Kusto.Charting.DataChartsHelper.f11).ToArray(System.Double);break;default:return data}if(argData==null||!System.Linq.Enumerable.from(argData,System.Double).any())return data;var distances=Kusto.Charting.DataChartsHelper.SelectSuccessivePairs(argData),maxGroup=Kusto.Charting.DataChartsHelper.GetTopGroupByCount(distances,argType),initialDistance=maxGroup.Item1;if(maxGroup==null||System.Convert.toDouble(Bridge.box(maxGroup.Item2,System.Int32))/System.Linq.Enumerable.from(distances,System.Double).count()<Kusto.Charting.DataChartsHelper.c_minFractionOfIntervalsToDetectDistribution)return data;result=new(System.Collections.Generic.List$1(Kusto.Charting.DataItem).$ctor2)(System.Linq.Enumerable.from(data,Kusto.Charting.DataItem).count());prevItem=null;$t=Bridge.getEnumerator(data,Kusto.Charting.DataItem);try{while($t.moveNext()){if(item=$t.Current,prevItem==null){result.add(item);prevItem=item;continue}if(currentDistance=Kusto.Charting.DataChartsHelper.GetDistance(prevItem,item,argType),currentDistance-initialDistance>Kusto.Charting.DataChartsHelper.c_doubleAcceptableApproximation){gapLength=0;try{gapLength=System.Convert.toInt32(Bridge.box(Bridge.Math.round(currentDistance/initialDistance,0,6),System.Double,System.Double.format,System.Double.getHashCode))}catch($e1){return $e1=System.Exception.create($e1),data}if(mod=currentDistance-gapLength*initialDistance,mod>Kusto.Charting.DataChartsHelper.c_doubleAcceptableApproximation)return data;for(j=1;j<gapLength;j=j+1|0){newItem=prevItem.Clone();newItem.ValueData=Number.NaN;switch(argType){case Kusto.Charting.ArgumentColumnType.Numeric:newItem.ArgumentNumeric+=initialDistance*j;newItem.ArgumentData=System.Double.format(newItem.ArgumentNumeric);break;case Kusto.Charting.ArgumentColumnType.DateTime:newItem.ArgumentDateTime=System.DateTime.addTicks(newItem.ArgumentDateTime,System.Convert.toInt64(Bridge.box(initialDistance,System.Double,System.Double.format,System.Double.getHashCode)).mul(System.Int64(j)));newItem.ArgumentData=System.DateTime.format(newItem.ArgumentDateTime);break;case Kusto.Charting.ArgumentColumnType.TimeSpan:newItem.ArgumentDateTime=System.DateTime.addTicks(newItem.ArgumentDateTime,System.Convert.toInt64(Bridge.box(initialDistance,System.Double,System.Double.format,System.Double.getHashCode)).mul(System.Int64(j)));newItem.ArgumentData=Bridge.toString(System.TimeSpan.fromTicks(System.DateTime.getTicks(newItem.ArgumentDateTime)));break}result.add(newItem)}}result.add(item);prevItem=item}}finally{Bridge.is($t,System.IDisposable)&&$t.System$IDisposable$Dispose()}return result},ResolveArgumentType:function(data){if(data==null||!System.Linq.Enumerable.from(data,Kusto.Charting.DataItem).any())return Kusto.Charting.ArgumentColumnType.None;var ts={};return System.Linq.Enumerable.from(data,Kusto.Charting.DataItem).all(function(d){return!System.String.isNullOrEmpty(d.ArgumentData)&&System.String.indexOf(d.ArgumentData,\":\")>0&&System.TimeSpan.tryParse(d.ArgumentData,null,ts)})?Kusto.Charting.ArgumentColumnType.TimeSpan:System.Linq.Enumerable.from(data,Kusto.Charting.DataItem).all($asm.$.Kusto.Charting.DataChartsHelper.f12)?Kusto.Charting.ArgumentColumnType.DateTime:System.Linq.Enumerable.from(data,Kusto.Charting.DataItem).any($asm.$.Kusto.Charting.DataChartsHelper.f13)?Kusto.Charting.ArgumentColumnType.Numeric:Kusto.Charting.ArgumentColumnType.String},ValidateData:function(data,argType,limits,error){var $t,minValue,maxValue,item,seriesCount,dataPoints;if(error.v=\"\",data==null||!System.Linq.Enumerable.from(data,Kusto.Charting.DataItem).any())return error.v=\"Data was not provided\",Kusto.Charting.ValidationStatus.PolicyViolationError;if(System.Linq.Enumerable.from(data,Kusto.Charting.DataItem).where($asm.$.Kusto.Charting.DataChartsHelper.f14).any())return error.v=\"Data includes non-finite values\",Kusto.Charting.ValidationStatus.PolicyViolationError;if(argType===Kusto.Charting.ArgumentColumnType.Geospatial&&System.Linq.Enumerable.from(data,Kusto.Charting.DataItem).any($asm.$.Kusto.Charting.DataChartsHelper.f15))return error.v=\"Data includes invalid geospatial coordinates. Longitude values must be in range [-180,180]. Latitude values must be in range [-90,90].\",Kusto.Charting.ValidationStatus.PolicyViolationError;if(argType===Kusto.Charting.ArgumentColumnType.DateTime&&System.TimeSpan.neq(limits.MaxDatetimePeriodError,Bridge.getDefaultValue(System.TimeSpan))){minValue=System.DateTime.getMaxValue();maxValue=System.DateTime.getMinValue();$t=Bridge.getEnumerator(data,Kusto.Charting.DataItem);try{while($t.moveNext())item=$t.Current,System.DateTime.lt(maxValue,item.ArgumentDateTime)&&(maxValue=item.ArgumentDateTime),System.DateTime.gt(minValue,item.ArgumentDateTime)&&(minValue=item.ArgumentDateTime)}finally{Bridge.is($t,System.IDisposable)&&$t.System$IDisposable$Dispose()}if(System.DateTime.gt(minValue,maxValue)||System.TimeSpan.gt(System.DateTime.subdd(maxValue,minValue),limits.MaxDatetimePeriodError))return error.v=\"Input time range is too wide to fit into chart\",Kusto.Charting.ValidationStatus.PolicyViolationError}return(seriesCount=System.Linq.Enumerable.from(data,Kusto.Charting.DataItem).select($asm.$.Kusto.Charting.DataChartsHelper.f7).distinct().count(),dataPoints=System.Linq.Enumerable.from(data,Kusto.Charting.DataItem).count(),seriesCount>limits.MaxSeriesPerChartError)?(error.v=\"Too many series\\n\"+(System.String.format(\"Provided data contains {0} series which exceeds allowed amount for the chart: {1}\",Bridge.box(seriesCount,System.Int32),Bridge.box(limits.MaxSeriesPerChartError,System.Int32))||\"\"),Kusto.Charting.ValidationStatus.PolicyViolationError):dataPoints>limits.MaxPointsPerChartError?(error.v=\"Too many points\\n\"+(System.String.format(\"Provided data contains {0} points which exceeds allowed amount for the chart: {1}\",Bridge.box(dataPoints,System.Int32),Bridge.box(limits.MaxPointsPerChartError,System.Int32))||\"\"),Kusto.Charting.ValidationStatus.PolicyViolationError):seriesCount>limits.MaxSeriesPerChartWarning||dataPoints>limits.MaxPointsPerChartWarning?(error.v=\"Too many series or data points\\nChart can perform badly when large amount of data is used.\\n\"+(System.String.format(\"You are about to plot {0} series with {1} points.\",Bridge.box(seriesCount,System.Int32),Bridge.box(dataPoints,System.Int32))||\"\"),Kusto.Charting.ValidationStatus.PolicyViolationWarning):Kusto.Charting.ValidationStatus.Valid},ResolveJsonArrayType:function(value){var arr;try{arr=Newtonsoft.Json.JsonConvert.DeserializeObject(value,System.Array.type(System.String))}catch($e1){return $e1=System.Exception.create($e1),Kusto.Charting.ArgumentColumnType.None}return arr==null||System.Linq.Enumerable.from(arr,System.String).count()===0?Kusto.Charting.ArgumentColumnType.None:Kusto.Charting.DataChartsHelper.ArrayIsDouble(arr)?Kusto.Charting.ArgumentColumnType.Numeric:Kusto.Charting.DataChartsHelper.ArrayIsTimespan(arr)?Kusto.Charting.ArgumentColumnType.TimeSpan:Kusto.Charting.DataChartsHelper.ArrayIsDatetime(arr)?Kusto.Charting.ArgumentColumnType.DateTime:Kusto.Charting.ArgumentColumnType.String},SelectSuccessivePairs:function(collection){var $t,item;if(collection==null||System.Linq.Enumerable.from(collection,System.Double).count()<=1)return null;var result=System.Array.init(System.Linq.Enumerable.from(collection,System.Double).count()-1|0,0,System.Double),isFirstElement=!0,prev=Bridge.getDefaultValue(System.Double),idx=0;$t=Bridge.getEnumerator(collection);try{while($t.moveNext()){if(item=$t.Current,isFirstElement){isFirstElement=!1;prev=item;continue}result[System.Array.index(idx,result)]=Math.abs(item-prev);idx=idx+1|0;prev=item}}finally{Bridge.is($t,System.IDisposable)&&$t.System$IDisposable$Dispose()}return result},GetTopGroupByCount:function(data,sequenceType){var $t,sorted=System.Linq.Enumerable.from(data,System.Double).orderBy($asm.$.Kusto.Charting.DataChartsHelper.f8),currentGroup=new(System.Collections.Generic.List$1(System.Double).$ctor2)(System.Linq.Enumerable.from(data,System.Double).count()),maxGroupCount=0,maxGroupValue=0,prevNum=null,num,diff;$t=Bridge.getEnumerator(sorted);try{while($t.moveNext()){if(num=$t.Current,!System.Nullable.hasValue(prevNum)){prevNum=num;currentGroup.add(num);continue}diff=num-System.Nullable.getValue(prevNum);diff>Kusto.Charting.DataChartsHelper.c_doubleAcceptableApproximation&&(System.Linq.Enumerable.from(currentGroup,System.Double).count()>maxGroupCount&&(maxGroupCount=System.Linq.Enumerable.from(currentGroup,System.Double).count(),maxGroupValue=Bridge.Math.round(System.Linq.Enumerable.from(currentGroup,System.Double).average(),Kusto.Charting.DataChartsHelper.c_decimalRoundingPrecision,6)),currentGroup.clear());currentGroup.add(num);prevNum=num}}finally{Bridge.is($t,System.IDisposable)&&$t.System$IDisposable$Dispose()}return{Item1:maxGroupValue,Item2:maxGroupCount}},GetDistance:function(start,end,sequenceType){if(start==null||end==null)return-1;var distance=-1;switch(sequenceType){case Kusto.Charting.ArgumentColumnType.TimeSpan:case Kusto.Charting.ArgumentColumnType.DateTime:distance=System.Int64.toNumber(System.DateTime.getTicks(end.ArgumentDateTime).sub(System.DateTime.getTicks(start.ArgumentDateTime)));break;case Kusto.Charting.ArgumentColumnType.Numeric:distance=end.ArgumentNumeric-start.ArgumentNumeric;break}return Bridge.Math.round(Math.abs(distance),Kusto.Charting.DataChartsHelper.c_decimalRoundingPrecision,6)},ResolvePredefinedColumnsIndexes:function(data,seriesColumns,yColumns,xColumn,argumentRestrictions,metaData){var dataIsSeries=null,columns=data.Kusto$Charting$IChartingDataSource$GetSchema(),i,column,columnName,isY,isX,columnType,isSeries,value,type;if(argumentRestrictions===Kusto.Charting.ArgumentRestrictions.GeospatialAsSeries&&System.Linq.Enumerable.from(seriesColumns,System.String).any()&&(System.Linq.Enumerable.from(yColumns,System.String).any()||!System.String.isNullOrWhiteSpace(xColumn)))throw new Kusto.Charting.SeriesCreationException(\"GeospatialAsSeries: it's not possible to set both series and x/y columns.\");for(i=0;i<System.Linq.Enumerable.from(columns,System.Tuple$2(System.String,Kusto.Charting.ArgumentColumnType)).count();i=i+1|0){if(column=System.Linq.Enumerable.from(columns,System.Tuple$2(System.String,Kusto.Charting.ArgumentColumnType)).elementAt(i),columnName=column.Item1,System.Linq.Enumerable.from(seriesColumns,System.String).any()&&System.Linq.Enumerable.from(seriesColumns,System.String).contains(columnName)){metaData.v.SeriesIndexesList.add(i);argumentRestrictions===Kusto.Charting.ArgumentRestrictions.GeospatialAsSeries&&metaData.v.GeospatiaColumnlIndexesList.add(i);continue}if(isY=System.Linq.Enumerable.from(yColumns,System.String).any()&&System.Linq.Enumerable.from(yColumns,System.String).contains(columnName),isX=!System.String.isNullOrWhiteSpace(xColumn)&&Bridge.referenceEquals(xColumn,columnName),isY||isX){if(columnType=column.Item2,isSeries=!1,System.Enum.hasFlag(Kusto.Charting.ArgumentColumnType.StringOrObject,Bridge.box(columnType,Kusto.Charting.ArgumentColumnType,System.Enum.toStringFn(Kusto.Charting.ArgumentColumnType)))&&metaData.v.ArgumentColumnType!==Kusto.Charting.ArgumentColumnType.Geospatial&&(value=Bridge.toString(data.Kusto$Charting$IChartingDataSource$GetValue(0,i)),type=Kusto.Charting.DataChartsHelper.ResolveJsonArrayType(value),type!==Kusto.Charting.ArgumentColumnType.None&&(columnType=type,isSeries=!0)),System.Nullable.hasValue(dataIsSeries)){if(System.Nullable.getValue(dataIsSeries)!==isSeries)throw new Kusto.Charting.SeriesCreationException(\"Y-Axes and X-Axis both should be defined as scalars or as series\");}else dataIsSeries=isSeries;if(metaData.v.ArgumentColumnType===Kusto.Charting.ArgumentColumnType.Geospatial)metaData.v.GeospatiaColumnlIndexesList.Count>0&&isX?metaData.v.GeospatiaColumnlIndexesList.insert(0,i):metaData.v.GeospatiaColumnlIndexesList.add(i),argumentRestrictions===Kusto.Charting.ArgumentRestrictions.GeospatialAsSeries&&(metaData.v.SeriesIndexesList.Count>0&&isX?metaData.v.SeriesIndexesList.insert(0,i):metaData.v.SeriesIndexesList.add(i));else if(isX)if(System.Enum.hasFlag(metaData.v.ArgumentColumnType,Bridge.box(columnType,Kusto.Charting.ArgumentColumnType,System.Enum.toStringFn(Kusto.Charting.ArgumentColumnType))))metaData.v.ArgumentDataColumnIndex=i;else throw new Kusto.Charting.SeriesCreationException(System.String.format(\"Type of column {0}, provided as X-Axis, does not match required by chart type\",[columnName]));else if(isY)if(System.Enum.hasFlag(Kusto.Charting.ArgumentColumnType.NumericOrDateTimeOrTimeSpan,Bridge.box(columnType,Kusto.Charting.ArgumentColumnType,System.Enum.toStringFn(Kusto.Charting.ArgumentColumnType))))metaData.v.DataIndexesList.add(i);else throw new Kusto.Charting.SeriesCreationException(System.String.format(\"Column {0}, provided as Y-Axis, should be one of types: Numeric, DateTime, Timespan\",[columnName]));}}if(metaData.v.IsDataFormedAsSeries=System.Nullable.hasValue(dataIsSeries)?System.Nullable.getValue(dataIsSeries):!1,!System.Linq.Enumerable.from(metaData.v.DataIndexesList,System.Int32).any()&&System.Linq.Enumerable.from(yColumns,System.String).any()&&metaData.v.ArgumentColumnType!==Kusto.Charting.ArgumentColumnType.Geospatial)throw new Kusto.Charting.SeriesCreationException(\"Any of columns defined as Y-Axes were not found in data, not of an appropriate type or used as argument or series\");if(!System.String.isNullOrWhiteSpace(xColumn)&&metaData.v.ArgumentDataColumnIndex<0&&metaData.v.ArgumentColumnType!==Kusto.Charting.ArgumentColumnType.Geospatial)throw new Kusto.Charting.SeriesCreationException(System.String.format(\"Column {0}, provided as X-Axis, was not found in data\",[xColumn]));if(System.Linq.Enumerable.from(seriesColumns,System.String).any()&&!System.Linq.Enumerable.from(metaData.v.SeriesIndexesList,System.Int32).any())throw new Kusto.Charting.SeriesCreationException(\"Any of columns, provided as Series, were not found in data\");},ResolveDataSeriesFromDataRow:function(result,table,columns,propertyColumns,rowIdx,baseSeriesName,argumentColumnType,accumulate,argumentDataColumnIndex){var $t,$t1,$t2,argumentValue=table.Kusto$Charting$IChartingDataSource$GetValue(rowIdx,argumentDataColumnIndex),argumentActualType=Kusto.Charting.DataChartsHelper.ResolveJsonArrayType(Bridge.toString(argumentValue)),values,j,argumentData,dataItem;$t=Bridge.getEnumerator(columns,Kusto.Charting.DataChartsHelper.ColumnDesc);try{while($t.moveNext()){var column=$t.Current,cellValue=table.Kusto$Charting$IChartingDataSource$GetValue(rowIdx,column.Index),value=($t1=Bridge.as(cellValue,System.String),$t1!=null?$t1:Bridge.toString(cellValue)),type=Kusto.Charting.DataChartsHelper.ResolveJsonArrayType(value);if(type!==Kusto.Charting.ArgumentColumnType.None&&System.Enum.hasFlag(Kusto.Charting.ArgumentColumnType.NumericOrDateTimeOrTimeSpan,Bridge.box(type,Kusto.Charting.ArgumentColumnType,System.Enum.toStringFn(Kusto.Charting.ArgumentColumnType)))){if(values=Kusto.Charting.DataChartsHelper.ParseJsonArrayAsDouble(value,!0),values==null||System.Linq.Enumerable.from(value,System.Char).count()===0)continue;var seriesName=System.String.isNullOrEmpty(baseSeriesName)?column.Name:(baseSeriesName||\"\")+\":\"+(column.Name||\"\"),lastValue=0,argumentDateTime=Kusto.Charting.DataChartsHelper.GetArgumentDateTimeArray(argumentValue,argumentActualType,argumentDataColumnIndex,System.Linq.Enumerable.from(values,System.Double).count()),argumentNumeric=Kusto.Charting.DataChartsHelper.GetArgumentNumericArray(argumentValue,argumentActualType,argumentDataColumnIndex,System.Linq.Enumerable.from(values,System.Double).count()),argumentString=Kusto.Charting.DataChartsHelper.GetArgumentStringArray(argumentValue,argumentActualType,argumentDataColumnIndex,System.Linq.Enumerable.from(values,System.Double).count()),argumentProperties=System.Linq.Enumerable.from(propertyColumns,Kusto.Charting.DataChartsHelper.ColumnDesc).select(function(p){return table.Kusto$Charting$IChartingDataSource$GetValue(rowIdx,p.Index)}).select($asm.$.Kusto.Charting.DataChartsHelper.f16).ToArray(System.Object);for(j=0;j<values.length;j=j+1|0)argumentData=\"\",System.Enum.hasFlag(Kusto.Charting.ArgumentColumnType.DateTimeOrTimeSpan,Bridge.box(argumentColumnType,Kusto.Charting.ArgumentColumnType,System.Enum.toStringFn(Kusto.Charting.ArgumentColumnType)))&&System.Enum.hasFlag(Kusto.Charting.ArgumentColumnType.DateTimeOrTimeSpan,Bridge.box(argumentActualType,Kusto.Charting.ArgumentColumnType,System.Enum.toStringFn(Kusto.Charting.ArgumentColumnType)))?argumentData=System.DateTime.format(argumentDateTime[System.Array.index(j,argumentDateTime)]):System.Enum.hasFlag(argumentColumnType,Bridge.box(Kusto.Charting.ArgumentColumnType.Numeric,Kusto.Charting.ArgumentColumnType,System.Enum.toStringFn(Kusto.Charting.ArgumentColumnType)))&&argumentActualType===Kusto.Charting.ArgumentColumnType.Numeric?argumentData=System.Double.format(argumentNumeric[System.Array.index(j,argumentNumeric)]):System.Enum.hasFlag(argumentColumnType,Bridge.box(Kusto.Charting.ArgumentColumnType.String,Kusto.Charting.ArgumentColumnType,System.Enum.toStringFn(Kusto.Charting.ArgumentColumnType)))&&(argumentData=argumentString[System.Array.index(j,argumentString)],System.String.isNullOrEmpty(argumentData)&&(argumentData=Bridge.as(argumentValue,System.String))),dataItem=($t2=new Kusto.Charting.DataItem.ctor,$t2.ArgumentData=argumentData,$t2.ArgumentDateTime=argumentDateTime[System.Array.index(j,argumentDateTime)],$t2.ArgumentNumeric=argumentNumeric[System.Array.index(j,argumentNumeric)],$t2.ValueData=accumulate?values[System.Array.index(j,values)]+lastValue:values[System.Array.index(j,values)],$t2.ValueName=column.Name,$t2.SeriesName=seriesName,$t2.Properties=Kusto.Charting.DataChartsHelper.ResolvePropertiesFromMultiValue(table,argumentProperties,propertyColumns,j),$t2),System.String.isNullOrEmpty(dataItem.ArgumentData)&&(dataItem.ArgumentData=Kusto.Charting.DataChartsHelper.c_defaultArgumentString),result.add(dataItem),lastValue=dataItem.ValueData}}}finally{Bridge.is($t,System.IDisposable)&&$t.System$IDisposable$Dispose()}},ResolveProperties:function(table,rowIdx,propertyColumns){return Kusto.Cloud.Platform.Utils.ExtendedEnumerable.SafeFastNone$2(Kusto.Charting.DataChartsHelper.ColumnDesc,propertyColumns)?\"\":Bridge.toArray(System.Linq.Enumerable.from(propertyColumns,Kusto.Charting.DataChartsHelper.ColumnDesc).select(function(column){var cellValue=table.Kusto$Charting$IChartingDataSource$GetValue(rowIdx,column.Index),value=Kusto.Charting.DataChartsHelper.ObjectToString(cellValue);return System.String.format(\"{0}:{1}\",column.Name,value)})).join(\", \")},ResolvePropertiesFromMultiValue:function(table,properties,propertyColumns,j){return Kusto.Cloud.Platform.Utils.ExtendedEnumerable.SafeFastNone$2(Kusto.Charting.DataChartsHelper.ColumnDesc,propertyColumns)?\"\":Bridge.toArray(System.Linq.Enumerable.from(propertyColumns,Kusto.Charting.DataChartsHelper.ColumnDesc).zip(properties,$asm.$.Kusto.Charting.DataChartsHelper.f17).select(function(kvp){var value,arr;return value=(arr=Bridge.as(kvp.Item2,System.Array.type(System.String)))!=null?arr[System.Array.index(j,arr)]:Kusto.Charting.DataChartsHelper.ObjectToString(kvp.Item2),System.String.format(\"{0}:{1}\",kvp.Item1.Name,value)})).join(\", \")},ObjectToString:function(o){var s,d;return(s=Bridge.as(o,System.String))!=null?s:Bridge.equals(d=Bridge.is(o,System.DateTime)?System.Nullable.getValue(Bridge.cast(Bridge.unbox(o,System.DateTime),System.DateTime)):null,null)?Bridge.toString(o):Kusto.Cloud.Platform.Utils.ExtendedDateTime.ToUtcString(d)},GetArgumentStringArray:function(value,argumentColumnType,argumentDataColumnIndex,count){if(!System.Enum.hasFlag(argumentColumnType,Bridge.box(Kusto.Charting.ArgumentColumnType.String,Kusto.Charting.ArgumentColumnType,System.Enum.toStringFn(Kusto.Charting.ArgumentColumnType)))||argumentDataColumnIndex<0)return System.Array.init(count,null,System.String);var result=Kusto.Charting.DataChartsHelper.ParseJsonArrayAsString(Bridge.toString(value));return result==null?System.Array.init(count,null,System.String):result},GetArgumentNumericArray:function(value,argumentColumnType,argumentDataColumnIndex,count){if(argumentColumnType!==Kusto.Charting.ArgumentColumnType.Numeric||argumentDataColumnIndex<0)return System.Linq.Enumerable.repeat(Kusto.Charting.DataChartsHelper.c_defaultArgumentNumeric,count).ToArray(System.Double);var result=Kusto.Charting.DataChartsHelper.ParseJsonArrayAsDouble(Bridge.toString(value));return result==null?System.Linq.Enumerable.repeat(Kusto.Charting.DataChartsHelper.c_defaultArgumentNumeric,count).ToArray(System.Double):result},GetArgumentDateTimeArray:function(value,argumentColumnType,argumentDataColumnIndex,count){if(!System.Enum.hasFlag(Kusto.Charting.ArgumentColumnType.DateTimeOrTimeSpan,Bridge.box(argumentColumnType,Kusto.Charting.ArgumentColumnType,System.Enum.toStringFn(Kusto.Charting.ArgumentColumnType)))||argumentDataColumnIndex<0)return System.Linq.Enumerable.repeat(Kusto.Charting.DataChartsHelper.c_defaultArgumentDatetime,count).ToArray(System.DateTime);var result=Kusto.Charting.DataChartsHelper.ParseJsonArrayAsDateTime(Bridge.toString(value),argumentColumnType);return result==null?System.Linq.Enumerable.repeat(Kusto.Charting.DataChartsHelper.c_defaultArgumentDatetime,count).ToArray(System.DateTime):result},ResolveDataItemsFromDataRow:function(result,table,columns,propertyColumns,rowIdx,baseSeriesName,argumentData,lastValues,accumulate){var $t,$t1,hasPrevValue;System.Linq.Enumerable.from(columns,Kusto.Charting.DataChartsHelper.ColumnDesc).any()||argumentData.GeospatialArgumentDataType!==Kusto.Charting.ArgumentColumnType.Geospatial||result.add(($t=new Kusto.Charting.DataItem.ctor,$t.GeoCoordinates=argumentData.GeoCoordinates,$t.SeriesName=System.String.isNullOrWhiteSpace(baseSeriesName)?\"\":baseSeriesName,$t.Properties=Kusto.Charting.DataChartsHelper.ResolveProperties(table,rowIdx,propertyColumns),$t));$t=Bridge.getEnumerator(columns,Kusto.Charting.DataChartsHelper.ColumnDesc);try{while($t.moveNext()){var column=$t.Current,cellValue=table.Kusto$Charting$IChartingDataSource$GetValue(rowIdx,column.Index),value=Kusto.Charting.DataChartsHelper.TryConvertToDouble(cellValue,column.Type),lastValue={},dataItem=($t1=new Kusto.Charting.DataItem.ctor,$t1.ArgumentData=argumentData.Value,$t1.ArgumentDateTime=argumentData.DateTime,$t1.ArgumentNumeric=argumentData.NumericValue,$t1.ValueName=column.Name,$t1.Properties=Kusto.Charting.DataChartsHelper.ResolveProperties(table,rowIdx,propertyColumns),$t1);argumentData.GeospatialArgumentDataType===Kusto.Charting.ArgumentColumnType.Geospatial?(dataItem.SeriesName=System.String.isNullOrWhiteSpace(baseSeriesName)?\"\":baseSeriesName,dataItem.GeoCoordinates=argumentData.GeoCoordinates):dataItem.SeriesName=System.String.isNullOrEmpty(baseSeriesName)?column.Name:(baseSeriesName||\"\")+\":\"+(column.Name||\"\");hasPrevValue=lastValues.tryGetValue(dataItem.SeriesName,lastValue);dataItem.ValueData=accumulate&&hasPrevValue?value+lastValue.v:value;result.add(dataItem);accumulate||!hasPrevValue?lastValues.setItem(dataItem.SeriesName,dataItem.ValueData):isNaN(value)||lastValues.setItem(dataItem.SeriesName,value)}}finally{Bridge.is($t,System.IDisposable)&&$t.System$IDisposable$Dispose()}},GetBaseSeriesName:function(table,seriesColumns,rowIdx){var $t,baseSeriesName=\"\",baseSeriesNameBuilder,column,columnValue;if(seriesColumns!=null){baseSeriesNameBuilder=new System.Text.StringBuilder;$t=Bridge.getEnumerator(seriesColumns,Kusto.Charting.DataChartsHelper.ColumnDesc);try{while($t.moveNext())column=$t.Current,baseSeriesNameBuilder.getLength()>0&&baseSeriesNameBuilder.append(\", \"),columnValue=Bridge.toString(table.Kusto$Charting$IChartingDataSource$GetValue(rowIdx,column.Index)),columnValue=System.String.isNullOrWhiteSpace(columnValue)?Kusto.Charting.DataChartsHelper.c_defaultArgumentString:columnValue,baseSeriesNameBuilder.appendFormat(\"{0}:{1}\",column.Name,columnValue)}finally{Bridge.is($t,System.IDisposable)&&$t.System$IDisposable$Dispose()}baseSeriesName=baseSeriesNameBuilder.toString()}return baseSeriesName},TrySetGeoJSONPoint:function(value,point){point.v=null;try{point.v=Newtonsoft.Json.JsonConvert.DeserializeObject(value,Kusto.Charting.DataChartsHelper.GeoJSONPoint)}catch($e1){if($e1=System.Exception.create($e1),Bridge.is($e1,Newtonsoft.Json.JsonException))return!1;else throw $e1;}if((point.v!=null?point.v.coordinates:null)==null)return!1;else if(point.v.coordinates.length!==2)return!1;return!0},GetArgumentDateTime:function(value,argumentColumnType){if(!System.Enum.hasFlag(argumentColumnType,Bridge.box(Kusto.Charting.ArgumentColumnType.DateTime,Kusto.Charting.ArgumentColumnType,System.Enum.toStringFn(Kusto.Charting.ArgumentColumnType)))&&!System.Enum.hasFlag(argumentColumnType,Bridge.box(Kusto.Charting.ArgumentColumnType.TimeSpan,Kusto.Charting.ArgumentColumnType,System.Enum.toStringFn(Kusto.Charting.ArgumentColumnType))))return Kusto.Charting.DataChartsHelper.c_defaultArgumentDatetime;if(Bridge.is(value,System.DateTime))return System.Nullable.getValue(Bridge.cast(Bridge.unbox(value,System.DateTime),System.DateTime));else if(Bridge.is(value,System.TimeSpan))return Kusto.Charting.DataChartsHelper.TimeSpanToDateTime(System.Nullable.getValue(Bridge.cast(Bridge.unbox(value,System.TimeSpan),System.TimeSpan)));return Kusto.Charting.DataChartsHelper.c_defaultArgumentDatetime},ConvertToDouble:function(obj,type){var value=Kusto.Charting.DataChartsHelper.c_defaultArgumentNumeric;if(obj==null)return value;if(type===Kusto.Charting.ArgumentColumnType.DateTime)value=Kusto.Charting.DataChartsHelper.DateTimeToTotalSeconds(System.Nullable.getValue(Bridge.cast(Bridge.unbox(obj,System.DateTime),System.DateTime)));else if(type===Kusto.Charting.ArgumentColumnType.TimeSpan)value=Kusto.Charting.DataChartsHelper.TimeSpanToTotalSeconds(System.Nullable.getValue(Bridge.cast(Bridge.unbox(obj,System.TimeSpan),System.TimeSpan)));else try{value=System.Convert.toDouble(obj)}catch($e1){$e1=System.Exception.create($e1);value=Kusto.Charting.DataChartsHelper.c_defaultArgumentNumeric}return value},TryConvertToDouble:function(value,type){return value==null||Kusto.Charting.DataChartsHelper.IsEmptyValue(value)?Kusto.Charting.DataChartsHelper.c_defaultArgumentNumeric:Kusto.Charting.DataChartsHelper.ConvertToDouble(value,type)},DetectChartDimensionsUsingData:function(columns,table,seriesColumns,argumentRestrictions,metaData){var $t,resolvedColumnTypes=System.Array.init(System.Linq.Enumerable.from(columns,System.Tuple$2(System.String,Kusto.Charting.ArgumentColumnType)).count(),0,Kusto.Charting.ArgumentColumnType),firstNumericColumnIndex,i,column;if(table.Kusto$Charting$IChartingDataSource$RowsCount===0)return!1;for(firstNumericColumnIndex=-1,i=0;i<System.Linq.Enumerable.from(columns,System.Tuple$2(System.String,Kusto.Charting.ArgumentColumnType)).count();i=i+1|0)if((column=System.Linq.Enumerable.from(columns,System.Tuple$2(System.String,Kusto.Charting.ArgumentColumnType)).elementAt(i),resolvedColumnTypes[System.Array.index(i,resolvedColumnTypes)]=column.Item2,!metaData.v.DataIndexesList.contains(i))&&(column.Item2===Kusto.Charting.ArgumentColumnType.String||column.Item2===Kusto.Charting.ArgumentColumnType.Object)){var item=table.Kusto$Charting$IChartingDataSource$GetValue(0,i),value=($t=Bridge.as(item,System.String),$t!=null?$t:Bridge.toString(item)),type=Kusto.Charting.DataChartsHelper.ResolveJsonArrayType(value);if(type===Kusto.Charting.ArgumentColumnType.None){!System.Linq.Enumerable.from(seriesColumns,System.String).any()&&metaData.v.ArgumentDataColumnIndex<0&&metaData.v.SeriesIndexesList.add(i);continue}resolvedColumnTypes[System.Array.index(i,resolvedColumnTypes)]=type;System.Enum.hasFlag(metaData.v.ArgumentColumnType,Bridge.box(type,Kusto.Charting.ArgumentColumnType,System.Enum.toStringFn(Kusto.Charting.ArgumentColumnType)))&&(metaData.v.ArgumentDataColumnIndex<0||System.Enum.hasFlag(argumentRestrictions,Bridge.box(Kusto.Charting.ArgumentRestrictions.PreferLast,Kusto.Charting.ArgumentRestrictions,System.Enum.toStringFn(Kusto.Charting.ArgumentRestrictions))))?metaData.v.ArgumentDataColumnIndex=i:type===Kusto.Charting.ArgumentColumnType.Numeric&&firstNumericColumnIndex<0&&(firstNumericColumnIndex=i)}return Kusto.Charting.DataChartsHelper.CompleteChartDimentionsDetection(columns,argumentRestrictions,firstNumericColumnIndex,resolvedColumnTypes,metaData)},DetectChartDimensionsUsingColumnTypesAndData:function(columns,table,argumentRestrictions,metaData){for(var column,resolvedColumnTypes,$t,firstNumericColumnIndex=-1,geoJSONPointCandidateColumns=new(System.Collections.Generic.List$1(System.Int32).ctor),geoColumnsPredefined=System.Linq.Enumerable.from(metaData.v.GeospatiaColumnlIndexesList,System.Int32).any(),i=0;i<System.Linq.Enumerable.from(columns,System.Tuple$2(System.String,Kusto.Charting.ArgumentColumnType)).count();i=i+1|0)if(!metaData.v.DataIndexesList.contains(i)&&!metaData.v.SeriesIndexesList.contains(i))if(column=System.Linq.Enumerable.from(columns,System.Tuple$2(System.String,Kusto.Charting.ArgumentColumnType)).elementAt(i),metaData.v.ArgumentColumnType===Kusto.Charting.ArgumentColumnType.Geospatial&&System.Enum.hasFlag(Kusto.Charting.ArgumentColumnType.StringOrObject,Bridge.box(column.Item2,Kusto.Charting.ArgumentColumnType,System.Enum.toStringFn(Kusto.Charting.ArgumentColumnType)))&&geoJSONPointCandidateColumns.add(i),metaData.v.ArgumentColumnType===Kusto.Charting.ArgumentColumnType.Geospatial&&System.Enum.hasFlag(Kusto.Charting.ArgumentColumnType.Numeric,Bridge.box(column.Item2,Kusto.Charting.ArgumentColumnType,System.Enum.toStringFn(Kusto.Charting.ArgumentColumnType)))&&System.Linq.Enumerable.from(metaData.v.GeospatiaColumnlIndexesList,System.Int32).count()<2&&!geoColumnsPredefined)metaData.v.GeospatiaColumnlIndexesList.add(i);else if(System.Enum.hasFlag(metaData.v.ArgumentColumnType,Bridge.box(column.Item2,Kusto.Charting.ArgumentColumnType,System.Enum.toStringFn(Kusto.Charting.ArgumentColumnType)))&&(metaData.v.ArgumentDataColumnIndex<0||System.Enum.hasFlag(argumentRestrictions,Bridge.box(Kusto.Charting.ArgumentRestrictions.PreferLast,Kusto.Charting.ArgumentRestrictions,System.Enum.toStringFn(Kusto.Charting.ArgumentRestrictions)))))metaData.v.ArgumentDataColumnIndex=i;else if(column.Item2===Kusto.Charting.ArgumentColumnType.Numeric&&metaData.v.ArgumentDataColumnIndex!==-1&&System.Enum.hasFlag(argumentRestrictions,Bridge.box(Kusto.Charting.ArgumentRestrictions.NumericAsSeries,Kusto.Charting.ArgumentRestrictions,System.Enum.toStringFn(Kusto.Charting.ArgumentRestrictions)))){firstNumericColumnIndex=i;break}if(metaData.v.ArgumentColumnType===Kusto.Charting.ArgumentColumnType.Geospatial&&System.Linq.Enumerable.from(metaData.v.GeospatiaColumnlIndexesList,System.Int32).count()<2&&!geoColumnsPredefined){metaData.v.GeospatiaColumnlIndexesList.clear();$t=Bridge.getEnumerator(geoJSONPointCandidateColumns);try{while($t.moveNext()){var columnId=$t.Current,columnFirstValue=Bridge.toString(table.Kusto$Charting$IChartingDataSource$GetValue(0,columnId)),geojsonPoint={};if(Kusto.Charting.DataChartsHelper.TrySetGeoJSONPoint(columnFirstValue,geojsonPoint)){metaData.v.GeospatiaColumnlIndexesList.add(columnId);break}}}finally{Bridge.is($t,System.IDisposable)&&$t.System$IDisposable$Dispose()}}return resolvedColumnTypes=System.Linq.Enumerable.from(columns,System.Tuple$2(System.String,Kusto.Charting.ArgumentColumnType)).select($asm.$.Kusto.Charting.DataChartsHelper.f18).ToArray(Kusto.Charting.ArgumentColumnType),Kusto.Charting.DataChartsHelper.CompleteChartDimentionsDetection(columns,argumentRestrictions,firstNumericColumnIndex,resolvedColumnTypes,metaData)},CompleteChartDimentionsDetection:function(columns,argumentRestrictions,firstNumericColumnIndex,resolvedColumnTypes,metaData){var $t,seriesOrArgumentDataIndex,geoColumnIndex,seriesDefaultIndex;if(metaData.v.ArgumentDataColumnIndex>=0&&System.Linq.Enumerable.from(metaData.v.SeriesIndexesList,System.Int32).any())return!0;if(metaData.v.ArgumentDataColumnIndex<0&&firstNumericColumnIndex<0&&System.Enum.hasFlag(metaData.v.ArgumentColumnType,Bridge.box(Kusto.Charting.ArgumentColumnType.Numeric,Kusto.Charting.ArgumentColumnType,System.Enum.toStringFn(Kusto.Charting.ArgumentColumnType))))return!1;else if(metaData.v.ArgumentColumnType===Kusto.Charting.ArgumentColumnType.Geospatial&&!System.Linq.Enumerable.from(metaData.v.GeospatiaColumnlIndexesList,System.Int32).any())return!1;if(metaData.v.ArgumentDataColumnIndex<0&&metaData.v.ArgumentColumnType!==Kusto.Charting.ArgumentColumnType.Geospatial){if(System.Enum.hasFlag(Kusto.Charting.ArgumentColumnType.DateTimeOrTimeSpan,Bridge.box(metaData.v.ArgumentColumnType,Kusto.Charting.ArgumentColumnType,System.Enum.toStringFn(Kusto.Charting.ArgumentColumnType))))return!1;System.Enum.hasFlag(metaData.v.ArgumentColumnType,Bridge.box(Kusto.Charting.ArgumentColumnType.Numeric,Kusto.Charting.ArgumentColumnType,System.Enum.toStringFn(Kusto.Charting.ArgumentColumnType)))?System.Linq.Enumerable.from(columns,System.Tuple$2(System.String,Kusto.Charting.ArgumentColumnType)).count()>1&&(metaData.v.ArgumentDataColumnIndex=firstNumericColumnIndex):metaData.v.ArgumentDataColumnIndex=System.Enum.hasFlag(argumentRestrictions,Bridge.box(Kusto.Charting.ArgumentRestrictions.NotIncludedInSeries,Kusto.Charting.ArgumentRestrictions,System.Enum.toStringFn(Kusto.Charting.ArgumentRestrictions)))?Kusto.Charting.DataChartsHelper.GoBackwardsAndFindColumnNotInList(firstNumericColumnIndex,metaData.v.SeriesIndexes,metaData.v.DataIndexes):firstNumericColumnIndex-1|0}if(metaData.v.ArgumentDataColumnIndex<0&&System.Enum.hasFlag(argumentRestrictions,Bridge.box(Kusto.Charting.ArgumentRestrictions.MustHave,Kusto.Charting.ArgumentRestrictions,System.Enum.toStringFn(Kusto.Charting.ArgumentRestrictions)))&&(metaData.v.ArgumentDataColumnIndex=0),metaData.v.ArgumentColumnType===Kusto.Charting.ArgumentColumnType.Geospatial)if(seriesOrArgumentDataIndex=Kusto.Charting.DataChartsHelper.GetFirstStringAvailableColumnIndexOrNonStringIfAbsent(resolvedColumnTypes,metaData.v.GeospatialColumnIndexes),argumentRestrictions===Kusto.Charting.ArgumentRestrictions.GeospatialAsSeries){if(metaData.v.ArgumentDataColumnIndex=seriesOrArgumentDataIndex,!System.Linq.Enumerable.from(metaData.v.SeriesIndexesList,System.Int32).any()){$t=Bridge.getEnumerator(metaData.v.GeospatiaColumnlIndexesList);try{while($t.moveNext())geoColumnIndex=$t.Current,metaData.v.SeriesIndexesList.add(geoColumnIndex)}finally{Bridge.is($t,System.IDisposable)&&$t.System$IDisposable$Dispose()}}}else seriesOrArgumentDataIndex===-1||System.Linq.Enumerable.from(metaData.v.SeriesIndexesList,System.Int32).any()||metaData.v.SeriesIndexesList.add(seriesOrArgumentDataIndex);else!System.Linq.Enumerable.from(metaData.v.SeriesIndexesList,System.Int32).any()&&metaData.v.ArgumentDataColumnIndex>=0&&(seriesDefaultIndex=metaData.v.ArgumentDataColumnIndex,resolvedColumnTypes[System.Array.index(metaData.v.ArgumentDataColumnIndex,resolvedColumnTypes)]!==Kusto.Charting.ArgumentColumnType.String?seriesDefaultIndex=Kusto.Charting.DataChartsHelper.GetFirstStringColumnIndex(resolvedColumnTypes):System.Enum.hasFlag(argumentRestrictions,Bridge.box(Kusto.Charting.ArgumentRestrictions.NotIncludedInSeries,Kusto.Charting.ArgumentRestrictions,System.Enum.toStringFn(Kusto.Charting.ArgumentRestrictions)))&&(seriesDefaultIndex=metaData.v.ArgumentDataColumnIndex-1|0),metaData.v.IsDataFormedAsSeries||seriesDefaultIndex===-1&&System.Enum.hasFlag(argumentRestrictions,Bridge.box(Kusto.Charting.ArgumentRestrictions.NumericAsSeries,Kusto.Charting.ArgumentRestrictions,System.Enum.toStringFn(Kusto.Charting.ArgumentRestrictions)))&&(seriesDefaultIndex=Kusto.Charting.DataChartsHelper.GetFirstStringAvailableColumnIndexOrNonStringIfAbsent(resolvedColumnTypes,null),System.Enum.hasFlag(argumentRestrictions,Bridge.box(Kusto.Charting.ArgumentRestrictions.NotIncludedInSeries,Kusto.Charting.ArgumentRestrictions,System.Enum.toStringFn(Kusto.Charting.ArgumentRestrictions)))&&seriesDefaultIndex===metaData.v.ArgumentDataColumnIndex&&(seriesDefaultIndex=-1)),seriesDefaultIndex>=0&&!metaData.v.DataIndexesList.contains(seriesDefaultIndex)&&metaData.v.SeriesIndexesList.add(seriesDefaultIndex));return!0},GoBackwardsAndFindColumnNotInList:function(startIndex,seriesIndices,yIndexes){for(var isNotInSeries,isNotInYs,i=startIndex-1|0;i>=0;i=i-1|0)if(isNotInSeries=seriesIndices==null?!0:!System.Linq.Enumerable.from(seriesIndices,System.Int32).contains(i),isNotInYs=yIndexes==null?!0:!System.Linq.Enumerable.from(yIndexes,System.Int32).contains(i),isNotInSeries&&isNotInYs)return i;return-1},GetFirstStringColumnIndex:function(columns){for(var i=0;i<System.Linq.Enumerable.from(columns,Kusto.Charting.ArgumentColumnType).count();i=i+1|0)if(System.Linq.Enumerable.from(columns,Kusto.Charting.ArgumentColumnType).elementAt(i)===Kusto.Charting.ArgumentColumnType.String)return i;return-1},GetFirstStringAvailableColumnIndexOrNonStringIfAbsent:function(columns,indexesToExclude){for(var $t,$t1,nonStringIndex=-1,i=0;i<System.Linq.Enumerable.from(columns,Kusto.Charting.ArgumentColumnType).count();i=i+1|0)if(columns[System.Array.index(i,columns)]===Kusto.Charting.ArgumentColumnType.String&&($t=System.Nullable.not(indexesToExclude!=null?System.Linq.Enumerable.from(indexesToExclude,System.Int32).contains(i):null),$t!=null?$t:!0))return i;else nonStringIndex===-1&&($t1=System.Nullable.not(indexesToExclude!=null?System.Linq.Enumerable.from(indexesToExclude,System.Int32).contains(i):null),$t1!=null?$t1:!0)&&(nonStringIndex=i);return nonStringIndex},TimeSpanToDateTime:function(ts){return ts.getTicks().lte(System.Int64(0))?System.DateTime.getMinValue():System.DateTime.create$2(ts.getTicks(),1)},TimeSpanToTotalSeconds:function(ts){return ts.getTotalSeconds()},DateTimeToTotalSeconds:function(dt){return System.TimeSpan.fromTicks(System.DateTime.getTicks(dt)).getTotalSeconds()},ParseJsonArrayAsDateTime:function(value,columnType){if(System.String.isNullOrWhiteSpace(value)||!System.String.startsWith(value.trim(),\"[\",4))return null;try{if(columnType===Kusto.Charting.ArgumentColumnType.DateTime)return System.Linq.Enumerable.from(Newtonsoft.Json.JsonConvert.DeserializeObject(value,System.Array.type(System.DateTime)),System.DateTime).select($asm.$.Kusto.Charting.DataChartsHelper.f19).ToArray(System.DateTime);else if(columnType===Kusto.Charting.ArgumentColumnType.TimeSpan){var resultAsTimeSpan=Newtonsoft.Json.JsonConvert.DeserializeObject(value,System.Array.type(System.TimeSpan));return System.Linq.Enumerable.from(resultAsTimeSpan,System.TimeSpan).select($asm.$.Kusto.Charting.DataChartsHelper.f20).ToArray(System.DateTime)}}catch($e1){$e1=System.Exception.create($e1)}return null},ParseJsonArrayAsDouble:function(value,considerDateTimeAndTimeSpanAsDouble){var result,valueAsArr,resolvedValueType,d,i,val,ts,dt;if(considerDateTimeAndTimeSpanAsDouble===void 0&&(considerDateTimeAndTimeSpanAsDouble=!1),System.String.isNullOrWhiteSpace(value)||!System.String.startsWith(value.trim(),\"[\",4))return null;try{valueAsArr=Newtonsoft.Json.JsonConvert.DeserializeObject(value,System.Array.type(System.String));result=System.Array.init(System.Linq.Enumerable.from(valueAsArr,System.String).count(),0,System.Double)}catch($e1){return $e1=System.Exception.create($e1),null}for(resolvedValueType=Kusto.Charting.ArgumentColumnType.None,d={},i=0;i<valueAsArr.length;i=i+1|0){if(val=valueAsArr[System.Array.index(i,valueAsArr)],val==null){result[System.Array.index(i,result)]=Number.NaN;continue}else if(System.Enum.hasFlag(Kusto.Charting.ArgumentColumnType.Numeric,Bridge.box(resolvedValueType,Kusto.Charting.ArgumentColumnType,System.Enum.toStringFn(Kusto.Charting.ArgumentColumnType)))&&System.Double.tryParse(val,null,d)){resolvedValueType===Kusto.Charting.ArgumentColumnType.None&&(resolvedValueType=Kusto.Charting.ArgumentColumnType.Numeric);result[System.Array.index(i,result)]=d.v;continue}else if(considerDateTimeAndTimeSpanAsDouble){if(ts={},System.Enum.hasFlag(Kusto.Charting.ArgumentColumnType.TimeSpan,Bridge.box(resolvedValueType,Kusto.Charting.ArgumentColumnType,System.Enum.toStringFn(Kusto.Charting.ArgumentColumnType)))&&System.TimeSpan.tryParse(val,null,ts)){resolvedValueType===Kusto.Charting.ArgumentColumnType.None&&(resolvedValueType=Kusto.Charting.ArgumentColumnType.TimeSpan);result[System.Array.index(i,result)]=ts.v.getTotalSeconds();continue}if(dt={},System.Enum.hasFlag(Kusto.Charting.ArgumentColumnType.DateTime,Bridge.box(resolvedValueType,Kusto.Charting.ArgumentColumnType,System.Enum.toStringFn(Kusto.Charting.ArgumentColumnType)))&&System.DateTime.tryParse(val,null,dt)){resolvedValueType===Kusto.Charting.ArgumentColumnType.None&&(resolvedValueType=Kusto.Charting.ArgumentColumnType.DateTime);result[System.Array.index(i,result)]=System.TimeSpan.fromTicks(System.DateTime.getTicks(dt.v)).getTotalSeconds();continue}}return null}return resolvedValueType!==Kusto.Charting.ArgumentColumnType.None?result:null},ParseJsonArrayAsString:function(value){if(System.String.isNullOrWhiteSpace(value)||!System.String.startsWith(value.trim(),\"[\",4))return null;try{return Newtonsoft.Json.JsonConvert.DeserializeObject(value,System.Array.type(System.String))}catch($e1){$e1=System.Exception.create($e1)}return null},ArrayIsTimespan:function(arr){var $t,hasTimeSpanValues=!1,ts={},val;$t=Bridge.getEnumerator(arr);try{while($t.moveNext()){if(val=$t.Current,val==null)continue;else if(System.TimeSpan.tryParse(val,null,ts)){hasTimeSpanValues=!0;continue}return!1}}finally{Bridge.is($t,System.IDisposable)&&$t.System$IDisposable$Dispose()}return hasTimeSpanValues},ArrayIsDatetime:function(arr){var $t,hasDateTimeValues=!1,d={},val;$t=Bridge.getEnumerator(arr);try{while($t.moveNext()){if(val=$t.Current,val==null)continue;else if(System.DateTime.tryParse(val,null,d)){hasDateTimeValues=!0;continue}return!1}}finally{Bridge.is($t,System.IDisposable)&&$t.System$IDisposable$Dispose()}return hasDateTimeValues},ArrayIsDouble:function(arr){var $t,hasNumericValues=!1,d={},val;$t=Bridge.getEnumerator(arr);try{while($t.moveNext()){if(val=$t.Current,val==null)continue;else if(System.Double.tryParse(val,null,d)){hasNumericValues=!0;continue}return!1}}finally{Bridge.is($t,System.IDisposable)&&$t.System$IDisposable$Dispose()}return hasNumericValues},IsEmptyValue:function(value){return value==null?!0:Bridge.referenceEquals(value,System.DBNull.Value)?!0:Bridge.is(value,System.String)&&System.String.isNullOrEmpty(Bridge.cast(value,System.String))?!0:!1}}}});Bridge.ns(\"Kusto.Charting.DataChartsHelper\",$asm.$);Bridge.apply($asm.$.Kusto.Charting.DataChartsHelper,{f1:function(col,index){return new Kusto.Charting.DataChartsHelper.ColumnDesc(col.Item1,col.Item2,index)},f2:function(colIndex){return colIndex>=0},f3:function(kvp){return!Kusto.Charting.ExtendedDouble.IsFinite(kvp.value)},f4:function(kvp){return kvp.key},f5:function(_){return!0},f6:function(kvp){return kvp.value.TotalPoints.gte(kvp.value.NonNanPoints.mul(System.Int64(2)))},f7:function(d){return d.SeriesName},f8:function(d){return d},f9:function(d){return System.DateTime.getTicks(d.ArgumentDateTime)},f10:function(d){return System.Convert.toDouble(System.DateTime.getTicks(d.ArgumentDateTime))},f11:function(d){return d.ArgumentNumeric},f12:function(d){return!Bridge.equals(d.ArgumentDateTime,Kusto.Charting.DataChartsHelper.c_defaultArgumentDatetime)},f13:function(d){return!isNaN(d.ArgumentNumeric)},f14:function(d){return Math.abs(d.ValueData)===Number.POSITIVE_INFINITY},f15:function(d){return d.GeoCoordinates!=null&&(d.GeoCoordinates.Longitude>180||d.GeoCoordinates.Longitude<-180||d.GeoCoordinates.Latitude>90||d.GeoCoordinates.Latitude<-90)},f16:function(o){return Kusto.Charting.DataChartsHelper.ParseJsonArrayAsString(Bridge.as(o,System.String))||o},f17:function(a,b){return{Item1:a,Item2:b}},f18:function(c){return c.Item2},f19:function(dt){return Kusto.Cloud.Platform.Utils.ExtendedDateTime.ToUtc(dt)},f20:function(ts){return Kusto.Charting.DataChartsHelper.TimeSpanToDateTime(ts)}});Bridge.define(\"Kusto.Charting.DataChartsHelper.ArgumentData\",{$kind:\"nested class\",fields:{m_requestedType:0,m_colIndex:0,m_colName:null,m_colType:0,m_geospatialIndexes:null},props:{GeospatialArgumentDataType:0,Value:null,DateTime:null,NumericValue:0,GeoCoordinates:null},ctors:{init:function(){this.DateTime=System.DateTime.getDefaultValue()},ctor:function(colIndex,colName,colType,requestedType,geospatialColumnIndexes){geospatialColumnIndexes===void 0&&(geospatialColumnIndexes=null);var $t;this.$initialize();this.m_colIndex=colIndex;this.m_colName=colName;this.m_colType=colType;this.m_requestedType=requestedType;geospatialColumnIndexes!=null&&System.Linq.Enumerable.from(geospatialColumnIndexes,System.Int32).any()?(this.m_geospatialIndexes=($t=System.Int32,System.Linq.Enumerable.from(geospatialColumnIndexes,$t).toList($t)),this.GeospatialArgumentDataType=Kusto.Charting.ArgumentColumnType.Geospatial):this.GeospatialArgumentDataType=Kusto.Charting.ArgumentColumnType.None}},methods:{ResolveArgumentFromRow:function(table,rowIndex){var $t,$t1,$t2,longitudeValue,latitudeValue,geojsonPoint;if(this.m_requestedType!==Kusto.Charting.ArgumentColumnType.Geospatial){this.ResolveArgument(table,rowIndex);return}this.m_geospatialIndexes.Count===2?(longitudeValue=table.Kusto$Charting$IChartingDataSource$GetValue(rowIndex,this.m_geospatialIndexes.getItem(0)),latitudeValue=table.Kusto$Charting$IChartingDataSource$GetValue(rowIndex,this.m_geospatialIndexes.getItem(1)),this.GeoCoordinates=($t=new Kusto.Charting.GeospatialCoordinates,$t.Longitude=Kusto.Charting.DataChartsHelper.TryConvertToDouble(longitudeValue,Kusto.Charting.ArgumentColumnType.Numeric),$t.Latitude=Kusto.Charting.DataChartsHelper.TryConvertToDouble(latitudeValue,Kusto.Charting.ArgumentColumnType.Numeric),$t)):(geojsonPoint={},this.GeoCoordinates=this.m_geospatialIndexes.Count===1&&Kusto.Charting.DataChartsHelper.TrySetGeoJSONPoint(Bridge.toString(table.Kusto$Charting$IChartingDataSource$GetValue(rowIndex,this.m_geospatialIndexes.getItem(0))),geojsonPoint)?($t=new Kusto.Charting.GeospatialCoordinates,$t.Longitude=($t1=geojsonPoint.v.coordinates)[System.Array.index(0,$t1)],$t.Latitude=($t2=geojsonPoint.v.coordinates)[System.Array.index(1,$t2)],$t):($t=new Kusto.Charting.GeospatialCoordinates,$t.Longitude=Kusto.Charting.DataChartsHelper.c_defaultArgumentNumeric,$t.Latitude=Kusto.Charting.DataChartsHelper.c_defaultArgumentNumeric,$t));this.m_colIndex!==-1&&this.ResolveArgument(table,rowIndex,!0)},ResolveArgument:function(table,rowIndex,includeColName){var argumentValue,argumentActualType,value;includeColName===void 0&&(includeColName=!1);argumentValue=table.Kusto$Charting$IChartingDataSource$GetValue(rowIndex,this.m_colIndex);argumentActualType=argumentValue==null?this.m_requestedType:this.m_colType;this.DateTime=Kusto.Charting.DataChartsHelper.GetArgumentDateTime(argumentValue,argumentActualType);value=this.m_colIndex>=0&&argumentValue!=null?Bridge.toString(argumentValue):\"\";System.String.isNullOrWhiteSpace(value)&&(value=Kusto.Charting.DataChartsHelper.c_defaultArgumentString);this.Value=includeColName?System.String.format(\"{0}:{1}\",this.m_colName,value):value;this.NumericValue=!System.Enum.hasFlag(argumentActualType,Bridge.box(Kusto.Charting.ArgumentColumnType.Numeric,Kusto.Charting.ArgumentColumnType,System.Enum.toStringFn(Kusto.Charting.ArgumentColumnType)))||Kusto.Charting.DataChartsHelper.IsEmptyValue(argumentValue)?Kusto.Charting.DataChartsHelper.c_defaultArgumentNumeric:Kusto.Charting.DataChartsHelper.TryConvertToDouble(argumentValue,argumentActualType)}}});Bridge.define(\"Kusto.Charting.IChartMetaData\",{$kind:\"interface\"});Bridge.define(\"Kusto.Charting.DataChartsHelper.ColumnDesc\",{$kind:\"nested class\",props:{Name:null,Type:0,Index:0},ctors:{ctor:function(name,type,index){this.$initialize();this.Name=name;this.Type=type;this.Index=index}}});Bridge.define(\"Kusto.Charting.DataChartsHelper.GeoJSON\",{$kind:\"nested enum\",statics:{fields:{Point:0}}});Bridge.define(\"Kusto.Charting.DataChartsHelper.GeoJSONPoint\",{$kind:\"nested class\",props:{type:0,coordinates:null}});Bridge.define(\"Kusto.Charting.DataChartsHelper.SeriesStatsCounters\",{$kind:\"nested class\",fields:{TotalPoints:System.Int64(0),NonNanPoints:System.Int64(0)}});Bridge.define(\"Kusto.Charting.DataItem\",{props:{SeriesName:null,ArgumentData:null,ValueData:0,ValueName:null,ArgumentDateTime:null,ArgumentNumeric:0,GeoCoordinates:null,SecondaryAxisYName:null,PrefferredChartKind:0,Properties:null,PropertiesTruncated:{get:function(){if(System.String.isNullOrEmpty(this.Properties))return\"\";var maxLen=150;return this.Properties.length<maxLen?this.Properties:(this.Properties.substr(0,maxLen)||\"\")+\"...\"}}},ctors:{init:function(){this.ArgumentDateTime=System.DateTime.getDefaultValue()},ctor:function(){this.$initialize()},$ctor1:function(other){var $t;this.$initialize();this.SeriesName=other.SeriesName;this.ArgumentData=other.ArgumentData;this.ValueData=other.ValueData;this.ValueName=other.ValueName;this.ArgumentDateTime=other.ArgumentDateTime;this.ArgumentNumeric=other.ArgumentNumeric;this.SecondaryAxisYName=other.SecondaryAxisYName;this.PrefferredChartKind=other.PrefferredChartKind;this.Properties=other.Properties;this.GeoCoordinates=other.GeoCoordinates==null?null:($t=new Kusto.Charting.GeospatialCoordinates,$t.Longitude=other.GeoCoordinates.Longitude,$t.Latitude=other.GeoCoordinates.Latitude,$t)}},methods:{Clone:function(){return new Kusto.Charting.DataItem.$ctor1(this)}}});Bridge.define(\"Kusto.Charting.ExtendedDouble\",{statics:{methods:{IsFinite:function(d){return!(Math.abs(d)===Number.POSITIVE_INFINITY)&&!isNaN(d)}}}});Bridge.define(\"Kusto.Charting.GeospatialCoordinates\",{props:{Longitude:0,Latitude:0}});Bridge.define(\"Kusto.Charting.IChartingDataSource\",{$kind:\"interface\"});Bridge.define(\"Kusto.Charting.IKustoClientContext\",{$kind:\"interface\"});Bridge.define(\"Kusto.Charting.SeriesCreationException\",{inherits:[System.Exception],ctors:{ctor:function(error){this.$initialize();System.Exception.ctor.call(this,error)}}});Bridge.define(\"Kusto.Charting.ValidationStatus\",{$kind:\"enum\",statics:{fields:{Valid:0,PolicyViolationError:1,PolicyViolationWarning:2}}});Bridge.define(\"Kusto.Cloud.Platform.Text.StringLiteral\",{statics:{fields:{MultiLineStringQuote:null,AlternateMultiLineStringQuote:null,categoryForLatin1:null},ctors:{init:function(){this.MultiLineStringQuote=\"```\";this.AlternateMultiLineStringQuote=\"~~~\";this.categoryForLatin1=System.Array.init([14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,11,24,24,24,26,24,24,24,20,21,24,25,24,19,24,24,8,8,8,8,8,8,8,8,8,8,24,24,25,25,25,24,24,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,24,21,27,18,27,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,20,25,21,25,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,11,24,26,26,26,26,28,28,27,28,1,22,25,19,28,27,28,25,10,10,27,1,28,24,27,10,1,23,10,10,10,24,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,25,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,25,1,1,1,1,1,1,1,1],System.Byte)}},methods:{ParseStringLiteral:function(literal){var _discard1={};return Kusto.Cloud.Platform.Text.StringLiteral.ParseStringLiteral$1(literal,_discard1)},ParseStringLiteral$1:function(literal,isHidden){var result={};if(Kusto.Cloud.Platform.Text.StringLiteral.TryParseStringLiteral$1(literal,result,isHidden))return result.v;throw new System.ArgumentException.$ctor1(System.String.format(\"Malformed string literal: '{0}'\",[literal]));},TryParseStringLiteral:function(str,literal){var _discard2={};return Kusto.Cloud.Platform.Text.StringLiteral.TryParseStringLiteral$1(str,literal,_discard2)},TryParseStringLiteral$1:function(str,literal,isHidden){var multiLineLiteral,ret,ret1;if(literal.v=str,isHidden.v=!1,System.String.isNullOrWhiteSpace(literal.v))return!1;if((literal.v.charCodeAt(0)===104||literal.v.charCodeAt(0)===72)&&(isHidden.v=!0,literal.v=literal.v.substr(1)),multiLineLiteral={},Kusto.Cloud.Platform.Text.StringLiteral.TryParseMultiLineStringLiteral(literal.v,multiLineLiteral))return literal.v=multiLineLiteral.v,!0;if(System.String.startsWith(literal.v,'\"',4)){if(literal.v.length>=2&&System.String.endsWith(literal.v,'\"'))return(literal.v=literal.v.substr(1,literal.v.length-2|0),!Kusto.Cloud.Platform.Utils.ExtendedRegex.TryUnescape(literal.v,literal))?!1:!0}else if(System.String.startsWith(literal.v,\"'\",4)){if(literal.v.length>=2&&System.String.endsWith(literal.v,\"'\",4))return(literal.v=literal.v.substr(1,literal.v.length-2|0),!Kusto.Cloud.Platform.Utils.ExtendedRegex.TryUnescape(literal.v,literal))?!1:!0}else if(System.String.startsWith(literal.v,'@\"',4)){if(literal.v.length>=3&&System.String.endsWith(literal.v,'\"',4))return ret=literal.v.substr(2,literal.v.length-3|0),literal.v=System.String.replaceAll(ret,'\"\"','\"'),!0}else if(System.String.startsWith(literal.v,\"@'\",4)&&literal.v.length>=3&&System.String.endsWith(literal.v,\"'\",4))return ret1=literal.v.substr(2,literal.v.length-3|0),literal.v=System.String.replaceAll(ret1,\"''\",\"'\"),!0;return!1},Equals:function(str1,str2){return str1==null&&str2==null?!0:str1==null||str2==null?!1:System.String.equals(str1,str2,4)},TrimSingleQuotes:function(name){return System.String.isNullOrWhiteSpace(name)?name:(System.String.startsWith(name,\"'\",4)&&System.String.endsWith(name,\"'\",4)&&name.length>=2&&(name=name.substr(1,name.length-2|0)),name)},TrimBrackets:function(input){return System.String.startsWith(input,\"[\",4)&&System.String.endsWith(input,\"]\",4)&&input.length>=2&&(input=input.substr(1,input.length-2|0)),input},InitArray:function(T,arr,value){if(arr!=null)for(var i=0;i<arr.length;i=i+1|0)arr[System.Array.index(i,arr)]=value},GetLiteral:function(value){return Kusto.Cloud.Platform.Text.StringLiteral.GetLiteral$1(value,!1)},GetLiteral$1:function(value,hidden){var $t,literal,c;if(value==null)return null;literal=new System.Text.StringBuilder;hidden&&literal.append(\"h\");literal.append('\"');$t=Bridge.getEnumerator(value);try{while($t.moveNext()){c=$t.Current;switch(c){case 39:literal.append(\"\\\\'\");break;case 34:literal.append('\\\\\"');break;case 92:literal.append(\"\\\\\\\\\");break;case 0:literal.append(\"\\\\0\");break;case 7:literal.append(\"\\\\a\");break;case 8:literal.append(\"\\\\b\");break;case 12:literal.append(\"\\\\f\");break;case 10:literal.append(\"\\\\n\");break;case 13:literal.append(\"\\\\r\");break;case 9:literal.append(\"\\\\t\");break;case 11:literal.append(\"\\\\v\");break;default:Kusto.Cloud.Platform.Text.StringLiteral.ShouldBeEscaped(c)?(literal.append(\"\\\\u\"),literal.append(System.UInt16.format(c,\"x4\"))):literal.append(String.fromCharCode(c));break}}}finally{Bridge.is($t,System.IDisposable)&&$t.System$IDisposable$Dispose()}return literal.append('\"'),literal.toString()},GetLiteralAsHiddenString:function(value){return Kusto.Cloud.Platform.Text.StringLiteral.GetLiteral$1(value,!0)},TryParseMultiLineStringLiteral:function(str,literal){return Kusto.Cloud.Platform.Text.StringLiteral.TryParseSimpleStringLiteral(str,Kusto.Cloud.Platform.Text.StringLiteral.MultiLineStringQuote,literal)||Kusto.Cloud.Platform.Text.StringLiteral.TryParseSimpleStringLiteral(str,Kusto.Cloud.Platform.Text.StringLiteral.AlternateMultiLineStringQuote,literal)},TryParseSimpleStringLiteral:function(str,quote,literal){if(System.String.startsWith(str,quote,4)){var twiceQuoteLen=quote.length<<1;return str.length>=twiceQuoteLen&&System.String.endsWith(str,quote,4)?(literal.v=str.substr(quote.length,str.length-twiceQuoteLen|0),!0):(literal.v=str.substr(quote.length),!0)}return literal.v=null,!1},ShouldBeEscaped:function(c){return Kusto.Cloud.Platform.Text.StringLiteral.IsLatin1(c)?Kusto.Cloud.Platform.Text.StringLiteral.GetLatin1UnicodeCategory(c)===14:!0},GetLatin1UnicodeCategory:function(ch){return Kusto.Cloud.Platform.Text.StringLiteral.categoryForLatin1[System.Array.index(ch,Kusto.Cloud.Platform.Text.StringLiteral.categoryForLatin1)]},IsLatin1:function(ch){return ch<=255},IsAscii:function(ch){return ch<=127}}}});Bridge.define(\"Kusto.Cloud.Platform.Utils.BitTwiddling\",{statics:{methods:{CountBits:function(n){for(var ret=0;n!==0;)n=n&(n-1|0),ret=ret+1|0;return ret},CountBits$1:function(n){for(var ret=0;n.ne(System.Int64(0));)n=n.and(n.sub(System.Int64(1))),ret=ret+1|0;return ret}}}});Bridge.define(\"Kusto.Cloud.Platform.Utils.ChopOptions\",{$kind:\"enum\",statics:{fields:{ChopFromBeginning:1,ChopFromEnd:2,ChopFromMiddle:4,ThreeDotsCharacterNotSupported:8}}});Bridge.define(\"Kusto.Cloud.Platform.Utils.CountConstants\",{statics:{fields:{_1K:0,_64K:0,_1M:0},ctors:{init:function(){this._1K=1e3;this._64K=64e3;this._1M=1e6}}}});Bridge.define(\"Kusto.Cloud.Platform.Utils.DateTimeRange\",{inherits:function(){return[System.IEquatable$1(Kusto.Cloud.Platform.Utils.DateTimeRange)]},$kind:\"struct\",statics:{fields:{All:null},ctors:{init:function(){this.All=new Kusto.Cloud.Platform.Utils.DateTimeRange;this.All=new Kusto.Cloud.Platform.Utils.DateTimeRange.$ctor1(Kusto.Cloud.Platform.Utils.ExtendedDateTime.MinValueUtc,Kusto.Cloud.Platform.Utils.ExtendedDateTime.MaxValueUtc)}},methods:{Aggregate:function(a,b){return new Kusto.Cloud.Platform.Utils.DateTimeRange.$ctor1(System.DateTime.gt(a.Begin,b.Begin)?b.Begin:a.Begin,System.DateTime.gt(a.End,b.End)?a.End:b.End)},Merge:function(ranges){var $t,count=Kusto.Cloud.Platform.Utils.ExtendedEnumerable.SafeFastCountUpTo(Kusto.Cloud.Platform.Utils.DateTimeRange,ranges,System.Int64(2)),range;if(count.equals(System.Int64(0)))return new(System.Collections.Generic.HashSet$1(Kusto.Cloud.Platform.Utils.DateTimeRange).ctor);else if(count.equals(System.Int64(1)))return new(System.Collections.Generic.HashSet$1(Kusto.Cloud.Platform.Utils.DateTimeRange).$ctor1)(ranges);var result=new(System.Collections.Generic.HashSet$1(Kusto.Cloud.Platform.Utils.DateTimeRange).ctor),orderedRanges=System.Linq.Enumerable.from(ranges,Kusto.Cloud.Platform.Utils.DateTimeRange).orderBy($asm.$.Kusto.Cloud.Platform.Utils.DateTimeRange.f1),firstItem=!0,begin=null,end=null;$t=Bridge.getEnumerator(orderedRanges);try{while($t.moveNext())range=$t.Current,firstItem&&(begin=range.Begin,end=range.End,firstItem=!1),System.DateTime.lte(range.Begin,end)?System.DateTime.lt(end,range.End)&&(end=range.End):(result.add(new Kusto.Cloud.Platform.Utils.DateTimeRange.$ctor1(System.Nullable.getValue(begin),System.Nullable.getValue(end))),begin=range.Begin,end=range.End)}finally{Bridge.is($t,System.IDisposable)&&$t.System$IDisposable$Dispose()}return result.add(new Kusto.Cloud.Platform.Utils.DateTimeRange.$ctor1(System.Nullable.getValue(begin),System.Nullable.getValue(end))),result},Intersect:function(rangeGroupA,rangeGroupB){var $t,$t1,intersectedTimeRanges,rangeFromA;if(Kusto.Cloud.Platform.Utils.ExtendedEnumerable.SafeFastNone$2(Kusto.Cloud.Platform.Utils.DateTimeRange,rangeGroupA)||Kusto.Cloud.Platform.Utils.ExtendedEnumerable.SafeFastNone$2(Kusto.Cloud.Platform.Utils.DateTimeRange,rangeGroupB))return new(System.Collections.Generic.HashSet$1(Kusto.Cloud.Platform.Utils.DateTimeRange).ctor);intersectedTimeRanges=new(System.Collections.Generic.HashSet$1(Kusto.Cloud.Platform.Utils.DateTimeRange).ctor);$t=Bridge.getEnumerator(rangeGroupA,Kusto.Cloud.Platform.Utils.DateTimeRange);try{while($t.moveNext()){rangeFromA=$t.Current;$t1=Bridge.getEnumerator(rangeGroupB,Kusto.Cloud.Platform.Utils.DateTimeRange);try{while($t1.moveNext()){var rangeFromB=$t1.Current,intersectedStart=System.DateTime.create$2(System.Int64.max(System.DateTime.getTicks(rangeFromA.Begin),System.DateTime.getTicks(rangeFromB.Begin)),1),intersectedEnd=System.DateTime.create$2(System.Int64.min(System.DateTime.getTicks(rangeFromA.End),System.DateTime.getTicks(rangeFromB.End)),1);System.DateTime.lte(intersectedStart,intersectedEnd)&&intersectedTimeRanges.add(new Kusto.Cloud.Platform.Utils.DateTimeRange.$ctor1(intersectedStart,intersectedEnd))}}finally{Bridge.is($t1,System.IDisposable)&&$t1.System$IDisposable$Dispose()}}}finally{Bridge.is($t,System.IDisposable)&&$t.System$IDisposable$Dispose()}return intersectedTimeRanges},getDefaultValue:function(){return new Kusto.Cloud.Platform.Utils.DateTimeRange}}},fields:{m_begin:null,m_end:null},props:{Begin:{get:function(){return this.m_begin}},End:{get:function(){return this.m_end}},Span:{get:function(){return System.DateTime.subdd(this.End,this.Begin)}},IsOpenRange:{get:function(){return Bridge.equalsT(this.Begin,Kusto.Cloud.Platform.Utils.ExtendedDateTime.MinValueUtc)||Bridge.equalsT(this.End,Kusto.Cloud.Platform.Utils.ExtendedDateTime.MaxValueUtc)}}},alias:[\"equalsT\",\"System$IEquatable$1$Kusto$Cloud$Platform$Utils$DateTimeRange$equalsT\"],ctors:{init:function(){this.m_begin=System.DateTime.getDefaultValue();this.m_end=System.DateTime.getDefaultValue()},$ctor1:function(begin,end){this.$initialize();this.m_begin=begin;this.m_end=end;throw new System.ArgumentException.$ctor1(\"DateTimeRange construction: End parameter should be later than Begin parameter\");},ctor:function(){this.$initialize()}},methods:{IsInRangeInclusive:function(value){return System.DateTime.lte(this.Begin,value)&&System.DateTime.lte(value,this.End)},IsInRangeExclusive:function(value){return System.DateTime.lt(this.Begin,value)&&System.DateTime.lt(value,this.End)},equalsT:function(other){return Bridge.equalsT(this.Begin,other.Begin)&&Bridge.equalsT(this.End,other.End)},equals:function(other){return other==null?!1:Bridge.is(other,Kusto.Cloud.Platform.Utils.DateTimeRange)?this.equalsT(System.Nullable.getValue(Bridge.cast(Bridge.unbox(other,Kusto.Cloud.Platform.Utils.DateTimeRange),Kusto.Cloud.Platform.Utils.DateTimeRange))):!1},getHashCode:function(){return Bridge.getHashCode(this.Begin)^Bridge.getHashCode(this.End)},toString:function(){return System.String.formatProvider(System.Globalization.CultureInfo.invariantCulture,\"[Begin={0}, End={1}]\",System.DateTime.format(this.Begin,\"R\"),System.DateTime.format(this.End,\"R\"))},$clone:function(to){var s=to||new Kusto.Cloud.Platform.Utils.DateTimeRange;return s.m_begin=this.m_begin,s.m_end=this.m_end,s}}});Bridge.ns(\"Kusto.Cloud.Platform.Utils.DateTimeRange\",$asm.$);Bridge.apply($asm.$.Kusto.Cloud.Platform.Utils.DateTimeRange,{f1:function(r){return r.Begin}});Bridge.define(\"Kusto.Cloud.Platform.Utils.ExtendedDateTime\",{statics:{fields:{MaxUnixTimeMilliseconds:System.Int64(0),MinUnixTimeMilliseconds:System.Int64(0),MaxUnixTimeMicroseconds:System.Int64(0),MinUnixTimeMicroseconds:System.Int64(0),MicrosecondsPerMillisecond:System.Int64(0),TicksPerMillisecond:System.Int64(0),TicksPerSecond:System.Int64(0),TicksPerMinute:System.Int64(0),TicksPerHour:System.Int64(0),TicksPerDay:System.Int64(0),MillisPerSecond:0,MillisPerMinute:0,MillisPerHour:0,MillisPerDay:0,DaysPerYear:0,DaysPer4Years:0,DaysPer100Years:0,DaysPer400Years:0,DaysTo1601:0,DaysTo1899:0,DaysTo1970:0,DaysTo10000:0,MinTicks:System.Int64(0),MaxTicks:System.Int64(0),MaxMillis:System.Int64(0),FileTimeOffset:System.Int64(0),DoubleDateOffset:System.Int64(0),OADateMinAsTicks:System.Int64(0),OADateMinAsDouble:0,OADateMaxAsDouble:0,DatePartYear:0,DatePartDayOfYear:0,DatePartMonth:0,DatePartDay:0,MinValueUtc:null,MaxValueUtc:null,SupportedNonStandardFormats:null,EpochStart:null,s_simulating:!1,s_numCharactersInIso8601:0,ts_lastUtcNow:null,ts_lastUtcNowAsString:null,DaysToMonth365:null,DaysToMonth366:null},events:{OnStopSimulatingTime:null},props:{IsSimulatingTime:{get:function(){return Kusto.Cloud.Platform.Utils.ExtendedDateTime.s_simulating}},UtcNow:{get:function(){return System.DateTime.getUtcNow()}}},ctors:{init:function(){this.MinValueUtc=System.DateTime.getDefaultValue();this.MaxValueUtc=System.DateTime.getDefaultValue();this.EpochStart=System.DateTime.getDefaultValue();this.ts_lastUtcNow=System.DateTime.getDefaultValue();this.MaxUnixTimeMilliseconds=System.Int64([-769664001,58999]);this.MinUnixTimeMilliseconds=System.Int64([-304928768,-14468]);this.MaxUnixTimeMicroseconds=System.Int64([-864855016,58999820]);this.MinUnixTimeMicroseconds=System.Int64([13910016,-14467071]);this.MicrosecondsPerMillisecond=System.Int64(1e3);this.TicksPerMillisecond=System.Int64(1e4);this.TicksPerSecond=System.Int64(1e7);this.TicksPerMinute=System.Int64(6e8);this.TicksPerHour=System.Int64([1640261632,8]);this.TicksPerDay=System.Int64([711573504,201]);this.MillisPerSecond=1e3;this.MillisPerMinute=6e4;this.MillisPerHour=36e5;this.MillisPerDay=864e5;this.DaysPerYear=365;this.DaysPer4Years=1461;this.DaysPer100Years=36524;this.DaysPer400Years=146097;this.DaysTo1601=584388;this.DaysTo1899=693593;this.DaysTo1970=719162;this.DaysTo10000=3652059;this.MinTicks=System.Int64(0);this.MaxTicks=System.Int64([-197705729,734668917]);this.MaxMillis=System.Int64([-464735232,73466]);this.FileTimeOffset=System.Int64([578224128,117558807]);this.DoubleDateOffset=System.Int64([-880558080,139527104]);this.OADateMinAsTicks=System.Int64([-1362739200,7273949]);this.OADateMinAsDouble=-657435;this.OADateMaxAsDouble=2958466;this.DatePartYear=0;this.DatePartDayOfYear=1;this.DatePartMonth=2;this.DatePartDay=3;this.MinValueUtc=System.DateTime.create$2(System.DateTime.getTicks(System.DateTime.getMinValue()),1);this.MaxValueUtc=System.DateTime.create$2(System.DateTime.getTicks(System.DateTime.getMaxValue()),1);this.SupportedNonStandardFormats=$asm.$.Kusto.Cloud.Platform.Utils.ExtendedDateTime.f1(new(System.Collections.Generic.Dictionary$2(System.Int32,System.Array.type(System.String)).ctor));this.EpochStart=System.DateTime.create(1970,1,1,0,0,0,0,1);this.s_numCharactersInIso8601=System.DateTime.format(Kusto.Cloud.Platform.Utils.ExtendedDateTime.MinValueUtc,\"O\").length;this.ts_lastUtcNow=Kusto.Cloud.Platform.Utils.ExtendedDateTime.MinValueUtc;this.ts_lastUtcNowAsString=System.DateTime.format(Kusto.Cloud.Platform.Utils.ExtendedDateTime.ts_lastUtcNow,\"O\");this.DaysToMonth365=System.Array.init([0,31,59,90,120,151,181,212,243,273,304,334,365],System.Int32);this.DaysToMonth366=System.Array.init([0,31,60,91,121,152,182,213,244,274,305,335,366],System.Int32)}},methods:{StopSimulatingTime:function(){Kusto.Cloud.Platform.Utils.ExtendedDateTime.s_simulating=!1;Bridge.staticEquals(Kusto.Cloud.Platform.Utils.ExtendedDateTime.OnStopSimulatingTime,null)||Kusto.Cloud.Platform.Utils.ExtendedDateTime.OnStopSimulatingTime()},ToUtcString:function(value){return Kusto.Cloud.Platform.Utils.ExtendedDateTime.ToUtcString$1(value,System.Globalization.CultureInfo.invariantCulture)},ToUtcString$1:function(value,culture){var inputTime=value,utcTime=inputTime;return System.DateTime.getKind(inputTime)===0?utcTime=System.DateTime.create$2(System.DateTime.getTicks(value),1):System.DateTime.getKind(inputTime)===2&&(utcTime=System.DateTime.toUniversalTime(inputTime)),System.String.formatProvider(culture,\"{0:yyyy-MM-dd HH:mm:ss.fffffff}\",[Bridge.box(utcTime,System.DateTime,System.DateTime.format)])},Max:function(t1,t2){return System.DateTime.gt(t1,t2)?t1:t2},Max$1:function(t1,t2){return Bridge.equals(t2,null)?t1:Bridge.equals(t1,null)?t2:Kusto.Cloud.Platform.Utils.ExtendedDateTime.Max(System.Nullable.getValue(t1),System.Nullable.getValue(t2))},Min:function(t1,t2){return System.DateTime.lt(t1,t2)?t1:t2},Min$1:function(t1,t2){return Bridge.equals(t2,null)?t1:Bridge.equals(t1,null)?t2:Kusto.Cloud.Platform.Utils.ExtendedDateTime.Min(System.Nullable.getValue(t1),System.Nullable.getValue(t2))},RangesIntersect:function(firstStart,firstEnd,secondStart,secondEnd){return System.DateTime.gte(firstStart,secondStart)&&System.DateTime.lte(firstStart,secondEnd)||System.DateTime.gte(firstEnd,secondStart)&&System.DateTime.lte(firstEnd,secondEnd)||System.DateTime.gte(secondStart,firstStart)&&System.DateTime.lte(secondStart,firstEnd)||System.DateTime.gte(secondEnd,firstStart)&&System.DateTime.lte(secondEnd,firstEnd)},SafeAdd:function(datetime,value){var highBound=System.DateTime.subdd(System.DateTime.getMaxValue(),datetime),lowBound=System.DateTime.subdd(datetime,System.DateTime.getMinValue()).negate();return System.TimeSpan.lte(lowBound,value)&&System.TimeSpan.lte(value,highBound)?System.DateTime.add(datetime,value):System.TimeSpan.gt(value,highBound)?System.DateTime.getMaxValue():System.DateTime.getMinValue()},SafeSubtract:function(datetime,value){return System.TimeSpan.eq(value,System.TimeSpan.minValue)?System.DateTime.getMaxValue():Kusto.Cloud.Platform.Utils.ExtendedDateTime.SafeAdd(datetime,value.negate())},ToUnixTimeSpan:function(date){return System.DateTime.subdd(System.DateTime.toUniversalTime(date),Kusto.Cloud.Platform.Utils.ExtendedDateTime.EpochStart)},FromTimeSpan:function(timeSpan){return System.DateTime.create$2(timeSpan.getTicks())},ToZonalTimeDisplayString:function(dateTime){return System.DateTime.format(dateTime,\"yyyy-MM-dd HH:mm:ss zzz\")},ToUtc:function(value){switch(System.DateTime.getKind(value)){case 1:return value;case 0:return System.DateTime.create$2(System.DateTime.getTicks(value),1);case 2:return System.DateTime.toUniversalTime(value);default:throw new System.ArgumentException.$ctor1(System.String.format(\"DateTimeKind: {0} is not supported\",[Bridge.box(System.DateTime.getKind(value),System.DateTimeKind,System.Enum.toStringFn(System.DateTimeKind))]));}},FastAppendFormattedInt7:function(sb,value){var g=System.Int64.clipu16(System.Int64(48).add(value.mod(System.Int64(10)))),f,e,d,c,b,a;value=value.div(System.Int64(10));f=System.Int64.clipu16(System.Int64(48).add(value.mod(System.Int64(10))));value=value.div(System.Int64(10));e=System.Int64.clipu16(System.Int64(48).add(value.mod(System.Int64(10))));value=value.div(System.Int64(10));d=System.Int64.clipu16(System.Int64(48).add(value.mod(System.Int64(10))));value=value.div(System.Int64(10));c=System.Int64.clipu16(System.Int64(48).add(value.mod(System.Int64(10))));value=value.div(System.Int64(10));b=System.Int64.clipu16(System.Int64(48).add(value.mod(System.Int64(10))));value=value.div(System.Int64(10));a=System.Int64.clipu16(System.Int64(48).add(value.mod(System.Int64(10))));sb.append(String.fromCharCode(a));sb.append(String.fromCharCode(b));sb.append(String.fromCharCode(c));sb.append(String.fromCharCode(d));sb.append(String.fromCharCode(e));sb.append(String.fromCharCode(f));sb.append(String.fromCharCode(g))},FastAppendFormattedInt4:function(sb,value){var d=(48+value%10|0)&65535,c,b,a;value=Bridge.Int.div(value,10)|0;c=(48+value%10|0)&65535;value=Bridge.Int.div(value,10)|0;b=(48+value%10|0)&65535;value=Bridge.Int.div(value,10)|0;a=(48+value%10|0)&65535;sb.append(String.fromCharCode(a));sb.append(String.fromCharCode(b));sb.append(String.fromCharCode(c));sb.append(String.fromCharCode(d))},FastAppendFormattedInt2:function(sb,value){var b=(48+value%10|0)&65535,a;value=Bridge.Int.div(value,10)|0;a=(48+value%10|0)&65535;sb.append(String.fromCharCode(a));sb.append(String.fromCharCode(b))},FastGetParts:function(value,year,month,day,hour,minute,second,fraction){var ticks=System.DateTime.getTicks(value),n=System.Int64.clip32(ticks.div(Kusto.Cloud.Platform.Utils.ExtendedDateTime.TicksPerDay)),y400=Bridge.Int.div(n,Kusto.Cloud.Platform.Utils.ExtendedDateTime.DaysPer400Years)|0,y100,y4,y1;n=n-Bridge.Int.mul(y400,Kusto.Cloud.Platform.Utils.ExtendedDateTime.DaysPer400Years)|0;y100=Bridge.Int.div(n,Kusto.Cloud.Platform.Utils.ExtendedDateTime.DaysPer100Years)|0;y100===4&&(y100=3);n=n-Bridge.Int.mul(y100,Kusto.Cloud.Platform.Utils.ExtendedDateTime.DaysPer100Years)|0;y4=Bridge.Int.div(n,Kusto.Cloud.Platform.Utils.ExtendedDateTime.DaysPer4Years)|0;n=n-Bridge.Int.mul(y4,Kusto.Cloud.Platform.Utils.ExtendedDateTime.DaysPer4Years)|0;y1=Bridge.Int.div(n,Kusto.Cloud.Platform.Utils.ExtendedDateTime.DaysPerYear)|0;y1===4&&(y1=3);year.v=(((Bridge.Int.mul(y400,400)+Bridge.Int.mul(y100,100)|0)+Bridge.Int.mul(y4,4)|0)+y1|0)+1|0;n=n-Bridge.Int.mul(y1,Kusto.Cloud.Platform.Utils.ExtendedDateTime.DaysPerYear)|0;for(var leapYear=y1===3&&(y4!==24||y100===3),days=leapYear?Kusto.Cloud.Platform.Utils.ExtendedDateTime.DaysToMonth366:Kusto.Cloud.Platform.Utils.ExtendedDateTime.DaysToMonth365,m=n>>6;n>=days[System.Array.index(m,days)];)m=m+1|0;month.v=m;day.v=(n-days[System.Array.index(m-1|0,days)]|0)+1|0;hour.v=System.DateTime.getHour(value);minute.v=System.DateTime.getMinute(value);second.v=System.DateTime.getSecond(value);fraction.v=ticks.mod(Kusto.Cloud.Platform.Utils.ExtendedDateTime.TicksPerSecond)},FromUnixTimeSeconds$1:function(seconds){return System.DateTimeOffset.FromUnixTimeSeconds(seconds).UtcDateTime},FromUnixTimeSeconds:function(seconds){var secondsLong=Bridge.Int.clip64(seconds),additionTicks=Bridge.Int.clip64((seconds-System.Int64.toNumber(secondsLong))*Kusto.Cloud.Platform.Utils.ExtendedDateTime.TicksPerSecond);return System.DateTimeOffset.FromUnixTimeSeconds(secondsLong).AddTicks(additionTicks).UtcDateTime},FromUnixTimeMilliseconds$1:function(milliseconds){return System.DateTimeOffset.FromUnixTimeMilliseconds(milliseconds).UtcDateTime},FromUnixTimeMilliseconds:function(milliseconds){var millisecondsLong=Bridge.Int.clip64(milliseconds),additionTicks=Bridge.Int.clip64((milliseconds-System.Int64.toNumber(millisecondsLong))*Kusto.Cloud.Platform.Utils.ExtendedDateTime.TicksPerMillisecond);return System.DateTimeOffset.FromUnixTimeMilliseconds(millisecondsLong).AddTicks(additionTicks).UtcDateTime},FromUnixTimeMicroseconds$1:function(microseconds){var TicksPerMicrosecond=System.Int64(10),MicrosecondsPerMillisecond=System.Int64(1e3),milliseconds=microseconds.div(MicrosecondsPerMillisecond),additionTicks=microseconds.sub(milliseconds.mul(MicrosecondsPerMillisecond)).mul(TicksPerMicrosecond);return System.DateTimeOffset.FromUnixTimeMilliseconds(milliseconds).AddTicks(additionTicks).UtcDateTime},FromUnixTimeMicroseconds:function(microseconds){var TicksPerMicrosecond=System.Int64(10),MicrosecondsPerMillisecond=System.Int64(1e3),milliseconds=Bridge.Int.clip64(microseconds/MicrosecondsPerMillisecond),additionTicks=Bridge.Int.clip64((microseconds-System.Int64.toNumber(milliseconds.mul(MicrosecondsPerMillisecond)))*TicksPerMicrosecond);return System.DateTimeOffset.FromUnixTimeMilliseconds(milliseconds).AddTicks(additionTicks).UtcDateTime},FromUnixTimeNanoseconds$1:function(nanoseconds){var NanosecondsPerTick=System.Int64(100),NanosecondsPerMillisecond=System.Int64(1e6),milliseconds=nanoseconds.div(NanosecondsPerMillisecond),additionTicks=nanoseconds.sub(milliseconds.mul(NanosecondsPerMillisecond)).div(NanosecondsPerTick);return System.DateTimeOffset.FromUnixTimeMilliseconds(milliseconds).AddTicks(additionTicks).UtcDateTime},FromUnixTimeNanoseconds:function(nanoseconds){if(nanoseconds.lt(System.Int64.MinValue)||nanoseconds.gt(System.Int64.MaxValue))throw new System.ArgumentOutOfRangeException.$ctor4(\"nanoseconds\",System.String.format(\"Nanoseconds value ({0}) is out of range: {1}-{2}\",Bridge.box(nanoseconds,System.Double,System.Double.format,System.Double.getHashCode),System.Int64.MinValue,System.Int64.MaxValue));return Kusto.Cloud.Platform.Utils.ExtendedDateTime.FromUnixTimeNanoseconds$1(Bridge.Int.clip64(nanoseconds))}}}});Bridge.ns(\"Kusto.Cloud.Platform.Utils.ExtendedDateTime\",$asm.$);Bridge.apply($asm.$.Kusto.Cloud.Platform.Utils.ExtendedDateTime,{f1:function(_o1){return _o1.add(4,System.Array.init([\"yyyy\"],System.String)),_o1.add(6,System.Array.init([\"yyyyMM\"],System.String)),_o1.add(8,System.Array.init([\"yyyyMMdd\"],System.String)),_o1.add(10,System.Array.init([\"yyyyMMddHH\"],System.String)),_o1.add(12,System.Array.init([\"yyyyMMddHHmm\"],System.String)),_o1.add(14,System.Array.init([\"yyyyMMddHHmmss\"],System.String)),_o1.add(17,System.Array.init([\"yyyyMMdd HH:mm:ss\"],System.String)),_o1.add(19,System.Array.init([\"yyyyMMdd HH:mm:ss.f\"],System.String)),_o1.add(20,System.Array.init([\"yyyyMMdd HH:mm:ss.ff\"],System.String)),_o1.add(21,System.Array.init([\"yyyyMMdd HH:mm:ss.fff\"],System.String)),_o1.add(22,System.Array.init([\"yyyyMMdd HH:mm:ss.ffff\"],System.String)),_o1.add(23,System.Array.init([\"yyyyMMdd HH:mm:ss.fffff\"],System.String)),_o1.add(24,System.Array.init([\"yyyyMMdd HH:mm:ss.ffffff\"],System.String)),_o1.add(25,System.Array.init([\"yyyyMMdd HH:mm:ss.fffffff\"],System.String)),_o1}});Bridge.define(\"Kusto.Cloud.Platform.Utils.ExtendedDateTime.RoundTo\",{$kind:\"nested enum\",statics:{fields:{Second:0,Minute:1,Hour:2,Day:3}}});Bridge.define(\"Kusto.Cloud.Platform.Utils.ExtendedEnumerable\",{statics:{methods:{LongCount:function(TSource,source,maxCount){if(maxCount.equals(System.Int64.MaxValue))return System.Linq.Enumerable.from(source,TSource).count();if(source==null)throw new System.ArgumentNullException.$ctor1(\"source\");if(maxCount.lt(System.Int64(0)))throw new System.ArgumentOutOfRangeException.$ctor1(\"maxCount\");var count=System.Int64(0),e=Bridge.getEnumerator(source,TSource);try{while(e.System$Collections$IEnumerator$moveNext())if(count=count.inc(1),count.equals(maxCount))break}finally{Bridge.hasValue(e)&&e.System$IDisposable$Dispose()}return count},SafeFastDistinct:function(T,collection){var asICollectionT,asICollection;return collection==null?null:(asICollectionT=Bridge.as(collection,System.Collections.Generic.ICollection$1(T)))!=null&&System.Array.getCount(asICollectionT,T)<=1?collection:(asICollection=Bridge.as(collection,System.Collections.ICollection))!=null&&System.Array.getCount(asICollection)<=1?collection:System.Linq.Enumerable.from(collection,T).distinct()},SafeFastCountUpTo:function(T,collection,maxCount){var asICollectionT,asICollection;if(maxCount.lt(System.Int64(0)))throw new System.ArgumentOutOfRangeException.$ctor1(\"maxCount\");return collection==null?System.Int64(0):(asICollectionT=Bridge.as(collection,System.Collections.Generic.ICollection$1(T)))!=null?System.Int64.min(maxCount,System.Int64(System.Array.getCount(asICollectionT,T))):(asICollection=Bridge.as(collection,System.Collections.ICollection))!=null?System.Int64.min(maxCount,System.Int64(System.Array.getCount(asICollection))):Kusto.Cloud.Platform.Utils.ExtendedEnumerable.LongCount(T,collection,maxCount)},SafeSequenceEquals:function(T,collection,other,equalityComparer){equalityComparer===void 0&&(equalityComparer=null);var basicComparison=Kusto.Cloud.Platform.Utils.ExtendedEnumerable.BasicCompare(T,collection,other);return System.Nullable.hasValue(basicComparison)?System.Nullable.getValue(basicComparison):System.Linq.Enumerable.from(System.Linq.Enumerable.from(collection,T).orderBy($asm.$.Kusto.Cloud.Platform.Utils.ExtendedEnumerable.f1),T).sequenceEqual(System.Linq.Enumerable.from(other,T).orderBy($asm.$.Kusto.Cloud.Platform.Utils.ExtendedEnumerable.f2),equalityComparer)},SortedSequenceEquals:function(T,sortedCollection1,sortedCollection2,equalityComparer){var $t;return equalityComparer===void 0&&(equalityComparer=null),Kusto.Cloud.Platform.Utils.ExtendedEnumerable.SequenceEqual(T,sortedCollection1,sortedCollection2,Bridge.fn.cacheBind($t=equalityComparer||System.Collections.Generic.EqualityComparer$1(T).def,$t)[Bridge.geti($t,\"System$Collections$Generic$IEqualityComparer$1$\"+Bridge.getTypeAlias(T)+\"$equals2\",\"System$Collections$Generic$IEqualityComparer$1$equals2\")])},SequenceEqual:function(T,collection,other,predicate){var basicComparison=Kusto.Cloud.Platform.Utils.ExtendedEnumerable.BasicCompare(T,collection,other),enumerator1,enumerator2;if(System.Nullable.hasValue(basicComparison))return System.Nullable.getValue(basicComparison);enumerator1=Bridge.getEnumerator(collection,T);try{enumerator2=Bridge.getEnumerator(other,T);try{while(enumerator1.System$Collections$IEnumerator$moveNext())if(!enumerator2.System$Collections$IEnumerator$moveNext()||!predicate(enumerator1[Bridge.geti(enumerator1,\"System$Collections$Generic$IEnumerator$1$\"+Bridge.getTypeAlias(T)+\"$Current$1\",\"System$Collections$Generic$IEnumerator$1$Current$1\")],enumerator2[Bridge.geti(enumerator2,\"System$Collections$Generic$IEnumerator$1$\"+Bridge.getTypeAlias(T)+\"$Current$1\",\"System$Collections$Generic$IEnumerator$1$Current$1\")]))return!1;if(enumerator2.System$Collections$IEnumerator$moveNext())return!1}finally{Bridge.hasValue(enumerator2)&&enumerator2.System$IDisposable$Dispose()}}finally{Bridge.hasValue(enumerator1)&&enumerator1.System$IDisposable$Dispose()}return!0},SafeSetEquals:function(T,that,other){return Bridge.referenceEquals(that,other)?!0:that==null||other==null?!1:new(System.Collections.Generic.HashSet$1(T).$ctor1)(that).setEquals(other)},BasicCompare:function(T,collection,other){if(Bridge.referenceEquals(collection,other))return!0;if(collection==null||other==null)return!1;var length1=Kusto.Cloud.Platform.Utils.ExtendedEnumerable.GetSequenceLength(T,collection),length2=Kusto.Cloud.Platform.Utils.ExtendedEnumerable.GetSequenceLength(T,other);return System.Nullable.hasValue(length1)&&System.Nullable.hasValue(length2)&&System.Nullable.getValue(length1).ne(System.Nullable.getValue(length2))?!1:null},GetSequenceLength:function(T,sequence){var asArrayT,asIReadOnlyCollectionT,asICollectionT,asICollection;return(asArrayT=Bridge.as(sequence,System.Array.type(T)))!=null?System.Int64.lift(asArrayT.length):(asIReadOnlyCollectionT=Bridge.as(sequence,System.Collections.Generic.IReadOnlyCollection$1(T)))!=null?System.Int64.lift(System.Array.getCount(asIReadOnlyCollectionT,T)):(asICollectionT=Bridge.as(sequence,System.Collections.Generic.ICollection$1(T)))!=null?System.Int64.lift(System.Array.getCount(asICollectionT,T)):(asICollection=Bridge.as(sequence,System.Collections.ICollection))!=null?System.Int64.lift(System.Array.getCount(asICollection)):System.Int64.lift(null)},ToDisplayString:function(T,collection,delimiter,maxTake,nullString,estimatedStringSize,elementPrefix,elementPostfix,customElementToString){var $t,$t1,toStringRes,toStringRes1;if(delimiter===void 0&&(delimiter=\", \"),maxTake===void 0&&(maxTake=null),nullString===void 0&&(nullString=\"null\"),estimatedStringSize===void 0&&(estimatedStringSize=128),elementPrefix===void 0&&(elementPrefix=\"\"),elementPostfix===void 0&&(elementPostfix=\"\"),customElementToString===void 0&&(customElementToString=null),Kusto.Cloud.Platform.Utils.ExtendedEnumerable.SafeFastNone$2(T,collection)||System.Nullable.lte(maxTake,0))return\"\";delimiter=($t=delimiter,$t!=null?$t:\", \");nullString=($t1=nullString,$t1!=null?$t1:\"null\");var $toString=customElementToString||$asm.$.Kusto.Cloud.Platform.Utils.ExtendedEnumerable.f3,displayStringBuilder=new System.Text.StringBuilder(\"\",estimatedStringSize),itemsPassed=0,enumerator=Bridge.getEnumerator(collection,T);try{for(enumerator.System$Collections$IEnumerator$moveNext()&&(toStringRes=enumerator[Bridge.geti(enumerator,\"System$Collections$Generic$IEnumerator$1$\"+Bridge.getTypeAlias(T)+\"$Current$1\",\"System$Collections$Generic$IEnumerator$1$Current$1\")]==null?nullString:(elementPrefix||\"\")+($toString(enumerator[Bridge.geti(enumerator,\"System$Collections$Generic$IEnumerator$1$\"+Bridge.getTypeAlias(T)+\"$Current$1\",\"System$Collections$Generic$IEnumerator$1$Current$1\")])||\"\")+(elementPostfix||\"\"),displayStringBuilder.append(toStringRes),itemsPassed=itemsPassed+1|0);enumerator.System$Collections$IEnumerator$moveNext()&&!System.Nullable.gte(itemsPassed,maxTake);)displayStringBuilder.append(delimiter),toStringRes1=enumerator[Bridge.geti(enumerator,\"System$Collections$Generic$IEnumerator$1$\"+Bridge.getTypeAlias(T)+\"$Current$1\",\"System$Collections$Generic$IEnumerator$1$Current$1\")]==null?nullString:(elementPrefix||\"\")+($toString(enumerator[Bridge.geti(enumerator,\"System$Collections$Generic$IEnumerator$1$\"+Bridge.getTypeAlias(T)+\"$Current$1\",\"System$Collections$Generic$IEnumerator$1$Current$1\")])||\"\")+(elementPostfix||\"\"),displayStringBuilder.append(toStringRes1),itemsPassed=itemsPassed+1|0;enumerator.System$Collections$IEnumerator$moveNext()&&(displayStringBuilder=displayStringBuilder.append(delimiter).append(\"... more\"))}finally{Bridge.hasValue(enumerator)&&enumerator.System$IDisposable$Dispose()}return displayStringBuilder.toString()},SafeShallowClone:function(T,collection){return collection==null?null:new(System.Collections.Generic.List$1(T).$ctor1)(collection)},IndexOf:function(TCollection,collection,predicate){var $t,i,item;if(Bridge.staticEquals(predicate,null)||collection==null)return-1;i=0;$t=Bridge.getEnumerator(collection,TCollection);try{while($t.moveNext()){if(item=$t.Current,predicate(item))return i;i=i+1|0}}finally{Bridge.is($t,System.IDisposable)&&$t.System$IDisposable$Dispose()}return-1},SafeConcat:function(T,first,second){return first==null?second:second==null?first:System.Linq.Enumerable.from(first,T).concat(second)},SafeUnion:function(T,first,second){return first==null&&second==null?null:first==null?System.Linq.Enumerable.from(second,T).distinct():second==null?System.Linq.Enumerable.from(first,T).distinct():System.Linq.Enumerable.from(first,T).union(second)},SafeFastNullIfEmpty:function(TCollection,collection){return collection==null||Kusto.Cloud.Platform.Utils.ExtendedEnumerable.SafeFastNone(collection)?null:collection},SafeEmptyIEnumerableIfNull:function(T,collectionEnumerable){return collectionEnumerable||System.Linq.Enumerable.empty()},SafeFastAny$2:function(T,collection){var asICollection,asIReadOnlyCollection;return collection==null?!1:(asICollection=Bridge.as(collection,System.Collections.ICollection))!=null?System.Array.getCount(asICollection)!==0:(asIReadOnlyCollection=Bridge.as(collection,System.Collections.Generic.IReadOnlyCollection$1(T)))!=null?System.Array.getCount(asIReadOnlyCollection,T)!==0:System.Linq.Enumerable.from(collection,T).any()},SafeFastAny$4:function(T,list){return list!=null&&list.Count>0},SafeFastAny$1:function(T,collection){return collection!=null&&System.Array.getCount(collection,T)>0},SafeFastAny:function(collection){var $t,asICollection,e;if(collection==null)return!1;if((asICollection=Bridge.as(collection,System.Collections.ICollection))!=null)return System.Array.getCount(asICollection)!==0;e=Bridge.getEnumerator(collection);$t=Bridge.as(e,System.IDisposable);try{if(e.System$Collections$IEnumerator$moveNext())return!0}finally{Bridge.hasValue($t)&&$t.System$IDisposable$Dispose()}return!1},SafeFastAny$3:function(T,collection,predicate){return Kusto.Cloud.Platform.Utils.ExtendedEnumerable.SafeFastAny$2(T,collection)?System.Linq.Enumerable.from(collection,T).any(predicate):!1},SafeFastNone$2:function(T,collection){return!Kusto.Cloud.Platform.Utils.ExtendedEnumerable.SafeFastAny$2(T,collection)},SafeFastNone$1:function(T,collection){return!Kusto.Cloud.Platform.Utils.ExtendedEnumerable.SafeFastAny$1(T,collection)},SafeFastNone:function(collection){return!Kusto.Cloud.Platform.Utils.ExtendedEnumerable.SafeFastAny(collection)},SafeFastNone$3:function(T,collection,predicate){return!Kusto.Cloud.Platform.Utils.ExtendedEnumerable.SafeFastAny$3(T,collection,predicate)},None$1:function(T,source,predicate){return!System.Linq.Enumerable.from(source,T).any(predicate)},None:function(T,source){return Kusto.Cloud.Platform.Utils.ExtendedEnumerable.SafeFastNone$2(T,source)},SafeFastContains:function(T,collection,item,comparer){return(comparer===void 0&&(comparer=null),Kusto.Cloud.Platform.Utils.ExtendedEnumerable.SafeFastNone$2(T,collection))?!1:System.Linq.Enumerable.from(collection,T).contains(item,comparer)},DistinctBy:function(T,TKey,source,keySelector){return System.Linq.Enumerable.from(source,T).groupBy(keySelector).select($asm.$.Kusto.Cloud.Platform.Utils.ExtendedEnumerable.f4)},Intersect:function(T,collections){var enumerator,result;if(Kusto.Cloud.Platform.Utils.ExtendedEnumerable.SafeFastNone$2(System.Collections.Generic.IEnumerable$1(T),collections))return null;if(enumerator=Bridge.getEnumerator(collections,System.Collections.Generic.IEnumerable$1(T)),enumerator.System$Collections$IEnumerator$moveNext()){for(result=new(System.Collections.Generic.HashSet$1(T).$ctor1)(enumerator[Bridge.geti(enumerator,\"System$Collections$Generic$IEnumerator$1$System$Collections$Generic$IEnumerable$1$\"+Bridge.getTypeAlias(T)+\"$Current$1\",\"System$Collections$Generic$IEnumerator$1$Current$1\")]);enumerator.System$Collections$IEnumerator$moveNext();)result.intersectWith(enumerator[Bridge.geti(enumerator,\"System$Collections$Generic$IEnumerator$1$System$Collections$Generic$IEnumerable$1$\"+Bridge.getTypeAlias(T)+\"$Current$1\",\"System$Collections$Generic$IEnumerator$1$Current$1\")]);return result}return null},SplitBy:function(T,TR,collection,isFirst,transform){var $t,typeOfT,list1,list2;if(transform===void 0&&(transform=null),typeOfT=T,Kusto.Cloud.Platform.Utils.ExtendedEnumerable.IsTupleType(typeOfT)&&Bridge.staticEquals(transform,null)?transform=$asm.$.Kusto.Cloud.Platform.Utils.ExtendedEnumerable.f5:Bridge.referenceEquals(typeOfT,TR)&&Bridge.staticEquals(transform,null)&&(transform=function(t){return Bridge.cast(Bridge.unbox(t,TR),TR)}),Bridge.staticEquals(transform,null))throw new System.NullReferenceException.ctor;list1=new(System.Collections.Generic.List$1(TR).ctor);list2=new(System.Collections.Generic.List$1(TR).ctor);$t=Bridge.getEnumerator(collection,T);try{while($t.moveNext()){var item=$t.Current,itemToAdd=transform(item),first=isFirst(item);switch(first){case null:case undefined:continue;case!0:list1.add(itemToAdd);break;default:list2.add(itemToAdd);break}}}finally{Bridge.is($t,System.IDisposable)&&$t.System$IDisposable$Dispose()}return{Item1:list1,Item2:list2}},IntersectWith:function(T,collection,other){if(Kusto.Cloud.Platform.Utils.ExtendedEnumerable.SafeFastNone$2(T,collection)||Kusto.Cloud.Platform.Utils.ExtendedEnumerable.SafeFastNone$2(T,other))return System.Linq.Enumerable.empty();var result=new(System.Collections.Generic.HashSet$1(T).$ctor1)(collection);return result.intersectWith(other),result},IsTupleType:function(type,checkBaseTypes){if(checkBaseTypes===void 0&&(checkBaseTypes=!1),type==null)throw new System.ArgumentNullException.$ctor1(\"type\");if(Bridge.referenceEquals(type,System.Tuple))return!0;while(type!=null){if(Bridge.Reflection.isGenericType(type)){var genType=Bridge.Reflection.getGenericTypeDefinition(type);if(Bridge.referenceEquals(genType,System.Tuple$1)||Bridge.referenceEquals(genType,System.Tuple$2)||Bridge.referenceEquals(genType,System.Tuple$3)||Bridge.referenceEquals(genType,System.Tuple$4)||Bridge.referenceEquals(genType,System.Tuple$5)||Bridge.referenceEquals(genType,System.Tuple$6)||Bridge.referenceEquals(genType,System.Tuple$7)||Bridge.referenceEquals(genType,System.Tuple$8)||Bridge.referenceEquals(genType,System.Tuple$8))return!0}if(!checkBaseTypes)break;type=Bridge.Reflection.getBaseType(type)}return!1},AddIfNotNullOrWhiteSpace:function(that,value){return System.String.isNullOrWhiteSpace(value)||System.Array.add(that,value,System.String),that}}}});Bridge.ns(\"Kusto.Cloud.Platform.Utils.ExtendedEnumerable\",$asm.$);Bridge.apply($asm.$.Kusto.Cloud.Platform.Utils.ExtendedEnumerable,{f1:function(item){return item},f2:function(items){return items},f3:function(x){return Bridge.toString(x)},f4:function(x){return x.first()},f5:function(t){return t.Item1}});Bridge.define(\"Kusto.Cloud.Platform.Utils.ExtendedRegex\",{statics:{methods:{TryUnescape:function(str,result){result.v=\"\";try{return result.v=System.Text.RegularExpressions.Regex.unescape(str),!0}catch($e1){if($e1=System.Exception.create($e1),Bridge.is($e1,System.ArgumentException))return!1;else throw $e1;}},TryTransformWildCardPatternToRegex:function(wildcardPattern){try{var input=System.String.trim(wildcardPattern,[91,93]),regexString=System.String.replaceAll(input,\"*\",\".*\");return new System.Text.RegularExpressions.Regex.ctor(regexString,0)}catch($e1){return $e1=System.Exception.create($e1),null}},IsWildCardPattern:function(wildcardPattern){return System.String.indexOf(wildcardPattern,String.fromCharCode(42))>=0},RegexEquals:function(regex,other){if(Bridge.referenceEquals(regex,other))return!0;var otherAsRegex;return regex==null||other==null||!((otherAsRegex=Bridge.as(other,System.Text.RegularExpressions.Regex))!=null)?!1:Kusto.Cloud.Platform.Utils.ExtendedRegex.RegexEquals$1(regex,otherAsRegex)},RegexEquals$1:function(regex,other){return Bridge.referenceEquals(regex,other)?!0:regex==null||other==null?!1:System.String.equals(Bridge.toString(regex),Bridge.toString(other))&&regex.getOptions()===other.getOptions()&&System.TimeSpan.eq(regex.getMatchTimeout(),other.getMatchTimeout())},RegexEquivalent:function(regex,other){return Bridge.referenceEquals(regex,other)?!0:regex==null||other==null?!1:System.String.equals(Bridge.toString(regex),Bridge.toString(other))&&regex.getOptions()===other.getOptions()},ReplaceAndCountReplacements:function(regex,input,replacement,replacesCount){var count=0,result=regex.replace(input,function(match){return count=count+1|0,replacement});return replacesCount.v=count,result}}}});Bridge.define(\"Kusto.Cloud.Platform.Utils.ExtendedString\",{statics:{fields:{c_wrap:null,EllipsisAsThreePeriods:null,c_newlineAsStringArray:null,c_nullGuids:null,SafeToString:null,EmptyArray:null,s_alternativeSpaceChars:null,s_alternativeNewlineChars:null,s_alternativeQutoes:null},ctors:{init:function(){this.c_wrap=\"  \";this.EllipsisAsThreePeriods=\"...\";this.c_newlineAsStringArray=System.Array.init([\"\\n\"],System.String);this.c_nullGuids=System.Array.init([System.Guid.Empty.toString(),\"{\"+(System.Guid.Empty.toString()||\"\")+\"}\"],System.String);this.SafeToString=$asm.$.Kusto.Cloud.Platform.Utils.ExtendedString.f1;this.EmptyArray=System.Array.init(0,null,System.String);this.s_alternativeSpaceChars=$asm.$.Kusto.Cloud.Platform.Utils.ExtendedString.f2(new(System.Collections.Generic.HashSet$1(System.Char).ctor));this.s_alternativeNewlineChars=$asm.$.Kusto.Cloud.Platform.Utils.ExtendedString.f3(new(System.Collections.Generic.HashSet$1(System.Char).ctor));this.s_alternativeQutoes=$asm.$.Kusto.Cloud.Platform.Utils.ExtendedString.f4(new(System.Collections.Generic.HashSet$1(System.Char).ctor))}},methods:{SafeGetHashCode:function(value){return value==null?20080512:Bridge.getHashCode(value)},GuidSafeFastGetHashCode:function(value){return value==null||value.length<26?Kusto.Cloud.Platform.Utils.ExtendedString.SafeGetHashCode(value):(value.charCodeAt(1)^value.charCodeAt(9)<<8|value.charCodeAt(10))^(value.charCodeAt(16)<<16|value.charCodeAt(17))^(value.charCodeAt(24)<<24|value.charCodeAt(25))},SafeToTraceString:function(value){return value==null?\"[null]\":value.length===0?\"[empty]\":value},SafeFormat:function(format,args){var args2,a,arg,arg2,argStr;if(args===void 0&&(args=[]),format==null)return\"[format:null]\";if(args==null||args.length===0)return System.String.format.apply(System.String,[format].concat(args));for(args2=System.Array.init(args.length,null,System.String),a=0;a<args.length;a=a+1|0)arg=args[System.Array.index(a,args)],arg==null?arg2=\"[null]\":(argStr=Bridge.toString(arg),arg2=argStr==null?\"[ToStringNull]\":argStr.length===0?\"[ToStringEmpty]\":System.String.isNullOrWhiteSpace(argStr)?\"[ToStringWhitespace]\":argStr),args2[System.Array.index(a,args2)]=arg2;return System.String.format.apply(System.String,[format].concat(args2))},FormatWithCurrentCulture:function(format,args){return args===void 0&&(args=[]),Kusto.Cloud.Platform.Utils.ExtendedString.FormatWith(format,System.Globalization.CultureInfo.getCurrentCulture(),args)},FormatWithInvariantCulture:function(format,args){return args===void 0&&(args=[]),Kusto.Cloud.Platform.Utils.ExtendedString.FormatWith(format,System.Globalization.CultureInfo.invariantCulture,args)},FormatWith:function(format,formatProvider,args){return args===void 0&&(args=[]),System.String.formatProvider.apply(System.String,[formatProvider,format].concat(args))},ToCamelCase:function(str){return String.fromCharCode(String.fromCharCode(str.charCodeAt(0)).toLowerCase().charCodeAt(0))+(str.substr(1)||\"\")},SafeIsNullGuid:function(value){return System.String.isNullOrWhiteSpace(value)||Bridge.referenceEquals(value,Kusto.Cloud.Platform.Utils.ExtendedString.c_nullGuids[System.Array.index(0,Kusto.Cloud.Platform.Utils.ExtendedString.c_nullGuids)])||Bridge.referenceEquals(value,Kusto.Cloud.Platform.Utils.ExtendedString.c_nullGuids[System.Array.index(1,Kusto.Cloud.Platform.Utils.ExtendedString.c_nullGuids)])},SafeIsValidGuid:function(value){var _discard1={v:new System.Guid};return!Kusto.Cloud.Platform.Utils.ExtendedString.SafeIsNullGuid(value)&&System.Guid.TryParse(value,_discard1)},GetDiff:function(lhs,rhs){var i;if(Bridge.referenceEquals(lhs,rhs)){if(lhs==null)return\"Strings are the same (both null)\";else if(Bridge.referenceEquals(lhs,\"\"))return\"Strings are the same (both empty)\";return\"Strings are the same\"}if(lhs==null)return\"LHS is null, RHS is not\";if(rhs==null)return\"RHS is null, LHS is not\";for(i=0;i<Math.min(lhs.length,rhs.length);i=i+1|0)if(lhs.charCodeAt(i)!==rhs.charCodeAt(i))return Kusto.Cloud.Platform.Utils.ExtendedString.GetDiffFromPosition(lhs,rhs,i);return Kusto.Cloud.Platform.Utils.ExtendedString.GetDiffFromPosition(lhs,rhs,Math.min(lhs.length,rhs.length))},GetDiffFromPosition:function(lhs,rhs,position){var before=20,after=20,start=Math.max(0,position-before|0),count=before+after|0;return\"Strings differ starting from position \"+(Bridge.toString(position)||\"\")+\" \\nLHS=...'\"+(Kusto.Cloud.Platform.Utils.ExtendedString.SafeSubstring(lhs,start,count)||\"\")+\"'...\\nRHS=...'\"+(Kusto.Cloud.Platform.Utils.ExtendedString.SafeSubstring(rhs,start,count)||\"\")+\"'...\\n\"+(System.String.fromCharCount(32,((start===0?position:before)+1|0)+7|0)||\"\")+\"^\"},SafeSubstring:function(value,startIndex,count){return value==null?null:(startIndex=Math.max(0,startIndex),startIndex>=value.length)?\"\":count<=0?\"\":(count=Math.min(count,value.length-startIndex|0),value.substr(startIndex,count))},SafeIsValidNonEmptyBase64:function(value,allowWhitespace){var $t,offsetFirstEquality,i,c,j;if((allowWhitespace===void 0&&(allowWhitespace=!1),allowWhitespace&&value!=null&&(value=value.trim()),System.String.isNullOrEmpty(value))||value.length%4!=0)return!1;offsetFirstEquality=-1;i=-1;$t=Bridge.getEnumerator(value);try{while($t.moveNext())if(c=$t.Current,i=i+1|0,(!(c>=48)||!(c<=57))&&(!(c>=65)||!(c<=90))&&(!(c>=97)||!(c<=122))&&c!==43&&c!==47){if(c===61){offsetFirstEquality=i;break}return!1}}finally{Bridge.is($t,System.IDisposable)&&$t.System$IDisposable$Dispose()}if(offsetFirstEquality===-1)return value.length%4==0;if((value.length-offsetFirstEquality|0)>3)return!1;for(j=offsetFirstEquality;j<value.length;j=j+1|0)if(value.charCodeAt(j)!==61)return!1;return!0},SafeIsDoubleSlashCommentOrEmptyBlock:function(cmd){if(System.String.isNullOrWhiteSpace(cmd))return!0;for(var slash=!1,i=0,c;;){if(i>=cmd.length)return!slash;if(c=cmd.charCodeAt(i),c===47){if(slash){while((i=i+1|0)<cmd.length)if(c=cmd.charCodeAt(i),c===13||c===10)break;slash=!1}else slash=!0;i=i+1|0;continue}if(slash)return!1;if(System.Char.isWhiteSpace(String.fromCharCode(c))||c===13||c===10){i=i+1|0;continue}return!1}},SafeFastTrimEmptyLines:function(text){var nextNewLine;if(System.String.isNullOrEmpty(text)||System.String.indexOf(text,\"\\n\")===-1)return text;for(var sb=Kusto.Cloud.Platform.Utils.UtilsStringBuilderCache.Acquire(Math.min(text.length,Kusto.Cloud.Platform.Utils.MemoryConstants.LargeObjectHeapChars)),hasPrecedingText=!1,i=0;i<text.length;){if(nextNewLine=System.String.indexOf(text,\"\\n\",i),nextNewLine===-1){hasPrecedingText&&sb.appendLine();sb.append(text,i,text.length-i|0);break}if(nextNewLine!==i){hasPrecedingText&&sb.appendLine();sb.append(text,i,nextNewLine-i|0);i=nextNewLine+1|0;hasPrecedingText=!0;continue}i=i+1|0}return Kusto.Cloud.Platform.Utils.UtilsStringBuilderCache.GetStringAndRelease(sb)},SafeFastTrim:function(text){return System.String.isNullOrEmpty(text)?text:text.trim()},TrimStart$1:function(text,prefix,comparison){return(comparison===void 0&&(comparison=4),System.String.startsWith(text,prefix,comparison))?text.substr(prefix.length,text.length-prefix.length|0):text},TrimStart:function(text,c,justOne){if(System.String.isNullOrEmpty(text))return text;if(justOne)return text.charCodeAt(0)===c?text.substr(1):text;if(text.charCodeAt(0)!==c)return text;for(var i=0;i<text.length&&text.charCodeAt(i)===c;)i=i+1|0;return i===text.length?\"\":text.substr(i)},TrimEnd:function(text,suffix,comparison){return(comparison===void 0&&(comparison=4),System.String.endsWith(text,suffix,comparison))?text.substr(0,text.length-suffix.length|0):text},TrimBalancedSquareBrackets:function(text){return text!=null&&text.length>=2&&text.charCodeAt(0)===91&&text.charCodeAt(text.length-1|0)===93&&(text=text.substr(1,text.length-2|0)),text},TrimBalancedRoundBrackets:function(text){return Kusto.Cloud.Platform.Utils.ExtendedString.TrimBalanced(text,\"(\",\")\")},TrimBalancedCurlyBrackets:function(text){return Kusto.Cloud.Platform.Utils.ExtendedString.TrimBalanced(text,\"{\",\"}\")},TrimBalanced:function(text,openning,closing,comparison){return comparison===void 0&&(comparison=4),text!=null&&System.String.startsWith(text,openning,comparison)&&System.String.endsWith(text,closing,comparison)&&(text=text.substr(openning.length,text.length-(openning.length+closing.length|0)|0)),text},TrimBalancedSingleAndDoubleQuotes:function(text){if(System.String.isNullOrEmpty(text))return text;for(var start=0,end=text.length-1|0;start<end;){if(text.charCodeAt(start)===34&&text.charCodeAt(end)===34){start=start+1|0;end=end-1|0;continue}if(text.charCodeAt(start)===39&&text.charCodeAt(end)===39){start=start+1|0;end=end-1|0;continue}break}return start>end?\"\":text.substr(start,(end-start|0)+1|0)},DetermineMaxLineWidth:function(text){var ret,currentPos,i,c;if(System.String.isNullOrEmpty(text))return 0;for(ret=0,currentPos=0,i=0;i<text.length;i=i+1|0)c=text.charCodeAt(i),c===13||c===10?(ret=Math.max(ret,i-currentPos|0),currentPos=i+1|0):i===(text.length-1|0)&&(ret=Math.max(ret,(i-currentPos|0)+1|0));return ret},SafeCountCharacterUpTo:function(value,c,maxCount){var ret,i;if(value==null)return System.Int64(-1);for(ret=0,i=0;i<value.length;i=i+1|0)if(value.charCodeAt(i)===c&&(ret=ret+1|0),System.Int64(ret).equals(maxCount))break;return System.Int64(ret)},SafeCountAnyCharacterUpTo:function(value,chars,maxCount){var ret,i;if(value==null)return System.Int64(-1);for(ret=0,i=0;i<value.length;i=i+1|0)if(System.Array.contains(chars,value.charCodeAt(i),System.Char)&&(ret=ret+1|0),System.Int64(ret).equals(maxCount))break;return System.Int64(ret)},FindFirstNonWhitespaceCharacter:function(value,index){if(index===void 0&&(index=0),value==null)return-1;for(;;){if(index>=value.length)return-1;if(!System.Char.isWhiteSpace(String.fromCharCode(value.charCodeAt(index))))return index;index=index+1|0}},FirstFirstUnequalCharacter:function(lhs,rhs){if(Bridge.referenceEquals(lhs,rhs))return-1;if(lhs==null||rhs==null||lhs.length===0||rhs.length===0)return 0;for(var i=0;i<lhs.length&&i<rhs.length;i=i+1|0)if(lhs.charCodeAt(i)!==rhs.charCodeAt(i))return i;return i},CountNonOverlappingSubstrings:function(text,substring,comparison){if(comparison===void 0&&(comparison=4),System.String.isNullOrEmpty(text)||System.String.isNullOrEmpty(substring))return 0;for(var count=0,i=0;i<text.length;){if(i=System.String.indexOf(text,substring,i,null,comparison),i<0)return count;count=count+1|0;i=i+substring.length|0}return count},SafeStartsWith:function(what,c){return System.String.isNullOrEmpty(what)?!1:what.charCodeAt(0)===c},SafeStartsWith$1:function(what,value,comparison){return(comparison===void 0&&(comparison=4),System.String.isNullOrEmpty(what))?!1:System.String.startsWith(what,value,comparison)},EqualsOrdinalIgnoreCase:function(me,other){return System.String.equals(me,other,5)},IsEmpty:function(me){return Bridge.referenceEquals(me,\"\")},IsNotEmpty:function(me){return!Bridge.referenceEquals(me,\"\")},IsNullOrEmpty:function(me){return System.String.isNullOrEmpty(me)},IsNotNullOrEmpty:function(me){return!System.String.isNullOrEmpty(me)},EmptyIfNull:function(me){var $t;return $t=me,$t!=null?$t:\"\"},SafeGetTail:function(what,length){return what==null?null:length<=0?\"\":length>=what.length?what:what.substr(what.length-length|0)},SafeIndexOf:function(what,value){return System.String.isNullOrEmpty(what)?-1:System.String.indexOf(what,String.fromCharCode(value))},SafeIndexOf$2:function(what,value,startIndex,comparisonType){return System.String.isNullOrEmpty(what)||System.String.isNullOrEmpty(value)||startIndex>what.length?-1:System.String.indexOf(what,value,startIndex,null,comparisonType)},SafeIndexOf$1:function(what,value,startIndex,count,comparisonType){return System.String.isNullOrEmpty(what)||System.String.isNullOrEmpty(value)||(startIndex+value.length|0)>what.length?-1:System.String.indexOf(what,value,startIndex,count,comparisonType)},SplitFirst$2:function(what,delimiter,comparison){var delimiterIndex;return(comparison===void 0&&(comparison=4),what==null||System.String.isNullOrEmpty(delimiter))?null:(delimiterIndex=System.String.indexOf(what,delimiter,0,null,comparison),delimiterIndex<0)?what:what.substr(0,delimiterIndex)},SplitFirst:function(what,delimiter){var delimiterIndex;return what==null?null:(delimiterIndex=System.String.indexOf(what,String.fromCharCode(delimiter)),delimiterIndex<0)?what:what.substr(0,delimiterIndex)},SplitFirst$1:function(what,delimiters){var delimitersIndex;return what==null||delimiters==null||delimiters.length===0?null:(delimitersIndex=System.String.indexOfAny(what,delimiters),delimitersIndex<0)?what:what.substr(0,delimitersIndex)},Rotate:function(s){return System.String.isNullOrEmpty(s)||s.length<2?s:(s.substr(1,s.length-1|0)||\"\")+(s.substr(0,1)||\"\")},AdjustNewLineDelimiter:function(text){for(var c,isNextChar_slashN,resultBuilder=Kusto.Cloud.Platform.Utils.UtilsStringBuilderCache.Acquire(text.length),i=0;i<text.length;i=i+1|0){c=text.charCodeAt(i);switch(c){case 13:isNextChar_slashN=i<(text.length-1|0)&&text.charCodeAt(i+1|0)===10;isNextChar_slashN&&(i=i+1|0);resultBuilder.append(\"\\n\");break;case 10:resultBuilder.append(\"\\n\");break;default:resultBuilder.append(String.fromCharCode(c));break}}return Kusto.Cloud.Platform.Utils.UtilsStringBuilderCache.GetStringAndRelease(resultBuilder)},ReplaceInvisibleWhitespaces:function(value){var c_space=\" \";return Kusto.Cloud.Platform.Utils.ExtendedString.Replace$1(value,function(c,replacement){return replacement.v=null,Kusto.Cloud.Platform.Utils.ExtendedString.s_alternativeSpaceChars.contains(c)?replacement.v=c_space:Kusto.Cloud.Platform.Utils.ExtendedString.s_alternativeNewlineChars.contains(c)&&(replacement.v=\"\\n\"),replacement.v!=null})},HasNonAsciiQuotes:function(value){return System.String.isNullOrWhiteSpace(value)?!1:System.Linq.Enumerable.from(value,System.Char).any(Bridge.fn.cacheBind(Kusto.Cloud.Platform.Utils.ExtendedString.s_alternativeQutoes,Kusto.Cloud.Platform.Utils.ExtendedString.s_alternativeQutoes.contains))},ReplaceNonAsciiQuotes:function(value){var c_quotes='\"';return Kusto.Cloud.Platform.Utils.ExtendedString.Replace$1(value,function(c,replacement){return replacement.v=c_quotes,Kusto.Cloud.Platform.Utils.ExtendedString.s_alternativeQutoes.contains(c)})},Replace:function(value,replacements){return Kusto.Cloud.Platform.Utils.ExtendedEnumerable.SafeFastAny$1(System.Collections.Generic.KeyValuePair$2(System.Char,System.String),replacements)?Kusto.Cloud.Platform.Utils.ExtendedString.Replace$1(value,Bridge.fn.cacheBind(replacements,replacements.System$Collections$Generic$IDictionary$2$System$Char$System$String$tryGetValue)):value},Replace$1:function(value,shouldReplace){var sb,i,c,replacement;if(System.String.isNullOrEmpty(value))return value;for(sb=null,i=0;i<value.length;i=i+1|0)c=value.charCodeAt(i),replacement={},shouldReplace(c,replacement)?(sb=Kusto.Cloud.Platform.Utils.ExtendedStringBuilder.InitializeStringBuildIfNeeded(value,sb,i),sb.append(replacement.v)):sb!=null&&sb.append(String.fromCharCode(c));return sb==null?value:sb.toString()},IsAscii:function(str){return System.Text.Encoding.UTF8.GetByteCount$2(str)===str.length}}}});Bridge.ns(\"Kusto.Cloud.Platform.Utils.ExtendedString\",$asm.$);Bridge.apply($asm.$.Kusto.Cloud.Platform.Utils.ExtendedString,{f1:function(obj){var $t;return obj!=null?($t=Bridge.toString(obj),$t!=null?$t:\"[ToStringNull]\"):\"[null]\"},f2:function(_o1){return _o1.add(160),_o1.add(5760),_o1.add(6158),_o1.add(8192),_o1.add(8193),_o1.add(8194),_o1.add(8195),_o1.add(8196),_o1.add(8197),_o1.add(8198),_o1.add(8199),_o1.add(8200),_o1.add(8201),_o1.add(8202),_o1.add(8203),_o1.add(8239),_o1.add(8287),_o1.add(12288),_o1.add(65279),_o1.add(8288),_o1},f3:function(_o2){return _o2.add(11),_o2},f4:function(_o3){return _o3.add(171),_o3.add(187),_o3.add(8216),_o3.add(8217),_o3.add(8218),_o3.add(8220),_o3.add(8221),_o3.add(8222),_o3.add(8249),_o3.add(8250),_o3}});Bridge.define(\"Kusto.Cloud.Platform.Utils.ExtendedStringBuilder\",{statics:{methods:{InitializeStringBuildIfNeeded:function(value,sb,i){return sb!=null?sb:(sb=new System.Text.StringBuilder(\"\",value.length),i>0&&sb.append(value.substr(0,i)),sb)}}}});Bridge.define(\"Kusto.Cloud.Platform.Utils.MemoryConstants\",{statics:{fields:{_1KB:0,_2KB:0,_4KB:0,_8KB:0,_16KB:0,_32KB:0,_64KB:0,_128KB:0,_256KB:0,_512KB:0,_1MB:0,_2MB:0,_32MB:0,_64MB:0,_512MB:0,_1GB:0,_1TB:System.Int64(0),_1PB:System.Int64(0),LargeObjectHeap:0,LargeObjectHeapChars:0,LargeObjectHeapCharsStreamReaderWriter:0},ctors:{init:function(){this._1KB=1024;this._2KB=2048;this._4KB=4096;this._8KB=8192;this._16KB=16384;this._32KB=32768;this._64KB=65536;this._128KB=131072;this._256KB=262144;this._512KB=524288;this._1MB=1048576;this._2MB=2097152;this._32MB=33554432;this._64MB=67108864;this._512MB=536870912;this._1GB=1073741824;this._1TB=System.Int64([0,256]);this._1PB=System.Int64([0,262144]);this.LargeObjectHeap=65536;this.LargeObjectHeapChars=32768;this.LargeObjectHeapCharsStreamReaderWriter=24576}}}});Bridge.define(\"Kusto.Cloud.Platform.Utils.StringBuilderCache\",{statics:{fields:{MAX_BUILDER_SIZE:0,DEFAULT_CAPACITY:0},ctors:{init:function(){this.MAX_BUILDER_SIZE=32768;this.DEFAULT_CAPACITY=16}},methods:{Acquire:function(threadStaticStringBuilder,capacity,maxBuilderSize){if(capacity===void 0&&(capacity=16),maxBuilderSize===void 0&&(maxBuilderSize=32768),capacity<=maxBuilderSize){var sb=threadStaticStringBuilder.v;if(sb!=null&&capacity<=sb.getCapacity())return threadStaticStringBuilder.v=null,sb.clear(),sb}return new System.Text.StringBuilder(\"\",capacity)},Acquire$1:function(threadStaticStringBuilder,value){var sb=Kusto.Cloud.Platform.Utils.StringBuilderCache.Acquire(threadStaticStringBuilder,Math.max(value.length,Kusto.Cloud.Platform.Utils.StringBuilderCache.DEFAULT_CAPACITY));return sb.append(value),sb},Release:function(threadStaticStringBuilder,sb,maxBuilderSize){maxBuilderSize===void 0&&(maxBuilderSize=32768);sb.getCapacity()<=maxBuilderSize&&(threadStaticStringBuilder.v=sb)},GetStringAndRelease:function(threadStaticStringBuilder,sb,maxBuilderSize){maxBuilderSize===void 0&&(maxBuilderSize=32768);var result=sb.toString();return Kusto.Cloud.Platform.Utils.StringBuilderCache.Release(threadStaticStringBuilder,sb,maxBuilderSize),result},GetStringAndClear:function(threadStaticStringBuilder,sb){var result=sb.toString();return sb.clear(),result}}}});Bridge.define(\"Kusto.Cloud.Platform.Utils.TimeSpanConstants\",{statics:{fields:{_2sec:null,_5sec:null,_10sec:null,_20sec:null,_1min:null,_2min:null,_3min:null,_4min:null,_5min:null,_10min:null,_59min:null,_60min:null,_1hour:null,_2hours:null,_3hours:null,_4hours:null,_5hours:null,_6hours:null,_10hours:null},ctors:{init:function(){this._2sec=new System.TimeSpan;this._5sec=new System.TimeSpan;this._10sec=new System.TimeSpan;this._20sec=new System.TimeSpan;this._1min=new System.TimeSpan;this._2min=new System.TimeSpan;this._3min=new System.TimeSpan;this._4min=new System.TimeSpan;this._5min=new System.TimeSpan;this._10min=new System.TimeSpan;this._59min=new System.TimeSpan;this._60min=new System.TimeSpan;this._1hour=new System.TimeSpan;this._2hours=new System.TimeSpan;this._3hours=new System.TimeSpan;this._4hours=new System.TimeSpan;this._5hours=new System.TimeSpan;this._6hours=new System.TimeSpan;this._10hours=new System.TimeSpan;this._2sec=System.TimeSpan.fromSeconds(2);this._5sec=System.TimeSpan.fromSeconds(5);this._10sec=System.TimeSpan.fromSeconds(10);this._20sec=System.TimeSpan.fromSeconds(20);this._1min=System.TimeSpan.fromMinutes(1);this._2min=System.TimeSpan.fromMinutes(2);this._3min=System.TimeSpan.fromMinutes(3);this._4min=System.TimeSpan.fromMinutes(4);this._5min=System.TimeSpan.fromMinutes(5);this._10min=System.TimeSpan.fromMinutes(10);this._59min=System.TimeSpan.fromMinutes(59);this._60min=System.TimeSpan.fromMinutes(60);this._1hour=System.TimeSpan.fromHours(1);this._2hours=System.TimeSpan.fromHours(2);this._3hours=System.TimeSpan.fromHours(3);this._4hours=System.TimeSpan.fromHours(4);this._5hours=System.TimeSpan.fromHours(5);this._6hours=System.TimeSpan.fromHours(6);this._10hours=System.TimeSpan.fromHours(10)}}}});Bridge.define(\"Kusto.Cloud.Platform.Utils.UtilsStringBuilderCache\",{statics:{fields:{MAX_BUILDER_SIZE:0,DEFAULT_CAPACITY:0,t_cachedInstance:null},ctors:{init:function(){this.MAX_BUILDER_SIZE=24576;this.DEFAULT_CAPACITY=16}},methods:{Acquire:function(capacity){return capacity===void 0&&(capacity=16),Kusto.Cloud.Platform.Utils.StringBuilderCache.Acquire(Bridge.ref(Kusto.Cloud.Platform.Utils.UtilsStringBuilderCache,\"t_cachedInstance\"),capacity)},Acquire$1:function(value){return Kusto.Cloud.Platform.Utils.StringBuilderCache.Acquire$1(Bridge.ref(Kusto.Cloud.Platform.Utils.UtilsStringBuilderCache,\"t_cachedInstance\"),value)},Release:function(sb){Kusto.Cloud.Platform.Utils.StringBuilderCache.Release(Bridge.ref(Kusto.Cloud.Platform.Utils.UtilsStringBuilderCache,\"t_cachedInstance\"),sb)},GetStringAndRelease:function(sb){return Kusto.Cloud.Platform.Utils.StringBuilderCache.GetStringAndRelease(Bridge.ref(Kusto.Cloud.Platform.Utils.UtilsStringBuilderCache,\"t_cachedInstance\"),sb)},GetStringAndClear:function(sb){return Kusto.Cloud.Platform.Utils.StringBuilderCache.GetStringAndClear(Bridge.ref(Kusto.Cloud.Platform.Utils.UtilsStringBuilderCache,\"t_cachedInstance\"),sb)}}}});Bridge.define(\"Kusto.Data.Common.CslQueryParser\",{statics:{methods:{PrettifyQuery:function(query,appendText){var parser=new Kusto.Data.IntelliSense.CslCommandParser,commands=parser.Parse(null,query,Kusto.Data.IntelliSense.ParseMode.CommandTokensOnly),queryFormatted;return System.Linq.Enumerable.from(commands,Kusto.Data.IntelliSense.CslCommand).count()!==1?query:(queryFormatted=System.Linq.Enumerable.from(commands,Kusto.Data.IntelliSense.CslCommand).first().FormatAsString(\"\\n\",7),System.String.isNullOrEmpty(queryFormatted)&&(queryFormatted=query),System.String.isNullOrEmpty(appendText)||(queryFormatted=(queryFormatted||\"\")+(appendText||\"\")),queryFormatted)}}}});Bridge.define(\"Kusto.Data.Common.CslSyntaxGenerator\",{statics:{fields:{s_keywords:null},ctors:{init:function(){this.s_keywords=$asm.$.Kusto.Data.Common.CslSyntaxGenerator.f1(new(System.Collections.Generic.HashSet$1(System.String).ctor))}},methods:{NormalizeDatabaseName$1:function(databaseName,forceNormalization){return Kusto.Data.Common.CslSyntaxGenerator.NormalizeName(databaseName,forceNormalization)},NormalizeDatabaseName:function(databaseName){return Kusto.Data.Common.CslSyntaxGenerator.NormalizeName(databaseName,!1)},NormalizeVirutalClusterName:function(virtualClusterName,forceNormalization){return forceNormalization===void 0&&(forceNormalization=!1),Kusto.Data.Common.CslSyntaxGenerator.NormalizeName(virtualClusterName,forceNormalization)},NormalizeFunctionName:function(functionName,forceNormalizeFunctionName){return forceNormalizeFunctionName===void 0&&(forceNormalizeFunctionName=!1),Kusto.Data.Common.CslSyntaxGenerator.NormalizeName(functionName,forceNormalizeFunctionName)},NormalizeTableName:function(tableName,forceNormalizeTableName){return forceNormalizeTableName===void 0&&(forceNormalizeTableName=!1),Kusto.Data.Common.CslSyntaxGenerator.NormalizeName(tableName,forceNormalizeTableName)},NormalizeContinuousJobName:function(jobName,forceNormalizeTableName){return forceNormalizeTableName===void 0&&(forceNormalizeTableName=!1),Kusto.Data.Common.CslSyntaxGenerator.NormalizeName(jobName,forceNormalizeTableName)},NormalizeColumnName:function(columnName,forceNormalizeColumnName){return forceNormalizeColumnName===void 0&&(forceNormalizeColumnName=!1),Kusto.Data.Common.CslSyntaxGenerator.NormalizeName(columnName,forceNormalizeColumnName)},NormalizeRowStoreName:function(rowStoreName){return Kusto.Data.Common.CslSyntaxGenerator.NormalizeName(rowStoreName,!1)},NormalizeWorkloadGroupName:function(workloadGroupName){return Kusto.Data.Common.CslSyntaxGenerator.NormalizeName(workloadGroupName,!1)},NormalizeEncryptionScope:function(encryptionScope){return Kusto.Data.Common.CslSyntaxGenerator.NormalizeName(encryptionScope,!1)},IsIdentifier:function(token){if(System.String.isNullOrEmpty(token)||!System.Char.isLetter(token.charCodeAt(0))&&token.charCodeAt(0)!==95)return!1;return System.Linq.Enumerable.from(token,System.Char).all($asm.$.Kusto.Data.Common.CslSyntaxGenerator.f2)},IsAscii:function(c){return c<=127},NormalizeName:function(name,forceNormalization){return System.String.isNullOrEmpty(name)?name:!forceNormalization&&Kusto.Data.Common.CslSyntaxGenerator.IsIdentifier(name)&&!Kusto.Data.Common.CslSyntaxGenerator.IsKeyword(name)?name:System.String.startsWith(name,\"[\",4)?name:System.String.contains(name,\"'\")?'[\"'+(name||\"\")+'\"]':\"['\"+(name||\"\")+\"']\"},IsKeyword:function(token){return Kusto.Data.Common.CslSyntaxGenerator.s_keywords.contains(token)}}}});Bridge.ns(\"Kusto.Data.Common.CslSyntaxGenerator\",$asm.$);Bridge.apply($asm.$.Kusto.Data.Common.CslSyntaxGenerator,{f1:function(_o1){return _o1.add(\"access\"),_o1.add(\"account\"),_o1.add(\"accounts\"),_o1.add(\"accumulate\"),_o1.add(\"activitystate\"),_o1.add(\"add\"),_o1.add(\"adl\"),_o1.add(\"admin\"),_o1.add(\"admins\"),_o1.add(\"aggregations\"),_o1.add(\"alias\"),_o1.add(\"all\"),_o1.add(\"alldatabasesadmins\"),_o1.add(\"alldatabasesmonitors\"),_o1.add(\"alldatabasesviewers\"),_o1.add(\"alter\"),_o1.add(\"alter-merge\"),_o1.add(\"and\"),_o1.add(\"anomalycolumns\"),_o1.add(\"append\"),_o1.add(\"apply\"),_o1.add(\"artifacts\"),_o1.add(\"as\"),_o1.add(\"asc\"),_o1.add(\"assert-schema\"),_o1.add(\"assignment\"),_o1.add(\"assignments\"),_o1.add(\"async\"),_o1.add(\"attach\"),_o1.add(\"autoUpdateSchema\"),_o1.add(\"auto_delete\"),_o1.add(\"avro\"),_o1.add(\"apacheavro\"),_o1.add(\"axes\"),_o1.add(\"base\"),_o1.add(\"based-on\"),_o1.add(\"basicauth\"),_o1.add(\"between\"),_o1.add(\"bin\"),_o1.add(\"blob\"),_o1.add(\"block\"),_o1.add(\"blocked\"),_o1.add(\"by\"),_o1.add(\"cache\"),_o1.add(\"caching\"),_o1.add(\"cachingpolicy\"),_o1.add(\"call-tree\"),_o1.add(\"callout\"),_o1.add(\"cancel\"),_o1.add(\"capacity\"),_o1.add(\"certificates\"),_o1.add(\"classification\"),_o1.add(\"clean\"),_o1.add(\"clear\"),_o1.add(\"cloudsettings\"),_o1.add(\"cluster\"),_o1.add(\"column\"),_o1.add(\"columns\"),_o1.add(\"column-docstrings\"),_o1.add(\"commands\"),_o1.add(\"commands-and-queries\"),_o1.add(\"commconcurrency\"),_o1.add(\"commpools\"),_o1.add(\"compact\"),_o1.add(\"completed\"),_o1.add(\"compressed\"),_o1.add(\"consume\"),_o1.add(\"contains\"),_o1.add(\"continuous\"),_o1.add(\"continuous-export\"),_o1.add(\"continuous-exports\"),_o1.add(\"continuous-job\"),_o1.add(\"conservative\"),_o1.add(\"copy\"),_o1.add(\"corrupted\"),_o1.add(\"count\"),_o1.add(\"crash\"),_o1.add(\"create\"),_o1.add(\"create-or-alter\"),_o1.add(\"createdon\"),_o1.add(\"create-merge\"),_o1.add(\"credstore\"),_o1.add(\"csl\"),_o1.add(\"cslschema\"),_o1.add(\"csv\"),_o1.add(\"cursor\"),_o1.add(\"data\"),_o1.add(\"database\"),_o1.add(\"databasecreators\"),_o1.add(\"databases\"),_o1.add(\"dataexport\"),_o1.add(\"data-export\"),_o1.add(\"dataformat\"),_o1.add(\"data_movement_restriction\"),_o1.add(\"datatable\"),_o1.add(\"declare\"),_o1.add(\"decryption-certificate-thumbprint\"),_o1.add(\"default\"),_o1.add(\"define\"),_o1.add(\"delete\"),_o1.add(\"delta\"),_o1.add(\"desc\"),_o1.add(\"detach\"),_o1.add(\"details\"),_o1.add(\"diagnostics\"),_o1.add(\"disable\"),_o1.add(\"distinct\"),_o1.add(\"dnshostname\"),_o1.add(\"docstring\"),_o1.add(\"drop\"),_o1.add(\"drop-pretend\"),_o1.add(\"dup-next-failed-ingest\"),_o1.add(\"dup-next-ingest\"),_o1.add(\"earliest\"),_o1.add(\"echo\"),_o1.add(\"edges\"),_o1.add(\"effective\"),_o1.add(\"enable\"),_o1.add(\"encoding\"),_o1.add(\"encodingpolicy\"),_o1.add(\"entity\"),_o1.add(\"entity_group\"),_o1.add(\"entity_groups\"),_o1.add(\"ephemeral\"),_o1.add(\"escape\"),_o1.add(\"evaluate\"),_o1.add(\"except\"),_o1.add(\"execute\"),_o1.add(\"export\"),_o1.add(\"extend\"),_o1.add(\"extent\"),_o1.add(\"extentcontainers\"),_o1.add(\"extents\"),_o1.add(\"extentsmerge\"),_o1.add(\"extents-merge\"),_o1.add(\"extents-partition\"),_o1.add(\"extent_tags_retention\"),_o1.add(\"external\"),_o1.add(\"external-artifacts\"),_o1.add(\"externaldata\"),_o1.add(\"external_data\"),_o1.add(\"fabric\"),_o1.add(\"fabriccache\"),_o1.add(\"fabricclocks\"),_o1.add(\"fabriclocks\"),_o1.add(\"facet\"),_o1.add(\"failures\"),_o1.add(\"featureflags\"),_o1.add(\"filter\"),_o1.add(\"find\"),_o1.add(\"first\"),_o1.add(\"flags\"),_o1.add(\"flush\"),_o1.add(\"folder\"),_o1.add(\"fork\"),_o1.add(\"freshness\"),_o1.add(\"from\"),_o1.add(\"function\"),_o1.add(\"functions\"),_o1.add(\"generic\"),_o1.add(\"get\"),_o1.add(\"getschema\"),_o1.add(\"granny-asc\"),_o1.add(\"granny-desc\"),_o1.add(\"granularity\"),_o1.add(\"greedy\"),_o1.add(\"groups\"),_o1.add(\"harddelete\"),_o1.add(\"hardretention\"),_o1.add(\"has\"),_o1.add(\"has_all\"),_o1.add(\"has_any\"),_o1.add(\"hash\"),_o1.add(\"hidden\"),_o1.add(\"hot\"),_o1.add(\"hotdata\"),_o1.add(\"hotindex\"),_o1.add(\"hours\"),_o1.add(\"id\"),_o1.add(\"if_later_than\"),_o1.add(\"ifexists\"),_o1.add(\"ifnotexists\"),_o1.add(\"in\"),_o1.add(\"in~\"),_o1.add(\"info\"),_o1.add(\"ingest\"),_o1.add(\"ingest-from-storage\"),_o1.add(\"ingest-inline\"),_o1.add(\"ingestion\"),_o1.add(\"ingestionbatching\"),_o1.add(\"ingestions\"),_o1.add(\"ingestiontime\"),_o1.add(\"ingestors\"),_o1.add(\"inline\"),_o1.add(\"internal\"),_o1.add(\"into\"),_o1.add(\"invoke\"),_o1.add(\"journal\"),_o1.add(\"json\"),_o1.add(\"jobs\"),_o1.add(\"key\"),_o1.add(\"keys\"),_o1.add(\"keyvault\"),_o1.add(\"kind\"),_o1.add(\"kql\"),_o1.add(\"kqlschema\"),_o1.add(\"kv_delimiter\"),_o1.add(\"last\"),_o1.add(\"latest\"),_o1.add(\"legend\"),_o1.add(\"let\"),_o1.add(\"limit\"),_o1.add(\"linear\"),_o1.add(\"list\"),_o1.add(\"load\"),_o1.add(\"local\"),_o1.add(\"location\"),_o1.add(\"lookback\"),_o1.add(\"lookup\"),_o1.add(\"log\"),_o1.add(\"macro-expand\"),_o1.add(\"maintenance_mode\"),_o1.add(\"make-series\"),_o1.add(\"management\"),_o1.add(\"map\"),_o1.add(\"mapping\"),_o1.add(\"mappings\"),_o1.add(\"managed_identity\"),_o1.add(\"materialize\"),_o1.add(\"materialized-view\"),_o1.add(\"materialized-views\"),_o1.add(\"materialized-view-combine\"),_o1.add(\"maxRecords\"),_o1.add(\"mdm\"),_o1.add(\"memory\"),_o1.add(\"mempools\"),_o1.add(\"merge\"),_o1.add(\"metadata\"),_o1.add(\"method\"),_o1.add(\"mirroring\"),_o1.add(\"missing\"),_o1.add(\"monitoring\"),_o1.add(\"monitors\"),_o1.add(\"move\"),_o1.add(\"multidatabaseadmins\"),_o1.add(\"mv-apply\"),_o1.add(\"mv-expand\"),_o1.add(\"mvapply\"),_o1.add(\"mvexpand\"),_o1.add(\"nan\"),_o1.add(\"node\"),_o1.add(\"nodes\"),_o1.add(\"none\"),_o1.add(\"!between\"),_o1.add(\"!in\"),_o1.add(\"!in~\"),_o1.add(\"null\"),_o1.add(\"nulls\"),_o1.add(\"of\"),_o1.add(\"on\"),_o1.add(\"older\"),_o1.add(\"operation\"),_o1.add(\"operations\"),_o1.add(\"ops\"),_o1.add(\"optional\"),_o1.add(\"or\"),_o1.add(\"orc\"),_o1.add(\"order\"),_o1.add(\"others\"),_o1.add(\"output\"),_o1.add(\"over\"),_o1.add(\"pack\"),_o1.add(\"pair_delimiter\"),_o1.add(\"panels\"),_o1.add(\"parse\"),_o1.add(\"parse-where\"),_o1.add(\"parse-kv\"),_o1.add(\"parquet\"),_o1.add(\"partition\"),_o1.add(\"__partitionby\"),_o1.add(\"partitioning\"),_o1.add(\"password\"),_o1.add(\"patch\"),_o1.add(\"pathformat\"),_o1.add(\"pattern\"),_o1.add(\"pending\"),_o1.add(\"period\"),_o1.add(\"periodic-storage-artifacts-cleanup\"),_o1.add(\"persist\"),_o1.add(\"plotly\"),_o1.add(\"plugin\"),_o1.add(\"plugins\"),_o1.add(\"policies\"),_o1.add(\"policy\"),_o1.add(\"pretend\"),_o1.add(\"prettyname\"),_o1.add(\"primary\"),_o1.add(\"principal\"),_o1.add(\"principals\"),_o1.add(\"print\"),_o1.add(\"project\"),_o1.add(\"project-away\"),_o1.add(\"project-keep\"),_o1.add(\"project-rename\"),_o1.add(\"project-reorder\"),_o1.add(\"project-smart\"),_o1.add(\"purge\"),_o1.add(\"purge-cleanup\"),_o1.add(\"purge-storage-artifacts-cleanup\"),_o1.add(\"queries\"),_o1.add(\"query\"),_o1.add(\"query_parameters\"),_o1.add(\"queryexecution\"),_o1.add(\"queryplan\"),_o1.add(\"query_weak_consistency\"),_o1.add(\"query_results\"),_o1.add(\"quote\"),_o1.add(\"range\"),_o1.add(\"readonly\"),_o1.add(\"readwrite\"),_o1.add(\"reason\"),_o1.add(\"rebuild\"),_o1.add(\"record\"),_o1.add(\"records\"),_o1.add(\"recycle\"),_o1.add(\"reduce\"),_o1.add(\"regex\"),_o1.add(\"remote-schema\"),_o1.add(\"rename\"),_o1.add(\"render\"),_o1.add(\"replace\"),_o1.add(\"resources\"),_o1.add(\"restore\"),_o1.add(\"restrict\"),_o1.add(\"restricted_view_access\"),_o1.add(\"resume\"),_o1.add(\"resume-purges\"),_o1.add(\"retention\"),_o1.add(\"request_classification\"),_o1.add(\"request_support\"),_o1.add(\"roles\"),_o1.add(\"row_level_security\"),_o1.add(\"roworder\"),_o1.add(\"roworderpolicy\"),_o1.add(\"rowstore\"),_o1.add(\"rowstorepolicy\"),_o1.add(\"rowstore_references\"),_o1.add(\"rowstores\"),_o1.add(\"rowstore_sealinfo\"),_o1.add(\"run\"),_o1.add(\"running\"),_o1.add(\"sample\"),_o1.add(\"sample-distinct\"),_o1.add(\"sandbox\"),_o1.add(\"sandboxes\"),_o1.add(\"save\"),_o1.add(\"scalein\"),_o1.add(\"scan\"),_o1.add(\"schema\"),_o1.add(\"script\"),_o1.add(\"seal\"),_o1.add(\"seals\"),_o1.add(\"search\"),_o1.add(\"secrets\"),_o1.add(\"serialize\"),_o1.add(\"sensitive\"),_o1.add(\"series\"),_o1.add(\"service\"),_o1.add(\"servicepoints\"),_o1.add(\"services\"),_o1.add(\"set\"),_o1.add(\"set-or-append\"),_o1.add(\"set-or-replace\"),_o1.add(\"sharedcontainers\"),_o1.add(\"sharding\"),_o1.add(\"shards\"),_o1.add(\"shard-groups\"),_o1.add(\"shards-group\"),_o1.add(\"shards_grouping\"),_o1.add(\"show\"),_o1.add(\"softdelete\"),_o1.add(\"softretention\"),_o1.add(\"sort\"),_o1.add(\"sql\"),_o1.add(\"stacked\"),_o1.add(\"stacked100\"),_o1.add(\"state\"),_o1.add(\"stats\"),_o1.add(\"status\"),_o1.add(\"statistics\"),_o1.add(\"step\"),_o1.add(\"storedqueryresultcontainers\"),_o1.add(\"stream\"),_o1.add(\"streamingingestion\"),_o1.add(\"streamingingestion_maintenance_mode\"),_o1.add(\"streaming-ingestion-post-processing\"),_o1.add(\"stored-query-results\"),_o1.add(\"summarize\"),_o1.add(\"sstream\"),_o1.add(\"storage\"),_o1.add(\"suspend\"),_o1.add(\"system_properties\"),_o1.add(\"systemdb\"),_o1.add(\"table\"),_o1.add(\"tablepurge\"),_o1.add(\"table-purge\"),_o1.add(\"table_mirroring_template\"),_o1.add(\"table_mirroring_templates\"),_o1.add(\"tables\"),_o1.add(\"tags\"),_o1.add(\"take\"),_o1.add(\"tcpconnections\"),_o1.add(\"tcpports\"),_o1.add(\"tempstorage\"),_o1.add(\"tenants\"),_o1.add(\"threadpools\"),_o1.add(\"threshold\"),_o1.add(\"throw\"),_o1.add(\"title\"),_o1.add(\"to\"),_o1.add(\"top\"),_o1.add(\"top-hitters\"),_o1.add(\"top-nested\"),_o1.add(\"toscalar\"),_o1.add(\"totable\"),_o1.add(\"trace\"),_o1.add(\"traces\"),_o1.add(\"traceresults\"),_o1.add(\"tsv\"),_o1.add(\"type\"),_o1.add(\"typeof\"),_o1.add(\"undo\"),_o1.add(\"__unique\"),_o1.add(\"unstacked\"),_o1.add(\"unrestrictedviewers\"),_o1.add(\"update\"),_o1.add(\"usage\"),_o1.add(\"user\"),_o1.add(\"users\"),_o1.add(\"using\"),_o1.add(\"uuid\"),_o1.add(\"verbose\"),_o1.add(\"version\"),_o1.add(\"view\"),_o1.add(\"views\"),_o1.add(\"viewers\"),_o1.add(\"virtual_cluster\"),_o1.add(\"virtual_clusters\"),_o1.add(\"visible\"),_o1.add(\"volatile\"),_o1.add(\"v9\"),_o1.add(\"v10\"),_o1.add(\"w3clogfile\"),_o1.add(\"warm\"),_o1.add(\"warming\"),_o1.add(\"whatif\"),_o1.add(\"where\"),_o1.add(\"with\"),_o1.add(\"workload_group\"),_o1.add(\"workload_groups\"),_o1.add(\"writeaheadlog\"),_o1.add(\"xaxis\"),_o1.add(\"xcolumn\"),_o1.add(\"xmin\"),_o1.add(\"xmax\"),_o1.add(\"xtitle\"),_o1.add(\"yaxis\"),_o1.add(\"ycolumns\"),_o1.add(\"ymin\"),_o1.add(\"ymax\"),_o1.add(\"ysplit\"),_o1.add(\"ytitle\"),_o1.add(\"bool\"),_o1.add(\"boolean\"),_o1.add(\"int8\"),_o1.add(\"char\"),_o1.add(\"uint8\"),_o1.add(\"byte\"),_o1.add(\"int16\"),_o1.add(\"uint16\"),_o1.add(\"int\"),_o1.add(\"int32\"),_o1.add(\"uint\"),_o1.add(\"uint32\"),_o1.add(\"long\"),_o1.add(\"int64\"),_o1.add(\"ulong\"),_o1.add(\"uint64\"),_o1.add(\"float\"),_o1.add(\"real\"),_o1.add(\"double\"),_o1.add(\"string\"),_o1.add(\"time\"),_o1.add(\"timespan\"),_o1.add(\"date\"),_o1.add(\"datetime\"),_o1.add(\"guid\"),_o1.add(\"uniqueid\"),_o1.add(\"dynamic\"),_o1.add(\"decimal\"),_o1.add(\"complete\"),_o1.add(\"job\"),_o1.add(\"kuiper\"),_o1.add(\"start\"),_o1.add(\"task\"),_o1.add(\"tasks\"),_o1.add(\"GB\"),_o1.add(\"MB\"),_o1.add(\"application\"),_o1.add(\"blockedprincipals\"),_o1.add(\"bytes\"),_o1.add(\"callstacks\"),_o1.add(\"concurrency\"),_o1.add(\"configuration\"),_o1.add(\"container\"),_o1.add(\"containers\"),_o1.add(\"datasize\"),_o1.add(\"datastats\"),_o1.add(\"datetime_pattern\"),_o1.add(\"days\"),_o1.add(\"dimensions\"),_o1.add(\"disabled\"),_o1.add(\"dryrun\"),_o1.add(\"empty\"),_o1.add(\"enabled\"),_o1.add(\"exclude\"),_o1.add(\"expired_tables_cleanup\"),_o1.add(\"extentsize\"),_o1.add(\"follower\"),_o1.add(\"for\"),_o1.add(\"format_datetime\"),_o1.add(\"hot_window\"),_o1.add(\"identity\"),_o1.add(\"include\"),_o1.add(\"network\"),_o1.add(\"recoverability\"),_o1.add(\"startofday\"),_o1.add(\"startofmonth\"),_o1.add(\"startofweek\"),_o1.add(\"startofyear\"),_o1.add(\"stored_query_result\"),_o1.add(\"stored_query_results\"),_o1.add(\"transactions\"),_o1.add(\"trim\"),_o1.add(\"union\"),_o1.add(\"until\"),_o1.add(\"unused\"),_o1.add(\"utilization\"),_o1.add(\"violations\"),_o1.add(\"3Dchart\"),_o1.add(\"__contextual_datatable\"),_o1.add(\"__crossCluster\"),_o1.add(\"__crossDB\"),_o1.add(\"__executeAndCache\"),_o1.add(\"__id\"),_o1.add(\"__isFuzzy\"),_o1.add(\"__noWithSource\"),_o1.add(\"__packedColumn\"),_o1.add(\"__projectAway\"),_o1.add(\"__sourceColumnIndex\"),_o1.add(\"anomalychart\"),_o1.add(\"areachart\"),_o1.add(\"bagexpansion\"),_o1.add(\"barchart\"),_o1.add(\"bin_legacy\"),_o1.add(\"card\"),_o1.add(\"columnchart\"),_o1.add(\"datascope\"),_o1.add(\"decodeblocks\"),_o1.add(\"expandoutput\"),_o1.add(\"force_remote\"),_o1.add(\"hotcache\"),_o1.add(\"isfuzzy\"),_o1.add(\"join\"),_o1.add(\"ladderchart\"),_o1.add(\"linechart\"),_o1.add(\"nooptimization\"),_o1.add(\"piechart\"),_o1.add(\"pivotchart\"),_o1.add(\"relaxed\"),_o1.add(\"scatterchart\"),_o1.add(\"simple\"),_o1.add(\"stackedareachart\"),_o1.add(\"timechart\"),_o1.add(\"timeline\"),_o1.add(\"timepivot\"),_o1.add(\"treemap\"),_o1.add(\"with_itemindex\"),_o1.add(\"with_match_id\"),_o1.add(\"with_source\"),_o1.add(\"with_step_name\"),_o1.add(\"withsource\"),_o1},f2:function(c){return(System.Char.isDigit(c)||System.Char.isLetter(c))&&Kusto.Data.Common.CslSyntaxGenerator.IsAscii(c)||c===95}});Bridge.define(\"Kusto.Data.Common.DatabaseShowFlavor\",{$kind:\"enum\",statics:{fields:{Identity:0,Verbose:1,Policies:2,DataStats:3,Default:4,Metadata:5}}});Bridge.define(\"Kusto.Data.Common.DataConnectionError\",{$kind:\"enum\",statics:{fields:{ManagedIdentityUnauthorized:0,ManagedIdentityNotFound:1,UsingDeprecatedConnectionString:2}}});Bridge.define(\"Kusto.Data.Common.DataRecoverability\",{$kind:\"enum\",statics:{fields:{Unknown:0,Enabled:1,Disabled:2}}});Bridge.define(\"Kusto.Data.Common.DataSourceCompressionType\",{$kind:\"enum\",statics:{fields:{None:0,GZip:1,Zip:2}}});Bridge.define(\"Kusto.Data.Common.EntityType\",{$kind:\"enum\",statics:{fields:{Unknown:0,Cluster:1,Database:2,Table:3,Column:4,Function:5,ExternalTable:6,MaterializedView:7,EntityGroup:8}}});Bridge.define(\"Kusto.Data.Common.ExtendedDatabaseShowFlavor\",{statics:{methods:{FastToString:function(that){switch(that){case Kusto.Data.Common.DatabaseShowFlavor.Identity:return\"Identity\";case Kusto.Data.Common.DatabaseShowFlavor.Verbose:return\"Verbose\";case Kusto.Data.Common.DatabaseShowFlavor.Policies:return\"Policies\";case Kusto.Data.Common.DatabaseShowFlavor.DataStats:return\"DataStats\";case Kusto.Data.Common.DatabaseShowFlavor.Default:return\"Default\";case Kusto.Data.Common.DatabaseShowFlavor.Metadata:return\"Metadata\";default:break}return System.String.format(\"[unknown: {0}]\",[Bridge.box(that,System.Int32)])},FastIsDefined$1:function(value){var dummy={v:new Kusto.Data.Common.DatabaseShowFlavor};return Kusto.Data.Common.ExtendedDatabaseShowFlavor.FastTryParse(value,dummy,!1,!0)},FastIsDefined:function(value){switch(value){case Kusto.Data.Common.DatabaseShowFlavor.Identity:return!0;case Kusto.Data.Common.DatabaseShowFlavor.Verbose:return!0;case Kusto.Data.Common.DatabaseShowFlavor.Policies:return!0;case Kusto.Data.Common.DatabaseShowFlavor.DataStats:return!0;case Kusto.Data.Common.DatabaseShowFlavor.Default:return!0;case Kusto.Data.Common.DatabaseShowFlavor.Metadata:return!0;default:return!1}},FastHasFlag$1:function(that,flag){return(that&flag)===flag},FastHasFlag:function(that,flag){return(that&flag)===flag},FastParse:function(value,ignoreCase,ignoreInts){ignoreCase===void 0&&(ignoreCase=!1);ignoreInts===void 0&&(ignoreInts=!1);var ret={v:new Kusto.Data.Common.DatabaseShowFlavor};if(Kusto.Data.Common.ExtendedDatabaseShowFlavor.FastTryParse(value,ret,ignoreCase,ignoreInts))return ret.v;throw new System.Exception(\"Invalid enum value: \"+(value||\"\"));},FastTryParse:function(value,ret,ignoreCase,ignoreInts){ignoreCase===void 0&&(ignoreCase=!1);ignoreInts===void 0&&(ignoreInts=!1);switch(value){case\"0\":case\"Identity\":return ret.v=Kusto.Data.Common.DatabaseShowFlavor.Identity,!0;case\"1\":case\"Verbose\":return ret.v=Kusto.Data.Common.DatabaseShowFlavor.Verbose,!0;case\"2\":case\"Policies\":return ret.v=Kusto.Data.Common.DatabaseShowFlavor.Policies,!0;case\"3\":case\"DataStats\":return ret.v=Kusto.Data.Common.DatabaseShowFlavor.DataStats,!0;case\"4\":case\"Default\":return ret.v=Kusto.Data.Common.DatabaseShowFlavor.Default,!0;case\"5\":case\"Metadata\":return ret.v=Kusto.Data.Common.DatabaseShowFlavor.Metadata,!0;default:break}if(ignoreCase&&!System.String.isNullOrEmpty(value))switch(value.toLowerCase()){case\"identity\":return ret.v=Kusto.Data.Common.DatabaseShowFlavor.Identity,!0;case\"verbose\":return ret.v=Kusto.Data.Common.DatabaseShowFlavor.Verbose,!0;case\"policies\":return ret.v=Kusto.Data.Common.DatabaseShowFlavor.Policies,!0;case\"datastats\":return ret.v=Kusto.Data.Common.DatabaseShowFlavor.DataStats,!0;case\"default\":return ret.v=Kusto.Data.Common.DatabaseShowFlavor.Default,!0;case\"metadata\":return ret.v=Kusto.Data.Common.DatabaseShowFlavor.Metadata,!0;default:break}if(!ignoreInts){var reti={v:0};if(System.Int32.tryParse(value,reti))return ret.v=reti.v,!0}return ret.v=0,!1},FastGetHashCode:function(that){return that},FastGetDescription:function(that){switch(that){case Kusto.Data.Common.DatabaseShowFlavor.Identity:return\"\";case Kusto.Data.Common.DatabaseShowFlavor.Verbose:return\"\";case Kusto.Data.Common.DatabaseShowFlavor.Policies:return\"\";case Kusto.Data.Common.DatabaseShowFlavor.DataStats:return\"\";case Kusto.Data.Common.DatabaseShowFlavor.Default:return\"\";case Kusto.Data.Common.DatabaseShowFlavor.Metadata:return\"\";default:return null}}}}});Bridge.define(\"Kusto.Data.Common.ExtendedDataConnectionError\",{statics:{methods:{FastToString:function(that){switch(that){case Kusto.Data.Common.DataConnectionError.ManagedIdentityUnauthorized:return\"ManagedIdentityUnauthorized\";case Kusto.Data.Common.DataConnectionError.ManagedIdentityNotFound:return\"ManagedIdentityNotFound\";case Kusto.Data.Common.DataConnectionError.UsingDeprecatedConnectionString:return\"UsingDeprecatedConnectionString\";default:break}return System.String.format(\"[unknown: {0}]\",[Bridge.box(that,System.Int32)])},FastIsDefined$1:function(value){var dummy={v:new Kusto.Data.Common.DataConnectionError};return Kusto.Data.Common.ExtendedDataConnectionError.FastTryParse(value,dummy,!1,!0)},FastIsDefined:function(value){switch(value){case Kusto.Data.Common.DataConnectionError.ManagedIdentityUnauthorized:return!0;case Kusto.Data.Common.DataConnectionError.ManagedIdentityNotFound:return!0;case Kusto.Data.Common.DataConnectionError.UsingDeprecatedConnectionString:return!0;default:return!1}},FastHasFlag$1:function(that,flag){return(that&flag)===flag},FastHasFlag:function(that,flag){return(that&flag)===flag},FastParse:function(value,ignoreCase,ignoreInts){ignoreCase===void 0&&(ignoreCase=!1);ignoreInts===void 0&&(ignoreInts=!1);var ret={v:new Kusto.Data.Common.DataConnectionError};if(Kusto.Data.Common.ExtendedDataConnectionError.FastTryParse(value,ret,ignoreCase,ignoreInts))return ret.v;throw new System.Exception(\"Invalid enum value: \"+(value||\"\"));},FastTryParse:function(value,ret,ignoreCase,ignoreInts){ignoreCase===void 0&&(ignoreCase=!1);ignoreInts===void 0&&(ignoreInts=!1);switch(value){case\"ManagedIdentityUnauthorized\":return ret.v=Kusto.Data.Common.DataConnectionError.ManagedIdentityUnauthorized,!0;case\"ManagedIdentityNotFound\":return ret.v=Kusto.Data.Common.DataConnectionError.ManagedIdentityNotFound,!0;case\"UsingDeprecatedConnectionString\":return ret.v=Kusto.Data.Common.DataConnectionError.UsingDeprecatedConnectionString,!0;default:break}if(ignoreCase&&!System.String.isNullOrEmpty(value))switch(value.toLowerCase()){case\"managedidentityunauthorized\":return ret.v=Kusto.Data.Common.DataConnectionError.ManagedIdentityUnauthorized,!0;case\"managedidentitynotfound\":return ret.v=Kusto.Data.Common.DataConnectionError.ManagedIdentityNotFound,!0;case\"usingdeprecatedconnectionstring\":return ret.v=Kusto.Data.Common.DataConnectionError.UsingDeprecatedConnectionString,!0;default:break}if(!ignoreInts){var reti={v:0};if(System.Int32.tryParse(value,reti))return ret.v=reti.v,!0}return ret.v=0,!1},FastGetHashCode:function(that){return that},FastGetDescription:function(that){switch(that){case Kusto.Data.Common.DataConnectionError.ManagedIdentityUnauthorized:return\"Managed Identity doesn't have sufficient authorizations. This likely indicates that the user didn't provide the Managed Identity with the necessary role or scope.\";case Kusto.Data.Common.DataConnectionError.ManagedIdentityNotFound:return\"Managed Identity doesn't exist in the cluster. This likely indicates the user didn't link their Managed Identity to this ADX cluster.\";case Kusto.Data.Common.DataConnectionError.UsingDeprecatedConnectionString:return\"Data Connection authenticates using a connection string instead of a managed identity, which is deprecated.\";default:return null}}}}});Bridge.define(\"Kusto.Data.Common.ExtendedDataRecoverability\",{statics:{methods:{FastToString:function(that){switch(that){case Kusto.Data.Common.DataRecoverability.Unknown:return\"Unknown\";case Kusto.Data.Common.DataRecoverability.Enabled:return\"Enabled\";case Kusto.Data.Common.DataRecoverability.Disabled:return\"Disabled\";default:break}return System.String.format(\"[unknown: {0}]\",[Bridge.box(that,System.Int32)])},FastIsDefined$1:function(value){var dummy={v:new Kusto.Data.Common.DataRecoverability};return Kusto.Data.Common.ExtendedDataRecoverability.FastTryParse(value,dummy,!1,!0)},FastIsDefined:function(value){switch(value){case Kusto.Data.Common.DataRecoverability.Unknown:return!0;case Kusto.Data.Common.DataRecoverability.Enabled:return!0;case Kusto.Data.Common.DataRecoverability.Disabled:return!0;default:return!1}},FastHasFlag$1:function(that,flag){return(that&flag)===flag},FastHasFlag:function(that,flag){return(that&flag)===flag},FastParse:function(value,ignoreCase,ignoreInts){ignoreCase===void 0&&(ignoreCase=!1);ignoreInts===void 0&&(ignoreInts=!1);var ret={v:new Kusto.Data.Common.DataRecoverability};if(Kusto.Data.Common.ExtendedDataRecoverability.FastTryParse(value,ret,ignoreCase,ignoreInts))return ret.v;throw new System.Exception(\"Invalid enum value: \"+(value||\"\"));},FastTryParse:function(value,ret,ignoreCase,ignoreInts){ignoreCase===void 0&&(ignoreCase=!1);ignoreInts===void 0&&(ignoreInts=!1);switch(value){case\"0\":case\"Unknown\":return ret.v=Kusto.Data.Common.DataRecoverability.Unknown,!0;case\"1\":case\"Enabled\":return ret.v=Kusto.Data.Common.DataRecoverability.Enabled,!0;case\"2\":case\"Disabled\":return ret.v=Kusto.Data.Common.DataRecoverability.Disabled,!0;default:break}if(ignoreCase&&!System.String.isNullOrEmpty(value))switch(value.toLowerCase()){case\"unknown\":return ret.v=Kusto.Data.Common.DataRecoverability.Unknown,!0;case\"enabled\":return ret.v=Kusto.Data.Common.DataRecoverability.Enabled,!0;case\"disabled\":return ret.v=Kusto.Data.Common.DataRecoverability.Disabled,!0;default:break}if(!ignoreInts){var reti={v:0};if(System.Int32.tryParse(value,reti))return ret.v=reti.v,!0}return ret.v=0,!1},FastGetHashCode:function(that){return that},FastGetDescription:function(that){switch(that){case Kusto.Data.Common.DataRecoverability.Unknown:return\"\";case Kusto.Data.Common.DataRecoverability.Enabled:return\"\";case Kusto.Data.Common.DataRecoverability.Disabled:return\"\";default:return null}}}}});Bridge.define(\"Kusto.Data.Common.ExtendedDataSourceCompressionType\",{statics:{methods:{FastToString:function(that){switch(that){case Kusto.Data.Common.DataSourceCompressionType.None:return\"None\";case Kusto.Data.Common.DataSourceCompressionType.GZip:return\"GZip\";case Kusto.Data.Common.DataSourceCompressionType.Zip:return\"Zip\";default:break}return System.String.format(\"[unknown: {0}]\",[Bridge.box(that,System.Int32)])},FastIsDefined$1:function(value){var dummy={v:new Kusto.Data.Common.DataSourceCompressionType};return Kusto.Data.Common.ExtendedDataSourceCompressionType.FastTryParse(value,dummy,!1,!0)},FastIsDefined:function(value){switch(value){case Kusto.Data.Common.DataSourceCompressionType.None:return!0;case Kusto.Data.Common.DataSourceCompressionType.GZip:return!0;case Kusto.Data.Common.DataSourceCompressionType.Zip:return!0;default:return!1}},FastHasFlag$1:function(that,flag){return(that&flag)===flag},FastHasFlag:function(that,flag){return(that&flag)===flag},FastParse:function(value,ignoreCase,ignoreInts){ignoreCase===void 0&&(ignoreCase=!1);ignoreInts===void 0&&(ignoreInts=!1);var ret={v:new Kusto.Data.Common.DataSourceCompressionType};if(Kusto.Data.Common.ExtendedDataSourceCompressionType.FastTryParse(value,ret,ignoreCase,ignoreInts))return ret.v;throw new System.Exception(\"Invalid enum value: \"+(value||\"\"));},FastTryParse:function(value,ret,ignoreCase,ignoreInts){ignoreCase===void 0&&(ignoreCase=!1);ignoreInts===void 0&&(ignoreInts=!1);switch(value){case\"0\":case\"None\":return ret.v=Kusto.Data.Common.DataSourceCompressionType.None,!0;case\"1\":case\"GZip\":return ret.v=Kusto.Data.Common.DataSourceCompressionType.GZip,!0;case\"2\":case\"Zip\":return ret.v=Kusto.Data.Common.DataSourceCompressionType.Zip,!0;default:break}if(ignoreCase&&!System.String.isNullOrEmpty(value))switch(value.toLowerCase()){case\"none\":return ret.v=Kusto.Data.Common.DataSourceCompressionType.None,!0;case\"gzip\":return ret.v=Kusto.Data.Common.DataSourceCompressionType.GZip,!0;case\"zip\":return ret.v=Kusto.Data.Common.DataSourceCompressionType.Zip,!0;default:break}if(!ignoreInts){var reti={v:0};if(System.Int32.tryParse(value,reti))return ret.v=reti.v,!0}return ret.v=0,!1},FastGetHashCode:function(that){return that},FastGetDescription:function(that){switch(that){case Kusto.Data.Common.DataSourceCompressionType.None:return\"No compression\";case Kusto.Data.Common.DataSourceCompressionType.GZip:return\"GZip compression\";case Kusto.Data.Common.DataSourceCompressionType.Zip:return\"Zip compression\";default:return null}}}}});Bridge.define(\"Kusto.Data.Common.ExtendedEntityType\",{statics:{methods:{FastToString:function(that){switch(that){case Kusto.Data.Common.EntityType.Unknown:return\"Unknown\";case Kusto.Data.Common.EntityType.Cluster:return\"Cluster\";case Kusto.Data.Common.EntityType.Database:return\"Database\";case Kusto.Data.Common.EntityType.Table:return\"Table\";case Kusto.Data.Common.EntityType.Column:return\"Column\";case Kusto.Data.Common.EntityType.Function:return\"Function\";case Kusto.Data.Common.EntityType.ExternalTable:return\"ExternalTable\";case Kusto.Data.Common.EntityType.MaterializedView:return\"MaterializedView\";case Kusto.Data.Common.EntityType.EntityGroup:return\"EntityGroup\";default:break}return System.String.format(\"[unknown: {0}]\",[Bridge.box(that,System.Int32)])},FastIsDefined$1:function(value){var dummy={v:new Kusto.Data.Common.EntityType};return Kusto.Data.Common.ExtendedEntityType.FastTryParse(value,dummy,!1,!0)},FastIsDefined:function(value){switch(value){case Kusto.Data.Common.EntityType.Unknown:return!0;case Kusto.Data.Common.EntityType.Cluster:return!0;case Kusto.Data.Common.EntityType.Database:return!0;case Kusto.Data.Common.EntityType.Table:return!0;case Kusto.Data.Common.EntityType.Column:return!0;case Kusto.Data.Common.EntityType.Function:return!0;case Kusto.Data.Common.EntityType.ExternalTable:return!0;case Kusto.Data.Common.EntityType.MaterializedView:return!0;case Kusto.Data.Common.EntityType.EntityGroup:return!0;default:return!1}},FastHasFlag$1:function(that,flag){return(that&flag)===flag},FastHasFlag:function(that,flag){return(that&flag)===flag},FastParse:function(value,ignoreCase,ignoreInts){ignoreCase===void 0&&(ignoreCase=!1);ignoreInts===void 0&&(ignoreInts=!1);var ret={v:new Kusto.Data.Common.EntityType};if(Kusto.Data.Common.ExtendedEntityType.FastTryParse(value,ret,ignoreCase,ignoreInts))return ret.v;throw new System.Exception(\"Invalid enum value: \"+(value||\"\"));},FastTryParse:function(value,ret,ignoreCase,ignoreInts){ignoreCase===void 0&&(ignoreCase=!1);ignoreInts===void 0&&(ignoreInts=!1);switch(value){case\"0\":case\"Unknown\":return ret.v=Kusto.Data.Common.EntityType.Unknown,!0;case\"1\":case\"Cluster\":return ret.v=Kusto.Data.Common.EntityType.Cluster,!0;case\"2\":case\"Database\":return ret.v=Kusto.Data.Common.EntityType.Database,!0;case\"3\":case\"Table\":return ret.v=Kusto.Data.Common.EntityType.Table,!0;case\"4\":case\"Column\":return ret.v=Kusto.Data.Common.EntityType.Column,!0;case\"5\":case\"Function\":return ret.v=Kusto.Data.Common.EntityType.Function,!0;case\"6\":case\"ExternalTable\":return ret.v=Kusto.Data.Common.EntityType.ExternalTable,!0;case\"7\":case\"MaterializedView\":case\"materialized-view\":return ret.v=Kusto.Data.Common.EntityType.MaterializedView,!0;case\"8\":case\"EntityGroup\":return ret.v=Kusto.Data.Common.EntityType.EntityGroup,!0;default:break}if(ignoreCase&&!System.String.isNullOrEmpty(value))switch(value.toLowerCase()){case\"unknown\":return ret.v=Kusto.Data.Common.EntityType.Unknown,!0;case\"cluster\":return ret.v=Kusto.Data.Common.EntityType.Cluster,!0;case\"database\":return ret.v=Kusto.Data.Common.EntityType.Database,!0;case\"table\":return ret.v=Kusto.Data.Common.EntityType.Table,!0;case\"column\":return ret.v=Kusto.Data.Common.EntityType.Column,!0;case\"function\":return ret.v=Kusto.Data.Common.EntityType.Function,!0;case\"externaltable\":return ret.v=Kusto.Data.Common.EntityType.ExternalTable,!0;case\"materializedview\":case\"materialized-view\":return ret.v=Kusto.Data.Common.EntityType.MaterializedView,!0;case\"entitygroup\":return ret.v=Kusto.Data.Common.EntityType.EntityGroup,!0;default:break}if(!ignoreInts){var reti={v:0};if(System.Int32.tryParse(value,reti))return ret.v=reti.v,!0}return ret.v=0,!1},FastGetHashCode:function(that){return that},FastGetDescription:function(that){switch(that){case Kusto.Data.Common.EntityType.Unknown:return\"Unknown\";case Kusto.Data.Common.EntityType.Cluster:return\"Cluster entity type\";case Kusto.Data.Common.EntityType.Database:return\"Database entity type\";case Kusto.Data.Common.EntityType.Table:return\"Table entity type\";case Kusto.Data.Common.EntityType.Column:return\"Column entity type\";case Kusto.Data.Common.EntityType.Function:return\"Function entity type\";case Kusto.Data.Common.EntityType.ExternalTable:return\"External table entity type\";case Kusto.Data.Common.EntityType.MaterializedView:return\"Materialized view entity type\";case Kusto.Data.Common.EntityType.EntityGroup:return\"Entity Group entity type\";default:return null}}}}});Bridge.define(\"Kusto.Data.Common.ExtendedExtentsMergeLookbackPeriodKind\",{statics:{methods:{FastToString:function(that){switch(that){case Kusto.Data.Common.ExtentsMergeLookbackPeriodKind.Default:return\"Default\";case Kusto.Data.Common.ExtentsMergeLookbackPeriodKind.HotCache:return\"HotCache\";case Kusto.Data.Common.ExtentsMergeLookbackPeriodKind.All:return\"All\";case Kusto.Data.Common.ExtentsMergeLookbackPeriodKind.Custom:return\"Custom\";default:break}return System.String.format(\"[unknown: {0}]\",[Bridge.box(that,System.Int32)])},FastIsDefined$1:function(value){var dummy={v:new Kusto.Data.Common.ExtentsMergeLookbackPeriodKind};return Kusto.Data.Common.ExtendedExtentsMergeLookbackPeriodKind.FastTryParse(value,dummy,!1,!0)},FastIsDefined:function(value){switch(value){case Kusto.Data.Common.ExtentsMergeLookbackPeriodKind.Default:return!0;case Kusto.Data.Common.ExtentsMergeLookbackPeriodKind.HotCache:return!0;case Kusto.Data.Common.ExtentsMergeLookbackPeriodKind.All:return!0;case Kusto.Data.Common.ExtentsMergeLookbackPeriodKind.Custom:return!0;default:return!1}},FastHasFlag$1:function(that,flag){return(that&flag)===flag},FastHasFlag:function(that,flag){return(that&flag)===flag},FastParse:function(value,ignoreCase,ignoreInts){ignoreCase===void 0&&(ignoreCase=!1);ignoreInts===void 0&&(ignoreInts=!1);var ret={v:new Kusto.Data.Common.ExtentsMergeLookbackPeriodKind};if(Kusto.Data.Common.ExtendedExtentsMergeLookbackPeriodKind.FastTryParse(value,ret,ignoreCase,ignoreInts))return ret.v;throw new System.Exception(\"Invalid enum value: \"+(value||\"\"));},FastTryParse:function(value,ret,ignoreCase,ignoreInts){ignoreCase===void 0&&(ignoreCase=!1);ignoreInts===void 0&&(ignoreInts=!1);switch(value){case\"0\":case\"Default\":return ret.v=Kusto.Data.Common.ExtentsMergeLookbackPeriodKind.Default,!0;case\"1\":case\"HotCache\":return ret.v=Kusto.Data.Common.ExtentsMergeLookbackPeriodKind.HotCache,!0;case\"2\":case\"All\":return ret.v=Kusto.Data.Common.ExtentsMergeLookbackPeriodKind.All,!0;case\"3\":case\"Custom\":return ret.v=Kusto.Data.Common.ExtentsMergeLookbackPeriodKind.Custom,!0;default:break}if(ignoreCase&&!System.String.isNullOrEmpty(value))switch(value.toLowerCase()){case\"default\":return ret.v=Kusto.Data.Common.ExtentsMergeLookbackPeriodKind.Default,!0;case\"hotcache\":return ret.v=Kusto.Data.Common.ExtentsMergeLookbackPeriodKind.HotCache,!0;case\"all\":return ret.v=Kusto.Data.Common.ExtentsMergeLookbackPeriodKind.All,!0;case\"custom\":return ret.v=Kusto.Data.Common.ExtentsMergeLookbackPeriodKind.Custom,!0;default:break}if(!ignoreInts){var reti={v:0};if(System.Int32.tryParse(value,reti))return ret.v=reti.v,!0}return ret.v=0,!1},FastGetHashCode:function(that){return that},FastGetDescription:function(that){switch(that){case Kusto.Data.Common.ExtentsMergeLookbackPeriodKind.Default:return\"The default lookback period, as defined by the system\";case Kusto.Data.Common.ExtentsMergeLookbackPeriodKind.HotCache:return\"The hot cache period\";case Kusto.Data.Common.ExtentsMergeLookbackPeriodKind.All:return\"The entire period in which data exists\";case Kusto.Data.Common.ExtentsMergeLookbackPeriodKind.Custom:return\"A custom period, provided by the admin of the entity\";default:return null}}}}});Bridge.define(\"Kusto.Data.Common.ExtendedIngestionErrorCategory\",{statics:{methods:{FastToString:function(that){switch(that){case Kusto.Data.Common.IngestionErrorCategory.Unknown:return\"Unknown\";case Kusto.Data.Common.IngestionErrorCategory.InternalServiceError:return\"InternalServiceError\";case Kusto.Data.Common.IngestionErrorCategory.BadFormat:return\"BadFormat\";case Kusto.Data.Common.IngestionErrorCategory.BadRequest:return\"BadRequest\";case Kusto.Data.Common.IngestionErrorCategory.UpdatePolicyFailure:return\"UpdatePolicyFailure\";case Kusto.Data.Common.IngestionErrorCategory.EntityNotFound:return\"EntityNotFound\";case Kusto.Data.Common.IngestionErrorCategory.UserAccessNotAuthorized:return\"UserAccessNotAuthorized\";case Kusto.Data.Common.IngestionErrorCategory.DataAccessNotAuthorized:return\"DataAccessNotAuthorized\";case Kusto.Data.Common.IngestionErrorCategory.FileTooLarge:return\"FileTooLarge\";case Kusto.Data.Common.IngestionErrorCategory.ThrottledOnEngine:return\"ThrottledOnEngine\";case Kusto.Data.Common.IngestionErrorCategory.DownloadFailed:return\"DownloadFailed\";case Kusto.Data.Common.IngestionErrorCategory.RetryAttemptsExceeded:return\"RetryAttemptsExceeded\";case Kusto.Data.Common.IngestionErrorCategory.BlobAlreadyReceived:return\"BlobAlreadyReceived\";case Kusto.Data.Common.IngestionErrorCategory.Cancelled:return\"Cancelled\";case Kusto.Data.Common.IngestionErrorCategory.Configuration:return\"Configuration\";case Kusto.Data.Common.IngestionErrorCategory.MetadataAccessNotAuthorized:return\"MetadataAccessNotAuthorized\";default:break}return System.String.format(\"[unknown: {0}]\",[Bridge.box(that,System.Int32)])},FastIsDefined$1:function(value){var dummy={v:new Kusto.Data.Common.IngestionErrorCategory};return Kusto.Data.Common.ExtendedIngestionErrorCategory.FastTryParse(value,dummy,!1,!0)},FastIsDefined:function(value){switch(value){case Kusto.Data.Common.IngestionErrorCategory.Unknown:return!0;case Kusto.Data.Common.IngestionErrorCategory.InternalServiceError:return!0;case Kusto.Data.Common.IngestionErrorCategory.BadFormat:return!0;case Kusto.Data.Common.IngestionErrorCategory.BadRequest:return!0;case Kusto.Data.Common.IngestionErrorCategory.UpdatePolicyFailure:return!0;case Kusto.Data.Common.IngestionErrorCategory.EntityNotFound:return!0;case Kusto.Data.Common.IngestionErrorCategory.UserAccessNotAuthorized:return!0;case Kusto.Data.Common.IngestionErrorCategory.DataAccessNotAuthorized:return!0;case Kusto.Data.Common.IngestionErrorCategory.FileTooLarge:return!0;case Kusto.Data.Common.IngestionErrorCategory.ThrottledOnEngine:return!0;case Kusto.Data.Common.IngestionErrorCategory.DownloadFailed:return!0;case Kusto.Data.Common.IngestionErrorCategory.RetryAttemptsExceeded:return!0;case Kusto.Data.Common.IngestionErrorCategory.BlobAlreadyReceived:return!0;case Kusto.Data.Common.IngestionErrorCategory.Cancelled:return!0;case Kusto.Data.Common.IngestionErrorCategory.Configuration:return!0;case Kusto.Data.Common.IngestionErrorCategory.MetadataAccessNotAuthorized:return!0;default:return!1}},FastHasFlag$1:function(that,flag){return(that&flag)===flag},FastHasFlag:function(that,flag){return(that&flag)===flag},FastParse:function(value,ignoreCase,ignoreInts){ignoreCase===void 0&&(ignoreCase=!1);ignoreInts===void 0&&(ignoreInts=!1);var ret={v:new Kusto.Data.Common.IngestionErrorCategory};if(Kusto.Data.Common.ExtendedIngestionErrorCategory.FastTryParse(value,ret,ignoreCase,ignoreInts))return ret.v;throw new System.Exception(\"Invalid enum value: \"+(value||\"\"));},FastTryParse:function(value,ret,ignoreCase,ignoreInts){ignoreCase===void 0&&(ignoreCase=!1);ignoreInts===void 0&&(ignoreInts=!1);switch(value){case\"Unknown\":return ret.v=Kusto.Data.Common.IngestionErrorCategory.Unknown,!0;case\"InternalServiceError\":return ret.v=Kusto.Data.Common.IngestionErrorCategory.InternalServiceError,!0;case\"BadFormat\":return ret.v=Kusto.Data.Common.IngestionErrorCategory.BadFormat,!0;case\"BadRequest\":return ret.v=Kusto.Data.Common.IngestionErrorCategory.BadRequest,!0;case\"UpdatePolicyFailure\":return ret.v=Kusto.Data.Common.IngestionErrorCategory.UpdatePolicyFailure,!0;case\"EntityNotFound\":return ret.v=Kusto.Data.Common.IngestionErrorCategory.EntityNotFound,!0;case\"UserAccessNotAuthorized\":return ret.v=Kusto.Data.Common.IngestionErrorCategory.UserAccessNotAuthorized,!0;case\"DataAccessNotAuthorized\":return ret.v=Kusto.Data.Common.IngestionErrorCategory.DataAccessNotAuthorized,!0;case\"FileTooLarge\":return ret.v=Kusto.Data.Common.IngestionErrorCategory.FileTooLarge,!0;case\"ThrottledOnEngine\":return ret.v=Kusto.Data.Common.IngestionErrorCategory.ThrottledOnEngine,!0;case\"DownloadFailed\":return ret.v=Kusto.Data.Common.IngestionErrorCategory.DownloadFailed,!0;case\"RetryAttemptsExceeded\":return ret.v=Kusto.Data.Common.IngestionErrorCategory.RetryAttemptsExceeded,!0;case\"BlobAlreadyReceived\":return ret.v=Kusto.Data.Common.IngestionErrorCategory.BlobAlreadyReceived,!0;case\"Cancelled\":return ret.v=Kusto.Data.Common.IngestionErrorCategory.Cancelled,!0;case\"Configuration\":return ret.v=Kusto.Data.Common.IngestionErrorCategory.Configuration,!0;case\"MetadataAccessNotAuthorized\":return ret.v=Kusto.Data.Common.IngestionErrorCategory.MetadataAccessNotAuthorized,!0;default:break}if(ignoreCase&&!System.String.isNullOrEmpty(value))switch(value.toLowerCase()){case\"unknown\":return ret.v=Kusto.Data.Common.IngestionErrorCategory.Unknown,!0;case\"internalserviceerror\":return ret.v=Kusto.Data.Common.IngestionErrorCategory.InternalServiceError,!0;case\"badformat\":return ret.v=Kusto.Data.Common.IngestionErrorCategory.BadFormat,!0;case\"badrequest\":return ret.v=Kusto.Data.Common.IngestionErrorCategory.BadRequest,!0;case\"updatepolicyfailure\":return ret.v=Kusto.Data.Common.IngestionErrorCategory.UpdatePolicyFailure,!0;case\"entitynotfound\":return ret.v=Kusto.Data.Common.IngestionErrorCategory.EntityNotFound,!0;case\"useraccessnotauthorized\":return ret.v=Kusto.Data.Common.IngestionErrorCategory.UserAccessNotAuthorized,!0;case\"dataaccessnotauthorized\":return ret.v=Kusto.Data.Common.IngestionErrorCategory.DataAccessNotAuthorized,!0;case\"filetoolarge\":return ret.v=Kusto.Data.Common.IngestionErrorCategory.FileTooLarge,!0;case\"throttledonengine\":return ret.v=Kusto.Data.Common.IngestionErrorCategory.ThrottledOnEngine,!0;case\"downloadfailed\":return ret.v=Kusto.Data.Common.IngestionErrorCategory.DownloadFailed,!0;case\"retryattemptsexceeded\":return ret.v=Kusto.Data.Common.IngestionErrorCategory.RetryAttemptsExceeded,!0;case\"blobalreadyreceived\":return ret.v=Kusto.Data.Common.IngestionErrorCategory.BlobAlreadyReceived,!0;case\"cancelled\":return ret.v=Kusto.Data.Common.IngestionErrorCategory.Cancelled,!0;case\"configuration\":return ret.v=Kusto.Data.Common.IngestionErrorCategory.Configuration,!0;case\"metadataaccessnotauthorized\":return ret.v=Kusto.Data.Common.IngestionErrorCategory.MetadataAccessNotAuthorized,!0;default:break}if(!ignoreInts){var reti={v:0};if(System.Int32.tryParse(value,reti))return ret.v=reti.v,!0}return ret.v=0,!1},FastGetHashCode:function(that){return that},FastGetDescription:function(that){switch(that){case Kusto.Data.Common.IngestionErrorCategory.Unknown:return\"\";case Kusto.Data.Common.IngestionErrorCategory.InternalServiceError:return\"\";case Kusto.Data.Common.IngestionErrorCategory.BadFormat:return\"\";case Kusto.Data.Common.IngestionErrorCategory.BadRequest:return\"\";case Kusto.Data.Common.IngestionErrorCategory.UpdatePolicyFailure:return\"\";case Kusto.Data.Common.IngestionErrorCategory.EntityNotFound:return\"\";case Kusto.Data.Common.IngestionErrorCategory.UserAccessNotAuthorized:return\"\";case Kusto.Data.Common.IngestionErrorCategory.DataAccessNotAuthorized:return\"\";case Kusto.Data.Common.IngestionErrorCategory.FileTooLarge:return\"\";case Kusto.Data.Common.IngestionErrorCategory.ThrottledOnEngine:return\"\";case Kusto.Data.Common.IngestionErrorCategory.DownloadFailed:return\"\";case Kusto.Data.Common.IngestionErrorCategory.RetryAttemptsExceeded:return\"\";case Kusto.Data.Common.IngestionErrorCategory.BlobAlreadyReceived:return\"\";case Kusto.Data.Common.IngestionErrorCategory.Cancelled:return\"\";case Kusto.Data.Common.IngestionErrorCategory.Configuration:return\"\";case Kusto.Data.Common.IngestionErrorCategory.MetadataAccessNotAuthorized:return\"\";default:return null}}}}});Bridge.define(\"Kusto.Data.Common.ExtendedIngestionErrorCode\",{statics:{methods:{FastToString:function(that){switch(that){case Kusto.Data.Common.IngestionErrorCode.Unknown:return\"Unknown\";case Kusto.Data.Common.IngestionErrorCode.OutOfMemory:return\"OutOfMemory\";case Kusto.Data.Common.IngestionErrorCode.Stream_WrongNumberOfFields:return\"Stream_WrongNumberOfFields\";case Kusto.Data.Common.IngestionErrorCode.Stream_InputStreamTooLarge:return\"Stream_InputStreamTooLarge\";case Kusto.Data.Common.IngestionErrorCode.Stream_NoDataToIngest:return\"Stream_NoDataToIngest\";case Kusto.Data.Common.IngestionErrorCode.Stream_ClosingQuoteMissing:return\"Stream_ClosingQuoteMissing\";case Kusto.Data.Common.IngestionErrorCode.Stream_DynamicPropertyBagTooLarge:return\"Stream_DynamicPropertyBagTooLarge\";case Kusto.Data.Common.IngestionErrorCode.Download_SourceNotFound:return\"Download_SourceNotFound\";case Kusto.Data.Common.IngestionErrorCode.Download_AccessConditionNotSatisfied:return\"Download_AccessConditionNotSatisfied\";case Kusto.Data.Common.IngestionErrorCode.Download_Forbidden:return\"Download_Forbidden\";case Kusto.Data.Common.IngestionErrorCode.Download_AccountNotFound:return\"Download_AccountNotFound\";case Kusto.Data.Common.IngestionErrorCode.Download_TransientNameResolutionFailure:return\"Download_TransientNameResolutionFailure\";case Kusto.Data.Common.IngestionErrorCode.Download_BadRequest:return\"Download_BadRequest\";case Kusto.Data.Common.IngestionErrorCode.Download_NotTransient:return\"Download_NotTransient\";case Kusto.Data.Common.IngestionErrorCode.Download_UnknownError:return\"Download_UnknownError\";case Kusto.Data.Common.IngestionErrorCode.UpdatePolicy_QuerySchemaDoesNotMatchTableSchema:return\"UpdatePolicy_QuerySchemaDoesNotMatchTableSchema\";case Kusto.Data.Common.IngestionErrorCode.UpdatePolicy_FailedDescendantTransaction:return\"UpdatePolicy_FailedDescendantTransaction\";case Kusto.Data.Common.IngestionErrorCode.UpdatePolicy_IngestionError:return\"UpdatePolicy_IngestionError\";case Kusto.Data.Common.IngestionErrorCode.UpdatePolicy_UnknownError:return\"UpdatePolicy_UnknownError\";case Kusto.Data.Common.IngestionErrorCode.BadRequest_MissingMappingFailure:return\"BadRequest_MissingMappingFailure\";case Kusto.Data.Common.IngestionErrorCode.BadRequest_InvalidBlob:return\"BadRequest_InvalidBlob\";case Kusto.Data.Common.IngestionErrorCode.BadRequest_EmptyBlob:return\"BadRequest_EmptyBlob\";case Kusto.Data.Common.IngestionErrorCode.BadRequest_NoRecordsOrWrongFormat:return\"BadRequest_NoRecordsOrWrongFormat\";case Kusto.Data.Common.IngestionErrorCode.BadRequest_EmptyArchive:return\"BadRequest_EmptyArchive\";case Kusto.Data.Common.IngestionErrorCode.BadRequest_InvalidArchive:return\"BadRequest_InvalidArchive\";case Kusto.Data.Common.IngestionErrorCode.BadRequest_InvalidBlobUri:return\"BadRequest_InvalidBlobUri\";case Kusto.Data.Common.IngestionErrorCode.BadRequest_EmptyBlobUri:return\"BadRequest_EmptyBlobUri\";case Kusto.Data.Common.IngestionErrorCode.BadRequest_DatabaseNotExist:return\"BadRequest_DatabaseNotExist\";case Kusto.Data.Common.IngestionErrorCode.BadRequest_TableNotExist:return\"BadRequest_TableNotExist\";case Kusto.Data.Common.IngestionErrorCode.BadRequest_InvalidKustoIdentityToken:return\"BadRequest_InvalidKustoIdentityToken\";case Kusto.Data.Common.IngestionErrorCode.BadRequest_FileTooLarge:return\"BadRequest_FileTooLarge\";case Kusto.Data.Common.IngestionErrorCode.Reserved_1:return\"Reserved_1\";case Kusto.Data.Common.IngestionErrorCode.General_RetryAttemptsExceeded:return\"General_RetryAttemptsExceeded\";case Kusto.Data.Common.IngestionErrorCode.General_BadRequest:return\"General_BadRequest\";case Kusto.Data.Common.IngestionErrorCode.General_InternalServerError:return\"General_InternalServerError\";case Kusto.Data.Common.IngestionErrorCode.UpdatePolicy_Cyclic_Update_Not_Allowed:return\"UpdatePolicy_Cyclic_Update_Not_Allowed\";case Kusto.Data.Common.IngestionErrorCode.BadRequest_InvalidMapping:return\"BadRequest_InvalidMapping\";case Kusto.Data.Common.IngestionErrorCode.BadRequest_InvalidMappingReference:return\"BadRequest_InvalidMappingReference\";case Kusto.Data.Common.IngestionErrorCode.BadRequest_MappingReferenceWasNotFound:return\"BadRequest_MappingReferenceWasNotFound\";case Kusto.Data.Common.IngestionErrorCode.BadRequest_FormatNotSupported:return\"BadRequest_FormatNotSupported\";case Kusto.Data.Common.IngestionErrorCode.BadRequest_DuplicateMapping:return\"BadRequest_DuplicateMapping\";case Kusto.Data.Common.IngestionErrorCode.BadRequest_CorruptedMessage:return\"BadRequest_CorruptedMessage\";case Kusto.Data.Common.IngestionErrorCode.BadRequest_InconsistentMapping:return\"BadRequest_InconsistentMapping\";case Kusto.Data.Common.IngestionErrorCode.BadRequest_SyntaxError:return\"BadRequest_SyntaxError\";case Kusto.Data.Common.IngestionErrorCode.BadRequest_InvalidOrEmptyTableName:return\"BadRequest_InvalidOrEmptyTableName\";case Kusto.Data.Common.IngestionErrorCode.BadRequest_EmptyDatabaseName:return\"BadRequest_EmptyDatabaseName\";case Kusto.Data.Common.IngestionErrorCode.BadRequest_EmptyTenantIdentifier:return\"BadRequest_EmptyTenantIdentifier\";case Kusto.Data.Common.IngestionErrorCode.BadRequest_EmptyMappingReference:return\"BadRequest_EmptyMappingReference\";case Kusto.Data.Common.IngestionErrorCode.BadRequest_EntityNotFound:return\"BadRequest_EntityNotFound\";case Kusto.Data.Common.IngestionErrorCode.BadRequest_EntityNameIsNotValid:return\"BadRequest_EntityNameIsNotValid\";case Kusto.Data.Common.IngestionErrorCode.General_AbandonedIngestion:return\"General_AbandonedIngestion\";case Kusto.Data.Common.IngestionErrorCode.General_ThrottledIngestion:return\"General_ThrottledIngestion\";case Kusto.Data.Common.IngestionErrorCode.General_TransientSchemaMismatch:return\"General_TransientSchemaMismatch\";case Kusto.Data.Common.IngestionErrorCode.BadRequest_DatabaseAccessDenied:return\"BadRequest_DatabaseAccessDenied\";case Kusto.Data.Common.IngestionErrorCode.BadRequest_UnexpectedCharacterInInputStream:return\"BadRequest_UnexpectedCharacterInInputStream\";case Kusto.Data.Common.IngestionErrorCode.Forbidden:return\"Forbidden\";case Kusto.Data.Common.IngestionErrorCode.BadRequest_ZeroRetentionPolicyWithNoUpdatePolicy:return\"BadRequest_ZeroRetentionPolicyWithNoUpdatePolicy\";case Kusto.Data.Common.IngestionErrorCode.BadRequest_CreationTimeEarlierThanSoftDeletePeriod:return\"BadRequest_CreationTimeEarlierThanSoftDeletePeriod\";case Kusto.Data.Common.IngestionErrorCode.BadRequest_NotSupported:return\"BadRequest_NotSupported\";case Kusto.Data.Common.IngestionErrorCode.Skipped_IngestByTagAlreadyExists:return\"Skipped_IngestByTagAlreadyExists\";case Kusto.Data.Common.IngestionErrorCode.Timeout:return\"Timeout\";case Kusto.Data.Common.IngestionErrorCode.BadRequest_MalformedIngestionProperty:return\"BadRequest_MalformedIngestionProperty\";case Kusto.Data.Common.IngestionErrorCode.BadRequest_IngestionPropertyNotSupportedInThisContext:return\"BadRequest_IngestionPropertyNotSupportedInThisContext\";case Kusto.Data.Common.IngestionErrorCode.BadRequest_InvalidAuthentication:return\"BadRequest_InvalidAuthentication\";case Kusto.Data.Common.IngestionErrorCode.BlobAlreadyReceived_BlobAlreadyFoundInBatch:return\"BlobAlreadyReceived_BlobAlreadyFoundInBatch\";case Kusto.Data.Common.IngestionErrorCode.BadRequest_InvalidManagedIdentity:return\"BadRequest_InvalidManagedIdentity\";case Kusto.Data.Common.IngestionErrorCode.BadRequest_DataCapacityLimitReached:return\"BadRequest_DataCapacityLimitReached\";case Kusto.Data.Common.IngestionErrorCode.UpdatePolicy_BadRequest:return\"UpdatePolicy_BadRequest\";case Kusto.Data.Common.IngestionErrorCode.BadRequest_NonMultiDatabaseDataConnection:return\"BadRequest_NonMultiDatabaseDataConnection\";case Kusto.Data.Common.IngestionErrorCode.Cancelled:return\"Cancelled\";case Kusto.Data.Common.IngestionErrorCode.AbandonedByConfiguration_StorageAccount:return\"AbandonedByConfiguration_StorageAccount\";case Kusto.Data.Common.IngestionErrorCode.AbandonedByConfiguration_DatabaseAndTable:return\"AbandonedByConfiguration_DatabaseAndTable\";case Kusto.Data.Common.IngestionErrorCode.BadRequest_TableSchemaModificationUnauthorized:return\"BadRequest_TableSchemaModificationUnauthorized\";case Kusto.Data.Common.IngestionErrorCode.BadRequest_DatabaseSchemaModificationUnauthorized:return\"BadRequest_DatabaseSchemaModificationUnauthorized\";case Kusto.Data.Common.IngestionErrorCode.BadRequest_StreamingIngestionPolicyNotEnabled:return\"BadRequest_StreamingIngestionPolicyNotEnabled\";case Kusto.Data.Common.IngestionErrorCode.BadRequest_StreamingIngestionUpdatePolicyIncompatible:return\"BadRequest_StreamingIngestionUpdatePolicyIncompatible\";case Kusto.Data.Common.IngestionErrorCode.NotFound_StreamingIngestionDisabledForCluster:return\"NotFound_StreamingIngestionDisabledForCluster\";default:break}return System.String.format(\"[unknown: {0}]\",[Bridge.box(that,System.UInt32)])},FastIsDefined:function(value){var dummy={v:new Kusto.Data.Common.IngestionErrorCode};return Kusto.Data.Common.ExtendedIngestionErrorCode.FastTryParse(value,dummy,!1,!0)},FastIsDefined$1:function(value){switch(value){case Kusto.Data.Common.IngestionErrorCode.Unknown:return!0;case Kusto.Data.Common.IngestionErrorCode.OutOfMemory:return!0;case Kusto.Data.Common.IngestionErrorCode.Stream_WrongNumberOfFields:return!0;case Kusto.Data.Common.IngestionErrorCode.Stream_InputStreamTooLarge:return!0;case Kusto.Data.Common.IngestionErrorCode.Stream_NoDataToIngest:return!0;case Kusto.Data.Common.IngestionErrorCode.Stream_ClosingQuoteMissing:return!0;case Kusto.Data.Common.IngestionErrorCode.Stream_DynamicPropertyBagTooLarge:return!0;case Kusto.Data.Common.IngestionErrorCode.Download_SourceNotFound:return!0;case Kusto.Data.Common.IngestionErrorCode.Download_AccessConditionNotSatisfied:return!0;case Kusto.Data.Common.IngestionErrorCode.Download_Forbidden:return!0;case Kusto.Data.Common.IngestionErrorCode.Download_AccountNotFound:return!0;case Kusto.Data.Common.IngestionErrorCode.Download_TransientNameResolutionFailure:return!0;case Kusto.Data.Common.IngestionErrorCode.Download_BadRequest:return!0;case Kusto.Data.Common.IngestionErrorCode.Download_NotTransient:return!0;case Kusto.Data.Common.IngestionErrorCode.Download_UnknownError:return!0;case Kusto.Data.Common.IngestionErrorCode.UpdatePolicy_QuerySchemaDoesNotMatchTableSchema:return!0;case Kusto.Data.Common.IngestionErrorCode.UpdatePolicy_FailedDescendantTransaction:return!0;case Kusto.Data.Common.IngestionErrorCode.UpdatePolicy_IngestionError:return!0;case Kusto.Data.Common.IngestionErrorCode.UpdatePolicy_UnknownError:return!0;case Kusto.Data.Common.IngestionErrorCode.BadRequest_MissingMappingFailure:return!0;case Kusto.Data.Common.IngestionErrorCode.BadRequest_InvalidBlob:return!0;case Kusto.Data.Common.IngestionErrorCode.BadRequest_EmptyBlob:return!0;case Kusto.Data.Common.IngestionErrorCode.BadRequest_NoRecordsOrWrongFormat:return!0;case Kusto.Data.Common.IngestionErrorCode.BadRequest_EmptyArchive:return!0;case Kusto.Data.Common.IngestionErrorCode.BadRequest_InvalidArchive:return!0;case Kusto.Data.Common.IngestionErrorCode.BadRequest_InvalidBlobUri:return!0;case Kusto.Data.Common.IngestionErrorCode.BadRequest_EmptyBlobUri:return!0;case Kusto.Data.Common.IngestionErrorCode.BadRequest_DatabaseNotExist:return!0;case Kusto.Data.Common.IngestionErrorCode.BadRequest_TableNotExist:return!0;case Kusto.Data.Common.IngestionErrorCode.BadRequest_InvalidKustoIdentityToken:return!0;case Kusto.Data.Common.IngestionErrorCode.BadRequest_FileTooLarge:return!0;case Kusto.Data.Common.IngestionErrorCode.Reserved_1:return!0;case Kusto.Data.Common.IngestionErrorCode.General_RetryAttemptsExceeded:return!0;case Kusto.Data.Common.IngestionErrorCode.General_BadRequest:return!0;case Kusto.Data.Common.IngestionErrorCode.General_InternalServerError:return!0;case Kusto.Data.Common.IngestionErrorCode.UpdatePolicy_Cyclic_Update_Not_Allowed:return!0;case Kusto.Data.Common.IngestionErrorCode.BadRequest_InvalidMapping:return!0;case Kusto.Data.Common.IngestionErrorCode.BadRequest_InvalidMappingReference:return!0;case Kusto.Data.Common.IngestionErrorCode.BadRequest_MappingReferenceWasNotFound:return!0;case Kusto.Data.Common.IngestionErrorCode.BadRequest_FormatNotSupported:return!0;case Kusto.Data.Common.IngestionErrorCode.BadRequest_DuplicateMapping:return!0;case Kusto.Data.Common.IngestionErrorCode.BadRequest_CorruptedMessage:return!0;case Kusto.Data.Common.IngestionErrorCode.BadRequest_InconsistentMapping:return!0;case Kusto.Data.Common.IngestionErrorCode.BadRequest_SyntaxError:return!0;case Kusto.Data.Common.IngestionErrorCode.BadRequest_InvalidOrEmptyTableName:return!0;case Kusto.Data.Common.IngestionErrorCode.BadRequest_EmptyDatabaseName:return!0;case Kusto.Data.Common.IngestionErrorCode.BadRequest_EmptyTenantIdentifier:return!0;case Kusto.Data.Common.IngestionErrorCode.BadRequest_EmptyMappingReference:return!0;case Kusto.Data.Common.IngestionErrorCode.BadRequest_EntityNotFound:return!0;case Kusto.Data.Common.IngestionErrorCode.BadRequest_EntityNameIsNotValid:return!0;case Kusto.Data.Common.IngestionErrorCode.General_AbandonedIngestion:return!0;case Kusto.Data.Common.IngestionErrorCode.General_ThrottledIngestion:return!0;case Kusto.Data.Common.IngestionErrorCode.General_TransientSchemaMismatch:return!0;case Kusto.Data.Common.IngestionErrorCode.BadRequest_DatabaseAccessDenied:return!0;case Kusto.Data.Common.IngestionErrorCode.BadRequest_UnexpectedCharacterInInputStream:return!0;case Kusto.Data.Common.IngestionErrorCode.Forbidden:return!0;case Kusto.Data.Common.IngestionErrorCode.BadRequest_ZeroRetentionPolicyWithNoUpdatePolicy:return!0;case Kusto.Data.Common.IngestionErrorCode.BadRequest_CreationTimeEarlierThanSoftDeletePeriod:return!0;case Kusto.Data.Common.IngestionErrorCode.BadRequest_NotSupported:return!0;case Kusto.Data.Common.IngestionErrorCode.Skipped_IngestByTagAlreadyExists:return!0;case Kusto.Data.Common.IngestionErrorCode.Timeout:return!0;case Kusto.Data.Common.IngestionErrorCode.BadRequest_MalformedIngestionProperty:return!0;case Kusto.Data.Common.IngestionErrorCode.BadRequest_IngestionPropertyNotSupportedInThisContext:return!0;case Kusto.Data.Common.IngestionErrorCode.BadRequest_InvalidAuthentication:return!0;case Kusto.Data.Common.IngestionErrorCode.BlobAlreadyReceived_BlobAlreadyFoundInBatch:return!0;case Kusto.Data.Common.IngestionErrorCode.BadRequest_InvalidManagedIdentity:return!0;case Kusto.Data.Common.IngestionErrorCode.BadRequest_DataCapacityLimitReached:return!0;case Kusto.Data.Common.IngestionErrorCode.UpdatePolicy_BadRequest:return!0;case Kusto.Data.Common.IngestionErrorCode.BadRequest_NonMultiDatabaseDataConnection:return!0;case Kusto.Data.Common.IngestionErrorCode.Cancelled:return!0;case Kusto.Data.Common.IngestionErrorCode.AbandonedByConfiguration_StorageAccount:return!0;case Kusto.Data.Common.IngestionErrorCode.AbandonedByConfiguration_DatabaseAndTable:return!0;case Kusto.Data.Common.IngestionErrorCode.BadRequest_TableSchemaModificationUnauthorized:return!0;case Kusto.Data.Common.IngestionErrorCode.BadRequest_DatabaseSchemaModificationUnauthorized:return!0;case Kusto.Data.Common.IngestionErrorCode.BadRequest_StreamingIngestionPolicyNotEnabled:return!0;case Kusto.Data.Common.IngestionErrorCode.BadRequest_StreamingIngestionUpdatePolicyIncompatible:return!0;case Kusto.Data.Common.IngestionErrorCode.NotFound_StreamingIngestionDisabledForCluster:return!0;default:return!1}},FastHasFlag$1:function(that,flag){return(that&flag)>>>0===flag},FastHasFlag:function(that,flag){return(that&flag)>>>0===flag},FastParse:function(value,ignoreCase,ignoreInts){ignoreCase===void 0&&(ignoreCase=!1);ignoreInts===void 0&&(ignoreInts=!1);var ret={v:new Kusto.Data.Common.IngestionErrorCode};if(Kusto.Data.Common.ExtendedIngestionErrorCode.FastTryParse(value,ret,ignoreCase,ignoreInts))return ret.v;throw new System.Exception(\"Invalid enum value: \"+(value||\"\"));},FastTryParse:function(value,ret,ignoreCase,ignoreInts){ignoreCase===void 0&&(ignoreCase=!1);ignoreInts===void 0&&(ignoreInts=!1);switch(value){case\"Unknown\":return ret.v=Kusto.Data.Common.IngestionErrorCode.Unknown,!0;case\"0x80DA0007\":case\"OutOfMemory\":return ret.v=Kusto.Data.Common.IngestionErrorCode.OutOfMemory,!0;case\"0x80DA0008\":case\"Stream_WrongNumberOfFields\":return ret.v=Kusto.Data.Common.IngestionErrorCode.Stream_WrongNumberOfFields,!0;case\"0x80DA0009\":case\"Stream_InputStreamTooLarge\":return ret.v=Kusto.Data.Common.IngestionErrorCode.Stream_InputStreamTooLarge,!0;case\"Stream_NoDataToIngest\":return ret.v=Kusto.Data.Common.IngestionErrorCode.Stream_NoDataToIngest,!0;case\"0x80DA000b\":case\"Stream_ClosingQuoteMissing\":return ret.v=Kusto.Data.Common.IngestionErrorCode.Stream_ClosingQuoteMissing,!0;case\"0x80DA000E\":case\"Stream_DynamicPropertyBagTooLarge\":return ret.v=Kusto.Data.Common.IngestionErrorCode.Stream_DynamicPropertyBagTooLarge,!0;case\"Download_SourceNotFound\":return ret.v=Kusto.Data.Common.IngestionErrorCode.Download_SourceNotFound,!0;case\"Download_AccessConditionNotSatisfied\":return ret.v=Kusto.Data.Common.IngestionErrorCode.Download_AccessConditionNotSatisfied,!0;case\"Download_Forbidden\":return ret.v=Kusto.Data.Common.IngestionErrorCode.Download_Forbidden,!0;case\"Download_AccountNotFound\":return ret.v=Kusto.Data.Common.IngestionErrorCode.Download_AccountNotFound,!0;case\"Download_TransientNameResolutionFailure\":return ret.v=Kusto.Data.Common.IngestionErrorCode.Download_TransientNameResolutionFailure,!0;case\"Download_BadRequest\":return ret.v=Kusto.Data.Common.IngestionErrorCode.Download_BadRequest,!0;case\"Download_NotTransient\":return ret.v=Kusto.Data.Common.IngestionErrorCode.Download_NotTransient,!0;case\"Download_UnknownError\":return ret.v=Kusto.Data.Common.IngestionErrorCode.Download_UnknownError,!0;case\"UpdatePolicy_QuerySchemaDoesNotMatchTableSchema\":return ret.v=Kusto.Data.Common.IngestionErrorCode.UpdatePolicy_QuerySchemaDoesNotMatchTableSchema,!0;case\"UpdatePolicy_FailedDescendantTransaction\":return ret.v=Kusto.Data.Common.IngestionErrorCode.UpdatePolicy_FailedDescendantTransaction,!0;case\"UpdatePolicy_IngestionError\":return ret.v=Kusto.Data.Common.IngestionErrorCode.UpdatePolicy_IngestionError,!0;case\"UpdatePolicy_UnknownError\":return ret.v=Kusto.Data.Common.IngestionErrorCode.UpdatePolicy_UnknownError,!0;case\"BadRequest_MissingMappingFailure\":return ret.v=Kusto.Data.Common.IngestionErrorCode.BadRequest_MissingMappingFailure,!0;case\"BadRequest_InvalidBlob\":return ret.v=Kusto.Data.Common.IngestionErrorCode.BadRequest_InvalidBlob,!0;case\"BadRequest_EmptyBlob\":return ret.v=Kusto.Data.Common.IngestionErrorCode.BadRequest_EmptyBlob,!0;case\"BadRequest_NoRecordsOrWrongFormat\":return ret.v=Kusto.Data.Common.IngestionErrorCode.BadRequest_NoRecordsOrWrongFormat,!0;case\"BadRequest_EmptyArchive\":return ret.v=Kusto.Data.Common.IngestionErrorCode.BadRequest_EmptyArchive,!0;case\"BadRequest_InvalidArchive\":return ret.v=Kusto.Data.Common.IngestionErrorCode.BadRequest_InvalidArchive,!0;case\"BadRequest_InvalidBlobUri\":return ret.v=Kusto.Data.Common.IngestionErrorCode.BadRequest_InvalidBlobUri,!0;case\"BadRequest_EmptyBlobUri\":return ret.v=Kusto.Data.Common.IngestionErrorCode.BadRequest_EmptyBlobUri,!0;case\"BadRequest_DatabaseNotExist\":return ret.v=Kusto.Data.Common.IngestionErrorCode.BadRequest_DatabaseNotExist,!0;case\"BadRequest_TableNotExist\":return ret.v=Kusto.Data.Common.IngestionErrorCode.BadRequest_TableNotExist,!0;case\"BadRequest_InvalidKustoIdentityToken\":return ret.v=Kusto.Data.Common.IngestionErrorCode.BadRequest_InvalidKustoIdentityToken,!0;case\"BadRequest_FileTooLarge\":return ret.v=Kusto.Data.Common.IngestionErrorCode.BadRequest_FileTooLarge,!0;case\"Reserved_1\":return ret.v=Kusto.Data.Common.IngestionErrorCode.Reserved_1,!0;case\"General_RetryAttemptsExceeded\":return ret.v=Kusto.Data.Common.IngestionErrorCode.General_RetryAttemptsExceeded,!0;case\"General_BadRequest\":return ret.v=Kusto.Data.Common.IngestionErrorCode.General_BadRequest,!0;case\"General_InternalServerError\":return ret.v=Kusto.Data.Common.IngestionErrorCode.General_InternalServerError,!0;case\"UpdatePolicy_Cyclic_Update_Not_Allowed\":return ret.v=Kusto.Data.Common.IngestionErrorCode.UpdatePolicy_Cyclic_Update_Not_Allowed,!0;case\"BadRequest_InvalidMapping\":return ret.v=Kusto.Data.Common.IngestionErrorCode.BadRequest_InvalidMapping,!0;case\"BadRequest_InvalidMappingReference\":return ret.v=Kusto.Data.Common.IngestionErrorCode.BadRequest_InvalidMappingReference,!0;case\"BadRequest_MappingReferenceWasNotFound\":return ret.v=Kusto.Data.Common.IngestionErrorCode.BadRequest_MappingReferenceWasNotFound,!0;case\"BadRequest_FormatNotSupported\":return ret.v=Kusto.Data.Common.IngestionErrorCode.BadRequest_FormatNotSupported,!0;case\"BadRequest_DuplicateMapping\":return ret.v=Kusto.Data.Common.IngestionErrorCode.BadRequest_DuplicateMapping,!0;case\"BadRequest_CorruptedMessage\":return ret.v=Kusto.Data.Common.IngestionErrorCode.BadRequest_CorruptedMessage,!0;case\"BadRequest_InconsistentMapping\":return ret.v=Kusto.Data.Common.IngestionErrorCode.BadRequest_InconsistentMapping,!0;case\"BadRequest_SyntaxError\":return ret.v=Kusto.Data.Common.IngestionErrorCode.BadRequest_SyntaxError,!0;case\"BadRequest_InvalidOrEmptyTableName\":return ret.v=Kusto.Data.Common.IngestionErrorCode.BadRequest_InvalidOrEmptyTableName,!0;case\"BadRequest_EmptyDatabaseName\":return ret.v=Kusto.Data.Common.IngestionErrorCode.BadRequest_EmptyDatabaseName,!0;case\"BadRequest_EmptyTenantIdentifier\":return ret.v=Kusto.Data.Common.IngestionErrorCode.BadRequest_EmptyTenantIdentifier,!0;case\"BadRequest_EmptyMappingReference\":return ret.v=Kusto.Data.Common.IngestionErrorCode.BadRequest_EmptyMappingReference,!0;case\"BadRequest_EntityNotFound\":return ret.v=Kusto.Data.Common.IngestionErrorCode.BadRequest_EntityNotFound,!0;case\"BadRequest_EntityNameIsNotValid\":return ret.v=Kusto.Data.Common.IngestionErrorCode.BadRequest_EntityNameIsNotValid,!0;case\"General_AbandonedIngestion\":return ret.v=Kusto.Data.Common.IngestionErrorCode.General_AbandonedIngestion,!0;case\"General_ThrottledIngestion\":return ret.v=Kusto.Data.Common.IngestionErrorCode.General_ThrottledIngestion,!0;case\"General_TransientSchemaMismatch\":return ret.v=Kusto.Data.Common.IngestionErrorCode.General_TransientSchemaMismatch,!0;case\"BadRequest_DatabaseAccessDenied\":return ret.v=Kusto.Data.Common.IngestionErrorCode.BadRequest_DatabaseAccessDenied,!0;case\"BadRequest_UnexpectedCharacterInInputStream\":return ret.v=Kusto.Data.Common.IngestionErrorCode.BadRequest_UnexpectedCharacterInInputStream,!0;case\"Forbidden\":return ret.v=Kusto.Data.Common.IngestionErrorCode.Forbidden,!0;case\"BadRequest_ZeroRetentionPolicyWithNoUpdatePolicy\":return ret.v=Kusto.Data.Common.IngestionErrorCode.BadRequest_ZeroRetentionPolicyWithNoUpdatePolicy,!0;case\"BadRequest_CreationTimeEarlierThanSoftDeletePeriod\":return ret.v=Kusto.Data.Common.IngestionErrorCode.BadRequest_CreationTimeEarlierThanSoftDeletePeriod,!0;case\"BadRequest_NotSupported\":return ret.v=Kusto.Data.Common.IngestionErrorCode.BadRequest_NotSupported,!0;case\"Skipped_IngestByTagAlreadyExists\":return ret.v=Kusto.Data.Common.IngestionErrorCode.Skipped_IngestByTagAlreadyExists,!0;case\"0x80131505\":case\"Timeout\":return ret.v=Kusto.Data.Common.IngestionErrorCode.Timeout,!0;case\"BadRequest_MalformedIngestionProperty\":return ret.v=Kusto.Data.Common.IngestionErrorCode.BadRequest_MalformedIngestionProperty,!0;case\"BadRequest_IngestionPropertyNotSupportedInThisContext\":return ret.v=Kusto.Data.Common.IngestionErrorCode.BadRequest_IngestionPropertyNotSupportedInThisContext,!0;case\"BadRequest_InvalidAuthentication\":return ret.v=Kusto.Data.Common.IngestionErrorCode.BadRequest_InvalidAuthentication,!0;case\"BlobAlreadyReceived_BlobAlreadyFoundInBatch\":return ret.v=Kusto.Data.Common.IngestionErrorCode.BlobAlreadyReceived_BlobAlreadyFoundInBatch,!0;case\"BadRequest_InvalidManagedIdentity\":return ret.v=Kusto.Data.Common.IngestionErrorCode.BadRequest_InvalidManagedIdentity,!0;case\"BadRequest_DataCapacityLimitReached\":return ret.v=Kusto.Data.Common.IngestionErrorCode.BadRequest_DataCapacityLimitReached,!0;case\"UpdatePolicy_BadRequest\":return ret.v=Kusto.Data.Common.IngestionErrorCode.UpdatePolicy_BadRequest,!0;case\"BadRequest_NonMultiDatabaseDataConnection\":return ret.v=Kusto.Data.Common.IngestionErrorCode.BadRequest_NonMultiDatabaseDataConnection,!0;case\"Cancelled\":return ret.v=Kusto.Data.Common.IngestionErrorCode.Cancelled,!0;case\"AbandonedByConfiguration_StorageAccount\":return ret.v=Kusto.Data.Common.IngestionErrorCode.AbandonedByConfiguration_StorageAccount,!0;case\"AbandonedByConfiguration_DatabaseAndTable\":return ret.v=Kusto.Data.Common.IngestionErrorCode.AbandonedByConfiguration_DatabaseAndTable,!0;case\"BadRequest_TableSchemaModificationUnauthorized\":return ret.v=Kusto.Data.Common.IngestionErrorCode.BadRequest_TableSchemaModificationUnauthorized,!0;case\"BadRequest_DatabaseSchemaModificationUnauthorized\":return ret.v=Kusto.Data.Common.IngestionErrorCode.BadRequest_DatabaseSchemaModificationUnauthorized,!0;case\"BadRequest_StreamingIngestionPolicyNotEnabled\":return ret.v=Kusto.Data.Common.IngestionErrorCode.BadRequest_StreamingIngestionPolicyNotEnabled,!0;case\"BadRequest_StreamingIngestionUpdatePolicyIncompatible\":return ret.v=Kusto.Data.Common.IngestionErrorCode.BadRequest_StreamingIngestionUpdatePolicyIncompatible,!0;case\"NotFound_StreamingIngestionDisabledForCluster\":return ret.v=Kusto.Data.Common.IngestionErrorCode.NotFound_StreamingIngestionDisabledForCluster,!0;default:break}if(ignoreCase&&!System.String.isNullOrEmpty(value))switch(value.toLowerCase()){case\"unknown\":return ret.v=Kusto.Data.Common.IngestionErrorCode.Unknown,!0;case\"outofmemory\":return ret.v=Kusto.Data.Common.IngestionErrorCode.OutOfMemory,!0;case\"stream_wrongnumberoffields\":return ret.v=Kusto.Data.Common.IngestionErrorCode.Stream_WrongNumberOfFields,!0;case\"stream_inputstreamtoolarge\":return ret.v=Kusto.Data.Common.IngestionErrorCode.Stream_InputStreamTooLarge,!0;case\"stream_nodatatoingest\":return ret.v=Kusto.Data.Common.IngestionErrorCode.Stream_NoDataToIngest,!0;case\"stream_closingquotemissing\":return ret.v=Kusto.Data.Common.IngestionErrorCode.Stream_ClosingQuoteMissing,!0;case\"stream_dynamicpropertybagtoolarge\":return ret.v=Kusto.Data.Common.IngestionErrorCode.Stream_DynamicPropertyBagTooLarge,!0;case\"download_sourcenotfound\":return ret.v=Kusto.Data.Common.IngestionErrorCode.Download_SourceNotFound,!0;case\"download_accessconditionnotsatisfied\":return ret.v=Kusto.Data.Common.IngestionErrorCode.Download_AccessConditionNotSatisfied,!0;case\"download_forbidden\":return ret.v=Kusto.Data.Common.IngestionErrorCode.Download_Forbidden,!0;case\"download_accountnotfound\":return ret.v=Kusto.Data.Common.IngestionErrorCode.Download_AccountNotFound,!0;case\"download_transientnameresolutionfailure\":return ret.v=Kusto.Data.Common.IngestionErrorCode.Download_TransientNameResolutionFailure,!0;case\"download_badrequest\":return ret.v=Kusto.Data.Common.IngestionErrorCode.Download_BadRequest,!0;case\"download_nottransient\":return ret.v=Kusto.Data.Common.IngestionErrorCode.Download_NotTransient,!0;case\"download_unknownerror\":return ret.v=Kusto.Data.Common.IngestionErrorCode.Download_UnknownError,!0;case\"updatepolicy_queryschemadoesnotmatchtableschema\":return ret.v=Kusto.Data.Common.IngestionErrorCode.UpdatePolicy_QuerySchemaDoesNotMatchTableSchema,!0;case\"updatepolicy_faileddescendanttransaction\":return ret.v=Kusto.Data.Common.IngestionErrorCode.UpdatePolicy_FailedDescendantTransaction,!0;case\"updatepolicy_ingestionerror\":return ret.v=Kusto.Data.Common.IngestionErrorCode.UpdatePolicy_IngestionError,!0;case\"updatepolicy_unknownerror\":return ret.v=Kusto.Data.Common.IngestionErrorCode.UpdatePolicy_UnknownError,!0;case\"badrequest_missingmappingfailure\":return ret.v=Kusto.Data.Common.IngestionErrorCode.BadRequest_MissingMappingFailure,!0;case\"badrequest_invalidblob\":return ret.v=Kusto.Data.Common.IngestionErrorCode.BadRequest_InvalidBlob,!0;case\"badrequest_emptyblob\":return ret.v=Kusto.Data.Common.IngestionErrorCode.BadRequest_EmptyBlob,!0;case\"badrequest_norecordsorwrongformat\":return ret.v=Kusto.Data.Common.IngestionErrorCode.BadRequest_NoRecordsOrWrongFormat,!0;case\"badrequest_emptyarchive\":return ret.v=Kusto.Data.Common.IngestionErrorCode.BadRequest_EmptyArchive,!0;case\"badrequest_invalidarchive\":return ret.v=Kusto.Data.Common.IngestionErrorCode.BadRequest_InvalidArchive,!0;case\"badrequest_invalidbloburi\":return ret.v=Kusto.Data.Common.IngestionErrorCode.BadRequest_InvalidBlobUri,!0;case\"badrequest_emptybloburi\":return ret.v=Kusto.Data.Common.IngestionErrorCode.BadRequest_EmptyBlobUri,!0;case\"badrequest_databasenotexist\":return ret.v=Kusto.Data.Common.IngestionErrorCode.BadRequest_DatabaseNotExist,!0;case\"badrequest_tablenotexist\":return ret.v=Kusto.Data.Common.IngestionErrorCode.BadRequest_TableNotExist,!0;case\"badrequest_invalidkustoidentitytoken\":return ret.v=Kusto.Data.Common.IngestionErrorCode.BadRequest_InvalidKustoIdentityToken,!0;case\"badrequest_filetoolarge\":return ret.v=Kusto.Data.Common.IngestionErrorCode.BadRequest_FileTooLarge,!0;case\"reserved_1\":return ret.v=Kusto.Data.Common.IngestionErrorCode.Reserved_1,!0;case\"general_retryattemptsexceeded\":return ret.v=Kusto.Data.Common.IngestionErrorCode.General_RetryAttemptsExceeded,!0;case\"general_badrequest\":return ret.v=Kusto.Data.Common.IngestionErrorCode.General_BadRequest,!0;case\"general_internalservererror\":return ret.v=Kusto.Data.Common.IngestionErrorCode.General_InternalServerError,!0;case\"updatepolicy_cyclic_update_not_allowed\":return ret.v=Kusto.Data.Common.IngestionErrorCode.UpdatePolicy_Cyclic_Update_Not_Allowed,!0;case\"badrequest_invalidmapping\":return ret.v=Kusto.Data.Common.IngestionErrorCode.BadRequest_InvalidMapping,!0;case\"badrequest_invalidmappingreference\":return ret.v=Kusto.Data.Common.IngestionErrorCode.BadRequest_InvalidMappingReference,!0;case\"badrequest_mappingreferencewasnotfound\":return ret.v=Kusto.Data.Common.IngestionErrorCode.BadRequest_MappingReferenceWasNotFound,!0;case\"badrequest_formatnotsupported\":return ret.v=Kusto.Data.Common.IngestionErrorCode.BadRequest_FormatNotSupported,!0;case\"badrequest_duplicatemapping\":return ret.v=Kusto.Data.Common.IngestionErrorCode.BadRequest_DuplicateMapping,!0;case\"badrequest_corruptedmessage\":return ret.v=Kusto.Data.Common.IngestionErrorCode.BadRequest_CorruptedMessage,!0;case\"badrequest_inconsistentmapping\":return ret.v=Kusto.Data.Common.IngestionErrorCode.BadRequest_InconsistentMapping,!0;case\"badrequest_syntaxerror\":return ret.v=Kusto.Data.Common.IngestionErrorCode.BadRequest_SyntaxError,!0;case\"badrequest_invalidoremptytablename\":return ret.v=Kusto.Data.Common.IngestionErrorCode.BadRequest_InvalidOrEmptyTableName,!0;case\"badrequest_emptydatabasename\":return ret.v=Kusto.Data.Common.IngestionErrorCode.BadRequest_EmptyDatabaseName,!0;case\"badrequest_emptytenantidentifier\":return ret.v=Kusto.Data.Common.IngestionErrorCode.BadRequest_EmptyTenantIdentifier,!0;case\"badrequest_emptymappingreference\":return ret.v=Kusto.Data.Common.IngestionErrorCode.BadRequest_EmptyMappingReference,!0;case\"badrequest_entitynotfound\":return ret.v=Kusto.Data.Common.IngestionErrorCode.BadRequest_EntityNotFound,!0;case\"badrequest_entitynameisnotvalid\":return ret.v=Kusto.Data.Common.IngestionErrorCode.BadRequest_EntityNameIsNotValid,!0;case\"general_abandonedingestion\":return ret.v=Kusto.Data.Common.IngestionErrorCode.General_AbandonedIngestion,!0;case\"general_throttledingestion\":return ret.v=Kusto.Data.Common.IngestionErrorCode.General_ThrottledIngestion,!0;case\"general_transientschemamismatch\":return ret.v=Kusto.Data.Common.IngestionErrorCode.General_TransientSchemaMismatch,!0;case\"badrequest_databaseaccessdenied\":return ret.v=Kusto.Data.Common.IngestionErrorCode.BadRequest_DatabaseAccessDenied,!0;case\"badrequest_unexpectedcharacterininputstream\":return ret.v=Kusto.Data.Common.IngestionErrorCode.BadRequest_UnexpectedCharacterInInputStream,!0;case\"forbidden\":return ret.v=Kusto.Data.Common.IngestionErrorCode.Forbidden,!0;case\"badrequest_zeroretentionpolicywithnoupdatepolicy\":return ret.v=Kusto.Data.Common.IngestionErrorCode.BadRequest_ZeroRetentionPolicyWithNoUpdatePolicy,!0;case\"badrequest_creationtimeearlierthansoftdeleteperiod\":return ret.v=Kusto.Data.Common.IngestionErrorCode.BadRequest_CreationTimeEarlierThanSoftDeletePeriod,!0;case\"badrequest_notsupported\":return ret.v=Kusto.Data.Common.IngestionErrorCode.BadRequest_NotSupported,!0;case\"skipped_ingestbytagalreadyexists\":return ret.v=Kusto.Data.Common.IngestionErrorCode.Skipped_IngestByTagAlreadyExists,!0;case\"timeout\":return ret.v=Kusto.Data.Common.IngestionErrorCode.Timeout,!0;case\"badrequest_malformedingestionproperty\":return ret.v=Kusto.Data.Common.IngestionErrorCode.BadRequest_MalformedIngestionProperty,!0;case\"badrequest_ingestionpropertynotsupportedinthiscontext\":return ret.v=Kusto.Data.Common.IngestionErrorCode.BadRequest_IngestionPropertyNotSupportedInThisContext,!0;case\"badrequest_invalidauthentication\":return ret.v=Kusto.Data.Common.IngestionErrorCode.BadRequest_InvalidAuthentication,!0;case\"blobalreadyreceived_blobalreadyfoundinbatch\":return ret.v=Kusto.Data.Common.IngestionErrorCode.BlobAlreadyReceived_BlobAlreadyFoundInBatch,!0;case\"badrequest_invalidmanagedidentity\":return ret.v=Kusto.Data.Common.IngestionErrorCode.BadRequest_InvalidManagedIdentity,!0;case\"badrequest_datacapacitylimitreached\":return ret.v=Kusto.Data.Common.IngestionErrorCode.BadRequest_DataCapacityLimitReached,!0;case\"updatepolicy_badrequest\":return ret.v=Kusto.Data.Common.IngestionErrorCode.UpdatePolicy_BadRequest,!0;case\"badrequest_nonmultidatabasedataconnection\":return ret.v=Kusto.Data.Common.IngestionErrorCode.BadRequest_NonMultiDatabaseDataConnection,!0;case\"cancelled\":return ret.v=Kusto.Data.Common.IngestionErrorCode.Cancelled,!0;case\"abandonedbyconfiguration_storageaccount\":return ret.v=Kusto.Data.Common.IngestionErrorCode.AbandonedByConfiguration_StorageAccount,!0;case\"abandonedbyconfiguration_databaseandtable\":return ret.v=Kusto.Data.Common.IngestionErrorCode.AbandonedByConfiguration_DatabaseAndTable,!0;case\"badrequest_tableschemamodificationunauthorized\":return ret.v=Kusto.Data.Common.IngestionErrorCode.BadRequest_TableSchemaModificationUnauthorized,!0;case\"badrequest_databaseschemamodificationunauthorized\":return ret.v=Kusto.Data.Common.IngestionErrorCode.BadRequest_DatabaseSchemaModificationUnauthorized,!0;case\"badrequest_streamingingestionpolicynotenabled\":return ret.v=Kusto.Data.Common.IngestionErrorCode.BadRequest_StreamingIngestionPolicyNotEnabled,!0;case\"badrequest_streamingingestionupdatepolicyincompatible\":return ret.v=Kusto.Data.Common.IngestionErrorCode.BadRequest_StreamingIngestionUpdatePolicyIncompatible,!0;case\"notfound_streamingingestiondisabledforcluster\":return ret.v=Kusto.Data.Common.IngestionErrorCode.NotFound_StreamingIngestionDisabledForCluster,!0;default:break}if(!ignoreInts){var reti={v:0};if(System.Int32.tryParse(value,reti))return ret.v=reti.v>>>0,!0}return ret.v=0,!1},FastGetHashCode:function(that){return that|0},FastGetDescription:function(that){switch(that){case Kusto.Data.Common.IngestionErrorCode.Unknown:return\"Unknown error occurred\";case Kusto.Data.Common.IngestionErrorCode.OutOfMemory:return\"Ingestion operation ran out of memory\";case Kusto.Data.Common.IngestionErrorCode.Stream_WrongNumberOfFields:return\"Wrong number of fields.\";case Kusto.Data.Common.IngestionErrorCode.Stream_InputStreamTooLarge:return\"Input stream/record/field too large.\";case Kusto.Data.Common.IngestionErrorCode.Stream_NoDataToIngest:return\"No data streams to ingest\";case Kusto.Data.Common.IngestionErrorCode.Stream_ClosingQuoteMissing:return\"Invalid csv format - closing quote missing.\";case Kusto.Data.Common.IngestionErrorCode.Stream_DynamicPropertyBagTooLarge:return\"The combined size of the property bag's distinct keys is getting too large.\";case Kusto.Data.Common.IngestionErrorCode.Download_SourceNotFound:return\"Failed to download source from Azure storage - source not found\";case Kusto.Data.Common.IngestionErrorCode.Download_AccessConditionNotSatisfied:return\"Failed to download source from Azure storage - access condition not satisfied\";case Kusto.Data.Common.IngestionErrorCode.Download_Forbidden:return\"Failed to download source from Azure storage - access forbidden\";case Kusto.Data.Common.IngestionErrorCode.Download_AccountNotFound:return\"Failed to download source from Azure storage - account not found\";case Kusto.Data.Common.IngestionErrorCode.Download_TransientNameResolutionFailure:return\"Failed to download source from Azure storage - transient storage account name resolution failure\";case Kusto.Data.Common.IngestionErrorCode.Download_BadRequest:return\"Failed to download source from Azure storage - bad request\";case Kusto.Data.Common.IngestionErrorCode.Download_NotTransient:return\"Failed to download source from Azure storage - not transient error\";case Kusto.Data.Common.IngestionErrorCode.Download_UnknownError:return\"Failed to download source from Azure storage - unknown error\";case Kusto.Data.Common.IngestionErrorCode.UpdatePolicy_QuerySchemaDoesNotMatchTableSchema:return\"Failed to invoke update policy. Query schema does not match table schema\";case Kusto.Data.Common.IngestionErrorCode.UpdatePolicy_FailedDescendantTransaction:return\"Failed to invoke update policy. Failed descendant transactional update policy\";case Kusto.Data.Common.IngestionErrorCode.UpdatePolicy_IngestionError:return\"Failed to invoke update policy. Ingestion Error occurred\";case Kusto.Data.Common.IngestionErrorCode.UpdatePolicy_UnknownError:return\"Failed to invoke update policy. Unknown error occurred\";case Kusto.Data.Common.IngestionErrorCode.BadRequest_MissingMappingFailure:return\"A format that requires ingestion mapping was sent without the one. Identity ingestion mapping can be auto-created only when the ingestion format is specified\";case Kusto.Data.Common.IngestionErrorCode.BadRequest_InvalidBlob:return\"Blob is invalid\";case Kusto.Data.Common.IngestionErrorCode.BadRequest_EmptyBlob:return\"Blob is empty\";case Kusto.Data.Common.IngestionErrorCode.BadRequest_NoRecordsOrWrongFormat:return\"No records to ingest or using wrong data format\";case Kusto.Data.Common.IngestionErrorCode.BadRequest_EmptyArchive:return\"Archive is empty\";case Kusto.Data.Common.IngestionErrorCode.BadRequest_InvalidArchive:return\"Archive is invalid\";case Kusto.Data.Common.IngestionErrorCode.BadRequest_InvalidBlobUri:return\"Blob Uri is invalid\";case Kusto.Data.Common.IngestionErrorCode.BadRequest_EmptyBlobUri:return\"Blob Uri is empty\";case Kusto.Data.Common.IngestionErrorCode.BadRequest_DatabaseNotExist:return\"Database does not exist\";case Kusto.Data.Common.IngestionErrorCode.BadRequest_TableNotExist:return\"Table does not exist\";case Kusto.Data.Common.IngestionErrorCode.BadRequest_InvalidKustoIdentityToken:return\"Invalid kusto identity token\";case Kusto.Data.Common.IngestionErrorCode.BadRequest_FileTooLarge:return\"File too large\";case Kusto.Data.Common.IngestionErrorCode.Reserved_1:return\"Reserved Error 1\";case Kusto.Data.Common.IngestionErrorCode.General_RetryAttemptsExceeded:return\"Operation has exceeded the retry attempts limit or timespan following a recurring transient error\";case Kusto.Data.Common.IngestionErrorCode.General_BadRequest:return\"Bad request\";case Kusto.Data.Common.IngestionErrorCode.General_InternalServerError:return\"Internal server error occurred\";case Kusto.Data.Common.IngestionErrorCode.UpdatePolicy_Cyclic_Update_Not_Allowed:return\"Failed to invoke update policy. Cyclic update is not allowed\";case Kusto.Data.Common.IngestionErrorCode.BadRequest_InvalidMapping:return\"Failed to parse ingestion mapping.\";case Kusto.Data.Common.IngestionErrorCode.BadRequest_InvalidMappingReference:return\"Invalid mapping reference.\";case Kusto.Data.Common.IngestionErrorCode.BadRequest_MappingReferenceWasNotFound:return\"Mapping reference wasn't found.\";case Kusto.Data.Common.IngestionErrorCode.BadRequest_FormatNotSupported:return\"Format is not supported\";case Kusto.Data.Common.IngestionErrorCode.BadRequest_DuplicateMapping:return\"Ingestion properties contains ingestion mapping and ingestion mapping reference.\";case Kusto.Data.Common.IngestionErrorCode.BadRequest_CorruptedMessage:return\"Message is corrupted\";case Kusto.Data.Common.IngestionErrorCode.BadRequest_InconsistentMapping:return\"Inconsistent ingestion mapping\";case Kusto.Data.Common.IngestionErrorCode.BadRequest_SyntaxError:return\"Syntax error\";case Kusto.Data.Common.IngestionErrorCode.BadRequest_InvalidOrEmptyTableName:return\"Table name is empty or invalid\";case Kusto.Data.Common.IngestionErrorCode.BadRequest_EmptyDatabaseName:return\"Database name is empty\";case Kusto.Data.Common.IngestionErrorCode.BadRequest_EmptyTenantIdentifier:return\"TenantIdentifier is empty\";case Kusto.Data.Common.IngestionErrorCode.BadRequest_EmptyMappingReference:return\"MappingReference is empty\";case Kusto.Data.Common.IngestionErrorCode.BadRequest_EntityNotFound:return\"Failed to locate an entity\";case Kusto.Data.Common.IngestionErrorCode.BadRequest_EntityNameIsNotValid:return\"Entity name is not valid\";case Kusto.Data.Common.IngestionErrorCode.General_AbandonedIngestion:return\"Abandoned ingestion.\";case Kusto.Data.Common.IngestionErrorCode.General_ThrottledIngestion:return\"Throttled ingestion.\";case Kusto.Data.Common.IngestionErrorCode.General_TransientSchemaMismatch:return\"Schema of target table at start time doesn't match the one at commit time.\";case Kusto.Data.Common.IngestionErrorCode.BadRequest_DatabaseAccessDenied:return\"Access to database is denied\";case Kusto.Data.Common.IngestionErrorCode.BadRequest_UnexpectedCharacterInInputStream:return\"Unexpected character in the input stream\";case Kusto.Data.Common.IngestionErrorCode.Forbidden:return\"Insufficient security permissions to execute request\";case Kusto.Data.Common.IngestionErrorCode.BadRequest_ZeroRetentionPolicyWithNoUpdatePolicy:return\"Table has zero rentention policy and is not the source table for any update policy\";case Kusto.Data.Common.IngestionErrorCode.BadRequest_CreationTimeEarlierThanSoftDeletePeriod:return\"Specified creation time is earlier than table's soft delete period\";case Kusto.Data.Common.IngestionErrorCode.BadRequest_NotSupported:return\"Request not supported\";case Kusto.Data.Common.IngestionErrorCode.Skipped_IngestByTagAlreadyExists:return\"Another stream with the same ingest-by tag was already ingested\";case Kusto.Data.Common.IngestionErrorCode.Timeout:return\"Ingestion operation timed out\";case Kusto.Data.Common.IngestionErrorCode.BadRequest_MalformedIngestionProperty:return\"Ingestion property is malformed\";case Kusto.Data.Common.IngestionErrorCode.BadRequest_IngestionPropertyNotSupportedInThisContext:return\"Ingestion property is not supported in this context\";case Kusto.Data.Common.IngestionErrorCode.BadRequest_InvalidAuthentication:return\"Authentication to data is not valid\";case Kusto.Data.Common.IngestionErrorCode.BlobAlreadyReceived_BlobAlreadyFoundInBatch:return\"One copy of this blob has already been processed. The service will only attempt to ingest one copy of the blob\";case Kusto.Data.Common.IngestionErrorCode.BadRequest_InvalidManagedIdentity:return\"Managed Identity is not defined, not allowed by a policy, or doesn't have permissions on the resource\";case Kusto.Data.Common.IngestionErrorCode.BadRequest_DataCapacityLimitReached:return\"Raised to indicate that storage data capacity has reached its limit\";case Kusto.Data.Common.IngestionErrorCode.UpdatePolicy_BadRequest:return\"Failed to invoke update policy as a result of a bad request, e.g. query semantic error\";case Kusto.Data.Common.IngestionErrorCode.BadRequest_NonMultiDatabaseDataConnection:return\"Event contains the 'database' property directing the ingestion into a database different than the target database configured in the data connection's settings. Since this data connection is set to multiDatabase = false, dynamic database routing is forbidden.\";case Kusto.Data.Common.IngestionErrorCode.Cancelled:return\"Ingestion operation cancelled\";case Kusto.Data.Common.IngestionErrorCode.AbandonedByConfiguration_StorageAccount:return\"Blob abandoned by configuration - storage account\";case Kusto.Data.Common.IngestionErrorCode.AbandonedByConfiguration_DatabaseAndTable:return\"Blob abandoned by configuration - database and table combination\";case Kusto.Data.Common.IngestionErrorCode.BadRequest_TableSchemaModificationUnauthorized:return\"Unauthorized table schema modification\";case Kusto.Data.Common.IngestionErrorCode.BadRequest_DatabaseSchemaModificationUnauthorized:return\"Unauthorized database schema modification\";case Kusto.Data.Common.IngestionErrorCode.BadRequest_StreamingIngestionPolicyNotEnabled:return\"Streaming ingestion policy is not enabled for the table\";case Kusto.Data.Common.IngestionErrorCode.BadRequest_StreamingIngestionUpdatePolicyIncompatible:return\"Update policy is incompatible with streaming ingestion\";case Kusto.Data.Common.IngestionErrorCode.NotFound_StreamingIngestionDisabledForCluster:return\"Streaming ingestion is not enabled for the cluster\";default:return null}}}}});Bridge.define(\"Kusto.Data.Common.ExtendedStorageEngineKind\",{statics:{methods:{FastToString:function(that){switch(that){case Kusto.Data.Common.StorageEngineKind.StorageV2:return\"StorageV2\";case Kusto.Data.Common.StorageEngineKind.StorageV3:return\"StorageV3\";default:break}return System.String.format(\"[unknown: {0}]\",[Bridge.box(that,System.Int32)])},FastIsDefined$1:function(value){var dummy={v:new Kusto.Data.Common.StorageEngineKind};return Kusto.Data.Common.ExtendedStorageEngineKind.FastTryParse(value,dummy,!1,!0)},FastIsDefined:function(value){switch(value){case Kusto.Data.Common.StorageEngineKind.StorageV2:return!0;case Kusto.Data.Common.StorageEngineKind.StorageV3:return!0;default:return!1}},FastHasFlag$1:function(that,flag){return(that&flag)===flag},FastHasFlag:function(that,flag){return(that&flag)===flag},FastParse:function(value,ignoreCase,ignoreInts){ignoreCase===void 0&&(ignoreCase=!1);ignoreInts===void 0&&(ignoreInts=!1);var ret={v:new Kusto.Data.Common.StorageEngineKind};if(Kusto.Data.Common.ExtendedStorageEngineKind.FastTryParse(value,ret,ignoreCase,ignoreInts))return ret.v;throw new System.Exception(\"Invalid enum value: \"+(value||\"\"));},FastTryParse:function(value,ret,ignoreCase,ignoreInts){ignoreCase===void 0&&(ignoreCase=!1);ignoreInts===void 0&&(ignoreInts=!1);switch(value){case\"0\":case\"StorageV2\":return ret.v=Kusto.Data.Common.StorageEngineKind.StorageV2,!0;case\"1\":case\"StorageV3\":return ret.v=Kusto.Data.Common.StorageEngineKind.StorageV3,!0;default:break}if(ignoreCase&&!System.String.isNullOrEmpty(value))switch(value.toLowerCase()){case\"storagev2\":return ret.v=Kusto.Data.Common.StorageEngineKind.StorageV2,!0;case\"storagev3\":return ret.v=Kusto.Data.Common.StorageEngineKind.StorageV3,!0;default:break}if(!ignoreInts){var reti={v:0};if(System.Int32.tryParse(value,reti))return ret.v=reti.v,!0}return ret.v=0,!1},FastGetHashCode:function(that){return that},FastGetDescription:function(that){switch(that){case Kusto.Data.Common.StorageEngineKind.StorageV2:return\"V2 - extents data storage engine\";case Kusto.Data.Common.StorageEngineKind.StorageV3:return\"V3 - shard data storage engine\";default:return null}}}}});Bridge.define(\"Kusto.Data.Common.ExtendedTransformationMethod\",{statics:{methods:{FastToString:function(that){switch(that){case Kusto.Data.Common.TransformationMethod.None:return\"None\";case Kusto.Data.Common.TransformationMethod.PropertyBagArrayToDictionary:return\"PropertyBagArrayToDictionary\";case Kusto.Data.Common.TransformationMethod.SourceLocation:return\"SourceLocation\";case Kusto.Data.Common.TransformationMethod.SourceLineNumber:return\"SourceLineNumber\";case Kusto.Data.Common.TransformationMethod.UnknownMethod1:return\"UnknownMethod1\";case Kusto.Data.Common.TransformationMethod.UnknownMethod:return\"UnknownMethod\";case Kusto.Data.Common.TransformationMethod.DateTimeFromUnixSeconds:return\"DateTimeFromUnixSeconds\";case Kusto.Data.Common.TransformationMethod.DateTimeFromUnixMilliseconds:return\"DateTimeFromUnixMilliseconds\";case Kusto.Data.Common.TransformationMethod.DateTimeFromUnixMicroseconds:return\"DateTimeFromUnixMicroseconds\";case Kusto.Data.Common.TransformationMethod.DateTimeFromUnixNanoseconds:return\"DateTimeFromUnixNanoseconds\";case Kusto.Data.Common.TransformationMethod.DropMappedFields:return\"DropMappedFields\";default:break}return System.String.format(\"[unknown: {0}]\",[Bridge.box(that,System.Int32)])},FastIsDefined$1:function(value){var dummy={v:new Kusto.Data.Common.TransformationMethod};return Kusto.Data.Common.ExtendedTransformationMethod.FastTryParse(value,dummy,!1,!0)},FastIsDefined:function(value){switch(value){case Kusto.Data.Common.TransformationMethod.None:return!0;case Kusto.Data.Common.TransformationMethod.PropertyBagArrayToDictionary:return!0;case Kusto.Data.Common.TransformationMethod.SourceLocation:return!0;case Kusto.Data.Common.TransformationMethod.SourceLineNumber:return!0;case Kusto.Data.Common.TransformationMethod.UnknownMethod1:return!0;case Kusto.Data.Common.TransformationMethod.UnknownMethod:return!0;case Kusto.Data.Common.TransformationMethod.DateTimeFromUnixSeconds:return!0;case Kusto.Data.Common.TransformationMethod.DateTimeFromUnixMilliseconds:return!0;case Kusto.Data.Common.TransformationMethod.DateTimeFromUnixMicroseconds:return!0;case Kusto.Data.Common.TransformationMethod.DateTimeFromUnixNanoseconds:return!0;case Kusto.Data.Common.TransformationMethod.DropMappedFields:return!0;default:return!1}},FastHasFlag$1:function(that,flag){return(that&flag)===flag},FastHasFlag:function(that,flag){return(that&flag)===flag},FastParse:function(value,ignoreCase,ignoreInts){ignoreCase===void 0&&(ignoreCase=!1);ignoreInts===void 0&&(ignoreInts=!1);var ret={v:new Kusto.Data.Common.TransformationMethod};if(Kusto.Data.Common.ExtendedTransformationMethod.FastTryParse(value,ret,ignoreCase,ignoreInts))return ret.v;throw new System.Exception(\"Invalid enum value: \"+(value||\"\"));},FastTryParse:function(value,ret,ignoreCase,ignoreInts){ignoreCase===void 0&&(ignoreCase=!1);ignoreInts===void 0&&(ignoreInts=!1);switch(value){case\"0\":case\"None\":return ret.v=Kusto.Data.Common.TransformationMethod.None,!0;case\"1\":case\"PropertyBagArrayToDictionary\":return ret.v=Kusto.Data.Common.TransformationMethod.PropertyBagArrayToDictionary,!0;case\"2\":case\"SourceLocation\":return ret.v=Kusto.Data.Common.TransformationMethod.SourceLocation,!0;case\"3\":case\"SourceLineNumber\":return ret.v=Kusto.Data.Common.TransformationMethod.SourceLineNumber,!0;case\"4\":case\"UnknownMethod1\":return ret.v=Kusto.Data.Common.TransformationMethod.UnknownMethod1,!0;case\"5\":case\"UnknownMethod\":return ret.v=Kusto.Data.Common.TransformationMethod.UnknownMethod,!0;case\"6\":case\"DateTimeFromUnixSeconds\":return ret.v=Kusto.Data.Common.TransformationMethod.DateTimeFromUnixSeconds,!0;case\"7\":case\"DateTimeFromUnixMilliseconds\":return ret.v=Kusto.Data.Common.TransformationMethod.DateTimeFromUnixMilliseconds,!0;case\"8\":case\"DateTimeFromUnixMicroseconds\":return ret.v=Kusto.Data.Common.TransformationMethod.DateTimeFromUnixMicroseconds,!0;case\"9\":case\"DateTimeFromUnixNanoseconds\":return ret.v=Kusto.Data.Common.TransformationMethod.DateTimeFromUnixNanoseconds,!0;case\"10\":case\"DropMappedFields\":return ret.v=Kusto.Data.Common.TransformationMethod.DropMappedFields,!0;default:break}if(ignoreCase&&!System.String.isNullOrEmpty(value))switch(value.toLowerCase()){case\"none\":return ret.v=Kusto.Data.Common.TransformationMethod.None,!0;case\"propertybagarraytodictionary\":return ret.v=Kusto.Data.Common.TransformationMethod.PropertyBagArrayToDictionary,!0;case\"sourcelocation\":return ret.v=Kusto.Data.Common.TransformationMethod.SourceLocation,!0;case\"sourcelinenumber\":return ret.v=Kusto.Data.Common.TransformationMethod.SourceLineNumber,!0;case\"unknownmethod1\":return ret.v=Kusto.Data.Common.TransformationMethod.UnknownMethod1,!0;case\"unknownmethod\":return ret.v=Kusto.Data.Common.TransformationMethod.UnknownMethod,!0;case\"datetimefromunixseconds\":return ret.v=Kusto.Data.Common.TransformationMethod.DateTimeFromUnixSeconds,!0;case\"datetimefromunixmilliseconds\":return ret.v=Kusto.Data.Common.TransformationMethod.DateTimeFromUnixMilliseconds,!0;case\"datetimefromunixmicroseconds\":return ret.v=Kusto.Data.Common.TransformationMethod.DateTimeFromUnixMicroseconds,!0;case\"datetimefromunixnanoseconds\":return ret.v=Kusto.Data.Common.TransformationMethod.DateTimeFromUnixNanoseconds,!0;case\"dropmappedfields\":return ret.v=Kusto.Data.Common.TransformationMethod.DropMappedFields,!0;default:break}if(!ignoreInts){var reti={v:0};if(System.Int32.tryParse(value,reti))return ret.v=reti.v,!0}return ret.v=0,!1},FastGetHashCode:function(that){return that},FastGetDescription:function(that){switch(that){case Kusto.Data.Common.TransformationMethod.None:return\"Comma-separated value.\";case Kusto.Data.Common.TransformationMethod.PropertyBagArrayToDictionary:return\"Property bag array to dictionary.\";case Kusto.Data.Common.TransformationMethod.SourceLocation:return\"Source location.\";case Kusto.Data.Common.TransformationMethod.SourceLineNumber:return\"Source line number.\";case Kusto.Data.Common.TransformationMethod.UnknownMethod1:return\"Was GetPathElement\";case Kusto.Data.Common.TransformationMethod.UnknownMethod:return\"Unknown method.\";case Kusto.Data.Common.TransformationMethod.DateTimeFromUnixSeconds:return\"Converts UNIX epoch (seconds) to UTC datetime.\";case Kusto.Data.Common.TransformationMethod.DateTimeFromUnixMilliseconds:return\"Converts UNIX epoch (milliseconds) to UTC datetime.\";case Kusto.Data.Common.TransformationMethod.DateTimeFromUnixMicroseconds:return\"Converts UNIX epoch (microseconds) to UTC datetime.\";case Kusto.Data.Common.TransformationMethod.DateTimeFromUnixNanoseconds:return\"Converts UNIX epoch (nanoseconds) to UTC datetime.\";case Kusto.Data.Common.TransformationMethod.DropMappedFields:return\"Drops nested fields already mapped to other columns.\";default:return null}}}}});Bridge.define(\"Kusto.Data.Common.ExtentsMergeLookbackPeriodKind\",{$kind:\"enum\",statics:{fields:{Default:0,HotCache:1,All:2,Custom:3}}});Bridge.define(\"Kusto.Data.Common.IngestionErrorCategory\",{$kind:\"enum\",statics:{fields:{Unknown:0,InternalServiceError:1,BadFormat:2,BadRequest:3,UpdatePolicyFailure:4,EntityNotFound:5,UserAccessNotAuthorized:6,DataAccessNotAuthorized:7,FileTooLarge:8,ThrottledOnEngine:9,DownloadFailed:10,RetryAttemptsExceeded:11,BlobAlreadyReceived:12,Cancelled:13,Configuration:14,MetadataAccessNotAuthorized:15}}});Bridge.define(\"Kusto.Data.Common.IngestionErrorCode\",{$kind:\"enum\",statics:{fields:{Unknown:0,OutOfMemory:2161770503,Stream_WrongNumberOfFields:2161770504,Stream_InputStreamTooLarge:2161770505,Stream_NoDataToIngest:2161770506,Stream_ClosingQuoteMissing:2161770507,Stream_DynamicPropertyBagTooLarge:2161770510,Download_SourceNotFound:2161770511,Download_AccessConditionNotSatisfied:2161770512,Download_Forbidden:2161770513,Download_AccountNotFound:2161770514,Download_TransientNameResolutionFailure:2161770515,Download_BadRequest:2161770516,Download_NotTransient:2161770517,Download_UnknownError:2161770518,UpdatePolicy_QuerySchemaDoesNotMatchTableSchema:2161770519,UpdatePolicy_FailedDescendantTransaction:2161770520,UpdatePolicy_IngestionError:2161770521,UpdatePolicy_UnknownError:2161770522,BadRequest_MissingMappingFailure:2161770523,BadRequest_InvalidBlob:2161770524,BadRequest_EmptyBlob:2161770525,BadRequest_NoRecordsOrWrongFormat:2161770526,BadRequest_EmptyArchive:2161770527,BadRequest_InvalidArchive:2161770528,BadRequest_InvalidBlobUri:2161770529,BadRequest_EmptyBlobUri:2161770530,BadRequest_DatabaseNotExist:2161770531,BadRequest_TableNotExist:2161770532,BadRequest_InvalidKustoIdentityToken:2161770533,BadRequest_FileTooLarge:2161770534,Reserved_1:2161770535,General_RetryAttemptsExceeded:2161770536,General_BadRequest:2161770537,General_InternalServerError:2161770538,UpdatePolicy_Cyclic_Update_Not_Allowed:2161770539,BadRequest_InvalidMapping:2161770540,BadRequest_InvalidMappingReference:2161770541,BadRequest_MappingReferenceWasNotFound:2161770542,BadRequest_FormatNotSupported:2161770543,BadRequest_DuplicateMapping:2161770544,BadRequest_CorruptedMessage:2161770545,BadRequest_InconsistentMapping:2161770546,BadRequest_SyntaxError:2161770547,BadRequest_InvalidOrEmptyTableName:2161770548,BadRequest_EmptyDatabaseName:2161770549,BadRequest_EmptyTenantIdentifier:2161770550,BadRequest_EmptyMappingReference:2161770551,BadRequest_EntityNotFound:2161770552,BadRequest_EntityNameIsNotValid:2161770553,General_AbandonedIngestion:2161770554,General_ThrottledIngestion:2161770555,General_TransientSchemaMismatch:2161770556,BadRequest_DatabaseAccessDenied:2161770557,BadRequest_UnexpectedCharacterInInputStream:2161770558,Forbidden:2161770559,BadRequest_ZeroRetentionPolicyWithNoUpdatePolicy:2161770560,BadRequest_CreationTimeEarlierThanSoftDeletePeriod:2161770561,BadRequest_NotSupported:2161770562,Skipped_IngestByTagAlreadyExists:2161770563,Timeout:2148734213,BadRequest_MalformedIngestionProperty:2148734214,BadRequest_IngestionPropertyNotSupportedInThisContext:2148734215,BadRequest_InvalidAuthentication:2148734216,BlobAlreadyReceived_BlobAlreadyFoundInBatch:2148734217,BadRequest_InvalidManagedIdentity:2148734218,BadRequest_DataCapacityLimitReached:2148734219,UpdatePolicy_BadRequest:2148734220,BadRequest_NonMultiDatabaseDataConnection:2148734221,Cancelled:2148734222,AbandonedByConfiguration_StorageAccount:2148734223,AbandonedByConfiguration_DatabaseAndTable:2148734224,BadRequest_TableSchemaModificationUnauthorized:2148734225,BadRequest_DatabaseSchemaModificationUnauthorized:2148734226,BadRequest_StreamingIngestionPolicyNotEnabled:2148734227,BadRequest_StreamingIngestionUpdatePolicyIncompatible:2148734228,NotFound_StreamingIngestionDisabledForCluster:2148734229}},$utype:System.UInt32});Bridge.define(\"Kusto.Data.Common.StorageEngineKind\",{$kind:\"enum\",statics:{fields:{StorageV2:0,StorageV3:1}}});Bridge.define(\"Kusto.Data.Common.TransformationMethod\",{$kind:\"enum\",statics:{fields:{None:0,PropertyBagArrayToDictionary:1,SourceLocation:2,SourceLineNumber:3,UnknownMethod1:4,UnknownMethod:5,DateTimeFromUnixSeconds:6,DateTimeFromUnixMilliseconds:7,DateTimeFromUnixMicroseconds:8,DateTimeFromUnixNanoseconds:9,DropMappedFields:10}}});Bridge.define(\"Kusto.Data.DmSettingsType\",{$kind:\"enum\",statics:{fields:{AdminSettings:0,DataObtainerServiceSettings:1,DataAggregatorSettings:2,DataObtainerSettings:3,CloudManagersSettings:5,SchemaManagmentSettings:6,CommonSettings:7,DataImporterSettings:8,StatusReporterSettings:9,All:10,VirtualDmsSettings:11}}});Bridge.define(\"Kusto.Data.ExtendedDmSettingsType\",{statics:{methods:{FastToString:function(that){switch(that){case Kusto.Data.DmSettingsType.AdminSettings:return\"AdminSettings\";case Kusto.Data.DmSettingsType.DataObtainerServiceSettings:return\"DataObtainerServiceSettings\";case Kusto.Data.DmSettingsType.DataAggregatorSettings:return\"DataAggregatorSettings\";case Kusto.Data.DmSettingsType.DataObtainerSettings:return\"DataObtainerSettings\";case Kusto.Data.DmSettingsType.CloudManagersSettings:return\"CloudManagersSettings\";case Kusto.Data.DmSettingsType.SchemaManagmentSettings:return\"SchemaManagmentSettings\";case Kusto.Data.DmSettingsType.CommonSettings:return\"CommonSettings\";case Kusto.Data.DmSettingsType.DataImporterSettings:return\"DataImporterSettings\";case Kusto.Data.DmSettingsType.StatusReporterSettings:return\"StatusReporterSettings\";case Kusto.Data.DmSettingsType.All:return\"All\";case Kusto.Data.DmSettingsType.VirtualDmsSettings:return\"VirtualDmsSettings\";default:break}return System.String.format(\"[unknown: {0}]\",[Bridge.box(that,System.Int32)])},FastIsDefined$1:function(value){var dummy={v:new Kusto.Data.DmSettingsType};return Kusto.Data.ExtendedDmSettingsType.FastTryParse(value,dummy,!1,!0)},FastIsDefined:function(value){switch(value){case Kusto.Data.DmSettingsType.AdminSettings:return!0;case Kusto.Data.DmSettingsType.DataObtainerServiceSettings:return!0;case Kusto.Data.DmSettingsType.DataAggregatorSettings:return!0;case Kusto.Data.DmSettingsType.DataObtainerSettings:return!0;case Kusto.Data.DmSettingsType.CloudManagersSettings:return!0;case Kusto.Data.DmSettingsType.SchemaManagmentSettings:return!0;case Kusto.Data.DmSettingsType.CommonSettings:return!0;case Kusto.Data.DmSettingsType.DataImporterSettings:return!0;case Kusto.Data.DmSettingsType.StatusReporterSettings:return!0;case Kusto.Data.DmSettingsType.All:return!0;case Kusto.Data.DmSettingsType.VirtualDmsSettings:return!0;default:return!1}},FastHasFlag$1:function(that,flag){return(that&flag)===flag},FastHasFlag:function(that,flag){return(that&flag)===flag},FastParse:function(value,ignoreCase,ignoreInts){ignoreCase===void 0&&(ignoreCase=!1);ignoreInts===void 0&&(ignoreInts=!1);var ret={v:new Kusto.Data.DmSettingsType};if(Kusto.Data.ExtendedDmSettingsType.FastTryParse(value,ret,ignoreCase,ignoreInts))return ret.v;throw new System.Exception(\"Invalid enum value: \"+(value||\"\"));},FastTryParse:function(value,ret,ignoreCase,ignoreInts){ignoreCase===void 0&&(ignoreCase=!1);ignoreInts===void 0&&(ignoreInts=!1);switch(value){case\"0\":case\"AdminSettings\":return ret.v=Kusto.Data.DmSettingsType.AdminSettings,!0;case\"1\":case\"DataObtainerServiceSettings\":return ret.v=Kusto.Data.DmSettingsType.DataObtainerServiceSettings,!0;case\"2\":case\"DataAggregatorSettings\":return ret.v=Kusto.Data.DmSettingsType.DataAggregatorSettings,!0;case\"3\":case\"DataObtainerSettings\":return ret.v=Kusto.Data.DmSettingsType.DataObtainerSettings,!0;case\"5\":case\"CloudManagersSettings\":return ret.v=Kusto.Data.DmSettingsType.CloudManagersSettings,!0;case\"6\":case\"SchemaManagmentSettings\":return ret.v=Kusto.Data.DmSettingsType.SchemaManagmentSettings,!0;case\"7\":case\"CommonSettings\":return ret.v=Kusto.Data.DmSettingsType.CommonSettings,!0;case\"8\":case\"DataImporterSettings\":return ret.v=Kusto.Data.DmSettingsType.DataImporterSettings,!0;case\"9\":case\"StatusReporterSettings\":return ret.v=Kusto.Data.DmSettingsType.StatusReporterSettings,!0;case\"10\":case\"All\":return ret.v=Kusto.Data.DmSettingsType.All,!0;case\"11\":case\"VirtualDmsSettings\":return ret.v=Kusto.Data.DmSettingsType.VirtualDmsSettings,!0;default:break}if(ignoreCase&&!System.String.isNullOrEmpty(value))switch(value.toLowerCase()){case\"adminsettings\":return ret.v=Kusto.Data.DmSettingsType.AdminSettings,!0;case\"dataobtainerservicesettings\":return ret.v=Kusto.Data.DmSettingsType.DataObtainerServiceSettings,!0;case\"dataaggregatorsettings\":return ret.v=Kusto.Data.DmSettingsType.DataAggregatorSettings,!0;case\"dataobtainersettings\":return ret.v=Kusto.Data.DmSettingsType.DataObtainerSettings,!0;case\"cloudmanagerssettings\":return ret.v=Kusto.Data.DmSettingsType.CloudManagersSettings,!0;case\"schemamanagmentsettings\":return ret.v=Kusto.Data.DmSettingsType.SchemaManagmentSettings,!0;case\"commonsettings\":return ret.v=Kusto.Data.DmSettingsType.CommonSettings,!0;case\"dataimportersettings\":return ret.v=Kusto.Data.DmSettingsType.DataImporterSettings,!0;case\"statusreportersettings\":return ret.v=Kusto.Data.DmSettingsType.StatusReporterSettings,!0;case\"all\":return ret.v=Kusto.Data.DmSettingsType.All,!0;case\"virtualdmssettings\":return ret.v=Kusto.Data.DmSettingsType.VirtualDmsSettings,!0;default:break}if(!ignoreInts){var reti={v:0};if(System.Int32.tryParse(value,reti))return ret.v=reti.v,!0}return ret.v=0,!1},FastGetHashCode:function(that){return that},FastGetDescription:function(that){switch(that){case Kusto.Data.DmSettingsType.AdminSettings:return\"\";case Kusto.Data.DmSettingsType.DataObtainerServiceSettings:return\"\";case Kusto.Data.DmSettingsType.DataAggregatorSettings:return\"\";case Kusto.Data.DmSettingsType.DataObtainerSettings:return\"\";case Kusto.Data.DmSettingsType.CloudManagersSettings:return\"\";case Kusto.Data.DmSettingsType.SchemaManagmentSettings:return\"\";case Kusto.Data.DmSettingsType.CommonSettings:return\"\";case Kusto.Data.DmSettingsType.DataImporterSettings:return\"\";case Kusto.Data.DmSettingsType.StatusReporterSettings:return\"\";case Kusto.Data.DmSettingsType.All:return\"\";case Kusto.Data.DmSettingsType.VirtualDmsSettings:return\"\";default:return null}}}}});Bridge.define(\"Kusto.Data.ExtendedIngestionQueueType\",{statics:{methods:{FastToString:function(that){switch(that){case Kusto.Data.IngestionQueueType.All:return\"All\";case Kusto.Data.IngestionQueueType.InputQueue:return\"InputQueue\";case Kusto.Data.IngestionQueueType.InternalQueue:return\"InternalQueue\";case Kusto.Data.IngestionQueueType.ReadyForAggregationQueue:return\"ReadyForAggregationQueue\";case Kusto.Data.IngestionQueueType.SecuredReadyForAggregationQueue:return\"SecuredReadyForAggregationQueue\";case Kusto.Data.IngestionQueueType.AggregatedReadyForImportQueue:return\"AggregatedReadyForImportQueue\";case Kusto.Data.IngestionQueueType.FailedIngestionsQueue:return\"FailedIngestionsQueue\";case Kusto.Data.IngestionQueueType.SuccessfulIngestionsQueue:return\"SuccessfulIngestionsQueue\";case Kusto.Data.IngestionQueueType.AbandonedIngestionsQueue:return\"AbandonedIngestionsQueue\";case Kusto.Data.IngestionQueueType.SecuredAbandonedIngestionsQueue:return\"SecuredAbandonedIngestionsQueue\";case Kusto.Data.IngestionQueueType.InternalFailedIngestionsQueue:return\"InternalFailedIngestionsQueue\";case Kusto.Data.IngestionQueueType.AbandonedInputQueues:return\"AbandonedInputQueues\";case Kusto.Data.IngestionQueueType.ImporterDeadLetterQueue:return\"ImporterDeadLetterQueue\";default:break}return System.String.format(\"[unknown: {0}]\",[Bridge.box(that,System.Int32)])},FastIsDefined$1:function(value){var dummy={v:new Kusto.Data.IngestionQueueType};return Kusto.Data.ExtendedIngestionQueueType.FastTryParse(value,dummy,!1,!0)},FastIsDefined:function(value){switch(value){case Kusto.Data.IngestionQueueType.All:return!0;case Kusto.Data.IngestionQueueType.InputQueue:return!0;case Kusto.Data.IngestionQueueType.InternalQueue:return!0;case Kusto.Data.IngestionQueueType.ReadyForAggregationQueue:return!0;case Kusto.Data.IngestionQueueType.SecuredReadyForAggregationQueue:return!0;case Kusto.Data.IngestionQueueType.AggregatedReadyForImportQueue:return!0;case Kusto.Data.IngestionQueueType.FailedIngestionsQueue:return!0;case Kusto.Data.IngestionQueueType.SuccessfulIngestionsQueue:return!0;case Kusto.Data.IngestionQueueType.AbandonedIngestionsQueue:return!0;case Kusto.Data.IngestionQueueType.SecuredAbandonedIngestionsQueue:return!0;case Kusto.Data.IngestionQueueType.InternalFailedIngestionsQueue:return!0;case Kusto.Data.IngestionQueueType.AbandonedInputQueues:return!0;case Kusto.Data.IngestionQueueType.ImporterDeadLetterQueue:return!0;default:return!1}},FastHasFlag$1:function(that,flag){return(that&flag)===flag},FastHasFlag:function(that,flag){return(that&flag)===flag},FastParse:function(value,ignoreCase,ignoreInts){ignoreCase===void 0&&(ignoreCase=!1);ignoreInts===void 0&&(ignoreInts=!1);var ret={v:new Kusto.Data.IngestionQueueType};if(Kusto.Data.ExtendedIngestionQueueType.FastTryParse(value,ret,ignoreCase,ignoreInts))return ret.v;throw new System.Exception(\"Invalid enum value: \"+(value||\"\"));},FastTryParse:function(value,ret,ignoreCase,ignoreInts){ignoreCase===void 0&&(ignoreCase=!1);ignoreInts===void 0&&(ignoreInts=!1);switch(value){case\"0\":case\"All\":return ret.v=Kusto.Data.IngestionQueueType.All,!0;case\"1\":case\"InputQueue\":return ret.v=Kusto.Data.IngestionQueueType.InputQueue,!0;case\"2\":case\"InternalQueue\":return ret.v=Kusto.Data.IngestionQueueType.InternalQueue,!0;case\"3\":case\"ReadyForAggregationQueue\":return ret.v=Kusto.Data.IngestionQueueType.ReadyForAggregationQueue,!0;case\"4\":case\"SecuredReadyForAggregationQueue\":return ret.v=Kusto.Data.IngestionQueueType.SecuredReadyForAggregationQueue,!0;case\"5\":case\"AggregatedReadyForImportQueue\":return ret.v=Kusto.Data.IngestionQueueType.AggregatedReadyForImportQueue,!0;case\"6\":case\"FailedIngestionsQueue\":return ret.v=Kusto.Data.IngestionQueueType.FailedIngestionsQueue,!0;case\"7\":case\"SuccessfulIngestionsQueue\":return ret.v=Kusto.Data.IngestionQueueType.SuccessfulIngestionsQueue,!0;case\"9\":case\"AbandonedIngestionsQueue\":return ret.v=Kusto.Data.IngestionQueueType.AbandonedIngestionsQueue,!0;case\"10\":case\"SecuredAbandonedIngestionsQueue\":return ret.v=Kusto.Data.IngestionQueueType.SecuredAbandonedIngestionsQueue,!0;case\"11\":case\"InternalFailedIngestionsQueue\":return ret.v=Kusto.Data.IngestionQueueType.InternalFailedIngestionsQueue,!0;case\"12\":case\"AbandonedInputQueues\":return ret.v=Kusto.Data.IngestionQueueType.AbandonedInputQueues,!0;case\"13\":case\"ImporterDeadLetterQueue\":return ret.v=Kusto.Data.IngestionQueueType.ImporterDeadLetterQueue,!0;default:break}if(ignoreCase&&!System.String.isNullOrEmpty(value))switch(value.toLowerCase()){case\"all\":return ret.v=Kusto.Data.IngestionQueueType.All,!0;case\"inputqueue\":return ret.v=Kusto.Data.IngestionQueueType.InputQueue,!0;case\"internalqueue\":return ret.v=Kusto.Data.IngestionQueueType.InternalQueue,!0;case\"readyforaggregationqueue\":return ret.v=Kusto.Data.IngestionQueueType.ReadyForAggregationQueue,!0;case\"securedreadyforaggregationqueue\":return ret.v=Kusto.Data.IngestionQueueType.SecuredReadyForAggregationQueue,!0;case\"aggregatedreadyforimportqueue\":return ret.v=Kusto.Data.IngestionQueueType.AggregatedReadyForImportQueue,!0;case\"failedingestionsqueue\":return ret.v=Kusto.Data.IngestionQueueType.FailedIngestionsQueue,!0;case\"successfulingestionsqueue\":return ret.v=Kusto.Data.IngestionQueueType.SuccessfulIngestionsQueue,!0;case\"abandonedingestionsqueue\":return ret.v=Kusto.Data.IngestionQueueType.AbandonedIngestionsQueue,!0;case\"securedabandonedingestionsqueue\":return ret.v=Kusto.Data.IngestionQueueType.SecuredAbandonedIngestionsQueue,!0;case\"internalfailedingestionsqueue\":return ret.v=Kusto.Data.IngestionQueueType.InternalFailedIngestionsQueue,!0;case\"abandonedinputqueues\":return ret.v=Kusto.Data.IngestionQueueType.AbandonedInputQueues,!0;case\"importerdeadletterqueue\":return ret.v=Kusto.Data.IngestionQueueType.ImporterDeadLetterQueue,!0;default:break}if(!ignoreInts){var reti={v:0};if(System.Int32.tryParse(value,reti))return ret.v=reti.v,!0}return ret.v=0,!1},FastGetHashCode:function(that){return that},FastGetDescription:function(that){switch(that){case Kusto.Data.IngestionQueueType.All:return\"\";case Kusto.Data.IngestionQueueType.InputQueue:return\"\";case Kusto.Data.IngestionQueueType.InternalQueue:return\"\";case Kusto.Data.IngestionQueueType.ReadyForAggregationQueue:return\"\";case Kusto.Data.IngestionQueueType.SecuredReadyForAggregationQueue:return\"\";case Kusto.Data.IngestionQueueType.AggregatedReadyForImportQueue:return\"\";case Kusto.Data.IngestionQueueType.FailedIngestionsQueue:return\"\";case Kusto.Data.IngestionQueueType.SuccessfulIngestionsQueue:return\"\";case Kusto.Data.IngestionQueueType.AbandonedIngestionsQueue:return\"\";case Kusto.Data.IngestionQueueType.SecuredAbandonedIngestionsQueue:return\"\";case Kusto.Data.IngestionQueueType.InternalFailedIngestionsQueue:return\"\";case Kusto.Data.IngestionQueueType.AbandonedInputQueues:return\"\";case Kusto.Data.IngestionQueueType.ImporterDeadLetterQueue:return\"\";default:return null}}}}});Bridge.define(\"Kusto.Data.Ingestion.ExtendedIngestionMappingKind\",{statics:{methods:{FastToString:function(that){switch(that){case Kusto.Data.Ingestion.IngestionMappingKind.Unknown:return\"Unknown\";case Kusto.Data.Ingestion.IngestionMappingKind.Csv:return\"Csv\";case Kusto.Data.Ingestion.IngestionMappingKind.Json:return\"Json\";case Kusto.Data.Ingestion.IngestionMappingKind.Avro:return\"Avro\";case Kusto.Data.Ingestion.IngestionMappingKind.Parquet:return\"Parquet\";case Kusto.Data.Ingestion.IngestionMappingKind.SStream:return\"SStream\";case Kusto.Data.Ingestion.IngestionMappingKind.Orc:return\"Orc\";case Kusto.Data.Ingestion.IngestionMappingKind.ApacheAvro:return\"ApacheAvro\";case Kusto.Data.Ingestion.IngestionMappingKind.W3CLogFile:return\"W3CLogFile\";default:break}return System.String.format(\"[unknown: {0}]\",[Bridge.box(that,System.Int32)])},FastIsDefined$1:function(value){var dummy={v:new Kusto.Data.Ingestion.IngestionMappingKind};return Kusto.Data.Ingestion.ExtendedIngestionMappingKind.FastTryParse(value,dummy,!1,!0)},FastIsDefined:function(value){switch(value){case Kusto.Data.Ingestion.IngestionMappingKind.Unknown:return!0;case Kusto.Data.Ingestion.IngestionMappingKind.Csv:return!0;case Kusto.Data.Ingestion.IngestionMappingKind.Json:return!0;case Kusto.Data.Ingestion.IngestionMappingKind.Avro:return!0;case Kusto.Data.Ingestion.IngestionMappingKind.Parquet:return!0;case Kusto.Data.Ingestion.IngestionMappingKind.SStream:return!0;case Kusto.Data.Ingestion.IngestionMappingKind.Orc:return!0;case Kusto.Data.Ingestion.IngestionMappingKind.ApacheAvro:return!0;case Kusto.Data.Ingestion.IngestionMappingKind.W3CLogFile:return!0;default:return!1}},FastHasFlag$1:function(that,flag){return(that&flag)===flag},FastHasFlag:function(that,flag){return(that&flag)===flag},FastParse:function(value,ignoreCase,ignoreInts){ignoreCase===void 0&&(ignoreCase=!1);ignoreInts===void 0&&(ignoreInts=!1);var ret={v:new Kusto.Data.Ingestion.IngestionMappingKind};if(Kusto.Data.Ingestion.ExtendedIngestionMappingKind.FastTryParse(value,ret,ignoreCase,ignoreInts))return ret.v;throw new System.Exception(\"Invalid enum value: \"+(value||\"\"));},FastTryParse:function(value,ret,ignoreCase,ignoreInts){ignoreCase===void 0&&(ignoreCase=!1);ignoreInts===void 0&&(ignoreInts=!1);switch(value){case\"0\":case\"Unknown\":return ret.v=Kusto.Data.Ingestion.IngestionMappingKind.Unknown,!0;case\"1\":case\"Csv\":return ret.v=Kusto.Data.Ingestion.IngestionMappingKind.Csv,!0;case\"2\":case\"Json\":return ret.v=Kusto.Data.Ingestion.IngestionMappingKind.Json,!0;case\"4\":case\"Avro\":return ret.v=Kusto.Data.Ingestion.IngestionMappingKind.Avro,!0;case\"5\":case\"Parquet\":return ret.v=Kusto.Data.Ingestion.IngestionMappingKind.Parquet,!0;case\"6\":case\"SStream\":return ret.v=Kusto.Data.Ingestion.IngestionMappingKind.SStream,!0;case\"7\":case\"Orc\":return ret.v=Kusto.Data.Ingestion.IngestionMappingKind.Orc,!0;case\"8\":case\"ApacheAvro\":return ret.v=Kusto.Data.Ingestion.IngestionMappingKind.ApacheAvro,!0;case\"9\":case\"W3CLogFile\":return ret.v=Kusto.Data.Ingestion.IngestionMappingKind.W3CLogFile,!0;default:break}if(ignoreCase&&!System.String.isNullOrEmpty(value))switch(value.toLowerCase()){case\"unknown\":return ret.v=Kusto.Data.Ingestion.IngestionMappingKind.Unknown,!0;case\"csv\":return ret.v=Kusto.Data.Ingestion.IngestionMappingKind.Csv,!0;case\"json\":return ret.v=Kusto.Data.Ingestion.IngestionMappingKind.Json,!0;case\"avro\":return ret.v=Kusto.Data.Ingestion.IngestionMappingKind.Avro,!0;case\"parquet\":return ret.v=Kusto.Data.Ingestion.IngestionMappingKind.Parquet,!0;case\"sstream\":return ret.v=Kusto.Data.Ingestion.IngestionMappingKind.SStream,!0;case\"orc\":return ret.v=Kusto.Data.Ingestion.IngestionMappingKind.Orc,!0;case\"apacheavro\":return ret.v=Kusto.Data.Ingestion.IngestionMappingKind.ApacheAvro,!0;case\"w3clogfile\":return ret.v=Kusto.Data.Ingestion.IngestionMappingKind.W3CLogFile,!0;default:break}if(!ignoreInts){var reti={v:0};if(System.Int32.tryParse(value,reti))return ret.v=reti.v,!0}return ret.v=0,!1},FastGetHashCode:function(that){return that},FastGetDescription:function(that){switch(that){case Kusto.Data.Ingestion.IngestionMappingKind.Unknown:return\"Unknown\";case Kusto.Data.Ingestion.IngestionMappingKind.Csv:return\"Csv\";case Kusto.Data.Ingestion.IngestionMappingKind.Json:return\"Json\";case Kusto.Data.Ingestion.IngestionMappingKind.Avro:return\"Avro\";case Kusto.Data.Ingestion.IngestionMappingKind.Parquet:return\"Parquet\";case Kusto.Data.Ingestion.IngestionMappingKind.SStream:return\"SStream\";case Kusto.Data.Ingestion.IngestionMappingKind.Orc:return\"Orc\";case Kusto.Data.Ingestion.IngestionMappingKind.ApacheAvro:return\"Apache Avro (through avro2json)\";case Kusto.Data.Ingestion.IngestionMappingKind.W3CLogFile:return\"W3C Extended Log File format\";default:return null}}}}});Bridge.define(\"Kusto.Data.Ingestion.IngestionMappingKind\",{$kind:\"enum\",statics:{fields:{Unknown:0,Csv:1,Json:2,Avro:4,Parquet:5,SStream:6,Orc:7,ApacheAvro:8,W3CLogFile:9}}});Bridge.define(\"Kusto.Data.IngestionQueueType\",{$kind:\"enum\",statics:{fields:{All:0,InputQueue:1,InternalQueue:2,ReadyForAggregationQueue:3,SecuredReadyForAggregationQueue:4,AggregatedReadyForImportQueue:5,FailedIngestionsQueue:6,SuccessfulIngestionsQueue:7,AbandonedIngestionsQueue:9,SecuredAbandonedIngestionsQueue:10,InternalFailedIngestionsQueue:11,AbandonedInputQueues:12,ImporterDeadLetterQueue:13}}});Bridge.define(\"Kusto.Data.IntelliSense.AdminEngineRuleKind\",{$kind:\"enum\",statics:{fields:{None:0,Start:0,YieldShowCommandOptions:0,YieldTableNamesForAdminOptions:1,YieldFunctionNamesForAdminOptions:2,YieldDatabaseNames:3,YieldShowBasicAuthOptions:4,YieldShowDatabasePrincipalsPoliciesAndSchemaOptions:5,YieldShowDatabasesOptions:6,YieldShowClusterPrincipalsOptions:7,YieldSetDatabaseAdminsUsersViewersPrettyNameOptions:8,YieldSetClusterAdminsUsersViewersDatabaseCreatorsOptions:9,YieldSetTableAdminsOptions:10,YieldAddDatabaseAdminsUsersViewersOptions:11,YieldDropDatabaseOptions:12,YieldAddClusterAdminsUsersViewersDatabaseCreatorsBlockedPrincipalsOptions:13,YieldDropClusterAdminsUsersViewersDatabaseCreatorsBlockedPrincipalsOptions:14,YieldAddClusterBlockedPrincipalsOptions:15,YieldAddTableAdminsOptions:16,YieldDropTableEntitiesOptions:17,YieldDeleteTableEntitiesOptions:18,YieldCreateTableEntitiesOptions:19,YieldAlterTableEntitiesOptions:20,YieldDropTableColumnsSyntaxOptions:21,YieldSetDatabaseUsersNoneOptions:22,YieldSetDatabaseAdminsNoneOptions:23,YieldSetDatabaseViewersNoneOptions:24,YieldSetClusterUsersNoneOptions:25,YieldSetClusterAdminsNoneOptions:26,YieldSetClusterViewersNoneOptions:27,YieldSetClusterDatabaseCreatorsNoneOptions:28,YieldSetTableAdminsNoneOptions:29,YieldShowTableEntitiesOptions:30,YieldAlterExtentTagsOptions:31,YieldAttachExtentsOptions:32,YieldAttachExtentsIntoTableOptions:33,YieldDropExtentTagsOptions:34,YieldMoveExtentsOptions:35,YieldMoveSpecifiedExtentsOptions:36,YieldMoveExtentsToTableOptions:37,YieldReplaceCommandOptions:38,YieldReplaceExtentsOptions:39,YieldRunCommandOptions:40,YieldShowExtentsOptions:41,YieldShowExtentsByEntityOptions:42,YieldShowExtentsByEntityWithTagsFiltersOptions:43,YieldSetCommandOptions:44,YieldSetOrAppendCommandOptions:45,YieldAddCommandOptions:46,YieldAttachCommandOptions:47,YieldDropCommandOptions:48,YieldMoveCommandOptions:49,YieldPoliciesOptions:50,YieldClusterPoliciesOptions:51,YieldDatabasePoliciesOptions:52,YieldTablePoliciesOptions:53,YieldColumnPoliciesOptions:54,YieldAlterCommandOptions:55,YieldAlterMergeCommandOptions:56,YieldDeleteCommandOptions:57,YieldCreateCommandOptions:58,YieldMultiplePoliciesOptions:59,YieldDatabaseCreatePersistencyOptions:60,YieldCreateIfNotExistsOptions:61,YieldAdminCommandsOptions:62,YieldExportCommandOptions:63,YieldExportCommandWithModifiersAndOptions:64,YieldExportCommandNoModifiersAndOptions:65,YieldAlterDatabaseCommandOptions:66,YieldDeleteMultiplePoliciesOptions:67,YieldIngestionDuplicationOptions:68,YieldPurgeOptions:69,YieldPurgeCleanupOptions:70,YieldPurgeWhatIfOptions:71,YieldPurgeWithPropertiesOptions:72,YieldPurgeTableOptions:73,YieldShowPrincipalCommandOptions:74,YieldAlterFunctionEntitiesOptions:75,YieldAlterMergePolicyRetentionOptions:76,YieldAlterMergePolicyRetentionSoftDeleteDefinedOptions:77,YieldAlterTimeSpanPolicyOptions:78,YieldCreateOrAlterOptions:79,YieldShowFabricOptions:80,YieldRowStoreCreatePersistencyOptions:81,YieldSetDatabaseIngestorsNoneOptions:82,YieldSetTableIngestorsNoneOptions:83,YieldSuspendNodeControlCommandOptions:84},ctors:{init:function(){this.None=Kusto.Data.IntelliSense.RuleKind.None;this.Start=Kusto.Data.IntelliSense.RuleKind.Last}}}});Bridge.define(\"Kusto.Data.IntelliSense.AnalyzedCommand\",{fields:{Command:null,Context:null}});Bridge.define(\"Kusto.Data.IntelliSense.ApiKind\",{$kind:\"enum\",statics:{fields:{Query:0,AdminSyncCommand:1,AdminAsyncCommand:2}}});Bridge.define(\"Kusto.Data.IntelliSense.ApplyPolicy\",{statics:{fields:{NullApplyPolicy:null,AppendSpacePolicy:null,AppendPipePolicy:null,AppendStringLiteralArrayPolicy:null,StringComparisonPolicy:null,AppendCommaPolicy:null,AppendDoubleCommaPolicy:null,AppendSpaceStepBackPolicy:null,AppendSpaceAfterBracketPolicy:null,MoveAfterTheBracketPolicy:null,AppendAssignmentPolicy:null,AppendJoinClauseWithOpenningBracketPolicy:null,AppendJoinClauseWithoutOpenningBracketPolicy:null,AppendFindInClausePolicy:null,AppendSearchInClausePolicy:null,AppendFindInClauseWithoutOpenningBracketPolicy:null},ctors:{init:function(){var $t;this.NullApplyPolicy=($t=new Kusto.Data.IntelliSense.ApplyPolicy,$t.Text=\"\",$t);this.AppendSpacePolicy=($t=new Kusto.Data.IntelliSense.ApplyPolicy,$t.Text=\" \",$t);this.AppendPipePolicy=($t=new Kusto.Data.IntelliSense.ApplyPolicy,$t.Text=\" | \",$t);this.AppendStringLiteralArrayPolicy=($t=new Kusto.Data.IntelliSense.ApplyPolicy,$t.Text=' (\"\", \"\")',$t.OffsetPosition=2,$t.OffsetToken=\"(\",$t);this.StringComparisonPolicy=($t=new Kusto.Data.IntelliSense.ApplyPolicy,$t.Text=' \"\" ',$t.OffsetPosition=-2,$t);this.AppendCommaPolicy=($t=new Kusto.Data.IntelliSense.ApplyPolicy,$t.Text=\", \",$t.OffsetPosition=0,$t);this.AppendDoubleCommaPolicy=($t=new Kusto.Data.IntelliSense.ApplyPolicy,$t.Text=\", , \",$t.OffsetPosition=-2,$t);this.AppendSpaceStepBackPolicy=($t=new Kusto.Data.IntelliSense.ApplyPolicy,$t.Text=\" \",$t.OffsetPosition=-2,$t);this.AppendSpaceAfterBracketPolicy=($t=new Kusto.Data.IntelliSense.ApplyPolicy,$t.Text=\" \",$t.OffsetToken=\"(\",$t.OffsetPosition=1,$t);this.MoveAfterTheBracketPolicy=($t=new Kusto.Data.IntelliSense.ApplyPolicy,$t.Text=\"\",$t.OffsetToken=\")\",$t.OffsetPosition=1,$t);this.AppendAssignmentPolicy=($t=new Kusto.Data.IntelliSense.ApplyPolicy,$t.Text=\" = \",$t);this.AppendJoinClauseWithOpenningBracketPolicy=($t=new Kusto.Data.IntelliSense.ApplyPolicy,$t.OffsetPosition=-13,$t.Text=\" (\\r\\n    \\r\\n) on Key1 \",$t);this.AppendJoinClauseWithoutOpenningBracketPolicy=($t=new Kusto.Data.IntelliSense.ApplyPolicy,$t.OffsetPosition=-13,$t.Text=\"\\r\\n    \\r\\n) on Key1 \",$t);this.AppendFindInClausePolicy=($t=new Kusto.Data.IntelliSense.ApplyPolicy,$t.OffsetPosition=-8,$t.Text=\" () where \",$t);this.AppendSearchInClausePolicy=($t=new Kusto.Data.IntelliSense.ApplyPolicy,$t.OffsetPosition=-2,$t.Text=\" () \",$t);this.AppendFindInClauseWithoutOpenningBracketPolicy=($t=new Kusto.Data.IntelliSense.ApplyPolicy,$t.OffsetPosition=-8,$t.Text=\") where \",$t)}}},props:{Text:null,OffsetPosition:0,OffsetToken:null},ctors:{ctor:function(){this.$initialize()}}});Bridge.define(\"Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase\",{statics:{fields:{CommonRegexOptions:0,DefaultRegexOptions:0,s_isCommandRegex:null,s_firstWordAfterPipeRegex:null},ctors:{init:function(){this.CommonRegexOptions=16;this.DefaultRegexOptions=0;this.s_isCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_firstWordAfterPipeRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*(?<FirstWord>[\\\\w\\\\-]+)\\\\s+\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions)}},methods:{FindRules:function(rules,command,commandContext,lastPart,keywordFromCommand){var $t,r,hasKeywordMatch;$t=Bridge.getEnumerator(rules);try{while($t.moveNext())if((r=$t.Current,r.RequiredKeywords==null||!(r.RequiredKeywords.Count>0)||(hasKeywordMatch=!1,hasKeywordMatch=r.RequiresFullCommand?System.Linq.Enumerable.from(r.RequiredKeywords,System.String).any(function(keyword){return System.String.contains(command,keyword)}):!System.String.isNullOrEmpty(keywordFromCommand)&&r.RequiredKeywords.contains(keywordFromCommand),hasKeywordMatch))&&r.IsMatch(commandContext,r.RequiresFullCommand?command:lastPart))return r}finally{Bridge.is($t,System.IDisposable)&&$t.System$IDisposable$Dispose()}return null},FindLastStatement:function(statements){return System.String.isNullOrEmpty(statements)?\"\":System.Linq.Enumerable.from(Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.ParseAsStatements(statements,59,!1),System.String).lastOrDefault(null,null)},ParseAsStatements:function(input,delimeter,trimDelimeter){var result=new(System.Collections.Generic.List$1(System.String).ctor),currentStatementStart,chars,i,ch,eofString,len;if(System.String.isNullOrEmpty(input))return result;for(currentStatementStart=0,chars=System.String.toCharArray(input,0,input.length),i=0;i<chars.length;i=i+1|0)ch=chars[System.Array.index(i,chars)],!(ch===34|ch===39)||(i=Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.SkipToBalancedChar(chars,i+1|0,ch,System.Array.init([34,39],System.Char))),eofString=i===(chars.length-1|0),(ch===delimeter||eofString)&&(len=(i-currentStatementStart|0)+1|0,trimDelimeter&&ch===delimeter&&(len=len-1|0),len>0&&result.add(input.substr(currentStatementStart,len)),currentStatementStart=i+1|0);return result},SkipToBalancedChar:function(chars,start,balancedChar,recursionChars){for(var ch,i=start;i<chars.length;i=i+1|0){if(ch=chars[System.Array.index(i,chars)],ch===balancedChar)return i;System.Array.contains(recursionChars,ch,System.Char)&&(i=Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.SkipToBalancedChar(chars,i+1|0,ch,recursionChars))}return chars.length-1|0},GetApproximateCommandLastPart:function(command,lastPart,firstWordAfterPipe){var parts=System.String.split(command,[124].map(function(i){return String.fromCharCode(i)})),last=System.Linq.Enumerable.from(parts,System.String).lastOrDefault(null,null);if(lastPart.v=last,parts.length>1&&(lastPart.v=\"|\"+(last||\"\")),System.String.isNullOrEmpty(last)){firstWordAfterPipe.v=\"\";return}firstWordAfterPipe.v=Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.GetFirstWordAfterPipe(last)},GetFirstWordAfterPipe:function(input){var match=Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.s_firstWordAfterPipeRegex.match(input);return match.getGroups().getByName(\"FirstWord\").toString()}}},props:{Locker:null,GeneralRules:null,CommandRules:null,QueryParametersRules:null,DefaultRule:null,CommandToolTips:null,ContextConnection:null},ctors:{ctor:function(){this.$initialize();this.Locker={}}},methods:{TryMatchAnyRule:function(command,rule){var $t,$t1,analyzedCommand=this.AnalyzeCommand$1(command,null),commandContext=analyzedCommand.Context,firstWordAfterPipe={},lastPart={},isCommand,r,r1;if(Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.GetApproximateCommandLastPart(analyzedCommand.Command,lastPart,firstWordAfterPipe),isCommand=Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.s_isCommandRegex.isMatch(command),rule.v=null,isCommand){Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.PrivateTracer.Tracer.TraceVerbose(\"TryMatchAnyRule: start matching rules for commands rules\");$t=Bridge.getEnumerator(this.CommandRules);try{while($t.moveNext())if(r=$t.Current,r.IsMatch(commandContext,r.RequiresFullCommand?command:lastPart.v)){rule.v=r;break}}finally{Bridge.is($t,System.IDisposable)&&$t.System$IDisposable$Dispose()}}if(rule.v==null&&(Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.PrivateTracer.Tracer.TraceVerbose(\"TryMatchAnyRule: start matching rules for general rules\"),rule.v=Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.FindRules(this.GeneralRules,command,commandContext,lastPart.v,firstWordAfterPipe.v)),rule.v==null){Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.PrivateTracer.Tracer.TraceVerbose(\"TryMatchAnyRule: start matching rules for query parameters rules\");$t1=Bridge.getEnumerator(this.QueryParametersRules);try{while($t1.moveNext())if(r1=$t1.Current,r1.IsMatch(commandContext,r1.RequiresFullCommand?command:lastPart.v)){rule.v=r1;break}}finally{Bridge.is($t1,System.IDisposable)&&$t1.System$IDisposable$Dispose()}}return rule.v!=null&&rule.v.IsContextual?(Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.PrivateTracer.Tracer.TraceVerbose(\"TryMatchAnyRule: rule {0} was found\",[Bridge.box(rule.v.Kind,System.Int32)]),this.UpdateProviderAvailableEntities(command,commandContext),Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.PrivateTracer.Tracer.TraceVerbose(\"TryMatchAnyRule: Entities were updated\",[Bridge.box(rule.v.Kind,System.Int32)])):Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.PrivateTracer.Tracer.TraceVerbose(\"TryMatchAnyRule: no rule was found\"),rule.v!=null},TryMatchSpecificRule:function(command,commandContext,ruleKind,rule){rule.v=null;var isCommand=Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.s_isCommandRegex.isMatch(command);return isCommand&&(rule.v=System.Linq.Enumerable.from(this.CommandRules,Kusto.Data.IntelliSense.IntelliSenseRule).firstOrDefault(function(r){return r.Kind===ruleKind&&r.IsMatch(commandContext,command)},null)),rule.v==null&&(rule.v=System.Linq.Enumerable.from(this.GeneralRules,Kusto.Data.IntelliSense.IntelliSenseRule).firstOrDefault(function(r){return r.Kind===ruleKind&&r.IsMatch(commandContext,command)},null)),rule.v!=null&&rule.v.IsContextual&&this.UpdateProviderAvailableEntities(command,commandContext),rule.v!=null},SetQueryParametersRule:function(queryParameters){},Initialize:function(){this.CommandRules=new(System.Collections.Generic.List$1(Kusto.Data.IntelliSense.IntelliSenseRule).ctor);this.GeneralRules=new(System.Collections.Generic.List$1(Kusto.Data.IntelliSense.IntelliSenseRule).ctor);this.CommandToolTips=new(System.Collections.Generic.List$1(Kusto.Data.IntelliSense.IntelliSenseCommandTip).ctor);this.QueryParametersRules=new(System.Collections.Generic.List$1(Kusto.Data.IntelliSense.IntelliSenseRule).ctor)}}});Bridge.define(\"Kusto.Data.IntelliSense.CMRuleKind\",{$kind:\"enum\",statics:{fields:{None:0,Start:0,YieldServiceCancelMaintenance:0,YieldServiceMoveToMaintenance:1,YieldShowRegionsByHosters:2,YieldShowTridentCmServices:3,YieldAdminCommandsOptions:4,YieldPipeOptions:5,YieldOperatorsAfterPipe:6,YieldShowCommandOptions:7,YieldsAllocateVirtualClusterOptions:8,YieldShowFabricCommandOptions:9,YieldShowAccountCommandOptions:10,YieldShowAccountsKeywordOptions:11,YieldMoveAccountCommandOptions:12,YieldMoveAccountSubscriptionCommandOptions:13,YieldMoveCommandOptions:14,YieldMigrateCommandOptions:15,YieldAlterCommandOptions:16,YieldAddCommandOptions:17,YieldDropCommandOptions:18,YieldRemoveCommandOptions:19,YieldCreateCommandOptions:20,YieldCreateExternalCommandOptions:21,YieldDeleteCommandOptions:22,YieldDetachCommandOptions:23,YieldCheckCommandOptions:24,YieldSetCommandOptions:25,YieldRegisterCommandOptions:26,YieldPutCommandOptions:27,YieldListCommandOptions:28,YieldListKustoPoolsServicesCommandPropertiesSuffix:29,YieldSyncCommandOptions:30,YieldServiceKeywordOptions:31,YieldServiceOrClusterKeywordOptions:32,YieldStorageAccountsKeywordOptions:33,YieldIngestLogsIntoKeywordsOptions:34,YieldInServiceKeywordOptions:35,YieldShowClusterKeywordOptions:36,YieldOperationsKeywordOptions:37,YieldOrchestrationKeywordOptions:38,YieldOrchestrationTaskHubKeywordOptions:39,YieldPcCodeKeywordOptions:40,YieldsAlterServiceConfigurationKeywordOptions:41,YieldFromAccountKeywordOptions:42,YieldShowAuditLogCommandOptions:43,YieldShowAuditLogFromCommandOptions:44,YieldShowCmServiceCommandOptions:45,YieldShowClusterClientOptions:46,YieldShowClusterClientSubscriptionCommandOptions:47,YieldShowClusterClusterNamePrincipalCommandOptions:48,YieldShowServicesCompletionKeywordsOptions:49,YieldConfigurationPropertySetKeywordOptions:50,YieldConfigurationPropertyDropKeywordOptions:51,YieldToStringKeywordOptions:52,YieldToKeywordOptions:53,YieldConfigurationPropertyWithConsentKeywordOptions:54,YieldAccountAlterOperationsKeywordOptions:55,YieldAccountAddOperationsKeywordOptions:56,YieldAccountRemoveOperationsKeywordOptions:57,YieldAccountSetOperationsKeywordOptions:58,YieldAccountRenameOperationsKeywordOptions:59,YieldServiceAlterOperationsKeywordOptions:60,YieldMetadataKeywordOptions:61,YieldSummaryKeywordOptions:62,YieldSummaryOrMetadataKeywordOptions:63,YieldDatabaseOrAccountMetadataKeywordOptions:64,YieldAccountNames:65,YieldDmServiceAddKeywordOptions:66,YieldDmServiceDropKeywordOptions:67,YieldDmServiceAlterKeywordOptions:68,YieldDmServiceAlterSettingsOptions:69,YieldDmServiceShowKeywordOptions:70,YieldServicesNames:71,YieldTridentClusterUpdate:72,YieldServicesNamesCombinedWithOptions:73,YieldTargetServiceOptions:74,YieldWithPropertiesSuffix:75,YieldWithEventHubPropertiesSuffix:76,YieldWithCosmosDbDataConnectionPropertiesSuffix:77,YieldInstallCommandOptions:78,YieldReinstallCommandOptions:79,YieldUninstallServiceCommandOptions:80,YieldUninstallCommandOptions:81,YieldUpdateCommandOptions:82,YieldServiceUpdateCommandOptions:83,YieldCheckinCommandOptions:84,YieldMigrateServiceCommandOptions:85,YieldMigrateClusterCommandOptions:86,YieldFromServiceKeywordOptions:87,YieldDatabaseMoveFromServiceCommandOptions:88,YieldSetClusterPrincipalsCommandOptions:89,YieldAddClusterPrincipalsCommandOptions:90,YieldDropClusterPrincipalsCommandOptions:91,YieldAddClusterJitPrincipalsCommandOptions:92,YieldDropClusterJitPrincipalsCommandOptions:93,YieldSetClusterPrincipalsNoneOptions:94,YieldDropAccountPrincipalsCommandOptions:95,YieldDatabaseCreateCommandOptions:96,YieldServiceCreateCommandOptions:97,YieldShowPrincipalRolesCommandOptions:98,YieldAddKeywordOptions:99,YieldAlterServiceConfigurationPropertiesOptions:100,YieldAlterServiceConfigurationCommandOptions:101,YieldMoveServiceConfigurationCommandOptions:102,YieldAddServiceServiceNameOptions:103,YieldLoadBalancerKeywordOptions:104,YieldOperationKeywordOptions:105,YieldShowSubscriptionCommandOptions:106,YieldShowServiceSecurityRulesCommandOptions:107,YieldKeysCommandOptions:108,YieldKeyTypesCommandOptions:109,YieldAlterServiceStorageAccountsCommandOptions:110,YieldCmNotifyCommandOptions:111,YieldExecuteCommandOptions:112,YieldExecuteJobCommandOptions:113,YieldGenerateCommandOptions:114,YieldPublishCommandOptions:115,YieldSkuAvailabilityPrefix:116,YieldSkuAvailabilityCommandValues:117,YieldSkuAvailabilityPropertiesSuffix:118,YieldServiceRegenerateSuffix:119,YieldVersionKeywordOptions:120,YieldExportCommandOptions:121,YieldExportPackageForOptions:122,YieldExportPackageForServiceTypeOptions:123,YieldSharedIdentity:124,YieldSetRegionVisibility:125,YieldRegisterFeature:126,YieldBillingServiceCreateResources:127,YieldPublishServiceCommandOptions:128,YieldResultsKeywordOptions:129,YieldUnPublishCommandOptions:130,YieldUnPublishServiceCommandOptions:131,YieldRotateCommandOptions:132,YieldRotateServiceCommandOptions:133,YieldCreateFollowerDatabaseInServiceCommandOptions:134,YieldColumnNamesAfterPipeCommandOptions:135,YieldPutClientSubscriptionsNotification:136,YieldDatabaseKeywordOptions:137,YieldSyncKustoPoolRbacCommandOptions:138,YieldTridentServiceShowByResourceId:139,YieldSyncKeyVaultCertificate:140,YieldRegionKeyVaultRotateCertificate:141,YieldShowResourceCommandOptions:142,YieldShowResourceMetricsCommandPropertiesSuffix:143,YieldWithUnallocatedVirtualClustersPoolScaleSuffix:144,YieldShowAzureMonitorManifestCommandPropertiesSuffix:145,YieldPublishAzureMonitorManifestCommandPropertiesSuffix:146,YieldCheckinAzureMonitorManifestCommandPropertiesSuffix:147,YieldMigrateVirtualClusterCommandOptions:148,YieldMigrateVirtualClusterEventHubStorageAccountCommandOptions:149,YieldScaleTridentClusterCommandSuffix:150,YieldAlterVirtualClusterLimitsLevelCommandOptions:151},ctors:{init:function(){this.None=Kusto.Data.IntelliSense.RuleKind.None;this.Start=Kusto.Data.IntelliSense.RuleKind.Last}}}});Bridge.define(\"Kusto.Data.IntelliSense.CompletionOption\",{props:{Kind:0,Value:null},ctors:{ctor:function(kind,value){this.$initialize();this.Kind=kind;this.Value=value}}});Bridge.define(\"Kusto.Data.IntelliSense.CompletionOptionCollection\",{fields:{m_materializedOptions:null},props:{Kind:0,Values:null,Priority:0},ctors:{ctor:function(kind,values,priority){priority===void 0&&(priority=0);this.$initialize();this.Kind=kind;this.Values=values;this.Priority=priority}},methods:{GetCompletionOptions:function(){return this.m_materializedOptions==null&&(this.m_materializedOptions=System.Linq.Enumerable.from(this.Values,System.String).select(Bridge.fn.bind(this,$asm.$.Kusto.Data.IntelliSense.CompletionOptionCollection.f1)).ToArray(Kusto.Data.IntelliSense.CompletionOption)),this.m_materializedOptions}}});Bridge.ns(\"Kusto.Data.IntelliSense.CompletionOptionCollection\",$asm.$);Bridge.apply($asm.$.Kusto.Data.IntelliSense.CompletionOptionCollection,{f1:function(o){return new Kusto.Data.IntelliSense.CompletionOption(this.Kind,o)}});Bridge.define(\"Kusto.Data.IntelliSense.ContextOperation\",{$kind:\"enum\",statics:{fields:{None:0,Union:1,Intersect:2}}});Bridge.define(\"Kusto.Data.IntelliSense.IntelliSenseRule\",{props:{Kind:0,RequiredKeywords:null,AfterApplyPolicies:null,BeforeApplyPolicies:null,DefaultAfterApplyPolicy:null,DefaultBeforeApplyPolicy:null},methods:{GetAfterApplyInfo:function(selectedOption){var policy={v:null};return this.AfterApplyPolicies!=null&&this.AfterApplyPolicies.tryGetValue(selectedOption,policy),policy.v||this.DefaultAfterApplyPolicy||Kusto.Data.IntelliSense.ApplyPolicy.NullApplyPolicy},GetBeforeApplyInfo:function(selectedOption){var policy={v:null};return this.BeforeApplyPolicies!=null&&this.BeforeApplyPolicies.tryGetValue(selectedOption,policy),policy.v||this.DefaultBeforeApplyPolicy||Kusto.Data.IntelliSense.ApplyPolicy.NullApplyPolicy}}});Bridge.define(\"Kusto.Data.IntelliSense.CslCommand\",{statics:{fields:{c_tabulation:null,s_newLineRegex:null,s_removeWhiteSpacesAfterPipeRegex:null,s_joinStartRegex:null,s_joinEndRegex:null,s_makeSeriesOperatorRegex:null,s_operatorRegex:null,s_operatorsNotRequiringFullEntitiesResolve:null,s_nameOrListRegex:null,s_hasAssignmentOperationRegex:null,s_startsWithAlpha:null},ctors:{init:function(){this.c_tabulation=\"    \";this.s_newLineRegex=new System.Text.RegularExpressions.Regex.ctor(\"[\\\\n\\\\r]\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_removeWhiteSpacesAfterPipeRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\|\\\\s+\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.DefaultRegexOptions);this.s_joinStartRegex=new System.Text.RegularExpressions.Regex.ctor(\"(?<JoinOpPart>^\\\\s*\\\\|\\\\s*join\\\\s+(kind\\\\s*=\\\\s*\\\\w+\\\\s*)?)(?<Bracket>\\\\()?(?<PostJoinPart>.+$)\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_joinEndRegex=new System.Text.RegularExpressions.Regex.ctor(\"(?!^.*\\\\bmake-series\\\\b.*$)((?<InnerJoinPart>^.*?)(?<Bracket>\\\\)?)\\\\s*\\\\b(?<JoinOnPart>on\\\\s+.+))\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_makeSeriesOperatorRegex=new System.Text.RegularExpressions.Regex.ctor(\"\\\\bmake-series\\\\b\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.DefaultRegexOptions);this.s_operatorRegex=new System.Text.RegularExpressions.Regex.ctor(\"\\\\|\\\\s*(?<Operator>[\\\\w-]+)\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.DefaultRegexOptions);this.s_operatorsNotRequiringFullEntitiesResolve=$asm.$.Kusto.Data.IntelliSense.CslCommand.f1(new(System.Collections.Generic.HashSet$1(System.String).ctor));this.s_nameOrListRegex=\"(?:\\\\w+)|(?:\\\\((\\\\w+)(,\\\\s*\\\\w+)*\\\\))\";this.s_hasAssignmentOperationRegex=new System.Text.RegularExpressions.Regex.ctor(\"(^\\\\s*\\\\|\\\\s*(extend|parse|summarize|project|mvexpand|mv-expand|make-series|project-rename)\\\\s+\"+(Kusto.Data.IntelliSense.CslCommand.s_nameOrListRegex||\"\")+\")|(^\\\\s*range)\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.DefaultRegexOptions);this.s_startsWithAlpha=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*[a-z]\",1)}},methods:{MakeTrivialCommandFromText:function(text){var $t,$t1;return $t=new Kusto.Data.IntelliSense.CslCommand,$t.m_commandParts=($t1=Kusto.Data.IntelliSense.CslCommandToken,System.Linq.Enumerable.from(System.Array.init([new Kusto.Data.IntelliSense.CslCommandToken(text,0,Kusto.Data.IntelliSense.CslCommandToken.Kind.CslCommandToken)],Kusto.Data.IntelliSense.CslCommandToken),$t1).toList($t1)),$t.Text=text,$t.Length=text.length,$t.AbsolutePositionBias=0,$t.RelativeStart=0,$t.ParseMode=Kusto.Data.IntelliSense.ParseMode.CommandTokensOnly,$t.IsRunnable=!System.String.isNullOrWhiteSpace(text),$t},UnionCommands:function(commands){var $t,firstCommand,result;return System.Linq.Enumerable.from(commands,Kusto.Data.IntelliSense.CslCommand).count()<2?System.Linq.Enumerable.from(commands,Kusto.Data.IntelliSense.CslCommand).firstOrDefault(null,null):(firstCommand=System.Linq.Enumerable.from(commands,Kusto.Data.IntelliSense.CslCommand).first(),result=($t=new Kusto.Data.IntelliSense.CslCommand,$t.m_tokens=System.Linq.Enumerable.from(commands,Kusto.Data.IntelliSense.CslCommand).selectMany($asm.$.Kusto.Data.IntelliSense.CslCommand.f2).toList(Kusto.Data.IntelliSense.CslCommandToken),$t.m_commandParts=System.Linq.Enumerable.from(commands,Kusto.Data.IntelliSense.CslCommand).selectMany($asm.$.Kusto.Data.IntelliSense.CslCommand.f3).toList(Kusto.Data.IntelliSense.CslCommandToken),$t.m_commentsParts=System.Linq.Enumerable.from(commands,Kusto.Data.IntelliSense.CslCommand).selectMany($asm.$.Kusto.Data.IntelliSense.CslCommand.f4).toList(Kusto.Data.IntelliSense.CslCommandToken),$t.m_clientDirectivesParts=System.Linq.Enumerable.from(commands,Kusto.Data.IntelliSense.CslCommand).selectMany($asm.$.Kusto.Data.IntelliSense.CslCommand.f5).toList(Kusto.Data.IntelliSense.CslCommandToken),$t.m_bracketParts=System.Linq.Enumerable.from(commands,Kusto.Data.IntelliSense.CslCommand).selectMany($asm.$.Kusto.Data.IntelliSense.CslCommand.f6).toList(Kusto.Data.IntelliSense.CslCommandToken),$t.Text=Bridge.toArray(System.Linq.Enumerable.from(commands,Kusto.Data.IntelliSense.CslCommand).selectMany($asm.$.Kusto.Data.IntelliSense.CslCommand.f7)).join(\"\"),$t.IsRunnable=System.Linq.Enumerable.from(commands,Kusto.Data.IntelliSense.CslCommand).any($asm.$.Kusto.Data.IntelliSense.CslCommand.f8),$t.RelativeStart=firstCommand.RelativeStart,$t.AbsolutePositionBias=firstCommand.AbsolutePositionBias,$t.ParseMode=firstCommand.ParseMode,$t),result.Length=result.Text.length,result)},NormalizeCommandPart:function(partValue){return partValue=partValue.trim(),Kusto.Data.IntelliSense.CslCommand.s_removeWhiteSpacesAfterPipeRegex.replace(partValue,\"| \")},AppendTabulatedText:function(sb,level,text){Kusto.Data.IntelliSense.CslCommand.AppendTabulations(sb,level);sb.append(text)},AppendTabulations:function(sb,level){if(!(level<=0))for(var j=0;j<level;j=j+1|0)sb.append(Kusto.Data.IntelliSense.CslCommand.c_tabulation)},ResolveOperatorContext:function(part){return part==null?\"\":System.String.indexOf(part.Text,\" on \")>0&&!Kusto.Data.IntelliSense.CslCommand.s_makeSeriesOperatorRegex.isMatch(part.Text)?\"\":Kusto.Data.IntelliSense.CslCommand.s_operatorRegex.match(part.Text).getGroups().getByName(\"Operator\").toString()},GetKnownEntities:function(rulesProvider,mapOfKnownEntities,mapOfOriginallyKnownEntities,part,commandBuilder,context,operatorContext,knownEntities,originallyKnownEntities){if((knownEntities.v=new(System.Collections.Generic.List$1(System.String).ctor),originallyKnownEntities.v=mapOfOriginallyKnownEntities.containsKey(context)?mapOfOriginallyKnownEntities.getItem(context):new(System.Collections.Generic.List$1(System.String).ctor),part==null)||Kusto.Data.IntelliSense.CslCommand.s_operatorsNotRequiringFullEntitiesResolve.contains(operatorContext))return mapOfKnownEntities.containsKey(context)&&(knownEntities.v=mapOfKnownEntities.getItem(context)),!1;var command=commandBuilder.toString();return rulesProvider.GetKnownEntities(command,context,mapOfOriginallyKnownEntities,knownEntities,originallyKnownEntities)},IsMatchingRegex:function(commandPart,opRegex){return System.String.isNullOrWhiteSpace(commandPart)?!1:opRegex.isMatch(commandPart)},StartsWithAlpha:function(text){return System.String.isNullOrWhiteSpace(text)?!1:Kusto.Data.IntelliSense.CslCommand.s_startsWithAlpha.isMatch(text)}}},fields:{m_tokens:null,m_commandParts:null,m_commentsParts:null,m_clientDirectivesParts:null,m_bracketParts:null,m_commandPartsParseStates:null},props:{CslExpressionStartPosition:{get:function(){return Kusto.Cloud.Platform.Utils.ExtendedEnumerable.SafeFastNone$1(Kusto.Data.IntelliSense.CslCommandToken,this.m_commandParts)?0:this.m_commandParts.getItem(0).RelativeStart}},CslExpressionLength:{get:function(){return Kusto.Cloud.Platform.Utils.ExtendedEnumerable.SafeFastNone$1(Kusto.Data.IntelliSense.CslCommandToken,this.m_commandParts)?0:System.Linq.Enumerable.from(this.m_commandParts,Kusto.Data.IntelliSense.CslCommandToken).last().RelativeEnd-this.m_commandParts.getItem(0).RelativeStart|0}},Tokens:{get:function(){return this.m_tokens}},CommandParts:{get:function(){return this.m_commandParts}},CommentParts:{get:function(){return this.m_commentsParts}},BracketParts:{get:function(){return this.m_bracketParts}},AllParts:{get:function(){var linqParts=0,result=null;return(Kusto.Cloud.Platform.Utils.ExtendedEnumerable.SafeFastAny$4(Kusto.Data.IntelliSense.CslCommandToken,this.m_commandParts)&&(linqParts=linqParts+1|0,result=this.m_commandParts),Kusto.Cloud.Platform.Utils.ExtendedEnumerable.SafeFastAny$4(Kusto.Data.IntelliSense.CslCommandToken,this.m_commentsParts)&&(linqParts=linqParts+1|0,result=result!=null?System.Linq.Enumerable.from(result,Kusto.Data.IntelliSense.CslCommandToken).union(this.m_commentsParts):Bridge.cast(this.m_commentsParts,System.Collections.Generic.IEnumerable$1(Kusto.Data.IntelliSense.CslCommandToken))),Kusto.Cloud.Platform.Utils.ExtendedEnumerable.SafeFastAny$4(Kusto.Data.IntelliSense.CslCommandToken,this.m_clientDirectivesParts)&&(linqParts=linqParts+1|0,result=result!=null?System.Linq.Enumerable.from(result,Kusto.Data.IntelliSense.CslCommandToken).union(this.m_clientDirectivesParts):Bridge.cast(this.m_clientDirectivesParts,System.Collections.Generic.IEnumerable$1(Kusto.Data.IntelliSense.CslCommandToken))),linqParts>1)?System.Linq.Enumerable.from(result,Kusto.Data.IntelliSense.CslCommandToken).orderBy($asm.$.Kusto.Data.IntelliSense.CslCommand.f9):result}},Text:null,RelativeStart:0,Length:0,RelativeEnd:{get:function(){return(this.RelativeStart+this.Length|0)-1|0}},AbsoluteStart:{get:function(){return this.AbsolutePositionBias+this.RelativeStart|0}},AbsoluteEnd:{get:function(){return this.AbsolutePositionBias+this.RelativeEnd|0}},AbsolutePositionBias:0,IsRunnable:!1,ParseMode:0,ContextCache:null},ctors:{ctor:function(){this.$initialize()}},methods:{FormatAsString:function(separator,traits){var $t,parts,part,partValue,wasHandled;if(Kusto.Cloud.Platform.Utils.ExtendedEnumerable.SafeFastNone$1(Kusto.Data.IntelliSense.CslCommandToken,this.m_commandParts))return\"\";parts=this.m_commandParts;System.Enum.hasFlag(traits,Bridge.box(Kusto.Data.IntelliSense.CslCommand.FormatTraits.IncludeComments,Kusto.Data.IntelliSense.CslCommand.FormatTraits,System.Enum.toStringFn(Kusto.Data.IntelliSense.CslCommand.FormatTraits)))&&Kusto.Cloud.Platform.Utils.ExtendedEnumerable.SafeFastAny$4(Kusto.Data.IntelliSense.CslCommandToken,this.m_commentsParts)&&(parts=System.Linq.Enumerable.from(parts,Kusto.Data.IntelliSense.CslCommandToken).union(this.m_commentsParts).union(this.m_clientDirectivesParts).orderBy($asm.$.Kusto.Data.IntelliSense.CslCommand.f10).toList(Kusto.Data.IntelliSense.CslCommandToken));var sb=new System.Text.StringBuilder,level={v:0},isFirstTime=!0;$t=Bridge.getEnumerator(parts);try{while($t.moveNext())part=$t.Current,partValue=Kusto.Data.IntelliSense.CslCommand.s_newLineRegex.replace(part.Value,\" \"),isFirstTime||sb.append(separator),isFirstTime=!1,Kusto.Data.IntelliSense.CslCommand.AppendTabulations(sb,level.v),wasHandled=!1,!wasHandled&&System.Enum.hasFlag(traits,Bridge.box(Kusto.Data.IntelliSense.CslCommand.FormatTraits.IncludeComments,Kusto.Data.IntelliSense.CslCommand.FormatTraits,System.Enum.toStringFn(Kusto.Data.IntelliSense.CslCommand.FormatTraits)))&&(wasHandled=this.HandleCommentsAndClientDirectives(separator,sb,level,part,partValue)),!wasHandled&&System.Enum.hasFlag(traits,Bridge.box(Kusto.Data.IntelliSense.CslCommand.FormatTraits.TabulateOnFunctionBoundaries,Kusto.Data.IntelliSense.CslCommand.FormatTraits,System.Enum.toStringFn(Kusto.Data.IntelliSense.CslCommand.FormatTraits)))&&(wasHandled=this.HandleFunctions(separator,sb,level,part)),!wasHandled&&System.Enum.hasFlag(traits,Bridge.box(Kusto.Data.IntelliSense.CslCommand.FormatTraits.TabulateOnJoins,Kusto.Data.IntelliSense.CslCommand.FormatTraits,System.Enum.toStringFn(Kusto.Data.IntelliSense.CslCommand.FormatTraits)))&&(wasHandled=this.HandleJoins(separator,sb,level,part,partValue)),wasHandled||sb.append(Kusto.Data.IntelliSense.CslCommand.NormalizeCommandPart(partValue))}finally{Bridge.is($t,System.IDisposable)&&$t.System$IDisposable$Dispose()}return sb.toString()},HandleCommentsAndClientDirectives:function(separator,sb,level,part,partValue){return Kusto.Cloud.Platform.Utils.ExtendedEnumerable.None$1(Kusto.Data.IntelliSense.CslCommandToken,System.Linq.Enumerable.from(this.m_commentsParts,Kusto.Data.IntelliSense.CslCommandToken).union(this.m_clientDirectivesParts),function(cp){return cp.AbsoluteStart===part.AbsoluteStart&&cp.AbsoluteEnd===part.AbsoluteEnd})?!1:(sb.append(partValue.trim()),!0)},HandleFunctions:function(separator,sb,level,part){var wasHandled=!1,processedStart=0,startRelativeIndex=System.String.indexOf(part.Value,String.fromCharCode(123)),startAbsoluteIndex=part.AbsoluteStart+startRelativeIndex|0,funcPrefix,endRelativeIndex,endAbsoluteIndex,boddy,funcSuffix,boddy1;return startRelativeIndex>=0&&Kusto.Cloud.Platform.Utils.ExtendedEnumerable.None$1(Kusto.Data.IntelliSense.CslCommandToken,this.m_tokens,function(t){return startAbsoluteIndex>=t.AbsoluteStart&&startAbsoluteIndex<=t.AbsoluteEnd})&&(funcPrefix=part.Value.substr(0,startRelativeIndex).trim(),funcPrefix=Kusto.Data.IntelliSense.CslCommand.s_newLineRegex.replace(funcPrefix,\" \"),sb.append(funcPrefix),sb.append(separator),sb.append(\"{\"),sb.append(separator),level.v=level.v+1|0,wasHandled=!0,processedStart=startRelativeIndex+1|0),endRelativeIndex=System.String.indexOf(part.Value,String.fromCharCode(125)),endAbsoluteIndex=part.AbsoluteStart+endRelativeIndex|0,endRelativeIndex>=0&&Kusto.Cloud.Platform.Utils.ExtendedEnumerable.None$1(Kusto.Data.IntelliSense.CslCommandToken,this.m_tokens,function(t){return endAbsoluteIndex>=t.AbsoluteStart&&endAbsoluteIndex<=t.AbsoluteEnd})&&startRelativeIndex<endRelativeIndex?(boddy=part.Value.substr(processedStart,endRelativeIndex-processedStart|0).trim(),funcSuffix=part.Value.substr(endRelativeIndex+1|0).trim(),funcSuffix=Kusto.Data.IntelliSense.CslCommand.s_newLineRegex.replace(funcSuffix,\" \"),wasHandled&&Kusto.Data.IntelliSense.CslCommand.AppendTabulations(sb,level.v),sb.append(boddy),sb.append(separator),sb.append(\"}\"),level.v=level.v-1|0,level.v<0&&(level.v=0),Kusto.Data.IntelliSense.CslCommand.AppendTabulatedText(sb,level.v,funcSuffix),wasHandled=!0):wasHandled&&(boddy1=part.Value.substr(processedStart).trim(),boddy1=Kusto.Data.IntelliSense.CslCommand.s_newLineRegex.replace(boddy1,\" \"),Kusto.Data.IntelliSense.CslCommand.AppendTabulatedText(sb,level.v,boddy1)),wasHandled},HandleJoins:function(separator,sb,level,part,partValue){var assumeJoinStartedWithBracket=!1,wasHandled=!1,remainingText=partValue,joinStartMatch=Kusto.Data.IntelliSense.CslCommand.s_joinStartRegex.match(remainingText),relativePosition=0,joinOpPart,joinEndMatch,tabLength,bracketClosed;if(joinStartMatch.getSuccess()&&(joinOpPart=joinStartMatch.getGroups().getByName(\"JoinOpPart\").toString(),sb.append(Kusto.Data.IntelliSense.CslCommand.NormalizeCommandPart(joinOpPart)),sb.append(separator),assumeJoinStartedWithBracket=!System.String.isNullOrEmpty(joinStartMatch.getGroups().getByName(\"Bracket\").toString()),level.v=level.v+1|0,remainingText=joinStartMatch.getGroups().getByName(\"PostJoinPart\").toString(),relativePosition=joinStartMatch.getGroups().getByName(\"PostJoinPart\").getIndex(),wasHandled=!0),joinEndMatch=Kusto.Data.IntelliSense.CslCommand.s_joinEndRegex.match(remainingText),joinEndMatch.getSuccess()&&System.Linq.Enumerable.from(this.m_tokens,Kusto.Data.IntelliSense.CslCommandToken).any(function(t){return t.TokenKind===Kusto.Data.IntelliSense.CslCommandToken.Kind.SubOperatorToken&&Bridge.referenceEquals(t.Value,\"on\")&&t.AbsoluteStart===((joinEndMatch.getGroups().getByName(\"JoinOnPart\").getIndex()+part.AbsoluteStart|0)+relativePosition|0)})){var joinInnerPart=Kusto.Data.IntelliSense.CslCommand.NormalizeCommandPart(joinEndMatch.getGroups().getByName(\"InnerJoinPart\").toString()),onJoinPart=Kusto.Data.IntelliSense.CslCommand.NormalizeCommandPart(joinEndMatch.getGroups().getByName(\"JoinOnPart\").toString()),hasBracket=!System.String.isNullOrEmpty(joinEndMatch.getGroups().getByName(\"Bracket\").toString()),shouldCloseBracket=hasBracket||assumeJoinStartedWithBracket,openBrackets=Kusto.Cloud.Platform.Utils.ExtendedString.CountNonOverlappingSubstrings(joinInnerPart,\"(\"),closeBrackets=Kusto.Cloud.Platform.Utils.ExtendedString.CountNonOverlappingSubstrings(joinInnerPart,\")\");hasBracket&&openBrackets>closeBrackets&&(shouldCloseBracket=!1,joinInnerPart=(joinInnerPart||\"\")+\")\");joinStartMatch.getSuccess()&&(assumeJoinStartedWithBracket&&(Kusto.Data.IntelliSense.CslCommand.AppendTabulatedText(sb,level.v-1|0,\"(\"),sb.append(separator)),Kusto.Data.IntelliSense.CslCommand.AppendTabulations(sb,level.v));level.v=level.v-1|0;level.v<0&&(level.v=0);System.String.isNullOrEmpty(joinInnerPart)?(tabLength=Kusto.Data.IntelliSense.CslCommand.c_tabulation.length,sb.replace(Kusto.Data.IntelliSense.CslCommand.c_tabulation,\"\",sb.getLength()-tabLength|0,tabLength),bracketClosed=!1,shouldCloseBracket&&(sb.append(\")\"),sb.append(separator),bracketClosed=!0),bracketClosed?Kusto.Data.IntelliSense.CslCommand.AppendTabulatedText(sb,level.v,Kusto.Data.IntelliSense.CslCommand.NormalizeCommandPart(onJoinPart)):sb.append(onJoinPart)):(sb.append(joinInnerPart),sb.append(separator),shouldCloseBracket&&(Kusto.Data.IntelliSense.CslCommand.AppendTabulatedText(sb,level.v,\")\"),sb.append(separator)),Kusto.Data.IntelliSense.CslCommand.AppendTabulatedText(sb,level.v,Kusto.Data.IntelliSense.CslCommand.NormalizeCommandPart(onJoinPart)));wasHandled=!0}else joinStartMatch.getSuccess()&&(assumeJoinStartedWithBracket&&(Kusto.Data.IntelliSense.CslCommand.AppendTabulatedText(sb,level.v-1|0,\"(\"),sb.append(separator)),Kusto.Data.IntelliSense.CslCommand.AppendTabulatedText(sb,level.v,Kusto.Data.IntelliSense.CslCommand.NormalizeCommandPart(remainingText)));return wasHandled},AcquireTokens:function(other){this.m_tokens=System.Linq.Enumerable.from(other.m_tokens,Kusto.Data.IntelliSense.CslCommandToken).select(Bridge.fn.bind(this,$asm.$.Kusto.Data.IntelliSense.CslCommand.f11)).toList(Kusto.Data.IntelliSense.CslCommandToken);this.m_commandParts=System.Linq.Enumerable.from(other.m_commandParts,Kusto.Data.IntelliSense.CslCommandToken).select(Bridge.fn.bind(this,$asm.$.Kusto.Data.IntelliSense.CslCommand.f11)).toList(Kusto.Data.IntelliSense.CslCommandToken);this.m_commentsParts=System.Linq.Enumerable.from(other.m_commentsParts,Kusto.Data.IntelliSense.CslCommandToken).select(Bridge.fn.bind(this,$asm.$.Kusto.Data.IntelliSense.CslCommand.f11)).toList(Kusto.Data.IntelliSense.CslCommandToken);this.m_clientDirectivesParts=System.Linq.Enumerable.from(other.m_clientDirectivesParts,Kusto.Data.IntelliSense.CslCommandToken).select(Bridge.fn.bind(this,$asm.$.Kusto.Data.IntelliSense.CslCommand.f11)).toList(Kusto.Data.IntelliSense.CslCommandToken);this.m_bracketParts=System.Linq.Enumerable.from(other.m_bracketParts,Kusto.Data.IntelliSense.CslCommandToken).select(Bridge.fn.bind(this,$asm.$.Kusto.Data.IntelliSense.CslCommand.f11)).toList(Kusto.Data.IntelliSense.CslCommandToken)},ParseTokens:function(rulesProvider,parseMode,previousCandidate){var tokens=new(System.Collections.Generic.List$1(Kusto.Data.IntelliSense.CslCommandToken).ctor),allowQueryParameters,indexer,recognizedTokens,commandParts,commentsParts,clientDirectivesPositions;if(System.String.isNullOrEmpty(this.Text)){this.m_tokens=tokens;return}rulesProvider!=null&&(rulesProvider.ResetState(),previousCandidate!=null&&Kusto.Cloud.Platform.Utils.ExtendedEnumerable.SafeFastAny$1(System.Collections.Generic.KeyValuePair$2(System.Int32,Kusto.Data.IntelliSense.KustoCommandContext),previousCandidate.ContextCache)&&(rulesProvider.ContextCache=new(System.Collections.Generic.Dictionary$2(System.Int32,Kusto.Data.IntelliSense.KustoCommandContext).$ctor1)(previousCandidate.ContextCache)));allowQueryParameters=rulesProvider!=null?rulesProvider.AllowQueryParameters:!1;indexer=new Kusto.Data.IntelliSense.CslCommandIndexer(allowQueryParameters);indexer.AntiTokenizers=new(System.Collections.Generic.HashSet$1(System.Char).$ctor1)(System.Array.init([45,95,40],System.Char));indexer.TokenStarters=System.Array.init([46],System.Char);indexer.TokenTerminators=new(System.Collections.Generic.HashSet$1(System.Char).$ctor1)(System.Array.init([40,46],System.Char));indexer.IndexText(this.Text);recognizedTokens=new(System.Collections.Generic.List$1(Kusto.Data.IntelliSense.CslCommandIndexer.TokenPosition).ctor);this.m_commandParts=new(System.Collections.Generic.List$1(Kusto.Data.IntelliSense.CslCommandToken).ctor);commandParts=indexer.GetCommandPartsPositions();this.AddCategorizedTokens(this.m_commandParts,null,commandParts,Kusto.Data.IntelliSense.CslCommandToken.Kind.CommandPartToken);this.m_commentsParts=new(System.Collections.Generic.List$1(Kusto.Data.IntelliSense.CslCommandToken).ctor);commentsParts=indexer.GetCommentsPositions();this.AddCategorizedTokens(this.m_commentsParts,null,commentsParts,Kusto.Data.IntelliSense.CslCommandToken.Kind.CommentToken);this.m_clientDirectivesParts=new(System.Collections.Generic.List$1(Kusto.Data.IntelliSense.CslCommandToken).ctor);clientDirectivesPositions=indexer.GetClientDirectivesPositions();this.AddCategorizedTokens(this.m_clientDirectivesParts,null,clientDirectivesPositions,Kusto.Data.IntelliSense.CslCommandToken.Kind.ClientDirectiveToken);this.m_bracketParts=new(System.Collections.Generic.List$1(Kusto.Data.IntelliSense.CslCommandToken).ctor);this.AddCategorizedTokens(this.m_bracketParts,null,indexer.GetBracketsPositions(),Kusto.Data.IntelliSense.CslCommandToken.Kind.BracketRangeToken);this.AddCategorizedTokens(tokens,recognizedTokens,commentsParts,Kusto.Data.IntelliSense.CslCommandToken.Kind.CommentToken);this.AddCategorizedTokens(tokens,recognizedTokens,clientDirectivesPositions,Kusto.Data.IntelliSense.CslCommandToken.Kind.ClientDirectiveToken);allowQueryParameters&&this.AddCategorizedTokens(tokens,recognizedTokens,indexer.GetQueryParametersPositions(),Kusto.Data.IntelliSense.CslCommandToken.Kind.QueryParametersToken);this.AddCategorizedTokens(tokens,recognizedTokens,indexer.GetStringLiteralsPositions(),Kusto.Data.IntelliSense.CslCommandToken.Kind.StringLiteralToken);this.AddCategorizedTokens(tokens,recognizedTokens,indexer.GetAllTokenPositions(Kusto.Data.IntelliSense.CslCommandParser.ControlCommandsTokens),Kusto.Data.IntelliSense.CslCommandToken.Kind.ControlCommandToken);this.AddCategorizedTokens(tokens,recognizedTokens,indexer.GetAllTokenPositions(Kusto.Data.IntelliSense.CslCommandParser.CslCommandsTokens),Kusto.Data.IntelliSense.CslCommandToken.Kind.CslCommandToken);this.AddCategorizedTokens(tokens,recognizedTokens,indexer.GetAllTokenPositions(Kusto.Data.IntelliSense.CslCommandParser.OperatorCommandTokens),Kusto.Data.IntelliSense.CslCommandToken.Kind.OperatorToken);this.AddCategorizedTokens(tokens,recognizedTokens,indexer.GetAllTokenPositions(Kusto.Data.IntelliSense.CslCommandParser.SubOperatorsTokens),Kusto.Data.IntelliSense.CslCommandToken.Kind.SubOperatorToken);this.AddCategorizedTokens(tokens,recognizedTokens,indexer.GetAllTokenPositions(Kusto.Data.IntelliSense.CslCommandParser.JoinKindTokens),Kusto.Data.IntelliSense.CslCommandToken.Kind.SubOperatorToken);this.AddCategorizedTokens(tokens,recognizedTokens,indexer.GetAllTokenPositions(Kusto.Data.IntelliSense.CslCommandParser.ReduceByKindTokens),Kusto.Data.IntelliSense.CslCommandToken.Kind.SubOperatorToken);this.AddCategorizedTokens(tokens,recognizedTokens,indexer.GetAllTokenPositions(Kusto.Data.IntelliSense.CslCommandParser.DataTypesTokens),Kusto.Data.IntelliSense.CslCommandToken.Kind.DataTypeToken);this.AddCategorizedTokens(tokens,recognizedTokens,indexer.GetAllTokenPositions(Kusto.Data.IntelliSense.CslCommandParser.FunctionsTokens,40),Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken);this.AddCategorizedTokens(tokens,recognizedTokens,indexer.GetAllTokenPositions(Kusto.Data.IntelliSense.CslCommandParser.PluginTokens,40),Kusto.Data.IntelliSense.CslCommandToken.Kind.PluginToken);rulesProvider!=null&&this.AddEntitiesTokens(rulesProvider,tokens,recognizedTokens,indexer,commandParts,previousCandidate);tokens.Sort$2($asm.$.Kusto.Data.IntelliSense.CslCommand.f12);this.ValidateTokensOutput(tokens,this.Text);parseMode===Kusto.Data.IntelliSense.ParseMode.TokenizeAllText&&(this.EnsureAllTextIsAnnotated(indexer,tokens,recognizedTokens),tokens.Sort$2($asm.$.Kusto.Data.IntelliSense.CslCommand.f12));this.m_tokens=tokens;rulesProvider!=null&&(this.ContextCache=rulesProvider.ContextCache)},ValidateTokensOutput:function(tokens,text){for(var t,tokenToRemove,$t,invalidTokens=new(System.Collections.Generic.List$1(Kusto.Data.IntelliSense.CslCommandToken).ctor),currentEnd=0,maxLen=text.length,i=0;i<System.Linq.Enumerable.from(tokens,Kusto.Data.IntelliSense.CslCommandToken).count();i=i+1|0)t=tokens.getItem(i),t.RelativeEnd<currentEnd||t.RelativeStart<currentEnd||t.RelativeEnd>maxLen?invalidTokens.add(t):currentEnd=t.RelativeEnd;$t=Bridge.getEnumerator(invalidTokens);try{while($t.moveNext())tokenToRemove=$t.Current,tokens.remove(tokenToRemove)}finally{Bridge.is($t,System.IDisposable)&&$t.System$IDisposable$Dispose()}},AddEntitiesTokens:function(rulesProvider,tokens,recognizedTokens,indexer,commandParts,refernceCommand){var i,prevPart,part,command,tableContext,calculatedColumns,availableTableColumns,newCalculatedColumns,result,prevCalculatedColumns,calculatedColumnTokens;this.AddCategorizedTokens(tokens,recognizedTokens,indexer.GetAllTokenPositions(rulesProvider.TableNames),Kusto.Data.IntelliSense.CslCommandToken.Kind.TableToken);this.m_commandPartsParseStates=new(System.Collections.Generic.List$1(Kusto.Data.IntelliSense.CslCommand.AddEntitiesTokensState).ctor);var commandBuilder=new System.Text.StringBuilder,letVariables=new(System.Collections.Generic.HashSet$1(System.String).$ctor1)(rulesProvider.FunctionNames),canUseReference=refernceCommand!=null,state=null,analyzedCommand=null;for(i=0;i<(System.Array.getCount(commandParts,Kusto.Data.IntelliSense.CslCommandIndexer.TokenPosition)+1|0);i=i+1|0){if(prevPart=i>0?System.Array.getItem(commandParts,i-1|0,Kusto.Data.IntelliSense.CslCommandIndexer.TokenPosition):null,part={v:i<System.Array.getCount(commandParts,Kusto.Data.IntelliSense.CslCommandIndexer.TokenPosition)?System.Array.getItem(commandParts,i,Kusto.Data.IntelliSense.CslCommandIndexer.TokenPosition):null},state=state!=null?state.Clone():new Kusto.Data.IntelliSense.CslCommand.AddEntitiesTokensState,part.v!=null&&commandBuilder.append(part.v.Text),canUseReference=!!(canUseReference&(part.v!=null&&refernceCommand!=null&&Kusto.Cloud.Platform.Utils.ExtendedEnumerable.SafeFastAny$2(Kusto.Data.IntelliSense.CslCommandToken,refernceCommand.CommandParts)&&Kusto.Cloud.Platform.Utils.ExtendedEnumerable.SafeFastAny$4(Kusto.Data.IntelliSense.CslCommand.AddEntitiesTokensState,refernceCommand.m_commandPartsParseStates)&&System.Linq.Enumerable.from(refernceCommand.m_commandPartsParseStates,Kusto.Data.IntelliSense.CslCommand.AddEntitiesTokensState).count()>i&&System.Linq.Enumerable.from(refernceCommand.CommandParts,Kusto.Data.IntelliSense.CslCommandToken).count()>i&&System.String.equals(part.v.Text,System.Linq.Enumerable.from(refernceCommand.CommandParts,Kusto.Data.IntelliSense.CslCommandToken).elementAt(i).Value))),canUseReference){var referencePart=System.Linq.Enumerable.from(refernceCommand.CommandParts,Kusto.Data.IntelliSense.CslCommandToken).elementAt(i),offset={v:part.v.Start-referencePart.RelativeStart|0},capturedTokens=System.Linq.Enumerable.from(refernceCommand.Tokens,Kusto.Data.IntelliSense.CslCommandToken).where(function($me,part){return function(t){return(t.TokenKind===Kusto.Data.IntelliSense.CslCommandToken.Kind.CalculatedColumnToken||t.TokenKind===Kusto.Data.IntelliSense.CslCommandToken.Kind.TableColumnToken||t.TokenKind===Kusto.Data.IntelliSense.CslCommandToken.Kind.TableToken||t.TokenKind===Kusto.Data.IntelliSense.CslCommandToken.Kind.LetVariablesToken)&&t.RelativeStart>=part.v.Start&&t.RelativeEnd<=part.v.End}}(this,part)).select(function($me,offset){return function(t){var clonedToken=Bridge.as(t.clone(),Kusto.Data.IntelliSense.CslCommandToken);return clonedToken.RelativeStart=clonedToken.RelativeStart+offset.v|0,clonedToken}}(this,offset)).ToArray(Kusto.Data.IntelliSense.CslCommandToken);tokens.AddRange(capturedTokens);recognizedTokens.AddRange(indexer.GetTokenPositionsInRange(System.Linq.Enumerable.from(capturedTokens,Kusto.Data.IntelliSense.CslCommandToken).select($asm.$.Kusto.Data.IntelliSense.CslCommand.f13),part.v.Start,part.v.End));this.AddLetStatementTokens(tokens,recognizedTokens,indexer,letVariables,part.v);state=refernceCommand.m_commandPartsParseStates.getItem(i).Clone();this.m_commandPartsParseStates.add(state);continue}if(part.v!=null&&this.AddLetStatementTokens(tokens,recognizedTokens,indexer,letVariables,part.v),analyzedCommand==null?(command=commandBuilder.toString(),analyzedCommand=rulesProvider.AnalyzeCommand$1(command,refernceCommand)):part.v!=null&&(analyzedCommand=rulesProvider.AnalyzeCommand(analyzedCommand,part.v.Text)),tableContext=analyzedCommand.Context,!tableContext.IsEmpty()){var operatorContext=Kusto.Data.IntelliSense.CslCommand.ResolveOperatorContext(part.v),knownEntities={},originallyKnownEntities={},wasFullyResolved=Kusto.Data.IntelliSense.CslCommand.GetKnownEntities(rulesProvider,state.MapOfKnownEntities,state.MapOfOriginallyKnownEntities,part.v,commandBuilder,tableContext,operatorContext,knownEntities,originallyKnownEntities);if(part.v!=null&&(rulesProvider.ResolveKnownEntitiesFromContext(tableContext),calculatedColumns=System.Linq.Enumerable.from(knownEntities.v,System.String).except(originallyKnownEntities.v),availableTableColumns=System.Linq.Enumerable.from(originallyKnownEntities.v,System.String).intersect(knownEntities.v),this.AddCategorizedTokens(tokens,recognizedTokens,indexer.GetTokenPositionsInRange(availableTableColumns,part.v.Start,part.v.End),Kusto.Data.IntelliSense.CslCommandToken.Kind.TableColumnToken),this.AddCategorizedTokens(tokens,recognizedTokens,indexer.GetTokenPositionsInRange(calculatedColumns,part.v.Start,part.v.End),Kusto.Data.IntelliSense.CslCommandToken.Kind.CalculatedColumnToken),this.AddCategorizedTokens(tokens,recognizedTokens,indexer.GetTokenPositionsInRange(rulesProvider.RemoteTableNames,part.v.Start,part.v.End),Kusto.Data.IntelliSense.CslCommandToken.Kind.TableToken)),!wasFullyResolved&&part.v!=null){newCalculatedColumns=new(System.Collections.Generic.List$1(System.String).ctor);result=rulesProvider.ResolveEntitiesFromCommand((part.v.Text||\"\")+\" | \",newCalculatedColumns,knownEntities.v);switch(result){case Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.ResolveResult.ReplaceEntities:knownEntities.v=newCalculatedColumns;break;case Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.ResolveResult.None:break;case Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.ResolveResult.AppendEntities:knownEntities.v=System.Linq.Enumerable.from(knownEntities.v,System.String).union(newCalculatedColumns).toList(System.String);break}}state.MapOfKnownEntities.setItem(tableContext,knownEntities.v);prevPart!=null&&Kusto.Data.IntelliSense.CslCommand.IsMatchingRegex(prevPart.Text,Kusto.Data.IntelliSense.CslCommand.s_hasAssignmentOperationRegex)&&state.MapOfPreviousCalculatedEntities.containsKey(tableContext)&&(prevCalculatedColumns=state.MapOfPreviousCalculatedEntities.getItem(tableContext),Kusto.Cloud.Platform.Utils.ExtendedEnumerable.SafeFastAny$4(System.String,prevCalculatedColumns)&&(calculatedColumnTokens=indexer.GetTokenPositionsInRange(prevCalculatedColumns,prevPart.Start,prevPart.End),System.Linq.Enumerable.from(calculatedColumnTokens,Kusto.Data.IntelliSense.CslCommandIndexer.TokenPosition).any()&&this.AddCategorizedTokens(tokens,recognizedTokens,calculatedColumnTokens,Kusto.Data.IntelliSense.CslCommandToken.Kind.CalculatedColumnToken)));state.MapOfPreviousCalculatedEntities.setItem(tableContext,System.Linq.Enumerable.from(knownEntities.v,System.String).except(originallyKnownEntities.v).toList(System.String));this.m_commandPartsParseStates.add(state)}}},AddLetStatementTokens:function(tokens,recognizedTokens,indexer,letVariables,part){var letVariable=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.ResolveLetVariable(part.Text);System.String.isNullOrEmpty(letVariable)||letVariables.add(letVariable);letVariables.Count>0&&this.AddCategorizedTokens(tokens,recognizedTokens,indexer.GetTokenPositionsInRange(letVariables,part.Start,part.End),Kusto.Data.IntelliSense.CslCommandToken.Kind.LetVariablesToken)},AddCategorizedTokens:function(target,recognizedTokenList,textTokens,tokenKind){recognizedTokenList!=null&&recognizedTokenList.AddRange(textTokens);target.AddRange(System.Linq.Enumerable.from(textTokens,Kusto.Data.IntelliSense.CslCommandIndexer.TokenPosition).select(Bridge.fn.bind(this,function(t){var $t;return $t=new Kusto.Data.IntelliSense.CslCommandToken(t.Text,this.RelativeStart,tokenKind),$t.Length=t.Length,$t.RelativeStart=t.Start,$t})))},EnsureAllTextIsAnnotated:function(indexer,tokens,recognizedTokens){var start,tokensCount,i,token,newTokenLen,tokenText,tokenText1;if(tokens!=null){for(this.AddUnrecognizedTokens(indexer,tokens,recognizedTokens),tokens.Sort$2($asm.$.Kusto.Data.IntelliSense.CslCommand.f12),start=0,tokensCount=tokens.Count,i=0;i<tokensCount;i=i+1|0)token=tokens.getItem(i),start<token.RelativeStart&&(newTokenLen=token.RelativeStart-start|0,newTokenLen>0&&(tokenText=this.Text.substr(start,newTokenLen),this.AddPlainOrUnrecognizedTokens(tokens,start,tokenText))),start=token.RelativeEnd;start<this.Length&&(tokenText1=this.Text.substr(start,this.Length-start|0),this.AddPlainOrUnrecognizedTokens(tokens,start,tokenText1))}},AddUnrecognizedTokens:function(indexer,tokens,recognizedTokens){var $t,unrecognizedTokens=indexer.GetUnrecognizedTokenPositions(recognizedTokens),t;$t=Bridge.getEnumerator(unrecognizedTokens,Kusto.Data.IntelliSense.CslCommandIndexer.TokenPosition);try{while($t.moveNext())t=$t.Current,this.AddPlainOrUnrecognizedTokens(tokens,t.Start,t.Text)}finally{Bridge.is($t,System.IDisposable)&&$t.System$IDisposable$Dispose()}},AddPlainOrUnrecognizedTokens:function(tokens,tokenStart,text){for(var prefixText,prefixToken,suffixText,suffixToken,$t,chars=System.String.toCharArray(text,0,text.length),startTextIndex=-1,endTextIndex=chars.length,i=0;i<chars.length;i=i+1|0)System.Char.isWhiteSpace(String.fromCharCode(chars[System.Array.index(i,chars)]))||(endTextIndex=i+1|0,startTextIndex=startTextIndex>=0?startTextIndex:i);startTextIndex>0?(prefixText=text.substr(0,startTextIndex),prefixToken=($t=new Kusto.Data.IntelliSense.CslCommandToken(prefixText,this.RelativeStart,Kusto.Data.IntelliSense.CslCommandToken.Kind.PlainTextToken),$t.Length=startTextIndex,$t.RelativeStart=tokenStart,$t),tokens.add(prefixToken)):startTextIndex=0;var tokenText=text.substr(startTextIndex,endTextIndex-startTextIndex|0),tokenKind=Kusto.Data.IntelliSense.CslCommand.StartsWithAlpha(tokenText)?Kusto.Data.IntelliSense.CslCommandToken.Kind.UnknownToken:Kusto.Data.IntelliSense.CslCommandToken.Kind.PlainTextToken,token=($t=new Kusto.Data.IntelliSense.CslCommandToken(tokenText,this.RelativeStart,tokenKind),$t.Length=tokenText.length,$t.RelativeStart=tokenStart+startTextIndex|0,$t);tokens.add(token);endTextIndex<chars.length&&(suffixText=text.substr(endTextIndex,chars.length-endTextIndex|0),suffixToken=($t=new Kusto.Data.IntelliSense.CslCommandToken(suffixText,this.RelativeStart,Kusto.Data.IntelliSense.CslCommandToken.Kind.PlainTextToken),$t.Length=suffixText.length,$t.RelativeStart=tokenStart+endTextIndex|0,$t),tokens.add(suffixToken))}}});Bridge.ns(\"Kusto.Data.IntelliSense.CslCommand\",$asm.$);Bridge.apply($asm.$.Kusto.Data.IntelliSense.CslCommand,{f1:function(_o1){return _o1.add(\"distinct\"),_o1.add(\"extend\"),_o1.add(\"project\"),_o1.add(\"project-rename\"),_o1.add(\"mvexpand\"),_o1.add(\"mv-expand\"),_o1.add(\"where\"),_o1.add(\"filter\"),_o1.add(\"parse\"),_o1.add(\"limit\"),_o1.add(\"count\"),_o1.add(\"order\"),_o1.add(\"sort\"),_o1.add(\"reduce\"),_o1.add(\"take\"),_o1.add(\"summarize\"),_o1.add(\"top\"),_o1.add(\"top-nested\"),_o1.add(\"top-hitters\"),_o1.add(\"render\"),_o1.add(\"fork\"),_o1.add(\"find\"),_o1.add(\"sample\"),_o1.add(\"sample-distinct\"),_o1.add(\"search\"),_o1.add(\"make-series\"),_o1},f2:function(c){return c.m_tokens},f3:function(c){return c.m_commandParts},f4:function(c){return c.m_commentsParts},f5:function(c){return c.m_clientDirectivesParts},f6:function(c){return c.m_bracketParts},f7:function(c){return c.Text},f8:function(c){return c.IsRunnable},f9:function(p){return p.AbsoluteStart},f10:function(p){return p.RelativeStart},f11:function(t){var token=Bridge.as(t.clone(),Kusto.Data.IntelliSense.CslCommandToken);return token.AbsolutePositionBias=this.RelativeStart,token},f12:function(x,y){return x.CompareTo(y)},f13:function(ct){return ct.Value}});Bridge.define(\"Kusto.Data.IntelliSense.CslCommand.AddEntitiesTokensState\",{$kind:\"nested class\",fields:{MapOfKnownEntities:null,MapOfPreviousCalculatedEntities:null,MapOfOriginallyKnownEntities:null},ctors:{init:function(){this.MapOfKnownEntities=new(System.Collections.Generic.Dictionary$2(Kusto.Data.IntelliSense.KustoCommandContext,System.Collections.Generic.List$1(System.String)).ctor);this.MapOfPreviousCalculatedEntities=new(System.Collections.Generic.Dictionary$2(Kusto.Data.IntelliSense.KustoCommandContext,System.Collections.Generic.List$1(System.String)).ctor);this.MapOfOriginallyKnownEntities=new(System.Collections.Generic.Dictionary$2(Kusto.Data.IntelliSense.KustoCommandContext,System.Collections.Generic.List$1(System.String)).ctor)}},methods:{Clone:function(){var $t;return $t=new Kusto.Data.IntelliSense.CslCommand.AddEntitiesTokensState,$t.MapOfKnownEntities=new(System.Collections.Generic.Dictionary$2(Kusto.Data.IntelliSense.KustoCommandContext,System.Collections.Generic.List$1(System.String)).$ctor1)(this.MapOfKnownEntities),$t.MapOfOriginallyKnownEntities=new(System.Collections.Generic.Dictionary$2(Kusto.Data.IntelliSense.KustoCommandContext,System.Collections.Generic.List$1(System.String)).$ctor1)(this.MapOfOriginallyKnownEntities),$t.MapOfPreviousCalculatedEntities=new(System.Collections.Generic.Dictionary$2(Kusto.Data.IntelliSense.KustoCommandContext,System.Collections.Generic.List$1(System.String)).$ctor1)(this.MapOfPreviousCalculatedEntities),$t}}});Bridge.define(\"Kusto.Data.IntelliSense.CslCommand.FormatTraits\",{$kind:\"nested enum\",statics:{fields:{None:0,IncludeComments:1,TabulateOnJoins:2,TabulateOnFunctionBoundaries:4}},$flags:!0});Bridge.define(\"Kusto.Data.IntelliSense.CslCommand.PrivateTracer\",{$kind:\"nested class\",statics:{fields:{Tracer:null},ctors:{init:function(){this.Tracer=new Kusto.Data.IntelliSense.CslCommand.PrivateTracer}}},methods:{TraceVerbose:function(format,list){list===void 0&&(list=[])}}});Bridge.define(\"Kusto.Data.IntelliSense.CslCommandIndexer\",{statics:{fields:{MultiLineRegexOptions:0,SingleLineRegexOptions:0,s_defaultCommentRegex:null,s_defaultClientDirectivesRegex:null,s_defaultStringLiteralsRegex:null,s_defaultQueryParametersRegex:null,s_matchingBrackets:null},ctors:{init:function(){this.MultiLineRegexOptions=2;this.SingleLineRegexOptions=16;this.s_defaultCommentRegex=new System.Text.RegularExpressions.Regex.ctor(\"(^\\\\s*//.*?(\\\\n|$))\",Kusto.Data.IntelliSense.CslCommandIndexer.MultiLineRegexOptions);this.s_defaultClientDirectivesRegex=new System.Text.RegularExpressions.Regex.ctor(\"(^\\\\s*#.*?(\\\\n|$))\",Kusto.Data.IntelliSense.CslCommandIndexer.MultiLineRegexOptions);this.s_defaultStringLiteralsRegex=new System.Text.RegularExpressions.Regex.ctor(\"(@?'.*?\\\\'|@?\\\\\\\".*?\\\\\\\")\",Kusto.Data.IntelliSense.CslCommandIndexer.MultiLineRegexOptions);this.s_defaultQueryParametersRegex=new System.Text.RegularExpressions.Regex.ctor(\"\\\\{([a-zA-Z]\\\\w+?)\\\\}\",Kusto.Data.IntelliSense.CslCommandIndexer.MultiLineRegexOptions);this.s_matchingBrackets=$asm.$.Kusto.Data.IntelliSense.CslCommandIndexer.f1(new(System.Collections.Generic.Dictionary$2(System.Char,System.Char).ctor))}},methods:{AddToCollection:function(text,chars,tokenStart,scanStart,target){var $t,endOfArray={},terminators=System.Array.init([10,13],System.Char),token=($t=new Kusto.Data.IntelliSense.CslCommandIndexer.TokenPosition,$t.Start=tokenStart,$t.End=Kusto.Data.IntelliSense.CslCommandIndexer.ReadTill(chars,scanStart+1|0,terminators,null,endOfArray),$t),len;return token.End>token.Start&&(endOfArray.v&&(token.End=token.End-1|0),len=(token.End-token.Start|0)+1|0,token.Text=text.substr(token.Start,len),target.add(token)),token.End},ReadTill:function(chars,i,terminators,escaping,endOfArray){endOfArray.v=!0;for(var foundTerminators=new(System.Collections.Generic.HashSet$1(System.Char).ctor);i<chars.length;i=i+1|0){if(System.Linq.Enumerable.from(foundTerminators,System.Char).any()){if(System.Array.contains(terminators,chars[System.Array.index(i,chars)],System.Char)&&!foundTerminators.contains(chars[System.Array.index(i,chars)])){foundTerminators.add(chars[System.Array.index(i,chars)]);continue}endOfArray.v=!1;i=i-1|0;break}if(System.Array.contains(terminators,chars[System.Array.index(i,chars)],System.Char)){foundTerminators.add(chars[System.Array.index(i,chars)]);continue}escaping!=null&&System.Linq.Enumerable.from(escaping,System.Char).any(function(t){return chars[System.Array.index(i,chars)]===t})&&(i=i+1|0)}return i>chars.length?chars.length:i},ReadVerbatimTill:function(chars,i,terminators,endOfArray){endOfArray.v=!0;for(var escapeSequence=0;i<chars.length;i=i+1|0)if(System.Array.contains(terminators,chars[System.Array.index(i,chars)],System.Char)&&(escapeSequence=escapeSequence+1|0,escapeSequence%2!=0&&i<(chars.length-1|0)&&!System.Array.contains(terminators,chars[System.Array.index(i+1|0,chars)],System.Char))){endOfArray.v=!1;break}return i},CaptureTokensUsingRegex:function(text,regexList,tokenList){var $t,$t1,$t2,$t3,commentRegex,matches,m,c,token;if(!Kusto.Cloud.Platform.Utils.ExtendedEnumerable.SafeFastNone$1(System.Text.RegularExpressions.Regex,regexList)){$t=Bridge.getEnumerator(regexList);try{while($t.moveNext()){commentRegex=$t.Current;matches=commentRegex.matches(text);$t1=Bridge.getEnumerator(matches);try{while($t1.moveNext()){m=Bridge.cast($t1.Current,System.Text.RegularExpressions.Match);$t2=Bridge.getEnumerator(m.getCaptures());try{while($t2.moveNext())c=Bridge.cast($t2.Current,System.Text.RegularExpressions.Capture),token=($t3=new Kusto.Data.IntelliSense.CslCommandIndexer.TokenPosition,$t3.Start=c.getIndex(),$t3.End=(c.getIndex()+c.getLength()|0)-1|0,$t3.Text=c.getValue(),$t3),tokenList.add(token)}finally{Bridge.is($t2,System.IDisposable)&&$t2.System$IDisposable$Dispose()}}}finally{Bridge.is($t1,System.IDisposable)&&$t1.System$IDisposable$Dispose()}}}finally{Bridge.is($t,System.IDisposable)&&$t.System$IDisposable$Dispose()}}}}},fields:{m_tokensAndPositions:null,m_commentTokenPositions:null,m_clientDirectivesTokenPositions:null,m_stringLiteralsPositions:null,m_queryParametersPositions:null,m_commandPartsPositions:null,m_bracketPartsPositions:null,m_sourceText:null,m_commentRegexCollection:null,m_clientDirectivesRegexCollection:null,m_stringLiteralsRegexCollection:null,m_queryParametersRegexCollection:null},props:{AntiTokenizers:null,TokenTerminators:null,TokenStarters:null},ctors:{init:function(){this.m_tokensAndPositions=new(System.Collections.Generic.Dictionary$2(System.String,System.Collections.Generic.List$1(Kusto.Data.IntelliSense.CslCommandIndexer.TokenPosition)).ctor);this.m_commentTokenPositions=new(System.Collections.Generic.List$1(Kusto.Data.IntelliSense.CslCommandIndexer.TokenPosition).ctor);this.m_clientDirectivesTokenPositions=new(System.Collections.Generic.List$1(Kusto.Data.IntelliSense.CslCommandIndexer.TokenPosition).ctor);this.m_stringLiteralsPositions=new(System.Collections.Generic.List$1(Kusto.Data.IntelliSense.CslCommandIndexer.TokenPosition).ctor);this.m_queryParametersPositions=new(System.Collections.Generic.List$1(Kusto.Data.IntelliSense.CslCommandIndexer.TokenPosition).ctor);this.m_commandPartsPositions=new(System.Collections.Generic.List$1(Kusto.Data.IntelliSense.CslCommandIndexer.TokenPosition).ctor);this.m_bracketPartsPositions=new(System.Collections.Generic.List$1(Kusto.Data.IntelliSense.CslCommandIndexer.TokenPosition).ctor);this.m_commentRegexCollection=new(System.Collections.Generic.List$1(System.Text.RegularExpressions.Regex).ctor);this.m_clientDirectivesRegexCollection=new(System.Collections.Generic.List$1(System.Text.RegularExpressions.Regex).ctor);this.m_stringLiteralsRegexCollection=new(System.Collections.Generic.List$1(System.Text.RegularExpressions.Regex).ctor);this.m_queryParametersRegexCollection=new(System.Collections.Generic.List$1(System.Text.RegularExpressions.Regex).ctor)},ctor:function(indexQueryParameters){this.$initialize();this.m_commentRegexCollection.add(Kusto.Data.IntelliSense.CslCommandIndexer.s_defaultCommentRegex);this.m_clientDirectivesRegexCollection.add(Kusto.Data.IntelliSense.CslCommandIndexer.s_defaultClientDirectivesRegex);this.m_stringLiteralsRegexCollection.add(Kusto.Data.IntelliSense.CslCommandIndexer.s_defaultStringLiteralsRegex);indexQueryParameters&&this.m_queryParametersRegexCollection.add(Kusto.Data.IntelliSense.CslCommandIndexer.s_defaultQueryParametersRegex)}},methods:{IndexText:function(text){var $t,chars,i,len,partText,bracketItem,bracketToken,isTokenEnd;this.m_tokensAndPositions.clear();this.m_sourceText=text;chars=System.String.toCharArray(text,0,text.length);this.DetectCommentsAndStringLiterals(text);var skipRanges=this.GetTokenLookupSkipRanges(text.length),tokenLookupState=Kusto.Data.IntelliSense.CslCommandIndexer.State.LookingForTokenStart,tokenBuilder=null,tokenPosition=null,commandPartPosition=null,bracketsStack=new(System.Collections.Generic.Stack$1(System.Tuple$2(System.Char,System.Int32)).ctor);for(i=0;i<chars.length;i=i+1|0){var isInsideTokenLookupSkipRange=skipRanges[System.Array.index(i,skipRanges)],isInsideCommentRange=System.Linq.Enumerable.from(this.m_commentTokenPositions,Kusto.Data.IntelliSense.CslCommandIndexer.TokenPosition).where(function(r){return i>=r.Start&&i<=r.End}).any(),c=chars[System.Array.index(i,chars)],isAfterWhiteSpace=i===0||System.Char.isWhiteSpace(String.fromCharCode(chars[System.Array.index(i-1|0,chars)])),canStartNewPart=!0;commandPartPosition!=null&&((c===124||c===59)&&!isInsideTokenLookupSkipRange||isInsideCommentRange||i===(chars.length-1|0))&&(i===(chars.length-1|0)||c===59?(commandPartPosition.End=i,canStartNewPart=!1):commandPartPosition.End=i-1|0,len=(commandPartPosition.End-commandPartPosition.Start|0)+1|0,len>1&&(partText=text.substr(commandPartPosition.Start,len),commandPartPosition.Text=partText,System.String.equals(partText,\"\\n\")||System.String.isNullOrWhiteSpace(partText)||this.m_commandPartsPositions.add(commandPartPosition)),commandPartPosition=null);commandPartPosition==null&&!isInsideCommentRange&&canStartNewPart&&(commandPartPosition=($t=new Kusto.Data.IntelliSense.CslCommandIndexer.TokenPosition,$t.Start=i,$t.End=i,$t));isInsideTokenLookupSkipRange||Kusto.Data.IntelliSense.CslCommandIndexer.s_matchingBrackets.containsKey(c)&&(bracketsStack.Count>0&&bracketsStack.Peek().Item1===c?(bracketItem=bracketsStack.Pop(),bracketToken=($t=new Kusto.Data.IntelliSense.CslCommandIndexer.TokenPosition,$t.Start=bracketItem.Item2,$t.End=i,$t),bracketToken.Text=text.substr(bracketToken.Start,(bracketToken.End-bracketToken.Start|0)+1|0),this.m_bracketPartsPositions.add(bracketToken)):bracketsStack.Push({Item1:Kusto.Data.IntelliSense.CslCommandIndexer.s_matchingBrackets.getItem(c),Item2:i}));switch(tokenLookupState){case Kusto.Data.IntelliSense.CslCommandIndexer.State.LookingForTokenStart:!isInsideTokenLookupSkipRange&&(this.IsPartOfTheToken(c)&&!this.IsTokenTerminator(c)||isAfterWhiteSpace&&this.IsTokenStarter(c))&&(tokenBuilder=new System.Text.StringBuilder,tokenPosition=($t=new Kusto.Data.IntelliSense.CslCommandIndexer.TokenPosition,$t.Start=i,$t.End=i,$t),tokenBuilder.append(String.fromCharCode(c)),tokenLookupState=Kusto.Data.IntelliSense.CslCommandIndexer.State.LookingForTokenEnd);break;case Kusto.Data.IntelliSense.CslCommandIndexer.State.LookingForTokenEnd:isTokenEnd=!1;!isInsideTokenLookupSkipRange&&this.IsPartOfTheToken(c)?this.IsTokenTerminator(c)?(tokenPosition.TokenTerminator=c,isTokenEnd=!0):(tokenBuilder.append(String.fromCharCode(c)),tokenPosition.End=i):isTokenEnd=!0;(isTokenEnd||i===(chars.length-1|0))&&(tokenPosition.Text=tokenBuilder.toString(),this.AddTokenPosition(tokenPosition),tokenLookupState=Kusto.Data.IntelliSense.CslCommandIndexer.State.LookingForTokenStart);break}}},GetTokenLookupSkipRanges:function(size){var ranges=new(System.Collections.Generic.List$1(System.Tuple$2(System.Int32,System.Int32)).ctor),i;ranges.AddRange(System.Linq.Enumerable.from(this.m_stringLiteralsPositions,Kusto.Data.IntelliSense.CslCommandIndexer.TokenPosition).select($asm.$.Kusto.Data.IntelliSense.CslCommandIndexer.f2));ranges.AddRange(System.Linq.Enumerable.from(this.m_commentTokenPositions,Kusto.Data.IntelliSense.CslCommandIndexer.TokenPosition).select($asm.$.Kusto.Data.IntelliSense.CslCommandIndexer.f2));ranges.AddRange(System.Linq.Enumerable.from(this.m_clientDirectivesTokenPositions,Kusto.Data.IntelliSense.CslCommandIndexer.TokenPosition).select($asm.$.Kusto.Data.IntelliSense.CslCommandIndexer.f2));ranges.AddRange(System.Linq.Enumerable.from(this.m_queryParametersPositions,Kusto.Data.IntelliSense.CslCommandIndexer.TokenPosition).select($asm.$.Kusto.Data.IntelliSense.CslCommandIndexer.f2));ranges.Sort$2($asm.$.Kusto.Data.IntelliSense.CslCommandIndexer.f3);var rIndex=0,currentSkipRange=System.Linq.Enumerable.from(ranges,System.Tuple$2(System.Int32,System.Int32)).firstOrDefault(null,null),result=System.Array.init(size,!1,System.Boolean);for(i=0;i<size&&currentSkipRange!=null;i=i+1|0)i>=currentSkipRange.Item1&&(result[System.Array.index(i,result)]=!0),currentSkipRange.Item2===i&&(currentSkipRange=System.Linq.Enumerable.from(ranges,System.Tuple$2(System.Int32,System.Int32)).elementAtOrDefault(rIndex=rIndex+1|0,null));return result},GetCommandPartsPositions:function(){return this.m_commandPartsPositions},GetCommentsPositions:function(){return this.m_commentTokenPositions},GetClientDirectivesPositions:function(){return this.m_clientDirectivesTokenPositions},GetStringLiteralsPositions:function(){return this.m_stringLiteralsPositions},GetQueryParametersPositions:function(){return this.m_queryParametersPositions},GetBracketsPositions:function(){return this.m_bracketPartsPositions},GetUnrecognizedTokenPositions:function(recognizedTokens){return System.Linq.Enumerable.from(this.m_tokensAndPositions.Values,System.Collections.Generic.List$1(Kusto.Data.IntelliSense.CslCommandIndexer.TokenPosition)).selectMany($asm.$.Kusto.Data.IntelliSense.CslCommandIndexer.f4).except(recognizedTokens)},GetTokenPositionsInRange:function(searchForTokens,rangeStart,rangeEnd){var $t,result=new(System.Collections.Generic.List$1(Kusto.Data.IntelliSense.CslCommandIndexer.TokenPosition).ctor),token,tokensInRange;if(Kusto.Cloud.Platform.Utils.ExtendedEnumerable.SafeFastNone$2(System.String,searchForTokens))return result;$t=Bridge.getEnumerator(searchForTokens,System.String);try{while($t.moveNext())(token=$t.Current,System.String.isNullOrEmpty(token))||this.m_tokensAndPositions.containsKey(token)&&(tokensInRange=System.Linq.Enumerable.from(this.m_tokensAndPositions.getItem(token),Kusto.Data.IntelliSense.CslCommandIndexer.TokenPosition).where(function(t){return t.Start>=rangeStart&&t.End<=rangeEnd}),Kusto.Cloud.Platform.Utils.ExtendedEnumerable.SafeFastAny$2(Kusto.Data.IntelliSense.CslCommandIndexer.TokenPosition,tokensInRange)&&result.AddRange(tokensInRange))}finally{Bridge.is($t,System.IDisposable)&&$t.System$IDisposable$Dispose()}return result},GetAllTokensSortedByPosition:function(){return Kusto.Cloud.Platform.Utils.ExtendedEnumerable.SafeFastNone$1(System.Collections.Generic.KeyValuePair$2(System.String,System.Collections.Generic.List$1(Kusto.Data.IntelliSense.CslCommandIndexer.TokenPosition)),this.m_tokensAndPositions)?null:System.Linq.Enumerable.from(this.m_tokensAndPositions,System.Collections.Generic.KeyValuePair$2(System.String,System.Collections.Generic.List$1(Kusto.Data.IntelliSense.CslCommandIndexer.TokenPosition))).selectMany($asm.$.Kusto.Data.IntelliSense.CslCommandIndexer.f5).orderBy($asm.$.Kusto.Data.IntelliSense.CslCommandIndexer.f6)},GetAllTokenPositions:function(tokens,tokenSuffix){var $t,result,token;if(tokenSuffix===void 0&&(tokenSuffix=0),result=new(System.Collections.Generic.List$1(Kusto.Data.IntelliSense.CslCommandIndexer.TokenPosition).ctor),Kusto.Cloud.Platform.Utils.ExtendedEnumerable.SafeFastNone$2(System.String,tokens))return result;$t=Bridge.getEnumerator(tokens,System.String);try{while($t.moveNext())token=$t.Current,this.m_tokensAndPositions.containsKey(token)&&result.AddRange(System.Linq.Enumerable.from(this.m_tokensAndPositions.getItem(token),Kusto.Data.IntelliSense.CslCommandIndexer.TokenPosition).where(function(t){return t.TokenTerminator===tokenSuffix}))}finally{Bridge.is($t,System.IDisposable)&&$t.System$IDisposable$Dispose()}return result},IsPartOfTheToken:function(c){return System.Char.isDigit(c)||System.Char.isLetter(c)||this.AntiTokenizers!=null&&this.AntiTokenizers.contains(c)},IsTokenTerminator:function(c){return this.TokenTerminators!=null&&this.TokenTerminators.contains(c)},IsTokenStarter:function(c){return this.TokenStarters!=null&&System.Array.contains(this.TokenStarters,c,System.Char)},DetectCommentsAndStringLiterals:function(text){Kusto.Data.IntelliSense.CslCommandIndexer.CaptureTokensUsingRegex(text,this.m_queryParametersRegexCollection,this.m_queryParametersPositions);Kusto.Cloud.Platform.Utils.ExtendedEnumerable.None(Kusto.Data.IntelliSense.CslCommandIndexer.TokenPosition,this.m_queryParametersPositions)?this.DetectCommentsAndStringLiterals_Simple(text):this.DetectCommentsAndStringLiterals_Complex(text)},DetectCommentsAndStringLiterals_Simple:function(text){for(var ch,chars=System.String.toCharArray(text,0,text.length),state=0,i=0;i<chars.length;i=i+1|0){ch=chars[System.Array.index(i,chars)];switch(state){case 0:ch===64?state=1:ch===39||ch===34?i=this.AddStringLiteralToken(text,chars,i,i,ch,!1):ch===47?state=2:ch===35&&(i=this.AddClientDirectiveToken(text,chars,i,i),state=0);break;case 1:(ch===39||ch===34)&&(i=this.AddStringLiteralToken(text,chars,i-1|0,i,ch,!0));state=0;break;case 2:ch===47&&(i=this.AddCommentToken(text,chars,i-1|0,i));state=0;break}}},AddCommentToken:function(text,chars,tokenStart,scanStart){return Kusto.Data.IntelliSense.CslCommandIndexer.AddToCollection(text,chars,tokenStart,scanStart,this.m_commentTokenPositions)},AddClientDirectiveToken:function(text,chars,tokenStart,scanStart){return Kusto.Data.IntelliSense.CslCommandIndexer.AddToCollection(text,chars,tokenStart,scanStart,this.m_clientDirectivesTokenPositions)},AddStringLiteralToken:function(text,chars,start,position,ch,ifVerbatim){var $t,endOfArray={},token=($t=new Kusto.Data.IntelliSense.CslCommandIndexer.TokenPosition,$t.Start=start,$t.End=ifVerbatim?Kusto.Data.IntelliSense.CslCommandIndexer.ReadVerbatimTill(chars,position+1|0,System.Array.init([ch],System.Char),endOfArray):Kusto.Data.IntelliSense.CslCommandIndexer.ReadTill(chars,position+1|0,System.Array.init([ch],System.Char),System.Array.init([92],System.Char),endOfArray),$t),len;return token.End>token.Start&&(endOfArray.v&&(token.End=token.End-1|0),len=(token.End-token.Start|0)+1|0,token.Text=text.substr(token.Start,len),this.m_stringLiteralsPositions.add(token)),token.End},DetectCommentsAndStringLiterals_Complex:function(text){var $t,i,slp,i1,slp1,i2,qpp,slp2,newSlp;for(Kusto.Data.IntelliSense.CslCommandIndexer.CaptureTokensUsingRegex(text,this.m_commentRegexCollection,this.m_commentTokenPositions),Kusto.Data.IntelliSense.CslCommandIndexer.CaptureTokensUsingRegex(text,this.m_clientDirectivesRegexCollection,this.m_clientDirectivesTokenPositions),i=this.m_queryParametersPositions.Count-1|0;i>=0;i=i-1|0)slp={v:this.m_queryParametersPositions.getItem(i)},System.Linq.Enumerable.from(this.m_commentTokenPositions,Kusto.Data.IntelliSense.CslCommandIndexer.TokenPosition).where(function($me,slp){return function(comment){return comment.Start<=slp.v.Start&&comment.End>=slp.v.End}}(this,slp)).any()&&this.m_queryParametersPositions.removeAt(i);for(Kusto.Data.IntelliSense.CslCommandIndexer.CaptureTokensUsingRegex(text,this.m_stringLiteralsRegexCollection,this.m_stringLiteralsPositions),i1=this.m_stringLiteralsPositions.Count-1|0;i1>=0;i1=i1-1|0)slp1={v:this.m_stringLiteralsPositions.getItem(i1)},System.Linq.Enumerable.from(this.m_commentTokenPositions,Kusto.Data.IntelliSense.CslCommandIndexer.TokenPosition).where(function($me,slp1){return function(comment){return comment.Start<=slp1.v.Start&&comment.End>=slp1.v.End}}(this,slp1)).any()&&this.m_stringLiteralsPositions.removeAt(i1);for(i2=this.m_queryParametersPositions.Count-1|0;i2>=0;i2=i2-1|0)qpp={v:this.m_queryParametersPositions.getItem(i2)},slp2=System.Linq.Enumerable.from(this.m_stringLiteralsPositions,Kusto.Data.IntelliSense.CslCommandIndexer.TokenPosition).where(function($me,qpp){return function(s){return s.Start<=qpp.v.Start&&s.End>=qpp.v.End}}(this,qpp)).firstOrDefault(null,null),slp2!=null&&(newSlp=($t=new Kusto.Data.IntelliSense.CslCommandIndexer.TokenPosition,$t.Start=qpp.v.End+1|0,$t.End=slp2.End,$t.Text=slp2.Text.substr((qpp.v.End-slp2.Start|0)+1|0),$t),slp2.End=qpp.v.Start-1|0,slp2.Text=slp2.Text.substr(0,slp2.Length),this.m_stringLiteralsPositions.add(newSlp))},AddTokenPosition:function(tokenPosition){this.m_tokensAndPositions.containsKey(tokenPosition.Text)||this.m_tokensAndPositions.add(tokenPosition.Text,new(System.Collections.Generic.List$1(Kusto.Data.IntelliSense.CslCommandIndexer.TokenPosition).ctor));this.m_tokensAndPositions.getItem(tokenPosition.Text).add(tokenPosition)}}});Bridge.ns(\"Kusto.Data.IntelliSense.CslCommandIndexer\",$asm.$);Bridge.apply($asm.$.Kusto.Data.IntelliSense.CslCommandIndexer,{f1:function(_o1){return _o1.add(40,41),_o1.add(41,40),_o1.add(91,93),_o1.add(93,91),_o1.add(123,125),_o1.add(125,123),_o1},f2:function(p){return{Item1:p.Start,Item2:p.End}},f3:function(r1,r2){return Bridge.compare(r1.Item1,r2.Item1)},f4:function(t){return t},f5:function(kvp){return kvp.value},f6:function(t){return t.Start}});Bridge.define(\"Kusto.Data.IntelliSense.CslCommandIndexer.State\",{$kind:\"nested enum\",statics:{fields:{LookingForTokenStart:0,LookingForTokenEnd:1,InsideComment:2,InsideStringLiteral:3}}});Bridge.define(\"Kusto.Data.IntelliSense.CslCommandIndexer.TokenPosition\",{$kind:\"nested class\",props:{Text:null,Start:0,End:0,TokenTerminator:0,Length:{get:function(){return(this.End-this.Start|0)+1|0}}},ctors:{ctor:function(){this.$initialize();this.TokenTerminator=0}}});Bridge.define(\"Kusto.Data.IntelliSense.CslCommandParser\",{statics:{fields:{ControlCommandsTokens:null,CslCommandsTokens:null,ChartRenderTypesTokens:null,ChartRenderKindTokens:null,SubOperatorsTokens:null,JoinKindTokens:null,ReduceByKindTokens:null,DataTypesTokens:null,ScalarFunctionsDateTimeTokens:null,ScalarFunctionsNoDateTimeTokens:null,SingleParameterFunctionsDateTimeTokens:null,ZeroParameterFunctionsNoDateTimeTokens:null,SingleParameterFunctionsNoDateTimeTokens:null,IntrinsicFunctionTokens:null,TwoParameterFunctionsTokens:null,ThreeParameterFunctionsTokens:null,ManyParametersFunctionsTokens:null,PromotedOperatorCommandTokens:null,ClientDirectiveTokens:null,OperatorCommandTokens:null,DataOperatorTokens:null,SummarizeAggregationSingleParameterTokens:null,SummarizeAggregationTwoParametersTokens:null,SummarizeAggregationThreeParametersTokens:null,SummarizeAggregationManyParametersTokens:null,MakeSeriesAggregationTokens:null,PluginTokens:null,DatetimeFunctionsTokens:null,ScalarFunctionsTokens:null,SingleParameterFunctionsTokens:null,SummarizeAggregationTokens:null,SummarizeAggregationAliasesTokens:null,SortedSummarizeAggregators:null,SortedMakeSeriesAggregationTokens:null,SortedDatetimeFunctions:null,SortedExtendFunctions:null,FunctionsTokens:null,SortedEvaluateFunctions:null,s_asyncSeeker:null,s_isCommentLineRegex:null},ctors:{init:function(){this.ControlCommandsTokens=System.Array.init([\".add\",\".alter\",\".alter-merge\",\".attach\",\".append\",\".create\",\".create-merge\",\".create-set\",\".create-or-alter\",\".define\",\".detach\",\".delete\",\".drop\",\".drop-pretend\",\".dup-next-ingest\",\".dup-next-failed-ingest\",\".ingest\",\".export\",\".load\",\".move\",\".purge\",\".purge-cleanup\",\".remove\",\".replace\",\".save\",\".set\",\".set-or-append\",\".set-or-replace\",\".show\",\".rename\",\".run\",\"async\",\"data\",\"into\",\"ifnotexists\",\"whatif\",\"compressed\",\"monitoring\",\"metadata\",\"folder\",\"docstring\",\"details\",\"hot\",\"records\",\"until\",\"as\",\"csv\",\"tsv\",\"json\",\"sql\",\"policy\",\"encoding\",\"retention\",\"merge\",\"policies\",\"update\",\"ingestiontime\",\"caching\",\"sharding\",\"callout\",\"restricted_view_access\",\"ingestionbatching\",\"query_weak_consistency\",\"partitioning\",\"softdelete\",\"harddelete\",\"rowstore\",\"rowstores\",\"seal\",\"writeaheadlog\",\"streamingingestion\",\"rowstore_references\",\"follower\"],System.String);this.CslCommandsTokens=System.Array.init([\"set\",\"let\",\"restrict\",\"access\",\"alias\",\"pattern\",\"declare\",\"query_parameters\"],System.String);this.ChartRenderTypesTokens=System.Linq.Enumerable.from(System.Array.init([\"columnchart\",\"barchart\",\"piechart\",\"timechart\",\"anomalychart\",\"linechart\",\"ladderchart\",\"pivotchart\",\"areachart\",\"stackedareachart\",\"scatterchart\",\"timepivot\",\"timeline\",\"card\",\"table\",\"list\",\"treemap\",\"plotly\"],System.String),System.String).orderBy($asm.$.Kusto.Data.IntelliSense.CslCommandParser.f1).ToArray(System.String);this.ChartRenderKindTokens=System.Array.init([\"default\",\"stacked\",\"stacked100\",\"unstacked\",\"map\"],System.String);this.SubOperatorsTokens=System.Linq.Enumerable.from(System.Array.init([\"like\",\"notlike\",\"contains\",\"notcontains\",\"!contains\",\"contains_cs\",\"!contains_cs\",\"startswith\",\"!startswith\",\"has\",\"!has\",\"has_cs\",\"!has_cs\",\"hasprefix\",\"!hasprefix\",\"hassuffix\",\"!hassuffix\",\"matches\",\"regex\",\"in\",\"!in\",\"endswith\",\"!endswith\",\"between\",\"!between\",\"extent\",\"database\",\"diagnostics\",\"jitmanagers\",\"admins\",\"basicauth\",\"cache\",\"capacity\",\"cluster\",\"continuous-export\",\"continuous-exports\",\"databases\",\"extents\",\"external\",\"journal\",\"memory\",\"extentcontainers\",\"viewers\",\"unrestrictedviewers\",\"tags\",\"prettyname\",\"blockedprincipals\",\"failed\",\"operations\",\"password\",\"principal\",\"principals\",\"settings\",\"schema\",\"table\",\"tables\",\"user\",\"users\",\"ingestors\",\"monitors\",\"version\",\"roles\",\"fabric\",\"locks\",\"service\",\"services\",\"nodes\",\"unallocated\",\"subscriptions\",\"nonregistered\",\"packages\",\"configuration\",\"commands\",\"commands-and-queries\",\"queries\",\"query\",\"function\",\"functions\",\"by\",\"on\",\"of\",\"true\",\"false\",\"and\",\"or\",\"asc\",\"desc\",\"nulls\",\"last\",\"first\",\"with\",\"withsource\",\"kind\",\"flags\",\"from\",\"to\",\"step\",\"ingestion\",\"failures\",\"mapping\",\"mappings\",\"geneva\",\"eventhub\",\"source\",\"sources\",\"types\",\"application\",\"period\",\"reason\",\"title\"],System.String),System.String).union(Kusto.Data.IntelliSense.CslCommandParser.ChartRenderTypesTokens).union(Kusto.Data.IntelliSense.CslCommandParser.ChartRenderKindTokens).distinct().ToArray(System.String);this.JoinKindTokens=System.Array.init([\"anti\",\"inner\",\"innerunique\",\"fullouter\",\"leftanti\",\"leftantisemi\",\"leftouter\",\"leftsemi\",\"rightanti\",\"rightantisemi\",\"rightsemi\",\"rightouter\"],System.String);this.ReduceByKindTokens=System.Array.init([\"mining\"],System.String);this.DataTypesTokens=System.Array.init([\"timespan\",\"datetime\",\"int\",\"long\",\"real\",\"string\",\"bool\",\"double\",\"dynamic\",\"decimal\",\"guid\"],System.String);this.ScalarFunctionsDateTimeTokens=System.Array.init([\"now\",\"ago\",\"datetime\",\"ingestion_time\"],System.String);this.ScalarFunctionsNoDateTimeTokens=System.Array.init([\"time\",\"timespan\",\"dynamic\",\"decimal\"],System.String);this.SingleParameterFunctionsDateTimeTokens=System.Array.init([\"todatetime\",\"between\",\"!between\"],System.String);this.ZeroParameterFunctionsNoDateTimeTokens=System.Array.init([\"row_number\",\"extent_id\",\"extent_tags\",\"pi\",\"pack_all\",\"rowstore_ordinal_range\"],System.String);this.SingleParameterFunctionsNoDateTimeTokens=System.Array.init([\"strlen\",\"tostring\",\"toupper\",\"tolower\",\"typeof\",\"reverse\",\"parsejson\",\"parse_json\",\"parse_xml\",\"parse_csv\",\"tobool\",\"toboolean\",\"todynamic\",\"toobject\",\"toint\",\"tolong\",\"toguid\",\"todouble\",\"toreal\",\"totimespan\",\"tohex\",\"todecimal\",\"isempty\",\"isnotempty\",\"isnull\",\"isnotnull\",\"isnan\",\"isinf\",\"isfinite\",\"dayofweek\",\"dayofmonth\",\"dayofyear\",\"week_of_year\",\"monthofyear\",\"sqrt\",\"rand\",\"log\",\"log10\",\"log2\",\"exp\",\"exp2\",\"exp10\",\"abs\",\"degrees\",\"radians\",\"sign\",\"sin\",\"cos\",\"tan\",\"asin\",\"acos\",\"atan\",\"cot\",\"getmonth\",\"getyear\",\"array_length\",\"gettype\",\"bag_keys\",\"cursor_after\",\"gamma\",\"loggamma\",\"dcount_hll\",\"parse_ipv4\",\"parse_url\",\"parse_path\",\"parse_version\",\"parse_urlquery\",\"url_encode\",\"url_decode\",\"binary_not\",\"not\",\"toscalar\",\"materialize\",\"series_stats\",\"series_fit_line\",\"series_fit_2lines\",\"series_stats_dynamic\",\"series_fit_line_dynamic\",\"series_fit_2lines_dynamic\",\"base64_encodestring\",\"base64_decodestring\",\"hash_sha256\",\"ceiling\",\"string_size\",\"isascii\",\"isutf8\",\"geo_geohash_to_central_point\"],System.String);this.IntrinsicFunctionTokens=System.Array.init([\"cluster\",\"database\",\"table\"],System.String);this.TwoParameterFunctionsTokens=System.Array.init([\"bin\",\"columnifexists\",\"floor\",\"countof\",\"hash\",\"round\",\"pow\",\"binary_and\",\"binary_or\",\"binary_xor\",\"binary_shift_left\",\"binary_shift_right\",\"datepart\",\"datetime_part\",\"repeat\",\"series_seasonal\",\"series_outliers\",\"array_split\",\"series_add\",\"series_subtract\",\"series_multiply\",\"series_divide\",\"series_pow\",\"series_pearson_correlation\",\"series_greater\",\"series_greater_equals\",\"series_less\",\"series_less_equals\",\"series_equals\",\"series_not_equals\",\"rank_tdigest\",\"percentrank_tdigest\",\"trim\",\"trim_start\",\"trim_end\",\"startofday\",\"startofweek\",\"startofmonth\",\"startofyear\",\"endofday\",\"endofweek\",\"endofmonth\",\"endofyear\",\"series_fill_backward\",\"series_fill_forward\",\"atan2\",\"format_datetime\",\"format_timespan\",\"strrep\",\"strcat_array\",\"parse_user_agent\",\"strcmp\",\"row_cumsum\"],System.String);this.ThreeParameterFunctionsTokens=System.Array.init([\"iff\",\"iif\",\"range\",\"replace\",\"translate\",\"series_iir\",\"bin_at\",\"series_fill_const\",\"series_decompose\",\"series_decompose_forecast\",\"series_decompose_anomalies\",\"datetime_diff\",\"datetime_add\",\"geo_point_to_geohash\",\"geo_point_in_polygon\"],System.String);this.ManyParametersFunctionsTokens=System.Array.init([\"extract\",\"extractjson\",\"extractall\",\"strcat\",\"strcat_delim\",\"substring\",\"indexof\",\"split\",\"case\",\"coalesce\",\"max_of\",\"min_of\",\"percentile_tdigest\",\"zip\",\"pack\",\"pack_dictionary\",\"pack_array\",\"array_concat\",\"array_slice\",\"welch_test\",\"row_window_session\",\"series_fir\",\"series_periods_detect\",\"prev\",\"next\",\"tdigest_merge\",\"hll_merge\",\"series_fill_linear\",\"series_periods_validate\",\"datatable\",\"make_datetime\",\"make_timespan\",\"make_string\",\"geo_distance_2points\",\"geo_point_in_circle\"],System.String);this.PromotedOperatorCommandTokens=System.Array.init([\"where\",\"count\",\"extend\",\"join\",\"limit\",\"order\",\"project\",\"project-away\",\"project-rename\",\"project-reorder\",\"project-keep\",\"render\",\"sort\",\"summarize\",\"distinct\",\"take\",\"top\",\"top-nested\",\"top-hitters\",\"union\",\"mv-expand\",\"mv-apply\",\"reduce\",\"evaluate\",\"parse\",\"parse-where\",\"parse-kv\",\"sample\",\"sample-distinct\",\"make-series\",\"getschema\",\"serialize\",\"invoke\",\"as\",\"scan\"],System.String);this.ClientDirectiveTokens=System.Array.init([\"connect\"],System.String);this.OperatorCommandTokens=System.Linq.Enumerable.from(System.Array.init([\"filter\",\"fork\",\"facet\",\"range\",\"consume\",\"find\",\"search\",\"print\",\"partition\",\"lookup\"],System.String),System.String).union(Kusto.Data.IntelliSense.CslCommandParser.PromotedOperatorCommandTokens).ToArray(System.String);this.DataOperatorTokens=System.Array.init([\"datatable\",\"externaldata\"],System.String);this.SummarizeAggregationSingleParameterTokens=System.Array.init([\"count\",\"countif\",\"dcount\",\"dcountif\",\"sum\",\"min\",\"max\",\"avg\",\"avgif\",\"any\",\"makelist\",\"makeset\",\"make_dictionary\",\"stdev\",\"stdevif\",\"varianceif\",\"variance\",\"buildschema\",\"hll\",\"hll_merge\",\"tdigest\",\"tdigest_merge\"],System.String);this.SummarizeAggregationTwoParametersTokens=System.Array.init([\"percentile\",\"sumif\"],System.String);this.SummarizeAggregationThreeParametersTokens=System.Array.init([\"percentilew\"],System.String);this.SummarizeAggregationManyParametersTokens=System.Array.init([\"arg_min\",\"arg_max\",\"percentilesw_array\",\"percentilesw\",\"percentiles_array\",\"percentiles\"],System.String);this.MakeSeriesAggregationTokens=System.Array.init([\"count\",\"countif\",\"dcount\",\"dcountif\",\"sum\",\"min\",\"max\",\"avg\",\"any\",\"stdev\",\"stdevp\",\"variance\",\"variancep\",\"sumif\"],System.String);this.PluginTokens=System.Array.init([\"autocluster\",\"diffpatterns\",\"basket\",\"extractcolumns\"],System.String);this.DatetimeFunctionsTokens=System.Linq.Enumerable.from(Kusto.Data.IntelliSense.CslCommandParser.ScalarFunctionsDateTimeTokens,System.String).union(Kusto.Data.IntelliSense.CslCommandParser.SingleParameterFunctionsDateTimeTokens).ToArray(System.String);this.ScalarFunctionsTokens=System.Linq.Enumerable.from(Kusto.Data.IntelliSense.CslCommandParser.ScalarFunctionsDateTimeTokens,System.String).union(Kusto.Data.IntelliSense.CslCommandParser.ScalarFunctionsNoDateTimeTokens).ToArray(System.String);this.SingleParameterFunctionsTokens=System.Linq.Enumerable.from(Kusto.Data.IntelliSense.CslCommandParser.SingleParameterFunctionsDateTimeTokens,System.String).union(Kusto.Data.IntelliSense.CslCommandParser.SingleParameterFunctionsNoDateTimeTokens).ToArray(System.String);this.SummarizeAggregationTokens=System.Linq.Enumerable.from(Kusto.Data.IntelliSense.CslCommandParser.SummarizeAggregationSingleParameterTokens,System.String).union(Kusto.Data.IntelliSense.CslCommandParser.SummarizeAggregationManyParametersTokens).union(Kusto.Data.IntelliSense.CslCommandParser.SummarizeAggregationThreeParametersTokens).union(Kusto.Data.IntelliSense.CslCommandParser.SummarizeAggregationTwoParametersTokens).ToArray(System.String);this.SummarizeAggregationAliasesTokens=System.Array.init([\"argmax\",\"argmin\"],System.String);this.SortedSummarizeAggregators=System.Linq.Enumerable.from(Kusto.Data.IntelliSense.CslCommandParser.SummarizeAggregationTokens,System.String).orderBy($asm.$.Kusto.Data.IntelliSense.CslCommandParser.f2).select($asm.$.Kusto.Data.IntelliSense.CslCommandParser.f3).ToArray(System.String);this.SortedMakeSeriesAggregationTokens=System.Linq.Enumerable.from(Kusto.Data.IntelliSense.CslCommandParser.MakeSeriesAggregationTokens,System.String).orderBy($asm.$.Kusto.Data.IntelliSense.CslCommandParser.f2).select($asm.$.Kusto.Data.IntelliSense.CslCommandParser.f3).ToArray(System.String);this.SortedDatetimeFunctions=System.Linq.Enumerable.from(Kusto.Data.IntelliSense.CslCommandParser.DatetimeFunctionsTokens,System.String).orderBy($asm.$.Kusto.Data.IntelliSense.CslCommandParser.f2).select($asm.$.Kusto.Data.IntelliSense.CslCommandParser.f3).ToArray(System.String);this.SortedExtendFunctions=System.Linq.Enumerable.from(Kusto.Data.IntelliSense.CslCommandParser.ManyParametersFunctionsTokens,System.String).union(Kusto.Data.IntelliSense.CslCommandParser.ScalarFunctionsTokens).union(Kusto.Data.IntelliSense.CslCommandParser.ZeroParameterFunctionsNoDateTimeTokens).union(Kusto.Data.IntelliSense.CslCommandParser.SingleParameterFunctionsTokens).union(Kusto.Data.IntelliSense.CslCommandParser.TwoParameterFunctionsTokens).union(Kusto.Data.IntelliSense.CslCommandParser.ThreeParameterFunctionsTokens).orderBy($asm.$.Kusto.Data.IntelliSense.CslCommandParser.f2).select($asm.$.Kusto.Data.IntelliSense.CslCommandParser.f3).ToArray(System.String);this.FunctionsTokens=System.Linq.Enumerable.from(Kusto.Data.IntelliSense.CslCommandParser.ManyParametersFunctionsTokens,System.String).union(Kusto.Data.IntelliSense.CslCommandParser.ScalarFunctionsTokens).union(Kusto.Data.IntelliSense.CslCommandParser.ZeroParameterFunctionsNoDateTimeTokens).union(Kusto.Data.IntelliSense.CslCommandParser.SingleParameterFunctionsTokens).union(Kusto.Data.IntelliSense.CslCommandParser.TwoParameterFunctionsTokens).union(Kusto.Data.IntelliSense.CslCommandParser.ThreeParameterFunctionsTokens).union(Kusto.Data.IntelliSense.CslCommandParser.SummarizeAggregationTokens).union(Kusto.Data.IntelliSense.CslCommandParser.IntrinsicFunctionTokens).ToArray(System.String);this.SortedEvaluateFunctions=System.Linq.Enumerable.from(Kusto.Data.IntelliSense.CslCommandParser.PluginTokens,System.String).orderBy($asm.$.Kusto.Data.IntelliSense.CslCommandParser.f2).ToArray(System.String);this.s_asyncSeeker=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\.[\\\\w\\\\-]+\\\\s+async\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.DefaultRegexOptions);this.s_isCommentLineRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*//\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.DefaultRegexOptions)}},methods:{IsAdminCommand$1:function(query,queryWithoutLeadingComments){return Kusto.Data.IntelliSense.CslCommandParser.IsStartingWithPrefix(query,\".\",queryWithoutLeadingComments)},IsAdminCommand:function(command){var commandWithoutLeadingComments={};return Kusto.Data.IntelliSense.CslCommandParser.IsAdminCommand$1(command,commandWithoutLeadingComments)},ResolveRequestApiKind:function(requestContent){var requestContentWithoutLeadingComments={},isAdminCommand=Kusto.Data.IntelliSense.CslCommandParser.IsStartingWithPrefix(requestContent,\".\",requestContentWithoutLeadingComments);return isAdminCommand?Kusto.Data.IntelliSense.CslCommandParser.s_asyncSeeker.isMatch(requestContentWithoutLeadingComments.v)?Kusto.Data.IntelliSense.ApiKind.AdminAsyncCommand:Kusto.Data.IntelliSense.ApiKind.AdminSyncCommand:Kusto.Data.IntelliSense.ApiKind.Query},IsStartingWithPrefix:function(query,prefix,queryWithoutLeadingComments){var lines,i,line;for(queryWithoutLeadingComments.v=query.trim(),lines=System.String.split(query,System.Array.init([13,10],System.Char).map(function(i){return String.fromCharCode(i)}),null,1),i=0;i<lines.length;i=i+1|0){if(line=lines[System.Array.index(i,lines)],System.String.startsWith(System.String.trimStart(line),prefix))return i>0&&(queryWithoutLeadingComments.v=Bridge.toArray(System.Linq.Enumerable.from(lines,System.String).skip(i)).join(\"\\n\").trim()),!0;if(!Kusto.Data.IntelliSense.CslCommandParser.s_isCommentLineRegex.isMatch(line))return i>0&&(queryWithoutLeadingComments.v=Bridge.toArray(System.Linq.Enumerable.from(lines,System.String).skip(i)).join(\"\\n\").trim()),!1}return!1},IsClientDirective:function(command,directiveWithoutLeadingComments){return Kusto.Data.IntelliSense.CslCommandParser.IsStartingWithPrefix(command,\"#\",directiveWithoutLeadingComments)}}},fields:{m_hashedCommands:null,m_rulesProvider:null},props:{Results:null},ctors:{ctor:function(){this.$initialize();this.Reset()}},methods:{Reset:function(){this.m_hashedCommands=new(System.Collections.Generic.Dictionary$2(System.String,Kusto.Data.IntelliSense.CslCommand).ctor);this.Results=new(System.Collections.Generic.List$1(Kusto.Data.IntelliSense.CslCommand).ctor)},Parse:function(rulesProvider,text,parseMode){var results=new(System.Collections.Generic.List$1(Kusto.Data.IntelliSense.CslCommand).ctor),parsedCommands,i,newCommand,wasFound,previousCandidate;if(Bridge.referenceEquals(this.m_rulesProvider,rulesProvider)||(this.Reset(),this.m_rulesProvider=rulesProvider),parsedCommands=Kusto.Data.IntelliSense.CslCommandParser.CslCommandTokenizer.GetCommands(text),Kusto.Cloud.Platform.Utils.ExtendedEnumerable.SafeFastAny$4(Kusto.Data.IntelliSense.CslCommand,parsedCommands))for(i=0;i<parsedCommands.Count;i=i+1|0)newCommand=parsedCommands.getItem(i),newCommand.ParseMode=parseMode,wasFound=this.FetchFromCache(parseMode,newCommand),wasFound||(previousCandidate=this.Results!=null?System.Linq.Enumerable.from(this.Results,Kusto.Data.IntelliSense.CslCommand).elementAtOrDefault(i,null):null,newCommand.ParseTokens(rulesProvider,parseMode,previousCandidate)),results.add(newCommand);return this.m_hashedCommands=System.Linq.Enumerable.from(Kusto.Cloud.Platform.Utils.ExtendedEnumerable.DistinctBy(Kusto.Data.IntelliSense.CslCommand,System.String,results,$asm.$.Kusto.Data.IntelliSense.CslCommandParser.f4),Kusto.Data.IntelliSense.CslCommand).toDictionary($asm.$.Kusto.Data.IntelliSense.CslCommandParser.f4,$asm.$.Kusto.Data.IntelliSense.CslCommandParser.f5,System.String,Kusto.Data.IntelliSense.CslCommand),this.Results=results,results},FetchFromCache:function(parseMode,newCommand){var wasFound=!1,previouslyParsedCommand={};return this.m_hashedCommands.tryGetValue(newCommand.Text,previouslyParsedCommand)&&previouslyParsedCommand.v.ParseMode===parseMode&&(newCommand.AcquireTokens(previouslyParsedCommand.v),wasFound=!0),wasFound},Clone:function(){var $t,parser=new Kusto.Data.IntelliSense.CslCommandParser;return parser.m_hashedCommands=Kusto.Cloud.Platform.Utils.ExtendedEnumerable.SafeFastAny$1(System.Collections.Generic.KeyValuePair$2(System.String,Kusto.Data.IntelliSense.CslCommand),this.m_hashedCommands)?new(System.Collections.Generic.Dictionary$2(System.String,Kusto.Data.IntelliSense.CslCommand).$ctor1)(this.m_hashedCommands):new(System.Collections.Generic.Dictionary$2(System.String,Kusto.Data.IntelliSense.CslCommand).ctor),parser.m_rulesProvider=this.m_rulesProvider,parser.Results=Kusto.Cloud.Platform.Utils.ExtendedEnumerable.SafeFastAny$2(Kusto.Data.IntelliSense.CslCommand,this.Results)?($t=Kusto.Data.IntelliSense.CslCommand,System.Linq.Enumerable.from(this.Results,$t).toList($t)):new(System.Collections.Generic.List$1(Kusto.Data.IntelliSense.CslCommand).ctor),parser}}});Bridge.ns(\"Kusto.Data.IntelliSense.CslCommandParser\",$asm.$);Bridge.apply($asm.$.Kusto.Data.IntelliSense.CslCommandParser,{f1:function(t){return t},f2:function(f){return f},f3:function(f){return(f||\"\")+\"()\"},f4:function(c){return c.Text},f5:function(c){return c}});Bridge.define(\"Kusto.Data.IntelliSense.CslCommandParser.CslCommandTokenizer\",{$kind:\"nested class\",statics:{methods:{GetCommands:function(text){var $t,$t1,result=new(System.Collections.Generic.List$1(Kusto.Data.IntelliSense.CslCommand).ctor),i,ch,commandLength;if(System.String.isNullOrEmpty(text))return result;var command=null,mode=0,endOfStream=!1,expectedNewLine=0,chars=($t=System.Char,System.Linq.Enumerable.from(text,$t).ToArray($t));for(i=0;i<chars.length;i=i+1|0){ch=chars[System.Array.index(i,chars)];endOfStream=i===(chars.length-1|0);endOfStream&&(mode===0&&(command=($t1=new Kusto.Data.IntelliSense.CslCommand,$t1.RelativeStart=i,$t1)),mode=2);switch(mode){case 0:command=($t1=new Kusto.Data.IntelliSense.CslCommand,$t1.RelativeStart=i,$t1);mode=1;break;case 1:(ch===13||ch===10)&&(expectedNewLine=ch,mode=2);break;case 2:if((ch===10||ch===13)&&chars[System.Array.index(i-1|0,chars)]===ch&&(ch=expectedNewLine),ch===expectedNewLine||endOfStream){if(command!=null){while(!endOfStream){if(chars[System.Array.index(i+1|0,chars)]===13||chars[System.Array.index(i+1|0,chars)]===10)i=i+1|0;else break;endOfStream=i===(chars.length-1|0)}commandLength=(i-command.RelativeStart|0)+1|0;command.Text=text.substr(command.RelativeStart,commandLength);command.Length=commandLength;command.IsRunnable=!System.String.isNullOrWhiteSpace(command.Text);result.add(command)}mode=0;command=null}else System.Char.isWhiteSpace(String.fromCharCode(ch))||(mode=1);break}}return result}}}});Bridge.define(\"Kusto.Data.IntelliSense.CslCommandToken\",{inherits:[System.ICloneable],props:{AbsolutePositionBias:0,Value:null,TokenKind:0,AbsoluteStart:{get:function(){return this.RelativeStart+this.AbsolutePositionBias|0}},AbsoluteEnd:{get:function(){return this.RelativeEnd+this.AbsolutePositionBias|0}},RelativeStart:0,Length:0,RelativeEnd:{get:function(){return this.RelativeStart+this.Length|0}}},alias:[\"clone\",\"System$ICloneable$clone\"],ctors:{ctor:function(value,absolutePositionBias,tokenKind){this.$initialize();this.Value=value;this.TokenKind=tokenKind;this.AbsolutePositionBias=absolutePositionBias}},methods:{CompareTo:function(other){return other==null?1:this.RelativeStart===other.RelativeStart?0:this.RelativeStart<other.RelativeStart?-1:1},clone:function(){var $t;return $t=new Kusto.Data.IntelliSense.CslCommandToken(this.Value,this.AbsolutePositionBias,this.TokenKind),$t.RelativeStart=this.RelativeStart,$t.Length=this.Length,$t},equals:function(obj){var other=Bridge.as(obj,Kusto.Data.IntelliSense.CslCommandToken);return other==null?!1:Bridge.referenceEquals(this.Value,other.Value)&&this.TokenKind===other.TokenKind&&this.RelativeStart===other.RelativeStart&&this.RelativeEnd===other.RelativeEnd&&this.AbsolutePositionBias===other.AbsolutePositionBias},getHashCode:function(){return Bridge.getHashCode(this.Value)^Bridge.getHashCode(this.TokenKind)^this.RelativeStart^this.RelativeEnd^this.AbsolutePositionBias}}});Bridge.define(\"Kusto.Data.IntelliSense.CslCommandToken.Kind\",{$kind:\"nested enum\",statics:{fields:{TableToken:2,TableColumnToken:4,OperatorToken:8,SubOperatorToken:16,CalculatedColumnToken:32,StringLiteralToken:64,FunctionNameToken:128,UnknownToken:256,CommentToken:512,PlainTextToken:1024,DataTypeToken:2048,ControlCommandToken:4096,CommandPartToken:8192,QueryParametersToken:16384,CslCommandToken:32768,LetVariablesToken:65536,PluginToken:131072,BracketRangeToken:262144,ClientDirectiveToken:524288,IsRecognizedEntity:536870912,IsMismatchedTokenValue:1073741824}},$flags:!0});Bridge.define(\"Kusto.Data.IntelliSense.CslDocumentation\",{statics:{fields:{s_instance:null},props:{Instance:{get:function(){return Kusto.Data.IntelliSense.CslDocumentation.s_instance==null&&(Kusto.Data.IntelliSense.CslDocumentation.s_instance=new Kusto.Data.IntelliSense.CslDocumentation,Kusto.Data.IntelliSense.CslDocumentation.s_instance.Initialize()),Kusto.Data.IntelliSense.CslDocumentation.s_instance}}},methods:{TrimFunctionParameters:function(signature){var parenStart=System.String.indexOf(signature,String.fromCharCode(40));return parenStart>0?signature.substr(0,parenStart):signature}}},fields:{m_documentation:null},props:{Topics:{get:function(){return this.m_documentation==null?System.Linq.Enumerable.empty():System.Linq.Enumerable.from(this.m_documentation,System.Collections.Generic.KeyValuePair$2(System.Tuple$2(Kusto.Data.IntelliSense.CslCommandToken.Kind,System.String),Kusto.Data.IntelliSense.CslTopicDocumentation)).select($asm.$.Kusto.Data.IntelliSense.CslDocumentation.f1)}}},ctors:{init:function(){this.m_documentation=new(System.Collections.Generic.Dictionary$2(System.Tuple$2(Kusto.Data.IntelliSense.CslCommandToken.Kind,System.String),Kusto.Data.IntelliSense.CslTopicDocumentation).ctor)}},methods:{AddTopic:function(topic){var key={Item1:topic.TokenKind,Item2:topic.Name.toLowerCase()};this.m_documentation.setItem(key,topic)},GetTopic:function(option){if(option.Kind===Kusto.Data.IntelliSense.OptionKind.Operator)return this.GetTopic$1(Kusto.Data.IntelliSense.CslCommandToken.Kind.OperatorToken,option.Value);else if(option.Kind===Kusto.Data.IntelliSense.OptionKind.FunctionAggregation||option.Kind===Kusto.Data.IntelliSense.OptionKind.FunctionScalar)return this.GetTopic$1(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,Kusto.Data.IntelliSense.CslDocumentation.TrimFunctionParameters(option.Value));return null},GetTopic$1:function(tokenKind,name){var key={Item1:tokenKind,Item2:name.toLowerCase()},result={};return this.m_documentation.tryGetValue(key,result),result.v},GetTopicByMarkdownSource:function(markdownSource){var $t,kvp;if(System.String.isNullOrWhiteSpace(markdownSource))return null;$t=Bridge.getEnumerator(this.m_documentation);try{while($t.moveNext())if(kvp=$t.Current,Bridge.referenceEquals(kvp.value.MarkdownSource,markdownSource))return kvp.value}finally{Bridge.is($t,System.IDisposable)&&$t.System$IDisposable$Dispose()}return null},GetTopicByName:function(name){var $t,kvp;if(System.String.isNullOrWhiteSpace(name))return null;$t=Bridge.getEnumerator(this.m_documentation);try{while($t.moveNext())if(kvp=$t.Current,Bridge.referenceEquals(kvp.key.Item2,name))return kvp.value}finally{Bridge.is($t,System.IDisposable)&&$t.System$IDisposable$Dispose()}return null},equals:function(obj){if(obj==null)return!1;var other=Bridge.as(obj,Kusto.Data.IntelliSense.CslDocumentation);return other==null?!1:this.m_documentation.Count!==other.m_documentation.Count?!1:System.Linq.Enumerable.from(other.m_documentation,System.Collections.Generic.KeyValuePair$2(System.Tuple$2(Kusto.Data.IntelliSense.CslCommandToken.Kind,System.String),Kusto.Data.IntelliSense.CslTopicDocumentation)).except(this.m_documentation).any()?!1:System.Linq.Enumerable.from(this.m_documentation,System.Collections.Generic.KeyValuePair$2(System.Tuple$2(Kusto.Data.IntelliSense.CslCommandToken.Kind,System.String),Kusto.Data.IntelliSense.CslTopicDocumentation)).except(other.m_documentation).any()?!1:!0},getHashCode:function(){return Bridge.getHashCode(this.m_documentation)},Initialize:function(){System.Linq.Enumerable.from(this.m_documentation,System.Collections.Generic.KeyValuePair$2(System.Tuple$2(Kusto.Data.IntelliSense.CslCommandToken.Kind,System.String),Kusto.Data.IntelliSense.CslTopicDocumentation)).any()||(this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.OperatorToken,\"!~\",\"Filters a record set for data that doesn't match a case-insensitive string.\",'The following table provides a comparison of the `==` (equals) operators:\\r\\n\\r\\n|Operator   |Description   |Case-Sensitive  |Example (yields `true`)  |\\r\\n|-----------|--------------|----------------|-------------------------|\\r\\n|[`==`](equals-cs-operator.md)|Equals |Yes|`\"aBc\" == \"aBc\"`|\\r\\n|[`!=`](not-equals-cs-operator.md)|Not equals |Yes |`\"abc\" != \"ABC\"`|\\r\\n|[`=~`](equals-operator.md) |Equals |No |`\"abc\" =~ \"ABC\"`|\\r\\n|[`!~`](not-equals-operator.md) |Not equals |No |`\"aBc\" !~ \"xyz\"`|\\r\\n\\r\\nFor more information about other operators and to determine which operator is most appropriate for your query, see [datatype string operators](datatypes-string-operators.md).\\r\\n\\r\\n## Performance tips\\r\\n\\r\\n[!INCLUDE [performance-tip-note](../../includes/performance-tip-note.md)]\\r\\n\\r\\nWhen possible, use the case-sensitive [!=](not-equals-cs-operator.md).\\r\\n\\r\\n## Syntax\\r\\n\\r\\n*T* `|` `where` *column* `!~` `(`*expression*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *T* | string | &check;| The tabular input whose records are to be filtered.|\\r\\n| *column* | string | &check;| The column by which to filter.|\\r\\n| *expression* | scalar | &check;| The scalar or literal expression for which to search.|\\r\\n\\r\\n## Returns\\r\\n\\r\\nRows in *T* for which the predicate is `true`.','> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAwsuyS/KdS1LzSsp5qpRKC7NzU0syqxKVUgFCcUn55fmldiCSQ1NhaRKheCSxJJUoMLyjNSiVAUNMFdBsU5BqSS1IrFYSVMhMS9FQQNJs4KdgrGBgYEmUE9BUX5WanIJxAwdZBsA00yL5oUAAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nStormEvents\\r\\n| summarize event_count=count() by State\\r\\n| where (State !~ \"texas\") and (event_count > 3000)\\r\\n| project State, event_count\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|State|event_count|\\r\\n|-----|-----------|\\r\\n|KANSAS|3,166|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/not-equals-operator\",\"not-equals-operator.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.OperatorToken,\"!=\",\"Filters a record set for data that doesn't match a case-sensitive string.\",'The following table provides a comparison of the `==` (equals) operators:\\r\\n\\r\\n|Operator   |Description   |Case-Sensitive  |Example (yields `true`)  |\\r\\n|-----------|--------------|----------------|-------------------------|\\r\\n|[`==`](equals-cs-operator.md)|Equals |Yes|`\"aBc\" == \"aBc\"`|\\r\\n|[`!=`](not-equals-cs-operator.md)|Not equals |Yes |`\"abc\" != \"ABC\"`|\\r\\n|[`=~`](equals-operator.md) |Equals |No |`\"abc\" =~ \"ABC\"`|\\r\\n|[`!~`](not-equals-operator.md) |Not equals |No |`\"aBc\" !~ \"xyz\"`|\\r\\n\\r\\nFor more information about other operators and to determine which operator is most appropriate for your query, see [datatype string operators](datatypes-string-operators.md).\\r\\n\\r\\n## Performance tips\\r\\n\\r\\n[!INCLUDE [performance-tip-note](../../includes/performance-tip-note.md)]\\r\\n\\r\\n## Syntax\\r\\n\\r\\n*T* `|` `where` *column* `!=` `(`*expression*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *T* | string | &check;| The tabular input whose records are to be filtered.|\\r\\n| *column* | string | &check;| The column by which to filter.|\\r\\n| *expression* | scalar | &check;| The scalar or literal expression for which to search.|\\r\\n\\r\\n## Returns\\r\\n\\r\\nRows in *T* for which the predicate is `true`.','> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAwsuyS/KdS1LzSsp5qpRKC7NzU0syqxKVUgFCcUn55fmldiCSQ1NhaRKheCSxJJUoMLyjNSiVAUNMFdB0VZByc3HP8jTxVFJUyExL0VBA0m7gp2CiYGBgSZQV0FRflZqcgnEFB1kOwDGtl9AhwAAAA==\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nStormEvents\\r\\n| summarize event_count=count() by State\\r\\n| where (State != \"FLORIDA\") and (event_count > 4000)\\r\\n| project State, event_count\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|State|event_count|\\r\\n|-----|-----------|\\r\\n|TEXAS|4,701|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/not-equals-cs-operator\",\"not-equals-cs-operator.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.OperatorToken,\"!between\",\"Matches the input that is outside of the inclusive range.\",\"`!between` can operate on any numeric, datetime, or timespan expression.\\r\\n\\r\\n## Syntax\\r\\n\\r\\n*T* `|` `where` *expr* `!between` `(`*leftRange*` .. `*rightRange*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *T* | string | &check;| The tabular input whose records are to be matched.|\\r\\n| *expr* | scalar | &check; | The expression to filter.|\\r\\n| *leftRange* | int, long, real, or datetime | &check; | The expression of the left range. The range is inclusive.|\\r\\n| *rightRange* | int, long, real, datetime, or timespan | &check; | The expression of the right range. The range is inclusive.<br/><br/>This value can only be of type [timespan](scalar-data-types/timespan.md) if *expr* and *leftRange* are both of type `datetime`. See [example](#filter-datetime-using-a-timespan-range).|\\r\\n\\r\\n## Returns\\r\\n\\r\\nRows in *T* for which the predicate of (*expr* < *leftRange* or *expr* > *rightRange*) evaluates to `true`.\",'### Filter numeric values\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAytKzEtPVahQSCvKz1UwVCjJVzA0UCguSS1QMOSqUSjPSC0CySompZaUp6bmKWiYKujpKVhqAgAyiN4KNwAAAA==\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nrange x from 1 to 10 step 1\\r\\n| where x !between (5 .. 9)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|x|\\r\\n|---|\\r\\n|1|\\r\\n|2|\\r\\n|3|\\r\\n|4|\\r\\n|10|\\r\\n\\r\\n### Filter datetime  \\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAwsuyS/KdS1LzSsp5qpRKM9ILUpVCC5JLCoJycxNVVBMSi0pT03NU9BISSxJLQEKaRgZGJjrApGRuaaCnp4ChrixgaYm0KTk/NK8EgDn7tLlXQAAAA==\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nStormEvents\\r\\n| where StartTime !between (datetime(2007-07-27) .. datetime(2007-07-30))\\r\\n| count \\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|Count|\\r\\n|---|\\r\\n|58590|\\r\\n\\r\\n### Filter datetime using a timespan range\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAwsuyS/KdS1LzSsp5qpRKM9ILUpVCC5JLCoJycxNVVBMSi0pT03NU9BISSxJLQEKaRgZGJjrApGRuaaCnp6CcYomUF9yfmleCQDBjXU5SwAAAA==\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nStormEvents\\r\\n| where StartTime !between (datetime(2007-07-27) .. 3d)\\r\\n| count \\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|Count|\\r\\n|---|\\r\\n|58590|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/notbetweenoperator\",\"notbetweenoperator.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.OperatorToken,\"!contains\",\"Filters a record set for data that doesn't include a case-sensitive string. `!contains` searches for characters rather than [terms](datatypes-string-operators.md#what-is-a-term) of three or more characters. The query scans the values in the column, which is slower than looking up a term in a term index.\",\"[!INCLUDE [contains-operator-comparison](../../includes/contains-operator-comparison.md)]\\r\\n\\r\\n## Performance tips\\r\\n\\r\\n[!INCLUDE [performance-tip-note](../../includes/performance-tip-note.md)]\\r\\n\\r\\nWhen possible, use the case-sensitive [!contains_cs](not-contains-cs-operator.md).\\r\\n\\r\\nUse `!has` if you're looking for a [term](datatypes-string-operators.md#what-is-a-term).\\r\\n\\r\\n## Syntax\\r\\n\\r\\n### Case insensitive syntax\\r\\n\\r\\n*T* `|` `where` *Column* `!contains` `(`*Expression*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *T* | string | &check;| The tabular input whose records are to be filtered.|\\r\\n| *Column* | string | &check;| The column by which to filter.|\\r\\n| *Expression* | scalar | &check;| The scalar or literal expression for which to search.|\\r\\n\\r\\n## Returns\\r\\n\\r\\nRows in *T* for which the predicate is `true`.\",'> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAwsuyS/KdS1LzSsp5qpRKC7NzU0syqxKVUgFCcUn55fmldiCSQ1NhaRKheCSxJJUoMLyjNSiVAhPQTE5P68kMTOvWEEpOzFPCS6LZISCnYKxgYEBUKqgKD8rNbkEolUHWQ0AK1/nHYoAAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nStormEvents\\r\\n| summarize event_count=count() by State\\r\\n| where State !contains \"kan\"\\r\\n| where event_count > 3000\\r\\n| project State, event_count\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|State|event_count|\\r\\n|-----|-----------|\\r\\n|TEXAS|4701|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/not-contains-operator\",\"not-contains-operator.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.OperatorToken,\"!contains_cs\",\"Filters a record set for data that doesn't include a case-sensitive string. `!contains_cs` searches for characters rather than [terms](datatypes-string-operators.md#what-is-a-term) of three or more characters. The query scans the values in the column, which is slower than looking up a term in a term index.\",\"[!INCLUDE [contains-operator-comparison](../../includes/contains-operator-comparison.md)]\\r\\n\\r\\n## Performance tips\\r\\n\\r\\n[!INCLUDE [performance-tip-note](../../includes/performance-tip-note.md)]\\r\\n\\r\\nIf you're looking for a [term](datatypes-string-operators.md#what-is-a-term), use `!has_cs` for faster results.\\r\\n\\r\\n## Syntax\\r\\n\\r\\n### Case-sensitive syntax\\r\\n\\r\\n*T* `|` `where` *Column* `!contains_cs` `(`*Expression*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *T* | string | &check;| The tabular input whose records are to be filtered.|\\r\\n| *Column* | string | &check;| The column by which to filter.|\\r\\n| *Expression* | scalar | &check;| The scalar or literal expression for which to search.|\\r\\n\\r\\n## Returns\\r\\n\\r\\nRows in *T* for which the predicate is `true`.\",'> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAwsuyS/KdS1LzSsp5qpRKC7NzU0syqxKVUgFCcUn55fmldiCSQ1NhaRKheCSxJJUoMLyjNSiVAhPQTE5P68kMTOvOD65WEHJMVgJKA/WAgDbLF9iXAAAAA==\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nStormEvents\\r\\n| summarize event_count=count() by State\\r\\n| where State !contains_cs \"AS\"\\r\\n| count\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|Count|\\r\\n|-----|\\r\\n|59|\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAwsuyS/KdS1LzSsp5qpRKC7NzU0syqxKVUgFCcUn55fmldiCSQ1NhaRKheCSxJJUoMLyjNSiVAhPQTE5P68kMTOvOD65WEEpxDVCCa4AyRQFOwVjAwMDoFRBUX5WanIJRLcOshoAY3LN3I0AAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nStormEvents\\r\\n| summarize event_count=count() by State\\r\\n| where State !contains_cs \"TEX\"\\r\\n| where event_count > 3000\\r\\n| project State, event_count\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|State|event_count|\\r\\n|-----|-----------|\\r\\n|KANSAS|3,166|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/not-contains-cs-operator\",\"not-contains-cs-operator.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.OperatorToken,\"!endswith\",\"Filters a record set for data that excludes a case-insensitive ending string.\",\"[!INCLUDE [endswith-operator-comparison](../../includes/endswith-operator-comparison.md)]\\r\\n\\r\\n## Performance tips\\r\\n\\r\\n[!INCLUDE [performance-tip-note](../../includes/performance-tip-note.md)]\\r\\n\\r\\nWhen possible, use the case-sensitive [!endswith_cs](not-endswith-cs-operator.md).\\r\\n\\r\\n## Syntax\\r\\n\\r\\n*T* `|` `where` *col* `!endswith` `(`*expression*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *T* | string | &check;| The tabular input whose records are to be filtered. |\\r\\n| *col* | string | &check; | The column to filter. |\\r\\n| *expression* | string | &check; | The expression used to filter. |\\r\\n\\r\\n## Returns\\r\\n\\r\\nRows in *T* for which the predicate is `true`.\",'> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAwsuyS/KdS1LzSsp5qpRKC7NzU0syqxKVYAI2Sbnl+aVaGgqJFUqBJcklqQC1ZRnpBalQngKiql5KcXlmSUZCkqZxUpwSYhmBTsFIwMDA6BoQVF+VmpyCUSTDlQaADTefzN6AAAA\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nStormEvents\\r\\n| summarize Events=count() by State\\r\\n| where State !endswith \"is\"\\r\\n| where Events > 2000\\r\\n| project State, Events\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|State|Events|\\r\\n|--|--|\\r\\n|TEXAS|4701|\\r\\n|KANSAS|3166|\\r\\n|IOWA|2337|\\r\\n|MISSOURI|2016|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/not-endswith-operator\",\"not-endswith-operator.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.OperatorToken,\"!endswith_cs\",\"Filters a record set for data that doesn't contain a case-insensitive ending string.\",\"[!INCLUDE [endswith-operator-comparison](../../includes/endswith-operator-comparison.md)]\\r\\n\\r\\n## Performance tips\\r\\n\\r\\n[!INCLUDE [performance-tip-note](../../includes/performance-tip-note.md)]\\r\\n\\r\\n## Syntax\\r\\n\\r\\n*T* `|` `where` *col* `!endswith_cs` `(`*expression*`)`  \\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *T* | string | &check;| The tabular input whose records are to be filtered. |\\r\\n| *col* | string | &check; | The column to filter. |\\r\\n| *expression* | string | &check; | The expression used to filter. |\\r\\n\\r\\n## Returns\\r\\n\\r\\nRows in *T* for which the predicate is `true`.\",'> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAwsuyS/KdS1LzSsp5qpRKC7NzU0syqxKVYAI2Sbnl+aVaGgqJFUqBJcklqQC1ZRnpBalQngKiql5KcXlmSUZ8cnFCkqOSgAvfsIqTgAAAA==\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nStormEvents\\r\\n| summarize Events=count() by State\\r\\n| where State !endswith_cs \"A\"\\r\\n```\\r\\n\\r\\nThe following table only shows the first 10 results. To see the full output, run the query.\\r\\n\\r\\n|State| Events|\\r\\n|--|--|\\r\\n|TEXAS| 4701|\\r\\n|KANSAS| 3166|\\r\\n|ILLINOIS| 2022|\\r\\n|MISSOURI| 2016|\\r\\n|WISCONSIN| 1850|\\r\\n|NEW YORK| 1750|\\r\\n|COLORADO| 1654|\\r\\n|MICHIGAN| 1637|\\r\\n|KENTUCKY| 1391|\\r\\n|OHIO| 1233|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/not-endswith-cs-operator\",\"not-endswith-cs-operator.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.OperatorToken,\"!has\",\"Filters a record set for data that doesn't have a matching case-insensitive string. `!has` searches for indexed terms, where an indexed [term](datatypes-string-operators.md#what-is-a-term) is three or more characters. If your term is fewer than three characters, the query scans the values in the column, which is slower than looking up the term in the term index.\",\"[!INCLUDE [has-operator-comparison](../../includes/has-operator-comparison.md)]\\r\\n\\r\\n## Performance tips\\r\\n\\r\\n[!INCLUDE [performance-tip-note](../../includes/performance-tip-note.md)]\\r\\n\\r\\nWhen possible, use the case-sensitive [!has_cs](not-has-cs-operator.md).\\r\\n\\r\\n## Syntax\\r\\n\\r\\n*T* `|` `where` *column* `!has` `(`*expression*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *T* | string | &check;| The tabular input whose records are to be filtered.|\\r\\n| *column* | string | &check;| The column by which to filter.|\\r\\n| *expression* | scalar | &check;| The scalar or literal expression for which to search.|\\r\\n\\r\\n## Returns\\r\\n\\r\\nRows in *T* for which the predicate is `true`.\",'> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAwsuyS/KdS1LzSsp5qpRKC7NzU0syqxKVUgFCcUn55fmldiCSQ1NhaRKheCSxJJUoMLyjNSiVAhPQTEjsVhByc81XAkugaRbwU7B2MDAAChVUJSflZpcAtGlg6wGADV9h9KFAAAA\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nStormEvents\\r\\n| summarize event_count=count() by State\\r\\n| where State !has \"NEW\"\\r\\n| where event_count > 3000\\r\\n| project State, event_count\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|State|event_count|\\r\\n|-----|-----------|\\r\\n|TEXAS|4,701|\\r\\n|KANSAS|3,166|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/not-has-operator\",\"not-has-operator.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.OperatorToken,\"!has_cs\",\"Filters a record set for data that doesn't have a matching case-sensitive string. `!has_cs` searches for indexed terms, where an indexed [term](datatypes-string-operators.md#what-is-a-term) is three or more characters. If your term is fewer than three characters, the query scans the values in the column, which is slower than looking up the term in the term index.\",\"[!INCLUDE [has-operator-comparison](../../includes/has-operator-comparison.md)]\\r\\n\\r\\n## Performance tips\\r\\n\\r\\n[!INCLUDE [performance-tip-note](../../includes/performance-tip-note.md)]\\r\\n\\r\\n## Syntax\\r\\n\\r\\n*T* `|` `where` *column* `!has_cs` `(`*expression*`)`  \\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *T* | string | &check;| The tabular input whose records are to be filtered.|\\r\\n| *column* | string | &check;| The column by which to filter.|\\r\\n| *expression* | scalar | &check;| The scalar or literal expression for which to search.|\\r\\n\\r\\n## Returns\\r\\n\\r\\nRows in *T* for which the predicate is `true`.\",'> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAwsuyS/KdS1LzSsp5qpRKC7NzU0syqxKVUgFCcUn55fmldiCSQ1NhaRKheCSxJJUoMLyjNSiVAhPQTEjsTg+uVhBKS+1XAkoB1YOAGM3qTFYAAAA\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nStormEvents\\r\\n| summarize event_count=count() by State\\r\\n| where State !has_cs \"new\"\\r\\n| count\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|Count|\\r\\n|-----|\\r\\n|67|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/not-has-cs-operator\",\"not-has-cs-operator.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.OperatorToken,\"!hasprefix\",\"Filters a record set for data that doesn't include a case-insensitive starting string.\",\"For best performance, use strings of three characters or more. `!hasprefix` searches for indexed terms, where an indexed [term](datatypes-string-operators.md#what-is-a-term) is three or more characters. If your term is fewer than three characters, the query scans the values in the column, which is slower than looking up the term in the term index.\\r\\n\\r\\n[!INCLUDE [has-prefix-operator-comparison](../../includes/has-prefix-operator-comparison.md)]\\r\\n\\r\\n## Performance tips\\r\\n\\r\\n[!INCLUDE [performance-tip-note](../../includes/performance-tip-note.md)]\\r\\n\\r\\nWhen possible, use the case-sensitive [!hasprefix_cs](not-hasprefix-cs-operator.md).\\r\\n\\r\\n## Syntax\\r\\n\\r\\n*T* `|` `where` *Column* `!hasprefix` `(`*Expression*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *T* | string | &check; | The tabular input whose records are to be filtered.|\\r\\n| *Column* | string | &check; | The column used to filter.|\\r\\n| *Expression* | string | &check; | The expression for which to search.|\\r\\n\\r\\n## Returns\\r\\n\\r\\nRows in *T* for which the predicate is `true`.\",'> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAwsuyS/KdS1LzSsp5qpRKC7NzU0syqxKVUgFCcUn55fmldiCSQ1NhaRKheCSxJJUoMLyjNSiVAhPQTEjsbigKDUts0JByU8JLolkgoKdgpGBgQFQqqAoPys1uQSiUwdZDQCJ3wPtiQAAAA==\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nStormEvents\\r\\n| summarize event_count=count() by State\\r\\n| where State !hasprefix \"N\"\\r\\n| where event_count > 2000\\r\\n| project State, event_count\\r\\n```\\r\\n\\r\\n|State|event_count|\\r\\n|-----|-----------|\\r\\n|TEXAS|4701|\\r\\n|KANSAS|3166|\\r\\n|IOWA|2337|\\r\\n|ILLINOIS|2022|\\r\\n|MISSOURI|2016|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/not-hasprefix-operator\",\"not-hasprefix-operator.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.OperatorToken,\"!hasprefix_cs\",\"Filters a record set for data that doesn't have a case-sensitive starting string. `!hasprefix_cs` searches for indexed terms, where an indexed [term](datatypes-string-operators.md#what-is-a-term) is three or more characters. If your term is fewer than three characters, the query scans the values in the column, which is slower than looking up the term in the term index.\",'|Operator   |Description   |Case-Sensitive  |Example (yields `true`)  |\\r\\n|-----------|--------------|----------------|-------------------------|\\r\\n|[`hasprefix`](hasprefix-operator.md) |RHS is a term prefix in LHS |No |`\"North America\" hasprefix \"ame\"`|\\r\\n|[`!hasprefix`](not-hasprefix-operator.md) |RHS isn\\'t a term prefix in LHS |No |`\"North America\" !hasprefix \"mer\"`|\\r\\n|[`hasprefix_cs`](hasprefix-cs-operator.md) |RHS is a term prefix in LHS |Yes |`\"North America\" hasprefix_cs \"Ame\"`|\\r\\n|[`!hasprefix_cs`](not-hasprefix-cs-operator.md) |RHS isn\\'t a term prefix in LHS |Yes |`\"North America\" !hasprefix_cs \"CA\"`|\\r\\n\\r\\n> [!NOTE]\\r\\n> The following abbreviations are used in the above table:\\r\\n>\\r\\n> * RHS = right hand side of the expression\\r\\n> * LHS = left hand side of the expression\\r\\n\\r\\nFor more information about other operators and to determine which operator is most appropriate for your query, see [datatype string operators](datatypes-string-operators.md).\\r\\n\\r\\n## Performance tips\\r\\n\\r\\n[!INCLUDE [performance-tip-note](../../includes/performance-tip-note.md)]\\r\\n\\r\\n## Syntax\\r\\n\\r\\n*T* `|` `where` *column* `!hasprefix_cs` `(`*expression*`)`  \\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *T* | string | &check;| The tabular input whose records are to be filtered.|\\r\\n| *column* | string | &check;| The column by which to filter.|\\r\\n| *expression* | scalar | &check;| The scalar or literal expression for which to search.|\\r\\n\\r\\n## Returns\\r\\n\\r\\nRows in *T* for which the predicate is `true`.','> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAwsuyS/KdS1LzSsp5qpRKC7NzU0syqxKVUgFCcUn55fmldiCSQ1NhaRKheCSxJJUoMLyjNSiVAhPQTEjsbigKDUtsyI+uVhBKUAJKA/WAgDAMC2uXAAAAA==\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nStormEvents\\r\\n| summarize event_count=count() by State\\r\\n| where State !hasprefix_cs \"P\"\\r\\n| count\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|Count|\\r\\n|-----|\\r\\n|64|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/not-hasprefix-cs-operator\",\"not-hasprefix-cs-operator.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.OperatorToken,\"!hassuffix\",\"Filters a record set for data that doesn't have a case-insensitive ending string. `!hassuffix` returns `true` if there's no [term](datatypes-string-operators.md#what-is-a-term) inside string column ending with the specified string expression.\",\"[!INCLUDE [hassuffix-operator-comparison](../../includes/hassuffix-operator-comparison.md)]\\r\\n\\r\\n## Performance tips\\r\\n\\r\\n[!INCLUDE [performance-tip-note](../../includes/performance-tip-note.md)]\\r\\n\\r\\nWhen possible, use [!hassuffix_cs](not-hassuffix-cs-operator.md) - a case-sensitive version of the operator.\\r\\n\\r\\n> [!NOTE]\\r\\n> Text index cannot be fully utilized for this function, therefore the performance of this function is comparable to [!endswith](not-endswith-operator.md) function, though the semantics is different.\\r\\n\\r\\n## Syntax\\r\\n\\r\\n*T* `|` `where` *column* `!hassuffix` `(`*expression*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *T* | string | &check;| The tabular input whose records are to be filtered.|\\r\\n| *column* | string | &check;| The column by which to filter.|\\r\\n| *expression* | scalar | &check;| The scalar or literal expression for which to search.|\\r\\n\\r\\n## Returns\\r\\n\\r\\nRows in *T* for which the predicate is `true`.\",'> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAwsuyS/KdS1LzSsp5qpRKC7NzU0syqxKVUgFCcUn55fmldiCSQ1NhaRKheCSxJJUoMLyjNSiVAhPQTEjsbi4NC0ts0JByVEJLolkgoKdgpGBgQFQqqAoPys1uQSiUwdZDQCFtu1diQAAAA==\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nStormEvents\\r\\n| summarize event_count=count() by State\\r\\n| where State !hassuffix \"A\"\\r\\n| where event_count > 2000\\r\\n| project State, event_count\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|State|event_count|\\r\\n|-----|-----------|\\r\\n|TEXAS|4701|\\r\\n|KANSAS|3166|\\r\\n|ILLINOIS|2022|\\r\\n|MISSOURI|2016|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/not-hassuffix-operator\",\"not-hassuffix-operator.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.OperatorToken,\"!hassuffix_cs\",\"Filters a record set for data that doesn't have a case-sensitive ending string. `!hassuffix_cs` returns `true` if there is no [term](datatypes-string-operators.md#what-is-a-term) inside string column ending with the specified string expression.\",\"[!INCLUDE [hassuffix-operator-comparison](../../includes/hassuffix-operator-comparison.md)]\\r\\n\\r\\n## Performance tips\\r\\n\\r\\n[!INCLUDE [performance-tip-note](../../includes/performance-tip-note.md)]\\r\\n\\r\\n> [!NOTE]\\r\\n> Text index cannot be fully utilized for this function, therefore the performance of this function is comparable to [!endswith_cs](not-endswith-cs-operator.md) function, though the semantics is different.\\r\\n\\r\\n## Syntax\\r\\n\\r\\n*T* `|` `where` *column* `!hassuffix_cs` `(`*expression*`)`  \\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *T* | string | &check;| The tabular input whose records are to be filtered.|\\r\\n| *column* | string | &check;| The column by which to filter.|\\r\\n| *expression* | scalar | &check;| The scalar or literal expression for which to search.|\\r\\n\\r\\n## Returns\\r\\n\\r\\nRows in *T* for which the predicate is `true`.\",'> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAwsuyS/KdS1LzSsp5qpRKC7NzU0syqxKVUgFCcUn55fmldiCSQ1NhaRKheCSxJJUoMLyjNSiVAhPQTEjsbi4NC0tsyI+uVhByTFYCa4AyRQFOwUjAwMDoFRBUX5WanIJRLcOshoAideoe40AAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nStormEvents\\r\\n| summarize event_count=count() by State\\r\\n| where State !hassuffix_cs \"AS\"\\r\\n| where event_count > 2000\\r\\n| project State, event_count\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|State|event_count|\\r\\n|-----|-----------|\\r\\n|IOWA|2337|\\r\\n|ILLINOIS|2022|\\r\\n|MISSOURI|2016|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/not-hassuffix-cs-operator\",\"not-hassuffix-cs-operator.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.OperatorToken,\"!in\",\"Filters a record set for data without a case-sensitive string.\",\"[!INCLUDE [in-operator-comparison](../../includes/in-operator-comparison.md)]\\r\\n\\r\\n## Performance tips\\r\\n\\r\\n[!INCLUDE [performance-tip-note](../../includes/performance-tip-note.md)]\\r\\n\\r\\n## Syntax\\r\\n\\r\\n*T* `|` `where` *col* `!in` `(`*expression*`,` ... `)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *T* | string | &check; | The tabular input to filter.|\\r\\n| *col* | string | &check; | The column by which to filter.|\\r\\n| *expression* | scalar or tabular | &check; | An expression that specifies the values for which to search. Each expression can be a [scalar](scalar-data-types/index.md) value or a [tabular expression](tabularexpressionstatements.md) that produces a set of values. If a tabular expression has multiple columns, the first column is used. The search will consider up to 1,000,000 distinct values.|\\r\\n\\r\\n> [!NOTE]\\r\\n> An inline tabular expression must be enclosed with double parentheses. See [example](#tabular-expression).\\r\\n\\r\\n## Returns\\r\\n\\r\\nRows in *T* for which the predicate is `true`.\",'### List of scalars\\r\\n\\r\\nThe following query shows how to use `!in` with a comma-separated list of scalar values.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAwsuyS/KdS1LzSspVuCqUSjPSC1KVQguSSxJVVDMzFPQUHLz8Q/ydHFU0lFQcnf1D3L3BDP9XMMVIv2DvJU0QbqS80vzSgDNxq+9SgAAAA==\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nStormEvents \\r\\n| where State !in (\"FLORIDA\", \"GEORGIA\", \"NEW YORK\") \\r\\n| count\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|Count|\\r\\n|---|\\r\\n|54291|\\r\\n\\r\\n### Dynamic array\\r\\n\\r\\nThe following query shows how to use `!in` with a dynamic array.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAwsuyS/KdS1LzSspVuCqUSjPSC1KVQguSSxJVVDMzFPQSKnMS8zNTNaIVnLz8Q/ydHFU0lFQcnf1D3L3BDP9XMMVIv2DvJViNTVBBiTnl+aVAAD4lvyYVQAAAA==\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nStormEvents \\r\\n| where State !in (dynamic([\"FLORIDA\", \"GEORGIA\", \"NEW YORK\"])) \\r\\n| count\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|Count|\\r\\n|---|\\r\\n|54291|  \\r\\n\\r\\nThe same query can also be written with a [let statement](letstatement.md).\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA8tJLVEoLkksSS1WsFVIqcxLzM1M1ohWcvPxD/J0cVTSUVByd/UPcvcEM/1cwxUi/YO8lWI1rbmCS/KLcl3LUvNKihW4ahTKM1KLUhWCQUYpKGbmKWhATNUEShWX5uYmFmVWpSok55fmlWhoKiRVQlQCAKFqvAF+AAAA\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nlet states = dynamic([\"FLORIDA\", \"GEORGIA\", \"NEW YORK\"]);\\r\\nStormEvents \\r\\n| where State !in (states)\\r\\n| summarize count() by State\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|Count|\\r\\n|---|\\r\\n|54291|\\r\\n\\r\\n### Tabular expression\\r\\n\\r\\nThe following query shows how to use `!in` with an inline tabular expression. Notice that an inline tabular expression must be enclosed with double parentheses.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAwsuyS/KdS1LzSspVuCqUSjPSC1KVQguSSxJVVDMzFPQ0AjILyjNSSzJzM9zSSxJVIApQQgr2CmYGoABULKgKD8rNbkEYoKmJtDE4tLc3MSizKpUheT80rwSDU2FpEqINABw+yCTewAAAA==\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nStormEvents \\r\\n| where State !in ((PopulationData | where Population > 5000000 | project State))\\r\\n| summarize count() by State\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|State|Count|\\r\\n|--|--|\\r\\n|KANSAS|3166|\\r\\n|IOWA|2337|\\r\\n|NEBRASKA|1766|\\r\\n|OKLAHOMA|1716|\\r\\n|SOUTH DAKOTA|1567|\\r\\n|...|...|\\r\\n\\r\\nThe same query can also be written with a [let statement](letstatement.md). Notice that the double parentheses as provided in the last example aren\\'t necessary in this case.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA02NvQrCQBCE+zzF2CWdjZXEKvZCHkDWsCQnd7dhby+i+PD5ESFTznwf49ngSXu+JyPjhBo3GbMncxIbMsIXr4GVdzUuOB23LOOo8uTO0K76uWhNNFwnjpZQ/NVtw8FFlPuvagFSDoHUfRid5Ghlhcf7x89eufmimgAAAA==\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nlet large_states = PopulationData | where Population > 5000000 | project State;\\r\\nStormEvents \\r\\n| where State !in (large_states)\\r\\n| summarize count() by State\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|State|Count|\\r\\n|--|--|\\r\\n|KANSAS|3166|\\r\\n|IOWA|2337|\\r\\n|NEBRASKA|1766|\\r\\n|OKLAHOMA|1716|\\r\\n|SOUTH DAKOTA|1567|\\r\\n|...|...|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/not-in-cs-operator\",\"not-in-cs-operator.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.OperatorToken,\"!in~\",\"Filters a record set for data without a case-insensitive string.\",\"[!INCLUDE [in-operator-comparison](../../includes/in-operator-comparison.md)]\\r\\n\\r\\n## Performance tips\\r\\n\\r\\n[!INCLUDE [performance-tip-note](../../includes/performance-tip-note.md)]\\r\\n\\r\\nWhen possible, use the case-sensitive [!in~](not-in-cs-operator.md).\\r\\n\\r\\n## Syntax\\r\\n\\r\\n*T* `|` `where` *col* `!in~` `(`*expression*`,` ... `)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *T* | string | &check; | The tabular input to filter.|\\r\\n| *col* | string | &check; | The column by which to filter.|\\r\\n| *expression* | scalar or tabular | &check; | An expression that specifies the values for which to search. Each expression can be a [scalar](scalar-data-types/index.md) value or a [tabular expression](tabularexpressionstatements.md) that produces a set of values. If a tabular expression has multiple columns, the first column is used. The search will consider up to 1,000,000 distinct values. |\\r\\n\\r\\n> [!NOTE]\\r\\n> An inline tabular expression must be enclosed with double parentheses. See [example](#tabular-expression).\\r\\n\\r\\n## Returns\\r\\n\\r\\nRows in *T* for which the predicate is `true`.\",'### List of scalars\\r\\n\\r\\nThe following query shows how to use `!in~` with a comma-separated list of scalar values.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAwsuyS/KdS1LzSspVuCqUSjPSC1KVQguSSxJVVDMzKtT0FByy8kvykxJVNJRUHJPzS9KzwQz/VLLFSLzi7KVNEHakvNL80oA5o2K+ksAAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nStormEvents \\r\\n| where State !in~ (\"Florida\", \"Georgia\", \"New York\") \\r\\n| count\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|Count|\\r\\n|---|\\r\\n|54,291|  \\r\\n\\r\\n### Dynamic array\\r\\n\\r\\nThe following query shows how to use `!in~` with a dynamic array.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAwsuyS/KdS1LzSspVuCqUSjPSC1KVQguSSxJVVDMzKtT0EipzEvMzUzWiFZyy8kvykxJVNJRUHJPzS9KzwQz/VLLFSLzi7KVYjU1QSYk55fmlQAAs+z4r1YAAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nStormEvents \\r\\n| where State !in~ (dynamic([\"Florida\", \"Georgia\", \"New York\"])) \\r\\n| count\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|Count|\\r\\n|---|\\r\\n|54291|  \\r\\n\\r\\nThe same query can also be written with a [let statement](letstatement.md).\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAyWMvQrCQBAG+zzF51V34BtISrWzSSXB4kwWXczdwt7GEJE8uz/pBmaYgQzFolFBjX7OMXHnW3cYRLmPbgt3JNEb//FEE86iD3cJu6ox0bR/UraC6o3pTkpofitsOC/w6zZ8XRlTisovQidjNh9wndf0A62lrc5/AAAA\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nlet states = dynamic([\"Florida\", \"Georgia\", \"New York\"]);\\r\\nStormEvents \\r\\n| where State !in~ (states)\\r\\n| summarize count() by State\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|Count|\\r\\n|---|\\r\\n|54291|\\r\\n\\r\\n### Tabular expression\\r\\n\\r\\nThe following query shows how to use `!in~` with an inline tabular expression. Notice that an inline tabular expression must be enclosed with double parentheses.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAwsuyS/KdS1LzSspVuCqUSjPSC1KVQguSSxJVVDMzKtT0NAIyC8ozUksyczPc0ksSVSAqUEIK9gpmBqAAVCyoCg/KzW5BGKEpibQyOLS3NzEosyqVIXk/NK8Eg1NhaRKiDQAEmmU0nwAAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nStormEvents \\r\\n| where State !in~ ((PopulationData | where Population > 5000000 | project State))\\r\\n| summarize count() by State\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|State|count_|\\r\\n|--|--|\\r\\n|KANSAS|3166|\\r\\n|IOWA|2337|\\r\\n|NEBRASKA|1766|\\r\\n|OKLAHOMA|1716|\\r\\n|SOUTH DAKOTA|1567|\\r\\n|...|...|\\r\\n\\r\\nThe same query can also be written with a [let statement](letstatement.md). Notice that the double parentheses as provided in the last example aren\\'t necessary in this case.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA8tJLVHISSxKT40vLkksSS1WsFUIyC8ozUksyczPc0ksSVSoUSjPSC1KRRJWsFMwNQADoGRBUX5WanKJQjBIuzVXcEl+Ua5rWWpeSbECF0wrWE5BMTOvTkED2TJNoIri0tzcxKLMqlSF5PzSvBINTYWkSogGANAXanqbAAAA\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nlet large_states = PopulationData | where Population > 5000000 | project State;\\r\\nStormEvents \\r\\n| where State !in~ (large_states)\\r\\n| summarize count() by State\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|State|count_|\\r\\n|--|--|\\r\\n|KANSAS|3166|\\r\\n|IOWA|2337|\\r\\n|NEBRASKA|1766|\\r\\n|OKLAHOMA|1716|\\r\\n|SOUTH DAKOTA|1567|\\r\\n|...|...|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/not-in-operator\",\"not-in-operator.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.OperatorToken,\"!startswith\",\"Filters a record set for data that doesn't start with a case-insensitive search string.\",\"[!INCLUDE [startswith-operator-comparison](../../includes/startswith-operator-comparison.md)]\\r\\n\\r\\n## Performance tips\\r\\n\\r\\n[!INCLUDE [performance-tip-note](../../includes/performance-tip-note.md)]\\r\\n\\r\\nWhen possible, use the case-sensitive [!startswith_cs](not-startswith-cs-operator.md).\\r\\n\\r\\n## Syntax\\r\\n\\r\\n*T* `|` `where` *column* `!startswith` `(`*expression*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *T* | string | &check;| The tabular input whose records are to be filtered.|\\r\\n| *column* | string | &check;| The column by which to filter.|\\r\\n| *expression* | scalar | &check;| The scalar or literal expression for which to search.|\\r\\n\\r\\n## Returns\\r\\n\\r\\nRows in *T* for which the predicate is `true`.\",'> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAwsuyS/KdS1LzSsp5qpRKC7NzU0syqxKVUgFCcUn55fmldiCSQ1NhaRKheCSxJJUoMLyjNSiVAhPQbG4JLGopLg8syRDQSlTCS6LZISCnYKRgYEBUKqgKD8rNbkEolUHWQ0ASJ6KLIoAAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nStormEvents\\r\\n| summarize event_count=count() by State\\r\\n| where State !startswith \"i\"\\r\\n| where event_count > 2000\\r\\n| project State, event_count\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|State|event_count|\\r\\n|-----|-----------|\\r\\n|TEXAS|4701|\\r\\n|KANSAS|3166|\\r\\n|MISSOURI|2016|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/not-startswith-operator\",\"not-startswith-operator.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.OperatorToken,\"!startswith_cs\",\"Filters a record set for data that doesn't start with a case-sensitive search string.\",\"[!INCLUDE [startswith-operator-comparison](../../includes/startswith-operator-comparison.md)]\\r\\n\\r\\n## Performance tips\\r\\n\\r\\n[!INCLUDE [performance-tip-note](../../includes/performance-tip-note.md)]\\r\\n\\r\\n## Syntax\\r\\n\\r\\n*T* `|` `where` *column* `!startswith_cs` `(`*expression*`)`  \\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *T* | string | &check;| The tabular input whose records are to be filtered.|\\r\\n| *column* | string | &check;| The column by which to filter.|\\r\\n| *expression* | scalar | &check;| The scalar or literal expression for which to search.|\\r\\n\\r\\n## Returns\\r\\n\\r\\nRows in *T* for which the predicate is `true`.\",'> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAwsuyS/KdS1LzSsp5qpRKC7NzU0syqxKVUgFCcUn55fmldiCSQ1NhaRKheCSxJJUoMLyjNSiVAhPQbG4JLGopLg8syQjPrlYQclTCa4AyRQFOwUjAwMDoFRBUX5WanIJRLcOshoAsNzTI40AAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nStormEvents\\r\\n| summarize event_count=count() by State\\r\\n| where State !startswith_cs \"I\"\\r\\n| where event_count > 2000\\r\\n| project State, event_count\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|State|event_count|\\r\\n|-----|-----------|\\r\\n|TEXAS|4701|\\r\\n|KANSAS|3166|\\r\\n|MISSOURI|2016|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/not-startswith-cs-operator\",\"not-startswith-cs-operator.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.OperatorToken,\"=~\",\"Filters a record set for data with a case-insensitive string.\",'The following table provides a comparison of the `==` (equals) operators:\\r\\n\\r\\n|Operator   |Description   |Case-Sensitive  |Example (yields `true`)  |\\r\\n|-----------|--------------|----------------|-------------------------|\\r\\n|[`==`](equals-cs-operator.md)|Equals |Yes|`\"aBc\" == \"aBc\"`|\\r\\n|[`!=`](not-equals-cs-operator.md)|Not equals |Yes |`\"abc\" != \"ABC\"`|\\r\\n|[`=~`](equals-operator.md) |Equals |No |`\"abc\" =~ \"ABC\"`|\\r\\n|[`!~`](not-equals-operator.md) |Not equals |No |`\"aBc\" !~ \"xyz\"`|\\r\\n\\r\\nFor more information about other operators and to determine which operator is most appropriate for your query, see [datatype string operators](datatypes-string-operators.md).\\r\\n\\r\\n## Performance tips\\r\\n\\r\\n[!INCLUDE [performance-tip-note](../../includes/performance-tip-note.md)]\\r\\n\\r\\nWhen possible, use [==](equals-cs-operator.md) - a case-sensitive version of the operator.\\r\\n\\r\\n## Syntax\\r\\n\\r\\n*T* `|` `where` *col* `=~` `(`*expression*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *T* | string | &check;| The tabular input whose records are to be filtered. |\\r\\n| *col* | string | &check; | The column to filter. |\\r\\n| *expression* | string | &check; | The expression used to filter. |\\r\\n\\r\\n## Returns\\r\\n\\r\\nRows in *T* for which the predicate is `true`.','The `State` values in the `StormEvents` table are capitalized. The following query matches\\r\\ncolumns with the value \"KANSAS\".\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAwsuyS/KdS1LzSsp5qpRKM9ILUpVCC5JLElVsK1TUMpOzCtOLFYCyhQU5WelJpcogJV6puhAFAEAU9ecID4AAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nStormEvents\\r\\n| where State =~ \"kansas\"\\r\\n| project EventId, State\\r\\n```\\r\\n\\r\\nThe following table only shows the first 10 results. To see the full output, run the query.\\r\\n\\r\\n|EventId|State|\\r\\n|--|--|\\r\\n|70787 |KANSAS|\\r\\n|43450 |KANSAS|\\r\\n|43451 |KANSAS|\\r\\n|38844 |KANSAS|\\r\\n|18463 |KANSAS|\\r\\n|18464 |KANSAS|\\r\\n|18495 |KANSAS|\\r\\n|43466 |KANSAS|\\r\\n|43467 |KANSAS|\\r\\n|43470 |KANSAS|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/equals-operator\",\"equals-operator.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.OperatorToken,\"==\",\"Filters a record set for data matching a case-sensitive string.\",'The following table provides a comparison of the `==` operators:\\r\\n\\r\\n|Operator   |Description   |Case-Sensitive  |Example (yields `true`)  |\\r\\n|-----------|--------------|----------------|-------------------------|\\r\\n|[`==`](equals-cs-operator.md)|Equals |Yes|`\"aBc\" == \"aBc\"`|\\r\\n|[`!=`](not-equals-cs-operator.md)|Not equals |Yes |`\"abc\" != \"ABC\"`|\\r\\n|[`=~`](equals-operator.md) |Equals |No |`\"abc\" =~ \"ABC\"`|\\r\\n|[`!~`](not-equals-operator.md) |Not equals |No |`\"aBc\" !~ \"xyz\"`|\\r\\n\\r\\nFor more information about other operators and to determine which operator is most appropriate for your query, see [datatype string operators](datatypes-string-operators.md).\\r\\n\\r\\n## Performance tips\\r\\n\\r\\n[!INCLUDE [performance-tip-note](../../includes/performance-tip-note.md)]\\r\\n\\r\\n## Syntax\\r\\n\\r\\n*T* `|` `where` *col* `==` `(`*expression*`,` ... `)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *T* | string | &check;| The tabular input whose records are to be filtered. |\\r\\n| *col* | string | &check; | The column to filter. |\\r\\n| *expression* | string | &check; | The expression used to filter. |\\r\\n\\r\\n## Returns\\r\\n\\r\\nRows in *T* for which the predicate is `true`.','> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAwsuyS/KdS1LzSsp5lIAghqF8ozUolSF4JLEklQFW1sFpezEvOLEYiWobHJ+aV4JACj9bS01AAAA\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nStormEvents\\r\\n| where State == \"kansas\"\\r\\n| count \\r\\n```\\r\\n\\r\\n|Count|\\r\\n|---|\\r\\n|0|  \\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAwsuyS/KdS1LzSsp5qpRKM9ILUpVCC5JLElVsLVVUPJ29At2DFYCyiTnl+aVAABkHSoPLQAAAA==\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nStormEvents\\r\\n| where State == \"KANSAS\"\\r\\n| count \\r\\n```\\r\\n\\r\\n|Count|\\r\\n|---|\\r\\n|3,166|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/equals-cs-operator\",\"equals-cs-operator.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"abs\",\"Calculates the absolute value of the input.\",\"## Syntax\\r\\n\\r\\n`abs(`*x*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *x* | int, real, or timespan | &check; | The value to make absolute. |\\r\\n\\r\\n## Returns\\r\\n\\r\\nAbsolute value of x.\",'> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAysoyswrUUhMKtbQNdUEADsyYK4NAAAA\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint abs(-5)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|print_0|\\r\\n|------|\\r\\n|5|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/abs-function\",\"abs-function.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"acos\",\"Calculates the angle whose cosine is the specified number. Inverse operation of [`cos()`](cosfunction.md).\",\"## Syntax\\r\\n\\r\\n`acos(`*x*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *x* | real | &check; | The value used to calculate the arc cosine. |\\r\\n\\r\\n## Returns\\r\\n\\r\\nThe value of the arc cosine of `x`. The return value is `null` if `x` < -1 or `x` > 1.\",\"\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/acosfunction\",\"\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"active_users_count\",\"Calculates distinct count of values, where each value has appeared in at least a minimum number of periods in a lookback period.\",'Useful for calculating distinct counts of \"fans\" only, while not including appearances of \"non-fans\". A user is counted as a \"fan\" only if it was active during the lookback period. The lookback period is only used to determine whether a user is considered `active` (\"fan\") or not. The aggregation itself doesn\\'t include users from the lookback window. In comparison, the [sliding_window_counts](sliding-window-counts-plugin.md) aggregation is performed over a sliding window of the lookback period.\\r\\n\\r\\n## Syntax\\r\\n\\r\\n*T* `| evaluate` `active_users_count(`*IdColumn*`,` *TimelineColumn*`,` *Start*`,` *End*`,` *LookbackWindow*`,` *Period*`,` *ActivePeriodsCount*`,` *Bin* `,` [*dim1*`,` *dim2*`,` ...]`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n| -- | -- | -- | -- |\\r\\n| *T* | string | &check; | The tabular input used to count active users.|\\r\\n| *IdColumn* | string | &check; | The name of the column with ID values that represent user activity. |\\r\\n| *TimelineColumn* | string | &check; | The name of the column that represents timeline. |\\r\\n| *Start* | datetime |  &check;  | The analysis start period. |\\r\\n| *End* | datetime | &check; | The analysis end period. |\\r\\n| *LookbackWindow* | timespan | &check; | The time window defining a period where user appearance is checked. The lookback period starts at ([current appearance] - [lookback window]) and ends on ([current appearance]). |\\r\\n| *Period* | timespan | &check; | A constant to count as single appearance (a user will be counted as active if it appears in at least distinct ActivePeriodsCount of this timespan. |\\r\\n| *ActivePeriodsCount* | decimal | &check; | The minimal number of distinct active periods to decide if user is active. Active users are those users who appeared in at least (equal or greater than) active periods count. |\\r\\n| *Bin* | decimal, datetime, or timespan | &check; | A constant value of the analysis step period. May also be a string of `week`, `month`, or `year`. All periods will be the corresponding [startofweek](startofweekfunction.md), [startofmonth](startofmonthfunction.md), or[startofyear](startofyearfunction.md) functions. |\\r\\n| *dim1*, *dim2*, ... | dynamic |   | An array of the dimensions columns that slice the activity metrics calculation. |\\r\\n\\r\\n## Returns\\r\\n\\r\\nReturns a table that has distinct count values for IDs that have appeared in ActivePeriodCounts in the following periods: the lookback period, each timeline period, and each existing dimensions combination.\\r\\n\\r\\nOutput table schema is:\\r\\n\\r\\n|*TimelineColumn*|dim1|..|dim_n|dcount_values|\\r\\n|---|---|---|---|---|\\r\\n|type: as of *TimelineColumn*|..|..|..|long|','Calculate weekly number of distinct users that appeared in at least three different days over a period of prior eight days. Period of analysis: July 2018.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA42SwWvCMBTG74X+Dw9PFlJI0rJWhweF3XYYWNlhDIltGMGaSJO6y/74vdZWNlFMcnrv/ZJ85Ptq6WDtRONgAZVw0qmDnHLK8phmMWXRcxjUiLzo6haQXIBXY/Y7Ue7fla7MN7J5NUzeZKNMd5qNnWXp1Eme+xYHydBfKY1VNmIFFt2TuHe1nG6sbObWNUp/EShQhXXicJyPmqIw+AgDwDVZTQj060rvU8xnEXkIJfQCLe9A+DX84U0IpT5Q7vEc89HEUh8o84A49RDOU/zzTzSrgB+QJ1G3SIDozd226JbdlqbVrnfuj2XkHDjShYpcBYcMcSH/Q0K6bES/nOHnRKwCAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nlet Start = datetime(2018-07-01);\\r\\nlet End = datetime(2018-07-31);\\r\\nlet LookbackWindow = 8d;\\r\\nlet Period = 1d;\\r\\nlet ActivePeriods = 3;\\r\\nlet Bin = 7d;\\r\\nlet T =  datatable(User:string, Timestamp:datetime)\\r\\n[\\r\\n    \"B\",      datetime(2018-06-29),\\r\\n    \"B\",      datetime(2018-06-30),\\r\\n    \"A\",      datetime(2018-07-02),\\r\\n    \"B\",      datetime(2018-07-04),\\r\\n    \"B\",      datetime(2018-07-08),\\r\\n    \"A\",      datetime(2018-07-10),\\r\\n    \"A\",      datetime(2018-07-14),\\r\\n    \"A\",      datetime(2018-07-17),\\r\\n    \"A\",      datetime(2018-07-20),\\r\\n    \"B\",      datetime(2018-07-24)\\r\\n];\\r\\nT | evaluate active_users_count(User, Timestamp, Start, End, LookbackWindow, Period, ActivePeriods, Bin)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|Timestamp|dcount|\\r\\n|---|---|\\r\\n|2018-07-01 00:00:00.0000000|1|\\r\\n|2018-07-15 00:00:00.0000000|1|\\r\\n\\r\\nA user is considered active if it fulfills both of the following criteria:\\r\\n\\r\\n* The user was seen in at least three distinct days (Period = 1d, ActivePeriods=3).\\r\\n* The user was seen in a lookback window of 8d before and including their current appearance.\\r\\n\\r\\n\\r\\nIn the illustration below, the only appearances that are active by this criteria are the following instances: User A on 7/20 and User B on 7/4 (see plugin results above).\\r\\nThe appearances of User B are included for the lookback window on 7/4, but not for the Start-End time range of 6/29-30.\\r\\n\\r\\n![Graph showing active users based on the loopback window and active period specified in the query.](images/queries/active-users-count.png)',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/active-users-count-plugin\",\"active-users-count-plugin.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"activity_counts_metrics\",\"Calculates useful activity metrics for each time window compared/aggregated to *all* previous time windows. Metrics include: total count values, distinct count values, distinct count of new values, and aggregated distinct count. Compare this plugin to [activity_metrics plugin](activity-metrics-plugin.md), in which every time window is compared to its previous time window only.\",\"## Syntax\\r\\n\\r\\n*T* `| evaluate` `activity_counts_metrics(`*IdColumn*`,` *TimelineColumn*`,` *Start*`,` *End*`,` *Step* [`,` *Dimensions*]`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *T* | string | &check; | The tabular input used to count activities. |\\r\\n| *IdColumn* | string | &check; | The name of the column with ID values that represent user activity. |\\r\\n| *TimelineColumn* | string | &check; | The name of the column that represents the timeline. |\\r\\n| *Start* | datetime | &check; | The analysis start period. |\\r\\n| *End* | datetime | &check; | The analysis end period. |\\r\\n| *Step* | decimal, datetime, or timespan | &check; | The analysis window period. The value may also be a string of `week`, `month`, or `year`, in which case all periods would be [startofweek](startofweekfunction.md), [startofmonth](startofmonthfunction.md), or [startofyear](startofyearfunction.md). |\\r\\n|  *Dimensions* | string |   | Zero or more comma-separated dimensions columns that slice the activity metrics calculation. |\\r\\n\\r\\n## Returns\\r\\n\\r\\nReturns a table that has the total count values, distinct count values, distinct count of new values, and aggregated distinct count for each time window. If *Dimensions* are provided, then there's another column for each dimension in the output table.\\r\\n\\r\\nThe following table describes the output table schema.\\r\\n\\r\\n| Column name | Type | Description |\\r\\n|---|---|---|\\r\\n| `Timestamp` | Same as the provided *TimelineColumn* argument| The time window start time. |\\r\\n| `count` | long | The total records count in the time window and *dim(s)* |\\r\\n| `dcount` | long | The distinct ID values count in the time window and *dim(s)* |\\r\\n| `new_dcount` | long | The distinct ID values in the time window and *dim(s)* compared to all previous time windows. |\\r\\n| `aggregated_dcount` | long | The total aggregated distinct ID values of *dim(s)* from first-time window to current (inclusive). |\",\"### Daily activity counts\\r\\n\\r\\nThe next query calculates daily activity counts for the provided input table.\\r\\n\\r\\n> [!div class=\\\"nextstepaction\\\"]\\r\\n> <a href=\\\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA5XSzwuCMBQH8Lvg/7CbCQs0g6Lw0I9DdW2dImS5EYOp4V5J0B/fKxU6jEUMD+PzeG/yfVoCMcBrSAUHCaqQg1EUT4bRdBjF4dz3NBbIUlh43HOjSlE1aSy6OyMpwXI8Zy0HByPrrZgZqFV5oYRhDxxYXGd9x9D3jr4XLAJKbG+gaGuH7Ry2dNjKaqOPMYfZ57W2sVri6Pnb7PMSx/+1tv/bxm87YYiE4fck8s71DasIz0HdFTyyvLqVYLJCYpi56aL9ypS2u0TfG0O7vQhfyOSsfmMCAAA=\\\" target=\\\"_blank\\\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nlet start=datetime(2017-08-01);\\r\\nlet end=datetime(2017-08-04);\\r\\nlet window=1d;\\r\\nlet T = datatable(UserId:string, Timestamp:datetime)\\r\\n[\\r\\n'A', datetime(2017-08-01),\\r\\n'D', datetime(2017-08-01),\\r\\n'J', datetime(2017-08-01),\\r\\n'B', datetime(2017-08-01),\\r\\n'C', datetime(2017-08-02),\\r\\n'T', datetime(2017-08-02),\\r\\n'J', datetime(2017-08-02),\\r\\n'H', datetime(2017-08-03),\\r\\n'T', datetime(2017-08-03),\\r\\n'T', datetime(2017-08-03),\\r\\n'J', datetime(2017-08-03),\\r\\n'B', datetime(2017-08-03),\\r\\n'S', datetime(2017-08-03),\\r\\n'S', datetime(2017-08-04),\\r\\n];\\r\\n T\\r\\n | evaluate activity_counts_metrics(UserId, Timestamp, start, end, window)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|`Timestamp`|`count`|`dcount`|`new_dcount`|`aggregated_dcount`|\\r\\n|---|---|---|---|---|\\r\\n|2017-08-01 00:00:00.0000000|4|4|4|4|\\r\\n|2017-08-02 00:00:00.0000000|3|3|2|6|\\r\\n|2017-08-03 00:00:00.0000000|6|5|2|8|\\r\\n|2017-08-04 00:00:00.0000000|1|1|0|8|\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/activity-counts-metrics-plugin\",\"activity-counts-metrics-plugin.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"activity_engagement\",\"Calculates activity engagement ratio based on ID column over a sliding timeline window.\",\"The activity_engagement plugin can be used for calculating DAU/WAU/MAU (daily/weekly/monthly activities).\\r\\n\\r\\n## Syntax\\r\\n\\r\\n*T* `| evaluate` `activity_engagement(`*IdColumn*`,` *TimelineColumn*`,` [*Start*`,` *End*`,`] *InnerActivityWindow*`,` *OuterActivityWindow* [`,` *dim1*`,` *dim2*`,` ...]`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *T* | string | &check; | The tabular input used to calculate engagement. |\\r\\n| *IdCoumn* | string | &check; | The name of the column with ID values that represent user activity. |\\r\\n| *TimelineColumn* | string | &check; | The name of the column that represents timeline. |\\r\\n| *Start* | datetime |  | The analysis start period. |\\r\\n| *End* | datetime |  | The analysis end period. |\\r\\n| *InnerActivityWindow* | timespan | &check; | The inner-scope analysis window period. |\\r\\n| *OuterActivityWindow* | timespan | &check; | The outer-scope analysis window period. |\\r\\n| *dim1*, *dim2*, ... | dynamic |  | An array of the dimensions columns that slice the activity metrics calculation. |\\r\\n\\r\\n## Returns\\r\\n\\r\\nReturns a table that has a distinct count of ID values inside an inner-scope window, inside an outer-scope window, and the activity ratio for each inner-scope window period for each existing dimensions combination.\\r\\n\\r\\nOutput table schema is:\\r\\n\\r\\n|TimelineColumn|dcount_activities_inner|dcount_activities_outer|activity_ratio|dim1|..|dim_n|\\r\\n|---|---|---|---|--|--|--|--|--|--|\\r\\n|type: as of *TimelineColumn*|long|long|double|..|..|..|\",'### DAU/WAU calculation\\r\\n\\r\\nThe following example calculates DAU/WAU (Daily Active Users / Weekly Active Users ratio) over a randomly generated data.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA21RQWrDMBC8B/KHvUVKbGy1hByKD6GBviDkUIoR1sZVsS0jr0MCfXxXiigp1NgCrWdmZ3aLAt5wQK8JwevBuB6MJg3uDPOEHnRD9mLJ4rRcdEhQT6Q9QRVQSLZH8VSqXV4qfuVLwuBg/kM8RwR3aRFqo29w9twuKZK782AiHEGZ5eIb8EqhFMTIdW5ohYi8PJFkoYx8AHoGhhBCbtRDuQ5Jpio2FknIrLfl2ssM/tw3quQzV1xXEoJEf8nxOrImWFPdhYJVuo3oziJQJXS2twRMDc9yURTwqrtm7sJMD/tjcdof2RZZFz1ddDeHP2myN07d6hZ7HEi8r6xZfWRxOlkKmcW5sCH+dve4o3df2FCCHfRcn/Rc/QrGXmv2ExN4ZvMiwyaaT9b7AZnMt5byAQAA\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\n// Generate random data of user activities\\r\\nlet _start = datetime(2017-01-01);\\r\\nlet _end = datetime(2017-01-31);\\r\\nrange _day from _start to _end  step 1d\\r\\n| extend d = tolong((_day - _start)/1d)\\r\\n| extend r = rand()+1\\r\\n| extend _users=range(tolong(d*50*r), tolong(d*50*r+100*r-1), 1) \\r\\n| mv-expand id=_users to typeof(long) take 1000000\\r\\n// Calculate DAU/WAU ratio\\r\\n| evaluate activity_engagement([\\'id\\'], _day, _start, _end, 1d, 7d)\\r\\n| project _day, Dau_Wau=activity_ratio*100 \\r\\n| render timechart \\r\\n```\\r\\n\\r\\n![Graph displaying the ratio of daily active users to weekly active users as specified in the query.](images/activity-engagement-plugin/activity-engagement-dau-wau.png)\\r\\n\\r\\n### DAU/MAU calculation\\r\\n\\r\\nThe following example calculates DAU/WAU (Daily Active Users / Weekly Active Users ratio) over a randomly generated data.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA2VRwWrDMAy9F/oPutVuExKvlB1GDmWFnXrsaYxgYjXzSOLgKKWFffxk14yOhcRg5b2n96SigDcc0GtC8HowrgejSYM7wzyhB92QvViyOC0XHRLUE2lPUAUUku1RPJXqOS8Vv/IlYXAw/xG7fBsR3KVFqI2+wdlzu6RI7s6DiXAEZZaLb8ArhVIQI9e5oRUi8vJEkoUy8gHoGRhCCLlRD+U6JJmq2FgkIbPelWsvM/hz36iSz1xxXUkIEv0lx+vImmBNdRcKVuk2ojuLQJXQ2d4SMDU8y0VRwKvumrkLMz3sT8Vxf2JbZF30dNHdHP6kyd44datb7HEg8b6yZvWRxelkKWQW58KG+NuW97yjd1/YUMId9Fwf9Vz9KsZmazYUI3im8ybDKppPFvwB0tS5hPMBAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\n// Generate random data of user activities\\r\\nlet _start = datetime(2017-01-01);\\r\\nlet _end = datetime(2017-05-31);\\r\\nrange _day from _start to _end  step 1d\\r\\n| extend d = tolong((_day - _start)/1d)\\r\\n| extend r = rand()+1\\r\\n| extend _users=range(tolong(d*50*r), tolong(d*50*r+100*r-1), 1) \\r\\n| mv-expand id=_users to typeof(long) take 1000000\\r\\n// Calculate DAU/MAU ratio\\r\\n| evaluate activity_engagement([\\'id\\'], _day, _start, _end, 1d, 30d)\\r\\n| project _day, Dau_Mau=activity_ratio*100 \\r\\n| render timechart \\r\\n```\\r\\n\\r\\n![Graph displaying the ratio of daily active users to monthly active users as specified in the query.](images/activity-engagement-plugin/activity-engagement-dau-mau.png)\\r\\n\\r\\n### DAU/MAU calculation with additional dimensions\\r\\n\\r\\nThe following example calculates DAU/WAU (Daily Active Users / Weekly Active Users ratio) over a randomly generated data with additional dimension (`mod3`).\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA2VRwWrDMAy9D/oPojBqtwmJF8oOI4eywk499jRGMLGaeSRxcJTSwj5+shtGx0JisPL03tNTlsEb9ug1IXjdG9eB0aTBnWAa0YOuyZ4tWRwXDy0SVCNpT1AGFJLtUDzl6jnNFb/yZcZgb/4jtmkREazSIFRGX+HkWW5mJHfrg5FwAGUWD9+AFwqlQEaudX0jROxL5yaZKSPvgJ6BYQghN+quXIVJxjIKi5nIrLf52ssE/tw3KuczVVxXEgJFd07xMjAnWFPeiIJVug7oTiK0SmhtZwm4NTx3up0zBTsaydeaxDJcy2XCRPAIBfvOMnjVbT21Ifz97pgddkf2T9ZFkrNup/BnXsGV42l0gx32JN5X1qw+khhjMqeRxADZOX9FzkcQjPEM3n1hTTN6r6fqoKfylzdKrtn/rSXO7ZmK1x/2V38y+Q8r5V3jKAIAAA==\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\n// Generate random data of user activities\\r\\nlet _start = datetime(2017-01-01);\\r\\nlet _end = datetime(2017-05-31);\\r\\nrange _day from _start to _end  step 1d\\r\\n| extend d = tolong((_day - _start)/1d)\\r\\n| extend r = rand()+1\\r\\n| extend _users=range(tolong(d*50*r), tolong(d*50*r+100*r-1), 1) \\r\\n| mv-expand id=_users to typeof(long) take 1000000\\r\\n| extend mod3 = strcat(\"mod3=\", id % 3)\\r\\n// Calculate DAU/MAU ratio\\r\\n| evaluate activity_engagement([\\'id\\'], _day, _start, _end, 1d, 30d, mod3)\\r\\n| project _day, Dau_Mau=activity_ratio*100, mod3 \\r\\n| render timechart \\r\\n```\\r\\n\\r\\n![Graph displaying the ratio of daily active users to monthly active users with modulo 3 as specified in the query.](images/activity-engagement-plugin/activity-engagement-dau-mau-mod3.png)',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/activity-engagement-plugin\",\"activity-engagement-plugin.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"activity_metrics\",\"Calculates useful metrics that include distinct count values, distinct count of new values, retention rate, and churn rate. This plugin is different from [activity_counts_metrics plugin](activity-counts-metrics-plugin.md) in which every time window is compared to *all* previous time windows.\",\"## Syntax\\r\\n\\r\\n*T* `| evaluate` `activity_metrics(`*IdColumn*`,` *TimelineColumn*`,` [*Start*`,` *End*`,`] *Window* [`,` *dim1*`,` *dim2*`,` ...]`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *T* | string | &check; | The input used to calculate activity metrics. |\\r\\n| *IdCoumn* | string | &check; | The name of the column with ID values that represent user activity. |\\r\\n| *TimelineColumn* | string | &check; | The name of the column that represents timeline. |\\r\\n| *Start* | datetime | &check; | The analysis start period. |\\r\\n| *End* | datetime | &check; | The analysis end period. |\\r\\n| *Step* | decimal, datetime, or timespan | &check; | The analysis window period. This value may also be a string of `week`, `month`, or `year`, in which case all periods will be [startofweek](startofweekfunction.md), [startofmonth](startofmonthfunction.md), or [startofyear](startofyearfunction.md) respectively. |\\r\\n| *dim1*, *dim2*, ... | dynamic |  | An array of the dimensions columns that slice the activity metrics calculation. |\\r\\n\\r\\n## Returns\\r\\n\\r\\nThe plugin returns a table with the distinct count values, distinct count of new values, retention rate, and churn rate for each timeline period for each existing dimensions combination.\\r\\n\\r\\nOutput table schema is:\\r\\n\\r\\n|*TimelineColumn*|dcount_values|dcount_newvalues|retention_rate|churn_rate|dim1|..|dim_n|\\r\\n|---|---|---|---|---|--|--|--|--|--|--|\\r\\n|type: as of *TimelineColumn*|long|long|double|double|..|..|..|\\r\\n\\r\\n### Notes\\r\\n\\r\\n***Retention Rate Definition***\\r\\n\\r\\n`Retention Rate` over a period is calculated as:\\r\\n\\r\\n> *number of customers returned during the period*\\r\\n> / (divided by)\\r\\n> *number customers at the beginning of the period*\\r\\n\\r\\nwhere the `# of customers returned during the period` is defined as:\\r\\n\\r\\n> *number of customers at end of period*\\r\\n> \\\\- (minus)\\r\\n> *number of new customers acquired during the period*\\r\\n\\r\\n`Retention Rate` can vary from 0.0 to 1.0\\r\\nA higher score means a larger number of returning users.\\r\\n\\r\\n***Churn Rate Definition***\\r\\n\\r\\n`Churn Rate` over a period is calculated as:\\r\\n\\r\\n> *number of customers lost in the period*\\r\\n> / (divided by)\\r\\n> *number of customers at the beginning of the period*\\r\\n\\r\\nwhere the `# of customer lost in the period` is defined as:\\r\\n\\r\\n> *number of customers at the beginning of the period*\\r\\n> \\\\- (minus)\\r\\n> *number of customers at the end of the period*\\r\\n\\r\\n`Churn Rate` can vary from 0.0 to 1.0\\r\\nThe higher score means the larger number of users are NOT returning to the service.\\r\\n\\r\\n***Churn vs. Retention Rate***\\r\\nThe churn vs. retention Rate is derived from the definition of `Churn Rate` and `Retention Rate`. The following calculation is always true:\\r\\n\\r\\n> [`Retention Rate`] = 100.0% - [`Churn Rate`]\",'### Weekly retention rate and churn rate\\r\\n\\r\\nThe next query calculates retention and churn rate for week-over-week window.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA2VRy26EIBTdm/gPdzc4g1FsJrNoXPcjmsYQuc7QqBi4mjHpxxeQxTRlQeDmPDiHqoIPnNFKQrByVmYCJUmCGWB1aEH2pDdNGl2ejUjQOZKWoA0oJD0ha2pxK2tR1k3xnjA4q/+Ia/kmAsK73BE6JXcYrLdLimQOHjjCBYTKsx/AJ4VRECMzmvnOWOSViVRUQhUvQOuBIQQrLuJl3IUkro3GLAmp87U+24LDn/ulqf1eCj8XUXjaSnwuXhK0ag+d8FLaFzQDC8wCRj1pAlHHlWdVFa03Oa6h1FTg3k1IVveOfZ60On3x2ABPQXjMzuF2xFms+caeEsSiT0HazF34JQ79Y7XHOWCtJ/p/CkX3Dy/1C38j6lLRAQAA\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\n// Generate random data of user activities\\r\\nlet _start = datetime(2017-01-02);\\r\\nlet _end = datetime(2017-05-31);\\r\\nrange _day from _start to _end  step 1d\\r\\n| extend d = tolong((_day - _start)/1d)\\r\\n| extend r = rand()+1\\r\\n| extend _users=range(tolong(d*50*r), tolong(d*50*r+200*r-1), 1)\\r\\n| mv-expand id=_users to typeof(long) take 1000000\\r\\n//\\r\\n| evaluate activity_metrics([\\'id\\'], _day, _start, _end, 7d)\\r\\n| project _day, retention_rate, churn_rate\\r\\n| render timechart\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|_day|retention_rate|churn_rate|\\r\\n|---|---|---|\\r\\n|2017-01-02 00:00:00.0000000|NaN|NaN|\\r\\n|2017-01-09 00:00:00.0000000|0.179910044977511|0.820089955022489|\\r\\n|2017-01-16 00:00:00.0000000|0.744374437443744|0.255625562556256|\\r\\n|2017-01-23 00:00:00.0000000|0.612096774193548|0.387903225806452|\\r\\n|2017-01-30 00:00:00.0000000|0.681141439205955|0.318858560794045|\\r\\n|2017-02-06 00:00:00.0000000|0.278145695364238|0.721854304635762|\\r\\n|2017-02-13 00:00:00.0000000|0.223172628304821|0.776827371695179|\\r\\n|2017-02-20 00:00:00.0000000|0.38|0.62|\\r\\n|2017-02-27 00:00:00.0000000|0.295519001701645|0.704480998298355|\\r\\n|2017-03-06 00:00:00.0000000|0.280387770320656|0.719612229679344|\\r\\n|2017-03-13 00:00:00.0000000|0.360628154795289|0.639371845204711|\\r\\n|2017-03-20 00:00:00.0000000|0.288008028098344|0.711991971901656|\\r\\n|2017-03-27 00:00:00.0000000|0.306134969325153|0.693865030674847|\\r\\n|2017-04-03 00:00:00.0000000|0.356866537717602|0.643133462282398|\\r\\n|2017-04-10 00:00:00.0000000|0.495098039215686|0.504901960784314|\\r\\n|2017-04-17 00:00:00.0000000|0.198296836982968|0.801703163017032|\\r\\n|2017-04-24 00:00:00.0000000|0.0618811881188119|0.938118811881188|\\r\\n|2017-05-01 00:00:00.0000000|0.204657727593507|0.795342272406493|\\r\\n|2017-05-08 00:00:00.0000000|0.517391304347826|0.482608695652174|\\r\\n|2017-05-15 00:00:00.0000000|0.143667296786389|0.856332703213611|\\r\\n|2017-05-22 00:00:00.0000000|0.199122325836533|0.800877674163467|\\r\\n|2017-05-29 00:00:00.0000000|0.063468992248062|0.936531007751938|\\r\\n\\r\\n![Table showing the calculated retention and churn rates per seven days as specified in the query.](images/activity-metrics-plugin/activity-metrics-churn-and-retention.png)\\r\\n\\r\\n### Distinct values and distinct \\'new\\' values\\r\\n\\r\\nThe next query calculates distinct values and \\'new\\' values (IDs that didn\\'t appear in previous time window) for week-over-week window.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA2VRTWuEMBC9C/6HuW3cVTSWZQ/Fc39EKRLM7DaLJpKMdoX++CYxlC3NITCP95E3qWt4Q41WEIIVWpoJpCAB5gqLQwtiILUqUujybESC3pGwBF1gIakJWdvwS9XwqmmL18RBLf8zztULDwyfckPopdjgan1cciSz68ARzsBlnn0DPihAwYzMaPSNsairkqiouSyeiNYTQwlWnPgT3IcmrovBLBnJ47k52qKEP/OpbfxdcY/zaDytFT5mbwlKdrtPeCltM5orC8oCRjUpAt7Ek2d1HaNXMS5hqWmBWz8hWTU49n5Q8vBRxg2UqUgZu5dw2evM1txxoESRg1k09cEQ3e+o8WtHgsB6tf+ssO3h0/v9ADoJzJ7WAQAA\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\n// Generate random data of user activities\\r\\nlet _start = datetime(2017-01-02);\\r\\nlet _end = datetime(2017-05-31);\\r\\nrange _day from _start to _end  step 1d\\r\\n| extend d = tolong((_day - _start)/1d)\\r\\n| extend r = rand()+1\\r\\n| extend _users=range(tolong(d*50*r), tolong(d*50*r+200*r-1), 1)\\r\\n| mv-expand id=_users to typeof(long) take 1000000\\r\\n//\\r\\n| evaluate activity_metrics([\\'id\\'], _day, _start, _end, 7d)\\r\\n| project _day, dcount_values, dcount_newvalues\\r\\n| render timechart\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n| _day | dcount_values | dcount_newvalues |\\r\\n|--|--|--|\\r\\n| 2017-01-02 00:00:00.0000000 | 630 | 630 |\\r\\n| 2017-01-09 00:00:00.0000000 | 738 | 575 |\\r\\n| 2017-01-16 00:00:00.0000000 | 1187 | 841 |\\r\\n| 2017-01-23 00:00:00.0000000 | 1092 | 465 |\\r\\n| 2017-01-30 00:00:00.0000000 | 1261 | 647 |\\r\\n| 2017-02-06 00:00:00.0000000 | 1744 | 1043 |\\r\\n| 2017-02-13 00:00:00.0000000 | 1563 | 432 |\\r\\n| 2017-02-20 00:00:00.0000000 | 1406 | 818 |\\r\\n| 2017-02-27 00:00:00.0000000 | 1956 | 1429 |\\r\\n| 2017-03-06 00:00:00.0000000 | 1593 | 848 |\\r\\n| 2017-03-13 00:00:00.0000000 | 1801 | 1423 |\\r\\n| 2017-03-20 00:00:00.0000000 | 1710 | 1017 |\\r\\n| 2017-03-27 00:00:00.0000000 | 1796 | 1516 |\\r\\n| 2017-04-03 00:00:00.0000000 | 1381 | 1008 |\\r\\n| 2017-04-10 00:00:00.0000000 | 1756 | 1162 |\\r\\n| 2017-04-17 00:00:00.0000000 | 1831 | 1409 |\\r\\n| 2017-04-24 00:00:00.0000000 | 1823 | 1164 |\\r\\n| 2017-05-01 00:00:00.0000000 | 1811 | 1353 |\\r\\n| 2017-05-08 00:00:00.0000000 | 1691 | 1246 |\\r\\n| 2017-05-15 00:00:00.0000000 | 1812 | 1608 |\\r\\n| 2017-05-22 00:00:00.0000000 | 1740 | 1017 |\\r\\n| 2017-05-29 00:00:00.0000000 | 960 | 756 |\\r\\n\\r\\n![Table showing the count of distinct values (dcount_values) and of new distinct values (dcount_newvalues) that didn](images/activity-metrics-plugin/activity-metrics-dcount-and-dcount-newvalues.png)',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/activity-metrics-plugin\",\"activity-metrics-plugin.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"ago\",\"Subtracts the given [timespan](scalar-data-types/timespan.md) from the current UTC time.\",\"Like `now()`, if you use `ago()` multiple times in a single query statement, the current UTC time\\r\\nbeing referenced will be the same across all uses.\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`ago(`*timespan*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n| -- | -- | -- | -- |\\r\\n| *timespan* | timespan | &check; | The interval to subtract from the current UTC clock time `now()`. |\\r\\n\\r\\n## Returns\\r\\n\\r\\nA [datetime](./scalar-data-types/datetime.md) value `now() - a_timespan`\",\"All rows with a timestamp in the past hour:\\r\\n\\r\\n```\\r\\nT | where Timestamp > ago(1h)\\r\\n```\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/agofunction\",\"agofunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"arg_max\",\"Finds a row in the group that maximizes *ExprToMaximize*.\",\"[!INCLUDE [data-explorer-agg-function-summarize-note](../../includes/data-explorer-agg-function-summarize-note.md)]\\r\\n\\r\\n> **Deprecated aliases:** argmax()\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`arg_max` `(`*ExprToMaximize*`,` *\\\\** | *ExprToReturn*  [`,` ...]`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *ExprToMaximize* | string | &check; | The expression used for aggregation calculation. |\\r\\n| *ExprToReturn* | string | &check; | The expression used for returning the value when *ExprToMaximize* is maximum.  Use a wildcard `*` to return all columns of the input table. |\\r\\n\\r\\n## Returns\\r\\n\\r\\nReturns a row in the group that maximizes *ExprToMaximize*, and the values of columns specified in *ExprToReturn*.\",'Find the maximum latitude of a storm event in each state.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAwsuyS/KdS1LzSspVuCqUSguzc1NLMqsSlVILEqPz02s0HBKTc/M80ks0VGAsPKTE0sy8/M0FZIqFYJLEktSATqyPZtCAAAA\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nStormEvents \\r\\n| summarize arg_max(BeginLat, BeginLocation) by State\\r\\n```\\r\\n\\r\\nThe results table displays only the first 10 rows.\\r\\n\\r\\n| State                | BeginLat | BeginLocation        |\\r\\n| -------------------- | -------- | -------------------- |\\r\\n| MISSISSIPPI          | 34.97    | BARTON               |\\r\\n| VERMONT              | 45       | NORTH TROY           |\\r\\n| AMERICAN SAMOA       | -14.2    | OFU                  |\\r\\n| HAWAII               | 22.2113  | PRINCEVILLE          |\\r\\n| MINNESOTA            | 49.35    | ARNESEN              |\\r\\n| RHODE ISLAND         | 42       | WOONSOCKET           |\\r\\n| INDIANA              | 41.73    | FREMONT              |\\r\\n| WEST VIRGINIA        | 40.62    | CHESTER              |\\r\\n| SOUTH CAROLINA       | 35.18    | LANDRUM              |\\r\\n| TEXAS                | 36.4607  | DARROUZETT           |\\r\\n| ...             | ...    | ...            |\\r\\n\\r\\nFind the last time an event with a direct death happened in each state showing all the columns.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAwsuyS/KdS1LzSsp5qpRKM9ILUpVcElNLMkodsksSk0uUbBTMABKFJfm5iYWZValKiQWpcfnJlZoBJckFpWEZOam6ihoaSokVSoABUpSAQPollZPAAAA\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nStormEvents\\r\\n| where DeathsDirect > 0\\r\\n| summarize arg_max(StartTime, *) by State\\r\\n```\\r\\n\\r\\nThe results table displays only the first 10 rows and first 3 columns.\\r\\n\\r\\n| State          | StartTime            | EndTime              | ... |\\r\\n| -------------- | -------------------- | -------------------- | --- |\\r\\n| GUAM           | 2007-01-27T11:15:00Z | 2007-01-27T11:30:00Z | ... |\\r\\n| MASSACHUSETTS  | 2007-02-03T22:00:00Z | 2007-02-04T10:00:00Z | ... |\\r\\n| AMERICAN SAMOA | 2007-02-17T13:00:00Z | 2007-02-18T11:00:00Z | ... |\\r\\n| IDAHO          | 2007-02-17T13:00:00Z | 2007-02-17T15:00:00Z | ... |\\r\\n| DELAWARE       | 2007-02-25T13:00:00Z | 2007-02-26T01:00:00Z | ... |\\r\\n| WYOMING        | 2007-03-10T17:00:00Z | 2007-03-10T17:00:00Z | ... |\\r\\n| NEW MEXICO     | 2007-03-23T18:42:00Z | 2007-03-23T19:06:00Z | ... |\\r\\n| INDIANA        | 2007-05-15T14:14:00Z | 2007-05-15T14:14:00Z | ... |\\r\\n| MONTANA        | 2007-05-18T14:20:00Z | 2007-05-18T14:20:00Z | ... |\\r\\n| LAKE MICHIGAN  | 2007-06-07T13:00:00Z | 2007-06-07T13:00:00Z | ... |\\r\\n|... | ... | ...| ... |\\r\\n\\r\\nThe following example demonstrates null handling.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/kvc6bc487453a064d3c9de.northeurope/databases/new-free-database?query=H4sIAAAAAAAAA31PwQrCMAy97ytCT530osfdnKBX8SCIiHQsjEKWjrRjKH68nWwoguYdkry8l5DaxoSKUG+ld7GAEMVxY2Djycu7PaIE57kAxzGHcwYp1LrrCJUBdcA6paX5oneCyKlIHs09UT4JSssJo+KERH74K/m1ZI9WxnkpfuCP6zM/+1Ymu2QPCH3bWnF3BCvNtXWsp5cMLHKobvD6/wlU5dHuDwEAAA==\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\ndatatable(Fruit: string, Color: string, Version: int) [\\r\\n    \"Apple\", \"Red\", 1,\\r\\n    \"Apple\", \"Green\", int(null),\\r\\n    \"Banana\", \"Yellow\", int(null),\\r\\n    \"Banana\", \"Green\", int(null),\\r\\n    \"Pear\", \"Brown\", 1,\\r\\n    \"Pear\", \"Green\", 2,\\r\\n]\\r\\n| summarize arg_max(Version, *) by Fruit\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n| Fruit | Version | Color |\\r\\n|--|--|--|\\r\\n| Apple | 1 | Red |\\r\\n| Banana |  | Yellow |\\r\\n| Pear | 2 | Green |',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/arg-max-aggfunction\",\"arg-max-aggfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"arg_min\",\"Finds a row in the group that minimizes *ExprToMinimize*.\",\"[!INCLUDE [data-explorer-agg-function-summarize-note](../../includes/data-explorer-agg-function-summarize-note.md)]\\r\\n\\r\\n> **Deprecated aliases:** argmin()\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`arg_min` `(`*ExprToMinimize*`,` *\\\\** | *ExprToReturn*  [`,` ...]`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *ExprToMinimize*| string | &check; | The expression used for aggregation calculation. |\\r\\n| *ExprToReturn* | string | &check; | The expression used for returning the value when *ExprToMinimize* is minimum. Use a wildcard (*) to return all columns of the input table. |\\r\\n\\r\\n## Null handling\\r\\n\\r\\nWhen *ExprToMinimize* is null for all rows in a group, one row in the group is picked. Otherwise, rows where *ExprToMinimize* is null are ignored.\\r\\n\\r\\n## Returns\\r\\n\\r\\nReturns a row in the group that minimizes *ExprToMinimize*, and the value of *ExprToReturn*. Use or `*` to return the entire row.\",'Find the minimum latitude of a storm event in each state.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAwsuyS/KdS1LzSspVuDlqlEoLs3NTSzKrEpVSCxKj8/NzNNwSk3PzPNJLNFRgLDykxNLMvPzNBWSKhWCSxJLUgG8tM4mQwAAAA==\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nStormEvents \\r\\n| summarize arg_min(BeginLat, BeginLocation) by State\\r\\n```\\r\\n\\r\\nThe results table shown includes only the first 10 rows.\\r\\n\\r\\n| State          | BeginLat | BeginLocation |\\r\\n| -------------- | -------- | ------------- |\\r\\n| AMERICAN SAMOA | -14.3    | PAGO PAGO     |\\r\\n| CALIFORNIA     | 32.5709  | NESTOR        |\\r\\n| MINNESOTA      | 43.5     | BIGELOW       |\\r\\n| WASHINGTON     | 45.58    | WASHOUGAL     |\\r\\n| GEORGIA        | 30.67    | FARGO         |\\r\\n| ILLINOIS       | 37       | CAIRO         |\\r\\n| FLORIDA        | 24.6611  | SUGARLOAF KEY |\\r\\n| KENTUCKY       | 36.5     | HAZEL         |\\r\\n| TEXAS          | 25.92    | BROWNSVILLE   |\\r\\n| OHIO           | 38.42    | SOUTH PT      |\\r\\n| ... | ... | ... |\\r\\n\\r\\nFind the first time an event with a direct death happened in each state showing all of the columns.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAwsuyS/KdS1LzSsp5uWqUSjPSC1KVXBJTSzJKHbJLEpNLlGwUzAAyRSX5uYmFmVWpSokFqXH52bmaQSXJBaVhGTmpuooaGkqJFUqAAVKUgHnoTY6UQAAAA==\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nStormEvents\\r\\n| where DeathsDirect > 0\\r\\n| summarize arg_min(StartTime, *) by State\\r\\n```\\r\\n\\r\\nThe results table shown includes only the first 10 rows and first 3 columns.\\r\\n\\r\\n| State      | StartTime            | EndTime              | ... |\\r\\n| ---------- | -------------------- | -------------------- | --- |\\r\\n| INDIANA    | 2007-01-01T00:00:00Z | 2007-01-22T18:49:00Z | ... |\\r\\n| FLORIDA    | 2007-01-03T10:55:00Z | 2007-01-03T10:55:00Z | ... |\\r\\n| NEVADA     | 2007-01-04T09:00:00Z | 2007-01-05T14:00:00Z | ... |\\r\\n| LOUISIANA  | 2007-01-04T15:45:00Z | 2007-01-04T15:52:00Z | ... |\\r\\n| WASHINGTON | 2007-01-09T17:00:00Z | 2007-01-09T18:00:00Z | ... |\\r\\n| CALIFORNIA | 2007-01-11T22:00:00Z | 2007-01-24T10:00:00Z | ... |\\r\\n| OKLAHOMA   | 2007-01-12T00:00:00Z | 2007-01-18T23:59:00Z | ... |\\r\\n| MISSOURI   | 2007-01-13T03:00:00Z | 2007-01-13T08:30:00Z | ... |\\r\\n| TEXAS      | 2007-01-13T10:30:00Z | 2007-01-13T14:30:00Z | ... |\\r\\n| ARKANSAS   | 2007-01-14T03:00:00Z | 2007-01-14T03:00:00Z | ... |\\r\\n| ... | ... | ... | ... |\\r\\n\\r\\nThe following example demonstrates null handling.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA31QPQvCQAzdC/0PoVMrt+jYzQp2FQdBRORKQzlIcyW9UhR/vKlYFEHzhny9F5LUNigqwnQrgws59EEcNwY2nry80wNK7zzn4DhkcIojUEvWXUeYGEj2WKtbmu96KYisgapSHoiymVFYVkyUIxL58T/n55gdWpkIhfiRPzeYG7NypY1zHN2hH9rWirshWGkureP0dZqBRQbVFZ5/eADFBqWOFwEAAA==\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\ndatatable(Fruit: string, Color: string, Version: int) [\\r\\n    \"Apple\", \"Red\", 1,\\r\\n    \"Apple\", \"Green\", int(null),\\r\\n    \"Banana\", \"Yellow\", int(null),\\r\\n    \"Banana\", \"Green\", int(null),\\r\\n    \"Pear\", \"Brown\", 1,\\r\\n    \"Pear\", \"Green\", 2,\\r\\n]\\r\\n| summarize arg_min(Version, *) by Fruit\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n| Fruit | Version | Color |\\r\\n|--|--|--|\\r\\n| Apple | 1 | Red |\\r\\n| Banana |  | Yellow |\\r\\n| Pear | 1 | Brown |',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/arg-min-aggfunction\",\"arg-min-aggfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"around\",\"Creates a `bool` value indicating if the first argument is within a range around the center value.\",'## Syntax\\r\\n\\r\\n`around(`*value*`,`*center*`,`*delta*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n|*value*| int, long, real, datetime, or timespan | &check; | The value to compare to the *center*.|\\r\\n| *center* | int, long, real, datetime, or timespan | &check; | The center of the range defined as [(`center`-`delta`) .. (`center` + `delta`)]. |\\r\\n| *delta* | int, long, real, datetime, or timespan | &check; | The delta value of the range defined as [(`center`-`delta`) .. (`center` + `delta`)].|\\r\\n\\r\\n## Returns\\r\\n\\r\\nReturns `true` if the value is within the range, `false` if the value is outside the range.\\r\\nReturns `null` if any of the arguments is `null`.\\r\\n\\r\\n## Example: Filtering values around a specific timestamp\\r\\n\\r\\nThe following example filters rows around specific timestamp.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAytKzEtPVUgpUeBSAIK0ovxchZTEktSSzNxUDSMDI0NdAxBSMDC0MjDQhCgqyceuxAihpLgktUDBMDczj6tGoTwjtShVIbEovzQvRSOlRAeX+cYGmjpgPZoA56xhi5QAAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nrange dt \\r\\n    from datetime(2021-01-01 01:00) \\r\\n    to datetime(2021-01-01 02:00) \\r\\n    step 1min\\r\\n| where around(dt, datetime(2021-01-01 01:30), 1min)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|dt|\\r\\n|---|\\r\\n|2021-01-01 01:29:00.0000000|\\r\\n|2021-01-01 01:30:00.0000000|\\r\\n|2021-01-01 01:31:00.0000000|',\"\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/around-function\",\"\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"array_concat\",\"Concatenates many dynamic arrays to a single array.\",\"## Syntax\\r\\n\\r\\n`array_concat(`*arr*`[`, `*arr2*, ...]`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *arr1...arrN* | dynamic | &check; | The arrays to concatenate into a dynamic array.|\\r\\n\\r\\n## Returns\\r\\n\\r\\nReturns a dynamic array of arrays with arr1, arr2, ... , arrN.\",'The following example shows concatenated arrays.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA13LMQ6DMAxG4b1S7/CPBGUJnXsWZKUuEogkcj3EiMMTmCrWT+8JpYlR8ZW8IkAzXvgpF4TnYwdX5fSB4d2SHsOfbc3sZhQaForLSCJkXfXmN+dBw91h7vyK5Jmj4uIx5hRJOwrn4Q5bQXxcmgAAAA==\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nrange x from 1 to 3 step 1\\r\\n| extend y = x * 2\\r\\n| extend z = y * 2\\r\\n| extend a1 = pack_array(x,y,z), a2 = pack_array(x, y)\\r\\n| project array_concat(a1, a2)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|Column1|\\r\\n|---|\\r\\n|[1,2,4,1,2]|\\r\\n|[2,4,8,2,4]|\\r\\n|[3,6,12,3,6]|\\r\\n\\r\\n## See also\\r\\n\\r\\n* [pack_array()](packarrayfunction.md)',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/arrayconcatfunction\",\"arrayconcatfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"array_iff\",\"Element-wise iif function on dynamic arrays.\",\"> The `array_iff()` and `array_iif()` functions are equivalent\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`array_iff(`*condition_array*, *when_true*, *when_false*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *condition_array*| dynamic | &check;| An array of *boolean* or numeric values.|\\r\\n| *when_true* | dynamic or scalar | &check; | An array of values or primitive value. This will be the result when *condition_array* is *true*.|\\r\\n| *when_false* | dynamic or scalar | &check; | An array of values or primitive value. This will be the result when *condition_array* is *false*.|\\r\\n\\r\\n> [!NOTE]\\r\\n>\\r\\n> * The length of the return value will be the same as the input *condition_array*.\\r\\n> * Numeric condition values are considered `true` if not equal to 0.\\r\\n> * Non-numeric and non-boolean condition values will be null in the corresponding index of the return value.\\r\\n> * If *when_true* or *when_false* is shorter than *condition_array*, missing values will be treated as null.\\r\\n\\r\\n## Returns\\r\\n\\r\\nReturns a dynamic array of the values taken either from the *when_true* or *when_false* array values, according to the corresponding value of the condition array.\",'> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAysoyswrUUjOz0vJLMnMz7NNqcxLzM1M1oguKSpN1UlLzClO1QExYzV1FHIQsoY6RjrGILEihJiJjqmOWaymAi9XjUJqRUlqXopCUWqxbWJRUWJlfGZmmgbcFqBRQJ2aACda2uZ8AAAA\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint condition=dynamic([true,false,true]), if_true=dynamic([1,2,3]), if_false=dynamic([4,5,6]) \\r\\n| extend res= array_iff(condition, if_true, if_false)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|condition|if_true|if_false|res|\\r\\n|---|---|---|---|\\r\\n|[true, false, true]|[1, 2, 3]|[4, 5, 6]|[1, 5, 3]|\\r\\n\\r\\n### Numeric condition values\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAysoyswrUUjOz0vJLMnMz7NNqcxLzM1M1og21DHQMTWI1dRRyEyLLykqTbVVqkwtVgJz0xJzioH8vHwlBa4ahdSKktS8FIWi1GLbxKKixMr4zMw0DbiJcP0InZoAPCLjbHUAAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint condition=dynamic([1,0,50]), if_true=\"yes\", if_false=\"no\" \\r\\n| extend res= array_iff(condition, if_true, if_false)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|condition|if_true|if_false|res|\\r\\n|---|---|---|---|\\r\\n|[1, 0, 50]|yes|no|[yes, no, yes]|\\r\\n\\r\\n### Non-numeric and non-boolean condition values\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA0WNwQrDIBBE7/2KxZOBFIx3v6SUsMS1LOhadFMa6MdXekhhYAYej3k2FoWtSmTlKiEegoU3ezO9FoKugz/ghXknM0NEJeVC1rjlOuKd92aaQfac76M5rdp2CstvJsydgrt8gN5KEqFRD9gaHitzsufp6f2t6QsxYYlomAAAAA==\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint condition=dynamic([\"some string value\", datetime(\"01-01-2022\"), null]), if_true=1, if_false=0\\r\\n| extend res= array_iff(condition, if_true, if_false)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|condition|if_true|if_false|res|\\r\\n|---|---|---|---|\\r\\n|[true, false, true]|1|0|[null, null, null]|\\r\\n\\r\\n### Mismatched array lengths\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAysoyswrUUjOz0vJLMnMz7NNqcxLzM1M1oguKSpN1YETsZo6Cplp8SAmQomhjhFUPC0xpxhJwljHJFZTgatGIbWiJDUvRaEotdg2sagosTI+MzNNA24Z3EiEGZoACxaCE5AAAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint condition=dynamic([true,true,true]), if_true=dynamic([1,2]), if_false=dynamic([3,4]) \\r\\n| extend res= array_iff(condition, if_true, if_false)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|condition|if_true|if_false|res|\\r\\n|---|---|---|---|\\r\\n|[true, true, true]|[1, 2]|[3, 4]|[1, 2, null]|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/arrayifffunction\",\"arrayifffunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"array_index_of\",\"Searches an array for the specified item, and returns its position.\",\"## Syntax\\r\\n\\r\\n`array_index_of(`*array*,*value*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *array*| dynamic | &check; | The array to search.|\\r\\n| *value* | long, integer, double, datetime, timespan, decimal, string, guid, or boolean | &check; | The value to lookup. |\\r\\n| *start* | number |  | The search start position. A negative value will offset the starting search value from the end of the array by `abs(start_index)` steps.\\r\\n| *length* | int |  | The number of values to examine. A value of -1 means unlimited length.\\r\\n| *occurrence* | int | The number of the occurrence. The default is 1.\\r\\n\\r\\n## Returns\\r\\n\\r\\nReturns a zero-based index position of lookup.\\r\\nReturns -1 if the value isn't found in the array.\\r\\nReturns *null* for irrelevant inputs (*occurrence* < 0 or  *length* < -1).\",'The following example shows the position number of specific words within the array.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA52T7WrCMBiF/3sVB//MQoq0dV8Mr2QMielbDUuTkqRO735pmsk2dQ5LG0jhPOfkvK0iD27tsj5o3koxe536rXRThum4cj2stOdtp+j0xVv2Mums1H4CWe8LLAcYP6ykrmm/Ms0sbNmgyRCu+RzKmPe+Q2N6XUPqcHe9h/OBsZmADZTyAuUYomBVdo5lyRG3Yks1LNcbQgJW14FlBI7ykIZb79BY0yIqUDCsY0zTOfDGk0WJHVc9OQZnvpIIru881jRGSu6LC+5DvyVbnDEeDYwQvbWkBcE0ySEh768dqGR5kZ30ndQP59VptOGoeXjKbJyXI2FCu9/C/BpdbDqRH/9DrhJZG4RPzf5gH6mRkqhPf1LzI4823MsdjS2mwX1IpWIH4B6KO48KpKgl7V3CP1/Cxx8gX9yK/wT41ILVWgMAAA==\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nlet arr=dynamic([\"this\", \"is\", \"an\", \"example\", \"an\", \"example\"]);\\r\\nprint\\r\\n idx1 = array_index_of(arr,\"an\")    // lookup found in input string\\r\\n , idx2 = array_index_of(arr,\"example\",1,3) // lookup found in researched range \\r\\n , idx3 = array_index_of(arr,\"example\",1,2) // search starts from index 1, but stops after 2 values, so lookup can\\'t be found\\r\\n , idx4 = array_index_of(arr,\"is\",2,4) // search starts after occurrence of lookup\\r\\n , idx5 = array_index_of(arr,\"example\",2,-1)  // lookup found\\r\\n , idx6 = array_index_of(arr, \"an\", 1, -1, 2)   // second occurrence found in input range\\r\\n , idx7 = array_index_of(arr, \"an\", 1, -1, 3)   // no third occurrence in input array\\r\\n , idx8 = array_index_of(arr, \"an\", -3)   // negative start index will look at last 3 elements\\r\\n , idx9 = array_index_of(arr, \"is\", -4)   // negative start index will look at last 3 elements\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|idx1|idx2|idx3|idx4|idx5|idx6|idx7|idx8|idx9|\\r\\n|----|----|----|----|----|----|----|----|----|\\r\\n|2   |3   |-1  |-1   |3   |4   |-1  |4  |-1  |\\r\\n\\r\\n## See also\\r\\n\\r\\nUse [set_has_element(`arr`, `value`)](sethaselementfunction.md) to check whether a value exists in an array. This function will improve the readability of your query. Both functions have the same performance.',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/arrayindexoffunction\",\"arrayindexoffunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"array_length\",\"Calculates the number of elements in a dynamic array.\",\"> **Deprecated aliases:** arraylength()\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`array_length(`*array*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *array* | dynamic | &check; | The array for which to calculate length.\\r\\n\\r\\n## Returns\\r\\n\\r\\nReturns the number of elements in *array*, or `null` if *array* isn't an array.\",'The following example shows the number of elements in the array.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAysoyswrUUgsKkqsjM9JzUsvydAoSCwqTo3PKs7P01CPNtRRMNJRMNZRUErLLy1SilXX1AQAe4KK2TMAAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint array_length(dynamic([1, 2, 3, \"four\"]))\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|print_0|\\r\\n|--|\\r\\n|4|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/arraylengthfunction\",\"arraylengthfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"array_reverse\",\"Reverses the order of the elements in a dynamic array.\",\"## Syntax\\r\\n\\r\\n`array_reverse(`*value*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n|*value*| dynamic | &check;| The array to reverse.|\\r\\n\\r\\n## Returns\\r\\n\\r\\nReturns an array that contains the same elements as the input array in reverse order.\",'This example shows an array of words reversed.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAysoyswrUUgsKrJNqcxLzM1M1ohWKsnILFbSUVCCkIl5IDK1IjG3ICdVKVZTgZerRqGgKD8rNblEISi1uDSnxBaoP7Eyvii1LLWoOFUDyNMEAKks9PlYAAAA\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint arr=dynamic([\"this\", \"is\", \"an\", \"example\"]) \\r\\n| project Result=array_reverse(arr)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|Result|\\r\\n|---|\\r\\n|[\"example\",\"an\",\"is\",\"this\"]|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/array-reverse-function\",\"array-reverse-function.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"array_rotate_left\",\"Rotates values inside a `dynamic` array to the left.\",\"## Syntax\\r\\n\\r\\n`array_rotate_left(`*array*, *rotate_count*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n|*array* | dynamic | &check;| The array to rotate.|\\r\\n|*rotate_count*| integer | &check;| The number of positions that array elements will be rotated to the left. If the value is negative, the elements will be rotated to the right.|\\r\\n\\r\\n## Returns\\r\\n\\r\\nDynamic array containing the same elements as the original array with each element rotated according to *rotate_count*.\",'Rotating to the left by two positions:\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAysoyswrUUgsKrJNqcxLzM1M1og21DHSMdYx0TGN1eSqUUitKEnNSwGpiC/KL0ksSU2xBbITK6G8+JzUtBINoIiOgpEmACPTVOVNAAAA\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint arr=dynamic([1,2,3,4,5])\\r\\n| extend arr_rotated=array_rotate_left(arr, 2)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|arr|arr_rotated|\\r\\n|---|---|\\r\\n|[1,2,3,4,5]|[3,4,5,1,2]|\\r\\n\\r\\nRotating to the right by two positions by using negative rotate_count value:\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAysoyswrUUgsKrJNqcxLzM1M1og21DHSMdYx0TGN1eSqUUitKEnNSwGpiC/KL0ksSU2xBbITK6G8+JzUtBINoIiOgq6RJgCXfX6MTgAAAA==\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint arr=dynamic([1,2,3,4,5])\\r\\n| extend arr_rotated=array_rotate_left(arr, -2)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|arr|arr_rotated|\\r\\n|---|---|\\r\\n|[1,2,3,4,5]|[4,5,1,2,3]|\\r\\n\\r\\n## See also\\r\\n\\r\\n* To rotate an array to the right, use [array_rotate_right()](array_rotate_rightfunction.md).\\r\\n* To shift an array to the left, use [array_shift_left()](array_shift_leftfunction.md).\\r\\n* To shift an array to the right, use [array_shift_right()](array_shift_rightfunction.md)',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/array_rotate_leftfunction\",\"array_rotate_leftfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"array_rotate_right\",\"Rotates values inside a `dynamic` array to the right.\",\"## Syntax\\r\\n\\r\\n`array_rotate_right(`*array*, *rotate_count*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n|*array* | dynamic | &check;| The array to rotate.|\\r\\n|*rotate_count*| integer | &check;| The number of positions that array elements will be rotated to the right. If the value is negative, the elements will be rotated to the Left.|\\r\\n\\r\\n## Returns\\r\\n\\r\\nDynamic array containing the same elements as the original array with each element rotated according to *rotate_count*.\",'Rotating to the right by two positions:\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAysoyswrUUgsKrJNqcxLzM1M1og21DHSMdYx0TGN1eSqUUitKEnNSwGpiC/KL0ksSU2xBbITK6G8+KLM9IwSDaCQjoKRJgBslCYKTgAAAA==\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint arr=dynamic([1,2,3,4,5])\\r\\n| extend arr_rotated=array_rotate_right(arr, 2)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|arr|arr_rotated|\\r\\n|---|---|\\r\\n|[1,2,3,4,5]|[4,5,1,2,3]|\\r\\n\\r\\nRotating to the left by two positions by using negative rotate_count value:\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAysoyswrUUgsKrJNqcxLzM1M1og21DHSMdYx0TGN1eSqUUitKEnNSwGpiC/KL0ksSU2xBbITK6G8+KLM9IwSDaCQjoKukSYA0VPyak8AAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n**Results**\\r\\n\\r\\n```\\r\\nprint arr=dynamic([1,2,3,4,5])\\r\\n| extend arr_rotated=array_rotate_right(arr, -2)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|arr|arr_rotated|\\r\\n|---|---|\\r\\n|[1,2,3,4,5]|[3,4,5,1,2]|\\r\\n\\r\\n## See also\\r\\n\\r\\n* To rotate an array to the left, use [array_rotate_left()](array_rotate_leftfunction.md).\\r\\n* To shift an array to the left, use [array_shift_left()](array_shift_leftfunction.md).\\r\\n* To shift an array to the right, use [array_shift_right()](array_shift_rightfunction.md).',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/array_rotate_rightfunction\",\"array_rotate_rightfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"array_shift_left\",\"Shifts the values inside a `dynamic` array to the left.\",\"## Syntax\\r\\n\\r\\n`array_shift_left(`*array*, *shift_count* `[,` *default_value* ]`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n|*array* | dynamic |&check; | The array to shift.|\\r\\n|*shift_count* | integer | &check; | The number of positions that array elements will be shifted to the left. If the value is negative, the elements will be shifted to the right. |\\r\\n|*default_value* | scalar | | The value used for an element that was shifted and removed. The default is null or an empty string depending on the type of elements in the *array*.|\\r\\n\\r\\n## Returns\\r\\n\\r\\nReturns a dynamic array containing the same number of elements as in the original array. Each element has been shifted according to *shift_count*. New elements that are added in place of removed elements will have a value of *default_value*.\",'Shifting to the left by two positions:\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAysoyswrUUgsKrJNqcxLzM1M1og21DHSMdYx0TGN1eTlqlFIrShJzUsBKYkvzshMK7EFshIrIez4nNS0Eg2ggI6CkSYADEKYSUsAAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint arr=dynamic([1,2,3,4,5])\\r\\n| extend arr_shift=array_shift_left(arr, 2)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|`arr`|`arr_shift`|\\r\\n|---|---|\\r\\n|[1,2,3,4,5]|[3,4,5,null,null]|\\r\\n\\r\\nShifting to the left by two positions and adding default value:\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAysoyswrUUgsKrJNqcxLzM1M1og21DHSMdYx0TGN1eTlqlFIrShJzUsBKYkvzshMK7EFshIrIez4nNS0Eg2ggI6CkY6CrqEmAA+qvHJPAAAA\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint arr=dynamic([1,2,3,4,5])\\r\\n| extend arr_shift=array_shift_left(arr, 2, -1)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|`arr`|`arr_shift`|\\r\\n|---|---|\\r\\n|[1,2,3,4,5]|[3,4,5,-1,-1]|\\r\\n\\r\\nShifting to the right by two positions by using negative *shift_count* value:\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAysoyswrUUgsKrJNqcxLzM1M1og21DHSMdYx0TGN1eTlqlFIrShJzUsBKYkvzshMK7EFshIrIez4nNS0Eg2ggI6CrhEQG2oCAIeuighQAAAA\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint arr=dynamic([1,2,3,4,5])\\r\\n| extend arr_shift=array_shift_left(arr, -2, -1)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|arr|arr_shift|\\r\\n|---|---|\\r\\n|[1,2,3,4,5]|[-1,-1,1,2,3]|\\r\\n\\r\\n## See also\\r\\n\\r\\n* To shift an array to the right, use [array_shift_right()](array_shift_rightfunction.md).\\r\\n* To rotate an array to the right, use [array_rotate_right()](array_rotate_rightfunction.md).\\r\\n* To rotate an array to the left, use [array_rotate_left()](array_rotate_leftfunction.md).',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/array_shift_leftfunction\",\"array_shift_leftfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"array_shift_right\",\"Shifts the values inside a dynamic array to the right.\",\"## Syntax\\r\\n\\r\\n`array_shift_right(`*array*, *shift_count* [, *default_value* ]`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n|*array* | dynamic |&check; | The array to shift.|\\r\\n|*shift_count* | integer | &check; | The number of positions that array elements will be shifted to the right. If the value is negative, the elements will be shifted to the left. |\\r\\n|*default_value* | scalar | | The value used for an element that was shifted and removed. The default is null or an empty string depending on the type of elements in the *array*.|\\r\\n\\r\\n## Returns\\r\\n\\r\\nReturns a dynamic array containing the same amount of the elements as in the original array. Each element has been shifted according to *shift_count*. New elements that are added instead of the removed elements will have a value of *default_value*.\",'Shifting to the right by two positions:\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAysoyswrUUgsKrJNqcxLzM1M1og21DHSMdYx0TGN1eTlqlFIrShJzUsBKYkvzshMK7EFshIrIez4osz0jBINoIiOgpEmAKRlW6FMAAAA\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint arr=dynamic([1,2,3,4,5])\\r\\n| extend arr_shift=array_shift_right(arr, 2)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|arr|arr_shift|\\r\\n|---|---|\\r\\n|[1,2,3,4,5]|[null,null,1,2,3]|\\r\\n\\r\\nShifting to the right by two positions and adding a default value:\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAysoyswrUUgsKrJNqcxLzM1M1og21DHSMdYx0TGN1eTlqlFIrShJzUsBKYkvzshMK7EFshIrIez4osz0jBINoIiOgpGOgq6hJgBHJWeJUAAAAA==\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint arr=dynamic([1,2,3,4,5])\\r\\n| extend arr_shift=array_shift_right(arr, 2, -1)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|arr|arr_shift|\\r\\n|---|---|\\r\\n|[1,2,3,4,5]|[-1,-1,1,2,3]|\\r\\n\\r\\nShifting to the left by two positions by using a negative shift_count value:\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAysoyswrUUgsKrJNqcxLzM1M1og21DHSMdYx0TGN1eTlqlFIrShJzUsBKYkvzshMK7EFshIrIez4osz0jBINoIiOgq4REBtqAgCqvHZwUQAAAA==\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint arr=dynamic([1,2,3,4,5])\\r\\n| extend arr_shift=array_shift_right(arr, -2, -1)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|arr|arr_shift|\\r\\n|---|---|\\r\\n|[1,2,3,4,5]|[3,4,5,-1,-1]|\\r\\n\\r\\n## See also\\r\\n\\r\\n* To shift an array to the left, use [array_shift_left()](array_shift_leftfunction.md).\\r\\n* To rotate an array to the right, use [array_rotate_right()](array_rotate_rightfunction.md).\\r\\n* To rotate an array to the left, use [array_rotate_left()](array_rotate_leftfunction.md).',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/array_shift_rightfunction\",\"array_shift_rightfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"array_slice\",\"Extracts a slice of a dynamic array.\",\"## Syntax\\r\\n\\r\\n`array_slice`(*array*, *start*, *end*)\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *array* | dynamic | &check; | The array from which to extract the slice.|\\r\\n| *start*| int | &check; | The start index of the slice (inclusive). Negative values are converted to `array_length`+`start`.|\\r\\n| *end*| int | &check; | The last index of the slice. (inclusive). Negative values are converted to `array_length`+`end`.|\\r\\n\\r\\n> [!NOTE]\\r\\n> Out of bounds indices are ignored.\\r\\n\\r\\n## Returns\\r\\n\\r\\nReturns a dynamic array of the values in the range [`start..end`] from `array`.\",'The following examples return a slice of the array.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAysoyswrUUgsKrJNqcxLzM1M1og21DHSMY7VVOCqUUitKEnNS1EozslMTk2xBapKrIwHczSAbB0FQx0FI00AeoUyQ0IAAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint arr=dynamic([1,2,3]) \\r\\n| extend sliced=array_slice(arr, 1, 2)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|arr|sliced|\\r\\n|---|---|\\r\\n|[1,2,3]|[2,3]|\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAysoyswrUUgsKrJNqcxLzM1M1og21DHSMdYx0TGN1VTgqlFIrShJzUtRKM7JTE5NsQWqTKyMB3M0gGwdBSMdBV1DTQAv2T4vRwAAAA==\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint arr=dynamic([1,2,3,4,5]) \\r\\n| extend sliced=array_slice(arr, 2, -1)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|arr|sliced|\\r\\n|---|---|\\r\\n|[1,2,3,4,5]|[3,4,5]|\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAysoyswrUUgsKrJNqcxLzM1M1og21DHSMdYx0TGN1VTgqlFIrShJzUtRKM7JTE5NsQWqTKyMB3M0gGwdBV1jIDbSBABajMjTSAAAAA==\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint arr=dynamic([1,2,3,4,5]) \\r\\n| extend sliced=array_slice(arr, -3, -2)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|arr|sliced|\\r\\n|---|---|\\r\\n|[1,2,3,4,5]|[3,4]|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/arrayslicefunction\",\"arrayslicefunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"array_sort_asc\",\"Receives one or more arrays. Sorts the first array in ascending order. Orders the remaining arrays to match the reordered first array.\",'## Syntax\\r\\n\\r\\n`array_sort_asc(`*array1*[, ..., *argumentN*]`)`\\r\\n\\r\\n`array_sort_asc(`*array1*[, ..., *argumentN*]`,`*nulls_last*`)`\\r\\n\\r\\nIf *nulls_last* isn\\'t provided, a default value of `true` is used.\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n|*array1...arrayN*| dynamic | &check; | The array or list of arrays to sort.|\\r\\n| *nulls_last* | bool |  | Determines whether `null`s should be last.|\\r\\n\\r\\n## Returns\\r\\n\\r\\nReturns the same number of arrays as in the input, with the first array sorted in ascending order, and the remaining arrays ordered to match the reordered first array.\\r\\n\\r\\n`null` will be returned for every array that differs in length from the first one.\\r\\n\\r\\nIf an array contains elements of different types, it will be sorted in the following order:\\r\\n\\r\\n* Numeric, `datetime`, and `timespan` elements\\r\\n* String elements\\r\\n* Guid elements\\r\\n* All other elements\\r\\n\\r\\n## Example 1 - Sorting two arrays\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA8tJLVFILCpKrDRUsFVIqcxLzM1M1og21DHWMdEx1TGK1bTmyoEpMUJWopSopKOUBMTJQJwCxKlKIMUFRZl5UOXxxflFJfGJxckaEAt0IIZoAgAts93scwAAAA==\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nlet array1 = dynamic([1,3,4,5,2]);\\r\\nlet array2 = dynamic([\"a\",\"b\",\"c\",\"d\",\"e\"]);\\r\\nprint array_sort_asc(array1,array2)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|array1_sorted|array2_sorted|\\r\\n|---|---|\\r\\n|[1,2,3,4,5]|[\"a\",\"e\",\"b\",\"c\",\"d\"]|\\r\\n\\r\\n> [!NOTE]\\r\\n> The output column names are generated automatically, based on the arguments to the function. To assign different names to the output columns, use the following syntax: `... | extend (out1, out2) = array_sort_asc(array1,array2)`\\r\\n\\r\\n## Example 2 - Sorting substrings\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA8tJLVHwS8xNLVawVVDyys/I0wlILM3RcU/NL0pP1QnKzEvPV7LmygGqCs4vKklNgaktLilKTiyJTywqSqzUAJPxxUAF8YnFyRrFBTmZJRpglToKSjpKmpoQypqroCgzr0ShKLW4NKcEaAiSkQD+ChdoiAAAAA==\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nlet Names = \"John,Paul,George,Ringo\";\\r\\nlet SortedNames = strcat_array(array_sort_asc(split(Names, \",\")), \",\");\\r\\nprint result = SortedNames\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|result|\\r\\n|---|\\r\\n|George,John,Paul,Ringo|\\r\\n\\r\\n## Example 3 - Combining summarize and array_sort_asc\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA5WR0WoDIRBF3/crJC9ZYQO7tiU00C8JQSYqiY2uy4yhpPTjq23sFmIK1ZdxOPdy5WqI6e6daVXwHka9oYh2PHTs+pbRerPREE0eOnYmg9IWjDfbhqWzVEcf9LJLY0Fb0Q/Pq369Gp543i+yclh037yjL7jG96LCa4tXwQ0varw/FcVtnscKj/5uHrGu8NObvpun9t+//B9mXvzTP/O75oPROZWF9t2wjFIEPxF7YR5ORjpLsf3dJv8pt8pwtr+UmpP1hOHVqFg2s1baUaojhjG4cLAKnAyoDSZLQISLpIBRAql2jjSL+XbYfQJov9dSfAIAAA==\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\ndatatable(command:string, command_time:datetime, user_id:string)\\r\\n[\\r\\n    \\'chmod\\',   datetime(2019-07-15),   \"user1\",\\r\\n    \\'ls\\',      datetime(2019-07-02),   \"user1\",\\r\\n    \\'dir\\',     datetime(2019-07-22),   \"user1\",\\r\\n    \\'mkdir\\',   datetime(2019-07-14),   \"user1\",\\r\\n    \\'rm\\',      datetime(2019-07-27),   \"user1\",\\r\\n    \\'pwd\\',     datetime(2019-07-25),   \"user1\",\\r\\n    \\'rm\\',      datetime(2019-07-23),   \"user2\",\\r\\n    \\'pwd\\',     datetime(2019-07-25),   \"user2\",\\r\\n]\\r\\n| summarize timestamps = make_list(command_time), commands = make_list(command) by user_id\\r\\n| project user_id, commands_in_chronological_order = array_sort_asc(timestamps, commands)[1]\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|user_id|commands_in_chronological_order|\\r\\n|---|---|\\r\\n|user1|[<br>  \"ls\",<br>  \"mkdir\",<br>  \"chmod\",<br>  \"dir\",<br>  \"pwd\",<br>  \"rm\"<br>]|\\r\\n|user2|[<br>  \"rm\",<br>  \"pwd\"<br>]|\\r\\n\\r\\n> [!NOTE]\\r\\n> If your data may contain `null` values, use [make_list_with_nulls](make-list-with-nulls-aggfunction.md) instead of [make_list](makelist-aggfunction.md).\\r\\n\\r\\n## Example 4 - Controlling location of `null` values\\r\\n\\r\\nBy default, `null` values are put last in the sorted array. However, you can control it explicitly by adding a `bool` value as the last argument to `array_sort_asc()`.\\r\\n\\r\\nExample with default behavior:\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAysoyswrUUgsKkqsjC/OLyqJTyxO1kipzEvMzUzWiM4rzcnRUUrKKU1V0lGqTM3JyS8HMtKLUlPzlHRAkrGamgDOvUliQgAAAA==\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint array_sort_asc(dynamic([null,\"blue\",\"yellow\",\"green\",null]))\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|print_0|\\r\\n|---|\\r\\n|[\"blue\",\"green\",\"yellow\",null,null]|\\r\\n\\r\\nExample with non-default behavior:\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAxXJUQqAIAwA0KvIvhR2owhZtkJYMzYlvH319+DdVrUHMqOZvVnP5CXuU+mqJS46RBA2GQwIk0Xa8+E0ZgX8c00YDhLn9ALNIgvjSQAAAA==\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint array_sort_asc(dynamic([null,\"blue\",\"yellow\",\"green\",null]), false)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|`print_0`|\\r\\n|---|\\r\\n|[null,null,\"blue\",\"green\",\"yellow\"]|\\r\\n\\r\\n## See also\\r\\n\\r\\nTo sort the first array in descending order, use [array_sort_desc()](arraysortdescfunction.md).',\"\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/arraysortascfunction\",\"\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"array_sort_desc\",\"Receives one or more arrays. Sorts the first array in descending order. Orders the remaining arrays to match the reordered first array.\",'## Syntax\\r\\n\\r\\n`array_sort_desc(`*array1*[, ..., *argumentN*]`)`\\r\\n\\r\\n`array_sort_desc(`*array1*[, ..., *argumentN*]`,`*nulls_last*`)`\\r\\n\\r\\nIf *nulls_last* isn\\'t provided, a default value of `true` is used.\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n|*array1...arrayN*| dynamic | &check; | The array or list of arrays to sort.|\\r\\n| *nulls_last* |bool |  | Determines whether `null`s should be last.|\\r\\n\\r\\n## Returns\\r\\n\\r\\nReturns the same number of arrays as in the input, with the first array sorted in ascending order, and the remaining arrays ordered to match the reordered first array.\\r\\n\\r\\n`null` will be returned for every array that differs in length from the first one.\\r\\n\\r\\nIf an array contains elements of different types, it will be sorted in the following order:\\r\\n\\r\\n* Numeric, `datetime`, and `timespan` elements\\r\\n* String elements\\r\\n* Guid elements\\r\\n* All other elements\\r\\n\\r\\n## Example 1 - Sorting two arrays\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA8tJLVFILCpKrDRUsFVIqcxLzM1M1og21DHWMdEx1TGK1bTmyoEpMUJWopSopKOUBMTJQJwCxKlKIMUFRZl5UOXxxflFJfEpqcXJGhAbdCCmaAIAmTiTMnQAAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nlet array1 = dynamic([1,3,4,5,2]);\\r\\nlet array2 = dynamic([\"a\",\"b\",\"c\",\"d\",\"e\"]);\\r\\nprint array_sort_desc(array1,array2)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|array1_sorted|array2_sorted|\\r\\n|---|---|\\r\\n|[5,4,3,2,1]|[\"d\",\"c\",\"b\",\"e\",\"a\"]|\\r\\n\\r\\n> [!NOTE]\\r\\n> The output column names are generated automatically, based on the arguments to the function. To assign different names to the output columns, use the following syntax: `... | extend (out1, out2) = array_sort_desc(array1,array2)`\\r\\n\\r\\n## Example 2 - Sorting substrings\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA8tJLVHwS8xNLVawVVDyys/I0wlILM3RcU/NL0pP1QnKzEvPV7LmygGqCs4vKklNgaktLilKTiyJTywqSqzUAJPxxUAF8SmpxckaxQU5mSUaYKU6Cko6SpqaEMqaq6AoM69EoSi1uDSnBGgKkpkA+RSmRokAAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nlet Names = \"John,Paul,George,Ringo\";\\r\\nlet SortedNames = strcat_array(array_sort_desc(split(Names, \",\")), \",\");\\r\\nprint result = SortedNames\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|result|\\r\\n|---|\\r\\n|Ringo,Paul,John,George|\\r\\n\\r\\n## Example 3 - Combining summarize and array_sort_desc\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA5WR0WoDIRBF3/crJC9ZYQO7tiU00C8JQYwOiY2uy4yhpPTjq23sFmIK1ZdxOPdy5RoV0907aHXwXo1mQxHteOjY9S2j9bAxKkIeOnYmQGkLxpttw9JZ6qMPZtmlsaCt6IfnVb9eDU887xdZOSy6b97RF1zje1HhjcWr4IYXNd6fiuI2z2OFR383j1hX+OnN3M1T++9f/g8zL/7pn/ld88HonMpC+w4soxSVn4i9MK9OIJ2l2P5uk/+UW2U4219Kzcl6wvAKOpbNrJV2lPqIYQwuHKxWTgY0gMlSIaqLpIBRGiDdzplmNd8Ou0832AsNfQIAAA==\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\ndatatable(command:string, command_time:datetime, user_id:string)\\r\\n[\\r\\n    \\'chmod\\',   datetime(2019-07-15),   \"user1\",\\r\\n    \\'ls\\',      datetime(2019-07-02),   \"user1\",\\r\\n    \\'dir\\',     datetime(2019-07-22),   \"user1\",\\r\\n    \\'mkdir\\',   datetime(2019-07-14),   \"user1\",\\r\\n    \\'rm\\',      datetime(2019-07-27),   \"user1\",\\r\\n    \\'pwd\\',     datetime(2019-07-25),   \"user1\",\\r\\n    \\'rm\\',      datetime(2019-07-23),   \"user2\",\\r\\n    \\'pwd\\',     datetime(2019-07-25),   \"user2\",\\r\\n]\\r\\n| summarize timestamps = make_list(command_time), commands = make_list(command) by user_id\\r\\n| project user_id, commands_in_chronological_order = array_sort_desc(timestamps, commands)[1]\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|user_id|commands_in_chronological_order|\\r\\n|---|---|\\r\\n|user1|[<br>  \"rm\",<br>  \"pwd\",<br>  \"dir\",<br>  \"chmod\",<br>  \"mkdir\",<br>  \"ls\"<br>]|\\r\\n|user2|[<br>  \"pwd\",<br>  \"rm\"<br>]|\\r\\n\\r\\n> [!NOTE]\\r\\n> If your data may contain `null` values, use [make_list_with_nulls](make-list-with-nulls-aggfunction.md) instead of [make_list](makelist-aggfunction.md).\\r\\n\\r\\n## Example 4 - Controlling location of `null` values\\r\\n\\r\\nBy default, `null` values are put last in the sorted array. However, you can control it explicitly by adding a `bool` value as the last argument to `array_sort_desc()`.\\r\\n\\r\\nExample with default behavior:\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAysoyswrUUgsKkqsjC/OLyqJT0ktTtZIqcxLzM1M1ojOK83J0VFKyilNVdJRqkzNyckvBzLSi1JT85R0QJKxmpoAGsR2QUMAAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint array_sort_desc(dynamic([null,\"blue\",\"yellow\",\"green\",null]))\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|`print_0`|\\r\\n|---|\\r\\n|[\"yellow\",\"green\",\"blue\",null,null]|\\r\\n\\r\\nExample with non-default behavior:\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/?query=H4sIAAAAAAAAAxXJUQqAIAwA0KvIvhR2owhZukKYM6YS3r76e/BuKzocmdGKvdmImXvyeSnVkvymUwThkMmAsFikPR8uY1bAP/eA7iTpHF4VdlwBSgAAAA==\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint array_sort_desc(dynamic([null,\"blue\",\"yellow\",\"green\",null]), false)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|`print_0`|\\r\\n|---|\\r\\n|[null,null,\"yellow\",\"green\",\"blue\"]|\\r\\n\\r\\n## See also\\r\\n\\r\\nTo sort the first array in ascending order, use [array_sort_asc()](arraysortascfunction.md).',\"\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/arraysortdescfunction\",\"\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"array_split\",\"Splits an array to multiple arrays according to the split indices and packs the generated array in a dynamic array.\",\"## Syntax\\r\\n\\r\\n`array_split`(*array*, *index*)\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *array*| dynamic | &check; | The array to split.|\\r\\n| *index* | integer or dynamic | &check;| An integer or dynamic array of integers used to indicate the location at which to split the array. The start index of arrays is zero. Negative values are converted to `array_length` + `value`.|\\r\\n\\r\\n## Returns\\r\\n\\r\\nReturns a dynamic array containing N+1 arrays with the values in the range `[0..i1), [i1..i2), ... [iN..array_length)` from `array`, where N is the number of input indices and `i1...iN` are the indices.\",'This following example shows how to split and array.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/?query=H4sIAAAAAAAAAysoyswrUUgsKrJNqcxLzM1M1og21DHSMdYx0TGN1VTgqlFIrShJzUsBKYkvLsjJLLEFshIrIWwNIFtHwUgTAB7YikBGAAAA\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint arr=dynamic([1,2,3,4,5]) \\r\\n| extend arr_split=array_split(arr, 2)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|arr|arr_split|\\r\\n|---|---|\\r\\n|[1,2,3,4,5]|[[1,2],[3,4,5]]|\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/?query=H4sIAAAAAAAAAysoyswrUUgsKrJNqcxLzM1M1og21DHSMdYx0TGN1VTgqlFIrShJzUsBKYkvLsjJLLEFshIrIWwNIFtHAUmncaymJgD5vl9PUwAAAA==\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint arr=dynamic([1,2,3,4,5]) \\r\\n| extend arr_split=array_split(arr, dynamic([1,3]))\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|arr|arr_split|\\r\\n|---|---|\\r\\n|[1,2,3,4,5]|[[1],[2,3],[4,5]]|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/arraysplitfunction\",\"arraysplitfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"array_sum\",\"Calculates the sum of elements in a dynamic array.\",\"## Syntax\\r\\n\\r\\n`array_sum`(*array*)\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *array*| dynamic | &check;| The array to sum.|\\r\\n\\r\\n## Returns\\r\\n\\r\\nReturns a double type value with the sum of the elements of the array.\\r\\n\\r\\n> [!NOTE]\\r\\n> If the array contains elements of non-numeric types, the result is `null`.\",'This following example shows the sum of an array.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAysoyswrUUgsKrJNqcxLzM1M1og21DHSMdYxidVU4OWqUUitKEnNSwGpiC8uzbUF0omVIJYGkKUJANbCqMA+AAAA\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint arr=dynamic([1,2,3,4]) \\r\\n| extend arr_sum=array_sum(arr)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|arr|arr_sum|\\r\\n|---|---|\\r\\n|[1,2,3,4]|10|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/array-sum-function\",\"array-sum-function.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.OperatorToken,\"as\",\"Binds a name to the operator's input tabular expression. This allows the query to reference the value of the tabular expression multiple times without breaking the query and binding a name through the [let statement](letstatement.md).\",\"To optimize multiple uses of the `as` operator within a single query, see [Named expressions](../../named-expressions.md).\\r\\n\\r\\n## Syntax\\r\\n\\r\\n*T* `|` `as` [`hint.materialized` `=` `true`] *Name*\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n|*T*| string | &check; | The tabular expression to rename.|\\r\\n| *Name*| string| &check; | The temporary name for the tabular expression.|\\r\\n| *`hint.materialized`*| bool |  | If set to `true`, the value of the tabular expression will be as if it was wrapped by a [materialize()](./materializefunction.md) function call.|\\r\\n\\r\\n> [!NOTE]\\r\\n>\\r\\n> * The name given by `as` will be used in the `withsource=` column of [union](./unionoperator.md), the `source_` column of [find](./findoperator.md), and the `$table` column of [search](./searchoperator.md).\\r\\n> * The tabular expression named using the operator in a [join](./joinoperator.md)'s outer tabular input (`$left`) can also be used in the join's tabular inner input (`$right`).\",'In the following two examples the union\\'s generated TableName column will consist of \\'T1\\' and \\'T2\\'.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/?query=H4sIAAAAAAAAAytKzEtPVahQSCvKz1UwVCjJVzA0UCguSS0AcrhqFBKLFULAjNK8zPw8hfLMkozi/NKi5FTbkMSknFS/xNxUBY0iPGZAjDDSBAAgKK6faAAAAA==\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nrange x from 1 to 10 step 1 \\r\\n| as T1 \\r\\n| union withsource=TableName (range x from 1 to 10 step 1 | as T2)\\r\\n```\\r\\n\\r\\nAlternatively, you can write the same example as follows:\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/?query=H4sIAAAAAAAAAyvNy8zPUyjPLMkozi8tSk61DUlMykn1S8xNVdAoSsxLT1WoUEgrys9VMFQoyVcwNFAoLkktAHJqFBKLFUIMNXWIUWakCQB5tG07ZwAAAA==\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nunion withsource=TableName (range x from 1 to 10 step 1 | as T1), (range x from 1 to 10 step 1 | as T2)\\r\\n```\\r\\n\\r\\nIn the following example, the \\'left side\\' of the join will be:\\r\\n`MyLogTable` filtered by `type == \"Event\"` and `Name == \"Start\"`\\r\\nand the \\'right side\\' of the join will be:\\r\\n`MyLogTable` filtered by `type == \"Event\"` and `Name == \"Stop\"`\\r\\n\\r\\n```\\r\\nMyLogTable  \\r\\n| where type == \"Event\"\\r\\n| as T\\r\\n| where Name == \"Start\"\\r\\n| join (\\r\\n    T\\r\\n    | where Name == \"Stop\"\\r\\n) on ActivityId\\r\\n```',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/asoperator\",\"asoperator.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"asin\",\"Calculates the angle whose sine is the specified number, or the arc sine. This is the inverse operation of [`sin()`](sinfunction.md).\",\"## Syntax\\r\\n\\r\\n`asin(`*x*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n|*x* | real | &check;| A real number in range [-1, 1] used to calculate the arc sine.|\\r\\n\\r\\n## Returns\\r\\n\\r\\nReturns the value of the arc sine of `x`. Returns `null` if `x` < -1 or `x` > 1.\",'> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAysoyswrUShKLS7NKbFNLM7M0zDQszTVBAC0CzxqFwAAAA==\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nasin(0.5)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|result|\\r\\n|---|\\r\\n|1.2532358975033751|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/asinfunction\",\"asinfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"assert\",\"Checks for a condition. If the condition is false, outputs error messages and fails the query.\",\"> [!NOTE]\\r\\n> The `assert` function gets evaluated during the query analysis phase, before optimizations such as constant-folding and predicate short-circuiting get applied.\\r\\n\\r\\n> [!NOTE]\\r\\n> The parameters given to `assert` must be evaluated to constants during the query analysis phase. In other words, it can be constructed from other expressions referencing constants only, and can't be bound to row-context.\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`assert(`*condition*`,`*message*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *condition* | bool | &check; | The conditional expression to evaluate. The condition must be evaluated to constant during the query analysis phase.|\\r\\n| *message* | string | &check; | The message used if assertion is evaluated to `false`.|\\r\\n\\r\\n## Returns\\r\\n\\r\\nReturns `true` if the condition is `true`.\\r\\nRaises a semantic error if the condition is evaluated to `false`.\",'The following query defines a function `checkLength()` that checks input string length, and uses `assert` to validate input length parameter (checks that it\\'s greater than zero).\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/?query=H4sIAAAAAAAAA02OywrCMBBF9/mKoZsmEMH6hEr9Av9AXKTtkBTjVJIpgo9/N60izmzuYs6d45GhcdicD0iWHVQgPVLpe7IaYhk5dGSVeAhIY2LEwOMB7GGuIftClyEy1Ag2oGEMwM4Q3DH0mQJD7cSmpsTJqBKagnjtRGs4be1RdnQd+PfsOAF5sVjm+hNX6802FyfxhJvDgP/Go0016spZoTRMTeoNUTSJPdYAAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nlet checkLength = (len:long, s:string)\\r\\n{\\r\\n    assert(len > 0, \"Length must be greater than zero\") and\\r\\n    strlen(s) > len\\r\\n};\\r\\ndatatable(input:string)\\r\\n[\\r\\n    \\'123\\',\\r\\n    \\'4567\\'\\r\\n]\\r\\n| where checkLength(len=long(-1), input)\\r\\n```\\r\\n\\r\\nRunning this query yields an error:\\r\\n`assert() has failed with message: \\'Length must be greater than zero\\'`\\r\\n\\r\\nExample of running with valid `len` input:\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/?query=H4sIAAAAAAAAA02OzQrCMBCE73mKoZc2kINaf6BSn8A3EA9pXZJiTCXZIvjz7qZVxN3LHOabGUeM1lJ73pM3bFGjcOQr13ujEKvIofNGiodAOh0jBR4N2GGmkH2hyxAZDcEE0kwBbLXHnUKfSWh/QkpJTBFlwpIQr604aU7fOCo6fx34V3SYivL5oszVRy5X600ujuKJm6VA/2vHJXWpMEXIN3+iHkjLAAAA\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nlet checkLength = (len:long, s:string)\\r\\n{\\r\\n    assert(len > 0, \"Length must be greater than zero\") and strlen(s) > len\\r\\n};\\r\\ndatatable(input:string)\\r\\n[\\r\\n    \\'123\\',\\r\\n    \\'4567\\'\\r\\n]\\r\\n| where checkLength(len=3, input)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|input|\\r\\n|---|\\r\\n|4567|\\r\\n\\r\\nThe following query will always fail, demonstrating that the `assert` function gets evaluated even though the `where b` operator returns no data when `b` is `false`:\\r\\n\\r\\n```\\r\\nlet b=false;\\r\\nprint x=\"Hello\"\\r\\n| where b\\r\\n| where assert(b, \"Assertion failed\")\\r\\n```',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/assert-function\",\"assert-function.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"atan\",\"Returns the angle whose tangent is the specified number. This is the inverse operation of [`tan()`](tanfunction.md).\",\"## Syntax\\r\\n\\r\\n`atan(`*x*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *x* | real | &check; | The number used to calculate the arc tangent.|\\r\\n\\r\\n## Returns\\r\\n\\r\\nThe value of the arc tangent of `x`.\",'> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAysoyswrUShKLS7NKbFNLEnM0zDQM9UEACNi3wIWAAAA\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\natan(0.5)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|result|\\r\\n|---|\\r\\n|0.46364760900080609|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/atanfunction\",\"atanfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"atan2\",\"Calculates the angle, in radians, between the positive x-axis and the ray from the origin to the point (y, x).\",\"## Syntax\\r\\n\\r\\n`atan2(`*y*`,`*x*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *y* | real | &check; | The Y coordinate.|\\r\\n| *x* | real | &check; | The X coordinate.|\\r\\n\\r\\n## Returns\\r\\n\\r\\nReturns the angle in radians between the positive x-axis and the ray from the origin to the point (y, x).\",'The following example returns the angle measurements in radians.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/?query=H4sIAAAAAAAAAysoyswrUUgsScwzijdQsIWwNAx1DDUV9PUVAjIV9BVMFIoSUzIT84oVNExMFVJS04tSU4s1uWoUUitKUvNSoJoN4ZoNdHThuuE6DS0McGo1gmvVNdQxAGvVhVhthDBA1xJhAAA4Vl3utQAAAA==\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint atan2_0 = atan2(1,1) // Pi / 4 radians (45 degrees)\\r\\n| extend atan2_1 = atan2(0,-1) // Pi radians (180 degrees)\\r\\n| extend atan2_2 = atan2(-1,0) // - Pi / 2 radians (-90 degrees)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|atan2_0|atan2_1|atan2_2|\\r\\n|---|---|---|\\r\\n|0.785398163397448|3.14159265358979|-1.5707963267949|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/atan2function\",\"atan2function.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"autocluster\",\"`autocluster` finds common patterns of discrete attributes (dimensions) in the data. It then reduces the results of the original query, whether it's 100 or 100,000 rows, to a few patterns. The plugin was developed to help analyze failures (such as exceptions or crashes) but can potentially work on any filtered data set. The plugin is invoked with the [`evaluate`](evaluateoperator.md) operator.\",\"> [!NOTE]\\r\\n> `autocluster` is largely based on the Seed-Expand algorithm from the following paper: [Algorithms for Telemetry Data Mining using Discrete Attributes](https://www.scitepress.org/DigitalLibrary/PublicationsDetail.aspx?ID=d5kcrO+cpEU=&t=1).\\r\\n\\r\\n## Syntax\\r\\n\\r\\n*Table* `|` `evaluate` `autocluster` `(`[*SizeWeight*, *WeightColumn*, *NumSeeds*, *CustomWildcard*, *CustomWildcard*, ...]`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\nThe parameters must be ordered as specified in the [syntax](#syntax). To indicate that the default value should be used, put the string tilde value `~`. For more information, see the \\\"Example\\\" column of the following table.\\r\\n\\r\\n|Name  | Type, range, default  |Description | Example   |\\r\\n|----------------|-----------------------------------|---------------------------|------------------------------------------------|\\r\\n| SizeWeight     | 0 < *double* < 1 [default: 0.5]   | Gives you some control over the balance between generic (high coverage) and informative (many shared) values. If you increase the value, it usually reduces the number of patterns, and each pattern tends to cover a larger percentage coverage. If you decrease the value, it usually produces more specific patterns with more shared values, and a smaller percentage coverage. The under-the-hood formula is a weighted geometric mean, between the normalized generic score and the informative score with weights `SizeWeight` and `1-SizeWeight`    | `T | evaluate autocluster(0.8)`                |\\r\\n|WeightColumn    | *column_name*     | Considers each row in the input according to the specified weight (by default each row has a weight of '1'). The argument must be a name of a numeric integer column. A common usage of a weight column is to take into account sampling or bucketing/aggregation of the data that is already embedded into each row.   | `T | evaluate autocluster('~', sample_Count)` |\\r\\n| NumSeeds        | *int* [default: 25]  | The number of seeds determines the number of initial local search points of the algorithm. In some cases, depending on the structure of the data and if you increase the number of seeds, then the number (or quality) of the results increases through the expanded search space with a slower query tradeoff. The value has diminishing results in both directions, so if you decrease it to below five, it will achieve negligible performance improvements. If you increase to above 50, it will rarely generate additional patterns.  | `T | evaluate autocluster('~', '~', 15)`       |\\r\\n| CustomWildcard  | *\\\"any_value_per_type\\\"* | Sets the wildcard value for a specific type in the results table. It will indicate that the current pattern doesn't have a restriction on this column. The default is null, since the string default is an empty string. If the default is a good value in the data, a different wildcard value should be used (such as `*`).   | `T | evaluate autocluster('~', '~', '~', '*', int(-1), double(-1), long(0), datetime(1900-1-1))` |\\r\\n\\r\\n## Returns\\r\\n\\r\\nThe `autocluster` plugin usually returns a small set of patterns. The patterns capture portions of the data with shared common values across multiple discrete attributes. Each pattern in the results is represented by a row.\\r\\n\\r\\nThe first column is the segment ID. The next two columns are the count and percentage of rows out of the original query that are captured by the pattern. The remaining columns are from the original query. Their value is either a specific value from the column, or a wildcard value (which are by default null) meaning variable values.\\r\\n\\r\\nThe patterns aren't distinct, may be overlapping, and usually don't cover all the original rows. Some rows may not fall under any pattern.\\r\\n\\r\\n> [!TIP]\\r\\n> Use [where](./whereoperator.md) and [project](./projectoperator.md) in the input pipe to reduce the data to just what you're interested in.\\r\\n>\\r\\n> When you find an interesting row, you might want to drill into it further by adding its specific values to your `where` filter.\",'### Using evaluate\\r\\n\\r\\n```\\r\\nT | evaluate autocluster()\\r\\n```\\r\\n\\r\\n### Using autocluster\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAy1OPQ+CMBDd/RUvTBCNYdENF2VVk7I4NngIhrbkONAm/nhbcbr3lfdOiWNTzmRlXH3waokJxllpXeNJc6pEs1SdoQxFgV3I0FvI3nHSRj8IBbqmSRdyZDeMWP+ta2DE4nFAjg2SW6mSeM+XJAs1A7sn1YIwIBT03w+VHyJeCuLWrPsp+noSV/fTKMRpvt1nX4BZevm3AAAA\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nStormEvents\\r\\n| where monthofyear(StartTime) == 5\\r\\n| extend Damage = iff(DamageCrops + DamageProperty > 0 , \"YES\" , \"NO\")\\r\\n| project State , EventType , Damage\\r\\n| evaluate autocluster(0.6)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|SegmentId|Count|Percent|State|EventType|Damage|\\r\\n|---|---|---|---|---|---|---|---|---|\\r\\n|0|2278|38.7||Hail|NO\\r\\n|1|512|8.7||Thunderstorm Wind|YES\\r\\n|2|898|15.3|TEXAS||\\r\\n\\r\\n### Using custom wildcards\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAzVOMQ6CQBDsfcWEBlBiiIklNkqrJtBYXnARDMeRZUFJjG/3TrTZ2ZnZzGwmhnU6Uiv94oVHRUzQppXKlBMpDjJRLHmtKUSSYGtv6CnUXnFQWt0ICeqyDGayZ9P1WP2ss2XEMmGHGBG8S5p5Do8nL7QxHZs7FQJbIGT17w/51Ll9DnBdo2oG56tBTNEMvRAH8XoTwX/7/7H0ww9RvGz7xgAAAA==\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nStormEvents\\r\\n| where monthofyear(StartTime) == 5\\r\\n| extend Damage = iff(DamageCrops + DamageProperty > 0 , \"YES\" , \"NO\")\\r\\n| project State , EventType , Damage\\r\\n| evaluate autocluster(0.2, \\'~\\', \\'~\\', \\'*\\')\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|SegmentId|Count|Percent|State|EventType|Damage|\\r\\n|---|---|---|---|---|---|---|---|---|\\r\\n|0|2278|38.7|\\\\*|Hail|NO\\r\\n|1|512|8.7|\\\\*|Thunderstorm Wind|YES\\r\\n|2|898|15.3|TEXAS|\\\\*|\\\\*\\r\\n\\r\\n## See also\\r\\n\\r\\n* [basket](./basketplugin.md)\\r\\n* [reduce](./reduceoperator.md)\\r\\n\\r\\n\\r\\n\\r\\n---\\r\\n\\r\\n> [!IMPORTANT]\\r\\n> The content below is Microsoft confidential(not available in the [public site](https://docs.microsoft.com/en-us/azure/data-explorer/))\\r\\n\\r\\n# autocluster plugin - Internal\\r\\n\\r\\nIf you have questions about autocluster or other ML related workflows in Kusto you can post them on the following DL: [KustoML](mailto:kustoML@microsoft.com).',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/autoclusterplugin\",\"autoclusterplugin.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"avg\",\"Calculates the average (arithmetic mean) of *expr* across the group.\",\"[!INCLUDE [data-explorer-agg-function-summarize-note](../../includes/data-explorer-agg-function-summarize-note.md)]\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`avg(`*expr*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *expr* | string | &check; | The expression used for aggregation calculation. Records with `null` values are ignored and not included in the calculation. |\\r\\n\\r\\n## Returns\\r\\n\\r\\nReturns the average value of *expr* across the group.\",'This example returns the average number of damaged crops per state.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAwsuyS/KdS1LzSsp5qpRKC7NzU0syqxKVXAsS3dJzE1MTw3Jdy7KLyhWsFVILEvXgIiBRTQVkioVgksSS1IBk8Ju20QAAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nStormEvents\\r\\n| summarize AvgDamageToCrops = avg(DamageCrops) by State\\r\\n```\\r\\n\\r\\nThe results table shown includes only the first 10 rows.\\r\\n\\r\\n| State                | AvgDamageToCrops |\\r\\n| -------------------- | ---------------- |\\r\\n| TEXAS                | 7524.569241      |\\r\\n| KANSAS               | 15366.86671      |\\r\\n| IOWA                 | 4332.477535      |\\r\\n| ILLINOIS             | 44568.00198      |\\r\\n| MISSOURI             | 340719.2212      |\\r\\n| GEORGIA              | 490702.5214      |\\r\\n| MINNESOTA            | 2835.991494      |\\r\\n| WISCONSIN            | 17764.37838      |\\r\\n| NEBRASKA             | 21366.36467      |\\r\\n| NEW YORK             | 5.714285714      |\\r\\n| ...      | ...   |',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/avg-aggfunction\",\"avg-aggfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"avgif\",\"Calculates the [average](avg-aggfunction.md) of *expr* in records for which *predicate* evaluates to `true`.\",\"[!INCLUDE [data-explorer-agg-function-summarize-note](../../includes/data-explorer-agg-function-summarize-note.md)]\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`avgif` `(`*expr*`,` *predicate*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *expr* | string | &check; | The expression used for aggregation calculation. Records with `null` values are ignored and not included in the calculation. |\\r\\n| *predicate* | string | &check; | The predicate that if true, the *expr* calculated value will be added to the average. |\\r\\n\\r\\n## Returns\\r\\n\\r\\nReturns the average value of *expr* in records where *predicate* evaluates to `true`.\",'This example calculates the average damage by state in cases where there was any damage.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAwsuyS/KdS1LzSsp5qpRKC7NzU0syqxKVXAsSy1KTE9NScwFkrYl+Tn5eekaiWXpGgouYCHnovyCYk1NHai68IzUPBd0tZlpGkiKdZDYCnYGmpoKSZUKwSWJJakAP4a4kIQAAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nStormEvents\\r\\n| summarize Averagedamage=tolong(avg( DamageCrops)),AverageWhenDamage=tolong(avgif(DamageCrops,DamageCrops >0)) by State\\r\\n```\\r\\n\\r\\nThe results table shown includes only the first 10 rows.\\r\\n\\r\\n| State                | Averagedamage | Averagewhendamage |\\r\\n| -------------------- | ------------- | ----------------- |\\r\\n| TEXAS                | 7524          | 491291            |\\r\\n| KANSAS               | 15366         | 695021            |\\r\\n| IOWA                 | 4332          | 28203             |\\r\\n| ILLINOIS             | 44568         | 2574757           |\\r\\n| MISSOURI             | 340719        | 8806281           |\\r\\n| GEORGIA              | 490702        | 57239005          |\\r\\n| MINNESOTA            | 2835          | 144175            |\\r\\n| WISCONSIN            | 17764         | 438188            |\\r\\n| NEBRASKA             | 21366         | 187726            |\\r\\n| NEW YORK             | 5             | 10000             |\\r\\n| ... | ... | ... |',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/avgif-aggfunction\",\"avgif-aggfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"azure_digital_twins_query_request\",\"The `azure_digital_twins_query_request` plugin runs an Azure Digital Twins query as part of a Kusto Query Language query. The plugin is invoked with the [`evaluate`](evaluateoperator.md) operator.\",\"Using the plugin, you can query across data in both Azure Digital Twins and any data source accessible through the Kusto Query Language. For example, you can [historize digital twin property updates to Azure Data Explorer](#perform-time-series-analytics).\\r\\n\\r\\nFor more information about the plugin, see [Azure Digital Twins query plugin for Azure Data Explorer](https://docs.microsoft.com/azure/digital-twins/concepts-data-explorer-plugin#using-the-plugin).\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`evaluate` `azure_digital_twins_query_request` `(` *AdtInstanceEndpoint* `,` *AdtQuery* `)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *AdtInstanceEndpoint* | string | &check; | The Azure Digital Twins instance endpoint to be queried. |\\r\\n| *AdtQuery* | string | &check; | The query to run against the Azure Digital Twins endpoint. This query is written in a custom SQL-like query language for Azure Digital Twins, called the Azure Digital Twins query language. For more information, see [Query language for Azure Digital Twins](https://docs.microsoft.com/azure/digital-twins/concepts-query-language).|\\r\\n\\r\\n## Authentication and authorization\\r\\n\\r\\nThe `azure_digital_twins_query_request` plugin uses the Azure AD account of the user running the query to authenticate. To run a query, a user must at least be granted the **Azure Digital Twins Data Reader** role. Information on how to assign this role can be found in [Security for Azure Digital Twins solutions](https://docs.microsoft.com/azure/digital-twins/concepts-security#authorization-azure-roles-for-azure-digital-twins).\",\"The following examples show how you can run various Azure Digital Twins queries, including queries that use additional Kusto expressions.\\r\\n\\r\\n### Retrieval of all twins within an Azure Digital Twins instance\\r\\n\\r\\nThe following example returns all digital twins within an Azure Digital Twins instance.\\r\\n\\r\\n```\\r\\nevaluate azure_digital_twins_query_request(\\r\\n  'https://contoso.api.wcus.digitaltwins.azure.net',\\r\\n  'SELECT T AS Twins FROM DIGITALTWINS T')\\r\\n```\\r\\n\\r\\n![Screenshot of the twins present in the Azure Digital Twins instance.](images/azure-digital-twins-query-request-plugin/adt-twins.png)\\r\\n\\r\\n### Projection of twin properties as columns along with additional Kusto expressions\\r\\n\\r\\nThe following example returns the result from the plugin as separate columns, and then performs additional operations using Kusto expressions.\\r\\n\\r\\n```\\r\\nevaluate azure_digital_twins_query_request(\\r\\n  'https://contoso.api.wcus.digitaltwins.azure.net',\\r\\n  'SELECT T.Temperature, T.Humidity FROM DIGITALTWINS T WHERE IS_PRIMITIVE(T.Temperature) AND IS_PRIMITIVE(T.Humidity)')\\r\\n| where Temperature > 20\\r\\n| project TemperatureInC = Temperature, Humidity\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|TemperatureInC|Humidity|\\r\\n|---|---|\\r\\n|21|48|\\r\\n|49|34|\\r\\n|80|32|\\r\\n\\r\\n## Perform time series analytics\\r\\n\\r\\nYou can use the data history integration feature of Azure Digital Twins to historize digital twin property updates to Azure Data Explorer. To learn how to view the historized twin updates in Azure Data Explorer, see [View the historized twin updates in Azure Data Explorer](https://docs.microsoft.com/azure/digital-twins/how-to-use-data-history?tabs=cli#view-the-historized-twin-updates-in-azure-data-explorer)\\r\\n\\r\\n---\\r\\n\\r\\n> [!IMPORTANT]\\r\\n> The content below is Microsoft confidential(not available in the [public site](https://docs.microsoft.com/en-us/azure/data-explorer/))\\r\\n\\r\\n# azure_digital_twins_query_request plugin (preview)\\r\\n\\r\\nRuns an Azure Digital Twins query as part of the KQL query.\\r\\n\\r\\nUsing the plugin, you can reason across data in both Azure Digital Twins and any data source accessible through the Kusto Query Language (KQL). For example, you can use the plugin to contextualize time series data in Kusto by joining it with knowledge graph data held in Azure Digital Twins.\\r\\n\\r\\n>[!NOTE]\\r\\n>* The Azure Digital Twins query plugin is in preview.\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`evaluate` `azure_digital_twins_query_request` `(` *AdtInstanceEndpoint* `,` *AdtQuery* `)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *AdtInstanceEndpoint*: A `string` literal indicating the Azure Digital Twins instance endpoint to be queried.\\r\\n\\r\\n* *AdtQuery*: A `string` literal indicating the query that is to be executed against the Azure Digital Twins endpoint. This query is written in a custom SQL-like query language for Azure Digital Twins, referred to as the **Azure Digital Twins query language**. For more information on the query language, see [**Query language | Azure Digital Twins documentation**](https://docs.microsoft.com/azure/digital-twins/concepts-query-language).\\r\\n\\r\\n\\r\\n## Authentication and Authorization\\r\\n\\r\\nThe user of the azure_digital_twins_query_request plugin must be granted the **Azure Digital Twins Data Reader** role, as the user's Azure AD token is used to authenticate. Information on how to assign this role can be found in [**Security for Azure Digital Twins solutions | Azure Digital Twins documentation**](https://docs.microsoft.com/azure/digital-twins/concepts-security#authorization-azure-roles-for-azure-digital-twins).\\r\\n\\r\\n## Setup\\r\\n\\r\\nThis plugin is disabled by default, as it is in still in preview. To enable the plugin on your cluster, run the following command:\\r\\n`.enable plugin azure_digital_twins_query_request`. This command requires **All Databases admin** permission. \\r\\n\\r\\nFor more information on this command, see [**.enable plugin | Azure Data Explorer documentation**](../management/enable-plugin.md). For more information on role-based authorization in Kusto, see [**Role-based Authorization in Kusto | Azure Data Explorer documentation**](https://docs.microsoft.com/azure/data-explorer/kusto/management/access-control/role-based-authorization).\\r\\n\\r\\n## Examples\\r\\n\\r\\nThe following examples show how you can perform various queries, along with using additional Kusto expressions.\\r\\n\\r\\n### Retrieval of all twins within an Azure Digital Twins instance\\r\\n\\r\\nThis example returns all digital twins within an Azure Digital Twins instance.\\r\\n\\r\\n```kusto\\r\\nevaluate azure_digital_twins_query_request(\\r\\n  'https://contoso.api.wcus.digitaltwins.azure.net',\\r\\n  'SELECT T AS Twins FROM DIGITALTWINS T')\\r\\n```\\r\\n\\r\\nThe result looks like this:\\r\\n\\r\\n![The twins present in the Azure Digital Twins instance](images/adt-twins.png \\\"The twins present in the Azure Digital Twins instance\\\")\\r\\n\\r\\n### Projection of twin properties as columns along with additional Kusto expressions\\r\\n\\r\\nThis example returns the result from the plugin as separate columns, and then performs additional operations using Kusto expressions.\\r\\n\\r\\n```kusto\\r\\nevaluate azure_digital_twins_query_request(\\r\\n  'https://contoso.api.wcus.digitaltwins.azure.net',\\r\\n  'SELECT T.Temperature, T.Humidity FROM DIGITALTWINS T WHERE IS_PRIMITIVE(T.Temperature) AND IS_PRIMITIVE(T.Humidity)')\\r\\n| where Temperature > 20\\r\\n| project TemperatureInC = Temperature, Humidity\\r\\n```\\r\\n\\r\\nThe result looks like this:\\r\\n\\r\\n|TemperatureInC|Humidity|\\r\\n|---|---|\\r\\n|21|48|\\r\\n|49|34|\\r\\n|80|32|\\r\\n\\r\\n### Joining the plugin results with another data source\\r\\n\\r\\nThis example shows how to perform complex analysis, such as anomaly detection, through a `join` operation between the plugin results and a table containing historical data in a Kusto table, based on the ID column (`$dtid`).\\r\\n\\r\\n```kusto\\r\\nevaluate azure_digital_twins_query_request(\\r\\n  'https://contoso.api.wcus.digitaltwins.azure.net',\\r\\n  'SELECT T.$dtId AS tid, T.Temperature FROM DIGITALTWINS T WHERE IS_PRIMITIVE(T.$dtId) AND IS_PRIMITIVE(T.Temperature)')\\r\\n| project tostring(tid), todouble(Temperature)\\r\\n| join kind=inner (\\r\\n    ADT_Data_History\\r\\n) on $left.tid == $right.twinId\\r\\n| make-series num=avg(value) on timestamp from min_t to max_t step dt by tid\\r\\n| extend (anomalies, score , baseline) = \\r\\n          series_decompose_anomalies(num, 1.5, -1, 'linefit')\\r\\n| render anomalychart with(anomalycolumns=anomalies, title= 'Test, anomalies')\\r\\n```\\r\\n\\r\\nADT_Data_History is a table whose schema as follows:\\r\\n\\r\\n|timestamp|twinId|modelId|name|value|relationshipTarget|relationshipId|\\r\\n|---|---|---|---|---|---|---|\\r\\n|2021-02-01 17:24|contosoRoom|dtmi:com:contoso:Room;1|Temperature|24|...|..|\\r\\n\\r\\nThe output looks like this:\\r\\n\\r\\n![Anomaly chart of the above expression](images/adt-anomaly.png \\\"Highlighted point is the anomaly\\\")\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/azure-digital-twins-query-request-plugin\",\"azure-digital-twins-query-request-plugin.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"bag_has_key\",\"Checks whether a dynamic property bag object contains a given key.\",\"## Syntax\\r\\n\\r\\n`bag_has_key(`*bag*`,`*key*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n| -- | -- | -- | -- |\\r\\n| *bag* | dynamic | &check; | The property bag to search. |\\r\\n| *key* | string | &check; | The key for which to search.  Search for a nested key using the [JSONPath](jsonpath.md) notation. Array indexing isn't supported. |\\r\\n\\r\\n## Returns\\r\\n\\r\\nTrue or false depending on if the key exists in the bag.\",'> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA0tJLAHCpJxUjcy8gtISK4WUyrzE3MxkTa5oLgUggHI1qtWzUysN1RWsFAyNjHUUQDwjdSsF9cSkZPVaTR1Cao2R1cZy1SikVpSk5qUoFKUWl+aUKNgqJCWmx2ckFscD1UJcArNDEwDPKMflogAAAA==\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\ndatatable(input: dynamic)\\r\\n[\\r\\n    dynamic({\\'key1\\' : 123, \\'key2\\': \\'abc\\'}),\\r\\n    dynamic({\\'key1\\' : 123, \\'key3\\': \\'abc\\'}),\\r\\n]\\r\\n| extend result = bag_has_key(input, \\'key2\\')\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|input|result|\\r\\n|---|---|\\r\\n|{<br>  \"key1\": 123,<br>  \"key2\": \"abc\"<br>}|true<br>|\\r\\n|{<br>  \"key1\": 123,<br>  \"key3\": \"abc\"<br>}|false<br>|\\r\\n\\r\\n### Search using a JSONPath key\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAy2OwQqDMBBE7/mKPRTWQJAk3gL9EhGJGlqpTUUjGK3/3g3p7unN7DA72EDbTa4Y/bwFA0P09j32nNUMaP5YnPhyUaEBpSsBCTTBifPymRWCAbRdj+QkIVm4xwOvfFoR10pKAVrK5uKCNewLbg/OD7C4dZsC3KGzj/Zp15YC+RkK38rUVOYW/gOk4uu+rQAAAA==\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\ndatatable(input: dynamic)\\r\\n[\\r\\n    dynamic({\\'key1\\': 123, \\'key2\\': {\\'prop1\\' : \\'abc\\', \\'prop2\\': \\'xyz\\'}, \\'key3\\': [100, 200]}),\\r\\n]\\r\\n| extend result = bag_has_key(input, \\'$.key2.prop1\\')\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|input|result|\\r\\n|---|---|\\r\\n|{<br>  \"key1\": 123,<br>  \"key2\": {<br>    \"prop1\": \"abc\",<br>    \"prop2\": \"xyz\"<br>  },<br>  \"key3\": [<br>    100,<br>    200<br>  ]<br>}|true<br>|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/bag-has-key-function\",\"bag-has-key-function.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"bag_keys\",\"Enumerates all the root keys in a dynamic property bag object.\",\"## Syntax\\r\\n\\r\\n`bag_keys(`*object*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n| -- | -- | -- | -- |\\r\\n| *object* | dynamic | &check; | The property bag object for which to enumerate keys. |\\r\\n\\r\\n## Returns\\r\\n\\r\\nAn array of keys, order is undetermined.\",'> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA3XMSwrDIBCA4b2nmN0ouEnSBwg9iUjRjIRQaxdNICHt3WvzqN1kZjP8fAzZLq0LnreR/KDCIzYSSNEY7b2tBWgGaYrUlsIntKjQoQSsURVl9RYSZlTuoQlpkYnOstqT+kfNZg/Zxj6EtR7/PmzylFt6usZzjtoIZtgL/ND5SHDz4xMu4Gxz/Z6cxAfYZXgQDQEAAA==\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\ndatatable(index:long, d:dynamic) [\\r\\n    1, dynamic({\\'a\\':\\'b\\', \\'c\\':123}), \\r\\n    2, dynamic({\\'a\\':\\'b\\', \\'c\\':{\\'d\\':123}}),\\r\\n    3, dynamic({\\'a\\':\\'b\\', \\'c\\':[{\\'d\\':123}]}),\\r\\n    4, dynamic(null),\\r\\n    5, dynamic({}),\\r\\n    6, dynamic(\\'a\\'),\\r\\n    7, dynamic([])\\r\\n]\\r\\n| extend keys = bag_keys(d)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|index|d|keys|\\r\\n|---|---|---|\\r\\n|1|{<br>  \"a\": \"b\",<br>  \"c\": 123<br>}|[<br>  \"a\",<br>  \"c\"<br>]|\\r\\n|2|{<br>  \"a\": \"b\",<br>  \"c\": {<br>    \"d\": 123<br>  }<br>}|[<br>  \"a\",<br>  \"c\"<br>]|\\r\\n|3|{<br>  \"a\": \"b\",<br>  \"c\": [<br>    {<br>      \"d\": 123<br>    }<br>  ]<br>}|[<br>  \"a\",<br>  \"c\"<br>]|\\r\\n|4|||\\r\\n|5|{}|[]|\\r\\n|6|a||\\r\\n|7|[]||',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/bagkeysfunction\",\"bagkeysfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"bag_merge\",\"Merges `dynamic` property bags into a `dynamic` property bag object with all properties merged.\",\"## Syntax\\r\\n\\r\\n`bag_merge(`*bag1*`,`*bag2*`[`,`*bag3*, ...])`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n| -- | -- | -- | -- |\\r\\n| *bag1...bagN* | dynamic | &check; | The property bags to merge. The function accepts between 2 to 64 arguments. |\\r\\n\\r\\n## Returns\\r\\n\\r\\nReturns a `dynamic` property bag. Results from merging all of the input property bag objects. If a key appears in more than one input object, an arbitrary value out of the possible values for this key will be chosen.\",'> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAysoyswrUShKLS7NKVGwVUhKTI/PTS1KT9XgUlBQSKnMS8zNTNaoVnc0VLcyNNJRUHcCMkC0M5A2rtXUQVNmpG5lYQhSBmKA1IE11mpqAgDRMHuwaAAAAA==\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint result = bag_merge(\\r\\n   dynamic({\\'A1\\':12, \\'B1\\':2, \\'C1\\':3}),\\r\\n   dynamic({\\'A2\\':81, \\'B2\\':82, \\'A1\\':1}))\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|result|\\r\\n|---|\\r\\n|{<br>  \"A1\": 12,<br>  \"B1\": 2,<br>  \"C1\": 3,<br>  \"A2\": 81,<br>  \"B2\": 82<br>}|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/bag-merge-function\",\"bag-merge-function.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"bag_pack\",\"Creates a [dynamic](scalar-data-types/dynamic.md) property bag object from a list of keys and values.\",\"> **Deprecated aliases**: pack(), pack_dictionary()\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`bag_pack(`*key1*`,` *value1*`,` *key2*`,` *value2*`,... )`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n|*key*| string | &check; | The key name.|\\r\\n|*value*| string | &check; | The key value.|\\r\\n\\r\\n> [!NOTE]\\r\\n> The *key* and *value* strings are an alternating list the total length of the list must be even.\\r\\n\\r\\n## Returns\\r\\n\\r\\nReturns a `dynamic` property bag object from the listed *key* and *value* inputs.\",'**Example 1**\\r\\n\\r\\nThe following example creates and returns a property bag from an alternating list of keys and values.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAysoyswrUUhKTI8vSEzO1lDySS1LzVHSUVDyzEvLL8pNLMnMzwNxA4ryk1OLiz1dgBxDI2MToJBLYkkikIfQW1oE1lleXq6XlJmXrpecn6ukqQkA9RzT32IAAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint bag_pack(\"Level\", \"Information\", \"ProcessID\", 1234, \"Data\", bag_pack(\"url\", \"www.bing.com\"))\\r\\n```\\r\\n\\r\\n**Results**\\r\\n\\r\\n|print_0|\\r\\n|--|\\r\\n|{\"Level\":\"Information\",\"ProcessID\":1234,\"Data\":{\"url\":\"www.bing.com\"}}|\\r\\n\\r\\n**Example 2**\\r\\n\\r\\nThe following example uses two tables, *SmsMessages* and *MmsMessages*, and returns their common columns and a property bag from the other columns. The tables are created ad-hoc as part of the query.\\r\\n\\r\\nSmsMessages\\r\\n\\r\\n|SourceNumber |TargetNumber| CharsCount |\\r\\n|---|---|---|\\r\\n|555-555-1234 |555-555-1212 | 46 |\\r\\n|555-555-1234 |555-555-1213 | 50 |\\r\\n|555-555-1212 |555-555-1234 | 32 |\\r\\n\\r\\nMmsMessages\\r\\n\\r\\n|SourceNumber |TargetNumber| AttachmentSize | AttachmentType | AttachmentName |\\r\\n|---|---|---|---|---|\\r\\n|555-555-1212 |555-555-1213 | 200 | jpeg | Pic1 |\\r\\n|555-555-1234 |555-555-1212 | 250 | jpeg | Pic2 |\\r\\n|555-555-1234 |555-555-1213 | 300 | png | Pic3 |\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA61Sy26DMBC88xUrnxKJSmBCD604VDknikRuVVUZWIEJGGQb9aF+fG1olJgmbQ/FwmZ3Zr3MaBvUkLZqg0qxEhUkUDBtVtYgLDwwT9oNMsft0GYo70BpyUXpj8ieyRL1JWRdManW3SD0Me8t4XGESBzHN/YNabQi/nkcUhuvbs3+KzUa44D4c+Z0ybwyogS8p3uvMXI3/y73QWuWVy0KnfJ3vIbt3/qr2Ja1+JNVc1WTfhoE9qh7LO2543n43ZDLLtN4Xkr/UDp2jaauvThWRsRaez5F3gfUHRdw4KJIuBAoHdc74dhs2PiqURSwY/kBiyRj5XNvPhfkNEim1ykwfV3PDeomHIZ13mHYhMOw/jsMm1haHS8VSnR+F5JkZpKh9bKrMdcO0XdGxv9S9wkokKY3cgMAAA==\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nlet SmsMessages = datatable (\\r\\n    SourceNumber: string,\\r\\n    TargetNumber: string,\\r\\n    CharsCount: string\\r\\n) [\\r\\n    \"555-555-1234\", \"555-555-1212\", \"46\", \\r\\n    \"555-555-1234\", \"555-555-1213\", \"50\",\\r\\n    \"555-555-1212\", \"555-555-1234\", \"32\" \\r\\n];\\r\\nlet MmsMessages = datatable (\\r\\n    SourceNumber: string,\\r\\n    TargetNumber: string,\\r\\n    AttachmentSize: string,\\r\\n    AttachmentType: string,\\r\\n    AttachmentName: string\\r\\n) [\\r\\n    \"555-555-1212\", \"555-555-1213\", \"200\", \"jpeg\", \"Pic1\",\\r\\n    \"555-555-1234\", \"555-555-1212\", \"250\", \"jpeg\", \"Pic2\",\\r\\n    \"555-555-1234\", \"555-555-1213\", \"300\", \"png\", \"Pic3\"\\r\\n];\\r\\nSmsMessages \\r\\n| join kind=inner MmsMessages on SourceNumber\\r\\n| extend Packed=bag_pack(\"CharsCount\", CharsCount, \"AttachmentSize\", AttachmentSize, \"AttachmentType\", AttachmentType, \"AttachmentName\", AttachmentName) \\r\\n| where SourceNumber == \"555-555-1234\"\\r\\n| project SourceNumber, TargetNumber, Packed\\r\\n```\\r\\n\\r\\n**Results**\\r\\n\\r\\n| SourceNumber | TargetNumber | Packed |\\r\\n|--|--|--|--|\\r\\n| 555-555-1234 | 555-555-1213 | {\"CharsCount\":\"50\",\"AttachmentSize\":\"250\",\"AttachmentType\":\"jpeg\",\"AttachmentName\":\"Pic2\"} |\\r\\n| 555-555-1234 | 555-555-1212 | {\"CharsCount\":\"46\",\"AttachmentSize\":\"250\",\"AttachmentType\":\"jpeg\",\"AttachmentName\":\"Pic2\"} |\\r\\n| 555-555-1234 | 555-555-1213 | {\"CharsCount\":\"50\",\"AttachmentSize\":\"300\",\"AttachmentType\":\"png\",\"AttachmentName\":\"Pic3\"} |\\r\\n| 555-555-1234 | 555-555-1212 | {\"CharsCount\":\"46\",\"AttachmentSize\":\"300\",\"AttachmentType\":\"png\",\"AttachmentName\":\"Pic3\"} |',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/packfunction\",\"packfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"bag_pack_columns\",\"Creates a dynamic property bag object from a list of columns.\",\"## Syntax\\r\\n\\r\\n`bag_pack_columns(`*column1*`,` *column2*`,... )`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n|*column*| scalar | &check; | A column to pack. The name of the column is the property name in the property bag.|\\r\\n\\r\\n## Returns\\r\\n\\r\\nReturns a `dynamic` property bag object from the listed *columns*.\",'The following example creates a property bag that includes the `Id` and `Value` columns:\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA0tJLAHCpJxUDc8UK4XikqLMvHQdhbDEnNJUBNe/JCO1yEohJz8vXZOXK5qXSwEIlByVdBSUyhJz4hOBDEMdqKgTTDQJyDCCiTrDRJOBDGNerlherhqF1IqS1LwUhYDE5OzUFAVbhaTE9PgCICc+OT+nNDevGOgkqFM0AV8bSzWnAAAA\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\ndatatable(Id: string, Value: string, Other: long)\\r\\n[\\r\\n    \"A\", \"val_a\", 1,\\r\\n    \"B\", \"val_b\", 2,\\r\\n    \"C\", \"val_c\", 3\\r\\n]\\r\\n| extend Packed = bag_pack_columns(Id, Value)\\r\\n```\\r\\n\\r\\n|Id|Value|Other|Packed|\\r\\n|---|---|---|---|\\r\\n|A|val_a|1|{<br>  \"Id\": \"A\",<br>  \"Value\": \"val_a\"<br>}|\\r\\n|B|val_b|2|{<br>  \"Id\": \"B\",<br>  \"Value\": \"val_b\"<br>}|\\r\\n|C|val_c|3|{<br>  \"Id\": \"C\",<br>  \"Value\": \"val_c\"<br>}|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/bag-pack-columns-function\",\"bag-pack-columns-function.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"bag_remove_keys\",\"Removes keys and associated values from a `dynamic` property bag.\",\"## Syntax\\r\\n\\r\\n`bag_remove_keys(`*bag*`,`*keys*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n| -- | -- | -- | -- |\\r\\n| *bag* | dynamic | &check; | The property bag from which to remove keys. |\\r\\n| *keys* | string | &check; | The array keys to be removed from the input. The keys are the first level of the property bag. You can specify keys on the nested levels using [JSONPath](jsonpath.md) notation. Array indexing isn't supported. |\\r\\n\\r\\n## Returns\\r\\n\\r\\nReturns a `dynamic` property bag without specified keys and their values.\",'> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA0tJLAHCpJxUjcy8gtISq5TKvMTczGRNrmguBSCAcjWq1bNTKw3VFawUDI2MdUAyCiARI3UrBfXEpGT1Wk0dHOrVyxJzSlPVdcDqjYHqTYz0DEDKY7lqFFIrSlLzUhSKUotLc0pskxLT44tSc/PLUuOBaoshLtKBmxkNsRFikol6rKYmAD1YmXe9AAAA\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\ndatatable(input:dynamic)\\r\\n[\\r\\n    dynamic({\\'key1\\' : 123,     \\'key2\\': \\'abc\\'}),\\r\\n    dynamic({\\'key1\\' : \\'value\\', \\'key3\\': 42.0}),\\r\\n]\\r\\n| extend result=bag_remove_keys(input, dynamic([\\'key2\\', \\'key4\\']))\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|input|result|\\r\\n|---|---|\\r\\n|{<br>  \"key1\": 123,<br>  \"key2\": \"abc\"<br>}|{<br>  \"key1\": 123<br>}|\\r\\n|{<br>  \"key1\": \"value\",<br>  \"key3\": 42.0<br>}|{<br>  \"key1\": \"value\",<br>  \"key3\": 42.0<br>}|\\r\\n\\r\\n### Remove inner properties of dynamic values using JSONPath notation\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAz2O3QqDMAyF7/sUuRjEQpFW74Q9iRSpNgyZf2gVnfPd19JtydWXk5wTa5zvuqOkHabVFfYYTN82nJUMfH0xOfFJh8ICVJYLCJB5OHGax0khFICmbtArYRAk3I8XXnE191wqKQVkUuqLC6bZG2h3NFiYaVk7d6/No5qpHzeq/MUSvxH//BJvaQhNY+DPV3P+AU1I1W7BAAAA\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\ndatatable(input:dynamic)\\r\\n[\\r\\n    dynamic({\\'key1\\': 123, \\'key2\\': {\\'prop1\\' : \\'abc\\', \\'prop2\\': \\'xyz\\'}, \\'key3\\': [100, 200]}),\\r\\n]\\r\\n| extend result=bag_remove_keys(input, dynamic([\\'$.key2.prop1\\', \\'key3\\']))\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|input|result|\\r\\n|---|---|\\r\\n|{<br>  \"key1\": 123,<br>  \"key2\": {<br>    \"prop1\": \"abc\",<br>    \"prop2\": \"xyz\"<br>  },<br>  \"key3\": [<br>    100,<br>    200<br>  ]<br>}|{<br>  \"key1\": 123,<br>  \"key2\": {<br>    \"prop2\": \"xyz\"<br>  }<br>}|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/bag-remove-keys-function\",\"bag-remove-keys-function.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"bag_set_key\",\"bag_set_key() receives a `dynamic` property-bag, a key and a value. The function sets the given key in the bag to the given value. The function will override any existing value in case the key already exists.\",\"## Syntax\\r\\n\\r\\n`bag_set_key(`*bag*`,`*key*`,`*value*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n| -- | -- | -- | -- |\\r\\n| *bag* | dynamic | &check; | The property bag to modify. |\\r\\n| *key* | string | &check; | The key to set. Either a JSON path (you can specify a key on the nested levels using [JSONPath](jsonpath.md) notation) or the key name for a root level key. Array indexing or root JSON path aren't supported. |\\r\\n| *value* | any scalar data type | &check; | The value to which the key is set. |\\r\\n\\r\\n## Returns\\r\\n\\r\\nReturns a `dynamic` property-bag with specified key-value pairs. If the input bag isn't a property-bag, a `null` value is returned.\\r\\n\\r\\n> [!NOTE]\\r\\n> To treat `null`s as empty bags, use `coalesce(x, dynamic({}))`\\u200b.\",'### Use a root-level key\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA0tJLAHCpJxUjcy8gtISK4WUyrzE3MxkTYVoXi4FIIDyNarVs1MrDdWtFAx1FEBMIyDTqFZTRwG/MmMgUz0xKVkdqJSXK5aXq0YhtaIkNS9FoSi1uDSnRMFWISkxPb44tSQeqBriCJhOHQVjTQAoaFq+oAAAAA==\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\ndatatable(input: dynamic) [\\r\\n    dynamic({\\'key1\\': 1, \\'key2\\': 2}), \\r\\n    dynamic({\\'key1\\': 1, \\'key3\\': \\'abc\\'}),\\r\\n]\\r\\n| extend result = bag_set_key(input, \\'key3\\', 3)\\r\\n```\\r\\n\\r\\n|input|result|\\r\\n|---|---|\\r\\n|{<br>  \"key1\": 1,<br>  \"key2\": 2<br>}|{<br>  \"key1\": 1,<br>  \"key2\": 2,<br>  \"key3\": 3<br>}|\\r\\n|{<br>  \"key1\": 1,<br>  \"key3\": \"abc\"<br>}|{<br>  \"key1\": 1,<br>  \"key3\": 3<br>}|\\r\\n\\r\\n### Use a JSONPath key\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA0tJLAHCpJxUjcy8gtISK4WUyrzE3MxkzWheLgUggHI1qtWzUysN1a0UDI2MdRRAHCMgp1q9oCi/ACEM4oHE1Ssqq9RrazV1cBtSq8nLFcvLVaOQWlGSmpeiUJRaXJpTomCrkJSYHl+cWhIPVApxE9BcFT2QhXoQy4D8xKRkdU0AFVPFlLsAAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\ndatatable(input: dynamic)[\\r\\n    dynamic({\\'key1\\': 123, \\'key2\\': {\\'prop1\\': 123, \\'prop2\\': \\'xyz\\'}}),\\r\\n    dynamic({\\'key1\\': 123})\\r\\n]\\r\\n| extend result = bag_set_key(input, \\'$.key2.prop1\\', \\'abc\\')\\r\\n```\\r\\n\\r\\n|input|result|\\r\\n|---|---|\\r\\n|{<br>  \"key1\": 123,<br>  \"key2\": {<br>  \"prop1\": 123,<br>  \"prop2\": \"xyz\"<br>}<br>}|{<br>  \"key1\": 123,<br>  \"key2\": {<br>  \"prop1\": \"abc\",<br>  \"prop2\": \"xyz\"<br>}<br>}|\\r\\n|{<br>  \"key1\": 123<br>}|{<br>  \"key1\": 123,<br>  \"key2\": {<br>  \"prop1\": \"abc\"<br>}<br>}|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/bag-set-key-function\",\"bag-set-key-function.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"bag_unpack\",\"The `bag_unpack` plugin unpacks a single column of type `dynamic`, by treating each property bag top-level slot as a column. The plugin is invoked with the [`evaluate`](evaluateoperator.md) operator.\",\"## Syntax\\r\\n\\r\\n*T* `|` `evaluate` `bag_unpack(` *Column* [`,` *OutputColumnPrefix* ] [`,` *columnsConflict* ] [`,` *ignoredProperties* ] `)` [`:` *OutputSchema*]\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required| Description |\\r\\n|---|---|---|---|\\r\\n| *T* | string | &check; | The tabular input whose column *Column* is to be unpacked. |\\r\\n| *Column* | dynamic | &check; | The column of *T* to unpack. |\\r\\n| *OutputColumnPrefix* | string | | A common prefix to add to all columns produced by the plugin. |\\r\\n| *columnsConflict* | string | | The direction for column conflict resolution. Valid values: <br />`error` - Query produces an error (default)<br />`replace_source` - Source column is replaced<br />`keep_source` - Source column is kept\\r\\n| *ignoredProperties* | dynamic | An optional set of bag properties to be ignored.\\r\\n| *OutputSchema* | | | The names and types for the expected columns of the `bag_unpack` plugin output.<br /><br />**Syntax**: `(` *ColumnName* `:` *ColumnType* [`,` ...] `)`<br /><br />Specifying the expected schema optimizes query execution by not having to first run the actual query to explore the schema. An error is raised if the run-time schema doesn't match the *OutputSchema* schema. |\\r\\n\\r\\n## Returns\\r\\n\\r\\nThe `bag_unpack` plugin returns a table with as many records as its tabular input (*T*). The schema of the table is the same as the schema of its tabular input with the following modifications:\\r\\n\\r\\n* The specified input column (*Column*) is removed.\\r\\n* The schema is extended with as many columns as there are distinct slots in\\r\\n  the top-level property bag values of *T*. The name of each column corresponds\\r\\n  to the name of each slot, optionally prefixed by *OutputColumnPrefix*. Its\\r\\n  type is either the type of the slot, if all values of the same slot have the\\r\\n  same type, or `dynamic`, if the values differ in type.\\r\\n\\r\\n> [!NOTE]\\r\\n> If the *OutputSchema* is not specified, the plugin's output schema varies according to the input data values. Therefore, multiple executions of the plugin using different data inputs, may produce different output schema.\\r\\n\\r\\n> [!NOTE]\\r\\n> The input data to the plugin must be such that the output schema follows all the rules for a tabular schema. In particular:\\r\\n>\\r\\n> * An output column name can't be the same as an existing column in the tabular\\r\\n    input *T*, unless it's the column to be unpacked (*Column*), since that will produce two columns with the same name.\\r\\n>\\r\\n> * All slot names, when prefixed by *OutputColumnPrefix*, must be valid\\r\\n    entity names and follow the [identifier naming rules](./schema-entities/entity-names.md#identifier-naming-rules).\",'### Expand a bag\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA0tJLAHCpJxUjRSrlMq8xNzMZE2uaC4FIIByNaqV/BJzU5WsFJS88jPylHQUlBzTgVwjg1pNHRwKXRLLUuEKTfAo9Eoszs3MQ6g1BquN5apRSC1LzClNLElVSEpMjy/NK0hMztZI0QQABlsx468AAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\ndatatable(d:dynamic)\\r\\n[\\r\\n    dynamic({\"Name\": \"John\", \"Age\":20}),\\r\\n    dynamic({\"Name\": \"Dave\", \"Age\":40}),\\r\\n    dynamic({\"Name\": \"Jasmine\", \"Age\":30}),\\r\\n]\\r\\n| evaluate bag_unpack(d)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|Age|Name   |\\r\\n|---|-------|\\r\\n|20 |John   |\\r\\n|40 |Dave   |\\r\\n|30 |Jasmine|\\r\\n\\r\\n### Expand a bag with OutputColumnPrefix\\r\\n\\r\\nExpand a bag and use the `OutputColumnPrefix` option to produce column names that begin with the prefix \\'Property_\\'.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA0tJLAHCpJxUjRSrlMq8xNzMZE2uaC4FIIByNaqV/BJzU5WsFJS88jPylHQUlBzTgVwjg1pNHRwKXRLLUuEKTfAo9Eoszs3MQ6g1BquN5apRSC1LzClNLElVSEpMjy/NK0hMztZI0VFQDyjKL0gtKqmMV9cEAG0gI1O8AAAA\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\ndatatable(d:dynamic)\\r\\n[\\r\\n    dynamic({\"Name\": \"John\", \"Age\":20}),\\r\\n    dynamic({\"Name\": \"Dave\", \"Age\":40}),\\r\\n    dynamic({\"Name\": \"Jasmine\", \"Age\":30}),\\r\\n]\\r\\n| evaluate bag_unpack(d, \\'Property_\\')\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|Property_Age|Property_Name|\\r\\n|------------|-------------|\\r\\n|20          |John         |\\r\\n|40          |Dave         |\\r\\n|30          |Jasmine      |\\r\\n\\r\\n### Expand a bag with columnsConflict\\r\\n\\r\\nExpand a bag and use the `columnsConflict` option to resolve conflicts between existing columns and columns produced by the `bag_unpack()` operator.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA43NsQrCMBAG4L1PcWRJC4WKOhUcRKcOOjmJlGty1mKalCapiPrupgq69m66/+fjJLqwlaJ4hy3l1vWNrlOQubxrbBuRRMcIwvC9kmVIiIfyW8UPNhqWAyvMRbMU2LoO53z2StIJaIsD/dByIirQto3+u8XHnaIn0IDKoyOosC697lBcY5mCMMq32m6MPqtGuBXvqVMoqLTG94J4AlkGB0ug6Qbj2zdNIgveEgEAAA==\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\ndatatable(Name:string, d:dynamic)\\r\\n[\\r\\n    \\'Old_name\\', dynamic({\"Name\": \"John\", \"Age\":20}),\\r\\n    \\'Old_name\\', dynamic({\"Name\": \"Dave\", \"Age\":40}),\\r\\n    \\'Old_name\\', dynamic({\"Name\": \"Jasmine\", \"Age\":30}),\\r\\n]\\r\\n| evaluate bag_unpack(d, columnsConflict=\\'replace_source\\') // Use new name\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|Age|Name   |\\r\\n|---|-------|\\r\\n|20 |John   |\\r\\n|40 |Dave   |\\r\\n|30 |Jasmine|\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA43NzwqCQBAG8LtPMexlFQSjOgkdok4G9QARMu5OJu4fcV0hqndvLairM6f5Pn6MxCFspSg+oqbcDX1j6hRkLu8GdSOS6BxBGH5SsgwJ8VB+q/jBJsNyYIW9GZYC29bhXC5eSToD7XGkH1rPRAU63Zi/W33cJXoCjag8DgQV1qU3HYo2likIq7w2bmfNVTVi2PCWqCud9b0gnkCWwSEEYJWE6ekb9wh0nRABAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\ndatatable(Name:string, d:dynamic)\\r\\n[\\r\\n    \\'Old_name\\', dynamic({\"Name\": \"John\", \"Age\":20}),\\r\\n    \\'Old_name\\', dynamic({\"Name\": \"Dave\", \"Age\":40}),\\r\\n    \\'Old_name\\', dynamic({\"Name\": \"Jasmine\", \"Age\":30}),\\r\\n]\\r\\n| evaluate bag_unpack(d, columnsConflict=\\'keep_source\\') // Keep old name\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|Age|Name     |\\r\\n|---|---------|\\r\\n|20 |Old_name |\\r\\n|40 |Old_name |\\r\\n|30 |Old_name |\\r\\n\\r\\n### Expand a bag with ignoredProperties\\r\\n\\r\\nExpand a bag and use the `ignoredProperties` option to ignore certain properties in the property bag.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA3XOPQ+CMBAG4J1fcekCJDUoOJE4mLjIYNwJMQe9IBEKaYHEqP/d8iFOtMt76dsnJ7A1Ny3JEaF4SqyKzLViC8yZR+fFLlgRC4FF9V0yDuyYm9HfDkkIRVoPj3Pc7Bh8XL4inLCnRdivCD5bByLUVSH/RrBiBKORWJ4H51zWisA2fRtQCpOmkg2NqhtSbUHaegP1WHbYEqSY3zrZYPZwBIdi/C6uS/Xw2ypeID7piet+AWW2HHFQAQAA\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\ndatatable(d:dynamic)\\r\\n[\\r\\n    dynamic({\"Name\": \"John\", \"Age\":20, \"Address\": \"Address-1\" }),\\r\\n    dynamic({\"Name\": \"Dave\", \"Age\":40, \"Address\": \"Address-2\"}),\\r\\n    dynamic({\"Name\": \"Jasmine\", \"Age\":30, \"Address\": \"Address-3\"}),\\r\\n]\\r\\n// Ignore \\'Age\\' and \\'Address\\' properties\\r\\n| evaluate bag_unpack(d, ignoredProperties=dynamic([\\'Address\\', \\'Age\\']))\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|Name|\\r\\n|---|\\r\\n|John|\\r\\n|Dave|\\r\\n|Jasmine|\\r\\n\\r\\n### Expand a bag with a query-defined OutputSchema\\r\\n\\r\\nExpand a bag and use the `OutputSchema` option to allow various optimizations to be evaluated before running the actual query.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA0tJLAHCpJxUjRSrlMq8xNzMZE2uaC4FIIByNaqV/BJzU5WsFJS88jPylHQUlBzTgVwjg1pNHRwKXRLLUuEKTfAo9Eoszs3MQ6g1BquN5apRSC1LzClNLElVSEpMjy/NK0hMztZI0VSwUtAA6bUqLinKzEvXUQDqssrJz0vXBADtklvGyQAAAA==\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\ndatatable(d:dynamic)\\r\\n[\\r\\n    dynamic({\"Name\": \"John\", \"Age\":20}),\\r\\n    dynamic({\"Name\": \"Dave\", \"Age\":40}),\\r\\n    dynamic({\"Name\": \"Jasmine\", \"Age\":30}),\\r\\n]\\r\\n| evaluate bag_unpack(d) : (Name:string, Age:long)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|Name  |Age  |\\r\\n|---------|---------|\\r\\n|John     |  20  |\\r\\n|Dave     |  40  |\\r\\n|Jasmine  |  30  |',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/bag-unpackplugin\",\"bag-unpackplugin.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"base64_decode_toarray\",\"Decodes a base64 string to an array of long values.\",\"## Syntax\\r\\n\\r\\n`base64_decode_toarray(`*base64_string*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n| -- | -- | -- | -- |\\r\\n| *base64_string* | string | &check; |  The value to decode from base64 to an array of long values.|\\r\\n\\r\\n## Returns\\r\\n\\r\\nReturns an array of long values decoded from a base64 string.\",\"> [!div class=\\\"nextstepaction\\\"]\\r\\n> <a href=\\\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAysoyswrUQgszcxLtU1KLE41M4lPSU3OT0mNL8lPLCpKrNRQCjYOq0pxt7BV0lRQ4NLXV1D3VtdRUC8FEcUgogRE5KsDAAf/Q9pKAAAA\\\" target=\\\"_blank\\\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint Quine=base64_decode_toarray(\\\"S3VzdG8=\\\")  \\r\\n// 'K', 'u', 's', 't', 'o'\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|Quine|\\r\\n|-----|\\r\\n|[75,117,115,116,111]|\\r\\n\\r\\n## See also\\r\\n\\r\\n* To decode base64 strings to a UTF-8 string, see [base64_decode_tostring()](base64_decode_tostringfunction.md)\\r\\n* To encode strings to a base64 string, see [base64_encode_tostring()](base64_encode_tostringfunction.md)\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/base64_decode_toarrayfunction\",\"base64_decode_toarrayfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"base64_decode_toguid\",\"Decodes a base64 string to a [GUID](./scalar-data-types/guid.md).\",\"## Syntax\\r\\n\\r\\n`base64_decode_toguid(`*base64_string*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *base64_string* | string | &check; | The value to decode from base64 to a GUID. |\\r\\n\\r\\n## Returns\\r\\n\\r\\nReturns a [GUID](./scalar-data-types/guid.md) decoded from a base64 string.\",'> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAysoyswrUQgszcxLVbBVSEosTjUziU9JTc5PSY0vyU8vzUzRUPIqSCpwdS61SAmtNA8oM01PSvWKcHS0tVXSBAA/Uk1CPgAAAA==\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint Quine = base64_decode_toguid(\"JpbpECu8dUy7Pv5gbeJXAA==\")  \\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|Quine|\\r\\n|-----|\\r\\n|10e99626-bc2b-754c-bb3e-fe606de25700|\\r\\n\\r\\nIf you try to decode an invalid base64 string, \"null\" will be returned:\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAysoyswrUXDNLSipVLBVSEosTjUziU9JTc5PSY0vyU8vzUzRUEpMSk4xNDI2VNIEADTfymYuAAAA\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint Empty = base64_decode_toguid(\"abcd1231\")\\r\\n```\\r\\n\\r\\n## See also\\r\\n\\r\\nTo encode a [GUID](./scalar-data-types/guid.md) to a base64 string, see [base64_encode_fromguid()](base64-encode-fromguid-function.md).',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/base64-decode-toguid-function\",\"base64-decode-toguid-function.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"base64_decode_tostring\",\"Decodes a base64 string to a UTF-8 string.\",\"> **Deprecated aliases:** base64_decodestring()\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`base64_decode_tostring(`*base64_string*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n| -- | -- | -- | -- |\\r\\n| *base64_string* | string | &check; | The value to decode from base64 to UTF-8 string. |\\r\\n\\r\\n## Returns\\r\\n\\r\\nReturns UTF-8 string decoded from base64 string.\",'> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAysoyswrUQgszcxLtU1KLE41M4lPSU3OT0mNL8kvLgFKpmsoBRuHVaW4W9gqaQIAN0l1sy4AAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint Quine=base64_decode_tostring(\"S3VzdG8=\")\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|Quine|\\r\\n|-----|\\r\\n|Kusto|\\r\\n\\r\\nTrying to decode a base64 string that was generated from invalid UTF-8 encoding will return null:\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAysoyswrUXDNLSiptE1KLE41M4lPSU3OT0mNL8kvLgFKpmsohRoHVSaGm+YZeHsEGZS4Oxr4mAdlWDqbGfg42ippAgCBCpEtQgAAAA==\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint Empty=base64_decode_tostring(\"U3RyaW5n0KHR0tGA0L7Rh9C60LA=\")\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|Empty|\\r\\n|-----|\\r\\n||\\r\\n\\r\\n## See also\\r\\n\\r\\n* To decode base64 strings to an array of long values, see [base64_decode_toarray()](base64_decode_toarrayfunction.md)\\r\\n* To encode strings to base64 string, see [base64_encode_tostring()](base64_encode_tostringfunction.md)',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/base64_decode_tostringfunction\",\"base64_decode_tostringfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"base64_encode_fromarray\",\"Encodes a base64 string from a bytes array.\",\"## Syntax\\r\\n\\r\\n`base64_encode_fromarray(`*base64_string_decoded_as_array*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *base64_string_decoded_as_array* | dynamic | &check; | The bytes array to be encoded into a base64 string. |\\r\\n\\r\\n## Returns\\r\\n\\r\\nReturns the base64 string encoded from the bytes array.\",'> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA8tJLVFIqixJLY5PLCpKrFSwVSjJL05OzEks0igoyswDSiYWp5qZxKekJuenpMaX5IOVaSgFG4dVpbhb2CppalpzQVRClKTEQ3UUlwBF04EGQvmpeWAT0orycyFmIFmrCQCPOEFEhwAAAA==\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nlet bytes_array = toscalar(print base64_decode_toarray(\"S3VzdG8=\"));\\r\\nprint decoded_base64_string = base64_encode_fromarray(bytes_array)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|decoded_base64_string|\\r\\n|---|\\r\\n|S3VzdG8=|\\r\\n\\r\\nTrying to encode a base64 string from an invalid bytes array that was generated from invalid UTF-8 encoded string will return null:\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA8tJLVFIzS0oqYxPqixJLY5PLCpKrFSwVSjJL05OzEks0igoyswrUUhKLE41M4lPSU3OT0mNL8kHK9NQCjUOqkwMN80z8PYIMihxdzTwMQ/KsHQ2M/BxVNLUtOaCaIaYX1wC5KQDjYaalZoHNiutKD8XYhqGMzQBTXW2Jp0AAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nlet empty_bytes_array = toscalar(print base64_decode_toarray(\"U3RyaW5n0KHR0tGA0L7Rh9C60LA\"));\\r\\nprint empty_string = base64_encode_fromarray(empty_bytes_array)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|empty_string|\\r\\n|---|\\r\\n||\\r\\n\\r\\n## See also\\r\\n\\r\\n* For decoding base64 strings to a UTF-8 string, see [base64_decode_tostring()](base64_decode_tostringfunction.md)\\r\\n* For encoding strings to a base64 string see [base64_encode_tostring()](base64_encode_tostringfunction.md)\\r\\n* This function is the inverse of [base64_decode_toarray()](base64_decode_toarrayfunction.md)',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/base64_encode_fromarrayfunction\",\"base64_encode_fromarrayfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"base64_encode_fromguid\",\"Encodes a [GUID](./scalar-data-types/guid.md) to a base64 string.\",\"## Syntax\\r\\n\\r\\n`base64_encode_fromguid(`*guid*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *guid* | guid | &check; | The value to encode to a base64 string. |\\r\\n\\r\\n## Returns\\r\\n\\r\\nReturns a base64 string encoded from a GUID.\",'> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAx3FQQqAIBAF0KuIq1oIOcqAiw7RCWLMX7hIw/T+QW/znpZLV9vIBWpVUV6w31GOmrCfrd7XyGnq9U8LnHXuJMMgMj4ITFxYjGWwhEiWEPU8fxrJzt9UAAAA\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint Quine = base64_encode_fromguid(toguid(\"ae3133f2-6e22-49ae-b06a-16e6a9b212eb\"))  \\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|Quine|\\r\\n|-----|\\r\\n|8jMxriJurkmwahbmqbIS6w==|\\r\\n\\r\\nIf you try to encode anything that isn\\'t a [GUID](./scalar-data-types/guid.md) as below, an error will be thrown:\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAysoyswrUXDNLSipVLBVSEosTjUziU/NS85PSY1PK8rPTS/NTNFQSkxKTjE0MjZU0gQApqVKnzAAAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint Empty = base64_encode_fromguid(\"abcd1231\")\\r\\n```\\r\\n\\r\\n## See also\\r\\n\\r\\n* To decode a base64 string to a [GUID](./scalar-data-types/guid.md), see [base64_decode_toguid()](base64-decode-toguid-function.md).\\r\\n* To create a [GUID](./scalar-data-types/guid.md) from a string, see [toguid()](toguidfunction.md).',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/base64-encode-fromguid-function\",\"base64-encode-fromguid-function.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"base64_encode_tostring\",\"Encodes a string as base64 string.\",\"> **Deprecated aliases:** base64_encodestring()\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`base64_encode_tostring(`*string*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *string* | string | &check; |  The value to encode as a base64 string. |\\r\\n\\r\\n## Returns\\r\\n\\r\\nReturns *string* encoded as a base64 string.\",'> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAysoyswrUQgszcxLtU1KLE41M4lPzUvOT0mNL8kvLgFKpmsoeZcWl+QraQIAKEgGNSsAAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint Quine=base64_encode_tostring(\"Kusto\")\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|Quine   |\\r\\n|--------|\\r\\n|S3VzdG8=|\\r\\n\\r\\n## See also\\r\\n\\r\\n* To decode base64 strings to UTF-8 strings, see [base64_decode_tostring()](base64_decode_tostringfunction.md).\\r\\n* To decode base64 strings to an array of long values, see [base64_decode_toarray()](base64_decode_toarrayfunction.md).',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/base64_encode_tostringfunction\",\"base64_encode_tostringfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"basket\",\"The `basket` plugin finds frequent patterns of attributes in the data and returns the patterns that pass a frequency threshold in that data. A pattern represents a subset of the rows that have the same value across one or more columns. The `basket` plugin is based on the [Apriori algorithm](https://en.wikipedia.org/wiki/Association_rule_learning#Apriori_algorithm) originally developed for basket analysis data mining.\",\"## Syntax\\r\\n\\r\\n*T* | `evaluate` `basket` `(`[ *Threshold*`,` *WeightColumn*`,` *MaxDimensions*`,` *CustomWildcard*`,` *CustomWildcard*`,` ... ]`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n|Name|Type|Required|Description|\\r\\n|--|--|--|--|\\r\\n|*Threshold*|long|| A `double` in the range of 0.015 to 1 that sets the minimal ratio of the rows to be considered frequent. Patterns with a smaller ratio won't be returned. The default value is 0.05. To use the default value, input the tilde: `~`.<br/><br/>Example: `T | evaluate basket(0.02)`|\\r\\n|*WeightColumn*|string||The column name to use to consider each row in the input according to the specified weight. Must be a name of a numeric type column, such as `int`, `long`, `real`. By default, each row has a weight of 1. To use the default value, input the tilde: `~`. A common use of a weight column is to take into account sampling or bucketing/aggregation of the data that is already embedded into each row.<br/><br/>Example: `T | evaluate basket('~', sample_Count)`|\\r\\n|*MaxDimensions*|int|| Sets the maximal number of uncorrelated dimensions per basket, limited by default, to minimize the query runtime. The default is 5. To use the default value, input the tilde: `~`.<br/><br/>Example: `T | evaluate basket('~', '~', 3)`|\\r\\n|*CustomWildcard*|string||Sets the wildcard value for a specific type in the result table that will indicate that the current pattern doesn't have a restriction on this column. The default is `null` except for string columns whose default value is an empty string. If the default is a good value in the data, a different wildcard value should be used, such as `*`. To use the default value, input the tilde: `~`.<br/><br/>Example: `T | evaluate basket('~', '~', '~', '*', int(-1), double(-1), long(0), datetime(1900-1-1))`|\\r\\n\\r\\n> [!NOTE]\\r\\n> To specify an optional parameter that follows an optional parameter, make sure to provide a value for the preceding optional parameter. For more information, see [Working with optional parameters](syntax-conventions.md#working-with-optional-parameters).\\r\\n\\r\\n## Returns\\r\\n\\r\\nThe `basket` plugin returns frequent patterns that pass a ratio threshold. The default threshold is 0.05.\\r\\n\\r\\nEach pattern is represented by a row in the results. The first column is the segment ID. The next two columns are the *count* and *percentage of rows*, from the original query that match the pattern. The remaining columns relate to the original query, with either a specific value from the column or a wildcard value, which is by default null, meaning a variable value.\\r\\n\\r\\n> [!NOTE]\\r\\n> The algorithm uses sampling to determine the initial frequent values. Therefore, the results could slightly differ between multiple runs for patterns whose frequency is close to the threshold.\",'> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAzVOuw6CQBDs/YoJFURiiInl2SitmkBjeeqeoN4dWVaUxI/3AK1mJzuvQjzbvCMn7eyDV0VMsN5J5U1PmuNCNEtZW0qgFFZBQ28hd8FWW30lKNTGxBPZsG9azH+vQ2DE0mONDCmiY15EA+72URJiGvY3OgtCgVCKcULZN+Gc7H8cQ4faTj+eQYqTbu8kcbZYJl8ixlvuvQAAAA==\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nStormEvents\\r\\n| where monthofyear(StartTime) == 5\\r\\n| extend Damage = iff(DamageCrops + DamageProperty > 0 , \"YES\" , \"NO\")\\r\\n| project State, EventType, Damage, DamageCrops\\r\\n| evaluate basket(0.2)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|SegmentId|Count|Percent|State|EventType|Damage|DamageCrops|\\r\\n|---|---|---|---|---|---|---|---|---|\\r\\n|0|4574|77.7|||NO|0\\r\\n|1|2278|38.7||Hail|NO|0\\r\\n|2|5675|96.4||||0\\r\\n|3|2371|40.3||Hail||0\\r\\n|4|1279|21.7||Thunderstorm Wind||0\\r\\n|5|2468|41.9||Hail||\\r\\n|6|1310|22.3|||YES|\\r\\n|7|1291|21.9||Thunderstorm Wind||\\r\\n\\r\\n### Example with custom wildcards\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAzVOMQ6CQBDsfcWEhjtFgyaW2CitmkBjeeoiqMeRY0VJjG/3AG1mdrKzM5uwsTpuqOR69MYzJ0vQpuTcZC0pKxJWltNCk0QUYek89GIqz9gorS6ECEWWiUGsralqTH6rvVNkucUKIQJ4hzjxOt7uPOliKmuudGK4AqYA/QtpW7lxOP9zH9rVNur+cFYcVX0jFuFsEcD/+H8YOyhKFtO5lF/0AFrQ1QAAAA==\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nStormEvents\\r\\n| where monthofyear(StartTime) == 5\\r\\n| extend Damage = iff(DamageCrops + DamageProperty > 0 , \"YES\" , \"NO\")\\r\\n| project State, EventType, Damage, DamageCrops\\r\\n| evaluate basket(0.2, \\'~\\', \\'~\\', \\'*\\', int(-1))\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|SegmentId|Count|Percent|State|EventType|Damage|DamageCrops|\\r\\n|---|---|---|---|---|---|---|---|---|\\r\\n|0|4574|77.7|\\\\*|\\\\*|NO|0\\r\\n|1|2278|38.7|\\\\*|Hail|NO|0\\r\\n|2|5675|96.4|\\\\*|\\\\*|\\\\*|0\\r\\n|3|2371|40.3|\\\\*|Hail|\\\\*|0\\r\\n|4|1279|21.7|\\\\*|Thunderstorm Wind|\\\\*|0\\r\\n|5|2468|41.9|\\\\*|Hail|\\\\*|-1\\r\\n|6|1310|22.3|\\\\*|\\\\*|YES|-1\\r\\n|7|1291|21.9|\\\\*|Thunderstorm Wind|\\\\*|-1\\r\\n\\r\\n---\\r\\n\\r\\n> [!IMPORTANT]\\r\\n> The content below is Microsoft confidential(not available in the [public site](https://docs.microsoft.com/en-us/azure/data-explorer/))\\r\\n\\r\\n# Basket plugin - Internal\\r\\n\\r\\nIf you have questions about basket or other ML related workflows in Kusto you can post them on the following DL: [KustoML](mailto:kustoML@microsoft.com).',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/basketplugin\",\"basketplugin.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"beta_cdf\",\"Returns the standard cumulative beta distribution function.\",\"If *probability* = `beta_cdf(`*x*,...`)`, then `beta_inv(`*probability*,...`)` = *x*.\\r\\n\\r\\nThe beta distribution is commonly used to study variation in the percentage of something across samples, such as the fraction of the day people spend watching television.\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`beta_cdf(`*x*`,` *alpha*`,` *beta*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n|Name|Type|Required|Description|\\r\\n|--|--|--|--|\\r\\n| *x* | int, long, or real | &check;| A value at which to evaluate the function.|\\r\\n| *alpha* | int, long, or real | &check;| A parameter of the distribution.|\\r\\n| *beta* | int, long, or real | &check;| A parameter of the distribution.|\\r\\n\\r\\n## Returns\\r\\n\\r\\nThe [cumulative beta distribution function](https://en.wikipedia.org/wiki/Beta_distribution#Cumulative_distribution_function).\\r\\n\\r\\n> [!NOTE]\\r\\n>\\r\\n> * If any argument is nonnumeric, the function returns `null`.\\r\\n> * If `x < 0` or `x > 1`, the function returns `NaN`.\\r\\n> * If `alpha \\u2264 0` or `alpha > 10000`, the function returns `NaN`.\\r\\n> * If `beta \\u2264 0` or `beta > 10000`, the function returns `NaN`.\",'> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA22PwQrCMBBE7/mKoacWYkgFDxb1E3r0IiJpEzWQpsWmEMGPN6algnUXlh2Yt8tI4UJXRqW+kO0QFgphuruYVaXcV9Rt0yjrit49tL1l5EQQirMtRc4Zp1jHmRyF0RLadoNLaPTkbPPj8Tggp3hqZWSPUpSTc/yVrnKeLYgd+B+Cs3BnxtiHm4gYBbpfgORMXlDeKStRYR9TXmp5Tf2UfwyevQFA2/Y/IAEAAA==\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\ndatatable(x:double, alpha:double, beta:double, comment:string)\\r\\n[\\r\\n    0.9, 10.0, 20.0, \"Valid input\",\\r\\n    1.5, 10.0, 20.0, \"x > 1, yields NaN\",\\r\\n    double(-10), 10.0, 20.0, \"x < 0, yields NaN\",\\r\\n    0.1, double(-1.0), 20.0, \"alpha is < 0, yields NaN\"\\r\\n]\\r\\n| extend b = beta_cdf(x, alpha, beta)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|x|alpha|beta|comment|b|\\r\\n|---|---|---|---|---|\\r\\n|0.9|10|20|Valid input|0.999999999999959|\\r\\n|1.5|10|20|x > 1, yields NaN|NaN|\\r\\n|-10|10|20|x < 0, yields NaN|NaN|\\r\\n|0.1|-1|20|alpha is < 0, yields NaN|NaN|\\r\\n\\r\\n## See also\\r\\n\\r\\n* For computing the inverse of the beta cumulative probability density function, see [beta-inv()](./beta-invfunction.md).\\r\\n* For computing probability density function, see [beta-pdf()](./beta-pdffunction.md).',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/beta-cdffunction\",\"beta-cdffunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"beta_inv\",\"Returns the inverse of the beta cumulative probability density function.\",\"If *probability* = `beta_cdf(`*x*,...`)`, then `beta_inv(`*probability*,...`)` = *x*.\\r\\n\\r\\nThe beta distribution can be used in project planning to model probable completion times given an expected completion time and variability.\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`beta_inv(`*probability*`,`*alpha*`,`*beta*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n|Name|Type|Required|Description|\\r\\n|--|--|--|--|\\r\\n| *probability* | int, long, or real | &check;| A probability associated with the beta distribution.|\\r\\n| *alpha* | int, long, or real | &check;| A parameter of the distribution.|\\r\\n| *beta* | int, long, or real | &check;| A parameter of the distribution.|\\r\\n\\r\\n## Returns\\r\\n\\r\\nThe inverse of the beta cumulative probability density function [beta_cdf()](./beta-cdffunction.md)\\r\\n\\r\\n> [!NOTE]\\r\\n>\\r\\n> * If any argument is nonnumeric, the function returns `null`.\\r\\n> * If `alpha \\u2264 0` or `beta \\u2264 0`, the function returns `null`.\\r\\n> * If `probability \\u2264 0` or `probability > 1`, the function returns `NaN`.\\r\\n> * Given a value for *probability*, `beta_inv()` seeks that value x such that `beta_cdf(x, alpha, beta)` `=` *probability*.\",'> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA11PQQrCMBC85xVDTw3EkAheivYJPXoRkdQEDaRpsIko+HhDWiq4C8sOzOzOaBVz987UodFjyguDcuGuVtSb+APXcRiMj80UH9bfKDkR5BJcMkjBBcO2zOqonNWwPqRYscKRfPfHCWiRdW9rnJ7gk3MLtZybP9YbyQVdJcUZ7IQ9xKrsVFeRM/nAvKLxGj0OxfTF+mcdljhzDvoFBansKu8AAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\ndatatable(p:double, alpha:double, beta:double, comment:string)\\r\\n[\\r\\n    0.1, 10.0, 20.0, \"Valid input\",\\r\\n    1.5, 10.0, 20.0, \"p > 1, yields null\",\\r\\n    0.1, double(-1.0), 20.0, \"alpha is < 0, yields NaN\"\\r\\n]\\r\\n| extend b = beta_inv(p, alpha, beta)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|p|alpha|beta|comment|b|\\r\\n|---|---|---|---|---|\\r\\n|0.1|10|20|Valid input|0.226415022388749|\\r\\n|1.5|10|20|p > 1, yields null||\\r\\n|0.1|-1|20|alpha is < 0, yields NaN|NaN|\\r\\n\\r\\n## See also\\r\\n\\r\\n* For computing cumulative beta distribution function, see [beta-cdf()](./beta-cdffunction.md).\\r\\n* For computing probability beta density function, see [beta-pdf()](./beta-pdffunction.md).',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/beta-invfunction\",\"beta-invfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.OperatorToken,\"between\",\"Filters a record set for data matching the values in an inclusive range.\",\"`between` can operate on any numeric, datetime, or timespan expression.\\r\\n\\r\\n## Syntax\\r\\n\\r\\n*T* `|` `where` *expr* `between` `(`*leftRange*` .. `*rightRange*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *T* | string | &check; |  The tabular input whose records are to be matched. For example, the table name. |\\r\\n| *expr* | scalar | &check; |  The expression used to filter. |\\r\\n| *leftRange* | int, long, real, or datetime | &check; | The expression of the left range. The range is inclusive.|\\r\\n| *rightRange* | int, long, real, datetime, or timespan | &check; | The expression of the right range. The range is inclusive.<br/><br/>This value can only be of type [timespan](scalar-data-types/timespan.md) if *expr* and *leftRange* are both of type `datetime`. See [example](#filter-datetime-using-a-timespan-range).|\\r\\n\\r\\n## Returns\\r\\n\\r\\nRows in *T* for which the predicate of (*expr* >= *leftRange* and *expr* <= *rightRange*) evaluates to `true`.\",'### Filter numeric values\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAytKzEtPVahQSCvKz1UwVCjJVzA0MFAoLkktUDDk5apRKM9ILQLJJ6WWlKem5ilomBoo6OkpmJpqAgBfXYZBOgAAAA==\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nrange x from 1 to 100 step 1\\r\\n| where x between (50 .. 55)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|x|\\r\\n|---|\\r\\n|50|\\r\\n|51|\\r\\n|52|\\r\\n|53|\\r\\n|54|\\r\\n|55|\\r\\n\\r\\n### Filter datetime\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAwsuyS/KdS1LzSsp5uWqUSjPSC1KVQguSSwqCcnMTVVISi0pT03NU9BISSxJLQGKaBgZGJjrApGRuaaCnp4ChrixgaYmyKTk/NK8EgBluyagXgAAAA==\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nStormEvents\\r\\n| where StartTime between (datetime(2007-07-27) .. datetime(2007-07-30))\\r\\n| count\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|Count|\\r\\n|---|\\r\\n|476|\\r\\n\\r\\n### Filter datetime using a timespan range\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAwsuyS/KdS1LzSsp5uWqUSjPSC1KVQguSSwqCcnMTVVISi0pT03NU9BISSxJLQGKaBgZGJjrApGRuaaCnp6CcYomSF9yfmleCQCGAqjRTAAAAA==\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nStormEvents\\r\\n| where StartTime between (datetime(2007-07-27) .. 3d)\\r\\n| count\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|Count|\\r\\n|---|\\r\\n|476|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/betweenoperator\",\"betweenoperator.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"bin\",\"Rounds values down to an integer multiple of a given bin size.\",'Used frequently in combination with [`summarize by ...`](./summarizeoperator.md).\\r\\nIf you have a scattered set of values, they\\'ll be grouped into a smaller set of specific values.\\r\\n\\r\\n> The `bin()` and `floor()` functions are equivalent\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`bin(`*value*`,`*roundTo*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *value* |  int, long, real, [timespan](scalar-data-types/timespan.md), or datetime | &check; | The value to round down. |\\r\\n| *roundTo* |  int, long, real, or [timespan](scalar-data-types/timespan.md) | &check; | The \"bin size\" that divides *value*. |\\r\\n\\r\\n## Returns\\r\\n\\r\\nThe nearest multiple of *roundTo* below *value*. Null values, a null bin size, or a negative bin size will result in null.','### Numeric bin\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAysoyswrUUjKzNMw0TPVUTDUBACk1J4hEQAAAA==\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint bin(4.5, 1)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|print_0|\\r\\n|--|\\r\\n|4|\\r\\n\\r\\n### Timespan bin\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAysoyswrUUjKzNMoycxN1TA0S9HUUTBP0QQAELu46BgAAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint bin(time(16d), 7d)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|print_0|\\r\\n|--|\\r\\n|14:00:00:00|\\r\\n\\r\\n### Datetime bin\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAysoyswrUUjKzNNISSxJLcnMTdUwtDQ30DUw1TU0VDA0tjIxtTIw19RRMEzRBADBlT+OLAAAAA==\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint bin(datetime(1970-05-11 13:45:07), 1d)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|print_0|\\r\\n|--|\\r\\n|1970-05-11T00:00:00Z|\\r\\n\\r\\n### Pad a table with null bins\\r\\n\\r\\nWhen there are rows for bins with no corresponding row in the table, we recommend to pad the table with those bins. The following query looks at strong wind storm events in California for a week in April. However, there are no events on some of the days.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA02OQQuCQBCF7/6KwYtKKRaBB9mDlIEQFRl0XtnBBHeVdUqMfnxbS9Ft4Pvee9MiQUlcEzAQnJAaib63jOMkjFdhnHhB6rTGyZUwhjVnkIjUKanTMr+josF5wnhFjZafTQVUSCOiAt9GoujdEPyLhMAYuOtsV2wPp32RucDNyKfxPPWWlqQ7VcOlUcI14eEmJdfNA+Goux41TRsueY3MAN+eXxBANUHVKP/30xwWIngBzQQjwPAAAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nlet Start = datetime(\\'2007-04-07\\');\\r\\nlet End = Start + 7d;\\r\\nStormEvents\\r\\n| where StartTime between (Start .. End)\\r\\n| where State == \"CALIFORNIA\" and EventType == \"Strong Wind\"\\r\\n| summarize PropertyDamage=sum(DamageProperty) by bin(StartTime, 1d)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|StartTime|PropertyDamage|\\r\\n|--|--|\\r\\n|2007-04-08T00:00:00Z|3000|\\r\\n|2007-04-11T00:00:00Z|1000|\\r\\n|2007-04-12T00:00:00Z|105000|\\r\\n\\r\\nIn order to represent the full week, the following query pads the result table with null values for the missing days. Here\\'s a step-by-step explanation of the process:\\r\\n\\r\\n1. Use the `union` operator to add more rows to the table.\\r\\n1. The `range` operator produces a table that has a single row and column.\\r\\n1. The `mv-expand` operator over the `range` function creates as many rows as there are bins between `StartTime` and `EndTime`.\\r\\n1. Use a `PropertyDamage` of `0`.\\r\\n1. The `summarize` operator groups together bins from the original table to the table produced by the `union` expression. This process ensures that the output has one row per bin whose value is either zero or the original count.\\r\\n\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA12QQWuDQBCF7/6Kh5cojUFLIYfgIbQpBEpbaqDnFSdWyO7KOkm05Md3dJtQuodl4b33zZs9EKNg5Rg5KsXEjaZodp+myyR9SNLlLF4FB/FsTCUO77zDsloFBVunNycy3AUXnL/Ikdd3gkBJfCYyiHxksRgJ8V8jE/Ic4eP6Zfv89vG6XYdQMmQi7obWqwU7a2p8NqYKJXw0jRVmADlOmZrQY++sRga2cnVMLbJJvkCfEurbkXmrlU8h32k+Npojq+IxyzLR7qPrF8S/DOqZBPDubEuOhyelVU15OqnjNt1Ra+Wab/pvESHyz6sQoxxQNia6tZmG/wDAjjX+gQEAAA==\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nlet Start = datetime(\\'2007-04-07\\');\\r\\nlet End = Start + 7d;\\r\\nStormEvents\\r\\n| where StartTime between (Start .. End)\\r\\n| where State == \"CALIFORNIA\" and EventType == \"Strong Wind\"\\r\\n| union (\\r\\n    range x from 1 to 1 step 1\\r\\n    | mv-expand StartTime=range(Start, End, 1d) to typeof(datetime)\\r\\n    | extend PropertyDamage=0\\r\\n    )\\r\\n| summarize PropertyDamage=sum(DamageProperty) by bin(StartTime, 1d)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|StartTime|PropertyDamage|\\r\\n|--|--|\\r\\n|2007-04-07T00:00:00Z|0|\\r\\n|2007-04-08T00:00:00Z|3000|\\r\\n|2007-04-09T00:00:00Z|0|\\r\\n|2007-04-10T00:00:00Z|0|\\r\\n|2007-04-11T00:00:00Z|1000|\\r\\n|2007-04-12T00:00:00Z|105000|\\r\\n|2007-04-13T00:00:00Z|0|\\r\\n|2007-04-14T00:00:00Z|0|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/binfunction\",\"binfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"bin_at\",\"Rounds values down to a fixed-size bin, with control over the bin's starting point.\",\"## Syntax\\r\\n\\r\\n`bin_at` `(`*value*`,`*bin_size*`,`*fixed_point*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *value* | int, long, real, timespan, or datetime | &check; | The value to round. |\\r\\n| *bin_size* | int, long, real, or timespan | &check; | The size of each bin. |\\r\\n| *fixed_point* | int, long, real, timespan, or datetime | &check; | A constant of the same type as *value* indicating one value of *value*, which is a *fixed point* for which `bin_at(fixed_point, bin_size, fixed_point) == fixed_point`.|\\r\\n\\r\\n> [!NOTE]\\r\\n> If *value* is a timespan or datetime, then the *bin_size* must be a timespan.\\r\\n\\r\\n## Returns\\r\\n\\r\\nThe nearest multiple of *bin_size* below *value*, shifted so that *fixed_point*\\r\\nwill be translated into itself.\",'|Expression                                                                    |Result                           |Comments                   |\\r\\n|------------------------------------------------------------------------------|---------------------------------|---------------------------|\\r\\n|`bin_at(6.5, 2.5, 7)`                                                         |`4.5`                            ||\\r\\n|`bin_at(time(1h), 1d, 12h)`                                                   |`-12h`                           ||\\r\\n|`bin_at(datetime(2017-05-15 10:20:00.0), 1d, datetime(1970-01-01 12:00:00.0))`|`datetime(2017-05-14 12:00:00.0)`|All bins will be at noon   |\\r\\n|`bin_at(datetime(2017-05-17 10:20:00.0), 7d, datetime(2017-06-04 00:00:00.0))`|`datetime(2017-05-14 00:00:00.0)`|All bins will be on Sundays|\\r\\n\\r\\nIn the following example, notice that the `\"fixed point\"` arg is returned as one of the bins and the other bins are aligned to it based on the `bin_size`. Also note that each datetime bin represents the starting time of that bin:\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA0tJLAHCpJxUDZfEklSrFCBRkpmbqqPgV5prlZlXohnNywUT1DAyMLTQNTDSNTIJMTS1MjTR1DHWwSZtHGJoBpY2wSptBtNtGsvLVaNQXJqbm1iUWZUKYmkA7dVUSKpUSMrMi08sAbtKR8EwRUcBiysUwOZYGRjoGUCApiYAxLxe/tAAAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\ndatatable(Date:datetime, Num:int)[\\r\\ndatetime(2018-02-24T15:14),3,\\r\\ndatetime(2018-02-23T16:14),4,\\r\\ndatetime(2018-02-26T15:14),5]\\r\\n| summarize sum(Num) by bin_at(Date, 1d, datetime(2018-02-24 15:14:00.0000000)) \\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|Date|sum_Num|\\r\\n|---|---|\\r\\n|2018-02-23 15:14:00.0000000|4|\\r\\n|2018-02-24 15:14:00.0000000|3|\\r\\n|2018-02-26 15:14:00.0000000|5|\\r\\n\\r\\n## See also\\r\\n\\r\\n* [`bin()`](./binfunction.md)',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/binatfunction\",\"binatfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"bin_auto\",\"Rounds values down to a fixed-size bin, with control over the bin size and starting point provided by a query property.\",'## Syntax\\r\\n\\r\\n`bin_auto` `(`*value*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *value* | int, long, real, timespan, or datetime | &check; |  The value to round into bins. |\\r\\n\\r\\nTo control the bin size and starting point, set the following parameters before using the function.\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *query_bin_auto_size* | int, long, real, or timespan | &check; |  Indicates the size of each bin.|\\r\\n| *query_bin_auto_at* | int, long, real, or timespan | |  Indicates one value of *value* which is a \"fixed point\" for which `bin_auto(fixed_point)` == `fixed_point`. Default is 0.|\\r\\n\\r\\n## Returns\\r\\n\\r\\nThe nearest multiple of `query_bin_auto_size` below *value*, shifted so that `query_bin_auto_at`\\r\\nwill be translated into itself.',\"```\\r\\nset query_bin_auto_size=1h;\\r\\nset query_bin_auto_at=datetime(2017-01-01 00:05);\\r\\nrange Timestamp from datetime(2017-01-01 00:05) to datetime(2017-01-01 02:00) step 1m\\r\\n| summarize count() by bin_auto(Timestamp)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|Timestamp                    | count_|\\r\\n|-----------------------------|-------|\\r\\n|2017-01-01 00:05:00.0000000  | 60    |\\r\\n|2017-01-01 01:05:00.0000000  | 56    |\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/bin-autofunction\",\"bin-autofunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"binary_all_and\",\"Accumulates values using the binary `AND` operation for each summarization group, or in total if a group is not specified.\",\"[!INCLUDE [data-explorer-agg-function-summarize-note](../../includes/data-explorer-agg-function-summarize-note.md)]\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`binary_all_and` `(`*expr*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *expr* | long | &check; | The value used for the binary `AND`  calculation. |\\r\\n\\r\\n## Returns\\r\\n\\r\\nReturns an aggregated value using the binary `AND` operation over records for each summarization group, or in total if a group is not specified.\",'The following example produces `CAFEF00D` using binary `AND` operations:\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA0tJLAHCpJxUjbzSXKuc/Lx0Ta5oLgUFgwo3KNBRQHANDNx0wDxniJwLhOfm6OYKVsoVy1WjUFyam5tYlFmVqlCUWlyaU6Jgq1CSX1pQkFqkUZKfkVqhkZSZl1hUGZ+YkxOfmJcCslhTUxMAwZHTS4kAAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\ndatatable(num:long)\\r\\n[\\r\\n  0xFFFFFFFF, \\r\\n  0xFFFFF00F,\\r\\n  0xCFFFFFFD,\\r\\n  0xFAFEFFFF,\\r\\n]\\r\\n| summarize result = toupper(tohex(binary_all_and(num)))\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|result|\\r\\n|---|\\r\\n|CAFEF00D|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/binary-all-and-aggfunction\",\"binary-all-and-aggfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"binary_all_or\",\"Accumulates values using the binary `OR` operation for each summarization group, or in total if a group is not specified.\",\"[!INCLUDE [data-explorer-agg-function-summarize-note](../../includes/data-explorer-agg-function-summarize-note.md)]\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`binary_all_or` `(`*expr*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *expr* | long | &check; | The value used for the binary `OR`  calculation. |\\r\\n\\r\\n## Returns\\r\\n\\r\\nReturns an aggregated value using the binary `OR` operation over records for each summarization group, or in total if a group is not specified.\",'The following example produces `CAFEF00D` using binary `OR` operations:\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA0tJLAHCpJxUjbzSXKuc/Lx0Ta5oLgUFgwoLEDAwsNAB80yMDMAAwjMwMDczR+KBgamOAlcsV41CcWlubmJRZlWqQlFqcWlOiYKtQkl+aUFBapFGSX5GaoVGUmZeYlFlfGJOTnx+EcheTU1NAEGLHNSIAAAA\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\ndatatable(num:long)\\r\\n[\\r\\n  0x88888008,\\r\\n  0x42000000,\\r\\n  0x00767000,\\r\\n  0x00000005, \\r\\n]\\r\\n| summarize result = toupper(tohex(binary_all_or(num)))\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|result|\\r\\n|---|\\r\\n|CAFEF00D|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/binary-all-or-aggfunction\",\"binary-all-or-aggfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"binary_all_xor\",\"Accumulates values using the binary `XOR` operation for each summarization group, or in total if a group is not specified.\",\"[!INCLUDE [data-explorer-agg-function-summarize-note](../../includes/data-explorer-agg-function-summarize-note.md)]\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`binary_all_xor` `(`*expr*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *expr* | long | &check; | The value used for the binary `XOR`  calculation. |\\r\\n\\r\\n## Returns\\r\\n\\r\\nReturns a value that is aggregated using the binary `XOR` operation over records for each summarization group, or in total if a group is not specified.\",'The following example produces `CAFEF00D` using binary `XOR` operations:\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA0tJLAHCpJxUjbzSXKuc/Lx0Ta5oLgUFgwoTExMDENYB8wxdIRDCszRwdHJyNLCE8AwMDJwMDUwddbhiuWoUiktzcxOLMqtSFYpSi0tzShRsFUrySwsKUos0SvIzUis0kjLzEosq4xNzcuIr8otA9mpqagIAuXol8IgAAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\ndatatable(num:long)\\r\\n[\\r\\n  0x44404440,\\r\\n  0x1E1E1E1E,\\r\\n  0x90ABBA09,\\r\\n  0x000B105A,\\r\\n]\\r\\n| summarize result = toupper(tohex(binary_all_xor(num)))\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|results|\\r\\n|--|\\r\\n|CAFEF00D|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/binary-all-xor-aggfunction\",\"binary-all-xor-aggfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"binary_and\",\"Returns a result of the bitwise `AND` operation between two values.\",\"## Syntax\\r\\n\\r\\n`binary_and(`*value1*`,`*value2*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *value1* | long | &check; | The left-hand value of the bitwise `AND` operation. |\\r\\n| *value2* | long | &check; | The right-hand value of the bitwise `AND` operation. |\\r\\n\\r\\n## Returns\\r\\n\\r\\nReturns logical `AND` operation on a pair of numbers: value1 & value2.\",\"\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/binary-andfunction\",\"\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"binary_not\",\"Returns a bitwise negation of the input value.\",\"## Syntax\\r\\n\\r\\n`binary_not(`*value*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *value* | long | &check; | The value to negate. |\\r\\n\\r\\n## Returns\\r\\n\\r\\nReturns logical NOT operation on a number: value.\",'> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAysoyswrUUjKzEssqozPyy/RMDQw0AQAChXSgRUAAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nbinary_not(100)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|result|\\r\\n|------|\\r\\n|-101|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/binary-notfunction\",\"binary-notfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"binary_or\",\"Returns a result of the bitwise `or` operation of the two values.\",\"## Syntax\\r\\n\\r\\n`binary_or(`*value1*`,` *value2* `)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *value1* | long | &check; | The left-hand value of the bitwise `OR` operation. |\\r\\n| *value2* | long | &check; | The right-hand value of the bitwise `OR` operation. |\\r\\n\\r\\n## Returns\\r\\n\\r\\nReturns logical OR operation on a pair of numbers: value1 | value2.\",\"\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/binary-orfunction\",\"\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"binary_shift_left\",\"Returns binary shift left operation on a pair of numbers.\",\"## Syntax\\r\\n\\r\\n`binary_shift_left(`*value*`,`*shift*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *value* | int | &check; | The value to shift left. |\\r\\n| *shift* | int | &check; | The number of bits to shift left. |\\r\\n\\r\\n## Returns\\r\\n\\r\\nReturns binary shift left operation on a pair of numbers: value << (shift%64).\\r\\nIf n is negative, a NULL value is returned.\",'> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAysoyswr0UjKzEssqowvzshMK4nPSU0r0TDUMdLUBADck7ZgHQAAAA==\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nbinary_shift_left(1,2)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|Result|\\r\\n|------|\\r\\n|4 |',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/binary-shift-leftfunction\",\"binary-shift-leftfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"binary_shift_right\",\"Returns binary shift right operation on a pair of numbers.\",\"## Syntax\\r\\n\\r\\n`binary_shift_right(`*value*`,`*shift*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *value* | int | &check; | The value to shift right. |\\r\\n| *shift* | int | &check; | The number of bits to shift right. |\\r\\n\\r\\n## Returns\\r\\n\\r\\nReturns binary shift right operation on a pair of numbers: value >> (shift%64).\\r\\nIf n is negative, a NULL value is returned.\",'> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAysoyswr0UjKzEssqowvzshMK4kvykzPKNEw1DHS1AQAd48PPR4AAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nbinary_shift_right(1,2)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|Result|\\r\\n|------|\\r\\n|0 |',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/binary-shift-rightfunction\",\"binary-shift-rightfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"binary_xor\",\"Returns a result of the bitwise `xor` operation of the two values.\",\"## Syntax\\r\\n\\r\\n`binary_xor(`*value1*`,`*value2*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *value1* | int | &check; | The left-side value of the XOR operation. |\\r\\n| *value2* | int | &check; | The right-side value of the XOR operation. |\\r\\n\\r\\n## Returns\\r\\n\\r\\nReturns logical XOR operation on a pair of numbers: value1 ^ value2.\",'> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAysoyswr0UjKzEssqoyvyC/SMNQx1NQEAKWP8zEWAAAA\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nbinary_xor(1,1)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|Result|\\r\\n|------|\\r\\n|0 |\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAysoyswr0UjKzEssqoyvyC/SMNQx0tQEAPwxtTMWAAAA\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nbinary_xor(1,2)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|Result|\\r\\n|------|\\r\\n|3 |',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/binary-xorfunction\",\"binary-xorfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"bitset_count_ones\",\"Returns the number of set bits in the binary representation of a number.\",\"## Syntax\\r\\n\\r\\n`bitset_count_ones(`*value*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *value* | int | &check; | The value for which to calculate the number of set bits. |\\r\\n\\r\\n## Returns\\r\\n\\r\\nReturns the number of set bits in the binary representation of a number.\",'> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA9PXVzAxUrBVMDbSttA2UrBSSFI3MDAEQ3UFW6C4QlJmSbFCcWoJL1dBUWZeiUJ+XmoxUANIOLUkPjm/NK8kHiSmYWKkCQAj0l10TgAAAA==\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\n// 42 = 32+8+2 : b\\'00101010\\' == 3 bits set\\r\\nprint ones = bitset_count_ones(42) \\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|ones|\\r\\n|---|\\r\\n|3|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/bitset-count-onesfunction\",\"bitset-count-onesfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"buildschema\",\"Builds the minimal schema that admits all values of *DynamicExpr*.\",\"[!INCLUDE [data-explorer-agg-function-summarize-note](../../includes/data-explorer-agg-function-summarize-note.md)]\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`buildschema` `(`*DynamicExpr*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n|*DynamicExpr*| dynamic | &check; | Expression used for the aggregation calculation.\\r\\n\\r\\n## Returns\\r\\n\\r\\nReturns the minimal schema that admits all values of *DynamicExpr*.\\r\\n\\r\\n> [!TIP]\\r\\n> If `buildschema(json_column)` gives a syntax error:\\r\\n>\\r\\n> > *Is your `json_column` a string rather than a dynamic object?*\\r\\n>\\r\\n> then use `buildschema(parsejson(json_column))`.\",'The following example builds a schema based on:\\r\\n\\r\\n* `{\"x\":1, \"y\":3.5}`\\r\\n* `{\"x\":\"somevalue\", \"z\":[1, 2, 3]}`\\r\\n* `{\"y\":{\"w\":\"zzz\"}, \"t\":[\"aa\", \"bb\"], \"z\":[\"foo\"]}`\\r\\n\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA2WOQQrCMBBF9z3F8FctBEGLm1ylZDFpIgYSA7ZVm9q7O2p3nVkN/73POB5lbfT1g+PkNbn5xin0DXUVyWxnveAFfVSEGbo9nNdG7WMMOflfDQQs0J0IJ0Wt2eNSs+ApTikFq+Cj4GD+mtbCbAW45AzRK1O9aZhS4nsonuwUohv6q0/8/7v5AOnXbR3IAAAA\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\ndatatable(value: dynamic) [\\r\\n    dynamic({\"x\":1, \"y\":3.5}),\\r\\n    dynamic({\"x\":\"somevalue\", \"z\":[1, 2, 3]}),\\r\\n    dynamic({\"y\":{\"w\":\"zzz\"}, \"t\":[\"aa\", \"bb\"], \"z\":[\"foo\"]})\\r\\n]\\r\\n| summarize buildschema(value)\\r\\n```\\r\\n\\r\\n**Results**\\r\\n\\r\\n|schema_value|\\r\\n|--|\\r\\n|{\"x\":[\"long\",\"string\"],\"y\":[\"double\",{\"w\":\"string\"}],\"z\":{\"`indexer`\":[\"long\",\"string\"]},\"t\":{\"`indexer`\":\"string\"}}|\\r\\n\\r\\nThe resulting schema tells us that:\\r\\n\\r\\n* The root object is a container with four properties named x, y, z, and t.\\r\\n* The property called `x` is of type *long* or of type *string*.\\r\\n* The property called `y` ii of type *double*, or another container with a property called `w` of type *string*.\\r\\n* The `indexer` keyword indicates that `z` and `t` are arrays.\\r\\n* Each item in the array `z` is of type *long* or of type *string*.\\r\\n* `t` is an array of strings.\\r\\n* Every property is implicitly optional, and any array may be empty.\\r\\n\\r\\n\\r\\n### Schema model\\r\\n\\r\\nThe syntax of the returned schema is:\\r\\n\\r\\nContainer ::= \\'{\\' Named-type* \\'}\\';\\r\\nNamed-type: := (name | \\'\"`indexer`\"\\') \\':\\' Type;\\r\\nType ::= Primitive-type | Union-type | Container;\\r\\nUnion-type ::= \\'[\\' Type* \\']\\';\\r\\nPrimitive-type ::= \"long\" | \"string\" | ...;\\r\\n\\r\\nThe values are equivalent to a subset of TypeScript type annotations, encoded as a Kusto dynamic value.\\r\\nIn TypeScript, the example schema would be:\\r\\n\\r\\n```typescript\\r\\nvar someobject:\\r\\n{\\r\\n    x?: (number | string),\\r\\n    y?: (number | { w?: string}),\\r\\n    z?: { [n:number] : (long | string)},\\r\\n    t?: { [n:number]: string }\\r\\n}\\r\\n```',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/buildschema-aggfunction\",\"buildschema-aggfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"case\",\"Evaluates a list of predicates and returns the first result expression whose predicate is satisfied.\",\"If none of the predicates return `true`, the result of the `else` expression is returned.\\r\\nAll `predicate` arguments must be expressions that evaluate to a  `boolean` value.\\r\\nAll `then` arguments and the `else` argument must be of the same type.\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`case(`*predicate_1*, *then_1*,\\r\\n       [*predicate_2*, *then_2*, ...]\\r\\n       *else*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *predicate* | string | &check; | An expression that evaluates to a `boolean` value. |\\r\\n| *then* | string | &check; | An expression that gets evaluated and its value is returned from the function if *predicate* is the first predicate that evaluates to `true`. |\\r\\n| *else* | string | &check; | An expression that gets evaluated and its value is returned from the function if neither of the *predicate_i* evaluate to `true`. |\\r\\n\\r\\n## Returns\\r\\n\\r\\nThe value of the first *then_i* whose *predicate_i* evaluates to `true`, or the value of *else* if neither of the predicates are satisfied.\",'> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA33LQQpAQACF4b1yh9esKAtDdtyAlRMMHolBY5Tk8KTs5F9/v1FTR5T9QbRm1pCwM2SC1XJB5DonuFtODaqtHmiRoVYrvWdIM8QBRKnVOIoAroPvXizDWxds+k3/cZEr01H4FzbjCsCbAAAA\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nrange Size from 1 to 15 step 2\\r\\n| extend bucket = case(Size <= 3, \"Small\", \\r\\n                       Size <= 10, \"Medium\", \\r\\n                       \"Large\")\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|Size|bucket|\\r\\n|---|---|\\r\\n|1|Small|\\r\\n|3|Small|\\r\\n|5|Medium|\\r\\n|7|Medium|\\r\\n|9|Medium|\\r\\n|11|Large|\\r\\n|13|Large|\\r\\n|15|Large|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/casefunction\",\"casefunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"ceiling\",\"Calculates the smallest integer greater than, or equal to, the specified numeric expression.\",\"## Syntax\\r\\n\\r\\n`ceiling(`*number*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *number* | int, long, or real | &check; | The value to round up. |\\r\\n\\r\\n## Returns\\r\\n\\r\\nThe smallest integer greater than, or equal to, the specified numeric expression.\",'> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAysoyswrUUg2VLBVSE7NzMnMS9fQNdQz1NRRSDZCEjMACRgjC+hZagIAMiJDFDwAAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint c1 = ceiling(-1.1), c2 = ceiling(0), c3 = ceiling(0.9)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|c1|c2|c3|\\r\\n|---|---|---|\\r\\n|-1|0|1|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/ceilingfunction\",\"ceilingfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"cluster\",\"Changes the reference of the query to a remote cluster. To access a database within the same cluster, use the [database()](databasefunction.md) function. For more information, see [cross-database and cross-cluster queries](cross-cluster-or-database-queries.md).\",\"## Syntax\\r\\n\\r\\n`cluster(`*name*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *name* | string | &check; | The name of the cluster to reference. The value can be specified as a fully qualified domain name, or the name of the cluster without the `.kusto.windows.net` suffix. The value can't be the result of subquery evaluation. |\",\"### Use cluster() to access remote cluster\\r\\n\\r\\nThe following query can be run on any cluster.\\r\\n\\r\\n> [!div class=\\\"nextstepaction\\\"]\\r\\n> <a href=\\\"https://dataexplorer.azure.com/clusters/help/databases/SampleLogs?query=H4sIAAAAAAAAA0vOKS0uSS3SUM9IzSlQ19RLSSxJTEosTtVQD07MLchJLQaKBZfkF+W6lqXmlRQr1Cgk55fmlQAAayjLjjcAAAA=\\\" target=\\\"_blank\\\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\ncluster('help').database('Samples').StormEvents | count\\r\\n\\r\\ncluster('help.kusto.windows.net').database('Samples').StormEvents | count\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|Count|\\r\\n|---|\\r\\n|59066|\\r\\n\\r\\n### Use cluster() inside let statements\\r\\n\\r\\nThe previous query can be rewritten to use a query-defined function (`let` statement) that takes a parameter called `clusterName` and passes it to the `cluster()` function.\\r\\n\\r\\n> [!div class=\\\"nextstepaction\\\"]\\r\\n> <a href=\\\"https://dataexplorer.azure.com/clusters/help/databases/SampleLogs?query=H4sIAAAAAAAAA8tJLVFIy89XsFXQSM4pLS5JLfJLzE21Ki4pysxL1+Sq5lIAAqgMsgpNvZTEksSkxOJUDfXgxNyCnNRidU294JL8olzXstS8kmKFGoXk/NK8Eq5aay6gBRrqGak5BeqaADuaG9BwAAAA\\\" target=\\\"_blank\\\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nlet foo = (clusterName:string)\\r\\n{\\r\\n    cluster(clusterName).database('Samples').StormEvents | count\\r\\n};\\r\\nfoo('help')\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|Count|\\r\\n|---|\\r\\n|59066|\\r\\n\\r\\n### Use cluster() inside Functions\\r\\n\\r\\nThe same query as above can be rewritten to be used in a function that\\r\\nreceives a parameter `clusterName` - which is passed into the cluster() function.\\r\\n\\r\\n```\\r\\n.create function foo(clusterName:string)\\r\\n{\\r\\n    cluster(clusterName).database('Samples').StormEvents | count\\r\\n};\\r\\n```\\r\\n\\r\\n> [!NOTE]\\r\\n> Stored functions using the `cluster()` function can't be used in cross-cluster queries.\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/clusterfunction\",\"clusterfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"coalesce\",\"Evaluates a list of expressions and returns the first non-null (or non-empty for string) expression.\",\"## Syntax\\r\\n\\r\\n`coalesce(`*arg*`,`*arg_2*`,[`*arg_3*`,...])`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| arg | scalar | &check; | The expression to be evaluated.|\\r\\n\\r\\n> [!NOTE]\\r\\n>\\r\\n> * All arguments must be of the same type.\\r\\n> * Maximum of 64 arguments is supported.\\r\\n\\r\\n## Returns\\r\\n\\r\\nThe value of the first *arg* whose value isn't null (or not-empty for string expressions).\",'> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/SampleLogs?query=H4sIAAAAAAAAAysoyswrUShKLS7NKbFNzk/MSS1OTtUoyc/Jz0vXUMrLL1FIVMgrzU1KLVLS1FGAiZsYgXjGxpoA2oxMXz8AAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint result=coalesce(tolong(\"not a number\"), tolong(\"42\"), 33)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|result|\\r\\n|---|\\r\\n|42|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/coalescefunction\",\"coalescefunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.OperatorToken,\"consume\",\"Consumes the tabular data stream handed to the operator.\",\"The `consume` operator is mostly used for triggering the query side-effect without actually returning\\r\\nthe results back to the caller.\\r\\n\\r\\nThe `consume` operator can be used for estimating the\\r\\ncost of a query without actually delivering the results back to the client.\\r\\n(The estimation isn't exact for various reasons; for example, `consume`\\r\\nis calculated distributively, so `T | consume` won't transmit the table's\\r\\ndata between the nodes of the cluster.)\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`consume` [`decodeblocks` `=` *DecodeBlocks*]\\r\\n\\r\\n## Parameters\\r\\n\\r\\n|Name|Type|Required|Description|\\r\\n|--|--|--|--|\\r\\n| *DecodeBlocks* | bool | | If set to `true`, or if the request property `perftrace` is set to `true`, the `consume` operator won't just enumerate the records at its input, but actually force each value in those records to be decompressed and decoded.|\",\"\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/consumeoperator\",\"\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.OperatorToken,\"contains\",\"Filters a record set for data containing a case-insensitive string. `contains` searches for arbitrary sub-strings rather than [terms](datatypes-string-operators.md#what-is-a-term).\",\"[!INCLUDE [contains-operator-comparison](../../includes/contains-operator-comparison.md)]\\r\\n\\r\\n## Performance tips\\r\\n\\r\\n[!INCLUDE [performance-tip-note](../../includes/performance-tip-note.md)]\\r\\n\\r\\nWhen possible, use [contains_cs](contains-cs-operator.md) - a case-sensitive version of the operator.\\r\\n\\r\\nIf you're looking for a [term](datatypes-string-operators.md#what-is-a-term), use `has` for faster results.\\r\\n\\r\\n## Syntax\\r\\n\\r\\n*T* `|` `where` *col* `contains_cs` `(`*string*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *T* | string | &check; | The tabular input whose records are to be filtered. |\\r\\n| *col* | string | &check; | The name of the column to check for *string*. |\\r\\n| *string* | string | &check; | The case-sensitive string by which to filter the data. |\\r\\n\\r\\n## Returns\\r\\n\\r\\nRows in *T* for which *string* is in *col*.\",'> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAwsuyS/KdS1LzSsp5qpRKC7NzU0syqxKVUgFCcUn55fmldiCSQ1NhaRKheCSxJJUoMLyjNSiVAhPITk/ryQxM69YQSk1L08JLolkgoKdgqEBUKKgKD8rNbkEok8HWQVQsig1LyW1SKEkMSknFQCgPhGflgAAAA==\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nStormEvents\\r\\n| summarize event_count=count() by State\\r\\n| where State contains \"enn\"\\r\\n| where event_count > 10\\r\\n| project State, event_count\\r\\n| render table\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|State|event_count|\\r\\n|-----|-----------|\\r\\n|PENNSYLVANIA|1687|\\r\\n|TENNESSEE|1125|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/contains-operator\",\"contains-operator.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.OperatorToken,\"contains_cs\",\"Filters a record set for data containing a case-sensitive string. `contains_cs` searches for arbitrary sub-strings rather than [terms](datatypes-string-operators.md#what-is-a-term).\",\"[!INCLUDE [contains-operator-comparison](../../includes/contains-operator-comparison.md)]\\r\\n\\r\\n## Performance tips\\r\\n\\r\\n[!INCLUDE [performance-tip-note](../../includes/performance-tip-note.md)]\\r\\n\\r\\nIf you're looking for a [term](datatypes-string-operators.md#what-is-a-term), use `has_cs` for faster results.\\r\\n\\r\\n## Syntax\\r\\n\\r\\n*T* `|` `where` *col* `contains_cs` `(`*string*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *T* | string | &check; | The tabular input whose records are to be filtered. |\\r\\n| *col* | string | &check; | The name of the column to check for *string*. |\\r\\n| *string* | string | &check; | The case-sensitive string by which to filter the data. |\\r\\n\\r\\n## Returns\\r\\n\\r\\nRows in *T* for which *string* is in *col*.\",'> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAwsuyS/KdS1LzSsp5qpRKC7NzU0syqxKVUgFCcUn55fmldiCSQ1NhaRKheCSxJJUoMLyjNSiVAhPITk/ryQxM684PrlYQckxWAkAynmLoFMAAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nStormEvents\\r\\n| summarize event_count=count() by State\\r\\n| where State contains_cs \"AS\"\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|Count|\\r\\n|-----|\\r\\n|8|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/contains-cs-operator\",\"contains-cs-operator.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.OperatorToken,\"convert_angle\",\"Convert an angle value from one unit to another.\",\"## Syntax\\r\\n\\r\\n`convert_angle(`*value*`,`*from*`,`*to*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| `value` | real | &check; | The value to be converted. |\\r\\n| `from` | string | &check; | The unit to convert from. For possible values, see [Conversion units](#conversion-units). |\\r\\n| `to` | string | &check; | The unit to convert to. For possible values, see [Conversion units](#conversion-units). |\\r\\n\\r\\n### Conversion units\\r\\n\\r\\n* Arcminute\\r\\n* Arcsecond\\r\\n* Centiradian\\r\\n* Deciradian\\r\\n* Degree\\r\\n* Gradian\\r\\n* Microdegree\\r\\n* Microradian\\r\\n* Millidegree\\r\\n* Milliradian\\r\\n* Nanodegree\\r\\n* Nanoradian\\r\\n* NatoMil\\r\\n* Radian\\r\\n* Revolution\\r\\n* Tilt\\r\\n\\r\\n## Returns\\r\\n\\r\\nReturns the input value converted from one angle unit to another. Invalid units return `null`.\",'> [!div class=\"nextstepaction\"]\\r\\n> <a href=\" https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAysoyswrUShKLS7NKVGwVUjOzytLLSqJT8xLz0nVMNQz0lFQd0lNL0pNVQeyHIuSczPzSktS1TUBit/6iDgAAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint result = convert_angle(1.2, \\'Degree\\', \\'Arcminute\\')\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|result|\\r\\n|---|\\r\\n|72|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/convert-angle-function\",\"convert-angle-function.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.OperatorToken,\"convert_energy\",\"Convert an energy value from one unit to another.\",\"## Syntax\\r\\n\\r\\n`convert_energy(`*value*`,`*from*`,`*to*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *value* | real | &check; | The value to be converted. |\\r\\n| *from* | string | &check; | The unit to convert from. For possible values, see [Conversion units](#conversion-units). |\\r\\n| *to* | string | &check; | The unit to convert to. For possible values, see [Conversion units](#conversion-units). |\\r\\n\\r\\n### Conversion units\\r\\n\\r\\n* BritishThermalUnit\\r\\n* Calorie\\r\\n* DecathermEc\\r\\n* DecathermImperial\\r\\n* DecathermUs\\r\\n* ElectronVolt\\r\\n* Erg\\r\\n* FootPound\\r\\n* GigabritishThermalUnit\\r\\n* GigaelectronVolt\\r\\n* Gigajoule\\r\\n* GigawattDay\\r\\n* GigawattHour\\r\\n* HorsepowerHour\\r\\n* Joule\\r\\n* KilobritishThermalUnit\\r\\n* Kilocalorie\\r\\n* KiloelectronVolt\\r\\n* Kilojoule\\r\\n* KilowattDay\\r\\n* KilowattHour\\r\\n* MegabritishThermalUnit\\r\\n* Megacalorie\\r\\n* MegaelectronVolt\\r\\n* Megajoule\\r\\n* MegawattDay\\r\\n* MegawattHour\\r\\n* Millijoule\\r\\n* TeraelectronVolt\\r\\n* TerawattDay\\r\\n* TerawattHour\\r\\n* ThermEc\\r\\n* ThermImperial\\r\\n* ThermUs\\r\\n* WattDay\\r\\n* WattHour\\r\\n\\r\\n## Returns\\r\\n\\r\\nReturns the input value converted from one energy unit to another. Invalid units return `null`.\",'> [!div class=\"nextstepaction\"]\\r\\n> <a href=\" https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAysoyswrUShKLS7NKVGwVUjOzytLLSqJT81LLUqv1DDUM9JRUPfKL81JVQcynIoySzKLM0IyUotyE3NC8zJL1DUBDSFj0EEAAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint result = convert_energy(1.2, \\'Joule\\', \\'BritishThermalUnit\\')\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|result|\\r\\n|---|\\r\\n|0.00113738054437598|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/convert-energy-function\",\"convert-energy-function.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.OperatorToken,\"convert_force\",\"Convert a force value from one unit to another.\",\"## Syntax\\r\\n\\r\\n`convert_force(`*value*`,`*from*`,`*to*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *value* | real | &check; | The value to be converted. |\\r\\n| *from* | string | &check; | The unit to convert from. For possible values, see [Conversion units](#conversion-units). |\\r\\n| *to* | string | &check; | The unit to convert to. For possible values, see [Conversion units](#conversion-units). |\\r\\n\\r\\n### Conversion units\\r\\n\\r\\n* Decanewton\\r\\n* Dyn\\r\\n* KilogramForce\\r\\n* Kilonewton\\r\\n* KiloPond\\r\\n* KilopoundForce\\r\\n* Meganewton\\r\\n* Micronewton\\r\\n* Millinewton\\r\\n* Newton\\r\\n* OunceForce\\r\\n* Poundal\\r\\n* PoundForce\\r\\n* ShortTonForce\\r\\n* TonneForce\\r\\n\\r\\n## Returns\\r\\n\\r\\nReturns the input value converted from one force unit to another. Invalid units return `null`.\",'> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAysoyswrUShKLS7NKVGwVUjOzytLLSqJT8svSk7VMNQz0lFQ90stL8nPUweyXFKTE/MgPE0AhSGK6TkAAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint result = convert_force(1.2, \\'Newton\\', \\'Decanewton\\')\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|result|\\r\\n|---|\\r\\n|0.12|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/convert-force-function\",\"convert-force-function.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.OperatorToken,\"convert_length\",\"Convert a length value from one unit to another.\",\"## Syntax\\r\\n\\r\\n`convert_length(`*value*`,`*from*`,`*to*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *value* | real | &check; | The value to be converted. |\\r\\n| *from* | string | &check; | The unit to convert from. For possible values, see [Conversion units](#conversion-units). |\\r\\n| *to* | string | &check; | The unit to convert to. For possible values, see [Conversion units](#conversion-units). |\\r\\n\\r\\n### Conversion units\\r\\n\\r\\n* Angstrom\\r\\n* AstronomicalUnit\\r\\n* Centimeter\\r\\n* Chain\\r\\n* DataMile\\r\\n* Decameter\\r\\n* Decimeter\\r\\n* DtpPica\\r\\n* DtpPoint\\r\\n* Fathom\\r\\n* Foot\\r\\n* Hand\\r\\n* Hectometer\\r\\n* Inch\\r\\n* KilolightYear\\r\\n* Kilometer\\r\\n* Kiloparsec\\r\\n* LightYear\\r\\n* MegalightYear\\r\\n* Megaparsec\\r\\n* Meter\\r\\n* Microinch\\r\\n* Micrometer\\r\\n* Mil\\r\\n* Mile\\r\\n* Millimeter\\r\\n* Nanometer\\r\\n* NauticalMile\\r\\n* Parsec\\r\\n* PrinterPica\\r\\n* PrinterPoint\\r\\n* Shackle\\r\\n* SolarRadius\\r\\n* Twip\\r\\n* UsSurveyFoot\\r\\n* Yard\\r\\n\\r\\n## Returns\\r\\n\\r\\nReturns the input value converted from one length unit to another. Invalid units return `null`.\",'> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAysoyswrUShKLS7NKVGwVUjOzytLLSqJz0nNSy/J0DDUM9JRUPdNLUktUgcy3PLzS9Q1AWLmFfkzAAAA\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint result = convert_length(1.2, \\'Meter\\', \\'Foot\\')\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|result|\\r\\n|---|\\r\\n|3.93700787401575|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/convert-length-function\",\"convert-length-function.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.OperatorToken,\"convert_mass\",\"Convert a mass value from one unit to another.\",\"## Syntax\\r\\n\\r\\n`convert_mass(`*value*`,`*from*`,`*to*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *value* | real | &check; | The value to be converted. |\\r\\n| *from* | string | &check; | The unit to convert from. For possible values, see [Conversion units](#conversion-units). |\\r\\n| *to* | string | &check; | The unit to convert to. For possible values, see [Conversion units](#conversion-units). |\\r\\n\\r\\n### Conversion units\\r\\n\\r\\n* Centigram\\r\\n* Decagram\\r\\n* Decigram\\r\\n* EarthMass\\r\\n* Grain\\r\\n* Gram\\r\\n* Hectogram\\r\\n* Kilogram\\r\\n* Kilopound\\r\\n* Kilotonne\\r\\n* LongHundredweight\\r\\n* LongTon\\r\\n* Megapound\\r\\n* Megatonne\\r\\n* Microgram\\r\\n* Milligram\\r\\n* Nanogram\\r\\n* Ounce\\r\\n* Pound\\r\\n* ShortHundredweight\\r\\n* ShortTon\\r\\n* Slug\\r\\n* SolarMass\\r\\n* Stone\\r\\n* Tonne\\r\\n\\r\\n## Returns\\r\\n\\r\\nReturns the input value converted from one mass unit to another. Invalid units return `null`.\",'> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAysoyswrUShKLS7NKVGwVUjOzytLLSqJz00sLtYw1DPSUVD3zszJTy9KzFUHsgPyS/NS1DUBemVMijUAAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint result = convert_mass(1.2, \\'Kilogram\\', \\'Pound\\')\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|result|\\r\\n|---|\\r\\n|2.64554714621853|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/convert-mass-function\",\"convert-mass-function.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.OperatorToken,\"convert_speed\",\"Convert a speed value from one unit to another.\",\"## Syntax\\r\\n\\r\\n`convert_speed(`*value*`,`*from*`,`*to*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *value* | real | &check; | The value to be converted. |\\r\\n| *from* | string | &check; | The unit to convert from. For possible values, see [Conversion units](#conversion-units).|\\r\\n| *to* | string | &check; | The unit to convert to. For possible values, see [Conversion units](#conversion-units). |\\r\\n\\r\\n### Conversion units\\r\\n\\r\\n* CentimeterPerHour\\r\\n* CentimeterPerMinute\\r\\n* CentimeterPerSecond\\r\\n* DecimeterPerMinute\\r\\n* DecimeterPerSecond\\r\\n* FootPerHour\\r\\n* FootPerMinute\\r\\n* FootPerSecond\\r\\n* InchPerHour\\r\\n* InchPerMinute\\r\\n* InchPerSecond\\r\\n* KilometerPerHour\\r\\n* KilometerPerMinute\\r\\n* KilometerPerSecond\\r\\n* Knot\\r\\n* MeterPerHour\\r\\n* MeterPerMinute\\r\\n* MeterPerSecond\\r\\n* MicrometerPerMinute\\r\\n* MicrometerPerSecond\\r\\n* MilePerHour\\r\\n* MillimeterPerHour\\r\\n* MillimeterPerMinute\\r\\n* MillimeterPerSecond\\r\\n* NanometerPerMinute\\r\\n* NanometerPerSecond\\r\\n* UsSurveyFootPerHour\\r\\n* UsSurveyFootPerMinute\\r\\n* UsSurveyFootPerSecond\\r\\n* YardPerHour\\r\\n* YardPerMinute\\r\\n* YardPerSecond\\r\\n\\r\\n## Returns\\r\\n\\r\\nReturns the input value converted from one speed unit to another. Invalid units return `null`.\",'> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAysoyswrUShKLS7NKVGwVUjOzytLLSqJLy5ITU3RMNQz0lFQ900tSS0KSC0KTgXKpqgDRZxT80oyc6HCHvmlReqaAK/HOJBIAAAA\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint result = convert_speed(1.2, \\'MeterPerSecond\\', \\'CentimeterPerHour\\')\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|result|\\r\\n|---|\\r\\n|432000|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/convert-speed-function\",\"convert-speed-function.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.OperatorToken,\"convert_temperature\",\"Convert a temperature value from one unit to another.\",\"## Syntax\\r\\n\\r\\n`convert_temperature(`*value*`,`*from*`,`*to*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *value* | real | &check; | The value to be converted. |\\r\\n| *from* | string | &check; | The unit to convert from. For possible values, see [Conversion units](#conversion-units). |\\r\\n| *to* | string | &check; | The unit to convert to. For possible values, see [Conversion units](#conversion-units). |\\r\\n\\r\\n### Conversion units\\r\\n\\r\\n* DegreeCelsius\\r\\n* DegreeDelisle\\r\\n* DegreeFahrenheit\\r\\n* DegreeNewton\\r\\n* DegreeRankine\\r\\n* DegreeReaumur\\r\\n* DegreeRoemer\\r\\n* Kelvin\\r\\n* MillidegreeCelsius\\r\\n* SolarTemperature\\r\\n\\r\\n## Returns\\r\\n\\r\\nReturns the input value converted from one temperature unit to another. Invalid units return `null`.\",'> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAysoyswrUShKLS7NKVGwVUjOzytLLSqJL0nNLUgtSiwpLUrVMNQz0lFQ907NKcvMUweyXFLTi1JTnVNzijNLi9U1AVVJ6WxCAAAA\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint result = convert_temperature(1.2, \\'Kelvin\\', \\'DegreeCelsius\\')\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|result|\\r\\n|---|\\r\\n|-271.95|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/convert-temperature-function\",\"convert-temperature-function.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.OperatorToken,\"convert_volume\",\"Convert a volume value from one unit to another.\",\"## Syntax\\r\\n\\r\\n`convert_volume(`*value*`,`*from*`,`*to*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *value* | real | &check; | The value to be converted. |\\r\\n| *from* | string | &check; | The unit to convert from. For possible values, see [Conversion units](#conversion-units). |\\r\\n| *to* | string | &check; | The unit to convert to. For possible values, see [Conversion units](#conversion-units). |\\r\\n\\r\\n### Conversion units\\r\\n\\r\\n* AcreFoot\\r\\n* AuTablespoon\\r\\n* BoardFoot\\r\\n* Centiliter\\r\\n* CubicCentimeter\\r\\n* CubicDecimeter\\r\\n* CubicFoot\\r\\n* CubicHectometer\\r\\n* CubicInch\\r\\n* CubicKilometer\\r\\n* CubicMeter\\r\\n* CubicMicrometer\\r\\n* CubicMile\\r\\n* CubicMillimeter\\r\\n* CubicYard\\r\\n* Decaliter\\r\\n* DecausGallon\\r\\n* Deciliter\\r\\n* DeciusGallon\\r\\n* HectocubicFoot\\r\\n* HectocubicMeter\\r\\n* Hectoliter\\r\\n* HectousGallon\\r\\n* ImperialBeerBarrel\\r\\n* ImperialGallon\\r\\n* ImperialOunce\\r\\n* ImperialPint\\r\\n* KilocubicFoot\\r\\n* KilocubicMeter\\r\\n* KiloimperialGallon\\r\\n* Kiloliter\\r\\n* KilousGallon\\r\\n* Liter\\r\\n* MegacubicFoot\\r\\n* MegaimperialGallon\\r\\n* Megaliter\\r\\n* MegausGallon\\r\\n* MetricCup\\r\\n* MetricTeaspoon\\r\\n* Microliter\\r\\n* Milliliter\\r\\n* OilBarrel\\r\\n* UkTablespoon\\r\\n* UsBeerBarrel\\r\\n* UsCustomaryCup\\r\\n* UsGallon\\r\\n* UsLegalCup\\r\\n* UsOunce\\r\\n* UsPint\\r\\n* UsQuart\\r\\n* UsTablespoon\\r\\n* UsTeaspoon\\r\\n\\r\\n## Returns\\r\\n\\r\\nReturns the input value converted from one volume unit to another. Invalid units return `null`.\",'> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAysoyswrUShKLS7NKVGwVUjOzytLLSqJL8vPKc1N1TDUM9JRUHcuTcpM9k0tSS1SB/Ick4tS3fLzS9Q1Abo7scQ8AAAA\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint result = convert_volume(1.2, \\'CubicMeter\\', \\'AcreFoot\\')\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|result|\\r\\n|---|\\r\\n|0.0009728568|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/convert-volume-function\",\"convert-volume-function.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"cos\",\"Returns the cosine function value of the specified angle. The angle is specified in radians.\",\"## Syntax\\r\\n\\r\\n`cos(`*number*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *number* | real | &check; | The value in radians for which to calculate the cosine. |\\r\\n\\r\\n## Returns\\r\\n\\r\\nThe cosine of *number* of radians.\",'> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAysoyswrUUjOL9Yw1AQAT2Uc+QwAAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint cos(1)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|result|\\r\\n|--|\\r\\n|0.54030230586813977|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/cosfunction\",\"cosfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"cosmosdb_sql_request\",\"The `cosmosdb_sql_request` plugin sends a SQL query to an Azure Cosmos DB SQL network endpoint and returns the results of the query. This plugin is primarily designed for querying small datasets, for example, enriching data with reference data stored in [Azure Cosmos DB](https://docs.microsoft.com/azure/cosmos-db/). The plugin is invoked with the [`evaluate`](evaluateoperator.md) operator.\",'## Syntax\\r\\n\\r\\n`evaluate` `cosmosdb_sql_request` `(` *ConnectionString* `,` *SqlQuery* [`,` *SqlParameters* [`,` *Options*]] `)` [`:` *OutputSchema*]\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|---|---|---|---|\\r\\n| *ConnectionString* | string | &check; | The connection string that points to the Azure Cosmos DB collection to query. It must include *AccountEndpoint*, *Database*, and *Collection*. It may include *AccountKey* if a master key is used for authentication. For more information, see [Authentication and authorization](#authentication-and-authorization).<\\/br> **Example:** `\\'AccountEndpoint=https://cosmosdbacc.documents.azure.com/ ;Database=MyDatabase;Collection=MyCollection;AccountKey=\\' h\\'R8PM...;\\'` |\\r\\n| *SqlQuery*| string | &check; | The query to execute. |\\r\\n| *SqlParameters* | dynamic | | The property bag object to pass as parameters along with the query. Parameter names must begin with `@`. |\\r\\n| *OutputSchema* | | | The names and types of the expected columns of the `cosmosdb_sql_request` plugin output. Use the following syntax: `(` *ColumnName* `:` *ColumnType* [`,` ...] `)`. Specifying this parameter enables multiple query optimizations. |\\r\\n| *Options* | dynamic | | A property bag object of advanced settings. If an `AccountKey` isn\\'t provided in the *ConnectionString*, then the `armResourceId` field of this parameter is required. For more information, see [Supported options](#supported-options). |\\r\\n\\r\\n### Supported options\\r\\n\\r\\nThe following table describes the supported fields of the *Options* parameter.\\r\\n\\r\\n|Name|Type|Description|\\r\\n|--|--|--|\\r\\n| `armResourceId` | string | The  Azure Resource Manager resource ID of the Cosmos DB database. If an account key isn\\'t provided in the connection string argument, this field is required. In such a case, the `armResourceId` is used to authenticate to Cosmos DB.<\\/br>**Example:** `/subscriptions/a0cd6542-7eaf-43d2-bbdd-b678a869aad1/resourceGroups/ cosmoddbresourcegrouput/providers/Microsoft.DocumentDb/databaseAccounts/cosmosdbacc` |\\r\\n| `token` | string | An Azure AD access token of a principal with access to the Cosmos DB database. This token is used together with the `armResourceId` to authenticate with the Azure Resource Manager. If unspecified, the token of the principal that made the query is used.|\\r\\n| `preferredLocations` | string | The region from which to query the data. <\\/br>**Example:** `[\\'East US\\']` |\\r\\n\\r\\n## Authentication and authorization\\r\\n\\r\\nTo authorize to an Azure Cosmos DB SQL network endpoint, you need to specify the authorization information. The following table provides the supported authentication methods and the description for how to use that method.\\r\\n\\r\\n|Authentication method|Description|\\r\\n|--|--|\\r\\n|Azure Resource Manager resource ID (Recommended)|For secure authentication, we recommend specifying the `armResourceId` and optionally the `token` the [options](#supported-options). The `armResourceId` identifies the Cosmos DB database account, and the `token` should be a valid Azure AD bearer token for a principal with access permissions to the Cosmos DB database. If no `token` is provided, the Azure AD token of the requesting principal will be used for authentication.|\\r\\n|Account key|You can add the account key directly to the *ConnectionString* argument. However, this approach is less secure as it involves including the secret in the query text, and is less resilient to future changes in the account key. To enhance security, hide the secret as an [obfuscated string literal](scalar-data-types/string.md#obfuscated-string-literals).|\\r\\n\\r\\n## Set callout policy\\r\\n\\r\\nThe plugin makes callouts to the Azure Cosmos DB instance. Make sure that the cluster\\'s [callout policy](../management/calloutpolicy.md) enables calls of type `cosmosdb` to the target *CosmosDbUri*.\\r\\n\\r\\nThe following example shows how to define the callout policy for Azure Cosmos DB. It\\'s recommended to restrict it to specific endpoints (`my_endpoint1`, `my_endpoint2`).\\r\\n\\r\\n```\\r\\n[\\r\\n  {\\r\\n    \"CalloutType\": \"CosmosDB\",\\r\\n    \"CalloutUriRegex\": \"my_endpoint1\\\\\\\\.documents\\\\\\\\.azure\\\\\\\\.com\",\\r\\n    \"CanCall\": true\\r\\n  },\\r\\n  {\\r\\n    \"CalloutType\": \"CosmosDB\",\\r\\n    \"CalloutUriRegex\": \"my_endpoint2\\\\\\\\.documents\\\\\\\\.azure\\\\\\\\.com\",\\r\\n    \"CanCall\": true\\r\\n  }\\r\\n]\\r\\n```\\r\\n\\r\\nThe following example shows an alter callout policy command for `cosmosdb` *CalloutType*\\r\\n\\r\\n```\\r\\n.alter cluster policy callout @\\'[{\"CalloutType\": \"cosmosdb\", \"CalloutUriRegex\": \"\\\\\\\\.documents\\\\\\\\.azure\\\\\\\\.com\", \"CanCall\": true}]\\'\\r\\n```',\"### Query Azure Cosmos DB with a query-defined output schema\\r\\n\\r\\nThe following example uses the *cosmosdb_sql_request* plugin to send a SQL query while selecting only specific columns.\\r\\nThis query uses explicit schema definitions that allow various optimizations before the actual query is run against Cosmos DB.\\r\\n\\r\\n```\\r\\nevaluate cosmosdb_sql_request(\\r\\n  'AccountEndpoint=https://cosmosdbacc.documents.azure.com/;Database=MyDatabase;Collection=MyCollection;AccountKey=' h'R8PM...;',\\r\\n  'SELECT Id, Name from c') : (Id:long, Name:string) \\r\\n```\\r\\n\\r\\n### Query Azure Cosmos DB\\r\\n\\r\\nThe following example uses the *cosmosdb_sql_request* plugin to send a SQL query to fetch data from Azure Cosmos DB using its Azure Cosmos DB for NoSQL.\\r\\n\\r\\n```\\r\\nevaluate cosmosdb_sql_request(\\r\\n  'AccountEndpoint=https://cosmosdbacc.documents.azure.com/;Database=MyDatabase;Collection=MyCollection;AccountKey=' h'R8PM...;',\\r\\n  'SELECT * from c') // OutputSchema is unknown, so it is not specified. This may harm the performance of the query.\\r\\n```\\r\\n\\r\\n### Query Azure Cosmos DB with parameters\\r\\n\\r\\nThe following example uses SQL query parameters and queries the data from an alternate region. For more information, see [`preferredLocations`](https://docs.microsoft.com/azure/cosmos-db/tutorial-global-distribution-sql-api?tabs=dotnetv2%2Capi-async#preferred-locations).\\r\\n\\r\\n```\\r\\nevaluate cosmosdb_sql_request(\\r\\n    'AccountEndpoint=https://cosmosdbacc.documents.azure.com/;Database=MyDatabase;Collection=MyCollection;AccountKey=' h'R8PM...;',\\r\\n    \\\"SELECT c.id, c.lastName, @param0 as Column0 FROM c WHERE c.dob >= '1970-01-01T00:00:00Z'\\\",\\r\\n    dynamic({'@param0': datetime(2019-04-16 16:47:26.7423305)}),\\r\\n    dynamic({'preferredLocations': ['East US']})) : (Id:long, Name:string, Column0: datetime) \\r\\n| where lastName == 'Smith'\\r\\n```\\r\\n\\r\\n---\\r\\n\\r\\n> [!IMPORTANT]\\r\\n> The content below is Microsoft confidential(not available in the [public site](https://docs.microsoft.com/en-us/azure/data-explorer/))\\r\\n\\r\\n# cosmosdb_sql_request plugin - Internal\\r\\n\\r\\nThe `cosmosdb_sql_request` plugin sends an SQL query to a Cosmos DB SQL network endpoint.\\r\\n\\r\\n- `evaluate` `cosmosdb_sql_request` `(` *ConnectionString* `,` *SqlQuery* [`,` *SqlParameters* [`,` *Options*]] `)`\\r\\n- `evaluate` `cosmosdb_sql_request` `(` *CosmosDbUri* `,` *authorization_key* `,` *database_name* `,` *collection_name* `,` *SqlQuery* `)`\\r\\n\\r\\n\\r\\n> [!NOTE]\\r\\n> It's recommended to use the syntax with `ConnectionString`. The other syntax is kept for backward-compatibility purposes.\\r\\n\\r\\n**Arguments**\\r\\n\\r\\n* *ConnectionString*: A `string` literal indicating the connection string that\\r\\n  points to the Cosmos DB collection to query. It must include `AccountEndpoint`, `Database`, `Collection`\\r\\n  and may include `AccountKey` if an API key is used for authentication. \\r\\n\\r\\n  Example:\\r\\n  `'AccountEndpoint=https://cosmosdbut.documents.azure.com:443/;Database=MyDatabase;Collection=MyCollection;AccountKey=' h'R8PM...;'`,\\r\\n  where the key is an [obfuscated string literal](./scalar-data-types/string.md#obfuscated-string-literals)\\r\\n  to prevent secret leakage.\\r\\n\\r\\n* *SqlQuery*: A `string` literal indicating the query to execute.\\r\\n\\r\\n* *SqlParameters*: A constant value of type `dynamic` that holds key-value pairs\\r\\n  to pass as parameters along with the query. Parameter names must begin with `@`. Optional.\\r\\n  \\r\\n* *Options*: A constant value of type `dynamic` that holds more advanced settings\\r\\n  as key-value pairs. Supported settings include `armResourceId` (Example: `/subscriptions/a0cd6542-7eaf-43d2-bbdd-b678a869aad1/resourceGroups/cosmoddbresourcegrouput/providers/Microsoft.DocumentDb/databaseAccounts/cosmosdbut`)\\r\\n  to retrieve the API key from ARM, `token` to provide the AAD access token used to authenticate with ARM, and `preferredLocations` (Example: `['East US']`)\\r\\n  to control which region the data is queried from. Optional.\\r\\n\\r\\n* *CosmosDbUri*: A `string` literal indicating the URI of the Cosmos DB endpoint\\r\\n  to connect to.\\r\\n\\r\\n* *authorization_key*: A `string` literal specifying CosmosDB resource or master token.\\r\\n  It is **strongly recommended** that this argument use the\\r\\n  [obfuscated string literals](./scalar-data-types/string.md#obfuscated-string-literals)\\r\\n  to prevent secret leakage.\\r\\n\\r\\n* *database_name*: A `string` literal specifying CosmosDB Database name.\\r\\n\\r\\n* *collection_name*: A `string` literal specifying CosmosDB collection name.\\r\\n\\r\\n\\r\\n**Restrictions**\\r\\n\\r\\nThe plugin makes callouts to Cosmos DB and so make sure that the\\r\\ncluster's [Callout policy](../management/calloutpolicy.md) enables calls of type\\r\\n`cosmosdb` to the target *CosmosDbUri*.\\r\\n\\r\\nBelow is an example of defining call-out policy for CosmosDB. It's recommended to restrict it to specific endpoints (`my_endpoint1`, `my_endpoint2`).\\r\\n\\r\\n```json\\r\\n[\\r\\n  {\\r\\n    \\\"CalloutType\\\": \\\"CosmosDB\\\",\\r\\n    \\\"CalloutUriRegex\\\": \\\"my_endpoint1.documents.azure.com\\\",\\r\\n    \\\"CanCall\\\": true\\r\\n  },\\r\\n  {\\r\\n    \\\"CalloutType\\\": \\\"CosmosDB\\\",\\r\\n    \\\"CalloutUriRegex\\\": \\\"my_endpoint2.documents.azure.com\\\",\\r\\n    \\\"CanCall\\\": true\\r\\n  }\\r\\n]\\r\\n```\\r\\n\\r\\n**Examples**\\r\\n\\r\\nUsing SQL query to fetch all rows from Cosmos DB:\\r\\n\\r\\n```\\r\\nevaluate cosmosdb_sql_request(\\r\\n  'AccountEndpoint=https://cosmosdbut.documents.azure.com:443/;Database=MyDatabase;Collection=MyCollection;AccountKey=' h'R8PM...;',\\r\\n  'SELECT * from c')\\r\\n```\\r\\n\\r\\nUsing SQL query parameters and querying the data from an alternate region:\\r\\n\\r\\n```\\r\\nevaluate cosmosdb_sql_request(\\r\\n    'AccountEndpoint=https://cosmosdbut.documents.azure.com:443/;Database=MyDatabase;Collection=MyCollection;AccountKey=' h'R8PM...;',\\r\\n    \\\"SELECT c.id, c.lastName, @param0 as Column0 FROM c WHERE c.dob >= '1970-01-01T00:00:00Z'\\\",\\r\\n    dynamic({'@param0': datetime(2019-04-16 16:47:26.7423305)}),\\r\\n    dynamic({'preferredLocations': ['East US']}))\\r\\n| where lastName == 'Smith'\\r\\n```\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/cosmosdb-plugin\",\"cosmosdb-plugin.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"cot\",\"Calculates the trigonometric cotangent of the specified angle, in radians.\",\"## Syntax\\r\\n\\r\\n`cot(`*number*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *number* | real | &check; | The value for which to calculate the cotangent. |\\r\\n\\r\\n## Returns\\r\\n\\r\\nThe cotangent function value for *number*.\",'> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAysoyswrUUjOL9Ew1AQA9l3LZAwAAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint cot(1)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|result|\\r\\n|--|\\r\\n|0.64209261593433065|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/cotfunction\",\"cotfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"count\",\"Counts the number of records per summarization group, or total if summarization is done without grouping.\",\"Use the [countif](countif-aggfunction.md) aggregation function to count only records for which a predicate returns `true`.\\r\\n\\r\\n[!INCLUDE [data-explorer-agg-function-summarize-note](../../includes/data-explorer-agg-function-summarize-note.md)]\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`count()`\\r\\n\\r\\n## Returns\\r\\n\\r\\nReturns a count of the records per summarization group (or in total, if summarization is done without grouping).\",'This example returns a count of events in states starting with letter `W`:\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAwsuyS/KdS1LzSsp5qpRKM9ILUpVCC5JLElVKC5JLCopLs8syVBQClcCShaX5uYmFmVWpSo455fmldgmg0gNTYWkSogOAJStyvpLAAAA\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nStormEvents\\r\\n| where State startswith \"W\"\\r\\n| summarize Count=count() by State\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|State|Count|\\r\\n|---|---|\\r\\n|WEST VIRGINIA|757|\\r\\n|WYOMING|396|\\r\\n|WASHINGTON|261|\\r\\n|WISCONSIN|1850|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/count-aggfunction\",\"count-aggfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.OperatorToken,\"count\",\"Returns the number of records in the input record set.\",\"## Syntax\\r\\n\\r\\n*T* `|` `count`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *T* | string | &check; | The tabular input whose records are to be counted. |\\r\\n\\r\\n## Returns\\r\\n\\r\\nThis function returns a table with a single record and column of type\\r\\n`long`. The value of the only cell is the number of records in *T*.\",'> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAwsuyS/KdS1LzSspVqhRSM4vzSsBALU2eHsTAAAA\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nStormEvents | count\\r\\n```\\r\\n\\r\\n## See also\\r\\n\\r\\nFor information about the count() aggregation function, see [count() (aggregation function)](count-aggfunction.md).',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/countoperator\",\"countoperator.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"count_distinct\",\"Counts unique values specified by the scalar expression per summary group, or the total number of unique values if the summary group is omitted.\",\"[!INCLUDE [data-explorer-agg-function-summarize-note](../../includes/data-explorer-agg-function-summarize-note.md)]\\r\\n\\r\\nIf you only need an estimation of unique values count, we recommend using the less resource-consuming [`dcount`](dcount-aggfunction.md) aggregation function.\\r\\n\\r\\nTo count only records for which a predicate returns `true`, use the [count_distinctif](count-distinctif-aggfunction.md) aggregation function.\\r\\n\\r\\n> [!NOTE]\\r\\n> * This function is limited to 100M unique values. An attempt to apply the function on an expression returning too many values will produce a runtime error (HRESULT: 0x80DA0012).\\r\\n> * Function performance can be degraded when operating on multiple data sources from different clusters.\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`count_distinct` `(`*expr*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *expr*| scalar | &check; | The expression whose unique values are to be counted. |\\r\\n\\r\\n## Returns\\r\\n\\r\\nLong integer value indicating the number of unique values of *expr* per summary group.\",'This example shows how many types of storm events happened in each state.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAwsuyS/KdS1LzSsp5qpRKC7NzU0syqxKVQjNyywsTYVI2Cbnl+aVxKdkFpdk5iWXaIBFQyoLUjUVkioVgksSS1KBekvyCxRMQQLIWgE/wdUFXwAAAA==\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nStormEvents\\r\\n| summarize UniqueEvents=count_distinct(EventType) by State\\r\\n| top 5 by UniqueEvents\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n| State                | UniqueEvents  |\\r\\n| -------------------- | ------------- |\\r\\n| TEXAS                | 27            |\\r\\n| CALIFORNIA           | 26            |\\r\\n| PENNSYLVANIA         | 25            |\\r\\n| GEORGIA              | 24            |\\r\\n| NORTH CAROLINA       | 23            |',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/count-distinct-aggfunction\",\"count-distinct-aggfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"count_distinctif\",\"Conditionally counts unique values specified by the scalar expression per summary group, or the total number of unique values if the summary group is omitted. Only records for which *predicate* evaluates to `true` are counted.\",\"[!INCLUDE [data-explorer-agg-function-summarize-note](../../includes/data-explorer-agg-function-summarize-note.md)]\\r\\n\\r\\nIf you only need an estimation of unique values count, we recommend using the less resource-consuming [dcountif](dcountif-aggfunction.md) aggregation function.\\r\\n\\r\\n> [!NOTE]\\r\\n> * This function is limited to 100M unique values. An attempt to apply the function on an expression returning too many values will produce a runtime error (HRESULT: 0x80DA0012).\\r\\n> * Function performance can be degraded when operating on multiple data sources from different clusters.\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`count_distinctif` `(`*expr*`,` *predicate*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *expr*| scalar | &check; | The expression whose unique values are to be counted. |\\r\\n| *predicate* | string | &check; | The expression used to filter records to be aggregated. |\\r\\n\\r\\n## Returns\\r\\n\\r\\nInteger value indicating the number of unique values of *expr* per summary group, for all records for which the *predicate* evaluates to `true`.\",'This example shows how many types of death-causing storm events happened in each state. Only storm events with a nonzero count of deaths will be counted.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA22NsQ6CQBAFe79iS4gWNJZQoYk1Wpv1WMMm3h3cvdNA/HgRSi3fzCSvgQ/28BSHuHlTTNZy0Eno4nRIcmTwY7Wl8cnh2mqEOgO9Zws/j73ssloYXaw1iAFtaZ0n1y4gr4qcbiM1YMh88uok/DmgiorZwve0/+Y/wQetTCWoqwAAAA==\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nStormEvents\\r\\n| summarize UniqueFatalEvents=count_distinctif(EventType,(DeathsDirect + DeathsIndirect)>0) by State\\r\\n| where UniqueFatalEvents > 0\\r\\n| top 5 by UniqueFatalEvents\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n| State           | UniqueFatalEvents |\\r\\n| --------------- | ----------------- |\\r\\n| TEXAS           | 12                |\\r\\n| CALIFORNIA      | 12                |\\r\\n| OKLAHOMA        | 10                |\\r\\n| NEW YORK        | 9                 |\\r\\n| KANSAS          | 9                 |',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/count-distinctif-aggfunction\",\"count-distinctif-aggfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"countif\",\"Counts the rows in which *predicate* evaluates to `true`.\",\"[!INCLUDE [data-explorer-agg-function-summarize-note](../../includes/data-explorer-agg-function-summarize-note.md)]\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`countif` `(`*predicate*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *predicate*|  string | &check; | The expression used for aggregation calculation. The value can be any scalar expression with a return type of bool.\\r\\n\\r\\n## Returns\\r\\n\\r\\nReturns a count of rows in which *predicate* evaluates to `true`.\",'### Count storms by state\\r\\n\\r\\nThis example shows the number of storms with damage to crops by state.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAwsuyS/KdS1LzSsp5qpRKC7NzU0syqxKVQjJL0nMcc4vzSuxTQaRGpo6YKHwzJIMl8TcxPRUiHhmmgaE61yUX1CsYGegqZBUqRBckliSCgAAARcgWwAAAA==\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nStormEvents\\r\\n| summarize TotalCount=count(),TotalWithDamage=countif(DamageCrops >0) by State\\r\\n```\\r\\n\\r\\nThe results table shown includes only the first 10 rows.\\r\\n\\r\\n| State                | TotalCount | TotalWithDamage |\\r\\n| -------------------- | ---------- | --------------- |\\r\\n| TEXAS                | 4701       | 72              |\\r\\n| KANSAS               | 3166       | 70              |\\r\\n| IOWA                 | 2337       | 359             |\\r\\n| ILLINOIS             | 2022       | 35              |\\r\\n| MISSOURI             | 2016       | 78              |\\r\\n| GEORGIA              | 1983       | 17              |\\r\\n| MINNESOTA            | 1881       | 37              |\\r\\n| WISCONSIN            | 1850       | 75              |\\r\\n| NEBRASKA             | 1766       | 201             |\\r\\n| NEW YORK             | 1750       | 1               |\\r\\n| ... | ... | ... |\\r\\n\\r\\n### Count based on string length\\r\\n\\r\\nThis example shows the number of names with more than 4 letters.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAyWNMQvCMBBG9/yKo1MDWRRFregqOIl0EympXtNAcgdpMij+eI+Wb3pv+F7ADC2c4G2zrA9Yk43YTDl5ckb0p+Oh633KYxOYnFYPBQDVlUeqDBzMTDdbgtBqv+AFOTkUsd4u4i5nLLxTz6Nq1Q+mEqNN/ovw4kLZD7UUA9Jc13CGjf4DYumr9poAAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nlet T = datatable(name:string, day_of_birth:long)\\r\\n[\\r\\n   \"John\", 9,\\r\\n   \"Paul\", 18,\\r\\n   \"George\", 25,\\r\\n   \"Ringo\", 7\\r\\n];\\r\\nT\\r\\n| summarize countif(strlen(name) > 4)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|countif_|\\r\\n|----|\\r\\n|2|\\r\\n\\r\\n## See also\\r\\n\\r\\n[count()](count-aggfunction.md) function, which counts rows without predicate expression.',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/countif-aggfunction\",\"countif-aggfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"countof\",\"Counts occurrences of a substring in a string. Plain string matches may overlap; regex matches don't.\",\"## Syntax\\r\\n\\r\\n`countof(`*source*`,` *search* [`,` *kind*]`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *source* | string | &check; | The value to search. |\\r\\n| *search* | string | &check; | The value or [regular expression](./re2.md) to match inside *source*. |\\r\\n| *kind* | string | | The value `normal` or `regex`. The default is `normal`. |\\r\\n\\r\\n## Returns\\r\\n\\r\\nThe number of times that the *search* value can be matched in the *source* string. Plain string matches may overlap; regex matches don't.\",'|Function call|Result|\\r\\n|---|---\\r\\n|`countof(\"aaa\", \"a\")`| 3\\r\\n|`countof(\"aaaa\", \"aa\")`| 3 (not 2!)\\r\\n|`countof(\"ababa\", \"ab\", \"normal\")`| 2\\r\\n|`countof(\"ababa\", \"aba\")`| 2\\r\\n|`countof(\"ababa\", \"aba\", \"regex\")`| 1\\r\\n|`countof(\"abcabc\", \"a.c\", \"regex\")`| 2',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/countoffunction\",\"countoffunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"current_cluster_endpoint\",\"Returns the network endpoint (DNS name) of the current cluster being queried.\",\"## Syntax\\r\\n\\r\\n`current_cluster_endpoint()`\\r\\n\\r\\n## Returns\\r\\n\\r\\nThe network endpoint (DNS name) of the current cluster being queried,\\r\\nas a value of type `string`.\",'```\\r\\nprint strcat(\"This query executed on: \", current_cluster_endpoint())\\r\\n```',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/current-cluster-endpoint-function\",\"current-cluster-endpoint-function.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"current_database\",\"Returns the name of the database in scope (database that all query\\r\\nentities are resolved against if no other database is specified).\",\"## Syntax\\r\\n\\r\\n`current_database()`\\r\\n\\r\\n## Returns\\r\\n\\r\\nThe name of the database in scope as a value of type `string`.\",'```\\r\\nprint strcat(\"Database in scope: \", current_database())\\r\\n```',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/current-database-function\",\"current-database-function.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"current_principal\",\"Returns the current principal name that runs the query.\",\"## Syntax\\r\\n\\r\\n`current_principal()`\\r\\n\\r\\n## Returns\\r\\n\\r\\nThe current principal fully qualified name (FQN) as a `string`.  \\r\\nThe string format is:  \\r\\n*PrinciplaType*`=`*PrincipalId*`;`*TenantId*\",'> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAysoyswrUUgrzLNNLi0qSs0riS8AiiRnFiTmaGgCAGK4N8YdAAAA\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint fqn=current_principal()\\r\\n```\\r\\n\\r\\n**Example output**\\r\\n\\r\\n|fqn|\\r\\n|---|\\r\\n|aaduser=346e950e-4a62-42bf-96f5-4cf4eac3f11e;72f988bf-86f1-41af-91ab-2d7cd011db47|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/current-principalfunction\",\"current-principalfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"current_principal_details\",\"Returns details of the principal running the query.\",\"## Syntax\\r\\n\\r\\n`current_principal_details()`\\r\\n\\r\\n## Returns\\r\\n\\r\\nThe details of the current principal as a `dynamic`.\",'> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAysoyswrUUixTS4tKkrNK4kvAPKTMwsSc+JTUksSM3OKNTQBdsrI5yMAAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint d=current_principal_details()\\r\\n```\\r\\n\\r\\n**Example output**\\r\\n\\r\\n|d|\\r\\n|---|\\r\\n|{<br>  \"UserPrincipalName\": \"user@fabrikam.com\",<br>  \"IdentityProvider\": \"https://sts.windows.net\",<br>  \"Authority\": \"72f988bf-86f1-41af-91ab-2d7cd011db47\",<br>  \"Mfa\": \"True\",<br>  \"Type\": \"AadUser\",<br>  \"DisplayName\": \"James Smith (upn: user@fabrikam.com)\",<br>  \"ObjectId\": \"346e950e-4a62-42bf-96f5-4cf4eac3f11e\",<br>  \"FQN\": null,<br>  \"Notes\": null<br>}|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/current-principal-detailsfunction\",\"current-principal-detailsfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"current_principal_is_member_of\",\"Checks group membership or principal identity of the current principal running the query.\",\"## Syntax\\r\\n\\r\\n`current_principal_is_member_of(`*group*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *group* | dynamic | &check; | An array of string literals in which each literal represents an Azure Active Directory (Azure AD) principal. See [examples for Azure AD principals](../management/access-control/referencing-security-principals.md).|\\r\\n\\r\\n## Returns\\r\\n\\r\\nThe function returns `true` if the current principal running the query is successfully matched for at least one input argument. If not, the function returns `false`.\",\"> [!div class=\\\"nextstepaction\\\"]\\r\\n> <a href=\\\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA12MywqDMBQF9/0Kd7bQFPMgMZRA/yTcvEqo0XA1/1/rwkXPYhaHYSrmeeswrm3ajG+Icd5s3U+fK0w2r7bE4iLaJV0v3b4eILQ1ovmBvhI4zB8oD7+U/t6dyhuXVs3Bf+l0oFYjJQTKOSMctCACpCY6ASNUKc7SoLmU4qlY0uPoEhllokRQSERTcIQF5cNAaXBC9Uf29gUBrFgb0AAAAA==\\\" target=\\\"_blank\\\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint result=current_principal_is_member_of(\\r\\n    'aaduser=user1@fabrikam.com', \\r\\n    'aadgroup=group1@fabrikam.com',\\r\\n    'aadapp=66ad1332-3a94-4a69-9fa2-17732f093664;72f988bf-86f1-41af-91ab-2d7cd011db47'\\r\\n    )\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n| result |\\r\\n|--------|\\r\\n| false  |\\r\\n\\r\\nUsing dynamic array instead of multiple arguments:\\r\\n\\r\\n> [!div class=\\\"nextstepaction\\\"]\\r\\n> <a href=\\\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA12MywrCMBRE935Fd23BSPMgaZCA/yESbl4SbNqQNgv/3tqFC2dxYIbD5BLnrSl+rdOmbC3Fz5vO+2hjhknHVSefjC96Cd2p2ePeM6Rou/vRWgBXV1/UF/gWwJT4gnSxS2rPzU95lqVmdfBf+jmQs+IcHKaUIAqSIQZcIhmAICwEJWGQlHN2FSTIcTQBjTxgxDAEJDEYRJywbsDYGSba4/bR9x8D/i004AAAAA==\\\" target=\\\"_blank\\\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint result=current_principal_is_member_of(\\r\\n    dynamic([\\r\\n    'aaduser=user1@fabrikam.com', \\r\\n    'aadgroup=group1@fabrikam.com',\\r\\n    'aadapp=66ad1332-3a94-4a69-9fa2-17732f093664;72f988bf-86f1-41af-91ab-2d7cd011db47'\\r\\n    ]))\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n| result |\\r\\n|--------|\\r\\n| false  |\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/current-principal-ismemberoffunction\",\"current-principal-ismemberoffunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"cursor_after\",\"A predicate run over the records of a table to compare their ingestion time against a database cursor.\",\"> [!NOTE]\\r\\n> This function can only be invoked on records of a table that has the\\r\\n[IngestionTime policy](../management/ingestiontimepolicy.md) enabled.\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`cursor_after(`*RHS*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *RHS* | string | &check; | Either an empty string literal or a valid database cursor value.|\\r\\n\\r\\n## Returns\\r\\n\\r\\nA scalar value of type `bool` that indicates whether the record was ingested\\r\\nafter the database cursor *RHS* (`true`) or not (`false`).\\r\\n\\r\\n## See also\\r\\n\\r\\nSee [database cursors](../management/databasecursor.md) for additional\\r\\ndetails on database cursors.\",\"\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/cursorafterfunction\",\"\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"cursor_before_or_at\",\"A predicate function run over the records of a table to compare their ingestion time against the database cursor time.\",\"> [!NOTE]\\r\\n> This function can only be invoked on records of a table that has the\\r\\n[IngestionTime policy](../management/ingestiontimepolicy.md) enabled.\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`cursor_before_or_at(`*RHS*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *RHS* | string | &check; | Either an empty string literal or a valid database cursor value.|\\r\\n\\r\\n## Returns\\r\\n\\r\\nA scalar value of type `bool` that indicates whether the record was ingested\\r\\nbefore or at the database cursor *RHS* (`true`) or not (`false`).\\r\\n\\r\\n## See also\\r\\n\\r\\nSee [database cursors](../management/databasecursor.md) for additional\\r\\ndetails on database cursors.\",\"\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/cursorbeforeoratfunction\",\"\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"database\",\"Changes the reference of the query to a specific database within the cluster scope.\",\"> [!NOTE]\\r\\n>\\r\\n> * For more information, see [cross-database and cross-cluster queries](cross-cluster-or-database-queries.md).\\r\\n> * For accessing remote cluster and remote database, see [`cluster()`](clusterfunction.md) scope function.\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`database(`*databaseName*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n|Name|Type|Required|Description|\\r\\n|--|--|--|--|\\r\\n| *databaseName* | string | The name of the database to reference. The *databaseName* can be either the `DatabaseName` or `PrettyName`. The argument must be a constant value and can't come from a subquery evaluation.|\",'### Use database() to access table of other database\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA0tJLElMSixO1VAPTswtyEktVtfUCy7JL8p1LUvNKylWqFFIzi/NKwEAS+mhvycAAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\ndatabase(\\'Samples\\').StormEvents | count\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|Count|\\r\\n|---|\\r\\n|59066|\\r\\n\\r\\n### Use database() inside let statements\\r\\n\\r\\nThe query above can be rewritten as a query-defined function (let statement) that\\r\\nreceives a parameter `dbName` - which is passed into the database() function.\\r\\n\\r\\n```\\r\\nlet foo = (dbName:string)\\r\\n{\\r\\n    database(dbName).StormEvents | count\\r\\n};\\r\\nfoo(\\'help\\')\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|Count|\\r\\n|---|\\r\\n|59066|\\r\\n\\r\\n### Use database() inside stored functions\\r\\n\\r\\nThe same query as above can be rewritten to be used in a function that\\r\\nreceives a parameter `dbName` - which is passed into the database() function.\\r\\n\\r\\n```\\r\\n.create function foo(dbName:string)\\r\\n{\\r\\n    database(dbName).StormEvents | count\\r\\n};\\r\\n```\\r\\n\\r\\n> [!NOTE]\\r\\n> Such functions can be used only locally and not in the cross-cluster query.',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/databasefunction\",\"databasefunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.OperatorToken,\"datatable\",\"Returns a table whose schema and values are defined in the query itself.\",\"> [!NOTE]\\r\\n> This operator doesn't have a pipeline input.\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`datatable(` *ColumnName* `:` *ColumnType* [`,` ...] `[` *ScalarValue* [`,` *ScalarValue* ...] `])`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *ColumnName*:*ColumnType* | string | &check; | The name of column and type of data in that column that define the schema of the table.|\\r\\n| *ScalarValue* | scalar | &check; | The value to insert into the table. The number of values must be an integer multiple of the columns in the table. The *n*'th value must have a type that corresponds to column *n* % *NumColumns*. |\\r\\n\\r\\n## Returns\\r\\n\\r\\nThis operator returns a data table of the given schema and data.\",'> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA3XRS4vCMBAA4Lu/YsiphbiY1upa0IPYo8velz2kZtRgTCCNL1z/uxNZd6HYJAQyj++QUTLQrg0mCxmwVHQFvUcO1RFtKJvgtd1wWDqPVCBLdbFyr1cpfPWA1rM+ERMx6A9GfSFSDmzuvGUcfouTK9vhRbCSHaU5oKBMDGTPQMZuKW9zOXGCTuQqG9A3UK2cQfiQ1ISdet7Wh6/0Iv/XPw+10c0WFay1bwLUzu06+aLNj17xk3H8i6yI/EKj6uTGbe79wX33fuC0RY9AAzBok8c0UpjBkDJ4DmgVxDaY/o3mLb7vp72pd88BAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\ndatatable(Date:datetime, Event:string, MoreData:dynamic) [\\r\\n    datetime(1910-06-11), \"Born\", dynamic({\"key1\":\"value1\", \"key2\":\"value2\"}),\\r\\n    datetime(1930-01-01), \"Enters Ecole Navale\", dynamic({\"key1\":\"value3\", \"key2\":\"value4\"}),\\r\\n    datetime(1953-01-01), \"Published first book\", dynamic({\"key1\":\"value5\", \"key2\":\"value6\"}),\\r\\n    datetime(1997-06-25), \"Died\", dynamic({\"key1\":\"value7\", \"key2\":\"value8\"}),\\r\\n]\\r\\n| where strlen(Event) > 4\\r\\n| extend key2 = MoreData.key2\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|Date|Event|MoreData|key2|\\r\\n|---|---|---|---|\\r\\n|1930-01-01 00:00:00.0000000|Enters Ecole Navale|{<br>  \"key1\": \"value3\",<br>  \"key2\": \"value4\"<br>}|value4|\\r\\n|1953-01-01 00:00:00.0000000|Published first book|{<br>  \"key1\": \"value5\",<br>  \"key2\": \"value6\"<br>}|value6|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/datatableoperator\",\"datatableoperator.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"datetime_add\",\"Calculates a new [datetime](./scalar-data-types/datetime.md) from a specified period multiplied by a specified amount, added to, or subtracted from a specified [datetime](./scalar-data-types/datetime.md).\",\"## Syntax\\r\\n\\r\\n`datetime_add(`*period*`,`*amount*`,`*datetime*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *period* | string | &check; | The length of time by which to increment.|\\r\\n| *amount* | int | &check; | The number of *periods* to add to or subtract from *datetime*. |\\r\\n| *datetime* | datetime | &check; | The date to increment by the result of the *period* x *amount* calculation. |\\r\\n\\r\\nPossible values of *period*:\\r\\n\\r\\n* Year\\r\\n* Quarter\\r\\n* Month\\r\\n* Week\\r\\n* Day\\r\\n* Hour\\r\\n* Minute\\r\\n* Second\\r\\n* Millisecond\\r\\n* Microsecond\\r\\n* Nanosecond\\r\\n\\r\\n## Returns\\r\\n\\r\\nA [datetime](./scalar-data-types/datetime.md) after a certain time/date interval has been added.\",\"### Period\\r\\n\\r\\n> [!div class=\\\"nextstepaction\\\"]\\r\\n> <a href=\\\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA4XPuw6DMAyF4b1PkQ2QMjRdmPosyMKWiFASmjqqeHsIl8mSu/5H33CW7CMbsxJk8zYITOwDDYDYNjU21tkAMw331L6ert+j6zr7+BTITFJeXcchRZ4EPaoOf0SzcDXqDGEVam86mlKR92r8883HwiTPHVmnXxpTREHPrNENq0hHU8sBAAA=\\\" target=\\\"_blank\\\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint  year = datetime_add('year',1,make_datetime(2017,1,1)),\\r\\nquarter = datetime_add('quarter',1,make_datetime(2017,1,1)),\\r\\nmonth = datetime_add('month',1,make_datetime(2017,1,1)),\\r\\nweek = datetime_add('week',1,make_datetime(2017,1,1)),\\r\\nday = datetime_add('day',1,make_datetime(2017,1,1)),\\r\\nhour = datetime_add('hour',1,make_datetime(2017,1,1)),\\r\\nminute = datetime_add('minute',1,make_datetime(2017,1,1)),\\r\\nsecond = datetime_add('second',1,make_datetime(2017,1,1))\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|year|quarter|month|week|day|hour|minute|second|\\r\\n|---|---|---|---|---|---|---|---|\\r\\n|2018-01-01 00:00:00.0000000|2017-04-01 00:00:00.0000000|2017-02-01 00:00:00.0000000|2017-01-08 00:00:00.0000000|2017-01-02 00:00:00.0000000|2017-01-01 01:00:00.0000000|2017-01-01 00:01:00.0000000|2017-01-01 00:00:01.0000000|\\r\\n\\r\\n### Amount\\r\\n\\r\\n> [!div class=\\\"nextstepaction\\\"]\\r\\n> <a href=\\\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAysoyswrUVCoTE0sUrBVSEksSS3JzE2NT0xJ0VAHCarr6Jrq5CZmp8bD5DSMDAzNdQx1DDU1dbgKSxOLSlIxtULF1XUMjfDozs3PK8nA0AsWBdpriM/i8tTUbAydIEGglQYGODUCAFYx9CDvAAAA\\\" target=\\\"_blank\\\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint  year = datetime_add('year',-5,make_datetime(2017,1,1)),\\r\\nquarter = datetime_add('quarter',12,make_datetime(2017,1,1)),\\r\\nmonth = datetime_add('month',-15,make_datetime(2017,1,1)),\\r\\nweek = datetime_add('week',100,make_datetime(2017,1,1))\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|year|quarter|month|week|\\r\\n|---|---|---|---|\\r\\n|2012-01-01T00:00:00Z|2020-01-01T00:00:00Z|2015-10-01T00:00:00Z|2018-12-02T00:00:00Z|\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/datetime-addfunction\",\"datetime-addfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"datetime_diff\",\"Calculates the number of the specified periods between two [datetime](./scalar-data-types/datetime.md) values.\",\"## Syntax\\r\\n\\r\\n`datetime_diff(`*period*`,`*datetime1*`,`*datetime2*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *period* | string | &check; | The measurement of time used to calculate the return value. See [possible values](#possible-values-of-period).|\\r\\n| *datetime1* | datetime | &check; | The left-hand side of the subtraction equation.|\\r\\n| *datetime2* | datetime | &check; | The right-hand side of the subtraction equation. |\\r\\n\\r\\n### Possible values of *period*\\r\\n\\r\\n* Year\\r\\n* Quarter\\r\\n* Month\\r\\n* Week\\r\\n* Day\\r\\n* Hour\\r\\n* Minute\\r\\n* Second\\r\\n* Millisecond\\r\\n* Microsecond\\r\\n* Nanosecond\\r\\n\\r\\n## Returns\\r\\n\\r\\nAn integer that represents the amount of *periods* in the result of subtraction (*datetime1* - *datetime2*).\",\"> [!div class=\\\"nextstepaction\\\"]\\r\\n> <a href=\\\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA52S3YrDIBCF7/sU3rVCDTORkCawz7JIY6lsY7pZw9K3X3+6bagmQsWrc8bvDONcR6XN5ibFSD5IJ4w0qpefnTqddlunbvf/4q4ErBmgvXQuAjAsGUdK95vvSYxGJlB3I6LVrzQncsbB0fpBm3PM8nK+L6x8X570K+VXDHLqKweBlQ0BaAGivhpLIyVvq8YxO3GLkVZ8n3gepsTonJpgciSACaazZsxe6cnIxBC9nuL6x1C18cc8XbjTf+Rx0F1MD/oyHVqEAlea9+MqGgh7oC4XtRQ1M9fyLM2uaj7SVjxSj+OwnPowM6kBuDrLUHWwhS5XC70Y+/QyqRBOJjUU1ZT+AYwetRIGBAAA\\\" target=\\\"_blank\\\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint\\r\\nyear = datetime_diff('year',datetime(2017-01-01),datetime(2000-12-31)),\\r\\nquarter = datetime_diff('quarter',datetime(2017-07-01),datetime(2017-03-30)),\\r\\nmonth = datetime_diff('month',datetime(2017-01-01),datetime(2015-12-30)),\\r\\nweek = datetime_diff('week',datetime(2017-10-29 00:00),datetime(2017-09-30 23:59)),\\r\\nday = datetime_diff('day',datetime(2017-10-29 00:00),datetime(2017-09-30 23:59)),\\r\\nhour = datetime_diff('hour',datetime(2017-10-31 01:00),datetime(2017-10-30 23:59)),\\r\\nminute = datetime_diff('minute',datetime(2017-10-30 23:05:01),datetime(2017-10-30 23:00:59)),\\r\\nsecond = datetime_diff('second',datetime(2017-10-30 23:00:10.100),datetime(2017-10-30 23:00:00.900)),\\r\\nmillisecond = datetime_diff('millisecond',datetime(2017-10-30 23:00:00.200100),datetime(2017-10-30 23:00:00.100900)),\\r\\nmicrosecond = datetime_diff('microsecond',datetime(2017-10-30 23:00:00.1009001),datetime(2017-10-30 23:00:00.1008009)),\\r\\nnanosecond = datetime_diff('nanosecond',datetime(2017-10-30 23:00:00.0000000),datetime(2017-10-30 23:00:00.0000007))\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|year|quarter|month|week|day|hour|minute|second|millisecond|microsecond|nanosecond|\\r\\n|---|---|---|---|---|---|---|---|---|---|---|\\r\\n|17|2|13|5|29|2|5|10|100|100|-700|\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/datetime-difffunction\",\"datetime-difffunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"datetime_local_to_utc\",\"Converts local datetime to UTC datetime using [a time-zone specification](timezone.md).\",\"## Syntax\\r\\n\\r\\n`datetime_local_to_utc(`*from*`,`*timezone*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *from* | datetime | &check; | The local datetime to convert.|\\r\\n| *timezone* | string | &check; | The timezone of the desired datetime. The value must be one of the supported [timezones](timezone.md).|\\r\\n\\r\\n## Returns\\r\\n\\r\\nA UTC [datetime](./scalar-data-types/datetime.md) that corresponds the local [datetime](./scalar-data-types/datetime.md) in the specified `timezone`.\",\"> [!div class=\\\"nextstepaction\\\"]\\r\\n> <a href=\\\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA42PTQsCIRCG7/6KubmCseJR6BDRPYhOEWI6bYK7hjsLEf34jMBrMS9zmI935gmOalwSdil7l2wgA8ERUhxRAj0NzFTiNAh2avVOK61WSleBVkZpo5WQwI+Hfu98vEbPJTD4Ob8ZsUTv+u2t5iH/t7RbSr5jPVTizM/sBfggnAIs5OvzsG4G9gtE2dZWo/swiTePz2vZ9QAAAA==\\\" target=\\\"_blank\\\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\ndatatable(local_dt: datetime, tz: string)\\r\\n[ datetime(2020-02-02 20:02:20), 'US/Pacific', \\r\\n  datetime(2020-02-02 20:02:20), 'America/Chicago', \\r\\n  datetime(2020-02-02 20:02:20), 'Europe/Paris']\\r\\n| extend utc_dt = datetime_local_to_utc(local_dt, tz)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|local_dt|tz|utc_dt|\\r\\n|---|---|---|\\r\\n|2020-02-02 20:02:20.0000000|Europe/Paris|2020-02-02 19:02:20.0000000|\\r\\n|2020-02-02 20:02:20.0000000|America/Chicago|2020-02-03 02:02:20.0000000|\\r\\n|2020-02-02 20:02:20.0000000|US/Pacific|2020-02-03 04:02:20.0000000|\\r\\n\\r\\n> [!NOTE] \\r\\n> Normally there is a 1:1 mapping between UTC and local time, however there is a time ambiguity near the DST transition.\\r\\n> Translating from local to UTC and then back to local may produce an hour offset between two local datetime values if the clocks were advanced due to DST.\\r\\n\\r\\n```\\r\\nrange Local from datetime(2022-03-27 01:00:00.0000000) to datetime(2022-03-27 04:00:00.0000000) step 1h\\r\\n| extend UTC=datetime_local_to_utc(Local, 'Europe/Brussels')\\r\\n| extend BackToLocal=datetime_utc_to_local(UTC, 'Europe/Brussels')\\r\\n| extend diff=Local-BackToLocal\\r\\n```\\r\\n\\r\\n|Local|UTC|BackToLocal|diff|\\r\\n|---|---|---|---|\\r\\n|2022-03-27 02:00:00.0000000|2022-03-27 00:00:00.0000000|2022-03-27 01:00:00.0000000|01:00:00|\\r\\n|2022-03-27 01:00:00.0000000|2022-03-27 00:00:00.0000000|2022-03-27 01:00:00.0000000|00:00:00|\\r\\n|2022-03-27 03:00:00.0000000|2022-03-27 01:00:00.0000000|2022-03-27 03:00:00.0000000|00:00:00|\\r\\n|2022-03-27 04:00:00.0000000|2022-03-27 02:00:00.0000000|2022-03-27 04:00:00.0000000|00:00:00|\\r\\n\\r\\n## See also\\r\\n\\r\\n* To convert from UTC to local, see [datetime_utc_to_local()](datetime-utc-to-local-function.md)\\r\\n* List of supported [timezones](timezone.md)\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/datetime-local-to-utc-function\",\"datetime-local-to-utc-function.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"datetime_part\",\"Extracts the requested date part as an integer value.\",\"> **Deprecated aliases:** datepart()\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`datetime_part(`*part*`,`*datetime*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *part* | string | &check; | Measurement of time to extract from *date*. See [possible values](#possible-values-of-part).|\\r\\n| *date* | datetime | &check; | The full date from which to extract *part*. |\\r\\n\\r\\n### Possible values of part\\r\\n\\r\\n* Year\\r\\n* Quarter\\r\\n* Month\\r\\n* week_of_year\\r\\n* Day\\r\\n* DayOfYear\\r\\n* Hour\\r\\n* Minute\\r\\n* Second\\r\\n* Millisecond\\r\\n* Microsecond\\r\\n* Nanosecond\\r\\n\\r\\n## Returns\\r\\n\\r\\nAn integer representing the extracted part.\\r\\n\\r\\n> [!NOTE]\\r\\n> `week_of_year` returns an integer which represents the week number. The week number is calculated from the first week of a year, which is the one that includes the first Thursday.\",'> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA3XPTQqDMBAF4L2nCK4UtCTaVrD0DF13JcGMGKqJTSPF29efRgPG7XvfzDANaMQ0uiNGNWjeQpBgksUExylGmOQ4yXF6yq6Xc5qQ8Ia8TnGhkTcAVdZU0VGlA39K/WhcGEbeux8jcKB/YVwrha73ao6N+QK8HtXTeXPqClkV9m1Ghz0cQ6s/WrdWxtayd7ApXT/gotfgeGHOjfpAKQXbqyXfdjUNP6JWuflSyWO/lsYLKg751i36B5qEtWAcAgAA\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nlet dt = datetime(2017-10-30 01:02:03.7654321); \\r\\nprint \\r\\nyear = datetime_part(\"year\", dt),\\r\\nquarter = datetime_part(\"quarter\", dt),\\r\\nmonth = datetime_part(\"month\", dt),\\r\\nweekOfYear = datetime_part(\"week_of_year\", dt),\\r\\nday = datetime_part(\"day\", dt),\\r\\ndayOfYear = datetime_part(\"dayOfYear\", dt),\\r\\nhour = datetime_part(\"hour\", dt),\\r\\nminute = datetime_part(\"minute\", dt),\\r\\nsecond = datetime_part(\"second\", dt),\\r\\nmillisecond = datetime_part(\"millisecond\", dt),\\r\\nmicrosecond = datetime_part(\"microsecond\", dt),\\r\\nnanosecond = datetime_part(\"nanosecond\", dt)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|year|quarter|month|weekOfYear|day|dayOfYear|hour|minute|second|millisecond|microsecond|nanosecond|\\r\\n|---|---|---|---|---|---|---|---|---|---|---|---|\\r\\n|2017|4|10|44|30|303|1|2|3|765|765432|765432100|\\r\\n\\r\\n> [!NOTE]\\r\\n> `weekofyear` is an obsolete variant of `week_of_year` part. `weekofyear` was not ISO 8601 compliant; the first week of a year was defined as the week with the year\\'s first Wednesday in it.\\r\\n> `week_of_year` is ISO 8601 compliant; the first week of a year is defined as the week with the year\\'s first Thursday in it. [For more information], see [ISO 8601 week dates](https://en.wikipedia.org/wiki/ISO_8601#Week_dates).',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/datetime-partfunction\",\"datetime-partfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"datetime_utc_to_local\",\"Converts UTC [datetime](./scalar-data-types/datetime.md) to local datetime using a [time-zone specification](timezone.md).\",\"## Syntax\\r\\n\\r\\n`datetime_utc_to_local(`*from*`,`*timezone*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *from* | datetime | &check; | The UTC datetime to convert.|\\r\\n| *timezone* | string | &check; | The timezone to convert to. This value must be one of the supported [timezones](timezone.md).|\\r\\n\\r\\n## Returns\\r\\n\\r\\nA local datetime in the *timezone* that corresponds the UTC datetime.\",'> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/kvc9rf7q4d68qcw5sk2d6f.northeurope/databases/MyDatabase?query=H4sIAAAAAAAAAysoyswrUUgpsc3LL9fQ5OWqUUitKEnNS1EoSEzOTMtMjk8pUbBVSEksSS3JzE2NLy1Jji/Jj8/JT07M0Ugp0VFQDw3WD4AoVdfUUUhOzEtKLSpKJKjNsbS4pCgxJzNR3xmqRR3Z9pTMtDSgAUiO0EU2GwCn09zktgAAAA==\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint dt=now()\\r\\n| extend pacific_dt = datetime_utc_to_local(dt, \\'US/Pacific\\'), canberra_dt = datetime_utc_to_local(dt, \\'Australia/Canberra\\')\\r\\n| extend diff = pacific_dt - canberra_dt\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|dt|pacific_dt|canberra_dt|diff|\\r\\n|---|---|---|---|\\r\\n|2022-07-11 22:18:48.4678620|2022-07-11 15:18:48.4678620|2022-07-12 08:18:48.4678620|-17:00:00|\\r\\n\\r\\n## See also\\r\\n\\r\\n* To convert a datetime from local to UTC, see [datetime_local_to_utc()](datetime-local-to-utc-function.md).\\r\\n* [Timezones](timezone.md)',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/datetime-utc-to-local-function\",\"datetime-utc-to-local-function.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"dayofmonth\",\"Returns an integer representing the day number of the given datetime.\",\"## Syntax\\r\\n\\r\\n`dayofmonth(`*date*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *date* | datetime | &check; | The datetime used to extract the day number.|\\r\\n\\r\\n## Returns\\r\\n\\r\\nAn integer representing the day number of the given datetime.\",'> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/kvc9rf7q4d68qcw5sk2d6f.northeurope/databases/MyDatabase?query=H4sIAAAAAAAAAysoyswrUUhJrMxPy83PK8nQSEksSS3JzE3VMDIwNNU1NNI1NNHUBAAj3TtIJgAAAA==\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\ndayofmonth(datetime(2015-12-14))\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|result|\\r\\n|--|\\r\\n|14|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/dayofmonthfunction\",\"dayofmonthfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"dayofweek\",\"Returns the integer number of days since the preceding Sunday, as a `timespan`.\",\"## Syntax\\r\\n\\r\\n`dayofweek(`*date*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *date* | datetime | &check; | The datetime for which to determine the day of week.|\\r\\n\\r\\n## Returns\\r\\n\\r\\nThe `timespan` since midnight at the beginning of the preceding Sunday, rounded down to an integer number of days.\",\"```\\r\\ndayofweek(datetime(1947-11-30 10:00:05))  // time(0.00:00:00), indicating Sunday\\r\\ndayofweek(datetime(1970-05-11))           // time(1.00:00:00), indicating Monday\\r\\n```\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/dayofweekfunction\",\"dayofweekfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"dayofyear\",\"Returns the integer number represents the day number of the given year.\",\"## Syntax\\r\\n\\r\\n`dayofyear(`*date*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *date* | datetime | &check; | The datetime for which to determine the day number.|\\r\\n\\r\\n## Returns\\r\\n\\r\\nThe day number of the given year.\",'> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/kvc9rf7q4d68qcw5sk2d6f.northeurope/databases/MyDatabase?query=H4sIAAAAAAAAAysoyswrUUhJrMxPq0xNLNJISSxJLcnMTdUwMjA01TU00jU00dQEAOQ8/cIlAAAA\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\ndayofyear(datetime(2015-12-14))\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|result|\\r\\n|--|\\r\\n|348|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/dayofyearfunction\",\"dayofyearfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"dcount\",\"Calculates an estimate of the number of distinct values that are taken by a scalar expression in the summary group.\",\"> [!NOTE]\\r\\n> The `dcount()` aggregation function is primarily useful for estimating the cardinality of huge sets. It trades accuracy for performance, and may return a result that varies between executions. The order of inputs may have an effect on its output.\\r\\n\\r\\n[!INCLUDE [data-explorer-agg-function-summarize-note](../../includes/data-explorer-agg-function-summarize-note.md)]\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`dcount` `(`*expr*[`,` *accuracy*]`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *expr*| string | &check; | The input whose distinct values are to be counted. |\\r\\n| *accuracy* | int |   | The value that defines the requested estimation accuracy. The default value is `1`. See [Estimation accuracy](#estimation-accuracy) for supported values. |\\r\\n\\r\\n## Returns\\r\\n\\r\\nReturns an estimate of the number of distinct values of *expr* in the group.\",'This example shows how many types of storm events happened in each state.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAwsuyS/KdS1LzSsp5qpRKC7NzU0syqxKVXDJTEtLLQIKQ+RsU5LzS/NKNMC8kMqCVE2FpEqF4JLEklSgtvyilNQikACaLgBDbD8AXQAAAA==\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nStormEvents\\r\\n| summarize DifferentEvents=dcount(EventType) by State\\r\\n| order by DifferentEvents\\r\\n```\\r\\n\\r\\nThe results table shown includes only the first 10 rows.\\r\\n\\r\\n| State                | DifferentEvents |\\r\\n| -------------------- | --------------- |\\r\\n| TEXAS                | 27              |\\r\\n| CALIFORNIA           | 26              |\\r\\n| PENNSYLVANIA         | 25              |\\r\\n| GEORGIA              | 24              |\\r\\n| ILLINOIS             | 23              |\\r\\n| MARYLAND             | 23              |\\r\\n| NORTH CAROLINA       | 23              |\\r\\n| MICHIGAN             | 22              |\\r\\n| FLORIDA              | 22              |\\r\\n| OREGON               | 21              |\\r\\n| KANSAS               | 21              |\\r\\n| ... | ... |\\r\\n\\r\\n## Estimation accuracy\\r\\n\\r\\n[!INCLUDE [data-explorer-estimation-accuracy](../../includes/data-explorer-estimation-accuracy.md)]',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/dcount-aggfunction\",\"dcount-aggfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"dcount_hll\",\"Calculates the distinct count from results generated by [hll](hll-aggfunction.md) or [hll_merge](hll-merge-aggfunction.md).\",\"Read about the [underlying algorithm (*H*yper*L*og*L*og) and estimation accuracy](#estimation-accuracy).\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`dcount_hll(`*hll*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n|*hll*|string|&check;| An expression generated by [hll](hll-aggfunction.md) or [hll-merge](hll-merge-aggfunction.md) to be used to find the distinct count.|\\r\\n\\r\\n## Returns\\r\\n\\r\\nReturns the distinct count of each value in *hll*.\",'The following example shows the distinct count hll merged results.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAwsuyS/KdS1LzSsp5uWqUSguzc1NLMqsSlXIyMkJSi1WsAUxNFwScxPTUwOK8gtSi0oqNRWSKhWSMvM0gksSi0pCMnNTdQwNcjUx9PumFqWnpkCMiM8FcTQgpoKVFhTlZ6UmlyikJOeX5pXEg6yB69EEAKm9wyCXAAAA\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nStormEvents\\r\\n| summarize hllRes = hll(DamageProperty) by bin(StartTime,10m)\\r\\n| summarize hllMerged = hll_merge(hllRes)\\r\\n| project dcount_hll(hllMerged)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|dcount_hll_hllMerged|\\r\\n|---|\\r\\n|315|\\r\\n\\r\\n## Estimation accuracy\\r\\n\\r\\n[!INCLUDE [data-explorer-estimation-accuracy](../../includes/data-explorer-estimation-accuracy.md)]',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/dcount-hllfunction\",\"dcount-hllfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"dcount_intersect\",\"Calculates intersection between N sets based on `hll` values (N in range of [2..16]), and returns N `dcount` values. The plugin is invoked with the [`evaluate`](evaluateoperator.md) operator.\",\"## Syntax\\r\\n\\r\\n*T* `| evaluate` `dcount_intersect(`*hll_1*, *hll_2*, [`,` *hll_3*`,` ...]`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n|*T*|string|&check;| The input tabular expression. |\\r\\n|*hll_i*| The values of set S<sub>i<\\/sub> calculated with the [`hll()`](./hll-aggfunction.md) function.|\\r\\n\\r\\n## Returns\\r\\n\\r\\nReturns a table with N `dcount` values (per column, representing set intersections).\\r\\nColumn names are s0, s1, ... (until n-1).\\r\\n\\r\\nGiven sets S<sub>1<\\/sub>, S<sub>2<\\/sub>, .. S<sub>n<\\/sub> return values will be representing distinct counts of:  \\r\\nS<sub>1<\\/sub>,  \\r\\nS<sub>1<\\/sub> \\u2229 S<sub>2<\\/sub>,  \\r\\nS<sub>1<\\/sub> \\u2229 S<sub>2<\\/sub> \\u2229 S<sub>3<\\/sub>,  \\r\\n... ,  \\r\\nS<sub>1<\\/sub> \\u2229 S<sub>2<\\/sub> \\u2229 ... \\u2229 S<sub>n<\\/sub>\",'> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA4WSQWvjMBCF7/kV71JqgxbbMc4hkFMpuwvd/oWgypNEu7IUJDkNpT++mrh2nUK7PomZeU/6nqco8JMseRkJtu+eyAfsvOtQITpUZbnw0u4J5+sqQqQjqsUr6BzJttDh/kQWG2Rn3GCJzQZlLlL5j2vrsVxflZux3AzlRVHgThrVG36McrbVUTsrDX49POAkTU8BmXWpGQ8y4ra8TUbQVpm+pfQEC5LqALdLfeogA2Q7eVz0AsHhmfCsjUHon6KXKkJH8JU+Tzih7zrp9QvhYMyWBqZ0zLTeZQOkwFlcKJa5WGD2saIbcD8UzP8/RfNZ0cwU4Fx+25P7x9yEo+n3CfUSgRrjCmiV621isQkkkGLqMN3D/4kD4GCHwe00mI2gYgKYTg1HcvTub5oDzzy+r8gGocQPVGJOg/TQ7z7em4J3A005i4F9t9K2Y3ah+uycfPeqzZaizlN/JTgHTzvn1zPfVWpVq698xwNHHZZ8wZWvaHLepbr88Kb1u3FdJk39Bu22I/gpAwAA\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\n// Generate numbers from 1 to 100\\r\\nrange x from 1 to 100 step 1\\r\\n| extend isEven = (x % 2 == 0), isMod3 = (x % 3 == 0), isMod5 = (x % 5 == 0)\\r\\n// Calculate conditional HLL values (note that \\'0\\' is included in each of them as additional value, so we will subtract it later)\\r\\n| summarize hll_even = hll(iif(isEven, x, 0), 2),\\r\\n            hll_mod3 = hll(iif(isMod3, x, 0), 2),\\r\\n            hll_mod5 = hll(iif(isMod5, x, 0), 2) \\r\\n// Invoke the plugin that calculates dcount intersections         \\r\\n| evaluate dcount_intersect(hll_even, hll_mod3, hll_mod5)\\r\\n| project evenNumbers = s0 - 1,             //                             100 / 2 = 50\\r\\n          even_and_mod3 = s1 - 1,           // gcd(2,3) = 6, therefor:     100 / 6 = 16\\r\\n          even_and_mod3_and_mod5 = s2 - 1   // gcd(2,3,5) is 30, therefore: 100 / 30 = 3 \\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|evenNumbers|even_and_mod3|even_and_mod3_and_mod5|\\r\\n|---|---|---|\\r\\n|50|16|3|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/dcount-intersect-plugin\",\"dcount-intersect-plugin.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"dcountif\",\"Estimates the number of distinct values of *expr* for rows in which *predicate* evaluates to `true`.\\r\\n[!INCLUDE [data-explorer-agg-function-summarize-note](../../includes/data-explorer-agg-function-summarize-note.md)]\",\"## Syntax\\r\\n\\r\\n`dcountif` `(`*expr*, *predicate*, [`,` *accuracy*]`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *expr* | string | &check; | The expression used for the aggregation calculation. |\\r\\n| *predicate* | string | &check; | The expression used to filter rows. |\\r\\n| *accuracy* | int |  | The control between speed and accuracy. If unspecified, the default value is `1`. See [Estimation accuracy](#estimation-accuracy) for supported values. |\\r\\n\\r\\n## Returns\\r\\n\\r\\nReturns an estimate of the number of distinct values of *expr* for rows in which *predicate* evaluates to `true`.\\r\\n\\r\\n> [!TIP]\\r\\n> `dcountif()` may return an error in cases where all, or none of the rows pass the `Predicate` expression.\",'This example shows how many types of fatal storm events happened in each state.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA22MMQ6DMBAE+7ziShAUfAAqEyk1+cCBz8ISttH5AIHy+BhoKXc0O50Edu1KXuLrB3FxDtkeBMoaQ5zwGwWnW6j1EBYv1mTX/u4zlZkilDEqyzQIFHDPj9cXyJsqh36HTlAo9bcxNR/b0ECVhMCa+Hw8OX+LHx0UrAAAAA==\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nStormEvents\\r\\n| summarize DifferentFatalEvents=dcountif(EventType,(DeathsDirect + DeathsIndirect)>0) by State\\r\\n| where DifferentFatalEvents > 0\\r\\n| order by DifferentFatalEvents \\r\\n```\\r\\n\\r\\nThe results table shown includes only the first 10 rows.\\r\\n\\r\\n| State          | DifferentFatalEvents |\\r\\n| -------------- | -------------------- |\\r\\n| CALIFORNIA     | 12                   |\\r\\n| TEXAS          | 12                   |\\r\\n| OKLAHOMA       | 10                   |\\r\\n| ILLINOIS       | 9                    |\\r\\n| KANSAS         | 9                    |\\r\\n| NEW YORK       | 9                    |\\r\\n| NEW JERSEY     | 7                    |\\r\\n| WASHINGTON     | 7                    |\\r\\n| MICHIGAN       | 7                    |\\r\\n| MISSOURI       | 7                    |\\r\\n| ... | ... |\\r\\n\\r\\n## Estimation accuracy\\r\\n\\r\\n[!INCLUDE [data-explorer-estimation-accuracy](../../includes/data-explorer-estimation-accuracy.md)]',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/dcountif-aggfunction\",\"dcountif-aggfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"degrees\",\"Converts angle value in radians into value in degrees, using the formula `degrees = (180 / PI ) * angle_in_radians`.\",\"## Syntax\\r\\n\\r\\n`degrees(`*radians*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *radians* | real | &check; | The angle in radians to convert to degrees. |\\r\\n\\r\\n## Returns\\r\\n\\r\\nThe corresponding angle in degrees for an angle specified in radians.\",'> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAysoyswrUUhJTS9KTS02ULCFMTUKMjU09U00dWAChmhyWoZ6pghZIyRZA00AiS3HB1UAAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint degrees0 = degrees(pi()/4), degrees1 = degrees(pi()*1.5), degrees2 = degrees(0)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|degrees0|degrees1|degrees2|\\r\\n|---|---|---|\\r\\n|45|270|0|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/degreesfunction\",\"degreesfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"diffpatterns\",\"Compares two data sets of the same structure and finds patterns of discrete attributes (dimensions) that characterize differences between the two data sets. The plugin is invoked with the [`evaluate`](evaluateoperator.md) operator.\",'`Diffpatterns` was developed to help analyze failures (for example, by comparing failures to non-failures in a given time frame), but can potentially find differences between any two data sets of the same structure.\\r\\n\\r\\n> [!NOTE]\\r\\n> `diffpatterns` aims to find significant patterns (that capture portions of the data difference between the sets) and isn\\'t meant for row-by-row differences.\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`T | evaluate diffpatterns(`*SplitColumn*`,` *SplitValueA*`,` *SplitValueB* [`,` *WeightColumn*`,`*Threshold*`,` *MaxDimensions*`,`\\u00a0*CustomWildcard*`,` ...]`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n|Name|Type|Required|Description|\\r\\n|--|--|--|--|\\r\\n|*SplitColumn*|string|&check;|The column name that tells the algorithm how to split the query into data sets. According to the specified values for the *SplitValueA* and *SplitValueB* arguments, the algorithm splits the query into two data sets, \\u201cA\\u201d and \\u201cB\\u201d, and analyzes the differences between them. As such, the split column must have at least two distinct values.|\\r\\n|*SplitValueA*|string|&check;|A string representation of one of the values in the *SplitColumn* that was specified. All the rows that have this value in their *SplitColumn* considered as data set \\u201cA\\u201d.|\\r\\n|*SplitValueB*|string|&check;|A string representation of one of the values in the *SplitColumn* that was specified. All the rows that have this value in their *SplitColumn* considered as data set \\u201cB\\u201d.|\\r\\n|*WeightColumn*|string||The column used to consider each row in the input according to the specified weight. Must be a name of a numeric column, such as `int`, `long`, `real`. By default each row has a weight of \\'1\\'. To use the default value, input the tilde: `~`. A common usage of a weight column is to take into account sampling or bucketing/aggregation of the data that is already embedded into each row.<br/><br/>Example: `T | extend splitColumn= iff(request_responseCode == 200, \"Success\" , \"Failure\") | evaluate diffpatterns(splitColumn, \"Success\",\"Failure\", sample_Count)`|\\r\\n|*Threshold*|long||A long in the range of 0.015 to 1. This value sets the minimal pattern ratio difference between the two sets. The default is 0.05. To use the default value, input the tilde: `~`.<br/><br/>Example:  `T | extend splitColumn = iff(request-responseCode == 200, \"Success\" , \"Failure\") | evaluate diffpatterns(splitColumn, \"Success\",\"Failure\", \"~\", 0.04)`|\\r\\n|*MaxDimensions*|int||Sets the maximum number of uncorrelated dimensions per result pattern. By specifying a limit, you decrease the query runtime. The default is unlimited. To use the default value, input the tilde: `~`.<br/><br/>Example:  `T | extend splitColumn = iff(request-responseCode == 200, \"Success\" , \"Failure\") | evaluate diffpatterns(splitColumn, \"Success\",\"Failure\", \"~\", \"~\", 3)`|\\r\\n|*CustomWildcard*|string||Sets the wildcard value for a specific type in the result table that will indicate that the current pattern doesn\\'t have a restriction on this column. The default is null, except for string columns for which the default is an empty string. If the default is a viable value in the data, a different wildcard value should be used. For example, `*`. To use the default value, input the tilde: `~`.<br/><br/>Example: `T | extend splitColumn = iff(request-responseCode == 200, \"Success\" , \"Failure\") | evaluate diffpatterns(splitColumn, \"Success\",\"Failure\", \"~\", \"~\", \"~\", int(-1), double(-1), long(0), datetime(1900-1-1))`|\\r\\n\\r\\n## Returns\\r\\n\\r\\n`Diffpatterns` returns a small set of patterns that capture different portions of the data in the two sets (that is, a pattern capturing a large percentage of the rows in the first data set and low percentage of the rows in the second set). Each pattern is represented by a row in the results.\\r\\n\\r\\nThe result of `diffpatterns` returns the following columns:\\r\\n\\r\\n* SegmentId: the identity assigned to the pattern in the current query (note: IDs aren\\'t guaranteed to be the same in repeating queries).\\r\\n* CountA: the number of rows captured by the pattern in Set A (Set A is the equivalent of `where tostring(splitColumn) == SplitValueA`).\\r\\n* CountB: the number of rows captured by the pattern in Set B (Set B is the equivalent of `where tostring(splitColumn) == SplitValueB`).\\r\\n* PercentA: the percentage of rows in Set A captured by the pattern (100.0 * CountA / count(SetA)).\\r\\n* PercentB: the percentage of rows in Set B captured by the pattern (100.0 * CountB / count(SetB)).\\r\\n* PercentDiffAB: the absolute percentage point difference between A and B (|PercentA - PercentB|) is the main measure of significance of patterns in describing the difference between the two sets.\\r\\n* Rest of the columns: are the original schema of the input and describe the pattern, each row (pattern) reresents the intersection of the non-wildcard values of the columns (equivalent of `where col1==val1 and col2==val2 and ... colN=valN` for each non-wildcard value in the row).\\r\\n\\r\\nFor each pattern, columns that aren\\'t set in the pattern (that is, without restriction on a specific value) will contain a wildcard value, which is null by default. See in the Arguments section below how wildcards can be manually changed.\\r\\n\\r\\n* Note: the patterns are often not distinct. They may be overlapping, and usually don\\'t cover all the original rows. Some rows may not fall under any pattern.\\r\\n\\r\\n> [!TIP]\\r\\n>\\r\\n> * Use [where](./whereoperator.md) and [project](./projectoperator.md) in the input pipe to reduce the data to just what you\\'re interested in.\\r\\n> * When you find an interesting row, you might want to drill into it further by adding its specific values to your `where` filter.','> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAzVNvQ6CYAzcfYoLE0QHGBxxUXcTeIEvUATj95NSUBIf3n6gQ9u79npXiWd7ncnJiN0Hr56YYL2T3ncLGU4rMSz1YClDWeKoGnoLuRYXY82dUGLounQjZ/ZhxP53uikjlgUn5Dig0Moz/Q/sH9QI1FlIl2t6vYSIKz9xE8Fm8Z+rcYyezXOKX62GBiNC7Mb0r03yRFuRIPsCQuCK6dYAAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nStormEvents \\r\\n| where monthofyear(StartTime) == 5\\r\\n| extend Damage = iff(DamageCrops + DamageProperty > 0 , 1 , 0)\\r\\n| project State , EventType , Source , Damage, DamageCrops\\r\\n| evaluate diffpatterns(Damage, \"0\", \"1\" )\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|SegmentId|CountA|CountB|PercentA|PercentB|PercentDiffAB|State|EventType|Source|DamageCrops|\\r\\n|---|---|---|---|---|---|---|---|---|---|\\r\\n|0|2278|93|49.8|7.1|42.7||Hail||0|\\r\\n|1|779|512|17.03|39.08|22.05||Thunderstorm Wind|||\\r\\n|2|1098|118|24.01|9.01|15|||Trained Spotter|0|\\r\\n|3|136|158|2.97|12.06|9.09|||Newspaper||\\r\\n|4|359|214|7.85|16.34|8.49||Flash Flood|||\\r\\n|5|50|122|1.09|9.31|8.22|IOWA||||\\r\\n|6|655|279|14.32|21.3|6.98|||Law Enforcement||\\r\\n|7|150|117|3.28|8.93|5.65||Flood|||\\r\\n|8|362|176|7.91|13.44|5.52|||Emergency Manager||\\r\\n\\r\\n---\\r\\n\\r\\n> [!IMPORTANT]\\r\\n> The content below is Microsoft confidential(not available in the [public site](https://docs.microsoft.com/en-us/azure/data-explorer/))\\r\\n\\r\\n# diffpatterns plugin - Internal\\r\\n\\r\\nIf you have questions about diffpatterns or other ML related workflows in Kusto you can post them on the following DL: [KustoML](mailto:kustoML@microsoft.com).',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/diffpatternsplugin\",\"diffpatternsplugin.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"diffpatterns_text\",\"Compares two data sets of string values and finds text patterns that characterize differences between the two data sets. The plugin is invoked with the [`evaluate`](evaluateoperator.md) operator.\",\"The `diffpatterns_text` returns a set of text patterns that capture different portions of the data in the two sets. For example, a pattern capturing a large percentage of the rows when the condition is `true` and low percentage of the rows when the condition is `false`. The patterns are built from consecutive tokens separated by white space, with a token from the text column or a `*` representing a wildcard. Each pattern is represented by a row in the results.\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`T | evaluate diffpatterns_text(`*TextColumn*, *BooleanCondition* [, *MinTokens*, *Threshold* , *MaxTokens*]`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *TextColumn* | string | &check; | The text column to analyze. |\\r\\n| *BooleanCondition* | string | &check; | An expression that evaluates to a boolean value. The algorithm splits the query into the two data sets to compare based on this expression.|\\r\\n| *MinTokens* | int | | An integer value between 0 and 200 that represents the minimal number of non-wildcard tokens per result pattern. The default is 1. |\\r\\n| *Threshold* | decimal | | A decimal value between 0.015 and 1 that sets the minimal pattern ratio difference between the two sets. Default is 0.05. See [diffpatterns](diffpatternsplugin.md).|\\r\\n| *MaxTokens* | int | | An integer value between 0 and 20 that sets the maximal number of tokens per result pattern, specifying a lower limit decreases the query runtime.|\\r\\n\\r\\n## Returns\\r\\n\\r\\nThe result of diffpatterns_text returns the following columns:\\r\\n\\r\\n* Count_of_True: The number of rows matching the pattern when the condition is `true`.\\r\\n* Count_of_False: The number of rows matching the pattern when the condition is `false`.\\r\\n* Percent_of_True: The percentage of rows matching the pattern from the rows when the condition is `true`.\\r\\n* Percent_of_False: The percentage of rows matching the pattern from the rows when the condition is `false`.\\r\\n* Pattern: The text pattern containing tokens from the text string and '`*`' for wildcards.\\r\\n\\r\\n> [!NOTE]\\r\\n> The patterns aren't necessarily distinct and may not provide full coverage of the data set. The patterns may be overlapping and some rows may not match any pattern.\",'The following example uses data from the StormEvents table in the help cluster. To access this data, sign in to [https://dataexplorer.azure.com/clusters/help/databases/Samples](https://dataexplorer.azure.com/clusters/help/databases/Samples). In the left menu, browse to **help** > **Samples** > **Tables** > **Storm_Events**.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA43OvQrCQBAE4F7wHdarEgiIdoKxiWltErCUhdt4B/cTNptowIc3sbBIIU45Ax9TSWRfDhSkgznr1QsehpjgU16QGcUOBJsclAIMGnwMYmIzEnJSCbLU1lMKJ9j9mo9wWNj12BLkE3vm2N+NKIi8WMqnMHmCIjq9vdpJL4x1Ts0SDeh6FAJtm6ZFEeLQ3YSekpSt7aKm7/nsTzaDffoGjOv6LBEBAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nStormEvents     \\r\\n| where EventNarrative != \"\" and monthofyear(StartTime) > 1 and monthofyear(StartTime) < 9\\r\\n| where EventType == \"Drought\" or EventType == \"Extreme Cold/Wind Chill\"\\r\\n| evaluate diffpatterns_text(EpisodeNarrative, EventType == \"Extreme Cold/Wind Chill\", 2)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|Count_of_True|Count_of_False|Percent_of_True|Percent_of_False|Pattern|\\r\\n|---|---|---|---|---|\\r\\n|11|0|6.29|0|Winds shifting northwest in * wake * a surface trough brought heavy lake effect snowfall downwind * Lake Superior from|\\r\\n|9|0|5.14|0|Canadian high pressure settled * * region * produced the coldest temperatures since February * 2006. Durations * freezing temperatures|\\r\\n|0|34|0|6.24|* * * * * * * * * * * * * * * * * * West Tennessee,|\\r\\n|0|42|0|7.71|* * * * * * caused * * * * * * * * across western Colorado. *|\\r\\n|0|45|0|8.26|* * below normal *|\\r\\n|0|110|0|20.18|Below normal *|\\r\\n\\r\\n---\\r\\n\\r\\n> [!IMPORTANT]\\r\\n> The content below is Microsoft confidential(not available in the [public site](https://docs.microsoft.com/en-us/azure/data-explorer/))\\r\\n\\r\\n# diffpatterns_text plugin - Internal\\r\\n\\r\\nIf you have questions about diffpatterns_text or other ML related workflows in Kusto you can post them on the following DL: [KustoML](mailto:kustoML@microsoft.com).',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/diffpatterns-textplugin\",\"diffpatterns-textplugin.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.OperatorToken,\"distinct\",\"Produces a table with the distinct combination of the provided columns of the input table.\",\"## Syntax\\r\\n\\r\\n*T* `| distinct` *ColumnName*`[,`*ColumnName2*`, ...]`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *ColumnName*| string | &check;| The column name to search for distinct values. |\\r\\n\\r\\n> [!NOTE]\\r\\n> The `distinct` operator supports providing an asterisk `*` as the group key to denote all columns, which is helpful for wide tables.\",'Shows distinct combination of states and type of events that led to over 45 direct injuries.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAwsuyS/KdS1LzSsp5uWqUSjPSC1KVfDMyyotykwtdsksSk0uUbBTMDEFSaZkFpdk5gEFgksSS1J1FMDaQioLUgH0ldkdRQAAAA==\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nStormEvents\\r\\n| where InjuriesDirect > 45\\r\\n| distinct State, EventType\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|State|EventType|\\r\\n|--|--|\\r\\n|TEXAS|Winter Weather|\\r\\n|KANSAS|Tornado|\\r\\n|MISSOURI|Excessive Heat|\\r\\n|OKLAHOMA|Thunderstorm Wind|\\r\\n|OKLAHOMA|Excessive Heat|\\r\\n|ALABAMA|Tornado|\\r\\n|ALABAMA|Heat|\\r\\n|TENNESSEE|Heat|\\r\\n|CALIFORNIA|Wildfire|\\r\\n\\r\\n## See also\\r\\n\\r\\nIf the group by keys are of high cardinalities, try `summarize by ...` with the [shuffle strategy](shufflequery.md).',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/distinctoperator\",\"distinctoperator.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"dynamic_to_json\",\"Converts a scalar value of type `dynamic` to a canonical `string` representation.\",\"## Syntax\\r\\n\\r\\n`dynamic_to_json(`*expr*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n|Name|Type|Required|Description|\\r\\n|--|--|--|--|\\r\\n| *expr* | dynamic | &check; | The expression to convert to string representation.|\\r\\n\\r\\n## Returns\\r\\n\\r\\nReturns a canonical representation of the input as a value of type `string`,\\r\\naccording to the following rules:\\r\\n\\r\\n* If the input is a scalar value of type other than `dynamic`,\\r\\n   the output is the application of `tostring()` to that value.\\r\\n* If the input is an array of values, the output is composed of the\\r\\n   characters `[`, `,`, and `]` interspersed with the canonical representation\\r\\n   described here of each array element.\\r\\n* If the input is a property bag, the output is composed of the characters\\r\\n   `{`, `,`, and `}` interspersed with the colon (`:`)-delimited name/value pairs\\r\\n   of the properties. The pairs are sorted by the names, and the values\\r\\n   are in the canonical representation described here of each array element.\",\"> [!div class=\\\"nextstepaction\\\"]\\r\\n> <a href=\\\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA8tJLVFISkw3VLBVSKnMS8zNTI4vyY/PKs7P0+BSgAlpVAPZCgrqkYYG6lZwsVpNHYhwhIW6FZpSoGiysbqVoQ6MlwJUYwrnJZqoW5mBOXBDXAyByg1NoDxHEM8IynECcmBsZyDbGK4IaEy0oamOgqExEFvEctVqalpz5UC8ZESUl7C7Hew+HTw+QXU7hkOwOBbZE+BwVMAMSKiv4YHBBbID6KOCosy8EgXHolTXwtLEHFtIfNmCPamjEJRaXJpTAhYEAM5EMCHNAQAA\\\" target=\\\"_blank\\\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nlet bag1 = dynamic_to_json(\\r\\n  dynamic({\\r\\n    'Y10':dynamic({}),\\r\\n    'X8': dynamic({\\r\\n      'c3':1,\\r\\n      'd8':5,\\r\\n      'a4':6\\r\\n    }),\\r\\n    'D1':114,\\r\\n    'A1':12,\\r\\n    'B1':2,\\r\\n    'C1':3,\\r\\n    'A14':[15, 13, 18]\\r\\n}));\\r\\nlet bag2 = dynamic_to_json(\\r\\n  dynamic({\\r\\n    'X8': dynamic({\\r\\n      'a4':6,\\r\\n      'c3':1,\\r\\n      'd8':5\\r\\n    }),\\r\\n    'A14':[15, 13, 18],\\r\\n    'C1':3,\\r\\n    'B1':2,\\r\\n    'Y10': dynamic({}),\\r\\n    'A1':12, 'D1':114\\r\\n  }));\\r\\nprint AreEqual=bag1 == bag2, Result=bag1\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|AreEqual|Result|\\r\\n|---|---|\\r\\n|true|{\\\"A1\\\":12,\\\"A14\\\":[15,13,18],\\\"B1\\\":2,\\\"C1\\\":3,\\\"D1\\\":114,\\\"X8\\\":{\\\"a4\\\":6,\\\"c3\\\":1,\\\"d8\\\":5},\\\"Y10\\\":{}}|\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/dynamic-to-json-function\",\"dynamic-to-json-function.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"endofday\",\"Returns the end of the day containing the date, shifted by an offset, if provided.\",\"## Syntax\\r\\n\\r\\n`endofday(`*date* [, *offset*]`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *date* | datetime | &check;| The date to find the end of. |\\r\\n| *offset* | int | | The number of offset days from *date*. Default is 0. |\\r\\n\\r\\n## Returns\\r\\n\\r\\nA datetime representing the end of the day for the given *date* value, with the *offset*, if specified.\",'> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAy3MMQqAMAxG4d1T/GMLCo2LIDh6kGITUbCRmkXw8FYQvuUtr8S8MlTkYoMUPdARTEG4jE9Qgwdn0Z0XQ4r3nBMmcE4qtVyKxrYd7PpAQxeoAoXxM/j23/oXglVNRWQAAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\n  range offset from -1 to 1 step 1\\r\\n | project dayEnd = endofday(datetime(2017-01-01 10:10:17), offset) \\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|dayEnd|\\r\\n|---|\\r\\n|2016-12-31 23:59:59.9999999|\\r\\n|2017-01-01 23:59:59.9999999|\\r\\n|2017-01-02 23:59:59.9999999|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/endofdayfunction\",\"endofdayfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"endofmonth\",\"Returns the end of the month containing the date, shifted by an offset, if provided.\",\"## Syntax\\r\\n\\r\\n`endofmonth(`*date* [, *offset*]`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *date* | datetime | &check;| The date used to find the end of the month. |\\r\\n| *offset* | int | | The number of offset months from *date*. Default is 0. |\\r\\n\\r\\n## Returns\\r\\n\\r\\nA datetime representing the end of the month for the given *date* value, with the *offset*, if specified.\",'> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAy3MOwqAMBBF0d5VvFJBIWMjCJYuJJgZP5CMJFO6eD8Ip7nNzT6tDBUpbJCsER3BFIRifIIqXDizHrwYoibb5hQwgVNQ+boO3tj2yHXvaOgcPUBufA1N+6+bGwOSY4VoAAAA\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\n  range offset from -1 to 1 step 1\\r\\n | project monthEnd = endofmonth(datetime(2017-01-01 10:10:17), offset) \\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|monthEnd|\\r\\n|---|\\r\\n|2016-12-31 23:59:59.9999999|\\r\\n|2017-01-31 23:59:59.9999999|\\r\\n|2017-02-28 23:59:59.9999999|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/endofmonthfunction\",\"endofmonthfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"endofweek\",\"Returns the end of the week containing the date, shifted by an offset, if provided.\",\"Last day of the week is considered to be a Saturday.\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`endofweek(`*date* [, *offset*]`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *date* | datetime | &check;| The date used to find the end of the week. |\\r\\n| *offset* | int | | The number of offset weeks from *date*. Default is 0. |\\r\\n\\r\\n## Returns\\r\\n\\r\\nA datetime representing the end of the week for the given *date* value, with the *offset*, if specified.\",'> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAy3MMQqAMBBE0d5TTKmgkLURBEsPImYiKmYlLth4eA0Ir/nNT1NcCA3hoiEkPdAITCG4jCekwIMz6cbZcJP7GD0GMHoNOUs/GW09WLZOusbJB+L6rKvqf1y9enVBc2YAAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\n  range offset from -1 to 1 step 1\\r\\n | project weekEnd = endofweek(datetime(2017-01-01 10:10:17), offset)  \\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|weekEnd|\\r\\n|---|\\r\\n|2016-12-31 23:59:59.9999999|\\r\\n|2017-01-07 23:59:59.9999999|\\r\\n|2017-01-14 23:59:59.9999999|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/endofweekfunction\",\"endofweekfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"endofyear\",\"Returns the end of the year containing the date, shifted by an offset, if provided.\",\"## Syntax\\r\\n\\r\\n`endofyear(`*date* [, *offset*]`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *date* | datetime | &check;| The date used to find the end of the year. |\\r\\n| *offset* | int | | The number of offset years from *date*. Default is 0. |\\r\\n\\r\\n## Returns\\r\\n\\r\\nA datetime representing the end of the year for the given *date* value, with the &*offset*, if specified.\",'> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAy3MMQqAMAxG4d1T/GMLFhoXQXD0IMUmomAjNYvg4VUQvuUtr6ayMFTkZINU3REIpiCcxgeowY2j6saz4eJUp5IxgktW+dLlZGzrzq6L1IdIL1AcPr1v/7F/AESu49RmAAAA\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\n  range offset from -1 to 1 step 1\\r\\n | project yearEnd = endofyear(datetime(2017-01-01 10:10:17), offset) \\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|yearEnd|\\r\\n|---|\\r\\n|2016-12-31 23:59:59.9999999|\\r\\n|2017-12-31 23:59:59.9999999|\\r\\n|2018-12-31 23:59:59.9999999|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/endofyearfunction\",\"endofyearfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.OperatorToken,\"endswith\",\"Filters a record set for data with a case-insensitive ending string.\",\"[!INCLUDE [endswith-operator-comparison](../../includes/endswith-operator-comparison.md)]\\r\\n\\r\\n## Performance tips\\r\\n\\r\\n[!INCLUDE [performance-tip-note](../../includes/performance-tip-note.md)]\\r\\n\\r\\nFor faster results, use the case-sensitive version of an operator. For example, use `endswith_cs` instead of `endswith`.\\r\\n\\r\\n## Syntax\\r\\n\\r\\n*T* `|` `where` *col* `endswith` `(`*expression*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *T* | string | &check;| The tabular input whose records are to be filtered. |\\r\\n| *col* | string | &check; | The column to filter. |\\r\\n| *expression* | string | &check; | The expression used to filter. |\\r\\n\\r\\n## Returns\\r\\n\\r\\nRows in *T* for which the predicate is `true`.\",'> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAwsuyS/KdS1LzSsp5qpRKC7NzU0syqxKVYAI2Sbnl+aVaGgqJFUqBJcklqQC1ZRnpBalQngKqXkpxeWZJRkKSsWJxUpwSYhmBTsFQwOgWEFRflZqcglEiw5UEgBi2Q64eAAAAA==\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nStormEvents\\r\\n| summarize Events=count() by State\\r\\n| where State endswith \"sas\"\\r\\n| where Events > 10\\r\\n| project State, Events\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|State|Events|\\r\\n|--|--|\\r\\n|KANSAS|3166|\\r\\n|ARKANSAS|1028|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/endswith-operator\",\"endswith-operator.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.OperatorToken,\"endswith_cs\",\"Filters a record set for data with a case-sensitive ending string.\",\"[!INCLUDE [endswith-operator-comparison](../../includes/endswith-operator-comparison.md)]\\r\\n\\r\\n## Performance tips\\r\\n\\r\\n[!INCLUDE [performance-tip-note](../../includes/performance-tip-note.md)]\\r\\n\\r\\n## Syntax\\r\\n\\r\\n*T* `|` `where` *col* `endswith_cs` `(`*expression*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *T* | string | &check;| The tabular input whose records are to be filtered. |\\r\\n| *col* | string | &check; | The column to filter. |\\r\\n| *expression* | string | &check; | The expression used to filter. |\\r\\n\\r\\n## Returns\\r\\n\\r\\nRows in *T* for which the predicate is `true`.\",'> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAwsuyS/KdS1LzSsp5qpRKC7NzU0syqxKVYAIKdgqJOeX5pVoaCokVSoElySWpAJVlWekFqVCeAqpeSnF5ZklGfHJxQpKfo5KAE4M2OtQAAAA\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nStormEvents\\r\\n| summarize Events = count() by State\\r\\n| where State endswith_cs \"NA\"\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|State|Events|\\r\\n|--|--|\\r\\n|NORTH CAROLINA |1721|\\r\\n|MONTANA |1230|\\r\\n|INDIANA |1164|\\r\\n|SOUTH CAROLINA| 915|\\r\\n|LOUISIANA| 463|\\r\\n|ARIZONA| 340|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/endswith-cs-operator\",\"endswith-cs-operator.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"estimate_data_size\",\"Returns an estimated data size in bytes of the selected columns of the tabular expression.\",\"## Syntax\\r\\n\\r\\n`estimate_data_size(`*columns*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n|Name|Type|Required|Description|\\r\\n|--|--|--|--|\\r\\n|*columns*|string|&check;|One or more comma-separated column references in the source tabular expression to use for data size estimation. To include all columns, use the wildcard (`*`) character.|\\r\\n\\r\\n## Returns\\r\\n\\r\\nThe estimated data size in bytes of the record size. Estimation is based on data types and values lengths.\",'The following example calculates the total data size using `estimate_data_size()`.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA22NvQ7CMBCDd57CWxMYmvAbhr5F9ypSj1KpSarmkCLEw3OFtbdYlu3vFh8HQsFjSQEWnGANMtMsZuPqWrpqSnHQGDMcdh9QYYo9WlE0qOzxdL5cb+5uqm3ArzhRHPi5MuTfSsmvEPwyvgltYj814hVlHoNn6nrPvssSqr3Wf4pyB2t0kXUD68wXVvoNCMgAAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nrange x from 1 to 10 step 1                    // x (long) is 8 \\r\\n| extend Text = \\'1234567890\\'                   // Text length is 10  \\r\\n| summarize Total=sum(estimate_data_size(*))   // (8+10)x10 = 180\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|Total|\\r\\n|---|\\r\\n|180|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/estimate-data-sizefunction\",\"estimate-data-sizefunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.OperatorToken,\"evaluate\",\"Invokes a service-side query extension (plugin).\",\"The `evaluate` operator is a tabular operator that allows you to invoke query language extensions known as **plugins**. Unlike other language constructs, plugins can be enabled or disabled. Plugins aren't \\\"bound\\\" by the relational nature of the language. In other words, they may not have a predefined, statically determined, output schema.\\r\\n\\r\\n> [!NOTE]\\r\\n>\\r\\n> * Syntactically, `evaluate` behaves similarly to the [invoke operator](./invokeoperator.md), which invokes tabular functions.\\r\\n> * Plugins provided through the evaluate operator aren't bound by the regular rules of query execution or argument evaluation.\\r\\n> * Specific plugins may have specific restrictions. For example, plugins whose output schema depends on the data. For example, [bag_unpack plugin](./bag-unpackplugin.md) and [pivot plugin](./pivotplugin.md) can't be used when performing cross-cluster queries.\\r\\n\\r\\n## Syntax\\r\\n\\r\\n[*T* `|`] `evaluate` [ *evaluateParameters* ] *PluginName* `(`[ *PluginArgs* ]`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n|Name|Type|Required|Description|\\r\\n|--|--|--|--|\\r\\n| *T* | string | | A tabular input to the plugin. Some plugins don't take any input and act as a tabular data source.|\\r\\n| *evaluateParameters* | string | | Zero or more space-separated [evaluate parameters](#evaluate-parameters) in the form of *Name* `=` *Value* that control the behavior of the evaluate operation and execution plan. Each plugin may decide differently how to handle each parameter. Refer to each plugin's documentation for specific behavior.|\\r\\n| *PluginName* | string | &check; | The mandatory name of the plugin being invoked. |\\r\\n| *PluginArgs* | string | | Zero or more comma-separated arguments to provide to the plugin.|\\r\\n\\r\\n### Evaluate parameters\\r\\n\\r\\nThe following parameters are supported:\\r\\n\\r\\n|Name                |Values                           |Description                                |\\r\\n  |--------------------|---------------------------------|-------------------------------------------|\\r\\n  |`hint.distribution` |`single`, `per_node`, `per_shard`| [Distribution hints](#distribution-hints) |\\r\\n  |`hint.pass_filters` |`true`, `false`| Allow `evaluate` operator to passthrough any matching filters before the plugin. Filter is considered as 'matched' if it refers to a column existing before the `evaluate` operator. Default: `false` |\\r\\n  |`hint.pass_filters_column` |*column_name*| Allow plugin operator to passthrough filters referring to *column_name* before the plugin. Parameter can be used multiple times with different column names. |\\r\\n\\r\\n## Plugins\\r\\n\\r\\nThe following plugins are supported:\\r\\n\\r\\n* [autocluster plugin](autoclusterplugin.md)\\r\\n* [azure-digital-twins-query-request plugin](azure-digital-twins-query-request-plugin.md)\\r\\n* [bag-unpack plugin](bag-unpackplugin.md)\\r\\n* [basket plugin](basketplugin.md)\\r\\n* [cosmosdb-sql-request plugin](cosmosdb-plugin.md)\\r\\n* [dcount-intersect plugin](dcount-intersect-plugin.md)\\r\\n* [diffpatterns plugin](diffpatternsplugin.md)\\r\\n* [diffpatterns-text plugin](diffpatterns-textplugin.md)\\r\\n* [infer-storage-schema plugin](inferstorageschemaplugin.md)\\r\\n* [ipv4-lookup plugin](ipv4-lookup-plugin.md)\\r\\n* [mysql-request-plugin](mysqlrequest-plugin.md)\\r\\n* [narrow plugin](narrowplugin.md)\\r\\n* [pivot plugin](pivotplugin.md)\\r\\n* [preview plugin](previewplugin.md)\\r\\n* [R plugin](rplugin.md)\\r\\n* [rolling-percentile plugin](rolling-percentile-plugin.md)\\r\\n* [rows-near plugin](rows-near-plugin.md)\\r\\n* [schema-merge plugin](schemamergeplugin.md)\\r\\n* [sql-request plugin](sqlrequestplugin.md)\\r\\n* [sequence-detect plugin](sequence-detect-plugin.md)\\r\\n\\r\\n## Distribution hints\\r\\n\\r\\nDistribution hints specify how the plugin execution will be distributed across multiple cluster nodes. Each plugin may implement a different support for the distribution. The plugin's documentation specifies the distribution options supported by the plugin.\\r\\n\\r\\nPossible values:\\r\\n\\r\\n* `single`: A single instance of the plugin will run over the entire query data.\\r\\n* `per_node`: If the query before the plugin call is distributed across nodes, then an instance of the plugin will run on each node over the data that it contains.\\r\\n* `per_shard`: If the data before the plugin call is distributed across shards, then an instance of the plugin will run over each shard of the data.\",\"\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/evaluateoperator\",\"\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"exp\",\"The base-e exponential function of x, which is e raised to the power x: e^x.\",\"## Syntax\\r\\n\\r\\n`exp(`*x*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *x* | real | &check;| The value of the exponent. |\\r\\n\\r\\n## Returns\\r\\n\\r\\nThe exponential value of x.\\r\\n\\r\\n## See also\\r\\n\\r\\n* For natural (base-e) logarithms, see [log()](log-function.md).\\r\\n* For exponential functions of base-2 and base-10 logarithms, see [exp2()](exp2-function.md), [exp10()](exp10-function.md).\",\"\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/exp-function\",\"\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"exp10\",\"The base-10 exponential function of x, which is 10 raised to the power x: 10^x.\",\"## Syntax\\r\\n\\r\\n`exp10(`*x*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *x* | real | &check;| The value of the exponent. |\\r\\n\\r\\n## Returns\\r\\n\\r\\nThe exponential value of x.\\r\\n\\r\\n## See also\\r\\n\\r\\n* For natural (base-10) logarithms, see [log10()](log10-function.md).\\r\\n* For exponential functions of base-e and base-2 logarithms, see [exp()](exp-function.md), [exp2()](exp2-function.md).\",\"\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/exp10-function\",\"\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"exp2\",\"The base-2 exponential function of x, which is 2 raised to the power x: 2^x.\",\"## Syntax\\r\\n\\r\\n`exp2(`*x*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *x* | real | &check;| The value of the exponent. |\\r\\n\\r\\n## Returns\\r\\n\\r\\nThe exponential value of x.\\r\\n\\r\\n## See also\\r\\n\\r\\n* For natural (base-2) logarithms, see [log2()](log2-function.md).\\r\\n* For exponential functions of base-e and base-10 logarithms, see [exp()](exp-function.md), [exp10()](exp10-function.md).\",\"\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/exp2-function\",\"\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.OperatorToken,\"extend\",\"Create calculated columns and append them to the result set.\",\"## Syntax\\r\\n\\r\\n*T* `| extend` [*ColumnName* | `(`*ColumnName*[`,` ...]`)` `=`] *Expression* [`,` ...]\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n| -- | -- | -- | -- |\\r\\n| *T* | string | &check; | Tabular input to extend. |\\r\\n| *ColumnName* | string | | Name of the column to add or update. |\\r\\n| *Expression* | string | &check; | Calculation to perform over the input.|\\r\\n\\r\\n* If *ColumnName* is omitted, the output column name of *Expression* will be automatically generated.\\r\\n* If *Expression* returns more than one column, a list of column names can be specified in parentheses. Then, *Expression*'s output columns will be given the specified names. If a list of the column names is not specified, all *Expression*'s output columns with generated names will be added to the output.\\r\\n\\r\\n## Returns\\r\\n\\r\\nA copy of the input tabular result set, such that:\\r\\n\\r\\n1. Column names noted by `extend` that already exist in the input are removed\\r\\n   and appended as their new calculated values.\\r\\n1. Column names noted by `extend` that do not exist in the input are appended\\r\\n   as their new calculated values.\\r\\n\\r\\n> [!NOTE]\\r\\n> The `extend` operator adds a new column to the input result set, which does\\r\\n  **not** have an index. In most cases, if the new column is set to be exactly\\r\\n  the same as an existing table column that has an index, Kusto can automatically\\r\\n  use the existing index. However, in some complex scenarios this propagation is\\r\\n  not done. In such cases, if the goal is to rename a column, use the [`project-rename` operator](projectrenameoperator.md) instead.\",'> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAwsuyS/KdS1LzSsp5qpRKCjKz0pNLlFwzUsJycxN1VEILkksKgExgZKpFSWpeSkKLqVFiSWZ+XkKtjBlCroIdQCqSrMYUAAAAA==\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nStormEvents\\r\\n| project EndTime, StartTime\\r\\n| extend Duration = EndTime - StartTime\\r\\n```\\r\\n\\r\\nThe following table shows only the first 10 results. To see the full output, run the query.\\r\\n\\r\\n|EndTime|StartTime|Duration|\\r\\n|--|--|--|\\r\\n|2007-01-01T00:00:00Z| 2007-01-01T00:00:00Z |00:00:00|\\r\\n|2007-01-01T00:25:00Z| 2007-01-01T00:25:00Z |00:00:00|\\r\\n|2007-01-01T02:24:00Z| 2007-01-01T02:24:00Z |00:00:00|\\r\\n|2007-01-01T03:45:00Z| 2007-01-01T03:45:00Z |00:00:00|\\r\\n|2007-01-01T04:35:00Z| 2007-01-01T04:35:00Z |00:00:00|\\r\\n|2007-01-01T04:37:00Z| 2007-01-01T03:37:00Z |01:00:00|\\r\\n|2007-01-01T05:00:00Z| 2007-01-01T00:00:00Z |05:00:00|\\r\\n|2007-01-01T05:00:00Z| 2007-01-01T00:00:00Z |05:00:00|\\r\\n|2007-01-01T06:00:00Z| 2007-01-01T00:00:00Z |06:00:00|\\r\\n|2007-01-01T06:00:00Z| 2007-01-01T00:00:00Z |06:00:00|\\r\\n\\r\\n## See also\\r\\n\\r\\n* Use [series_stats](series-statsfunction.md) to return multiple columns',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/extendoperator\",\"extendoperator.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"extent_id\",'Returns a unique identifier that identifies the data shard (\"extent\") that the current record resides in.',\"Applying this function to calculated data that isn't attached to a data shard returns an empty guid (all zeros).\\r\\n\\r\\n> **Deprecated aliases:** extentid()\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`extent_id()`\\r\\n\\r\\n## Returns\\r\\n\\r\\nA value of type `guid` that identifies the current record's data shard,\\r\\nor an empty guid (all zeros).\",\"The following example shows how to get a list of all the data shards\\r\\nthat have records from an hour ago with a specific value for the\\r\\ncolumn `ActivityId`. It demonstrates that some query operators (here,\\r\\nthe `where` operator, and also `extend` and `project`)\\r\\npreserve the information about the data shard hosting the record.\\r\\n\\r\\n```\\r\\nT\\r\\n| where Timestamp > ago(1h)\\r\\n| where ActivityId == 'dd0595d4-183e-494e-b88e-54c52fe90e5a'\\r\\n| extend eid=extent_id()\\r\\n| summarize by eid\\r\\n```\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/extentidfunction\",\"extentidfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"extent_tags\",'Returns a dynamic array with the [tags](../management/extents-overview.md#extent-tagging) of the data shard (\"extent\") that the current record is in.',\"If you apply this function to calculated data, which isn't attached to a data shard, returns an empty value.\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`extent_tags()`\\r\\n\\r\\n## Returns\\r\\n\\r\\nA value of type `dynamic` that is an array holding the current record's extent tags,\\r\\nor an empty value.\",\"Some query operators preserve the information about the data shard hosting the record.\\r\\nThese operators include `where`, `extend`, and `project`.\\r\\nThe following example shows how to get a list the tags of all the data shards\\r\\nthat have records from an hour ago, with a specific value for the\\r\\ncolumn `ActivityId`.\\r\\n\\r\\n```\\r\\nT\\r\\n| where Timestamp > ago(1h)\\r\\n| where ActivityId == 'dd0595d4-183e-494e-b88e-54c52fe90e5a'\\r\\n| extend tags = extent_tags()\\r\\n| summarize by tostring(tags)\\r\\n```\\r\\n\\r\\nThe following example shows how to obtain a count of all records from the last hour, which are stored in extents tagged with the tag `MyTag`(and potentially other tags), but not tagged with the tag `drop-by:MyOtherTag`.\\r\\n\\r\\n```\\r\\nT\\r\\n| where Timestamp > ago(1h)\\r\\n| extend Tags = extent_tags()\\r\\n| where Tags has_cs 'MyTag' and Tags !has_cs 'drop-by:MyOtherTag'\\r\\n| count\\r\\n```\\r\\n\\r\\n> [!NOTE]\\r\\n> Filtering on the value of `extent_tags()` performs best when one of the following string operators is used:\\r\\n> `has`, `has_cs`, `!has`, `!has_cs`.\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/extenttagsfunction\",\"extenttagsfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"external_table\",\"References an [external table](schema-entities/externaltables.md) by name.\",\"> [!NOTE]\\r\\n>\\r\\n> The `external_table` function has similar restrictions as the [table](tablefunction.md) function.\\r\\n> Standard [query limits](../concepts/querylimits.md) apply to external table queries as well.\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`external_table(` *TableName* [`,` *MappingName* ] `)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *TableName* | string| &check; | The name of the external table being queried. Must reference an external table of kind `blob`, `adl`, or `sql`.|\\r\\n| *MappingName* | string | | A name of a mapping object that maps fields in the external data shards to columns output.|\\r\\n\\r\\n## Authentication and authorization\\r\\n\\r\\nThe authentication method to access an external table is based on the connection string provided during its creation, and the permissions required to access the table vary depending on the authentication method. For more information, see [Azure Storage external table](../management/external-tables-azurestorage-azuredatalake.md#authentication-and-authorization) or [SQL Server external table](../management/external-sql-tables.md).\\r\\n\\r\\n## Next steps\\r\\n\\r\\n* [External tables overview](schema-entities/externaltables.md)\\r\\n* [Create and alter Azure Storage external tables](../management/external-tables-azurestorage-azuredatalake.md)\\r\\n* [Create and alter SQL Server external tables](../management/external-sql-tables.md).\",\"\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/externaltablefunction\",\"\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.OperatorToken,\"externaldata\",\"The `externaldata` operator returns a table whose schema is defined in the query itself, and whose data is read from an external storage artifact, such as a blob in Azure Blob Storage or a file in Azure Data Lake Storage.\",\"> [!NOTE]\\r\\n> The `externaldata` operator supports a specific set of storage services, as listed under [Storage connection strings](../api/connection-strings/storage-connection-strings.md).\\r\\n\\r\\n> [!NOTE]\\r\\n> The `externaldata` operator supports Shared Access Signature (SAS) key, Access key, and Azure AD Token authentication methods. For more information, see [Storage authentication methods](../api/connection-strings/storage-authentication-methods.md).\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`externaldata` `(`*columnName*`:`*columnType* [`,` ...] `)`\\r\\n`[` *storageConnectionString* [`,` ...] `]`\\r\\n[`with` `(` *propertyName* `=` *propertyValue* [`,` ...]`)`]\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *columnName*, *columnType* | string | &check;| A list of column names and their types. This list defines the schema of the table. |\\r\\n| *storageConnectionString* | string | &check;| A [storage connection string](../api/connection-strings/storage-connection-strings.md) of the storage artifact to query. |\\r\\n| *propertyName*, *propertyValue* | string | | A list of optional [properties](#properties) that determines how to interpret the data retrieved from storage.\\r\\n\\r\\n### Properties\\r\\n\\r\\n| Property         | Type     | Description       |\\r\\n|------------------|----------|-------------------|\\r\\n| format         | string | The data format. If unspecified, an attempt is made to detect the data format from file extension. The default is `CSV`. All [ingestion data formats](../../ingestion-supported-formats.md) are supported. |\\r\\n| ignoreFirstRecord | bool | If set to `true`, the first record in every file is ignored. This property is useful when querying CSV files with headers. |\\r\\n| ingestionMapping | string | Indicates how to map data from the source file to the actual columns in the operator result set. See [data mappings](../management/mappings.md). |\\r\\n\\r\\n> [!NOTE]\\r\\n>\\r\\n> This operator doesn't accept any pipeline input.\\r\\n>\\r\\n> Standard [query limits](../concepts/querylimits.md) apply to external data queries as well.\\r\\n\\r\\n## Returns\\r\\n\\r\\nThe `externaldata` operator returns a data table of the given schema whose data was parsed from the specified storage artifact, indicated by the storage connection string.\",'### Fetch a list of user IDs stored in Azure Blob Storage\\r\\n\\r\\nThe following example shows how to find all records in a table whose `UserID` column falls into a known set of IDs, held (one per line) in an external storage file. Since the data format isn\\'t specified, the detected data format is `TXT`.\\r\\n\\r\\n```\\r\\nUsers\\r\\n| where UserID in ((externaldata (UserID:string) [\\r\\n    @\"https://storageaccount.blob.core.windows.net/storagecontainer/users.txt\" \\r\\n      h@\"?...SAS...\" // Secret token needed to access the blob\\r\\n    ]))\\r\\n| ...\\r\\n```\\r\\n\\r\\n### Query multiple data files\\r\\n\\r\\nThe following example queries multiple data files stored in external storage.\\r\\n\\r\\n```\\r\\nexternaldata(Timestamp:datetime, ProductId:string, ProductDescription:string)\\r\\n[\\r\\n  h@\"https://mycompanystorage.blob.core.windows.net/archivedproducts/2019/01/01/part-00000-7e967c99-cf2b-4dbb-8c53-ce388389470d.csv.gz?...SAS...\",\\r\\n  h@\"https://mycompanystorage.blob.core.windows.net/archivedproducts/2019/01/02/part-00000-ba356fa4-f85f-430a-8b5a-afd64f128ca4.csv.gz?...SAS...\",\\r\\n  h@\"https://mycompanystorage.blob.core.windows.net/archivedproducts/2019/01/03/part-00000-acb644dc-2fc6-467c-ab80-d1590b23fc31.csv.gz?...SAS...\"\\r\\n]\\r\\nwith(format=\"csv\")\\r\\n| summarize count() by ProductId\\r\\n```\\r\\n\\r\\nThe above example can be thought of as a quick way to query multiple data files without defining an [external table](schema-entities/externaltables.md).\\r\\n\\r\\n> [!NOTE]\\r\\n> Data partitioning isn\\'t recognized by the `externaldata` operator.\\r\\n\\r\\n### Query hierarchical data formats\\r\\n\\r\\nTo query hierarchical data format, such as `JSON`, `Parquet`, `Avro`, or `ORC`, `ingestionMapping` must be specified in the operator properties.\\r\\nIn this example, there\\'s a JSON file stored in Azure Blob Storage with the following contents:\\r\\n\\r\\n```JSON\\r\\n{\\r\\n  \"timestamp\": \"2019-01-01 10:00:00.238521\",   \\r\\n  \"data\": {    \\r\\n    \"tenant\": \"e1ef54a6-c6f2-4389-836e-d289b37bcfe0\",   \\r\\n    \"method\": \"RefreshTableMetadata\"   \\r\\n  }   \\r\\n}   \\r\\n{\\r\\n  \"timestamp\": \"2019-01-01 10:00:01.845423\",   \\r\\n  \"data\": {   \\r\\n    \"tenant\": \"9b49d0d7-b3e6-4467-bb35-fa420a25d324\",   \\r\\n    \"method\": \"GetFileList\"   \\r\\n  }   \\r\\n}\\r\\n...\\r\\n```\\r\\n\\r\\nTo query this file using the `externaldata` operator, a data mapping must be specified. The mapping dictates how to map JSON fields to the operator result set columns:\\r\\n\\r\\n```\\r\\nexternaldata(Timestamp: datetime, TenantId: guid, MethodName: string)\\r\\n[ \\r\\n   h@\\'https://mycompanystorage.blob.core.windows.net/events/2020/09/01/part-0000046c049c1-86e2-4e74-8583-506bda10cca8.json?...SAS...\\'\\r\\n]\\r\\nwith(format=\\'multijson\\', ingestionMapping=\\'[{\"Column\":\"Timestamp\",\"Properties\":{\"Path\":\"$.timestamp\"}},{\"Column\":\"TenantId\",\"Properties\":{\"Path\":\"$.data.tenant\"}},{\"Column\":\"MethodName\",\"Properties\":{\"Path\":\"$.data.method\"}}]\\')\\r\\n```\\r\\n\\r\\nThe `MultiJSON` format is used here because single JSON records are spanned into multiple lines.\\r\\n\\r\\nFor more info on mapping syntax, see [data mappings](../management/mappings.md).',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/externaldata-operator\",\"externaldata-operator.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"extract\",\"Get a match for a [regular expression](./re2.md) from a source string.\",\"Optionally, convert the extracted substring to the indicated type.\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`extract(`*regex*`,` *captureGroup*`,` *source* [`,` *typeLiteral*]`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *regex* | string | &check; | A [regular expression](./re2.md).|\\r\\n| *captureGroup* | int | &check; | The capture group to extract. 0 stands for the entire match, 1 for the value matched by the first '('parenthesis')' in the regular expression, and 2 or more for subsequent parentheses.|\\r\\n| *source* | string | &check;| The string to search.|\\r\\n| *typeLiteral* | string | | If provided, the extracted substring is converted to this type. For example, `typeof(long)`.\\r\\n\\r\\n## Returns\\r\\n\\r\\nIf *regex* finds a match in *source*: the substring matched against the indicated capture group *captureGroup*, optionally converted to *typeLiteral*.\\r\\n\\r\\nIf there's no match, or the type conversion fails: `null`.\",'The example string `Trace` is searched for a definition for `Duration`.\\r\\nThe match is converted to `real`, then multiplied it by a time constant (`1s`) so that `Duration` is of type `timespan`. In this example, it\\'s equal to 123.45 seconds:\\r\\n\\r\\n```\\r\\n...\\r\\n| extend Trace=\"A=1, B=2, Duration=123.45, ...\"\\r\\n| extend Duration = extract(\"Duration=([0-9.]+)\", 1, Trace, typeof(real)) * time(1s) \\r\\n```\\r\\n\\r\\nThis example is equivalent to `substring(Text, 2, 4)`:\\r\\n\\r\\n```\\r\\nextract(\"^.{2,2}(.{4,4})\", 1, Text)\\r\\n```',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/extractfunction\",\"extractfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"extract_all\",\"Get all matches for a [regular expression](./re2.md) from a source string.\\r\\nOptionally, retrieve a subset of matching groups.\",'```\\r\\nprint extract_all(@\"(\\\\d+)\", \"a set of numbers: 123, 567 and 789\") // results with the dynamic array [\"123\", \"567\", \"789\"]\\r\\n```\\r\\n\\r\\n> **Deprecated aliases:** extractall()\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`extract_all(`*regex*`,` [*captureGroups*`,`] *source*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *regex* | string | &check; | A [regular expression](./re2.md) containing between one and 16 capture groups.|\\r\\n| *captureGroups* | dynamic | | An array that indicates the capture groups to extract. Valid values are from 1 to the number of capturing groups in the regular expression. Named capture groups are allowed as well. See [examples](#examples).|\\r\\n| *source* | string | &check;| The string to search.|\\r\\n\\r\\n## Returns\\r\\n\\r\\n* If *regex* finds a match in *source*: Returns dynamic array including all matches against the indicated capture groups *captureGroups*, or all of capturing groups in the *regex*.\\r\\n* If number of *captureGroups* is 1: The returned array has a single dimension of matched values.\\r\\n* If number of *captureGroups* is more than 1: The returned array is a two-dimensional collection of multi-value matches per *captureGroups* selection, or all capture groups present in the *regex* if *captureGroups* is omitted.\\r\\n* If there\\'s no match: `null`.','### Extract a single capture group\\r\\n\\r\\nThe following query returns hex-byte representation (two hex-digits) of the GUID.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAysoyswrUfBMsVWyMEqySEo1StFNSUs01zVJSjHUtUgzM9Y1MklMMTJLMTY0MbFU4qpRSK0oSc1LUUgvzUyJT6osSS1WsAWJFSUml8Qn5uRoOChpRMekJOqmxVYb1Woq6QAN1wQA6/wKuGYAAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint Id=\"82b8be2d-dfa7-4bd1-8f63-24ad26d31449\"\\r\\n| extend guid_bytes = extract_all(@\"([\\\\da-f]{2})\", Id) \\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|ID|guid_bytes|\\r\\n|---|---|\\r\\n|82b8be2d-dfa7-4bd1-8f63-24ad26d31449|[\"82\",\"b8\",\"be\",\"2d\",\"df\",\"a7\",\"4b\",\"d1\",\"8f\",\"63\",\"24\",\"ad\",\"26\",\"d3\",\"14\",\"49\"]|\\r\\n\\r\\n### Extract several capture groups\\r\\n\\r\\nThe following query uses a regular expression with three capturing groups to split each GUID part into first letter, last letter, and whatever is in the middle.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAysoyswrUfBMsVWyMEqySEo1StFNSUs01zVJSjHUtUgzM9Y1MklMMTJLMTY0MbFU4qpRSK0oSc1LUUgvzUyJT6osSS1WsAWJFSUml8Qn5uRoOChpxJRrArE2iNBU0gGargkAiT0FmGcAAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint Id=\"82b8be2d-dfa7-4bd1-8f63-24ad26d31449\"\\r\\n| extend guid_bytes = extract_all(@\"(\\\\w)(\\\\w+)(\\\\w)\", Id)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|ID|guid_bytes|\\r\\n|---|---|\\r\\n|82b8be2d-dfa7-4bd1-8f63-24ad26d31449|[[\"8\",\"2b8be2\",\"d\"],[\"d\",\"fa\",\"7\"],[\"4\",\"bd\",\"1\"],[\"8\",\"f6\",\"3\"],[\"2\",\"4ad26d3144\",\"9\"]]|\\r\\n\\r\\n### Extract a subset of capture groups\\r\\n\\r\\nThe following query selects a subset of capturing groups.\\r\\n\\r\\nThe regular expression matches the first letter, last letter, and all the rest.\\r\\n\\r\\nThe *captureGroups* parameter is used to select only the first and the last parts.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAysoyswrUfBMsVWyMEqySEo1StFNSUs01zVJSjHUtUgzM9Y1MklMMTJLMTY0MbFU4qpRSK0oSc1LUUgvzUyJT6osSS1WsAWJFSUml8Qn5uRoOChpxJRrArE2iNBU0lFIqcxLzM1M1og21DGO1dQB2qYJAHPOX8l3AAAA\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint Id=\"82b8be2d-dfa7-4bd1-8f63-24ad26d31449\"\\r\\n| extend guid_bytes = extract_all(@\"(\\\\w)(\\\\w+)(\\\\w)\", dynamic([1,3]), Id) \\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|ID|guid_bytes|\\r\\n|---|---|\\r\\n|82b8be2d-dfa7-4bd1-8f63-24ad26d31449|[[\"8\",\"d\"],[\"d\",\"7\"],[\"4\",\"1\"],[\"8\",\"3\"],[\"2\",\"9\"]]|\\r\\n\\r\\n### Using named capture groups\\r\\n\\r\\nThe *captureGroups* in the following query uses both capture group indexes and named capture group references to fetch matching values.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAyWOsQrCMBRFd78iZEmLydA01AhWXd3cVcpLX1ICaZE2ogU/3qaO5x4O3Ofoh0guWFMtjTZWokAHO6EMFkK7qhRSAcoKy0KpPd18if1EOyDpXh4bM0c7kTptI7SxgRCyM81O14Pz4xSP93eeoPeIwS60XTHAX1FOcB6g9212Y2vAuOQsafbI+fIq/wFEwbznnwAAAA==\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint Id=\"82b8be2d-dfa7-4bd1-8f63-24ad26d31449\"\\r\\n| extend guid_bytes = extract_all(@\"(?P<first>\\\\w)(?P<middle>\\\\w+)(?P<last>\\\\w)\", dynamic([\\'first\\',2,\\'last\\']), Id) \\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|ID|guid_bytes|\\r\\n|---|---|\\r\\n|82b8be2d-dfa7-4bd1-8f63-24ad26d31449|[[\"8\",\"2b8be2\",\"d\"],[\"d\",\"fa\",\"7\"],[\"4\",\"bd\",\"1\"],[\"8\",\"f6\",\"3\"],[\"2\",\"4ad26d3144\",\"9\"]]|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/extractallfunction\",\"extractallfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"extract_json\",\"Get a specified element out of a JSON text using a path expression.\",'Optionally convert the extracted string to a specific type.\\r\\n\\r\\n> The `extract_json()` and `extractjson()` functions are equivalent\\r\\n\\r\\n```\\r\\nextract_json(\"$.hosts[1].AvailableMB\", EventText, typeof(int))\\r\\n```\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`extract_json(`*jsonPath*`,` *dataSource*`,` *type*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n|Name|Type|Required|Description|\\r\\n|--|--|--|--|\\r\\n| *jsonPath* | string | &check; | A [JSONPath](jsonpath.md) that defines an accessor into the JSON document.|\\r\\n| *dataSource* | string | &check; | A JSON document.|\\r\\n| *type* | string | | An optional type literal. If provided, the extracted value is converted to this type. For example, `typeof(long)` will convert the extracted value to a `long`.|\\r\\n\\r\\n## Performance tips\\r\\n\\r\\n* Apply where-clauses before using `extract_json()`.\\r\\n* Consider using a regular expression match with [extract](extractfunction.md) instead. This can run very much faster, and is effective if the JSON is produced from a template.\\r\\n* Use `parse_json()` if you need to extract more than one value from the JSON.\\r\\n* Consider having the JSON parsed at ingestion by declaring the type of the column to be [dynamic](scalar-data-types/dynamic.md).\\r\\n\\r\\n## Returns\\r\\n\\r\\nThis function performs a [JSONPath](jsonpath.md) query into dataSource, which contains a valid JSON string, optionally converting that value to another type depending on the third argument.',\"The `[`bracket`]` notation and dot (`.`) notation are equivalent:\\r\\n\\r\\n```\\r\\nT\\r\\n| extend AvailableMB = extract_json(\\\"$.hosts[1].AvailableMB\\\", EventText, typeof(int))\\r\\n\\r\\nT\\r\\n| extend AvailableMB = extract_json(\\\"$['hosts'][1]['AvailableMB']\\\", EventText, typeof(int))\\r\\n```\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/extractjsonfunction\",\"extractjsonfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.OperatorToken,\"facet\",\"Returns a set of tables, one for each specified column.\\r\\nEach table specifies the list of values taken by its column.\\r\\nAn additional table can be created by using the `with` clause.\",\"## Syntax\\r\\n\\r\\n*T* `| facet by` *ColumnName* [`,` *ColumnName2*`,` ...] [`with (` *filterPipe* `)`]\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *ColumnName* | string | &check; | The column name, or list of column names, to be summarized.|\\r\\n| *filterPipe* | string | | A query expression applied to the input table.|\\r\\n\\r\\n## Returns\\r\\n\\r\\nMultiple tables: one for the `with` clause, and one for each column.\",'> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA2VOywqCQBTdB/7DYVYKKVMUrlsEtdYfGJ0bWujIzE0R/Ph81qK7OvdwXgkbW11bqtl5uwFdQZaQsGKCY2XZdSUXEBcBVWvMwrRvCIVyEDdSbS8m30PlxMj6xbr/Cb0dxptDFuivzFZkOS0rQkbcEdW+Hu08Ev5RyjiUh1CeAkQRYh2sAQMaa56U89b1DRmhedt8qm9KZzTd9d+SAaxehPPyBR9NMsYY/wAAAA==\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nStormEvents\\r\\n| where State startswith \"A\" and EventType has \"Heavy\"\\r\\n| facet by State, EventType\\r\\n    with \\r\\n    (\\r\\n    where StartTime between(datetime(2007-01-04) .. 7d) \\r\\n    | project State, StartTime, Source, EpisodeId, EventType\\r\\n    | take 5\\r\\n    )\\r\\n```\\r\\n\\r\\nThe following is the table generated by the `with` clause.\\r\\n\\r\\n|State|StartTime|Source|EpisodeId|EventType|\\r\\n|--|--|--|--|--|\\r\\n|ALASKA|2007-01-04 12:00:00.0000000|COOP Observer|2192|Heavy Snow|\\r\\n|ALASKA|2007-01-04 15:00:00.0000000|Trained Spotter|2192|Heavy Snow|\\r\\n|ALASKA|2007-01-04 15:00:00.0000000|Trained Spotter|2192|Heavy Snow|\\r\\n|ALASKA|2007-01-04 15:00:00.0000000|Trained Spotter|2192|Heavy Snow|\\r\\n|ALASKA|2007-01-06 18:00:00.0000000|COOP Observer|2193|Heavy Snow|\\r\\n\\r\\nThe following table is the `State` facet output table.\\r\\n\\r\\n|State|count_State|\\r\\n|---|---|\\r\\n|ALABAMA|19|\\r\\n|ARIZONA|33|\\r\\n|ARKANSAS|1|\\r\\n|AMERICAN SAMOA|1|\\r\\n|ALASKA|58|\\r\\n\\r\\nThe following table is the `EventType` facet output table.\\r\\n\\r\\n|EventType|count_EventType|\\r\\n|---|---|\\r\\n|Heavy Rain|34|\\r\\n|Heavy Snow|78|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/facetoperator\",\"facetoperator.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.OperatorToken,\"find\",\"Finds rows that match a predicate across a set of tables.\",\"The scope of the `find` can also be cross-database or cross-cluster.\\r\\n\\r\\n```\\r\\nfind in (Table1, Table2, Table3) where Fruit==\\\"apple\\\"\\r\\nfind in (database('*').*) where Fruit == \\\"apple\\\"\\r\\nfind in (cluster('cluster_name').database('MyDB*'.*)) where Fruit == \\\"apple\\\"\\r\\n```\\r\\n\\r\\n## Syntax\\r\\n\\r\\n* `find` [`withsource`= *ColumnName*] [`in` `(`*Tables*`)`] `where` *Predicate* [`project-smart` | `project` *ColumnName*[`:` *ColumnType* `,` ... ] [`,` `pack_all()`]]\\r\\n* `find` *Predicate* [`project-smart` | `project` *ColumnName*[`:` *ColumnType* `,` ... ] [`,` `pack_all()`]]\\r\\n\\r\\n## Parameters\\r\\n\\r\\n|Name|Type|Required|Description|\\r\\n|--|--|--|--|\\r\\n|*ColumnName*| string | | By default, the output will include a column called *source_* whose values indicate which source table has contributed each row. If specified, *ColumnName* will be used instead of *source_*. After wildcard matching, if the query references tables from more than one database including the default database, the value of this column will have a table name qualified with the database. Similarly *cluster* and *database* qualifications will be present in the value if more than one cluster is referenced.|\\r\\n| *Predicate* | bool | &check; | This boolean expression is evaluated for each row in each input table. For more information, see [predicate-syntax details](./findoperator.md#predicate-syntax).|\\r\\n| *Tables* | string | | Zero or more comma-separated table references. By default, `find` will look in all the tables in the current database. You can use:<br/>1. The name of a table, such as `Events`<br/>2. A query expression, such as `(Events | where id==42)`<br/>3. A set of tables specified with a wildcard. For example, `E*` would form the union of all the tables in the database whose names begin with `E`.|\\r\\n| `project-smart` or `project` | string | | If not specified, `project-smart` will be used by default. For more information, see [output-schema details](./findoperator.md#output-schema).|\\r\\n\\r\\n## Returns\\r\\n\\r\\nTransformation of rows in *Table* [`,` *Table*, ...] for which *Predicate* is `true`. The rows are transformed according to the [output schema](#output-schema).\\r\\n\\r\\n## Output schema\\r\\n\\r\\n**source_ column**\\r\\n\\r\\nThe find operator output will always include a *source_* column with the source table name. The column can be renamed using the `withsource` parameter.\\r\\n\\r\\n**results columns**\\r\\n\\r\\nSource tables that don't contain any column used by the predicate evaluation, will be filtered out.\\r\\n\\r\\nWhen you use `project-smart`, the columns that will appear in the output will be:\\r\\n\\r\\n* Columns that appear explicitly in the predicate.\\r\\n* Columns that are common to all the filtered tables.\\r\\n\\r\\nThe rest of the columns will be packed into a property bag and will appear in an additional `pack` column.\\r\\nA column that is referenced explicitly by the predicate and appears in multiple tables with multiple types, will have a different column in the result schema for each such type. Each of the column names will be constructed from the original column name and type, separated by an underscore.\\r\\n\\r\\nWhen using `project` *ColumnName*[`:` *ColumnType* `,` ... ] [`,` `pack_all()`]:\\r\\n\\r\\n* The result table will include the columns specified in the list. If a source table doesn't contain a certain column, the values in the corresponding rows will be null.\\r\\n* When specifying a *ColumnType* with a *ColumnName*, this column in the \\\"result\\\" will have the given type, and the values will be cast to that type if needed. The casting won't have an effect on the column type when evaluating the *Predicate*.\\r\\n* When `pack_all()` is used, all the columns, including the projected columns, are packed into a property bag and appear in an additional column, by default 'column1'. In the property bag, the source column name serves as the property name and the column's value serves as the property value.\\r\\n\\r\\n## Predicate syntax\\r\\n\\r\\nThe *find* operator supports an alternative syntax for the `* has` term, and using just *term*, will search a term across all input columns.\\r\\n\\r\\nFor a summary of some filtering functions, see [where operator](./whereoperator.md).\\r\\n\\r\\n## Notes\\r\\n\\r\\n* If the `project` clause references a column that appears in multiple tables and has multiple types, a type must follow this column reference in the project clause\\r\\n* If a column appears in multiple tables and has multiple types and `project-smart` is in use, there will be a corresponding column for each type in the `find`'s result, as described in [union](./unionoperator.md)\\r\\n* When you use *project-smart*, changes in the predicate, in the source tables set, or in the tables schema, may result in a change to the output schema. If a constant result schema is needed, use *project* instead\\r\\n* `find` scope can't include [functions](../management/functions.md). To include a function in the find scope, define a [let statement](./letstatement.md) with [view keyword](./letstatement.md).\\r\\n\\r\\n## Performance tips\\r\\n\\r\\n* Use [tables](../management/tables.md) as opposed to [tabular expressions](./tabularexpressionstatements.md).\\r\\nIf tabular expression, the find operator falls back to a `union` query that can result in degraded performance.\\r\\n* If a column that appears in multiple tables and has multiple types, is part of the project clause, prefer adding a *ColumnType* to the project clause over modifying the table before passing it to `find`.\\r\\n* Add time-based filters to the predicate. Use a datetime column value or [ingestion_time()](./ingestiontimefunction.md).\\r\\n* Search in specific columns rather than a full text search.\\r\\n* It's better not to reference columns that appear in multiple tables and have multiple types. If the predicate is valid when resolving such columns type for more than one type, the query will fall back to union.\\r\\nFor example, see [examples of cases where find will act as a union](./findoperator.md#examples-of-cases-where-find-will-act-as-union).\",'### Term lookup across all tables in current database\\r\\n\\r\\nThe query finds all rows from all tables in the current database in which any column includes the word `Hernandez`. The resulting records are transformed according to the [output schema](#output-schema). The output includes rows from the `Customers` table and the `SalesTable` table of the `ContosoSales` database.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/ContosoSales?query=H4sIAAAAAAAAA0vLzEtRUPJILcpLzEtJrVICAAv0zUwQAAAA\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nfind \"Hernandez\"\\r\\n```\\r\\n\\r\\n### Term lookup across all tables matching a name pattern in the current database\\r\\n\\r\\nThe query finds all rows from all tables in the current database whose name starts with `C`, and in which any column includes the word `Hernandez`. The resulting records are transformed according to the [output schema](#output-schema). Now, the output only contains records from the `Customers` table.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/ContosoSales?query=H4sIAAAAAAAAA0vLzEtRyMxT0HDW0lQoz0gtSlXQUshILFZQ8kgtykvMS0mtUgIA+50LFCQAAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nfind in (C*) where * has \"Hernandez\"\\r\\n```\\r\\n\\r\\n### Term lookup across all tables in all databases in the cluster\\r\\n\\r\\nThe query finds all rows from all tables in all databases in which any column includes the word `Kusto`.\\r\\nThis query is a [cross-database](./cross-cluster-or-database-queries.md) query.\\r\\nThe resulting records are transformed according to the [output schema](#output-schema).\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA0vLzEtRyMxT0EhJLElMSixO1VDXUtfU09JUKM9ILUpV0FLISCxWUPIuLS7JVwIAAccP5C0AAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nfind in (database(\\'*\\').*) where * has \"Kusto\"\\r\\n```\\r\\n\\r\\n### Term lookup across all tables and databases matching a name pattern in the cluster\\r\\n\\r\\nThe query finds all rows from all tables whose name starts with `K` in all databases whose name start with `B` and in which any column includes the word `Kusto`.\\r\\nThe resulting records are transformed according to the [output schema](#output-schema).\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA0vLzEtRyMxT0EhJLElMSixO1VAK1lLS1HPW0lQoz0gtSlXQUshILFZQ8i4tLslXAgCcXznPLwAAAA==\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nfind in (database(\"S*\").C*) where * has \"Kusto\"\\r\\n```\\r\\n\\r\\n### Term lookup in several clusters\\r\\n\\r\\nThe query finds all rows from all tables whose name starts with `K` in all databases whose name start with `B` and in which any column includes the word `Kusto`.\\r\\nThe resulting records are transformed according to the [output schema](#output-schema).\\r\\n\\r\\n```\\r\\nfind in (cluster(\"cluster1\").database(\"B*\").K*, cluster(\"cluster2\").database(\"C*\".*))\\r\\nwhere * has \"Kusto\"\\r\\n```\\r\\n\\r\\n## Examples of `find` output results  \\r\\n\\r\\nThe following examples show how `find` can be used over two tables: *EventsTable1* and *EventsTable2*.\\r\\nAssume we have the next content of these two tables:\\r\\n\\r\\n### EventsTable1\\r\\n\\r\\n|Session_Id|Level|EventText|Version\\r\\n|---|---|---|---|\\r\\n|acbd207d-51aa-4df7-bfa7-be70eb68f04e|Information|Some Text1|v1.0.0\\r\\n|acbd207d-51aa-4df7-bfa7-be70eb68f04e|Error|Some Text2|v1.0.0\\r\\n|28b8e46e-3c31-43cf-83cb-48921c3986fc|Error|Some Text3|v1.0.1\\r\\n|8f057b11-3281-45c3-a856-05ebb18a3c59|Information|Some Text4|v1.1.0\\r\\n\\r\\n### EventsTable2\\r\\n\\r\\n|Session_Id|Level|EventText|EventName\\r\\n|---|---|---|---|\\r\\n|f7d5f95f-f580-4ea6-830b-5776c8d64fdd|Information|Some Other Text1|Event1\\r\\n|acbd207d-51aa-4df7-bfa7-be70eb68f04e|Information|Some Other Text2|Event2\\r\\n|acbd207d-51aa-4df7-bfa7-be70eb68f04e|Error|Some Other Text3|Event3\\r\\n|15eaeab5-8576-4b58-8fc6-478f75d8fee4|Error|Some Other Text4|Event4\\r\\n\\r\\n### Search in common columns, project common and uncommon columns, and pack the rest  \\r\\n\\r\\n```\\r\\nfind in (EventsTable1, EventsTable2) \\r\\n     where Session_Id == \\'acbd207d-51aa-4df7-bfa7-be70eb68f04e\\' and Level == \\'Error\\' \\r\\n     project EventText, Version, EventName, pack_all()\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|source_|EventText|Version|EventName|pack_\\r\\n|---|---|---|---|---|\\r\\n|EventsTable1|Some Text2|v1.0.0||{\"Session_Id\":\"acbd207d-51aa-4df7-bfa7-be70eb68f04e\", \"Level\":\"Error\"}\\r\\n|EventsTable2|Some Other Text3||Event3|{\"Session_Id\":\"acbd207d-51aa-4df7-bfa7-be70eb68f04e\", \"Level\":\"Error\"}\\r\\n\\r\\n### Search in common and uncommon columns\\r\\n\\r\\n```\\r\\nfind Version == \\'v1.0.0\\' or EventName == \\'Event1\\' project Session_Id, EventText, Version, EventName\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|source_|Session_Id|EventText|Version|EventName|\\r\\n|---|---|---|---|---|\\r\\n|EventsTable1|acbd207d-51aa-4df7-bfa7-be70eb68f04e|Some Text1|v1.0.0\\r\\n|EventsTable1|acbd207d-51aa-4df7-bfa7-be70eb68f04e|Some Text2|v1.0.0\\r\\n|EventsTable2|f7d5f95f-f580-4ea6-830b-5776c8d64fdd|Some Other Text1||Event1\\r\\n\\r\\nNote: in practice, *EventsTable1* rows will be filtered with ```Version == \\'v1.0.0\\'``` predicate and *EventsTable2* rows will be filtered with ```EventName == \\'Event1\\'``` predicate.\\r\\n\\r\\n### Use abbreviated notation to search across all tables in the current database\\r\\n\\r\\n```\\r\\nfind Session_Id == \\'acbd207d-51aa-4df7-bfa7-be70eb68f04e\\'\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|source_|Session_Id|Level|EventText|pack_|\\r\\n|---|---|---|---|---|\\r\\n|EventsTable1|acbd207d-51aa-4df7-bfa7-be70eb68f04e|Information|Some Text1|{\"Version\":\"v1.0.0\"}\\r\\n|EventsTable1|acbd207d-51aa-4df7-bfa7-be70eb68f04e|Error|Some Text2|{\"Version\":\"v1.0.0\"}\\r\\n|EventsTable2|acbd207d-51aa-4df7-bfa7-be70eb68f04e|Information|Some Other Text2|{\"EventName\":\"Event2\"}\\r\\n|EventsTable2|acbd207d-51aa-4df7-bfa7-be70eb68f04e|Error|Some Other Text3|{\"EventName\":\"Event3\"}\\r\\n\\r\\n### Return the results from each row as a property bag\\r\\n\\r\\n```\\r\\nfind Session_Id == \\'acbd207d-51aa-4df7-bfa7-be70eb68f04e\\' project pack_all()\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|source_|pack_|\\r\\n|---|---|\\r\\n|EventsTable1|{\"Session_Id\":\"acbd207d-51aa-4df7-bfa7-be70eb68f04e\", \"Level\":\"Information\", \"EventText\":\"Some Text1\", \"Version\":\"v1.0.0\"}\\r\\n|EventsTable1|{\"Session_Id\":\"acbd207d-51aa-4df7-bfa7-be70eb68f04e\", \"Level\":\"Error\", \"EventText\":\"Some Text2\", \"Version\":\"v1.0.0\"}\\r\\n|EventsTable2|{\"Session_Id\":\"acbd207d-51aa-4df7-bfa7-be70eb68f04e\", \"Level\":\"Information\", \"EventText\":\"Some Other Text2\", \"EventName\":\"Event2\"}\\r\\n|EventsTable2|{\"Session_Id\":\"acbd207d-51aa-4df7-bfa7-be70eb68f04e\", \"Level\":\"Error\", \"EventText\":\"Some Other Text3\", \"EventName\":\"Event3\"}\\r\\n\\r\\n## Examples of cases where `find` will act as `union`\\r\\n\\r\\n### Using a non-tabular expression as find operand\\r\\n\\r\\n```\\r\\nlet PartialEventsTable1 = view() { EventsTable1 | where Level == \\'Error\\' };\\r\\nfind in (PartialEventsTable1, EventsTable2) \\r\\n     where Session_Id == \\'acbd207d-51aa-4df7-bfa7-be70eb68f04e\\'\\r\\n```\\r\\n\\r\\n### Referencing a column that appears in multiple tables and has multiple types\\r\\n\\r\\nAssume we\\'ve created two tables by running:\\r\\n\\r\\n```\\r\\n.create tables \\r\\n  Table1 (Level:string, Timestamp:datetime, ProcessId:string),\\r\\n  Table2 (Level:string, Timestamp:datetime, ProcessId:int64)\\r\\n```\\r\\n\\r\\n* The following query will be executed as `union`.\\r\\n\\r\\n\\r\\n\\r\\n```\\r\\nfind in (Table1, Table2) where ProcessId == 1001\\r\\n```\\r\\n\\r\\nThe output result schema will be *(Level:string, Timestamp, ProcessId_string, ProcessId_int)*.\\r\\n\\r\\n* The following query will also be executed as `union`, but will produce a different result schema.\\r\\n\\r\\n\\r\\n\\r\\n```\\r\\nfind in (Table1, Table2) where ProcessId == 1001 project Level, Timestamp, ProcessId:string \\r\\n```\\r\\n\\r\\nThe output result schema will be *(Level:string, Timestamp, ProcessId_string)*',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/findoperator\",\"findoperator.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.OperatorToken,\"fork\",\"Runs multiple consumer operators in parallel.\",\"## Syntax\\r\\n\\r\\n*T* `|` `fork` [*name*`=`]`(`*subquery*`)` [*name*`=`]`(`*subquery*`)` ...\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *subquery* | string | &check; | A downstream pipeline of [supported query operators](#supported-query-operators).|\\r\\n| *name* | string | | A temporary name for the subquery result table.|\\r\\n\\r\\n> [!NOTE]\\r\\n>\\r\\n> * Avoid using `fork` with a single *subquery*.\\r\\n> * The name of the results tab will be the same name as provided with the `name` parameter or the [`as` operator](asoperator.md).\\r\\n\\r\\n### Supported query operators\\r\\n\\r\\n* [`as`](asoperator.md)\\r\\n* [`count`](countoperator.md)\\r\\n* [`extend`](extendoperator.md)\\r\\n* [`parse`](parseoperator.md)\\r\\n* [`where`](whereoperator.md)\\r\\n* [`take`](takeoperator.md)\\r\\n* [`project`](projectoperator.md)\\r\\n* [`project-away`](projectawayoperator.md)\\r\\n* [`project-keep`](project-keep-operator.md)\\r\\n* [`project-rename`](projectrenameoperator.md)\\r\\n* [`project-reorder`](projectreorderoperator.md)\\r\\n* [`summarize`](summarizeoperator.md)\\r\\n* [`top`](topoperator.md)\\r\\n* [`top-nested`](topnestedoperator.md)\\r\\n* [`sort`](./sort-operator.md)\\r\\n* [`mv-expand`](mvexpandoperator.md)\\r\\n* [`reduce`](reduceoperator.md)\\r\\n\\r\\n## Returns\\r\\n\\r\\nMultiple result tables, one for each of the *subquery* arguments.\\r\\n\\r\\n## Tips\\r\\n\\r\\n* Use [`materialize`](materializefunction.md) as a replacement for [`join`](joinoperator.md) or [`union`](unionoperator.md) on fork legs. The input stream will be cached by materialize and then the cached expression can be used in join/union legs.\\r\\n* Use [batch](batches.md) with [`materialize`](materializefunction.md) of tabular expression statements instead of the `fork` operator.\",'### Unnamed subqueries\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAwsuyS/KdS1LzSsp5uWqUSjPSC1KVQguSSxJVbC1VVBy8/EP8nRxVALJpeUXZfNyKQCBBlSdS2piSUaxS2ZRanKJgjaU65mXAhGwUzDURFXvmZdVWpSZitABE0DRAwCWU8oSkwAAAA==\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nStormEvents\\r\\n| where State == \"FLORIDA\"\\r\\n| fork\\r\\n    ( where DeathsDirect + DeathsIndirect > 1)\\r\\n    ( where InjuriesDirect + InjuriesIndirect > 1)\\r\\n```\\r\\n\\r\\n### Named subqueries\\r\\n\\r\\nIn the following examples, the result tables will be named \"StormsWithDeaths\" and \"StormsWithInjuries\".\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAwsuyS/KdS1LzSsp5uWqUSjPSC1KVQguSSxJVbC1VVBy8/EP8nRxVALJpeUXZfNyKQCBBkSZS2piSUaxS2ZRanKJgjaU65mXAhGwUzBUqFFILAaaBrSiODyzJAOiQhPFEM+8rNKizFSEMTABfAbB1GgCAM0zVJu/AAAA\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nStormEvents\\r\\n| where State == \"FLORIDA\"\\r\\n| fork\\r\\n    (where DeathsDirect + DeathsIndirect > 1 | as StormsWithDeaths)\\r\\n    (where InjuriesDirect + InjuriesIndirect > 1 | as StormsWithInjuries)\\r\\n```\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAwsuyS/KdS1LzSsp5uWqUSjPSC1KVQguSSxJVbC1VVBy8/EP8nRxVALJpeUXZfNyKQBBMEhTcXhmSYZLamJJRrGCrYIGRCeE75JZlJpcoqAN5XrmpUAE7BQMNdFN8MzLKi3KTEUyAyYCNwUmgGIOAGODP2W5AAAA\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nStormEvents\\r\\n| where State == \"FLORIDA\"\\r\\n| fork\\r\\n    StormsWithDeaths = (where DeathsDirect + DeathsIndirect > 1)\\r\\n    StormsWithInjuries = (where InjuriesDirect + InjuriesIndirect > 1)\\r\\n```',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/forkoperator\",\"forkoperator.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"format_bytes\",\"Formats a number as a string representing data size in bytes.\",\"## Syntax\\r\\n\\r\\n`format_bytes(`*size* [`,` *precision* [`,` *units*]]`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *size* | real | &check; | The value to be formatted as data size in bytes.|\\r\\n| *precision* | int | | The number of digits the value will be rounded to after the decimal point. The default is 0.|\\r\\n| *units* | string | | The units of the target data size: `Bytes`, `KB`, `MB`, `GB`, `TB`, or `PB`. If this parameter is empty, the units will be auto-selected based on input value.|\\r\\n\\r\\n## Returns\\r\\n\\r\\nA string of *size* formatted as data size in bytes.\",'> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAysoyswrUeAqM1SwVUjLL8pNLIlPqixJLdYwNTPR1OEqM0IXNzQwNjbSUTAESRqjSxoZGIDlQZImuCR1FMDyprjlDXQUlLydlDQBI/ZQzZ0AAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint \\r\\nv1 = format_bytes(564),\\r\\nv2 = format_bytes(10332, 1),\\r\\nv3 = format_bytes(20010332),\\r\\nv4 = format_bytes(20010332, 2),\\r\\nv5 = format_bytes(20010332, 0, \"KB\")\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|v1|v2|v3|v4|v5|\\r\\n|---|---|---|---|---|\\r\\n|564 Bytes|10.1 KB|19 MB|19.08 MB|19541 KB|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/format-bytesfunction\",\"format-bytesfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"format_datetime\",\"Formats a datetime according to the provided format.\",\"## Syntax\\r\\n\\r\\n`format_datetime(`*date* `,` *format*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *date* | datetime | &check; | The value to format.|\\r\\n| *format* | string | &check;| The output format comprised of one or more of the [supported format elements](#supported-format-elements).\\r\\n\\r\\n### Supported format elements\\r\\n\\r\\nThe *format* parameter should include one or more of the following elements:\\r\\n\\r\\n|Format specifier| Description| Examples|\\r\\n|--|--|--|\\r\\n|`d`| The day of the month, from 1 through 31.| 2009-06-01T13:45:30 -> 1, 2009-06-15T13:45:30 -> 15\\r\\n|`dd`| The day of the month, from 01 through 31.| 2009-06-01T13:45:30 -> 01, 2009-06-15T13:45:30 -> 15\\r\\n|`f`| The tenths of a second in a date and time value.| 2009-06-15T13:45:30.6170000 -> 6, 2009-06-15T13:45:30.05 -> 0\\r\\n|`ff`| The hundredths of a second in a date and time value.| 2009-06-15T13:45:30.6170000 -> 61, 2009-06-15T13:45:30.0050000 -> 00\\r\\n|`fff`| The milliseconds in a date and time value.| 6/15/2009 13:45:30.617 -> 617, 6/15/2009 13:45:30.0005 -> 000\\r\\n|`ffff`| The ten thousandths of a second in a date and time value.| 2009-06-15T13:45:30.6175000 -> 6175, 2009-06-15T13:45:30.0000500 -> 0000\\r\\n|`fffff`| The hundred thousandths of a second in a date and time value. |2009-06-15T13:45:30.6175400 -> 61754, 2009-06-15T13:45:30.000005 -> 00000\\r\\n|`ffffff`| The millionths of a second in a date and time value.| 2009-06-15T13:45:30.6175420 -> 617542, 2009-06-15T13:45:30.0000005 -> 000000\\r\\n|`fffffff`| The ten millionths of a second in a date and time value.| 2009-06-15T13:45:30.6175425 -> 6175425, 2009-06-15T13:45:30.0001150 -> 0001150\\r\\n|`F`| If non-zero, the tenths of a second in a date and time value.| 2009-06-15T13:45:30.6170000 -> 6, 2009-06-15T13:45:30.0500000 -> (no output)\\r\\n|`FF`| If non-zero, the hundredths of a second in a date and time value.| 2009-06-15T13:45:30.6170000 -> 61, 2009-06-15T13:45:30.0050000 -> (no output)\\r\\n|`FFF`| If non-zero, the milliseconds in a date and time value.| 2009-06-15T13:45:30.6170000 -> 617, 2009-06-15T13:45:30.0005000 -> (no output)\\r\\n|`FFFF`| If non-zero, the ten thousandths of a second in a date and time value.|2009-06-15T13:45:30.5275000 -> 5275, 2009-06-15T13:45:30.0000500 -> (no output)\\r\\n|`FFFFF`| If non-zero, the hundred thousandths of a second in a date and time value.| 2009-06-15T13:45:30.6175400 -> 61754, 2009-06-15T13:45:30.0000050 -> (no output)\\r\\n|`FFFFFF`| If non-zero, the millionths of a second in a date and time value.| 2009-06-15T13:45:30.6175420 -> 617542, 2009-06-15T13:45:30.0000005 -> (no output)\\r\\n|`FFFFFFF`| If non-zero, the ten millionths of a second in a date and time value.| 2009-06-15T13:45:30.6175425 -> 6175425, 2009-06-15T13:45:30.0001150 -> 000115\\r\\n|`h`| The hour, using a 12-hour clock from 1 to 12.| 2009-06-15T01:45:30 -> 1, 2009-06-15T13:45:30 -> 1\\r\\n|`hh`| The hour, using a 12-hour clock from 01 to 12.| 2009-06-15T01:45:30 -> 01, 2009-06-15T13:45:30 -> 01\\r\\n|`H`| The hour, using a 24-hour clock from 0 to 23.| 2009-06-15T01:45:30 -> 1, 2009-06-15T13:45:30 -> 13\\r\\n|`HH`| The hour, using a 24-hour clock from 00 to 23.| 2009-06-15T01:45:30 -> 01, 2009-06-15T13:45:30 -> 13\\r\\n|`m`| The minute, from 0 through 59.| 2009-06-15T01:09:30 -> 9, 2009-06-15T13:29:30 -> 29\\r\\n|`mm`| The minute, from 00 through 59.| 2009-06-15T01:09:30 -> 09, 2009-06-15T01:45:30 -> 45\\r\\n|`M`| The month, from 1 through 12.| 2009-06-15T13:45:30 -> 6\\r\\n|`MM`| The month, from 01 through 12.| 2009-06-15T13:45:30 -> 06\\r\\n|`s`| The second, from 0 through 59.| 2009-06-15T13:45:09 -> 9\\r\\n|`ss`| The second, from 00 through 59.| 2009-06-15T13:45:09 -> 09\\r\\n|`y`| The year, from 0 to 99.| 0001-01-01T00:00:00 -> 1, 0900-01-01T00:00:00 -> 0, 1900-01-01T00:00:00 -> 0, 2009-06-15T13:45:30 -> 9, 2019-06-15T13:45:30 -> 19\\r\\n|`yy`| The year, from 00 to 99.| 0001-01-01T00:00:00 -> 01, 0900-01-01T00:00:00 -> 00, 1900-01-01T00:00:00 -> 00, 2019-06-15T13:45:30 -> 19\\r\\n|`yyyy`| The year as a four-digit number.| 0001-01-01T00:00:00 -> 0001, 0900-01-01T00:00:00 -> 0900, 1900-01-01T00:00:00 -> 1900, 2009-06-15T13:45:30 -> 2009\\r\\n|`tt`| AM / PM hours| 2009-06-15T13:45:09 -> PM\\r\\n\\r\\n### Supported delimiters\\r\\n\\r\\nThe format specifier can include the following delimiters:\\r\\n\\r\\n|Delimiter|Comment|\\r\\n|---------|-------|\\r\\n|`' '`| Space|\\r\\n|`'/'`||\\r\\n|`'-'`|Dash|\\r\\n|`':'`||\\r\\n|`','`||\\r\\n|`'.'`||\\r\\n|`'_'`||\\r\\n|`'['`||\\r\\n|`']'`||\\r\\n\\r\\n## Returns\\r\\n\\r\\nA string with *date* formatted as specified by *format*.\",\"> [!div class=\\\"nextstepaction\\\"]\\r\\n> <a href=\\\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA8tJLVFIKVGwVUhJLEktycxN1TAyMDTXNTDUNbJUMLC0MjCwMjDVtOYqKMrMK1HgKjO0Tcsvyk0siYerTynRUa+s1PX11U1JUYj28LDKzbUqLo5V19QBKjfCplwBqB6kA6IBoZ6rzBiXcpjxGRkQ5QolJUAdAJCyrq29AAAA\\\" target=\\\"_blank\\\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nlet dt = datetime(2017-01-29 09:00:05);\\r\\nprint \\r\\nv1=format_datetime(dt,'yy-MM-dd [HH:mm:ss]'), \\r\\nv2=format_datetime(dt, 'yyyy-M-dd [H:mm:ss]'),\\r\\nv3=format_datetime(dt, 'yy-MM-dd [hh:mm:ss tt]')\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|v1|v2|v3|\\r\\n|--|--|--|\\r\\n|17-01-29 [09:00:05]|2017-1-29 [9:00:05]|17-01-29 [09:00:05 AM]|\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/format-datetimefunction\",\"format-datetimefunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"format_ipv4\",\"Parses the input with a netmask and returns a string representing the IPv4 address.\",\"## Syntax\\r\\n\\r\\n`format_ipv4(`*ip* [`,` *prefix*`])`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *ip* | string | &check; | The IPv4 address. The format may be a string or number representation in big-endian order.|\\r\\n| *prefix* | int | | An integer from 0 to 32 representing the number of most-significant bits that are taken into account. If unspecified, all 32 bit-masks are used.|\\r\\n\\r\\n## Returns\\r\\n\\r\\nIf conversion is successful, the result will be a string representing IPv4 address.\\r\\nIf conversion isn't successful, the result will be an empty string.\",\"> [!div class=\\\"nextstepaction\\\"]\\r\\n> <a href=\\\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA0tJLAHCpJxUjcSUlKLU4mKr4pKizLx0HYXcxOJsq5z8vHRNrmguBXVDSyM9QzMLPUM9Q3UdBSMTHQU4wJA1NsIpq29kgqIAmyzIUg1dQ00dBa5YrhqF1IqS1LwUBaDjSnNKFGwV0vKLchNL4jMLykxgjoa4FqQBbi1EeTxIHFUPWAhNIwAom5ZMBgEAAA==\\\" target=\\\"_blank\\\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\ndatatable(address:string, mask:long)\\r\\n[\\r\\n '192.168.1.1', 24,          \\r\\n '192.168.1.1', 32,          \\r\\n '192.168.1.1/24', 32,       \\r\\n '192.168.1.1/24', long(-1), \\r\\n]\\r\\n| extend result = format_ipv4(address, mask), \\r\\n         result_mask = format_ipv4_mask(address, mask)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|address|mask|result|result_mask|\\r\\n|---|---|---|---|\\r\\n|192.168.1.1|24|192.168.1.0|192.168.1.0/24|\\r\\n|192.168.1.1|32|192.168.1.1|192.168.1.1/32|\\r\\n|192.168.1.1/24|32|192.168.1.0|192.168.1.0/24|\\r\\n|192.168.1.1/24|-1|||\\r\\n\\r\\n## See also\\r\\n\\r\\n* For IPv4 address formatting including CIDR notation, see [format_ipv4_mask()](format-ipv4-mask-function.md).\\r\\n* For a list of functions related to IP addresses, see [IPv4 and IPv6 functions](scalarfunctions.md#ipv4ipv6-functions).\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/format-ipv4-function\",\"format-ipv4-function.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"format_ipv4_mask\",\"Parses the input with a netmask and returns a string representing the IPv4 address in CIDR notation.\",\"## Syntax\\r\\n\\r\\n`format_ipv4_mask(`*ip* [`,` *prefix*`])`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *ip* | string | &check; | The IPv4 address as CIDR notation. The format may be a string or number representation in big-endian order.|\\r\\n| *prefix* | int | | An integer from 0 to 32 representing the number of most-significant bits that are taken into account. If unspecified, all 32 bit-masks are used.|\\r\\n\\r\\n## Returns\\r\\n\\r\\nIf conversion is successful, the result will be a string representing IPv4 address as CIDR notation.\\r\\nIf conversion isn't successful, the result will be an empty string.\",\"> [!div class=\\\"nextstepaction\\\"]\\r\\n> <a href=\\\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA0tJLAHCpJxUjcSUlKLU4mKr4pKizLx0HYXcxOJsq5z8vHRNrmguBXVDSyM9QzMLPUM9Q3UdBSMTHQU4wJA1NsIpq29kgqIAmyzIUg1dQ00dBa5YrhqF1IqS1LwUBaDjSnNKFGwV0vKLchNL4jMLykxgjoa4FqQBbi1EeTxIHFUPWAhNIwAom5ZMBgEAAA==\\\" target=\\\"_blank\\\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\ndatatable(address:string, mask:long)\\r\\n[\\r\\n '192.168.1.1', 24,          \\r\\n '192.168.1.1', 32,          \\r\\n '192.168.1.1/24', 32,       \\r\\n '192.168.1.1/24', long(-1), \\r\\n]\\r\\n| extend result = format_ipv4(address, mask), \\r\\n         result_mask = format_ipv4_mask(address, mask)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|address|mask|result|result_mask|\\r\\n|---|---|---|---|\\r\\n|192.168.1.1|24|192.168.1.0|192.168.1.0/24|\\r\\n|192.168.1.1|32|192.168.1.1|192.168.1.1/32|\\r\\n|192.168.1.1/24|32|192.168.1.0|192.168.1.0/24|\\r\\n|192.168.1.1/24|-1|||\\r\\n\\r\\n## See also\\r\\n\\r\\n* For IPv4 address formatting without CIDR notation, see [format_ipv4()](format-ipv4-function.md).\\r\\n* For a list of functions related to IP addresses, see [IPv4 and IPv6 functions](scalarfunctions.md#ipv4ipv6-functions).\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/format-ipv4-mask-function\",\"format-ipv4-mask-function.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"format_timespan\",\"Formats a timespan according to the provided format.\",\"## Syntax\\r\\n\\r\\n`format_timespan(`*timespan* `,` *format*`)`\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *timespan* | timespan | &check; | The value to format.|\\r\\n| *format* | string | &check;| The output format comprised of one or more of the [supported format elements](#supported-format-elements).\\r\\n\\r\\n### Supported format elements\\r\\n\\r\\n|Format specifier| Description| Examples\\r\\n|---|---|---\\r\\n|`d`-`dddddddd`| The number of whole days in the time interval. Padded with zeros if needed.| 15.13:45:30: d -> 15, dd -> 15, ddd -> 015\\r\\n|`f`| The tenths of a second in the time interval.| 15.13:45:30.6170000 -> 6, 15.13:45:30.05 -> 0\\r\\n|`ff`| The hundredths of a second in the time interval.| 15.13:45:30.6170000 -> 61, 15.13:45:30.0050000 -> 00\\r\\n|`fff`| The milliseconds in the time interval.| 6/15/2009 13:45:30.617 -> 617, 6/15/2009 13:45:30.0005 -> 000\\r\\n|`ffff`| The ten thousandths of a second in the time interval.| 15.13:45:30.6175000 -> 6175, 15.13:45:30.0000500 -> 0000\\r\\n|`fffff`| The hundred thousandths of a second in the time interval.| 15.13:45:30.6175400 -> 61754, 15.13:45:30.000005 -> 00000\\r\\n|`ffffff`| The millionths of a second in the time interval.| 15.13:45:30.6175420 -> 617542, 15.13:45:30.0000005 -> 000000\\r\\n|`fffffff`| The ten millionths of a second in the time interval.| 15.13:45:30.6175425 -> 6175425, 15.13:45:30.0001150 -> 0001150\\r\\n|`F`| If non-zero, the tenths of a second in the time interval.| 15.13:45:30.6170000 -> 6, 15.13:45:30.0500000 -> (no output)\\r\\n|`FF`| If non-zero, the hundredths of a second in the time interval.| 15.13:45:30.6170000 -> 61, 15.13:45:30.0050000 -> (no output)\\r\\n|`FFF`| If non-zero, the milliseconds in the time interval.| 15.13:45:30.6170000 -> 617, 15.13:45:30.0005000 -> (no output)\\r\\n|`FFFF`| If non-zero, the ten thousandths of a second in the time interval. |15.13:45:30.5275000 -> 5275, 15.13:45:30.0000500 -> (no output)\\r\\n|`FFFFF`| If non-zero, the hundred thousandths of a second in the time interval.| 15.13:45:30.6175400 -> 61754, 15.13:45:30.0000050 -> (no output)\\r\\n|`FFFFFF`| If non-zero, the millionths of a second in the time interval.| 15.13:45:30.6175420 -> 617542, 15.13:45:30.0000005 -> (no output)\\r\\n|`FFFFFFF`| If non-zero, the ten millionths of a second in the time interval.| 15.13:45:30.6175425 -> 6175425, 15.13:45:30.0001150 -> 000115\\r\\n|`H`| The hour, using a 24-hour clock from 0 to 23.| 15.01:45:30 -> 1, 15.13:45:30 -> 13\\r\\n|`HH`| The hour, using a 24-hour clock from 00 to 23.| 15.01:45:30 -> 01, 15.13:45:30 -> 13\\r\\n|`m`| The number of whole minutes in the time interval that aren't included as part of hours or days. Single-digit minutes don't have a leading zero.| 15.01:09:30 -> 9, 15.13:29:30 -> 29\\r\\n|`mm`| The number of whole minutes in the time interval that aren't included as part of hours or days. Single-digit minutes have a leading zero.| 15.01:09:30 -> 09, 15.01:45:30 -> 45\\r\\n|`s`| The number of whole seconds in the time interval that aren't included as part of hours, days, or minutes. Single-digit seconds don't have a leading zero.| 15.13:45:09 -> 9\\r\\n|`ss`|The number of whole seconds in the time interval that aren't included as part of hours, days, or minutes. Single-digit seconds have a leading zero.| 15.13:45:09 -> 09\\r\\n\\r\\n### Supported delimiters\\r\\n\\r\\nThe format specifier can include following delimiters:\\r\\n\\r\\n|Delimiter|Comment|\\r\\n|---------|-------|\\r\\n|`' '`| Space|\\r\\n|`'/'`||\\r\\n|`'-'`|Dash|\\r\\n|`':'`||\\r\\n|`','`||\\r\\n|`'.'`||\\r\\n|`'_'`||\\r\\n|`'['`||\\r\\n|`']'`||\\r\\n\\r\\n## Returns\\r\\n\\r\\nA string with *timespan* formatted as specified by *format*.\",'> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA8tJLVEoUbBVKMnMTdUwstQzsLQyMLAyMNUzNDI2MdW05iooyswrUeAqM7RNyy/KTSyJB6ksLkjM0yjRUVBPSdHLyLDKzbUqLrZyc1PX1OEqM8KhEKgSolAhOg0CYtU1AcM/CQ1/AAAA\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nlet t = time(29.09:00:05.12345);\\r\\nprint \\r\\nv1=format_timespan(t, \\'dd.hh:mm:ss:FF\\'),\\r\\nv2=format_timespan(t, \\'ddd.h:mm:ss [fffffff]\\')\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|v1|v2|\\r\\n|---|---|\\r\\n|29.09:00:05:12|029.9:00:05 [1234500]|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/format-timespanfunction\",\"format-timespanfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"funnel_sequence\",\"Calculates distinct count of users who have taken a sequence of states, and the distribution of previous/next states that have led to/were followed by the sequence. The plugin is invoked with the [`evaluate`](evaluateoperator.md) operator.\",\"## Syntax\\r\\n\\r\\n*T* `| evaluate` `funnel_sequence(`*IdColumn*`,` *TimelineColumn*`,` *Start*`,` *End*`,` *MaxSequenceStepWindow*, *Step*, *StateColumn*, *Sequence*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *T* | string | &check; | The input tabular expression. |\\r\\n| *IdColum* | string | &check; | The column reference representing the ID. This column must be present in *T*.|\\r\\n| *TimelineColumn* | string | &check; | The column reference representing the timeline. This column must be present in *T*.|\\r\\n| *Start* | datetime, timespan, or long | &check; | The analysis start period.|\\r\\n| *End* | datetime, timespan, or long | &check; | The analysis end period.|\\r\\n| *MaxSequenceStepWindow* | datetime, timespan, or long | &check; | The value of the max allowed timespan between two sequential steps in the sequence.|\\r\\n| *Step* | datetime, timespan, or long | &check; | The analysis step period, or bin. |\\r\\n| *StateColumn* | string | &check; | The column reference representing the state. This column must be present in *T*.|\\r\\n| *Sequence* | dynamic | &check; | An array with the sequence values that are looked up in `StateColumn`.|\\r\\n\\r\\n## Returns\\r\\n\\r\\nReturns three output tables, which are useful for constructing a sankey diagram for the analyzed sequence:\\r\\n\\r\\n* Table #1 - prev-sequence-next `dcount`\\r\\n  * TimelineColumn: the analyzed time window\\r\\n  * prev: the prev state (may be empty if there were any users that only had events for the searched sequence, but not any events prior to it).\\r\\n  * next: the next state (may be empty if there were any users that only had events for the searched sequence, but not any events that followed it).\\r\\n  * `dcount`: distinct count of `IdColumn` in time window that transitioned `prev` --> `Sequence` --> `next`.\\r\\n  * samples: an array of IDs (from `IdColumn`) corresponding to the row's sequence (a maximum of 128 IDs are returned).\\r\\n* Table #2 - prev-sequence `dcount`\\r\\n  * TimelineColumn: the analyzed time window\\r\\n  * prev: the prev state (may be empty if there were any users that only had events for the searched sequence, but not any events prior to it).\\r\\n  * `dcount`: distinct count of `IdColumn` in time window that transitioned `prev` --> `Sequence` --> `next`.\\r\\n  * samples: an array of IDs (from `IdColumn`) corresponding to the row's sequence (a maximum of 128 IDs are returned).\\r\\n* Table #3 - sequence-next `dcount`\\r\\n  * TimelineColumn: the analyzed time window\\r\\n  * next: the next state (may be empty if there were any users that only had events for the searched sequence, but not any events that followed it).\\r\\n  * `dcount`: distinct count of `IdColumn` in time window that transitioned `prev` --> `Sequence` --> `next`.\\r\\n  * samples: an array of IDs (from `IdColumn`) corresponding to the row's sequence (a maximum of 128 IDs are returned).\",'### Exploring storm events\\r\\n\\r\\nThe following query looks at the table StormEvents (weather statistics for 2007) and shows which events happened before/after all Tornado events occurred in 2007.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA12OuwrCQBBFe79iOhOI5CE+SGNlIdiIAQsRGbMTXUxm4+5EEPx4VxFRYYrhcC73xjEsjTlrPoJhWIuxzfxKLA6coGgnunQ59OIYVmkOmxMKnLBtiR0cqDKWoDCWURmgZ2z2MrM/Eysh+y9+dfXuHmLdoRBUHTPVe0eXjrikYN5qZxQtVOTXoZVCNxSB8qr4L8iSZDJIUn/hL51+aKqi4Xjk86+y4tY+8zfGRpfBtv9e1d+F4QP9Gyd+DAEAAA==\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\n// Looking on StormEvents statistics: \\r\\n// Q1: What happens before Tornado event?\\r\\n// Q2: What happens after Tornado event?\\r\\nStormEvents\\r\\n| evaluate funnel_sequence(EpisodeId, StartTime, datetime(2007-01-01), datetime(2008-01-01), 1d,365d, EventType, dynamic([\\'Tornado\\']))\\r\\n```\\r\\n\\r\\nResult includes three tables:\\r\\n\\r\\n* Table #1: All possible variants of what happened before and after the sequence. For example, the second line means that there were 87 different events that had following sequence: `Hail` -> `Tornado` -> `Hail`\\r\\n\\r\\n\\r\\n|`StartTime`|`prev`|`next`|`dcount`|\\r\\n|---|---|---|---|\\r\\n|2007-01-01 00:00:00.0000000|||293|\\r\\n|2007-01-01 00:00:00.0000000|Hail|Hail|87|\\r\\n|2007-01-01 00:00:00.0000000|Thunderstorm Wind|Thunderstorm Wind|77|\\r\\n|2007-01-01 00:00:00.0000000|Hail|Thunderstorm Wind|28|\\r\\n|2007-01-01 00:00:00.0000000|Hail||28|\\r\\n|2007-01-01 00:00:00.0000000||Hail|27|\\r\\n|2007-01-01 00:00:00.0000000||Thunderstorm Wind|25|\\r\\n|2007-01-01 00:00:00.0000000|Thunderstorm Wind|Hail|24|\\r\\n|2007-01-01 00:00:00.0000000|Thunderstorm Wind||24|\\r\\n|2007-01-01 00:00:00.0000000|Flash Flood|Flash Flood|12|\\r\\n|2007-01-01 00:00:00.0000000|Thunderstorm Wind|Flash Flood|8|\\r\\n|2007-01-01 00:00:00.0000000|Flash Flood||8|\\r\\n|2007-01-01 00:00:00.0000000|Funnel Cloud|Thunderstorm Wind|6|\\r\\n|2007-01-01 00:00:00.0000000||Funnel Cloud|6|\\r\\n|2007-01-01 00:00:00.0000000||Flash Flood|6|\\r\\n|2007-01-01 00:00:00.0000000|Funnel Cloud|Funnel Cloud|6|\\r\\n|2007-01-01 00:00:00.0000000|Hail|Flash Flood|4|\\r\\n|2007-01-01 00:00:00.0000000|Flash Flood|Thunderstorm Wind|4|\\r\\n|2007-01-01 00:00:00.0000000|Hail|Funnel Cloud|4|\\r\\n|2007-01-01 00:00:00.0000000|Funnel Cloud|Hail|4|\\r\\n|2007-01-01 00:00:00.0000000|Funnel Cloud||4|\\r\\n|2007-01-01 00:00:00.0000000|Thunderstorm Wind|Funnel Cloud|3|\\r\\n|2007-01-01 00:00:00.0000000|Heavy Rain|Thunderstorm Wind|2|\\r\\n|2007-01-01 00:00:00.0000000|Flash Flood|Funnel Cloud|2|\\r\\n|2007-01-01 00:00:00.0000000|Flash Flood|Hail|2|\\r\\n|2007-01-01 00:00:00.0000000|Strong Wind|Thunderstorm Wind|1|\\r\\n|2007-01-01 00:00:00.0000000|Heavy Rain|Flash Flood|1|\\r\\n|2007-01-01 00:00:00.0000000|Heavy Rain|Hail|1|\\r\\n|2007-01-01 00:00:00.0000000|Hail|Flood|1|\\r\\n|2007-01-01 00:00:00.0000000|Lightning|Hail|1|\\r\\n|2007-01-01 00:00:00.0000000|Heavy Rain|Lightning|1|\\r\\n|2007-01-01 00:00:00.0000000|Funnel Cloud|Heavy Rain|1|\\r\\n|2007-01-01 00:00:00.0000000|Flash Flood|Flood|1|\\r\\n|2007-01-01 00:00:00.0000000|Flood|Flash Flood|1|\\r\\n|2007-01-01 00:00:00.0000000||Heavy Rain|1|\\r\\n|2007-01-01 00:00:00.0000000|Funnel Cloud|Lightning|1|\\r\\n|2007-01-01 00:00:00.0000000|Lightning|Thunderstorm Wind|1|\\r\\n|2007-01-01 00:00:00.0000000|Flood|Thunderstorm Wind|1|\\r\\n|2007-01-01 00:00:00.0000000|Hail|Lightning|1|\\r\\n|2007-01-01 00:00:00.0000000||Lightning|1|\\r\\n|2007-01-01 00:00:00.0000000|Tropical Storm|Hurricane (Typhoon)|1|\\r\\n|2007-01-01 00:00:00.0000000|Coastal Flood||1|\\r\\n|2007-01-01 00:00:00.0000000|Rip Current||1|\\r\\n|2007-01-01 00:00:00.0000000|Heavy Snow||1|\\r\\n|2007-01-01 00:00:00.0000000|Strong Wind||1|\\r\\n\\r\\n* Table #2: shows all distinct events grouped by the previous event. For example, the second line shows that there were a total of 150 events of `Hail` that happened just before `Tornado`.\\r\\n\\r\\n\\r\\n|`StartTime`|`prev`|`dcount`|\\r\\n|---------|-----|------|\\r\\n|2007-01-01 00:00:00.0000000||331|\\r\\n|2007-01-01 00:00:00.0000000|Hail|150|\\r\\n|2007-01-01 00:00:00.0000000|Thunderstorm Wind|135|\\r\\n|2007-01-01 00:00:00.0000000|Flash Flood|28|\\r\\n|2007-01-01 00:00:00.0000000|Funnel Cloud|22|\\r\\n|2007-01-01 00:00:00.0000000|Heavy Rain|5|\\r\\n|2007-01-01 00:00:00.0000000|Flood|2|\\r\\n|2007-01-01 00:00:00.0000000|Lightning|2|\\r\\n|2007-01-01 00:00:00.0000000|Strong Wind|2|\\r\\n|2007-01-01 00:00:00.0000000|Heavy Snow|1|\\r\\n|2007-01-01 00:00:00.0000000|Rip Current|1|\\r\\n|2007-01-01 00:00:00.0000000|Coastal Flood|1|\\r\\n|2007-01-01 00:00:00.0000000|Tropical Storm|1|\\r\\n\\r\\n* Table #3: shows all distinct events grouped by next event. For example, the second line shows that there were a total of 143 events of `Hail` that happened after `Tornado`.\\r\\n\\r\\n\\r\\n|`StartTime`|`next`|`dcount`|\\r\\n|---------|-----|------|\\r\\n|2007-01-01 00:00:00.0000000||332|\\r\\n|2007-01-01 00:00:00.0000000|Hail|145|\\r\\n|2007-01-01 00:00:00.0000000|Thunderstorm Wind|143|\\r\\n|2007-01-01 00:00:00.0000000|Flash Flood|32|\\r\\n|2007-01-01 00:00:00.0000000|Funnel Cloud|21|\\r\\n|2007-01-01 00:00:00.0000000|Lightning|4|\\r\\n|2007-01-01 00:00:00.0000000|Heavy Rain|2|\\r\\n|2007-01-01 00:00:00.0000000|Flood|2|\\r\\n|2007-01-01 00:00:00.0000000|Hurricane (Typhoon)|1|\\r\\n\\r\\nNow, let\\'s try to find out how the following sequence continues:  \\r\\n`Hail` -> `Tornado` -> `Thunderstorm Wind`\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAwsuyS/KdS1LzSsp5qpRSC1LzClNLElVSCvNy0vNiS9OLSxNzUtO1eBSQAWuBZnF+Smpnik66DLBJYlFJSGZuakYMilAg0uAEhpGBgbmugaGQKSJV5EFLkWGmNYam5liCoL9FVJZkKqjgGFPZV5ibmayRrS6R2JmjrqOgnpIflFeYko+mJlRmpeSWlQMChuF8My8FPVYTWQDNAHldk1eNgEAAA==\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nStormEvents\\r\\n| evaluate funnel_sequence(\\r\\n               EpisodeId,\\r\\n               StartTime,\\r\\n               datetime(2007-01-01),\\r\\n               datetime(2008-01-01),\\r\\n               1d,\\r\\n               365d,\\r\\n               EventType, \\r\\n               dynamic([\\'Hail\\', \\'Tornado\\', \\'Thunderstorm Wind\\'])\\r\\n           )\\r\\n```\\r\\n\\r\\nSkipping `Table #1` and `Table #2`, and looking at `Table #3`, we can conclude that sequence `Hail` -> `Tornado` -> `Thunderstorm Wind` in 92 events ended with this sequence, continued as `Hail` in 41 events, and turned back to `Tornado` in 14.\\r\\n\\r\\n|`StartTime`|`next`|`dcount`|\\r\\n|---------|-----|------|\\r\\n|2007-01-01 00:00:00.0000000||92|\\r\\n|2007-01-01 00:00:00.0000000|Hail|41|\\r\\n|2007-01-01 00:00:00.0000000|Tornado|14|\\r\\n|2007-01-01 00:00:00.0000000|Flash Flood|11|\\r\\n|2007-01-01 00:00:00.0000000|Lightning|2|\\r\\n|2007-01-01 00:00:00.0000000|Heavy Rain|1|\\r\\n|2007-01-01 00:00:00.0000000|Flood|1|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/funnel-sequence-plugin\",\"funnel-sequence-plugin.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"funnel_sequence_completion\",\"Calculates a funnel of completed sequence steps while comparing different time periods. The plugin is invoked with the [`evaluate`](evaluateoperator.md) operator.\",\"## Syntax\\r\\n\\r\\n*T* `| evaluate` `funnel_sequence_completion(`*IdColumn*`,` *TimelineColumn*`,` *Start*`,` *End*`,` *BinSize*`,` *StateColumn*`,` *Sequence*`,` *MaxSequenceStepWindows*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *T* | string | &check; | The input tabular expression. |\\r\\n| *IdColum* | string | &check; | The column reference representing the ID. The column must be present in *T*.|\\r\\n| *TimelineColumn* | string | &check; | The column reference representing the timeline. The column must be present in *T*.|\\r\\n| *Start* | datetime, timespan, or long | &check; | The analysis start period.|\\r\\n| *End* | datetime, timespan, or long | &check; | The analysis end period.|\\r\\n| *BinSize* | datetime, timespan, or long | &check; | The analysis window size. Each window is analyzed separately.|\\r\\n| *StateColumn* | string | &check; | The column reference representing the state. The column must be present in *T*.|\\r\\n| *Sequence* | dynamic | &check; | An array with the sequence values that are looked up in `StateColumn`.|\\r\\n| *MaxSequenceStepPeriods* | dynamic | &check; | An array with the values of the max allowed timespan between the first and last sequential steps in the sequence. Each period in the array generates a funnel analysis result.|\\r\\n\\r\\n## Returns\\r\\n\\r\\nReturns a single table useful for constructing a funnel diagram for the analyzed sequence:\\r\\n\\r\\n* `TimelineColumn`: the analyzed time window (bin), each bin in the analysis timeframe (*Start* to *End*) generates a funnel analysis separately.\\r\\n* `StateColumn`: the state of the sequence.\\r\\n* `Period`: the maximal period allowed for completing steps in the funnel sequence measured from the first step in the sequence. Each value in *MaxSequenceStepPeriods* generates a funnel analysis with a separate period.\\r\\n* `dcount`: distinct count of `IdColumn` in time window that transitioned from first sequence state to the value of `StateColumn`.\",'### Exploring Storm Events\\r\\n\\r\\nThe following query checks the completion funnel of the sequence: `Hail` -> `Tornado` -> `Thunderstorm Wind`\\r\\nin \"overall\" time of 1hour, 4hours, 1day.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA1WQywrCMBBF937F7FohQusbxKWg6xZciEjojBhIJzVJFcWPNylVFBIIw8nh3tHk4eS8tB7WgNKTVzWl4yxbjLI8nOFqoCNCjAH4I5b/xF0xmnuhnhTAyXyG/dzRtSWu4hQfLGtVpYdkK5VOBCSlsSzRdM9Ly0jWeWNr2AdZcvyoG7LKoPs15BcB03BzjFQRP21uxN4NXkA3qdsQFM4tM+lvglNl6iYIleF00yhnkHYooIjty1BK9JsQXV3xW0lAZy8fTUf1QvGNNnwDOQRUXkgBAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nlet _start = datetime(2007-01-01);\\r\\nlet _end =  datetime(2008-01-01);\\r\\nlet _windowSize = 365d;\\r\\nlet _sequence = dynamic([\\'Hail\\', \\'Tornado\\', \\'Thunderstorm Wind\\']);\\r\\nlet _periods = dynamic([1h, 4h, 1d]);\\r\\nStormEvents\\r\\n| evaluate funnel_sequence_completion(EpisodeId, StartTime, _start, _end, _windowSize, EventType, _sequence, _periods) \\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|`StartTime`|`EventType`|`Period`|`dcount`|\\r\\n|---|---|---|---|\\r\\n|2007-01-01 00:00:00.0000000|Hail|01:00:00|2877|\\r\\n|2007-01-01 00:00:00.0000000|Tornado|01:00:00|208|\\r\\n|2007-01-01 00:00:00.0000000|Thunderstorm Wind|01:00:00|87|\\r\\n|2007-01-01 00:00:00.0000000|Hail|04:00:00|2877|\\r\\n|2007-01-01 00:00:00.0000000|Tornado|04:00:00|231|\\r\\n|2007-01-01 00:00:00.0000000|Thunderstorm Wind|04:00:00|141|\\r\\n|2007-01-01 00:00:00.0000000|Hail|1.00:00:00|2877|\\r\\n|2007-01-01 00:00:00.0000000|Tornado|1.00:00:00|244|\\r\\n|2007-01-01 00:00:00.0000000|Thunderstorm Wind|1.00:00:00|155|\\r\\n\\r\\nUnderstanding the results:  \\r\\nThe outcome is three funnels (for periods: One hour, 4 hours, and one day). For each funnel step, a number of distinct counts of  are shown. You can see that the more time is given to complete the whole sequence of `Hail` -> `Tornado` -> `Thunderstorm Wind`, the higher `dcount` value is obtained. In other words, there were more occurrences of the sequence reaching the funnel step.\\r\\n\\r\\n## See also\\r\\n\\r\\n* [scan operator](scan-operator.md)',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/funnel-sequence-completion-plugin\",\"funnel-sequence-completion-plugin.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"gamma\",\"Computes the gamma function for the provided *number*.\",\"## Syntax\\r\\n\\r\\n`gamma(`*number*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *number* | real | &check; | The number used to calculate the gamma function. |\\r\\n\\r\\n## Returns\\r\\n\\r\\nGamma function of *number*.\\r\\n\\r\\n## See also\\r\\n\\r\\nFor computing log-gamma function, see [loggamma()](loggammafunction.md).\",\"\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/gammafunction\",\"\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"geo_distance_2points\",\"Calculates the shortest distance in meters between two geospatial coordinates on Earth.\",\"## Syntax\\r\\n\\r\\n`geo_distance_2points(`*p1_longitude*`,`*p1_latitude*`,`*p2_longitude*`,`*p2_latitude*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n|*p1_longitude*| real | &check; | The longitude value in degrees of the first geospatial coordinate. A valid value is in the range [-180, +180].|\\r\\n|*p1_latitude*| real | &check; | The latitude value in degrees of the first geospatial coordinate. A valid value is in the range [-90, +90].|\\r\\n|*p2_longitude*| real | &check; | The longitude value in degrees of the second geospatial coordinate. A valid value is in the range [-180, +180].|\\r\\n|*p2_latitude*| real | &check; | The latitude value in degrees of the second geospatial coordinate. A valid value is in the range [-90, +90].|\\r\\n\\r\\n## Returns\\r\\n\\r\\nThe shortest distance, in meters, between two geographic locations on Earth. If the coordinates are invalid, the query will produce a null result.\\r\\n\\r\\n> [!NOTE]\\r\\n>\\r\\n> * The geospatial coordinates are interpreted as represented by the [WGS-84](https://earth-info.nga.mil/index.php?dir=wgs84&action=wgs84) coordinate reference system.\\r\\n> * The [geodetic datum](https://en.wikipedia.org/wiki/Geodetic_datum) used to measure distance on Earth is a sphere.\",'The following example finds the shortest distance between Seattle and Los Angeles.\\r\\n\\r\\n![Distance between Seattle and Los Angeles.](images/geo-distance-2points-function/distance_2points_seattle_los_angeles.png)\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAz3KQQqAIBBA0avMskBFJ8exRWeRKAkXqaj3J1ctP+/XlvKAO/Vx5iuGlMMbR2wdDnhiCT9gLXPsizSIymp26AVYVsSeiAVIY7xCJvQzNqu02TW59QMCmjc+XwAAAA==\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint distance_in_meters = geo_distance_2points(-122.407628, 47.578557, -118.275287, 34.019056)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n| distance_in_meters |\\r\\n|--------------------|\\r\\n| 1546754.35197381   |\\r\\n\\r\\nHere\\'s an approximation of shortest path from Seattle to London. The line consists of coordinates along the LineString and within 500 meters from it.\\r\\n\\r\\n![Seattle to London LineString.](images/geo-distance-2points-function/line_seattle_london.png)\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA03Oz2rDMAwG8PueQvhkD684paW0rG+w244hBM/WEm+JHBRBKNvefU5gf3T9vp8k9tQhJHjlPEIFkqFy28AsOEF19wkT5zcMAgN1cAX2FLWBe2D0g36o9ntjYfDyPzq7wpYeGTf0grIgkv4TsNuBM1D6G/0pHE5rcHbml3eY25hm8RSwnXIiaSW3QyLUZbMt2MYb+TEF/aHkNqG6qKeSPgsn6pRVIWeOibzgrC51vV63h1Nja2ePVdN8GQOPcHTrw4wUkWEOXgQ59J4FliQ96PdE8Tr6yXwDBC8v7i4BAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nrange i from 1 to 1000000 step 1\\r\\n| project lng = rand() * real(-122), lat = rand() * 90\\r\\n| where lng between(real(-122) .. 0) and lat between(47 .. 90)\\r\\n| where geo_distance_point_to_line(lng,lat,dynamic({\"type\":\"LineString\",\"coordinates\":[[-122,47],[0,51]]})) < 500\\r\\n| render scatterchart with (kind=map)\\r\\n```\\r\\n\\r\\nThe following example finds all rows in which the shortest distance between two coordinates is between 1 meter and 11 meters.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA22MsQrCQBBEe79iygghsPY2Qjo7P+A4c0M8IbvhspgUfryJgo1WMwxv3sWtDO2D6tPuCS5OTUh58qgdgwS3IDLgiJ4WvvthtLw+qhP7rGfTGp8WvUar6b1sGX2/WucbC/9Ir/SZVFSCpoHIxo7F7uz8l34BxwMseakAAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nStormEvents\\r\\n| extend distance_1_to_11m = geo_distance_2points(BeginLon, BeginLat, EndLon, EndLat)\\r\\n| where distance_1_to_11m between (1 .. 11)\\r\\n| project distance_1_to_11m\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n| distance_1_to_11m |\\r\\n|-------------------|\\r\\n| 10.5723100154958  |\\r\\n| 7.92153588248414  |\\r\\n\\r\\nThe following example returns a null result because of the invalid coordinate input.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAysoyswrUUjJLC5JzEtOVbBVSE/Nj4dx440K8oHSxRrGBgY6hiCoCQDd7v6oMAAAAA==\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint distance = geo_distance_2points(300,1,1,1)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n| distance |\\r\\n|----------|\\r\\n|          |',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/geo-distance-2points-function\",\"geo-distance-2points-function.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"geo_distance_point_to_line\",\"Calculates the shortest distance in meters between a coordinate and a line or multiline on Earth.\",'## Syntax\\r\\n\\r\\n`geo_distance_point_to_line(`*longitude*`,`*latitude*`,`*lineString*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *longitude* | real | &check; | The geospatial coordinate longitude value in degrees. A valid value is in the range [-180, +180].|\\r\\n| *latitude* | real | &check; | The geospatial coordinate latitude value in degrees. A valid value is in the range [-90, +90].|\\r\\n| *lineString* | dynamic | &check; | A line or multiline in the [GeoJSON format](https://tools.ietf.org/html/rfc7946).|\\r\\n\\r\\n## Returns\\r\\n\\r\\nThe shortest distance, in meters, between a coordinate and a line or multiline on Earth. If the coordinate or lineString are invalid, the query will produce a null result.\\r\\n\\r\\n> [!NOTE]\\r\\n>\\r\\n> * The geospatial coordinates are interpreted as represented by the [WGS-84](https://earth-info.nga.mil/index.php?dir=wgs84&action=wgs84) coordinate reference system.\\r\\n> * The [geodetic datum](https://en.wikipedia.org/wiki/Geodetic_datum) used to measure distance on Earth is a sphere. Line edges are [geodesics](https://en.wikipedia.org/wiki/Geodesic) on the sphere.\\r\\n> * If input line edges are straight cartesian lines, consider using [geo_line_densify()](geo-line-densify-function.md) in order to convert planar edges to geodesics.\\r\\n\\r\\n### LineString definition and constraints\\r\\n\\r\\ndynamic({\"type\": \"LineString\",\"coordinates\": [[lng_1,lat_1], [lng_2,lat_2],..., [lng_N,lat_N]]})\\r\\n\\r\\ndynamic({\"type\": \"MultiLineString\",\"coordinates\": [[line_1, line_2, ..., line_N]]})\\r\\n\\r\\n* LineString coordinates array must contain at least two entries.\\r\\n* Coordinates [longitude, latitude] must be valid where longitude is a real number in the range [-180, +180] and latitude is a real number in the range [-90, +90].\\r\\n* Edge length must be less than 180 degrees. The shortest edge between the two vertices will be chosen.\\r\\n\\r\\n> [!TIP]\\r\\n>\\r\\n> * Using literal LineString or a MultiLineString may result in better performance.\\r\\n> * If you want to know the shortest distance between one or more points to many lines, consider folding these lines into one multiline. See the following [example](#examples).','### Shortest distance to airport\\r\\n\\r\\nThe following example finds the shortest distance between North Las Vegas Airport and a nearby road.\\r\\n\\r\\n![Distance between North Las Vegas Airport and road.](images/geo-distance-point-to-line-function/distance-point-to-line.png)\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA03PwWrDMAwG4FcxObWQFVuyZLuwN+htxxJCSEwxrE5IfCmj7z6zunPOn/Tr17KGmMQUtjTE0fch9nef/LqJT3Hzc/8Py5zn+jT33yH6w4dSdFLOMVArkE+gpFauFdMjDvcwHn6a9Fh8cxbNJY9/pXzk1rSiGed5nUIckt8yXq+vHEVoSw445ahrRRFk54pIicxVtASCP1EOtJE7QSL7EmsJcCdaGi6Sz+gqpJlLmtHa7naYNaoijNZWsQjWFSEpTRUHrN5pbLC2Bgm6fKoManRVgHLtdwNk6rrn8fgL1VPyAZ0BAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint distance_in_meters = geo_distance_point_to_line(-115.199625, 36.210419, dynamic({ \"type\":\"LineString\",\"coordinates\":[[-115.115385,36.229195],[-115.136995,36.200366],[-115.140252,36.192470],[-115.143558,36.188523],[-115.144076,36.181954],[-115.154662,36.174483],[-115.166431,36.176388],[-115.183289,36.175007],[-115.192612,36.176736],[-115.202485,36.173439],[-115.225355,36.174365]]}))\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n| distance_in_meters |\\r\\n|--------------------|\\r\\n| 3797.88887253334   |\\r\\n\\r\\n### Storm events across the south coast\\r\\n\\r\\nStorm events in south coast US. The events are filtered by a maximum distance of 5 km from the defined shore line.\\r\\n\\r\\n![Storm events in the US south coast.](images/geo-distance-point-to-line-function/us-south-coast-storm-events.png)\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA22ST48TMQzF7/spop5aqUS2E8cOsBcQt70tt1VVjdqoHdjOVNPAagV8d9ymXS6c5o9/eX5+8XOp7jT+qPvPY3eq7t5tX4fu0G/mv2b19Vhm793soR/KY536YTdbutlmHKdtP3S1nKz49PQui0dlYOUcJOacl47Y5yxsH5hZCJFWS3chWYFTipCIDUs+J6TIIsCUstwoxIw3Rnxm5owAMUViDg2KHiLlpJeOrWn2QomIAuZgZyA2knxWJcWLWvZKyEpCwOejF0SzTSCAKPZoFGIQYZNBjOGNChol8cVXAB+Qs4qdYRZNzbyeRwwA0voZRTY+GENRz3ijko8agzTC5hCynBgCplZnj0Qg9uPqOqkFR+ZYOWljLAFAy+Qs1GI3LYyMZJZCkIQtKiWfks1zi0C9QkIJDKocRdKNUow5vuWuHoIlKeeRJVkaNwxFJDTzdoFszhNTUErCV2dgt4+EkBvEnuCsjBw4WWG1+rP4cPdYx+nw5WcZ6unutztO47eyqe5T2fXDwzgsr29dXboL9NWW0biXfZmK25Vxve1PtRs2ZX0c+6Gu67h+tj2d/0/g334v3EfHAGBKUxm2ZXKnTVdrmTb7bqrupa97N//eD9v7Q3dc/AWyeZdJHAMAAA==\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nlet southCoast = dynamic({\"type\":\"LineString\",\"coordinates\":[[-97.18505859374999,25.997549919572112],[-97.58056640625,26.96124577052697],[-97.119140625,27.955591004642553],[-94.04296874999999,29.726222319395504],[-92.98828125,29.82158272057499],[-89.18701171875,29.11377539511439],[-89.384765625,30.315987718557867],[-87.5830078125,30.221101852485987],[-86.484375,30.4297295750316],[-85.1220703125,29.6880527498568],[-84.00146484374999,30.14512718337613],[-82.6611328125,28.806173508854776],[-82.81494140625,28.033197847676377],[-82.177734375,26.52956523826758],[-80.9912109375,25.20494115356912]]});\\r\\nStormEvents\\r\\n| project BeginLon, BeginLat, EventType\\r\\n| where geo_distance_point_to_line(BeginLon, BeginLat, southCoast) < 5000\\r\\n| render scatterchart with (kind=map)\\r\\n```\\r\\n\\r\\n### New York taxi pickups\\r\\n\\r\\nNY taxi pickups. Pickups are filtered by maximum distance of 0.1 meter from the defined multiline.\\r\\n\\r\\n![NYC taxi pickups on Madison Ave.](images/geo-distance-point-to-line-function/madison-ave-road.png)\\r\\n\\r\\n```\\r\\nlet MadisonAve = dynamic({\"type\":\"MultiLineString\",\"coordinates\":[[[-73.9879823,40.7408625],[-73.9876492,40.7413345],[-73.9874982,40.7415046],[-73.9870343,40.7421446],[-73.9865812,40.7427655],[-73.9861292,40.7433756],[-73.9856813,40.7439956],[-73.9854932,40.7442606],[-73.9852232,40.7446216],[-73.9847903,40.7452305],[-73.9846232,40.7454536],[-73.9844803,40.7456606],[-73.9843413,40.7458585],[-73.9839533,40.7463955],[-73.9839002,40.7464696],[-73.9837683,40.7466566],[-73.9834342,40.7471015],[-73.9833833,40.7471746],[-73.9829712,40.7477686],[-73.9824752,40.7484255],[-73.9820262,40.7490436],[-73.9815623,40.7496566],[-73.9811212,40.7502796],[-73.9809762,40.7504976],[-73.9806982,40.7509255],[-73.9802752,40.7515216],[-73.9798033,40.7521795],[-73.9795863,40.7524656],[-73.9793082,40.7528316],[-73.9787872,40.7534725],[-73.9783433,40.7540976],[-73.9778912,40.7547256],[-73.9774213,40.7553365],[-73.9769402,40.7559816],[-73.9764622,40.7565766],[-73.9760073,40.7572036],[-73.9755592,40.7578366],[-73.9751013,40.7584665],[-73.9746532,40.7590866],[-73.9741902,40.7597326],[-73.9737632,40.7603566],[-73.9733032,40.7609866],[-73.9728472,40.7616205],[-73.9723422,40.7622826],[-73.9718672,40.7629556],[-73.9714042,40.7635726],[-73.9709362,40.7642185],[-73.9705282,40.7647636],[-73.9704903,40.7648196],[-73.9703342,40.7650355],[-73.9701562,40.7652826],[-73.9700322,40.7654535],[-73.9695742,40.7660886],[-73.9691232,40.7667166],[-73.9686672,40.7673375],[-73.9682142,40.7679605],[-73.9677482,40.7685786],[-73.9672883,40.7692076],[-73.9668412,40.7698296],[-73.9663882,40.7704605],[-73.9659222,40.7710936],[-73.9654262,40.7717756],[-73.9649292,40.7724595],[-73.9644662,40.7730955],[-73.9640012,40.7737285],[-73.9635382,40.7743615],[-73.9630692,40.7749936],[-73.9626122,40.7756275],[-73.9621172,40.7763106],[-73.9616111,40.7769896],[-73.9611552,40.7776245],[-73.9606891,40.7782625],[-73.9602212,40.7788866],[-73.9597532,40.7795236],[-73.9595842,40.7797445],[-73.9592942,40.7801635],[-73.9591122,40.7804105],[-73.9587982,40.7808305],[-73.9582992,40.7815116],[-73.9578452,40.7821455],[-73.9573802,40.7827706],[-73.9569262,40.7833965],[-73.9564802,40.7840315],[-73.9560102,40.7846486],[-73.9555601,40.7852755],[-73.9551221,40.7859005],[-73.9546752,40.7865426],[-73.9542571,40.7871505],[-73.9541771,40.7872335],[-73.9540892,40.7873366],[-73.9536971,40.7879115],[-73.9532792,40.7884706],[-73.9532142,40.7885205],[-73.9531522,40.7885826],[-73.9527382,40.7891785],[-73.9523081,40.7897545],[-73.9518332,40.7904115],[-73.9513721,40.7910435],[-73.9509082,40.7916695],[-73.9504602,40.7922995],[-73.9499882,40.7929195],[-73.9495051,40.7936045],[-73.9490071,40.7942835],[-73.9485542,40.7949065],[-73.9480832,40.7955345],[-73.9476372,40.7961425],[-73.9471772,40.7967915],[-73.9466841,40.7974475],[-73.9453432,40.7992905],[-73.9448332,40.7999835],[-73.9443442,40.8006565],[-73.9438862,40.8012945],[-73.9434262,40.8019196],[-73.9431412,40.8023325],[-73.9429842,40.8025585],[-73.9425691,40.8031855],[-73.9424401,40.8033609],[-73.9422987,40.8035533],[-73.9422013,40.8036857],[-73.9421022,40.8038205],[-73.9420024,40.8039552],[-73.9416372,40.8044485],[-73.9411562,40.8050725],[-73.9406471,40.8057176],[-73.9401481,40.8064135],[-73.9397022,40.8070255],[-73.9394081,40.8074155],[-73.9392351,40.8076495],[-73.9387842,40.8082715],[-73.9384681,40.8087086],[-73.9383211,40.8089025],[-73.9378792,40.8095215],[-73.9374011,40.8101795],[-73.936405,40.8115707],[-73.9362328,40.8118098]],[[-73.9362328,40.8118098],[-73.9362432,40.8118567],[-73.9361239,40.8120222],[-73.9360302,40.8120805]],[[-73.9362328,40.8118098],[-73.9361571,40.8118294],[-73.9360443,40.8119993],[-73.9360302,40.8120805]],[[-73.9360302,40.8120805],[-73.9359423,40.8121378],[-73.9358551,40.8122385],[-73.9352181,40.8130815],[-73.9348702,40.8135515],[-73.9347541,40.8137145],[-73.9346332,40.8138615],[-73.9345542,40.8139595],[-73.9344981,40.8139945],[-73.9344571,40.8140165],[-73.9343962,40.8140445],[-73.9343642,40.8140585],[-73.9343081,40.8140725],[-73.9341971,40.8140895],[-73.9341041,40.8141005],[-73.9340022,40.8140965],[-73.9338442,40.8141005],[-73.9333712,40.8140895],[-73.9325541,40.8140755],[-73.9324561,40.8140705],[-73.9324022,40.8140695]],[[-73.9360302,40.8120805],[-73.93605,40.8121667],[-73.9359632,40.8122805],[-73.9353631,40.8130795],[-73.9351482,40.8133625],[-73.9350072,40.8135415],[-73.9347441,40.8139168],[-73.9346611,40.8140125],[-73.9346101,40.8140515],[-73.9345401,40.8140965],[-73.9344381,40.8141385],[-73.9343451,40.8141555],[-73.9342991,40.8141675],[-73.9341552,40.8141985],[-73.9338601,40.8141885],[-73.9333991,40.8141815],[-73.9323981,40.8141665]]]});\\r\\nnyc_taxi\\r\\n| project pickup_longitude, pickup_latitude\\r\\n| where geo_distance_point_to_line(pickup_longitude, pickup_latitude, MadisonAve) <= 0.1\\r\\n| take 100\\r\\n| render scatterchart with (kind=map)\\r\\n```\\r\\n\\r\\nThe following example folds many lines into one multiline and queries this multiline. The query finds all taxi pickups that happened 10 km away from all roads in Manhattan.\\r\\n\\r\\n![Lines folding.](images/geo-distance-point-to-line-function/lines-folding.png)\\r\\n\\r\\n```\\r\\nlet ManhattanRoads =\\r\\n    datatable(features:dynamic)\\r\\n    [\\r\\n        dynamic({\"type\":\"Feature\",\"properties\":{\"Label\":\"145thStreetBrg\"},\"geometry\":{\"type\":\"MultiLineString\",\"coordinates\":[[[-73.9322259,40.8194635],[-73.9323259,40.8194743],[-73.9323973,40.8194779]]]}}),\\r\\n        dynamic({\"type\":\"Feature\",\"properties\":{\"Label\":\"W120thSt\"},\"geometry\":{\"type\":\"MultiLineString\",\"coordinates\":[[[-73.9619541,40.8104844],[-73.9621542,40.8105725],[-73.9630542,40.8109455],[-73.9635902,40.8111714],[-73.9639492,40.8113174],[-73.9640502,40.8113705]]]}}),\\r\\n        dynamic({\"type\":\"Feature\",\"properties\":{\"Label\":\"1stAve\"},\"geometry\":{\"type\":\"MultiLineString\",\"coordinates\":[[[-73.9704124,40.748033],[-73.9702043,40.7480906],[-73.9696892,40.7487346],[-73.9695012,40.7491976],[-73.9694522,40.7493196]],[[-73.9699932,40.7488636],[-73.9694522,40.7493196]],[[-73.9694522,40.7493196],[-73.9693113,40.7494946],[-73.9688832,40.7501056],[-73.9686562,40.7504196],[-73.9684231,40.7507476],[-73.9679832,40.7513586],[-73.9678702,40.7514986]],[[-73.9676833,40.7520426],[-73.9675462,40.7522286],[-73.9673532,40.7524976],[-73.9672892,40.7525906],[-73.9672122,40.7526806]]]}})\\r\\n        // ... more roads ...\\r\\n    ];\\r\\nlet allRoads=toscalar(\\r\\n    ManhattanRoads\\r\\n    | project road_coordinates=features.geometry.coordinates\\r\\n    | summarize make_list(road_coordinates)\\r\\n    | project multiline = bag_pack(\"type\",\"MultiLineString\", \"coordinates\", list_road_coordinates));\\r\\nnyc_taxi\\r\\n| project pickup_longitude, pickup_latitude\\r\\n| where pickup_longitude != 0 and pickup_latitude != 0\\r\\n| where geo_distance_point_to_line(pickup_longitude, pickup_latitude, parse_json(allRoads)) > 10000\\r\\n| take 10\\r\\n| render scatterchart with (kind=map)\\r\\n```\\r\\n\\r\\n### Invalid LineString\\r\\n\\r\\nThe following example will return a null result because of the invalid LineString input.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAysoyswrUUjJLC5JzEtOjc/Mi89NLUktKlawVUhPzY+HSxTkA9XFl+TH52TmpWoY6hjqKKRU5iXmZiZrVCsolVQWpCpZKfkA5YJLgCamK9VqagIAkwcZF1sAAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint distance_in_meters = geo_distance_point_to_line(1,1, dynamic({ \"type\":\"LineString\"}))\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n| distance_in_meters |\\r\\n|--------------------|\\r\\n|                    |\\r\\n\\r\\n### Invalid coordinate\\r\\n\\r\\nThe following example will return a null result because of the invalid coordinate input.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAytJLVayio421DGM1Yk20jGKja3V1AQArromlhUAAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint distance_in_meters = geo_distance_point_to_line(300, 3, dynamic({ \"type\":\"LineString\",\"coordinates\":[[1,1],[2,2]]}))\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n| distance_in_meters |\\r\\n|--------------------|\\r\\n|                    |',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/geo-distance-point-to-line-function\",\"geo-distance-point-to-line-function.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"geo_distance_point_to_polygon\",\"Calculates the shortest distance between a coordinate and a polygon or a multipolygon on Earth.\",'## Syntax\\r\\n\\r\\n`geo_distance_point_to_polygon(`*longitude*`,`*latitude*`,`*polygon*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n|Name|Type|Required|Description|\\r\\n|--|--|--|--|\\r\\n| *longitude* | real | &check; | Geospatial coordinate, longitude value in degrees. Valid value is a real number and in the range [-180, +180].|\\r\\n| *latitude* | real | &check; | Geospatial coordinate, latitude value in degrees. Valid value is a real number and in the range [-90, +90].|\\r\\n| *polygon* | dynamic | &check; | Polygon or multipolygon in the [GeoJSON format](https://tools.ietf.org/html/rfc7946).|\\r\\n\\r\\n## Returns\\r\\n\\r\\nThe shortest distance, in meters, between a coordinate and a polygon or a multipolygon on Earth. If polygon contains point, the distance will be 0. If the coordinates or polygons are invalid, the query will produce a null result.\\r\\n\\r\\n> [!NOTE]\\r\\n>\\r\\n> * The geospatial coordinates are interpreted as represented by the [WGS-84](https://earth-info.nga.mil/index.php?dir=wgs84&action=wgs84) coordinate reference system.\\r\\n> * The [geodetic datum](https://en.wikipedia.org/wiki/Geodetic_datum) used for measurements on Earth is a sphere. Polygon edges are [geodesics](https://en.wikipedia.org/wiki/Geodesic) on the sphere.\\r\\n> * If input polygon edges are straight cartesian lines, consider using [geo_polygon_densify()](geo-polygon-densify-function.md) to convert planar edges to geodesics.\\r\\n\\r\\n**Polygon definition and constraints**\\r\\n\\r\\ndynamic({\"type\": \"Polygon\",\"coordinates\": [LinearRingShell, LinearRingHole_1, ..., LinearRingHole_N]})\\r\\n\\r\\ndynamic({\"type\": \"MultiPolygon\",\"coordinates\": [[LinearRingShell, LinearRingHole_1,..., LinearRingHole_N],..., [LinearRingShell, LinearRingHole_1,..., LinearRingHole_M]]})\\r\\n\\r\\n* LinearRingShell is required and defined as a `counterclockwise` ordered array of coordinates [[lng_1,lat_1],...,[lng_i,lat_i],...,[lng_j,lat_j],...,[lng_1,lat_1]]. There can be only one shell.\\r\\n* LinearRingHole is optional and defined as a `clockwise` ordered array of coordinates [[lng_1,lat_1],...,[lng_i,lat_i],...,[lng_j,lat_j],...,[lng_1,lat_1]]. There can be any number of interior rings and holes.\\r\\n* LinearRing vertices must be distinct with at least three coordinates. The first coordinate must be equal to the last. At least four entries are required.\\r\\n* Coordinates [longitude, latitude] must be valid. Longitude must be a real number in the range [-180, +180] and latitude must be a real number in the range [-90, +90].\\r\\n* LinearRingShell encloses at most half of the sphere. LinearRing divides the sphere into two regions. The smaller of the two regions will be chosen.\\r\\n* LinearRing edge length must be less than 180 degrees. The shortest edge between the two vertices will be chosen.\\r\\n* LinearRings must not cross and must not share edges. LinearRings may share vertices.\\r\\n* Polygon doesn\\'t necessarily contain its vertices.\\r\\n\\r\\n> [!TIP]\\r\\n>\\r\\n> * Using literal polygons may result in better performance.\\r\\n> * If you want to know if polygon contains point, see [geo_point_in_polygon()](./geo-point-in-polygon-function.md)','The following example calculates shortest distance in meters from some location in NYC to Central Park.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA1WQwWrDMAyG73sK41MLWbEtS7Jb9g67hxBMYkpYZofUl1D27ksaAttJ4tenn18aYxFdTGUOYzuF+Ut8iH5J4XvoTk9ZlinKq/zM43LPSVayy3nuhxRKfMhrXdfvDBdvPVZWXdiTb6pdQqfYEBlAQLMNnVLkSAGS9kYfmDNKe2usBWfdy4OcQWIDCpn5wBg0O0erFYLfMYuogVBt5cD+5mian/PtbZqHVMQ95rYfHiWkLrZTXqW25LV5HXXag6y+YttlhdW/f5x/Afn4cVQhAQAA\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nlet central_park = dynamic({\"type\":\"Polygon\",\"coordinates\":[[[-73.9495,40.7969],[-73.95807266235352,40.80068603561921],[-73.98201942443848,40.76825672305777],[-73.97317886352539,40.76455136505513],[-73.9495,40.7969]]]});\\r\\nprint geo_distance_point_to_polygon(-73.9839, 40.7705, central_park)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|print_0|\\r\\n|---|\\r\\n|259.940756070596|\\r\\n\\r\\nThe following example enriches the data with distance.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=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\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nlet multipolygon = dynamic({\"type\":\"MultiPolygon\",\"coordinates\":[[[[-73.991460000000131,40.731738000000206],[-73.992854491775518,40.730082566051351],[-73.996772,40.725432000000154],[-73.997634685522883,40.725786309886963],[-74.002855946639244,40.728346630056791],[-74.001413,40.731065000000207],[-73.996796995070824,40.73736378205173],[-73.991724524037934,40.735245208931886],[-73.990703782359589,40.734781896080477],[-73.991460000000131,40.731738000000206]]],[[[-73.958357552055688,40.800369095633819],[-73.98143901556422,40.768762584141953],[-73.981548752788598,40.7685590292784],[-73.981565335901905,40.768307084720796],[-73.981754418060945,40.768399727738668],[-73.982038573548124,40.768387823012056],[-73.982268248204349,40.768298621883247],[-73.982384797518051,40.768097213086911],[-73.982320919746599,40.767894461792181],[-73.982155532845766,40.767756204474757],[-73.98238873834039,40.767411004834273],[-73.993650353659021,40.772145571634361],[-73.99415893763998,40.772493009137818],[-73.993831082030937,40.772931787850908],[-73.993891252437052,40.772955194876722],[-73.993962585514595,40.772944653908901],[-73.99401262480508,40.772882846631894],[-73.994122058082397,40.77292405902601],[-73.994136652588594,40.772901870174394],[-73.994301342391154,40.772970028663913],[-73.994281535134448,40.77299380206933],[-73.994376552751078,40.77303955110149],[-73.994294029824005,40.773156243992048],[-73.995023275860802,40.773481196576356],[-73.99508939189289,40.773388475039134],[-73.995013963716758,40.773358035426909],[-73.995050284699261,40.773297153189958],[-73.996240651898916,40.773789791397689],[-73.996195837470992,40.773852356184044],[-73.996098807369748,40.773951805299085],[-73.996179459973888,40.773986954351571],[-73.996095245226442,40.774086186437756],[-73.995572265161172,40.773870731394297],[-73.994017424135961,40.77321375261053],[-73.993935876811335,40.773179512586211],[-73.993861942928888,40.773269531698837],[-73.993822393527211,40.773381758622882],[-73.993767019318497,40.773483981224835],[-73.993698463744295,40.773562141052594],[-73.993358326468751,40.773926888327956],[-73.992622663865575,40.774974056037109],[-73.992577842766124,40.774956016359418],[-73.992527743951555,40.775002110439829],[-73.992469745815342,40.775024159551755],[-73.992403837191887,40.775018140390664],[-73.99226708903538,40.775116033858794],[-73.99217809026365,40.775279293897171],[-73.992059084937338,40.775497598192516],[-73.992125372394938,40.775509075053385],[-73.992226867797001,40.775482211026116],[-73.992329346608813,40.775468900958522],[-73.992361756801131,40.775501899766638],[-73.992386042960277,40.775557180424634],[-73.992087684712729,40.775983970821372],[-73.990927174149746,40.777566878763238],[-73.99039616003671,40.777585065679204],[-73.989461267506471,40.778875124584417],[-73.989175778438053,40.779287524015778],[-73.988868617400072,40.779692922911607],[-73.988871874499793,40.779713738253008],[-73.989219022880576,40.779697895209402],[-73.98927785904425,40.779723439271038],[-73.989409054180143,40.779737706471963],[-73.989498614927044,40.779725044389757],[-73.989596493388234,40.779698146683387],[-73.989679812902509,40.779677568658038],[-73.989752702937935,40.779671244211556],[-73.989842247806507,40.779680752670664],[-73.990040102120489,40.779707677698219],[-73.990137977524839,40.779699769704784],[-73.99033584033225,40.779661794394983],[-73.990430598697046,40.779664973055503],[-73.990622199396725,40.779676064914298],[-73.990745069505479,40.779671328184051],[-73.990872114282197,40.779646007643876],[-73.990961672224358,40.779639683751753],[-73.991057472829539,40.779652352625774],[-73.991157429497036,40.779669775606465],[-73.991242817404469,40.779671367084504],[-73.991255318289745,40.779650782516491],[-73.991294887120119,40.779630209208889],[-73.991321967649895,40.779631796041372],[-73.991359455569423,40.779585883337383],[-73.991551059227476,40.779574821437407],[-73.99141982585985,40.779755280287233],[-73.988886144117032,40.779878898532999],[-73.988939656706265,40.779956178440393],[-73.988926103530844,40.780059292013632],[-73.988911680264692,40.780096037146606],[-73.988919261468567,40.780226094343945],[-73.988381050202634,40.780981074045783],[-73.988232413846987,40.781233144215555],[-73.988210420831663,40.781225482542055],[-73.988140000000143,40.781409000000224],[-73.988041288067166,40.781585961353777],[-73.98810029382463,40.781602878305286],[-73.988076449145055,40.781650935001608],[-73.988018059972219,40.781634188810422],[-73.987960792842145,40.781770987031535],[-73.985465811970457,40.785360700575431],[-73.986172704965611,40.786068452258647],[-73.986455862401996,40.785919219081421],[-73.987072345615601,40.785189638820121],[-73.98711901394276,40.785210319004058],[-73.986497781023601,40.785951202887254],[-73.986164628806279,40.786121882448327],[-73.986128422486075,40.786239001331111],[-73.986071135219746,40.786240706026611],[-73.986027274789123,40.786228964236727],[-73.986097637849426,40.78605822569795],[-73.985429321269592,40.785413942184597],[-73.985081137732209,40.785921935110366],[-73.985198833254501,40.785966552197777],[-73.985170502389906,40.78601333415817],[-73.985216218673656,40.786030501816427],[-73.98525509797993,40.785976205511588],[-73.98524273937646,40.785972572653328],[-73.98524962933017,40.785963139855845],[-73.985281779186749,40.785978620950075],[-73.985240032884533,40.786035858136792],[-73.985683885242182,40.786222123919686],[-73.985717529004575,40.786175994668795],[-73.985765660297687,40.786196274858618],[-73.985682871922691,40.786309786213067],[-73.985636270930442,40.786290150649279],[-73.985670722564691,40.786242911993817],[-73.98520511880038,40.786047669212785],[-73.985211035607492,40.786039554883686],[-73.985162639946992,40.786020999769754],[-73.985131636312062,40.786060297019972],[-73.985016964065125,40.78601423719563],[-73.984655078830457,40.786534741807841],[-73.985743787901043,40.786570082854738],[-73.98589227228328,40.786426529019593],[-73.985942854994988,40.786452847880334],[-73.985949561556794,40.78648711396653],[-73.985812373526713,40.786616865357047],[-73.985135209703174,40.78658761889551],[-73.984619428584324,40.786586016349787],[-73.981952458164173,40.790393724337193],[-73.972823037363767,40.803428052816756],[-73.971036786332192,40.805918478839672],[-73.966701,40.804169000000186],[-73.959647,40.801156000000113],[-73.958508540159471,40.800682279767472],[-73.95853274080838,40.800491362464697],[-73.958357552055688,40.800369095633819]]],[[[-73.943592454622546,40.782747908206574],[-73.943648235390199,40.782656161333449],[-73.943870759887162,40.781273026571704],[-73.94345932494096,40.780048275653243],[-73.943213862652243,40.779317588660199],[-73.943004239504688,40.779639495474292],[-73.942716005450905,40.779544169476175],[-73.942712374762181,40.779214856940001],[-73.942535563208608,40.779090956062532],[-73.942893408188027,40.778614093246276],[-73.942438481745029,40.777315235766039],[-73.942244919522594,40.777104088947254],[-73.942074188038887,40.776917846977142],[-73.942002667222781,40.776185317382648],[-73.942620205199006,40.775180871576474],[-73.94285645694552,40.774796600349191],[-73.94293043781397,40.774676268036011],[-73.945870899588215,40.771692257932997],[-73.946618690150586,40.77093339256956],[-73.948664164778933,40.768857624399587],[-73.950069793030679,40.767025088383498],[-73.954418260786071,40.762184104951245],[-73.95650786241211,40.760285256574043],[-73.958787773424007,40.758213471309809],[-73.973015157270069,40.764278692864671],[-73.955760332998182,40.787906554459667],[-73.944023,40.782960000000301],[-73.943592454622546,40.782747908206574]]]]});\\r\\nlet coordinates = \\r\\n    datatable(longitude:real, latitude:real, description:string)\\r\\n    [\\r\\n        real(-73.9741), 40.7914, \\'Upper West Side\\',\\r\\n        real(-73.9950), 40.7340, \\'Greenwich Village\\',\\r\\n        real(-73.8743), 40.7773, \\'LaGuardia Airport\\',\\r\\n    ];\\r\\ncoordinates\\r\\n| extend distance = geo_distance_point_to_polygon(longitude, latitude, multipolygon)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|longitude|latitude|description|distance|\\r\\n|---|---|---|---|\\r\\n|-73.9741|40.7914|Upper West Side|0|\\r\\n|-73.995|40.734|Greenwich Village|0|\\r\\n|-73.8743|40.7773|LaGuardia Airport|5702.15731467514|\\r\\n\\r\\nThe following example finds all states that are within 200-km distance, excluding state that contains the point.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA12NwQrCMBAF737FHluodaNVEFTw4FEvxXMI7ZpG2iSkK1Lw442gVrw9hsfMuZQlK6Z+8gAf3JUqBqs6gi1cSPEtUJ9H7imwifO0Px4y8K4dtLO/H02uIw7DnyaD2vSsbPUSVmRaY3USv/KDpXfGsmQn39JkKoTI17jMoMB8tSi+uRRmIBAxjY17Q4FG9wbmiKBsPaId4BNva0k13AAAAA==\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nUS_States\\r\\n| project name = features.properties.NAME, polygon = features.geometry\\r\\n| project name, distance = ceiling(geo_distance_point_to_polygon(-111.905, 40.634, polygon) / 1000)\\r\\n| where distance < 200 and distance > 0\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|name|distance|\\r\\n|---|---|\\r\\n|Idaho|152|\\r\\n|Nevada|181|\\r\\n|Wyoming|83|\\r\\n\\r\\nThe following example will return a null result because of the invalid coordinate input.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAysoyswrUUjJLC5JzEtOVbBVSE/Nj4dx4wvygbLxJflARk5len6ehqmBgY6hTkplXmJuZrJGtVJJZUGqkpWCUgBEXklHKTk/vyglMy+xJLUYKBEdHW2gYxCrE20I1AejgRRIMDa2VlMTAGFm5geAAAAA\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint distance = geo_distance_point_to_polygon(500,1,dynamic({\"type\": \"Polygon\",\"coordinates\": [[[0,0],[10,10],[10,1],[0,0]]]}))\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n| distance |\\r\\n|------------|\\r\\n|            |\\r\\n\\r\\nThe following example will return a null result because of the invalid polygon input.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA03JywqFIBAG4FeRWRXMQrdB79BeREQlhJqRmo1E756HONDqv3z1KCQqlVMCxaxmtWb2/+krd/XCvWxtZRoMGkyNwl7icIG0mmFSsLwKCJH5SIWC5LODtVajdmiNRvPN3+vcPY4PvW97rH8AAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint distance = geo_distance_point_to_polygon(1,1,dynamic({\"type\": \"Polygon\",\"coordinates\": [[[0,0],[10,10],[10,10],[0,0]]]}))\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n| distance |\\r\\n|------------|\\r\\n|            |',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/geo-distance-point-to-polygon-function\",\"geo-distance-point-to-polygon-function.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"geo_geohash_neighbors\",\"Calculates Geohash neighbors.\",\"Read more about [`geohash`](https://en.wikipedia.org/wiki/Geohash).  \\r\\n\\r\\n## Syntax\\r\\n\\r\\n`geo_geohash_neighbors(`*geohash*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n|Name|Type|Required|Description|\\r\\n|--|--|--|--|\\r\\n| *geohash* | string | &check; | A geohash value as it was calculated by [geo_point_to_geohash()](geo-point-to-geohash-function.md). The geohash string must be between 1 and 18 characters.|\\r\\n\\r\\n## Returns\\r\\n\\r\\nAn array of Geohash neighbors. If the Geohash is invalid, the query produces a null result.\",'The following example calculates Geohash neighbors.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAysoyswrUchLzUzPSMovKlawVUhPzY8H4ozE4ox4uLiGenFpXl6luiYAmib90DAAAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint neighbors = geo_geohash_neighbors(\\'sunny\\')\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|neighbors|\\r\\n|---|\\r\\n|[\"sunnt\",\"sunpj\",\"sunnx\",\"sunpn\",\"sunnv\",\"sunpp\",\"sunnz\",\"sunnw\"]|\\r\\n\\r\\nThe following example calculates an array of input Geohash with its neighbors.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA8tJLVFIT83PSCzOULBVUC8uzcurVLfmKijKzCtRSE7NySkGCicWFSVWxifn5yUnlmgUJCZnx4NFNKAaNXVARsRDefF5qZnpGUn5RcVweU0AMyi9o2YAAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nlet geohash = \\'sunny\\';\\r\\nprint cells = array_concat(pack_array(geohash), geo_geohash_neighbors(geohash))\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|cells|\\r\\n|---|\\r\\n|[\"sunny\",\"sunnt\",\"sunpj\",\"sunnx\",\"sunpn\",\"sunnv\",\"sunpp\",\"sunnz\",\"sunnw\"]|\\r\\n\\r\\nThe following example calculates Geohash polygons GeoJSON geometry collection.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA2WQwU5EIQxF9/MVhM3wkvELjCsT/QzSwcpjBiiBPiPGj7c8USdxR29vT2+JyMojrdBW9aCObcu5H+8PpYbMymGMTWSoFbp1lB2wKeCudlfMHFxOA2FnZTMGv56ptt/+cvhU6e0O3wvkl0llUtwL0qtpLMv88JRKF3SsCsXuKY/Vt2AmOztmZ4yRtqUENXzgCCn+BFe0MTTJOSG3YCFdGmXxncHbcYnRI4U+Kf2EwFuVpxZXQq5d1P+259l8pBgFGSgPdY4EbFJJEvkSLUsLVv7W/kAZ0g76yaeX5QvXq2jehQEAAA==\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nlet geohash = \\'sunny\\';\\r\\nprint cells = array_concat(pack_array(geohash), geo_geohash_neighbors(geohash))\\r\\n| mv-expand cells to typeof(string)\\r\\n| project polygons = geo_geohash_to_polygon(cells)\\r\\n| summarize arr = make_list(polygons)\\r\\n| project geojson = bag_pack(\"type\", \"Feature\",\"geometry\", bag_pack(\"type\", \"GeometryCollection\", \"geometries\", arr), \"properties\", bag_pack(\"name\", \"polygons\"))\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|geojson|\\r\\n|---|\\r\\n|{\"type\": \"Feature\",\"geometry\": {\"type\": \"GeometryCollection\",\"geometries\": [<br>  {\"type\":\"Polygon\",\"coordinates\":[[[42.451171875,23.6865234375],[42.4951171875,23.6865234375],[42.4951171875,23.73046875],[42.451171875,23.73046875],[42.451171875,23.6865234375]]]},<br>  {\"type\":\"Polygon\",\"coordinates\":[[[42.4072265625,23.642578125],[42.451171875,23.642578125],[42.451171875,23.6865234375],[42.4072265625,23.6865234375],[42.4072265625,23.642578125]]]},<br>  {\"type\":\"Polygon\",\"coordinates\":[[[42.4072265625,23.73046875],[42.451171875,23.73046875],[42.451171875,23.7744140625],[42.4072265625,23.7744140625],[42.4072265625,23.73046875]]]},<br>  {\"type\":\"Polygon\",\"coordinates\":[[[42.4951171875,23.642578125],[42.5390625,23.642578125],[42.5390625,23.6865234375],[42.4951171875,23.6865234375],[42.4951171875,23.642578125]]]},<br>  {\"type\":\"Polygon\",\"coordinates\":[[[42.451171875,23.73046875],[42.4951171875,23.73046875],[42.4951171875,23.7744140625],[42.451171875,23.7744140625],[42.451171875,23.73046875]]]},<br>  {\"type\":\"Polygon\",\"coordinates\":[[[42.4072265625,23.6865234375],[42.451171875,23.6865234375],[42.451171875,23.73046875],[42.4072265625,23.73046875],[42.4072265625,23.6865234375]]]},<br>  {\"type\":\"Polygon\",\"coordinates\":[[[42.4951171875,23.73046875],[42.5390625,23.73046875],[42.5390625,23.7744140625],[42.4951171875,23.7744140625],[42.4951171875,23.73046875]]]},<br>  {\"type\":\"Polygon\",\"coordinates\":[[[42.4951171875,23.6865234375],[42.5390625,23.6865234375],[42.5390625,23.73046875],[42.4951171875,23.73046875],[42.4951171875,23.6865234375]]]},<br>  {\"type\":\"Polygon\",\"coordinates\":[[[42.451171875,23.642578125],[42.4951171875,23.642578125],[42.4951171875,23.6865234375],[42.451171875,23.6865234375],[42.451171875,23.642578125]]]}]},<br>  \"properties\": {\"name\": \"polygons\"}}|\\r\\n\\r\\nThe following example calculates polygon unions that represent Geohash and its neighbors.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA22PQQ4CIQxF956C3TCJrlwaz0IQK+AwLYGOEePhhZFJXLhoF7/977cBWLijgRDEWQx5QSzDaReTRxZNzVXWKemiDKHRLKM2k1oV+fWNe2GBVC2ns1MI3roLpbyNx91bzI8DPKPGa2cyCS4R6CYz1yjbdmKiOxgWkUKxhC34l8uk+kSujGbJyzzr5F/QTqz7s55ABZ/rlR3yB9y5C3rCDZn7R7WPH3yyyNkSAQAA\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nlet h3cell = \\'sunny\\';\\r\\nprint cells = array_concat(pack_array(h3cell), geo_geohash_neighbors(h3cell))\\r\\n| mv-expand cells to typeof(string)\\r\\n| project polygons = geo_geohash_to_polygon(cells)\\r\\n| summarize arr = make_list(polygons)\\r\\n| project polygon = geo_union_polygons_array(arr)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|polygon|\\r\\n|---|\\r\\n|{\"type\":\"Polygon\",\"coordinates\":[[[42.4072265625,23.642578125],[42.451171875,23.642578125],[42.4951171875,23.642578125],[42.5390625,23.642578125],[42.5390625,23.686523437500004],[42.5390625,23.730468750000004],[42.5390625,23.7744140625],[42.4951171875,23.7744140625],[42.451171875,23.7744140625],[42.407226562499993,23.7744140625],[42.4072265625,23.73046875],[42.4072265625,23.6865234375],[42.4072265625,23.642578125]]]}|\\r\\n\\r\\nThe following example returns true because of the invalid Geohash token input.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAysoyswrUcjMK0vMyUxRsFXILM4rzcnRSE/NjwfijMTijPi81Mz0jKT8omIN9UR1TU0AbJVClTIAAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint invalid = isnull(geo_geohash_neighbors(\\'a\\'))\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|invalid|\\r\\n|---|\\r\\n|1|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/geo-geohash-neighbors-function\",\"geo-geohash-neighbors-function.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"geo_geohash_to_central_point\",\"Calculates the geospatial coordinates that represent the center of a geohash rectangular area.\",\"Read more about [`geohash`](https://en.wikipedia.org/wiki/Geohash).  \\r\\n\\r\\n## Syntax\\r\\n\\r\\n`geo_geohash_to_central_point(`*geohash*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n|Name|Type|Required|Description|\\r\\n|--|--|--|--|\\r\\n| *geohash* | string | &check; | A geohash value as it was calculated by [geo_point_to_geohash()](geo-point-to-geohash-function.md). The geohash string must be between 1 and 18 characters.|\\r\\n\\r\\n## Returns\\r\\n\\r\\nThe geospatial coordinate values in [GeoJSON Format](https://tools.ietf.org/html/rfc7946) and of a [dynamic](./scalar-data-types/dynamic.md) data type. If the geohash is invalid, the query will produce a null result.\\r\\n\\r\\n> [!NOTE]\\r\\n> The GeoJSON format specifies longitude first and latitude second.\",'> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAysoyswrUSjIB5G2Cump+fFAnJFYnBFfkh+fnJpXUpSYEw+W1lAqLs3Lq1TS5KpRSK0oSc1LUUjOzy9KycxLLEktBmoGq9JDEkMozMnPS88sKU1JBSpDUhBtEKujkJNYgk3KMBYAnhfZ4psAAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint point = geo_geohash_to_central_point(\"sunny\")\\r\\n| extend coordinates = point.coordinates\\r\\n| extend longitude = coordinates[0], latitude = coordinates[1]\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|point|coordinates|longitude|latitude|\\r\\n|---|---|---|---|\\r\\n|{<br>  \"type\": \"Point\",<br>  \"coordinates\": [<br>    42.47314453125,<br>    23.70849609375<br>  ]<br>}|[<br>  42.47314453125,<br>  23.70849609375<br>]|42.47314453125|23.70849609375|\\r\\n\\r\\nThe following example returns a null result because of the invalid geohash input.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAysoyswrUUhPzc9ILM5QsAWx4qG8+JL8+OTUvJKixJz4gnygMg2lRCVNAEhNnjMxAAAA\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint geohash = geo_geohash_to_central_point(\"a\")\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|geohash|\\r\\n|---|\\r\\n||\\r\\n\\r\\n### Creating location deep-links for Bing Maps\\r\\n\\r\\nYou can use the geohash value to create a deep-link URL to Bing Maps by pointing to the geohash center point:\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA32RS0/DMBCE7/kVo16cSGkNJ1BRhQRXuCD1gFBlGWdpLBI7st2G8vjvOA+gCgif7F17duYz51h7gg9Omy2UNUoGMjJoaxAslKN4xlXXvJUNCqJmXmnzjPXdDZ6crSGxJTtvrDYhqSig34lgRS0bsXMVVkhFX1wWByNrrXKIoENFy2FqhuQtQVzxGKenrAyh8UvO27ZdPMYLC2VrHtX8pW9WvdKCRY1hp6x1hY6OyT+cbpAz8XfvZJOj70VLgoyyBaWDjSwa+LhIOMe1NXtyoQtUSl/2AMgEckOoHNIUCCUZ7CIzNk3K/iXWwxmVp3jG8ghkymfEMx2XxlfiSLCz6mQ1ZP/WzL7Usi5kEwV/8q3A/P68fd0fzljyDnqJX19gMPXbaTqWcszu7Q7SEUpyNMs+AXziAcBEAgAA\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\n// Use string concatenation to create Bing Map deep-link URL from a geo-point\\r\\nlet point_to_map_url = (_point:dynamic, _title:string) \\r\\n{\\r\\n    strcat(\\'https://www.bing.com/maps?sp=point.\\', _point.coordinates[1] ,\\'_\\', _point.coordinates[0], \\'_\\', url_encode(_title)) \\r\\n};\\r\\n// Convert geohash to center point, and then use \\'point_to_map_url\\' to create Bing Map deep-link\\r\\nlet geohash_to_map_url = (_geohash:string, _title:string)\\r\\n{\\r\\n    point_to_map_url(geo_geohash_to_central_point(_geohash), _title)\\r\\n};\\r\\nprint geohash = \\'sv8wzvy7\\'\\r\\n| extend url = geohash_to_map_url(geohash, \"You are here\")\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|geohash|url|\\r\\n|---|---|\\r\\n|sv8wzvy7|[https://www.bing.com/maps?sp=point.32.15620994567871_34.80245590209961_You+are+here](https://www.bing.com/maps?sp=point.32.15620994567871_34.80245590209961_You+are+here)|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/geo-geohash-to-central-point-function\",\"geo-geohash-to-central-point-function.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"geo_geohash_to_polygon\",\"Calculates the polygon that represents the geohash rectangular area.\",\"Read more about [geohash](https://en.wikipedia.org/wiki/Geohash).  \\r\\n\\r\\n## Syntax\\r\\n\\r\\n`geo_geohash_to_polygon(`*geohash*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n|Name|Type|Required|Description|\\r\\n|--|--|--|--|\\r\\n| *geohash* | string | &check; | A geohash value as it was calculated by [geo_point_to_geohash()](geo-point-to-geohash-function.md). The geohash string must be between 1 and 18 characters.|\\r\\n\\r\\n## Returns\\r\\n\\r\\nPolygon in [GeoJSON Format](https://tools.ietf.org/html/rfc7946) and of a [dynamic](./scalar-data-types/dynamic.md) data type. If the geohash is invalid, the query will produce a null result.\\r\\n\\r\\n> [!NOTE]\\r\\n> Geohash edges are straight lines and aren't geodesics. If the geohash polygon is part of some other calculation, consider densifying it with [geo_polygon_densify()](geo-polygon-densify-function.md).\",'> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAysoyswrUXBPzc9ILM4IyM+pTM/PU7BVSE/Nj0+HCMaX5McXQCQ0lFKKTItKlTStAWzxQVs3AAAA\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint GeohashPolygon = geo_geohash_to_polygon(\"dr5ru\");\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|GeohashPolygon|\\r\\n|---|\\r\\n|{<br>\"type\": \"Polygon\",<br>\"coordinates\": [<br>[[-74.00390625, 40.7373046875], [-73.9599609375, 40.7373046875], [-73.9599609375, 40.78125], [-74.00390625, 40.78125], [-74.00390625, 40.7373046875]]]<br>}|\\r\\n\\r\\nThe following example assembles GeoJSON geometry collection of geohash polygons.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA21RPW+DMBTc+RUWE0huEj4CplKnSo3UoR06VpXl0CdCYzCyXwaq/vgaMASltQc/3707n+3tlhxAnYQ5Devz2+sLKZWUUGKtWu9ToJ1HCYFsq3sNQlIiBY5V6L17xI67PNkU+T6OYkrS3SZnRbZj9EpFGcuKkWIRS6J0RbEiStmkSpM4T6j34f2QTqsvez6pXK6HoeKdqlvkqLiDh0RjGEr24V+V7Zd9pVqnnlFUMxE4aNCaS9MIXX/DrZpLg9ahEWfgsjYY3PDrg4+i4p0oz8F4Px/7DnxK/CcQeNG2nGBr0ADq3lKLYOk9OPJx+YEBdZIajN39EzB01jZIBxqnvqt5K5rZfHxOpzSrf/bD8Bc5oFVdCAIAAA==\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\n// Geohash GeoJSON collection\\r\\ndatatable(lng:real, lat:real)\\r\\n[\\r\\n    -73.975212, 40.789608,\\r\\n    -73.916869, 40.818314,\\r\\n    -73.989148, 40.743273,\\r\\n]\\r\\n| project geohash = geo_point_to_geohash(lng, lat, 5)\\r\\n| project geohash_polygon = geo_geohash_to_polygon(geohash)\\r\\n| summarize geohash_polygon_lst = make_list(geohash_polygon)\\r\\n| project bag_pack(\\r\\n    \"type\", \"Feature\",\\r\\n    \"geometry\", bag_pack(\"type\", \"GeometryCollection\", \"geometries\", geohash_polygon_lst),\\r\\n    \"properties\", bag_pack(\"name\", \"Geohash polygons collection\"))\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|Column1|\\r\\n|---|\\r\\n|{<br>\"type\": \"Feature\",<br>\"geometry\": {\"type\": \"GeometryCollection\",\"geometries\": [<br>{\"type\": \"Polygon\", \"coordinates\": [[[-74.00390625, 40.78125], [-73.9599609375, 40.78125], [-73.9599609375, 40.8251953125],[ -74.00390625, 40.8251953125], [ -74.00390625, 40.78125]]]},<br>{\"type\": \"Polygon\", \"coordinates\": [[[ -73.9599609375, 40.78125], [-73.916015625, 40.78125], [-73.916015625, 40.8251953125], [-73.9599609375, 40.8251953125], [-73.9599609375, 40.78125]]]},<br>{\"type\": \"Polygon\", \"coordinates\": [[[-74.00390625, 40.7373046875], [-73.9599609375, 40.7373046875], [-73.9599609375, 40.78125], [-74.00390625, 40.78125], [-74.00390625, 40.7373046875]]]}]<br>},<br>\"properties\": {\"name\": \"Geohash polygons collection\"<br>}}|\\r\\n\\r\\nThe following example returns a null result because of the invalid geohash input.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAysoyswrUXBPzc9ILM4IyM+pTM/PU7BVSE/Nj0+HCMaX5McXQCQ0lBKVNK0B6T62yDMAAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint GeohashPolygon = geo_geohash_to_polygon(\"a\");\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|GeohashPolygon|\\r\\n|---|\\r\\n||',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/geo-geohash-to-polygon-function\",\"geo-geohash-to-polygon-function.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"geo_h3cell_children\",\"Calculates the H3 cell children.\",\"Read more about [H3 Cell](https://eng.uber.com/h3/).\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`geo_h3cell_children(`*h3cell*`,`*resolution*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n|Name|Type|Required|Description|\\r\\n|--|--|--|--|\\r\\n| *h3cell* | string | &check; | An H3 Cell token value as it was calculated by [geo_point_to_h3cell()](geo-point-to-h3cell-function.md).|\\r\\n| *resolution* | int | | Defines the requested children cells resolution. Supported values are in the range [1, 15]. If unspecified, an immediate children token will be calculated.|\\r\\n\\r\\n## Returns\\r\\n\\r\\nArray of H3 Cell children tokens. If the H3 Cell is invalid or child resolution is lower than given cell, the query will produce a null result.\\r\\n\\r\\n> [!NOTE]\\r\\n>\\r\\n> A difference between cell resolution and its children can't be more than 5. A difference of 5 levels will be resulted in up to 16807 children tokens.\",'> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAysoyswrUUjOyMxJKUrNU7BVSE/Nj88wTk7NyYmHiWqoW5gZJRoamBulQYC6JgDo0XQKNwAAAA==\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint children = geo_h3cell_children(\\'862a1072fffffff\\')\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|children|\\r\\n|---|\\r\\n|[ \"872a10728ffffff\", \"872a10729ffffff\", \"872a1072affffff\", \"872a1072bffffff\", \"872a1072cffffff\", \"872a1072dffffff\", \"872a1072effffff\" ]|\\r\\n\\r\\nThe following example counts children 3 levels below a given cell.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA8tJLVHIMI5PTs3JUbBVULcwM0o0NDA3SoMAdWsFroKizLwSheSMzJyUotS8+OT8UiDXViGxqCixMj4nNS+9JEMjPTU/PsMYZEg8TKEG1FQdBSTJnNSy1ByYjKaCtoKxpiYAhE7I7YIAAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nlet h3_cell = \\'862a1072fffffff\\'; \\r\\nprint children_count = array_length(geo_h3cell_children(h3_cell, geo_h3cell_level(h3_cell) + 3))\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|children_count|\\r\\n|---|\\r\\n|343|\\r\\n\\r\\nThe following example assembles GeoJSON geometry collection of H3 Cell children polygons.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA22PwU7DMAyG73sKq5e1EkiwSsCFExLwFlHovCZbEkeJhyji4XFouoKET8nv//9sx2QDw2Cs2ycM8AgjkjL9gM6pRW23D3c7fXtzvzvMte02X+Dfr/Ej6rBf00zAU0Q6tJmFOxZbTHTEoY74y2dSkdw0UmgXREnks/c62U8E0yujs1lcymUWgtcnVM5mnlO/hwj8mKmc8aZHFfVwajcg1ZS1mitonlHzOclzlsXvkdMkrUvg4n2pzSdyTuCWQlFrxGKW3z8LdhUtK0VMPPtWeND+B/7aQw1lGNYBXfcNNfE/VZEBAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint children = geo_h3cell_children(\\'862a1072fffffff\\')\\r\\n| mv-expand children to typeof(string)\\r\\n| project child = geo_h3cell_to_polygon(children)\\r\\n| summarize h3_hash_polygon_lst = make_list(child)\\r\\n| project geojson = bag_pack(\\r\\n    \"type\", \"Feature\",\\r\\n    \"geometry\", bag_pack(\"type\", \"GeometryCollection\", \"geometries\", h3_hash_polygon_lst),\\r\\n    \"properties\", bag_pack(\"name\", \"H3 polygons collection\"))\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|geojson|\\r\\n|---|\\r\\n|{ \"type\": \"Feature\", \"geometry\": { \"type\": \"GeometryCollection\", \"geometries\": [ ... ... ... ] }, \"properties\": { \"name\": \"H3 polygons collection\" }}|\\r\\n\\r\\nThe following example returns true because of the invalid cell.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAysoyswrUcgsjs8rzclRsAWyQAyN9NT8+Azj5NScnPjkjMyclKLUPA31xKRkdU1NABWsmhkyAAAA\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint is_null = isnull(geo_h3cell_children(\\'abc\\'))\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|is_null|\\r\\n|---|\\r\\n|1|\\r\\n\\r\\nThe following example returns true because the level difference between cell and its children is more than 5.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAysoyswrUcgsjs8rzclRsAWyQAyN9NT8+Azj5NScnPjkjMyclKLUPLBYQT5QeXwJTFLDUEcBiCw1gZSppiYAGXNpOU0AAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint is_null = isnull(geo_h3cell_children(geo_point_to_h3cell(1, 1, 9), 15))\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|is_null|\\r\\n|---|\\r\\n|1|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/geo-h3cell-children-function\",\"geo-h3cell-children-function.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"geo_h3cell_level\",\"Calculates the H3 cell resolution.\",\"Read more about [H3 Cell](https://eng.uber.com/h3/).\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`geo_h3cell_level(`*h3cell*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n|Name|Type|Required|Description|\\r\\n|--|--|--|--|\\r\\n| *h3cell* | string | &check; | An H3 Cell token value as it was calculated by [geo_point_to_h3cell()](geo-point-to-h3cell-function.md).|\\r\\n\\r\\n## Returns\\r\\n\\r\\nAn integer that represents H3 Cell level. Valid level is in range [0, 15]. If the H3 Cell is invalid, the query will produce a null result.\",'> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAysoyswrUUhOzcmJL0otVrBVSE/Nj88wBgvkpJal5mioW5gZJRoamBulQYC6JgA3an62NAAAAA==\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint cell_res = geo_h3cell_level(\\'862a1072fffffff\\')\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|cell_res|\\r\\n|---|\\r\\n|6|\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAysoyswrUUhOzcmJL0otVrBVSE/Nj88wBgvkpJal5miABArygariS2AyGoY6QGigqQkAmqtQej4AAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint cell_res = geo_h3cell_level(geo_point_to_h3cell(1,1,10))\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|cell_res|\\r\\n|---|\\r\\n|10|\\r\\n\\r\\nThe following example returns true because of the invalid H3 Cell token input.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAysoyswrUcjMK0vMyUyJL0otVrBVyCzOK83J0UhPzY/PME5OzcmJz0ktS83RUE9MSlbX1AQAUAf8gDMAAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint invalid_res = isnull(geo_h3cell_level(\\'abc\\'))\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|invalid_res|\\r\\n|---|\\r\\n|1|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/geo-h3cell-level-function\",\"geo-h3cell-level-function.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"geo_h3cell_neighbors\",\"Calculates the H3 cell neighbors.\",\"Read more about [H3 Cell](https://eng.uber.com/h3/).\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`geo_h3cell_neighbors(`*h3cell*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n|Name|Type|Required|Description|\\r\\n|--|--|--|--|\\r\\n| *h3cell* | string | &check; | An H3 Cell token value as it was calculated by [geo_point_to_h3cell()](geo-point-to-h3cell-function.md).|\\r\\n\\r\\n## Returns\\r\\n\\r\\nAn array of H3 cell neighbors. If the H3 Cell is invalid, the query will produce a null result.\\r\\n\\r\\n> [!NOTE]\\r\\n> If more than immidiate neighbors are needed, please see [geo_h3cell_rings()](geo-h3cell-rings-function.md).\",'The following example calculates H3 cell neighbors.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAysoyswrUchLzUzPSMovKlawVUhPzY/PME5OzcmJhwtrqFuYGSUaGpgbpUGAuiYA0YTxRzkAAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint neighbors = geo_h3cell_neighbors(\\'862a1072fffffff\\')\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|neighbors|\\r\\n|---|\\r\\n|[\"862a10727ffffff\",\"862a10707ffffff\",\"862a1070fffffff\",\"862a10777ffffff\",\"862a100dfffffff\",\"862a100d7ffffff\"]|\\r\\n\\r\\nThe following example calculates an array of input H3 cell with its neighbors.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA8tJLVHIME5OzclRsFVQtzAzSjQ0MDdKgwB1a66Cosy8EgWQfDFQQWJRUWJlfHJ+XnJiiUZBYnJ2PFhEA2KCpo5Cemp+PIQTn5eamZ6RlF9UDJPVBADbK8PrbAAAAA==\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nlet h3cell = \\'862a1072fffffff\\';\\r\\nprint cells = array_concat(pack_array(h3cell), geo_h3cell_neighbors(h3cell))\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|cells|\\r\\n|---|\\r\\n|[\"862a1072fffffff\",\"862a10727ffffff\",\"862a10707ffffff\",\"862a1070fffffff\",\"862a10777ffffff\",\"862a100dfffffff\",\"862a100d7ffffff\"]|\\r\\n\\r\\nThe following example calculates H3 cells polygons GeoJSON geometry collection.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA2WQ0UoDMRBF3/sVIS/NQgWtoIL4JOhnhGmcbtMmmZBMxRU/3sluigXzlLlz58xNArI63DsMQb2o9dPDFu5uH7f75ayfV7n4xKr1qxigFJiso+SATQZ3srNiFsKwUSOSXQqb0I+HHZV66Q6rHxU/b/ArQ/roSCbFU0bam8qyaWyeXOiIjlWmMI2U2t4rLJPtDTMj2kQ9xwjFf2MLKPYIJ7TBV8nYGddcgR0rJfHtYLTtFUa3EHqj9BsCn4tctbgicplE/W97781XCkGQnlJT+4jHKpUkkf/QsjRj4UX7AyWIM+iSTw/DL9SI6V2KAQAA\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nlet h3cell = \\'862a1072fffffff\\';\\r\\nprint cells = array_concat(pack_array(h3cell), geo_h3cell_neighbors(h3cell))\\r\\n| mv-expand cells to typeof(string)\\r\\n| project polygons = geo_h3cell_to_polygon(cells)\\r\\n| summarize arr = make_list(polygons)\\r\\n| project geojson = bag_pack(\"type\", \"Feature\",\"geometry\", bag_pack(\"type\", \"GeometryCollection\", \"geometries\", arr), \"properties\", bag_pack(\"name\", \"polygons\"))\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|geojson|\\r\\n|---|\\r\\n|{\"type\": \"Feature\",\"geometry\": {\"type\": \"GeometryCollection\",\"geometries\": [<br>  {\"type\":\"Polygon\",\"coordinates\":[[[-74.0022744646159,40.735376026215022],[-74.046908029686236,40.727986222489115],[-74.060610712223664,40.696775140349033],[-74.029724408156682,40.672970047595463],[-73.985140983708192,40.680349049267583],[-73.971393761028622,40.71154393543933],[-74.0022744646159,40.735376026215022]]]},<br>  {\"type\":\"Polygon\",\"coordinates\":[[[-74.019448383546617,40.790439140236963],[-74.064132193843633,40.783038509825],[-74.077839665342211,40.751803958414136],[-74.046908029686236,40.727986222489115],[-74.0022744646159,40.735376026215022],[-73.988522328408948,40.766594382212254],[-74.019448383546617,40.790439140236963]]]},<br>  {\"type\":\"Polygon\",\"coordinates\":[[[-74.077839665342211,40.751803958414136],[-74.1224794808745,40.744383587828388],[-74.1361375042681,40.713156370029125],[-74.1052004095288,40.689365648097258],[-74.060610712223664,40.696775140349033],[-74.046908029686236,40.727986222489115],[-74.077839665342211,40.751803958414136]]]},<br>  {\"type\":\"Polygon\",\"coordinates\":[[[-74.060610712223664,40.696775140349033],[-74.1052004095288,40.689365648097258],[-74.118853750491638,40.658161927046628],[-74.0879619670209,40.634383824229609],[-74.043422283844933,40.641782462872115],[-74.029724408156682,40.672970047595463],[-74.060610712223664,40.696775140349033]]]},<br>  {\"type\":\"Polygon\",\"coordinates\":[[[-73.985140983708192,40.680349049267583],[-74.029724408156682,40.672970047595463],[-74.043422283844933,40.641782462872115],[-74.012581189358343,40.617990065981623],[-73.968047801220749,40.625358290164748],[-73.954305509472675,40.656529678451555],[-73.985140983708192,40.680349049267583]]]},<br>  {\"type\":\"Polygon\",\"coordinates\":[[[-73.926766604813565,40.718903205013063],[-73.971393761028622,40.71154393543933],[-73.985140983708192,40.680349049267583],[-73.954305509472675,40.656529678451555],[-73.909728515658443,40.663878222244435],[-73.895936872069854,40.69505685239637],[-73.926766604813565,40.718903205013063]]]},<br>  {\"type\":\"Polygon\",\"coordinates\":[[[-73.943844904976629,40.773964402038523],[-73.988522328408948,40.766594382212254],[-74.0022744646159,40.735376026215022],[-73.971393761028622,40.71154393543933],[-73.926766604813565,40.718903205013063],[-73.912969923470314,40.750105305345329],[-73.943844904976629,40.773964402038523]]]}]},<br>  \"properties\": {\"name\": \"polygons\"}}|\\r\\n\\r\\nThe following example calculates polygon unions that represent H3 cell and its neighbors.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA22PwQrCMAyG73uK3taBgk5QQXyWUmvW1bVNaTtx4sPbbh14MIdA8v/5kmiIpD8I0JpcSX0+tny/O7XdEvWlcl7ZSLIekoF7zycm0AoeqeNiYHOHLoRmQyQgWwpmQcn+hj6salN9iHlu4eW4vRdkRBInB9jRENMmmT3O4wNEJA71JNHmvT/YiKwIdEbkiTAaw716Qz4w2Q0fgGkV0o2F8YdbsKNVaFdkKP+k3HwBry+HcRoBAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nlet h3cell = \\'862a1072fffffff\\';\\r\\nprint cells = array_concat(pack_array(h3cell), geo_h3cell_neighbors(h3cell))\\r\\n| mv-expand cells to typeof(string)\\r\\n| project polygons = geo_h3cell_to_polygon(cells)\\r\\n| summarize arr = make_list(polygons)\\r\\n| project polygon = geo_union_polygons_array(arr)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|polygon|\\r\\n|---|\\r\\n|{<br>  \"type\": \"Polygon\",<br>  \"coordinates\": [[[  -73.926766604813565,  40.718903205013063],[  -73.912969923470314,  40.750105305345329],[  -73.943844904976629,  40.773964402038523],[  -73.988522328408948,  40.766594382212254],[  -74.019448383546617,  40.79043914023697],[  -74.064132193843633,  40.783038509825005],[  -74.077839665342211,  40.751803958414136],[  -74.1224794808745,  40.744383587828388],[  -74.1361375042681,  40.713156370029125],[  -74.1052004095288,  40.689365648097251],[  -74.118853750491638,  40.658161927046628],[  -74.0879619670209,  40.6343838242296],[  -74.043422283844933,  40.641782462872115],[  -74.012581189358343,  40.617990065981623],[  -73.968047801220749,  40.625358290164755],[  -73.954305509472675,  40.656529678451555],[  -73.909728515658443,  40.663878222244442],[  -73.895936872069854,  40.695056852396377],[  -73.926766604813565,  40.718903205013063]]]}|\\r\\n\\r\\nThe following example returns true because of the invalid H3 Cell token input.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAysoyswrUcjMK0vMyUxRsFXILM4rzcnRSE/Nj88wTk7NyYnPS81Mz0jKLyrWUE9MSlbX1AQAU7dmMDMAAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint invalid = isnull(geo_h3cell_neighbors(\\'abc\\'))\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|invalid|\\r\\n|---|\\r\\n|1|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/geo-h3cell-neighbors-function\",\"geo-h3cell-neighbors-function.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"geo_h3cell_parent\",\"Calculates the H3 cell parent.\",\"Read more about [H3 Cell](https://eng.uber.com/h3/).\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`geo_h3cell_parent(`*h3cell*`,`*resolution*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n|Name|Type|Required|Description|\\r\\n|--|--|--|--|\\r\\n| *h3cell* | string | &check; | An H3 Cell token value as it was calculated by [geo_point_to_h3cell()](geo-point-to-h3cell-function.md).|\\r\\n| *resolution* | int | | Defines the requested children cells resolution. Supported values are in the range [0, 14]. If unspecified, an immediate children token will be calculated.|\\r\\n\\r\\n## Returns\\r\\n\\r\\nH3 Cell parent token `string`. If the H3 Cell is invalid or parent resolution is higher than given cell, the query will produce an empty result.\",'> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAysoyswrUShILErNK4lPTs3JUbBVSE/Nj88wBnHiIRIa6hZmRomGBuZGaRCgrgkAkZ+TCTgAAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint parent_cell = geo_h3cell_parent(\\'862a1072fffffff\\')\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|parent_cell|\\r\\n|---|\\r\\n|852a1073fffffff|\\r\\n\\r\\nThe following example calculates cell parent at level 1.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAysoyswrUShILErNK4lPTs3JUbBVSE/Nj88wBnHiIRIa6hZmRomGBuZGaRCgrqNgqAkA+3YzFzsAAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint parent_cell = geo_h3cell_parent(\\'862a1072fffffff\\', 1)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|parent_cell|\\r\\n|---|\\r\\n|812a3ffffffffff|\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAysoyswrUShILErNK4kvSi1WsFVIT82PzzBOTs3Jic9JLUvN0UASgCjUAAsV5AO1xpfA5DQMdYDQQBMIAJou0OFVAAAA\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint parent_res = geo_h3cell_level(geo_h3cell_parent((geo_point_to_h3cell(1,1,10))))\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|parent_res|\\r\\n|---|\\r\\n|9|\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAysoyswrUShILErNK4kvSi1WsFVIT82PzzBOTs3Jic9JLUvN0UASgCgEixTkA3XGl8CkNAx1gNBAU0fBWFMTAG9zfXpWAAAA\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint parent_res = geo_h3cell_level(geo_h3cell_parent(geo_point_to_h3cell(1,1,10), 3))\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|parent_res|\\r\\n|---|\\r\\n|3|\\r\\n\\r\\nThe following example produces an empty result because of the invalid cell input.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAysoyswrUcjMK0vMyUxRsFXILE7NLSip1EhPzY/PME5OzcmJL0gsSs0r0VA3NDJW19QEAJzHefMxAAAA\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint invalid = isempty(geo_h3cell_parent(\\'123\\'))\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|invalid|\\r\\n|---|\\r\\n|1|\\r\\n\\r\\nThe following example produces an empty result because of the invalid parent resolution.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAysoyswrUcjMK0vMyUxRsFXILE7NLSip1EhPzY/PME5OzcmJL0gsSs0r0VC3MDNKNDQwN0qDAHUdBUMDA01NALIyRtVCAAAA\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint invalid = isempty(geo_h3cell_parent(\\'862a1072fffffff\\', 100))\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|invalid|\\r\\n|---|\\r\\n|1|\\r\\n\\r\\nThe following example produces an empty result because parent can\\'t be of a higher resolution than child.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAysoyswrUcjMK0vMyUxRsFXILE7NLSip1EhPzY/PME5OzcmJL0gsSs0r0VC3MDNKNDQwN0qDAHUdBUNTTU0A3k3StEEAAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint invalid = isempty(geo_h3cell_parent(\\'862a1072fffffff\\', 15))\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|invalid|\\r\\n|---|\\r\\n|1|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/geo-h3cell-parent-function\",\"geo-h3cell-parent-function.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"geo_h3cell_rings\",\"Calculates the H3 cell Rings.\",\"Read more about [H3 Cell](https://eng.uber.com/h3/).\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`geo_h3cell_rings(`*h3cell*`,`*distance*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n|Name|Type|Required|Description|\\r\\n|--|--|--|--|\\r\\n| *h3cell* | string | &check; | An H3 Cell token value as it was calculated by [geo_point_to_h3cell()](geo-point-to-h3cell-function.md).|\\r\\n| *distance* | int | &check; | Defines the maximum ring distance from given cell. Valid distance is in range [0, 142].|\\r\\n\\r\\n## Returns\\r\\n\\r\\nAn ordered array of ring arrays where first ring contains the original cell, second ring contains neighboring cells, and so on. If either the H3 Cell or distance is invalid, the query produces a null result.\\r\\n\\r\\n> [!NOTE]\\r\\n>\\r\\n> * For H3 Cell immediate neighbors only, please see [geo_h3cell_neighbors()](geo-h3cell-neighbors-function.md).\\r\\n> * A cell might be not present in the ring if pentagonal distortion was encountered.\",'The following example produces rings up to distance 2.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAysoyswrUQAS6cUKtgrpqfnxGcbJqTk58WAhDXULM8M0CwtLkzQIUNdRMNIEAJ04a1w0AAAA\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint rings = geo_h3cell_rings(\\'861f8894fffffff\\', 2)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|rings|\\r\\n|---|\\r\\n|[<br> [\"861f8894fffffff\"],<br> [\"861f88947ffffff\",\"861f8895fffffff\",\"861f88867ffffff\",\"861f8d497ffffff\",\"861f8d4b7ffffff\",\"861f8896fffffff\"],<br> [\"861f88967ffffff\",\"861f88977ffffff\",\"861f88957ffffff\",\"861f8882fffffff\",\"861f88877ffffff\",\"861f88847ffffff\",\"861f8886fffffff\",\"861f8d49fffffff\",\"861f8d487ffffff\",\"861f8d4a7ffffff\",\"861f8d59fffffff\",\"861f8d597ffffff\"]<br> ]|\\r\\n\\r\\nThe following example produces all cells at level 1 (all neighbors).\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAysoyswrUchLzUzPSMovKlawVUhPzY/PME5OzcmJB8qlF2uoW5gZpllYWJqkQYC6joKhZrRhLACfNYVMOwAAAA==\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint neighbors = geo_h3cell_rings(\\'861f8894fffffff\\', 1)[1]\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|neighbors|\\r\\n|---|\\r\\n|[\"861f88947ffffff\", \"861f8895fffffff\", \"861f88867ffffff\", \"861f8d497ffffff\", \"861f8d4b7ffffff\",\"861f8896fffffff\"]|\\r\\n\\r\\nThe following example produces list of cells from all rings.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAysoyswrUQAS6cUKtgrpqfnxGcbJqTk58WAhDXULM8M0CwtLkzQIUNdRMNTkqlHILdNNLCjIqYTqzM9T4NLgUlAoLs3NTSzKrEpVAJkBMjE3MTs1PiezuEQDrFKTSxMAkXmI93IAAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint rings = geo_h3cell_rings(\\'861f8894fffffff\\', 1)\\r\\n| mv-apply rings on \\r\\n(\\r\\n  summarize cells = make_list(rings)\\r\\n)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|cells|\\r\\n|---|\\r\\n|[\"861f8894fffffff\",\"861f88947ffffff\",\"861f8895fffffff\",\"861f88867ffffff\",\"861f8d497ffffff\",\"861f8d4b7ffffff\",\"861f8896fffffff\"]|\\r\\n\\r\\nThe following example assembles GeoJSON geometry collection of all cells.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA1VPS07DMBDd5xSjbGpLZVEVobBgVQm4hWXCJKT1T/a0ahCHZ5yYumRhxe/vECdHwMeY4AVG9Opr36MxaoHEpnvaDV33/Dis32YLO9n8gL086BDMXJzeQSMagHS2VsfpG8HqEyozJRKLQjbFhdeg3SdkZq0A8kBzQD+IRBnJwhD9EXuC4M08cvi/ZeRVwUWNya7aXnhlErG3bin4fQUHH9NS8aFHFXR/yg8BaPOodgvtK2o6R/5dYdZbpDgzdTPctG+FPHhjOHzyLqPFMmHi2900WSJ5SsBIK19DnbZL6Pv+z5Sgr8FS/gJRaHlovAEAAA==\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint rings = geo_h3cell_rings(\\'861f8894fffffff\\', 1)\\r\\n| mv-apply rings on \\r\\n(\\r\\n  summarize make_list(rings)\\r\\n)\\r\\n| mv-expand list_rings to typeof(string)\\r\\n| project polygon = geo_h3cell_to_polygon(list_rings)\\r\\n| summarize polygon_lst = make_list(polygon)\\r\\n| project geojson = bag_pack(\\r\\n    \"type\", \"Feature\",\\r\\n    \"geometry\", bag_pack(\"type\", \"GeometryCollection\", \"geometries\", polygon_lst),\\r\\n    \"properties\", bag_pack(\"name\", \"H3 polygons collection\"))\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|geojson|\\r\\n|---|\\r\\n|{ \"type\": \"Feature\", \"geometry\": { \"type\": \"GeometryCollection\", \"geometries\": [ ... ... ... ]}, \"properties\": { \"name\": \"H3 polygons collection\" }}|\\r\\n\\r\\nThe following example returns true because of the invalid cell.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAysoyswrUcgsjs8rzclRsAWyQAyN9NT8+Azj5NScnHiggvRiDfXEpGR1HQVjTU0AZygYaTIAAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint is_null = isnull(geo_h3cell_rings(\\'abc\\', 3))\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|is_null|\\r\\n|---|\\r\\n|1|\\r\\n\\r\\nThe following example returns true because of the invalid distance.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAysoyswrUcgsjs8rzclRsAWyQAyN9NT8+Azj5NScnHiggvRiDXULM8M0CwtLkzQIUNdRMDQ10NQEAAa/KwhAAAAA\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint is_null = isnull(geo_h3cell_rings(\\'861f8894fffffff\\', 150))\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|is_null|\\r\\n|---|\\r\\n|1|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/geo-h3cell-rings-function\",\"geo-h3cell-rings-function.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"geo_h3cell_to_central_point\",\"Calculates the geospatial coordinates that represent the center of an H3 Cell.\",\"Read more about [H3 Cell](https://eng.uber.com/h3/).\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`geo_h3cell_to_central_point(`*h3cell*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n|Name|Type|Required|Description|\\r\\n|--|--|--|--|\\r\\n| *h3cell* | string | &check; | An H3 Cell token value as it was calculated by [geo_point_to_h3cell()](geo-point-to-h3cell-function.md).|\\r\\n\\r\\n## Returns\\r\\n\\r\\nThe geospatial coordinate values in [GeoJSON Format](https://tools.ietf.org/html/rfc7946) and of a [dynamic](./scalar-data-types/dynamic.md) data type. If the H3 cell token is invalid, the query will produce a null result.\\r\\n\\r\\n> [!NOTE]\\r\\n> The GeoJSON format specifies longitude first and latitude second.\",'> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAysoyswrUcgwTk7NyVGwVUhPzY+HcOJL8uOTU/NKihJz4gvygYo0lCzMjBINDcyN0iBASRMA4+TrCj0AAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint h3cell = geo_h3cell_to_central_point(\"862a1072fffffff\")\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|h3cell|\\r\\n|---|\\r\\n|{<br>\"type\": \"Point\",<br>\"coordinates\": [-74.016008479792447, 40.7041679083504]<br>}|\\r\\n\\r\\nThe following example returns the longitude of the H3 Cell center point:\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAysoyswrUcjJz0vPLClNSVWwVUhPzY/PME5OzcmJL8mPT07NKylKzIkvyAeq01CyMDNKNDQwN0qDACVNveT8/KKUzLzEktTiaINYALPfSvhPAAAA\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint longitude = geo_h3cell_to_central_point(\"862a1072fffffff\").coordinates[0]\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|longitude|\\r\\n|---|\\r\\n|-74.0160084797924|\\r\\n\\r\\nThe following example returns a null result because of the invalid H3 cell token input.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAysoyswrUcgwTk7NyVGwVUhPzY+HcOJL8uOTU/NKihJz4gvygYo0lAyVNAFOq4ZHLwAAAA==\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint h3cell = geo_h3cell_to_central_point(\"1\")\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|h3cell|\\r\\n|---|\\r\\n||',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/geo-h3cell-to-central-point-function\",\"geo-h3cell-to-central-point-function.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"geo_h3cell_to_polygon\",\"Calculates the polygon that represents the H3 Cell rectangular area.\",\"Read more about [H3 Cell](https://eng.uber.com/h3/).\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`geo_h3cell_to_polygon(`*h3cell*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n|Name|Type|Required|Description|\\r\\n|--|--|--|--|\\r\\n| *h3cell* | string | &check; | An H3 Cell token value as it was calculated by [geo_point_to_h3cell()](geo-point-to-h3cell-function.md).|\\r\\n\\r\\n## Returns\\r\\n\\r\\nPolygon in [GeoJSON Format](https://tools.ietf.org/html/rfc7946) and of a [dynamic](./scalar-data-types/dynamic.md) data type. If the H3 Cell is invalid, the query will produce a null result.\\r\\n\\r\\n> [!NOTE]\\r\\n> H3 Cell polygon edges are straight lines and aren't geodesics. If an H3 Cell polygon is part of some other calculation, consider densifying it with [geo_polygon_densify()](geo-polygon-densify-function.md).\",'> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAysoyswrUUhPzY/PME5OzcmJL8mPL8jPqUzPz9NQsjAzSjQ0MDdKgwAlTQDHS0haLgAAAA==\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint geo_h3cell_to_polygon(\"862a1072fffffff\")\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|print_0|\\r\\n|---|\\r\\n|{<br>\"type\": \"Polygon\",<br>\"coordinates\": [[[-74.0022744646159, 40.735376026215022], [-74.046908029686236, 40.727986222489115], [-74.060610712223664, 40.696775140349033],[  -74.029724408156682, 40.672970047595463], [-73.985140983708192, 40.680349049267583],[  -73.971393761028622, 40.71154393543933], [-74.0022744646159, 40.735376026215022]]]<br>}|\\r\\n\\r\\nThe following example assembles GeoJSON geometry collection of H3 Cell polygons.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA22RwU6EMBCG7zzFhBMkdRcsQjHxZOIaD3rwaEzTxQngFkra7gHjw1ugYTe7tpfp/PPN/G23W3imUKGUsEP18v72CpWSEivbqj74EtbtvcRI9vW9RiEJSGHnKA4+AnDrpqCb8i7PGSWQJRuWFGVSkJOU5iwvFyllNM3OJFamGZulIqO3BSXBZ/ALg1bfbj40lDfCNPAANSo+qLa33Cre0MntZGj2QiCPryFXLsda9R5emIn2+cjXTag5dp3Q7Q9ewlwa6xp04oBctsZGF/r53L2o+SCqQzTfLrTjgCGB8AmFPWoXLmnnpUOrRyetwFq78+Lj+v5T1iMtGnf6x2DsWzsjA2q71J2a96Kbm7tP9pA5++Awjv8A8oXQEwECAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\n// H3 cell GeoJSON collection\\r\\ndatatable(lng:real, lat:real)\\r\\n[\\r\\n    -73.956683, 40.807907,\\r\\n    -73.916869, 40.818314,\\r\\n    -73.989148, 40.743273,\\r\\n]\\r\\n| project h3_hash = geo_point_to_h3cell(lng, lat, 6)\\r\\n| project h3_hash_polygon = geo_h3cell_to_polygon(h3_hash)\\r\\n| summarize h3_hash_polygon_lst = make_list(h3_hash_polygon)\\r\\n| project bag_pack(\\r\\n    \"type\", \"Feature\",\\r\\n    \"geometry\", bag_pack(\"type\", \"GeometryCollection\", \"geometries\", h3_hash_polygon_lst),\\r\\n    \"properties\", bag_pack(\"name\", \"H3 polygons collection\"))\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|Column1|\\r\\n|---|\\r\\n|{<br>\"type\": \"Feature\",<br>\"geometry\": {\"type\": \"GeometryCollection\", \"geometries\": [{\"type\": \"Polygon\",\"coordinates\": [[[-73.9609635556213, 40.829061732419916], [-74.005691351383675, 40.821680937801922], [-74.019448383546617, 40.790439140236963], [-73.988522328408948, 40.766594382212254], [-73.943844904976629, 40.773964402038523], [-73.930043202964953, 40.805189944379514], [-73.9609635556213, 40.829061732419916]]]},<br>{\"type\": \"Polygon\", \"coordinates\": [[[-73.902385078754875, 40.867671551513595], [-73.94715685019348, 40.860310688399885], [-73.9609635556213, 40.829061732419916], [-73.930043202964953, 40.805189944379514], [-73.885321931061725, 40.812540084842404 ], [-73.871470551071766, 40.843772725733125], [ -73.902385078754875, 40.867671551513595]]]},<br>{\"type\": \"Polygon\",\"coordinates\": [[[-73.943844904976629, 40.773964402038523], [-73.988522328408948, 40.766594382212254], [-74.0022744646159, 40.735376026215022], [-73.971393761028622, 40.71154393543933], [-73.926766604813565, 40.718903205013063], [ -73.912969923470314, 40.750105305345329 ], [-73.943844904976629, 40.773964402038523]]]}]<br>},<br>\"properties\": {\"name\": \"H3 polygons collection\"}<br>}|\\r\\n\\r\\nThe following example returns a null result because of the invalid H3 Cell token input.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAysoyswrUUhPzY/PME5OzcmJL8mPL8jPqUzPz9NQclDSBAA3CNqGIAAAAA==\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint geo_h3cell_to_polygon(\"@\")\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|print_0|\\r\\n|---|\\r\\n||',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/geo-h3cell-to-polygon-function\",\"geo-h3cell-to-polygon-function.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"geo_intersection_2lines\",\"Calculates the intersection of two lines or multilines.\",'## Syntax\\r\\n\\r\\n`geo_intersection_2lines(`*lineString1*`,`*lineString2*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n|Name|Type|Required|Description|\\r\\n|--|--|--|--|\\r\\n| *lineString1* | dynamic | &check; | A line or multiline in the [GeoJSON format](https://tools.ietf.org/html/rfc7946).|\\r\\n| *lineString2* | dynamic | &check; | A line or multiline in the [GeoJSON format](https://tools.ietf.org/html/rfc7946).|\\r\\n\\r\\n## Returns\\r\\n\\r\\nIntersection in [GeoJSON Format](https://tools.ietf.org/html/rfc7946) and of a [dynamic](./scalar-data-types/dynamic.md) data type. If LineString or a MultiLineString are invalid, the query will produce a null result.\\r\\n\\r\\n> [!NOTE]\\r\\n>\\r\\n> * The geospatial coordinates are interpreted as represented by the [WGS-84](https://earth-info.nga.mil/index.php?dir=wgs84&action=wgs84) coordinate reference system.\\r\\n> * The [geodetic datum](https://en.wikipedia.org/wiki/Geodetic_datum) used to measure distance on Earth is a sphere. Line edges are [geodesics](https://en.wikipedia.org/wiki/Geodesic) on the sphere.\\r\\n> * If input line edges are straight cartesian lines, consider using [geo_line_densify()](geo-line-densify-function.md) in order to convert planar edges to geodesics.\\r\\n\\r\\n**LineString definition and constraints**\\r\\n\\r\\ndynamic({\"type\": \"LineString\",\"coordinates\": [[lng_1,lat_1], [lng_2,lat_2],..., [lng_N,lat_N]]})\\r\\n\\r\\ndynamic({\"type\": \"MultiLineString\",\"coordinates\": [[line_1, line_2,..., line_N]]})\\r\\n\\r\\n* LineString coordinates array must contain at least two entries.\\r\\n* Coordinates [longitude, latitude] must be valid where longitude is a real number in the range [-180, +180] and latitude is a real number in the range [-90, +90].\\r\\n* Edge length must be less than 180 degrees. The shortest edge between the two vertices will be chosen.\\r\\n\\r\\n> [!TIP]\\r\\n>\\r\\n> Use literal LineString or MultiLineString for better performance.','The following example calculates intersection between two lines. In this case, the result is a point.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA52QsQqDMBRF935FyKSQikbjSyz9g24dRUT0IQFNRLNI6b83rUXs2uEt58I9lzegI4M2eHezNn1CrqRbTTPqNnhQt05IC3rbY8poa+3cadM4XGhRlmdIIwVSccWyOAIpEiEqtmEZqzjdMM95UlXP8HIafnz8L5+3KLEVSw67DzIh+AeDgvzrm3yPI/5wXrB12hqv7NHWR1Tz96QlODyCHVeGL/xzpu8mAQAA\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nlet lineString1 = dynamic({\"type\":\"LineString\",\"coordinates\":[[-73.978929,40.785155],[-73.980903,40.782621]]});\\r\\nlet lineString2 = dynamic({\"type\":\"LineString\",\"coordinates\":[[-73.985195,40.788275],[-73.974552,40.779761]]});\\r\\nprint intersection = geo_intersection_2lines(lineString1, lineString2)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|intersection|\\r\\n|---|\\r\\n|{\"type\": \"Point\",\"coordinates\": [-73.979837116670978,40.783989289772165]}|\\r\\n\\r\\nThe following example calculates intersection between two lines. In this case, the result is a line.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA8tJLVHIycxLVbBVSKnMS8zNTNaoViqpLEhVslLyAYoHlxRl5qUr6Sgl5+cXpWTmJZakFitZRUfrmhvrWZpbWBpZ6pgY6JlbmBqamsbqQIQtDCwNjCHCRmZGhrGxtZrWXAVAc0oUgDi1qDg1uSQzPw9oZXpqfjyyULwRyC3FGiBSB+wuTQCXmF3SoQAAAA==\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nlet line = dynamic({\"type\":\"LineString\",\"coordinates\":[[-73.978929,40.785155],[-73.980903,40.782621]]});\\r\\nprint intersection = geo_intersection_2lines(line, line)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|intersection|\\r\\n|---|\\r\\n|{\"type\": \"LineString\",\"coordinates\": [[ -73.978929, 40.785155],[ -73.980903, 40.782621]]}|\\r\\n\\r\\nThe following two lines don\\'t intersect.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA8tJLVHIycxLDS4pysxLN1SwVUipzEvMzUzWqFYqqSxIVbJS8oFLK+koJefnF6Vk5iWWpBYrWUVHG+ooGMbqRBvpKBjFxtZqWnPloJhnRKp5xjoKxkDzTHQUTCDmFQDVlSgAcWpRcWpySWZ+HtDI9NT8eGSheCOQlcUaSB7RQXaFJgAdJFio5gAAAA==\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nlet lineString1 = dynamic({\"type\":\"LineString\",\"coordinates\":[[1, 1],[2, 2]]});\\r\\nlet lineString2 = dynamic({\"type\":\"LineString\",\"coordinates\":[[3, 3],[4, 4]]});\\r\\nprint intersection = geo_intersection_2lines(lineString1, lineString2)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|intersection|\\r\\n|---|\\r\\n|{\"type\": \"GeometryCollection\", \"geometries\": []}|\\r\\n\\r\\nThe following example will return a null result because one of lines is invalid.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA5WPsQoDIRBE+3zFYqVgo9ddyB+kSylyyLkcC2Y91ASOkH+PIRAuZeo3vJlJ2CAR46UV4sXACeLG4UqzfIi2rShGcf5iocWcc4nEoWEVo3NGg/HaWQ3W+6c6HtKPz/7rGzQMH9HaAw2I7yFR7BqqfEtJLpinDrBUnBtlnuy7rcrdB70foNQL22IrxuIAAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nlet lineString1 = dynamic({\"type\":\"LineString\",\"coordinates\":[[1, 1],[2, 2]]});\\r\\nlet lineString2 = dynamic({\"type\":\"LineString\",\"coordinates\":[[3, 3]]});\\r\\nprint invalid = isnull(geo_intersection_2lines(lineString1, lineString2))\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|invalid|\\r\\n|---|\\r\\n|1|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/geo-intersection-2lines-function\",\"geo-intersection-2lines-function.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"geo_intersection_2polygons\",\"Calculates the intersection of two polygons or multipolygons.\",'## Syntax\\r\\n\\r\\n`geo_intersection_2polygons(`*polygon1*`,`*polygon1*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n|Name|Type|Required|Description|\\r\\n|--|--|--|--|\\r\\n| *polygon1* | dynamic | &check; | Polygon or multipolygon in the [GeoJSON format](https://tools.ietf.org/html/rfc7946).|\\r\\n| *polygon2* | dynamic | &check; | Polygon or multipolygon in the [GeoJSON format](https://tools.ietf.org/html/rfc7946).|\\r\\n\\r\\n## Returns\\r\\n\\r\\nIntersection in [GeoJSON Format](https://tools.ietf.org/html/rfc7946) and of a [dynamic](./scalar-data-types/dynamic.md) data type. If Polygon or a MultiPolygon are invalid, the query will produce a null result.\\r\\n\\r\\n> [!NOTE]\\r\\n>\\r\\n> * The geospatial coordinates are interpreted as represented by the [WGS-84](https://earth-info.nga.mil/index.php?dir=wgs84&action=wgs84) coordinate reference system.\\r\\n> * The [geodetic datum](https://en.wikipedia.org/wiki/Geodetic_datum) used for measurements on Earth is a sphere. Polygon edges are [geodesics](https://en.wikipedia.org/wiki/Geodesic) on the sphere.\\r\\n> * If input polygon edges are straight cartesian lines, consider using [geo_polygon_densify()](geo-polygon-densify-function.md) to convert planar edges to geodesics.\\r\\n\\r\\n**Polygon definition and constraints**\\r\\n\\r\\ndynamic({\"type\": \"Polygon\",\"coordinates\": [LinearRingShell, LinearRingHole_1, ..., LinearRingHole_N ]})\\r\\n\\r\\ndynamic({\"type\": \"MultiPolygon\",\"coordinates\": [[LinearRingShell, LinearRingHole_1, ..., LinearRingHole_N ],..., [LinearRingShell, LinearRingHole_1, ..., LinearRingHole_M]]})\\r\\n\\r\\n* LinearRingShell is required and defined as a `counterclockwise` ordered array of coordinates [[lng_1,lat_1],...,[lng_i,lat_i],...,[lng_j,lat_j],...,[lng_1,lat_1]]. There can be only one shell.\\r\\n* LinearRingHole is optional and defined as a `clockwise` ordered array of coordinates [[lng_1,lat_1],...,[lng_i,lat_i],...,[lng_j,lat_j],...,[lng_1,lat_1]]. There can be any number of interior rings and holes.\\r\\n* LinearRing vertices must be distinct with at least three coordinates. The first coordinate must be equal to the last. At least four entries are required.\\r\\n* Coordinates [longitude, latitude] must be valid. Longitude must be a real number in the range [-180, +180] and latitude must be a real number in the range [-90, +90].\\r\\n* LinearRingShell encloses at most half of the sphere. LinearRing divides the sphere into two regions. The smaller of the two regions will be chosen.\\r\\n* LinearRing edge length must be less than 180 degrees. The shortest edge between the two vertices will be chosen.\\r\\n* LinearRings must not cross and must not share edges. LinearRings may share vertices.\\r\\n* Polygon contains its vertices.\\r\\n\\r\\n> [!TIP]\\r\\n>\\r\\n> * Using literal Polygon or a MultiPolygon may result in better performance.','The following example calculates intersection between two polygons. In this case, the result is a polygon.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA52STWrDMBBG9z2F0SoBN8yPRjNK6R26NyaExARDYoXEG1N696rEjr1qoQhpIT3mmzfo3PTFNZ2HU+qweC+OQ7e/tIfVp+uHa+O27uPx5kp3SOl2bLt939zdtqqqV+VNDAyRVTRQ9KWHjaqPZh6UiU3qcqIkiFHwGEaIjRFRDSL6J0UgDCEfGOjBsXr5AQ1lUQ0DqGEuITiFckTinBFtzvy1s7r+Wr+9nGd7+o89IbNQMCAYzQS8kIH3in7hj3mBicg0AMkGECIBLzACzT1SLqs6chjykDgaRZ6xP1Ifbtdb2/VF3s3t3hz6NnXZ8NSk3fJqR6P+fTX9gvI5kfU3hDmIFB0CAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nlet polygon1 = dynamic({\"type\":\"Polygon\",\"coordinates\":[[[-73.9630937576294,40.77498840732385],[-73.963565826416,40.774383111780914],[-73.96205306053162,40.773745311181585],[-73.96160781383514,40.7743912365898],[-73.9630937576294,40.77498840732385]]]});\\r\\nlet polygon2 = dynamic({\"type\":\"Polygon\",\"coordinates\":[[[-73.96213352680206,40.775045280447145],[-73.9631313085556,40.774578106920345],[-73.96207988262177,40.77416780398293],[-73.96213352680206,40.775045280447145]]]});\\r\\nprint intersection = geo_intersection_2polygons(polygon1, polygon2)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|intersection|\\r\\n|---|\\r\\n|{\"type\": \"Polygon\",  \"coordinates\": [[[-73.962105776437156,40.774591360999679],[-73.962642403166868,40.774807020251778],[-73.9631313085556,40.774578106920352],[-73.962079882621765,40.774167803982927],[-73.962105776437156,40.774591360999679]]]}|\\r\\n\\r\\nThe following example calculates intersection between two polygons. In this case, the result is a point.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA8tJLVEoyM+pTM/PM1SwVUipzEvMzUzWqFYqqSxIVbJSCoDIKekoJefnF6Vk5iWWpBYrWUVHRxvpmJjG6kQbQChDHRMTIAUWjI2t1bTmykGYbESaycZIZoEpYyAFFoSYXFCUmVeiAMSpRcWpySWZ+XlA89NT8+ORheKNoJYXa8D8pwN3jyYAACvP9/cAAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nlet polygon1 = dynamic({\"type\":\"Polygon\",\"coordinates\":[[[2,45],[0,45],[1,44],[2,45]]]});\\r\\nlet polygon2 = dynamic({\"type\":\"Polygon\",\"coordinates\":[[[3,44],[2,45],[2,43],[3,44]]]});\\r\\nprint intersection = geo_intersection_2polygons(polygon1, polygon2)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|intersection|\\r\\n|---|\\r\\n|{\"type\": \"Point\",\"coordinates\": [2,45]}|\\r\\n\\r\\nThe following two polygons intersection is a collection.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA3VQQQqDMBC89xUhJ4UQTKItWvqEQu9LENEggTQRTQ9S+vem0bYe2sMyuzPLMLtGeTQ4M/fOMnRC3Wybq26TO/bzoHCFL4uGCW6dGzttG68mXAEAJ3khCWQLMJLnASIp5SM97szXmf9yPt+M1//tQWwcI4gAkZShAWCUlS+R8n0MQLOsCCot4yKjotjHURziuFleAw6jth6FUuOkWq+dDTF75eotVfP1hil5v4l8zkqfcwvpPD4BAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nlet polygon1 = dynamic({\"type\":\"Polygon\",\"coordinates\":[[[2,45],[0,45],[1,44],[2,45]]]});\\r\\nlet polygon2 = dynamic({\"type\":\"MultiPolygon\",\"coordinates\":[[[[3,44],[2,45],[2,43],[3,44]]],[[[1.192,45.265],[1.005,44.943],[1.356,44.937],[1.192,45.265]]]]});\\r\\nprint intersection = geo_intersection_2polygons(polygon1, polygon2)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|intersection|\\r\\n|---|\\r\\n|{\"type\": \"GeometryCollection\",\"geometries\": [<br>{ \"type\": \"Point\", \"coordinates\": [2, 45]},<br>{ \"type\": \"Polygon\", \"coordinates\": [[[1.3227075526410679,45.003909145068739],[1.0404565374899824,45.004356403066552],[1.005,44.943],[1.356,44.937],[1.3227075526410679,45.003909145068739]]]}]}|\\r\\n\\r\\nThe following two polygons don\\'t intersect.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA8tJLVEoyM+pTM/PM1SwVUipzEvMzUzWqFYqqSxIVbJSCoDIKekoJefnF6Vk5iWWpBYrWUVHRxvpmJjG6kQbQChDHRMTIAUWjI2t1bTmykGYbESaycYQs4whJgONNIbwTKAmFxRl5pUoAHFqUXFqcklmfh7Q/PTU/HhkoXgjqOXFGjD/6cDdowkAMQjV5/cAAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nlet polygon1 = dynamic({\"type\":\"Polygon\",\"coordinates\":[[[2,45],[0,45],[1,44],[2,45]]]});\\r\\nlet polygon2 = dynamic({\"type\":\"Polygon\",\"coordinates\":[[[3,44],[3,45],[2,43],[3,44]]]});\\r\\nprint intersection = geo_intersection_2polygons(polygon1, polygon2)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|intersection|\\r\\n|---|\\r\\n|{\"type\": \"GeometryCollection\", \"geometries\": []}|\\r\\n\\r\\nThe following example finds all counties in USA that intersect with area of interest polygon.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA4WQT0vEMBDF7/spYk8t1JLmT5Ou7EHEoyKIp1JK6c52K92kpFmkqN/dWbeyRQ+SSzL5zZt5rwdPagd1ZXdVZzw4GD3ZkO1k6kPXhO+BnwYI1sGT7afWmiAOGmvdtjO1hzFYF0VxrXiSZyzlXLJMU0azWNBEKUmFZJoKoVIhy3jmeIqHainljAmpdEqznFG+wBhVudYMZZWauTRTmvJcs5xfsH+mluVndLN6ea7u7NH4DsbVBxmcfYXGEzQI6HQHtT+i6wTrA7gTlDzePtzHpDn1TEukBXsA76ZfKjH5Tm7Ed2cNNiBXLUsVG87xjeFZNP6TeYSab3u84o+rp6oH0/p9uFT5GY8bRuRqQ+gXegS8Q7wBAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nlet area_of_interest = dynamic({\"type\":\"Polygon\",\"coordinates\":[[[-73.96213352680206,40.775045280447145],[-73.9631313085556,40.774578106920345],[-73.96207988262177,40.77416780398293],[-73.96213352680206,40.775045280447145]]]});\\r\\nUS_Counties\\r\\n| project name = features.properties.NAME, county = features.geometry\\r\\n| project name, intersection = geo_intersection_2polygons(county, area_of_interest)\\r\\n| where array_length(intersection.geometries) != 0\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|name|intersection|\\r\\n|---|---|\\r\\n|New York|{\"type\": \"Polygon\",\"coordinates\": [[[-73.96213352680206, 40.775045280447145], [-73.9631313085556, 40.774578106920345], [-73.96207988262177,40.77416780398293],[-73.96213352680206, 40.775045280447145]]]}|\\r\\n\\r\\nThe following example will return a null result because one of the polygons is invalid.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA42QzUrFMBCF9z5FyaqFesnfTJIrvoP7UkpowyUYk5JGoYjvbmstiLhwNcycMx9zJrhSjS6WbMMw2/w8zCmstxSrx2pao33xY/1Oyjo7ciVPh0RaMqaUJx9tcQu5dl13r8TFSAOtpBdl0PTtMQJNFUfkAgTwXdSUokYqAJnh7LRpTpmRXEqhpf5ioOaAigsKSqnTpgRTWuOGAmEOmwRgAoHu5bT9vKPvP5qHu7CF9PHNBj/9J9++Mmcft6UlvoZQ31wattblxY3Fpzjwb8pS/8K2fz6zaT4BPdFP/2cBAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nlet central_park_polygon = dynamic({\"type\":\"Polygon\",\"coordinates\":[[[-73.9495,40.7969],[-73.95807266235352,40.80068603561921],[-73.98201942443848,40.76825672305777],[-73.97317886352539,40.76455136505513],[-73.9495,40.7969]]]});\\r\\nlet invalid_polygon = dynamic({\"type\":\"Polygon\"});\\r\\nprint isnull(geo_intersection_2polygons(invalid_polygon, central_park_polygon))\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|print_0|\\r\\n|---|\\r\\n|1|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/geo-intersection-2polygons-function\",\"geo-intersection-2polygons-function.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"geo_intersection_line_with_polygon\",\"Calculates the intersection of a line or a multiline with a polygon or a multipolygon.\",'## Syntax\\r\\n\\r\\n`geo_intersection_line_with_polygon(`*lineString*`,`*polygon*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n|Name|Type|Required|Description|\\r\\n|--|--|--|--|\\r\\n| *lineString* | dynamic | &check; | A LineString or MultiLineString in the [GeoJSON format](https://tools.ietf.org/html/rfc7946).|\\r\\n| *polygon* | dynamic | &check; | A Polygon or MultiPolygon in the [GeoJSON format](https://tools.ietf.org/html/rfc7946).|\\r\\n\\r\\n## Returns\\r\\n\\r\\nIntersection in [GeoJSON Format](https://tools.ietf.org/html/rfc7946) and of a [dynamic](./scalar-data-types/dynamic.md) data type. If lineString or a multiLineString or a polygon or a multipolygon are invalid, the query will produce a null result.\\r\\n\\r\\n> [!NOTE]\\r\\n>\\r\\n> * The geospatial coordinates are interpreted as represented by the [WGS-84](https://earth-info.nga.mil/index.php?dir=wgs84&action=wgs84) coordinate reference system.\\r\\n> * The [geodetic datum](https://en.wikipedia.org/wiki/Geodetic_datum) used to measure distance on Earth is a sphere. Line edges are [geodesics](https://en.wikipedia.org/wiki/Geodesic) on the sphere.\\r\\n> * If input line or a polygon edges are straight cartesian lines, consider using [geo_line_densify()](geo-line-densify-function.md) or a [geo_polygon_densify()](geo-polygon-densify-function.md) in order to convert planar edges to geodesics.\\r\\n\\r\\n**LineString definition and constraints**\\r\\n\\r\\ndynamic({\"type\": \"LineString\",\"coordinates\": [[lng_1,lat_1], [lng_2,lat_2], ..., [lng_N,lat_N]]})\\r\\n\\r\\ndynamic({\"type\": \"MultiLineString\",\"coordinates\": [[line_1, line_2, ..., line_N]]})\\r\\n\\r\\n* LineString coordinates array must contain at least two entries.\\r\\n* Coordinates [longitude, latitude] must be valid where longitude is a real number in the range [-180, +180] and latitude is a real number in the range [-90, +90].\\r\\n* Edge length must be less than 180 degrees. The shortest edge between the two vertices will be chosen.\\r\\n\\r\\n**Polygon definition and constraints**\\r\\n\\r\\ndynamic({\"type\": \"Polygon\",\"coordinates\": [LinearRingShell, LinearRingHole_1, ..., LinearRingHole_N]})\\r\\n\\r\\ndynamic({\"type\": \"MultiPolygon\",\"coordinates\": [[LinearRingShell, LinearRingHole_1, ..., LinearRingHole_N],..., [LinearRingShell, LinearRingHole_1, ..., LinearRingHole_M]]})\\r\\n\\r\\n* LinearRingShell is required and defined as a `counterclockwise` ordered array of coordinates [[lng_1,lat_1],...,[lng_i,lat_i],...,[lng_j,lat_j],...,[lng_1,lat_1]]. There can be only one shell.\\r\\n* LinearRingHole is optional and defined as a `clockwise` ordered array of coordinates [[lng_1,lat_1],...,[lng_i,lat_i],...,[lng_j,lat_j],...,[lng_1,lat_1]]. There can be any number of interior rings and holes.\\r\\n* LinearRing vertices must be distinct with at least three coordinates. The first coordinate must be equal to the last. At least four entries are required.\\r\\n* Coordinates [longitude, latitude] must be valid. Longitude must be a real number in the range [-180, +180] and latitude must be a real number in the range [-90, +90].\\r\\n* LinearRingShell encloses at most half of the sphere. LinearRing divides the sphere into two regions. The smaller of the two regions will be chosen.\\r\\n* LinearRing edge length must be less than 180 degrees. The shortest edge between the two vertices will be chosen.\\r\\n* LinearRings must not cross and must not share edges. LinearRings may share vertices.\\r\\n* Polygon contains its vertices.\\r\\n\\r\\n> [!TIP]\\r\\n>\\r\\n> Use literal LineString or MultiLineString for better performance.','The following example calculates intersection between line and polygon. In this case, the result is a line.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA32Qy2rDMBBF9/0Ko1UCbtBrHk7oH3RR6DIYExzhClzJOIJgSv+9bhQnhZYuZnNnmDNzepeK3gf3mkYfuuKpOE7h8O7b1YdI0+DEVjzfuqIUbYzj0YdDciex3e8fyWwqBlVBaeWGmDVBXeaYLIC+xFQRqrr+XO8e+hk3xH7qYviL9ZJbv0HXlUpXEpgNcZWBwBJQKWRCWsAspQWjGKVZDgBNyMayNAj3A6WURul5gyLMcwwa0YABRHsb+x+a/xpmP6mYy40n1yZ/ea9zsfkZNd+im7NPb83Vwequvly8rL8Ayu2maJMBAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nlet lineString = dynamic({\"type\":\"LineString\",\"coordinates\":[[-73.985195,40.788275],[-73.974552,40.779761]]});\\r\\nlet polygon = dynamic({\"type\":\"Polygon\",\"coordinates\":[[[-73.9712905883789,40.78580561168767],[-73.98004531860352,40.775276834803655],[-73.97000312805176,40.77852663535664],[-73.9712905883789,40.78580561168767]]]});\\r\\nprint intersection = geo_intersection_line_with_polygon(lineString, polygon)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|intersection|\\r\\n|---|\\r\\n|{\"type\": \"LineString\",\"coordinates\": [[-73.975611956578192,40.78060906714618],[-73.974552,40.779761]]}|\\r\\n\\r\\nThe following example calculates intersection between line and polygon. In this case, the result is a multiline.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA21Qy2rDMBC89yuETgkoi6SVIiklf9BDoUdjTHCEI3Al4wiCKf332lZfoT3sZXZmdmd6n0kfon/JY4gdOZLzFE+vod280TwNnh7o0/eWMtqmNJ5DPGV/pYeq2gnBQUvJCDoQztas2jkBSlpGFAdreV2/bx8f+vnKkPqpS/G/E89l9dd/duMg98hwDwZXe8ElcCWY0iCNKogDRL1wtDTrC3eiGVlIHNAhUwIM10WGINAxtODkijgDWlu2RBFYKHeikmWYq8hkHj9efZvDGqnzqfkNNUunzS3kS/OZe/PTMvvqYvsBzDzDun4BAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nlet lineString = dynamic({\"type\":\"LineString\",\"coordinates\":[[-110.522, 39.198],[-91.428, 40.880]]});\\r\\nlet polygon = dynamic({\"type\":\"Polygon\",\"coordinates\":[[[-90.263,36.738],[-102.041,45.274],[-109.335,36.527],[-90.263,36.738]],[[-100.393,41.705],[-103.139,38.925],[-97.558,39.113],[-100.393,41.705]]]});\\r\\nprint intersection = geo_intersection_line_with_polygon(lineString, polygon)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|intersection|\\r\\n|---|\\r\\n|{\"type\": \"MultiLineString\",\"coordinates\": [[[  -106.89353655881905,  39.769226209776306],[  -101.74448553679453,  40.373506008712525]],[[-99.136499431328858,  40.589336512699994],[-95.284527737311791,  40.799060242246348]]]}|\\r\\n\\r\\nThe following line and polygon don\\'t intersect.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA32QwWrDMBBE7/0KoVMCalhJ3tU6oX/QQ6FHY0xwhCtwJeMIgin997p2kxZaetjLzmOGmd5n0Yfon/MYYicexGmKx9fQbt5kngYv9/Lxpkol25TGU4jH7M9yX1VaCV2ryihh6vp9e7jrZ7sh9VOX4l9eT6v026i6d3ZXOm1KQGbruFQF7BwjA5LWxI7cHLRQDFCg1Uxg0SyYQ+OIbcFgCfHKOQCw2swO2tHKMRoiixaJihv2f+jaa5j7ZzGfH8++zWGp1/nU/Hw1n0M2l5Bfmq8NNt/Tqusu2w865byEcwEAAA==\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nlet lineString = dynamic({\"type\":\"LineString\",\"coordinates\":[[1, 1],[2, 2]]});\\r\\nlet polygon = dynamic({\"type\":\"Polygon\",\"coordinates\":[[[-73.9712905883789,40.78580561168767],[-73.98004531860352,40.775276834803655],[-73.97000312805176,40.77852663535664],[-73.9712905883789,40.78580561168767]]]});\\r\\nprint intersection = geo_intersection_line_with_polygon(lineString, polygon)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|intersection|\\r\\n|---|\\r\\n|{\"type\": \"GeometryCollection\",\"geometries\": []}|\\r\\n\\r\\nThe following example finds all roads in the NYC GeoJSON roads table that intersects with the area of interest literal polygon.\\r\\n\\r\\n```\\r\\nlet area_of_interest = dynamic({\"type\":\"Polygon\",\"coordinates\":[[[-73.95768642425537,40.80065354924362],[-73.9582872390747,40.80089719667298],[-73.95869493484497,40.80050736035672],[-73.9580512046814,40.80019873831593],[-73.95768642425537,40.80065354924362]]]});\\r\\nNY_Manhattan_Roads\\r\\n| project name = features.properties.Label, road = features.geometry\\r\\n| project name, intersection = geo_intersection_line_with_polygon(road, area_of_interest)\\r\\n| where array_length(intersection.geometries) != 0\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|name|intersection|\\r\\n|---|---|\\r\\n|CentralParkW|{\"type\":\"MultiLineString\",\"coordinates\":[[[-73.958295846836933,40.800316027289647],[-73.9582724,40.8003415]],[[-73.958413422194482,40.80037239620097],[-73.9584093,40.8003797]]]}|\\r\\n|FrederickDouglassCir|{\"type\":\"LineString\",\"coordinates\":[[-73.9579272943862,40.800751229494182],[-73.9579019,40.8007238],[-73.9578688,40.8006749],[-73.9578508,40.8006203],[-73.9578459,40.800570199999996],[-73.9578484,40.80053310000001],[-73.9578627,40.800486700000008],[-73.957913,40.800421100000008],[-73.9579668,40.8003923],[-73.9580189,40.80037260000001],[-73.9580543,40.8003616],[-73.9581237,40.8003395],[-73.9581778,40.8003365],[-73.9582724,40.8003415],[-73.958308,40.8003466],[-73.9583328,40.8003517],[-73.9583757,40.8003645],[-73.9584093,40.8003797],[-73.9584535,40.80041099999999],[-73.9584818,40.8004536],[-73.958507000000012,40.8004955],[-73.9585217,40.800562400000004],[-73.9585282,40.8006155],[-73.958416200000016,40.8007325],[-73.9583541,40.8007785],[-73.9582772,40.800811499999995],[-73.9582151,40.8008285],[-73.958145918999392,40.800839887820239]]}|\\r\\n|W110thSt|{\"type\":\"MultiLineString\",\"coordinates\":[[[-73.957828446036331,40.800476476316327],[-73.9578627,40.800486700000008]],[[-73.9585282,40.8006155],[-73.958565492035873,40.800631133466972]],[[-73.958416200000016,40.8007325],[-73.958446850928084,40.800744577466617]]]}|\\r\\n|WestDr|{\"type\":\"LineString\",\"coordinates\":[[-73.9580543,40.8003616],[-73.958009693938735,40.800250494588468]]}|\\r\\n\\r\\nThe following example finds all counties in the USA that intersect with area of interest literal LineString.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA12QwWrDMBBE7/kKVScbXCPbkSWl5FBKb20voacQhHE2toojGVkhmLb/3nXTFBPddng7mp0OAqk8VNodtLEBPAyBrMl+tNXR1NEnDWMPdEVfjIVN8MY2NKG1c35vbBVgoKvt9l4UqRIZV0wpLqTkIlmyVKglz4qikEIyqfguuXClKCTPVc54kecXLhdc4iszKXj5z6nJaXJgf35SCRQzWbKMM77bfccPi/eNfnInGwwMiy/Se/cBdSCYHfCIA1ThhAelqPfgJyh9e3x9Tkg97YxzpAF3hODHG5eE/JYy4GycxQXk9FzSHRajzya0unfd2Dgb3dZ5/S5G73OLEhbuq1F3YJvQRnO3awxMGpO7NWE/FmJxj58BAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nlet area_of_interest = dynamic({\"type\":\"LineString\",\"coordinates\":[[-73.97159099578857,40.794513338780895],[-73.96738529205322,40.792758888618756],[-73.96978855133057,40.789769718601505]]});\\r\\nUS_Counties\\r\\n| project name = features.properties.NAME, county = features.geometry\\r\\n| project name, intersection = geo_intersection_line_with_polygon(area_of_interest, county)\\r\\n| where array_length(intersection.geometries) != 0\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|name|intersection|\\r\\n|---|---|\\r\\n|New York|{\"type\": \"LineString\",\"coordinates\": [[-73.971590995788574, 40.794513338780895], [-73.967385292053223, 40.792758888618756],[-73.969788551330566, 40.789769718601512]]}|\\r\\n\\r\\nThe following example will return a null result because the LineString is invalid.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA4WRy2rDMBBF9/0Ko5UNbtBjRhql9A+6KHQZTDCOMAJVMrZaMKX/XgfH8aKFbuceDjN3gstF8NG95dHHvnguLnNs331XfrE8D44d2cs9ZTXrUhovPrbZTex4Oj0adbCEwmIN/GCIpMGm+a6eHsLiHVKY+xT/kr6u0W/jqkSjSYMEiajMVU2ca1QIVoLSsqlvGEkyUlluYKPIGmG1NtLSTmkLVgEB2A1DbpTmChdwxzgKyUGTgBslLBlFSqBVd+qfzdbrh6WuXPjp7ONnG/xlqcBP8SOEsndpGWY3Tq7LPsWzvLY/lfsP6q23qvoB4Uu5gZ0BAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nlet lineString = dynamic({\"type\":\"LineString\",\"coordinates\":[[-73.985195,40.788275]]});\\r\\nlet polygon = dynamic({\"type\":\"Polygon\",\"coordinates\":[[[-73.95768642425537,40.80065354924362],[-73.9582872390747,40.80089719667298],[-73.95869493484497,40.80050736035672],[-73.9580512046814,40.80019873831593],[-73.95768642425537,40.80065354924362]]]});\\r\\nprint is_invalid = isnull(geo_intersection_2lines(lineString, polygon))\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|is_invalid|\\r\\n|---|\\r\\n|1|\\r\\n\\r\\nThe following example will return a null result because the polygon is invalid.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA21Qy2rDMBC89yuMTja4QY+sd5WSP+ih0GMwwdjCCBTJWGrAlP575bpND8keZ2ZnZ8eZVDjrzXuarR+LYzEsvrvYvvxkaZkMO7DXG8tq1ocwD9Z3yUR2OJ2eUe00CtBca0AiwHrPd6j3IJRShMRJQ1tvugYVgdSSg5Jy00kEytMIQmhuOr06rQ781480ZlBQwwVwaNuv6uXJ5eBTcMsY/KPUbxt1F/lnd8rfpMLGs/XXztkhG9joP5wrRxMymMwcTZ9s8Ge5lhPL/4rqv6tV9Q1G11oPPAEAAA==\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nlet lineString = dynamic({\"type\":\"LineString\",\"coordinates\":[[-73.97159099578857,40.794513338780895],[-73.96738529205322,40.792758888618756],[-73.96978855133057,40.789769718601505]]});\\r\\nlet polygon = dynamic({\"type\":\"Polygon\",\"coordinates\":[]});\\r\\nprint is_invalid = isnull(geo_intersection_2lines(lineString, polygon))\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|is_invalid|\\r\\n|---|\\r\\n|1|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/geo-intersection-line-with-polygon-function\",\"geo-intersection-line-with-polygon-function.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"geo_intersects_2lines\",\"Calculates whether two lines or multilines intersect.\",'## Syntax\\r\\n\\r\\n`geo_intersects_2lines(`*lineString1*`,`*lineString2*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n|Name|Type|Required|Description|\\r\\n|--|--|--|--|\\r\\n| *lineString1* | dynamic | &check; | A line or multiline in the [GeoJSON format](https://tools.ietf.org/html/rfc7946).|\\r\\n| *lineString2* | dynamic | &check; | A line or multiline in the [GeoJSON format](https://tools.ietf.org/html/rfc7946).|\\r\\n\\r\\n## Returns\\r\\n\\r\\nIndicates whether two lines or multilines intersect. If lineString or a multiLineString are invalid, the query will produce a null result.\\r\\n\\r\\n> [!NOTE]\\r\\n>\\r\\n> * The geospatial coordinates are interpreted as represented by the [WGS-84](https://earth-info.nga.mil/index.php?dir=wgs84&action=wgs84) coordinate reference system.\\r\\n> * The [geodetic datum](https://en.wikipedia.org/wiki/Geodetic_datum) used to measure distance on Earth is a sphere. Line edges are [geodesics](https://en.wikipedia.org/wiki/Geodesic) on the sphere.\\r\\n> * If input line edges are straight cartesian lines, consider using [geo_line_densify()](geo-line-densify-function.md) in order to convert planar edges to geodesics.\\r\\n\\r\\n**LineString definition and constraints**\\r\\n\\r\\ndynamic({\"type\": \"LineString\",\"coordinates\": [[lng_1,lat_1], [lng_2,lat_2], ..., [lng_N,lat_N]]})\\r\\n\\r\\ndynamic({\"type\": \"MultiLineString\",\"coordinates\": [[line_1, line_2, ..., line_N]]})\\r\\n\\r\\n* LineString coordinates array must contain at least two entries.\\r\\n* Coordinates [longitude, latitude] must be valid where longitude is a real number in the range [-180, +180] and latitude is a real number in the range [-90, +90].\\r\\n* Edge length must be less than 180 degrees. The shortest edge between the two vertices will be chosen.\\r\\n\\r\\n> [!TIP]\\r\\n>\\r\\n> Use literal LineString or MultiLineString for better performance.','The following example checks whether some two literal lines intersects.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA52QsQqDMBRF935FyKSQij6NL7H0D7p1FBHRIAEbxWSR0n9vWou1a4e3nAv3XN6gHBm0UVc3a9Mn5Ey6xTQ33QZ36pZJ0YJetpgy2o7j3GnTOGVpUZZHTCOJQoJkWRyh4AnnFVuxiGWcrhhySKrqEZ4Ow48P/vJ5i+RrsQDcfJhxDm+MEvOPb/I9jvhTs1Wts17Yq7H+ghpec2ywewLbLwyfFywOhCIBAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nlet lineString1 = dynamic({\"type\":\"LineString\",\"coordinates\":[[-73.978929,40.785155],[-73.980903,40.782621]]});\\r\\nlet lineString2 = dynamic({\"type\":\"LineString\",\"coordinates\":[[-73.985195,40.788275],[-73.974552,40.779761]]});\\r\\nprint intersects = geo_intersects_2lines(lineString1, lineString2)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|intersects|\\r\\n|---|\\r\\n|True|\\r\\n\\r\\nThe following example finds all roads in the NYC GeoJSON roads table that intersects with some lines of interest.\\r\\n\\r\\n```\\r\\nlet my_road = dynamic({\"type\":\"LineString\",\"coordinates\":[[-73.97892951965332,40.78515573551921],[-73.98090362548828,40.78262115769851]]});\\r\\nNY_Manhattan_Roads\\r\\n| project name = features.properties.Label, road = features.geometry\\r\\n| where geo_intersects_2lines(road, my_road)\\r\\n| project name\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|name|\\r\\n|---|\\r\\n|Broadway|\\r\\n|W 78th St|\\r\\n|W 79th St|\\r\\n|W 80th St|\\r\\n|W 81st St|\\r\\n\\r\\nThe following example will return a null result because one of lines is invalid.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA52PQQqDMBRE9z1FyCpCKjE2TWLpDbrrUoKIfiQQo5h0IaV3ryVQ7LbLmeHP++MgImc93ONi/VCgK+pX3462I08c1xlwhW/fGFPcTdPSW99GCLiq66Mscy2V5pqeWC6VKIQwNNmKaVYmm595YcwruxzcD4//xdsoWqRixaVIxfN2EJEN/uEcGWBqNglLgC6Ghn+Igex20v0TWfYGvZfHxAYBAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nlet lineString1 = dynamic({\"type\":\"LineString\",\"coordinates\":[[-73.978929,40.785155],[-73.980903,40.782621]]});\\r\\nlet lineString2 = dynamic({\"type\":\"LineString\",\"coordinates\":[[-73.985195,40.788275]]});\\r\\nprint isnull(geo_intersects_2lines(lineString1, lineString2))\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|print_0|\\r\\n|---|\\r\\n|True|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/geo-intersects-2lines-function\",\"geo-intersects-2lines-function.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"geo_intersects_2polygons\",\"Calculates whether two polygons or multipolygons intersect.\",'## Syntax\\r\\n\\r\\n`geo_intersects_2polygons(`*polygon1*`,`*polygon1*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n|Name|Type|Required|Description|\\r\\n|--|--|--|--|\\r\\n| *polygon1* | dynamic | &check; | Polygon or multipolygon in the [GeoJSON format](https://tools.ietf.org/html/rfc7946).|\\r\\n| *polygon2* | dynamic | &check; | Polygon or multipolygon in the [GeoJSON format](https://tools.ietf.org/html/rfc7946).|\\r\\n\\r\\n## Returns\\r\\n\\r\\nIndicates whether two polygons or multipolygons intersect. If the Polygon or the MultiPolygon are invalid, the query will produce a null result.\\r\\n\\r\\n> [!NOTE]\\r\\n>\\r\\n> * The geospatial coordinates are interpreted as represented by the [WGS-84](https://earth-info.nga.mil/index.php?dir=wgs84&action=wgs84) coordinate reference system.\\r\\n> * The [geodetic datum](https://en.wikipedia.org/wiki/Geodetic_datum) used for measurements on Earth is a sphere. Polygon edges are [geodesics](https://en.wikipedia.org/wiki/Geodesic) on the sphere.\\r\\n> * If input polygon edges are straight cartesian lines, consider using [geo_polygon_densify()](geo-polygon-densify-function.md) to convert planar edges to geodesics.\\r\\n\\r\\n**Polygon definition and constraints**\\r\\n\\r\\ndynamic({\"type\": \"Polygon\",\"coordinates\": [LinearRingShell, LinearRingHole_1, ..., LinearRingHole_N]})\\r\\n\\r\\ndynamic({\"type\": \"MultiPolygon\",\"coordinates\": [[LinearRingShell, LinearRingHole_1, ..., LinearRingHole_N], ..., [LinearRingShell, LinearRingHole_1, ..., LinearRingHole_M]]})\\r\\n\\r\\n* LinearRingShell is required and defined as a `counterclockwise` ordered array of coordinates [[lng_1,lat_1], ..., [lng_i,lat_i], ...,[lng_j,lat_j], ...,[lng_1,lat_1]]. There can be only one shell.\\r\\n* LinearRingHole is optional and defined as a `clockwise` ordered array of coordinates [[lng_1,lat_1], ...,[lng_i,lat_i], ...,[lng_j,lat_j], ...,[lng_1,lat_1]]. There can be any number of interior rings and holes.\\r\\n* LinearRing vertices must be distinct with at least three coordinates. The first coordinate must be equal to the last. At least four entries are required.\\r\\n* Coordinates [longitude, latitude] must be valid. Longitude must be a real number in the range [-180, +180] and latitude must be a real number in the range [-90, +90].\\r\\n* LinearRingShell encloses at most half of the sphere. LinearRing divides the sphere into two regions. The smaller of the two regions will be chosen.\\r\\n* LinearRing edge length must be less than 180 degrees. The shortest edge between the two vertices will be chosen.\\r\\n* LinearRings must not cross and must not share edges. LinearRings may share vertices.\\r\\n* Polygon contains its vertices.\\r\\n\\r\\n> [!TIP]\\r\\n>\\r\\n> Use literal LineString or MultiLineString for better performance.','The following example checks whether some two literal polygons intersects.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA52Rz2rDMAyH73uKkFMLWdEfy5I79g67l1BKa0ogTUKSSxh793kkaXvaYBjsgz700yfXccy6tp6ubYPZe3aZmtOtOm8+83HqYr7PP+ZaXuTntu0vVXMa45DvD4fDq/IueIbAKuopuMLBTtUFMwfKxCZlsVLixcg79AvExoioBgHdnSIQBp8u9DRzrE5+QEN56oYe1DC1EFxDOSBxygj2yPx1srL82r691A97+o89IbOQNyBYzASckIFziu7JH9MBE5F1AZIMwAcCfsIINM1Iqa3qwqFPS+JgFPiB/ZE6u3V91YzZNbbH9MZ+iOdxONJiO2zWTy/uC9h+A0eK8+oMAgAA\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nlet polygon1 = dynamic({\"type\":\"Polygon\",\"coordinates\":[[[-73.9630937576294,40.77498840732385],[-73.963565826416,40.774383111780914],[-73.96205306053162,40.773745311181585],[-73.96160781383514,40.7743912365898],[-73.9630937576294,40.77498840732385]]]});\\r\\nlet polygon2 = dynamic({\"type\":\"Polygon\",\"coordinates\":[[[-73.96213352680206,40.775045280447145],[-73.9631313085556,40.774578106920345],[-73.96207988262177,40.77416780398293],[-73.96213352680206,40.775045280447145]]]});\\r\\nprint geo_intersects_2polygons(polygon1, polygon2)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|print_0|\\r\\n|---|\\r\\n|True|\\r\\n\\r\\nThe following example finds all counties in the USA that intersect with area of interest literal polygon.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA4WQzWrDMBCE73kKoVMCrpH1Y0kJOZTSY0uh9GSMEc4mdUkkIykU0fbdq2BDQ3soe1u+md2ZI0RkPJjO7bvBRvAQItqiXbLmNPTLDxzTCHiNn9wxHZzFBe6d87vBmggBr5umuZGs1DWtGBO0VoSSuuCklFIQLqginMuKi7aYOVblIUoIMWNcSFWRWlPCrjBKpFaKZlspZ66qpSJMK6rZD/bP1bb9Wm0WL8/dnTvbOEBYfKLRuzfoI8oBISfdg4nnnLrM+xH8BSofbx/uC9RfNOkaOYA7QfQpu7y/5qpQXkythewYOjpOLYXlpC3+VLv69cA3a++fAX8BAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nlet area_of_interest = dynamic({\"type\":\"Polygon\",\"coordinates\":[[[-73.96213352680206,40.775045280447145],[-73.9631313085556,40.774578106920345],[-73.96207988262177,40.77416780398293],[-73.96213352680206,40.775045280447145]]]});\\r\\nUS_Counties\\r\\n| project name = features.properties.NAME, county = features.geometry\\r\\n| where geo_intersects_2polygons(county, area_of_interest)\\r\\n| project name\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|name|\\r\\n|---|\\r\\n|New York|\\r\\n\\r\\nThe following example will return a null result because one of the polygons is invalid.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA42QzUrFMBCF9z5FyaqFesnfTJIrvoP7Ukpow6UYk5JEoYjvbmstiLhwNcycMx9zxrtSjS6UZP2w2PQ8LNGvtxiqx2pag32Zx/qdlHVx5EqeDom0ZIwxTXOwxWVy7bruXomLkQZaSS/KoOnbYwSaKo7IBQjgu6gpRY1UADLD2WnTnDIjuZRCS/3FQM0BFRcUlFKnTQmmtMYNBcIcNgnABALdy2n7eUfffzQPd34LOYc36+fpP/n2lSXNYVvK4dX7+ubisLUuZTeWPPBvRq5/Qds/X9k0n1CNw49lAQAA\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nlet central_park_polygon = dynamic({\"type\":\"Polygon\",\"coordinates\":[[[-73.9495,40.7969],[-73.95807266235352,40.80068603561921],[-73.98201942443848,40.76825672305777],[-73.97317886352539,40.76455136505513],[-73.9495,40.7969]]]});\\r\\nlet invalid_polygon = dynamic({\"type\":\"Polygon\"});\\r\\nprint isnull(geo_intersects_2polygons(invalid_polygon, central_park_polygon))\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|print_0|\\r\\n|---|\\r\\n|True|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/geo-intersects-2polygons-function\",\"geo-intersects-2polygons-function.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"geo_intersects_line_with_polygon\",\"Calculates whether a line or multiline intersect with a polygon or a multipolygon.\",'## Syntax\\r\\n\\r\\n`geo_intersects_line_with_polygon(`*lineString*`,`*polygon*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n|Name|Type|Required|Description|\\r\\n|--|--|--|--|\\r\\n| *lineString* | dynamic | &check; | A LineString or MultiLineString in the [GeoJSON format](https://tools.ietf.org/html/rfc7946).|\\r\\n| *polygon* | dynamic | &check; | A Polygon or MultiPolygon in the [GeoJSON format](https://tools.ietf.org/html/rfc7946).|\\r\\n\\r\\n## Returns\\r\\n\\r\\nIndicates whether the line or multiline intersects with polygon or a multipolygon. If lineString or a multiLineString or a polygon or a multipolygon are invalid, the query will produce a null result.\\r\\n\\r\\n> [!NOTE]\\r\\n>\\r\\n> * The geospatial coordinates are interpreted as represented by the [WGS-84](https://earth-info.nga.mil/index.php?dir=wgs84&action=wgs84) coordinate reference system.\\r\\n> * The [geodetic datum](https://en.wikipedia.org/wiki/Geodetic_datum) used to measure distance on Earth is a sphere. Line edges are [geodesics](https://en.wikipedia.org/wiki/Geodesic) on the sphere.\\r\\n> * If input line or a polygon edges are straight cartesian lines, consider using [geo_line_densify()](geo-line-densify-function.md) or a [geo_polygon_densify()](geo-polygon-densify-function.md) in order to convert planar edges to geodesics.\\r\\n\\r\\n**LineString definition and constraints**\\r\\n\\r\\ndynamic({\"type\": \"LineString\",\"coordinates\": [[lng_1,lat_1], [lng_2,lat_2], ..., [lng_N,lat_N]]})\\r\\n\\r\\ndynamic({\"type\": \"MultiLineString\",\"coordinates\": [[line_1, line_2, ..., line_N]]})\\r\\n\\r\\n* LineString coordinates array must contain at least two entries.\\r\\n* Coordinates [longitude, latitude] must be valid where longitude is a real number in the range [-180, +180] and latitude is a real number in the range [-90, +90].\\r\\n* Edge length must be less than 180 degrees. The shortest edge between the two vertices will be chosen.\\r\\n\\r\\n**Polygon definition and constraints**\\r\\n\\r\\ndynamic({\"type\": \"Polygon\",\"coordinates\": [ LinearRingShell, LinearRingHole_1, ..., LinearRingHole_N]})\\r\\n\\r\\ndynamic({\"type\": \"MultiPolygon\",\"coordinates\": [[LinearRingShell, LinearRingHole_1, ..., LinearRingHole_N], ..., [LinearRingShell, LinearRingHole_1, ..., LinearRingHole_M]]})\\r\\n\\r\\n* LinearRingShell is required and defined as a `counterclockwise` ordered array of coordinates [[lng_1,lat_1], ...,[lng_i,lat_i], ...,[lng_j,lat_j], ...,[lng_1,lat_1]]. There can be only one shell.\\r\\n* LinearRingHole is optional and defined as a `clockwise` ordered array of coordinates [[lng_1,lat_1], ...,[lng_i,lat_i], ...,[lng_j,lat_j], ...,[lng_1,lat_1]]. There can be any number of interior rings and holes.\\r\\n* LinearRing vertices must be distinct with at least three coordinates. The first coordinate must be equal to the last. At least four entries are required.\\r\\n* Coordinates [longitude, latitude] must be valid. Longitude must be a real number in the range [-180, +180] and latitude must be a real number in the range [-90, +90].\\r\\n* LinearRingShell encloses at most half of the sphere. LinearRing divides the sphere into two regions. The smaller of the two regions will be chosen.\\r\\n* LinearRing edge length must be less than 180 degrees. The shortest edge between the two vertices will be chosen.\\r\\n* LinearRings must not cross and must not share edges. LinearRings may share vertices.\\r\\n* Polygon doesn\\'t necessarily contain its vertices.\\r\\n\\r\\n> [!TIP]\\r\\n>\\r\\n> Use literal LineString or MultiLineString for better performance.','The following example checks whether a literal LineString intersects with a Polygon.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA32QzUrEQBCE7z5FmNMuxGX++mdWfAMPgsclhCU7xIGYhGRAgvjujs5mc1A89KW66K+rOh+LLvT+JU6hb4vH4rL057fQ7D5EXEYvjuLpthWlaIZhuoT+HP0sjqfTPZmDY1AOSisPxKwJqjLLZAH0j0yOUFXV5/7hrku4ceiWduj/Yj3n1W/Q9aTSTgKzIXYZCCwBlUImpBXMUlowilGa9QHQhGwsS4OwPSilNEqnC4ow+xg0ogEDiPZm+x+ac42pn1ik8dPsmzincK0f6k2ov0uu30N8ra/5d1vt5drJ/gtbMVZzjwEAAA==\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nlet lineString = dynamic({\"type\":\"LineString\",\"coordinates\":[[-73.985195,40.788275],[-73.974552,40.779761]]});\\r\\nlet polygon = dynamic({\"type\":\"Polygon\",\"coordinates\":[[[-73.9712905883789,40.78580561168767],[-73.98004531860352,40.775276834803655],[-73.97000312805176,40.77852663535664],[-73.9712905883789,40.78580561168767]]]});\\r\\nprint intersects = geo_intersects_line_with_polygon(lineString, polygon)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|intersects|\\r\\n|---|\\r\\n|True|\\r\\n\\r\\nThe following example finds all roads in the NYC GeoJSON roads table that intersect with area of interest literal polygon.\\r\\n\\r\\n```\\r\\nlet area_of_interest = dynamic({\"type\":\"Polygon\",\"coordinates\":[[[-73.95768642425537,40.80065354924362],[-73.9582872390747,40.80089719667298],[-73.95869493484497,40.80050736035672],[-73.9580512046814,40.80019873831593],[-73.95768642425537,40.80065354924362]]]});\\r\\nNY_Manhattan_Roads\\r\\n| project name = features.properties.Label, road = features.geometry\\r\\n| where geo_intersects_line_with_polygon(road, area_of_interest)\\r\\n| project name\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|name|\\r\\n|---|\\r\\n|Central Park W|\\r\\n|Frederick Douglass Cir|\\r\\n|W 110th St|\\r\\n|West Dr|\\r\\n\\r\\nThe following example finds all counties in the USA that intersect with area of interest literal LineString.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA12QQUvDMBiG7/sVIacNakmbpUkmHkS8qZfhaZQQum9dRpeU9BujqP/dlKrIcnx58vC9bwdIbARrwsE4jxBhQPJA9qO3Z9csPyiOPdANfXEethidb2lGmxDi3nmLMNDNbncnea5lITTTWkilhMzWLJd6LQrOuZKKKS3qbOYqyZUodckEL8uZK6VQ6VWFkqL64/Rkmgzsx6e0TGGhKlYIJur6a3W/eN+ap3Dx6GBYfJI+hhM0SNLtkEocwOIlFcpT3kOcoPzt8fU5I830Z/yPtBDOgHFMlusxrUBSMA8yJONgutTfXB0eTR+6sQ1+ebvar3V1c8g3SxOfMGIBAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nlet area_of_interest = dynamic({\"type\":\"LineString\",\"coordinates\":[[-73.97159099578857,40.794513338780895],[-73.96738529205322,40.792758888618756],[-73.96978855133057,40.789769718601505]]});\\r\\nUS_Counties\\r\\n| project name = features.properties.NAME, county = features.geometry\\r\\n| where geo_intersects_line_with_polygon(area_of_interest, county)\\r\\n| project name\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|name|\\r\\n|---|\\r\\n|New York|\\r\\n\\r\\nThe following example will return a null result because the LineString is invalid.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA4WQTWuDQBBA7/0VsicFG/ZjZncmof+gh0KPQUIwiwibVXRzkNL/XoMxHlrocZjHY+YFn7LQRv+ZhjY22Vt2meL52tb5l0hT78VevD+3ohR11w2XNp6TH8X+eHx1ZseEirEEuXNE2mFVfReHlzB7+y5MTRf/kn4sq9/GRYnOkgUNGtG4u5qktGgQWIOxuiofGGly2rB0sFLETrG1TjNtlGVgAwTAK4bSGSsNzuCGSVRagiUFD0oxOUNGIZsn9c9ly/f9nCtl7RhvIeSN707z6IfR12k86XvuMd+il2uoovgBkcn4944BAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nlet lineString = dynamic({\"type\":\"LineString\",\"coordinates\":[[-73.985195,40.788275]]});\\r\\nlet polygon = dynamic({\"type\":\"Polygon\",\"coordinates\":[[[-73.95768642425537,40.80065354924362],[-73.9582872390747,40.80089719667298],[-73.95869493484497,40.80050736035672],[-73.9580512046814,40.80019873831593],[-73.95768642425537,40.80065354924362]]]});\\r\\nprint isnull(geo_intersects_2lines(lineString, polygon))\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|print_0|\\r\\n|---|\\r\\n|True|\\r\\n\\r\\nThe following example will return a null result because the polygon is invalid.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA21QTWvDMAy971cEnxLIij+qSOroP9hhsGMJpaQmGDw7xO4hjP33OcvWHTbdpPf09PS8zZV3wb7m2YWxOlbXJVze3FC/i7xMVhzE8x0VrRhinK8uXLJN4nA6PaLZMSpgyQxIBNju5Q55D8oYQ0iSGPp243VoCDRrCUbrjacRqFSnCKG783hVWhXktx4xlqGiTiqQ0PcfzdODL8an6Jcxhv9cv2zQH8tfu1P5JlcuhZv39WjjubR2TnbI6azXNFL9m0n7c6ZpPgG+oq1pLQEAAA==\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nlet lineString = dynamic({\"type\":\"LineString\",\"coordinates\":[[-73.97159099578857,40.794513338780895],[-73.96738529205322,40.792758888618756],[-73.96978855133057,40.789769718601505]]});\\r\\nlet polygon = dynamic({\"type\":\"Polygon\",\"coordinates\":[]});\\r\\nprint isnull(geo_intersects_2lines(lineString, polygon))\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|print_0|\\r\\n|---|\\r\\n|True|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/geo-intersects-line-with-polygon-function\",\"geo-intersects-line-with-polygon-function.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"geo_line_buffer\",\"Calculates polygon or multipolygon that contains all points within the given radius of the input line or multiline on Earth.\",'## Syntax\\r\\n\\r\\n`geo_line_buffer(`*lineString*`,` *radius*`,` *tolerance*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n|Name|Type|Required|Description|\\r\\n|--|--|--|--|\\r\\n| *lineString* | dynamic | &check; | A LineString or MultiLineString in the [GeoJSON format](https://tools.ietf.org/html/rfc7946).|\\r\\n| *radius* | real | &check; | Buffer radius in meters. Valid value must be positive.|\\r\\n| *tolerance* | real | | Defines the tolerance in meters that determines how much a polygon can deviate from the ideal radius. If unspecified, the default value `10` is used. Tolerance should be no lower than 0.0001% of the radius. Specifying tolerance bigger than radius will lower the tolerance to biggest possible value below the radius.|\\r\\n\\r\\n## Returns\\r\\n\\r\\nPolygon or MultiPolygon around the input LineString or MultiLineString. If the coordinates or radius or tolerance is invalid, the query will produce a null result.\\r\\n\\r\\n> [!NOTE]\\r\\n>\\r\\n> * The geospatial coordinates are interpreted as represented by the [WGS-84](https://earth-info.nga.mil/index.php?dir=wgs84&action=wgs84) coordinate reference system.\\r\\n> * The [geodetic datum](https://en.wikipedia.org/wiki/Geodetic_datum) used to measure distance on Earth is a sphere.\\r\\n> * If input line edges are straight cartesian lines, consider using [geo_line_densify()](geo-line-densify-function.md) in order to convert planar edges to geodesics.\\r\\n> * Endcaps of the lines are round.\\r\\n> * Both sides of the lines are buffered.\\r\\n\\r\\n**LineString definition and constraints**\\r\\n\\r\\ndynamic({\"type\": \"LineString\",\"coordinates\": [[lng_1,lat_1], [lng_2,lat_2], ..., [lng_N,lat_N]]})\\r\\n\\r\\ndynamic({\"type\": \"MultiLineString\",\"coordinates\": [[line_1, line_2, ..., line_N]]})\\r\\n\\r\\n* LineString coordinates array must contain at least two entries.\\r\\n* Coordinates [longitude, latitude] must be valid where longitude is a real number in the range [-180, +180] and latitude is a real number in the range [-90, +90].\\r\\n* Edge length must be less than 180 degrees. The shortest edge between the two vertices will be chosen.','The following query calculates polygon around line, with radius of 4 meters and 0.1 meter tolerance\\r\\n\\r\\n```\\r\\nlet line = dynamic({\"type\":\"LineString\",\"coordinates\":[[-80.66634997047466,24.894526340592122],[-80.67373241820246,24.890808090321286]]});\\r\\nprint buffer = geo_line_buffer(line, 4, 0.1)\\r\\n```\\r\\n\\r\\n|buffer|\\r\\n|---|\\r\\n|{\"type\": \"Polygon\", \"coordinates\": [ ... ]}|\\r\\n\\r\\nThe following query calculates buffer around each line and unifies result\\r\\n\\r\\n```\\r\\ndatatable(line:dynamic)\\r\\n[\\r\\n    dynamic({\"type\":\"LineString\",\"coordinates\":[[14.429214068940496,50.10043066548272],[14.431184174126173,50.10046525983731]]}),\\r\\n    dynamic({\"type\":\"LineString\",\"coordinates\":[[14.43030222687753,50.100780677801936],[14.4303847111523,50.10020274910934]]})\\r\\n]\\r\\n| project buffer = geo_line_buffer(line, 2, 0.1)\\r\\n| summarize polygons = make_list(buffer)\\r\\n| project result = geo_union_polygons_array(polygons)\\r\\n```\\r\\n\\r\\n|result|\\r\\n|---|\\r\\n|{\"type\": \"Polygon\",\"coordinates\": [ ... ]}|\\r\\n\\r\\nThe following example will return true, due to invalid line.\\r\\n\\r\\n```\\r\\nprint buffer = isnull(geo_line_buffer(dynamic({\"type\":\"LineString\"}), 5))\\r\\n```\\r\\n\\r\\n|buffer|\\r\\n|---|\\r\\n|True|\\r\\n\\r\\nThe following example will return true, due to invalid radius.\\r\\n\\r\\n```\\r\\nprint buffer = isnull(geo_line_buffer(dynamic({\"type\":\"LineString\",\"coordinates\":[[0,0],[1,1]]}), 0))\\r\\n```\\r\\n\\r\\n|buffer|\\r\\n|---|\\r\\n|True|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/geo-line-buffer-function\",\"geo-line-buffer-function.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"geo_line_centroid\",\"Calculates the centroid of a line or a multiline on Earth.\",'## Syntax\\r\\n\\r\\n`geo_line_centroid(`*lineString*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n|Name|Type|Required|Description|\\r\\n|--|--|--|--|\\r\\n| *lineString* | dynamic | &check; | A LineString or MultiLineString in the [GeoJSON format](https://tools.ietf.org/html/rfc7946).|\\r\\n\\r\\n## Returns\\r\\n\\r\\nThe centroid coordinate values in [GeoJSON Format](https://tools.ietf.org/html/rfc7946) and of a [dynamic](./scalar-data-types/dynamic.md) data type. If the line or the multiline is invalid, the query will produce a null result.\\r\\n\\r\\n> [!NOTE]\\r\\n>\\r\\n> * The geospatial coordinates are interpreted as represented by the [WGS-84](https://earth-info.nga.mil/index.php?dir=wgs84&action=wgs84) coordinate reference system.\\r\\n> * The [geodetic datum](https://en.wikipedia.org/wiki/Geodetic_datum) used to measure distance on Earth is a sphere. Line edges are [geodesics](https://en.wikipedia.org/wiki/Geodesic) on the sphere.\\r\\n> * If input line edges are straight cartesian lines, consider using [geo_line_densify()](geo-line-densify-function.md) in order to convert planar edges to geodesics.\\r\\n> * If input is a multiline and contains more than one line, the result will be the centroid of lines union.\\r\\n\\r\\n**LineString definition and constraints**\\r\\n\\r\\ndynamic({\"type\": \"LineString\",\"coordinates\": [[lng_1,lat_1], [lng_2,lat_2], ..., [lng_N,lat_N]]})\\r\\n\\r\\ndynamic({\"type\": \"MultiLineString\",\"coordinates\": [[line_1, line_2, ..., line_N]]})\\r\\n\\r\\n* LineString coordinates array must contain at least two entries.\\r\\n* Coordinates [longitude, latitude] must be valid where longitude is a real number in the range [-180, +180] and latitude is a real number in the range [-90, +90].\\r\\n* Edge length must be less than 180 degrees. The shortest edge between the two vertices will be chosen.','The following example calculates line centroid.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA8tJLVHIycxLVbBVSKnMS8zNTNaoViqpLEhVslLyAYoHlxRl5qUr6Sgl5+cXpWTmJZakFitZRUfrmhvrWZqaW5rpKJgY6FkYGJgYxeooQITNjQ3NwcLmZiYmFmaxsbWa1lwFQHNKFJJT80qK8jNTgNalp+bHg2yOh4lpgHia1gBYQZ0fkgAAAA==\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nlet line = dynamic({\"type\":\"LineString\",\"coordinates\":[[-73.95796, 40.80042], [-73.97317, 40.764486]]});\\r\\nprint centroid = geo_line_centroid(line);\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|centroid|\\r\\n|---|\\r\\n|{\"type\": \"Point\", \"coordinates\": [-73.965567057230942, 40.782453249627416]}|\\r\\n\\r\\nThe following example calculates line centroid longitude.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA02QwWrDMAyG732K4FMLWZBkW5Y79ga77RhCKYkJLp0TMl/Ktnefs5Ax3X7p45f030Ou7jGF6qUaHun6Hvvjp8qPOaizei39t7zENKpa9dO0DDFdc/hQ57Z9crrxVsARM2mrLdUGGgEwxGgMstdou3rjjGdGskaEBFfOefboLEIp+4c5jU6Ei5fV/hdjY1ZdzEBrs3NCCIWxSOztxjlhLgKBCHeMyzHsWFDEyLZVQBw4q8nrrvs+PR/m8l2u+pDyMsWhhDCG6bLmcdl7x1WdDl/VvEy30Je00li4fdz8y6WF7gcIBtdSTwEAAA==\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nlet line = dynamic({\"type\":\"LineString\",\"coordinates\":[[-73.95807266235352,40.800426144169315],[-73.94966125488281,40.79691751000055],[-73.97317886352539,40.764486356930334],[-73.98210525512695,40.76786669510221],[-73.96004676818848,40.7980870753293]]});\\r\\nprint centroid = geo_line_centroid(line)\\r\\n| project lng = centroid.coordinates[0]\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|lng|\\r\\n|---|\\r\\n|-73.9660675626837|\\r\\n\\r\\nThe following example visualizes line centroid on a map.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAzWPwWrDMBBE7/kKoZMNaVh5tSsppX/Qnno0JhhbJKKObBSVEtr+e+WaHGf37ezM5LOYQvTiRYz32F/DUH3LfF+8PMq3zymH17J8zynEs9zLYZ7TGGKf/U0e27Z9MnhwZJxli4qZoNlrOFgAIgYH0CjN3O03ziqHSA4NrZDhopVRlsho7gq0UdppQMONVQbtP+i4cKQAVtuHmUFlrGWkhtBtfhqJUYMuf1XXdb/1824pubMYfMxpDmPpePbzaa17esyqVdW7H5F8HH0St6HP2afh0qcsvkK+iOojxPX02i/1H97E8mMuAQAA\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nlet line = dynamic({\"type\":\"MultiLineString\",\"coordinates\":[[[-73.95798683166502,40.800556090021466],[-73.98193359375,40.76819171855746]],[[-73.94940376281738,40.79691751000055],[-73.97317886352539,40.76435634049001]]]});\\r\\nprint centroid = geo_line_centroid(line)\\r\\n| render scatterchart with (kind = map)\\r\\n```\\r\\n\\r\\n![Screenshot of N Y C Central park line centroid.](images/geo-line-centroid-function/nyc-central-park-centroid.png)\\r\\nThe following example returns True because of the invalid line.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAx2MQQqAIBAAvyJ7UvDSNegH3TpKiOkiC7aGbYeI/p50nBmYoxGLotNvIflCjGrqxFcpOmP9jY/I0iolnW4OO0X9gNwHwghzz4v0RQYLsdaWiIPgCaNzg1XDur7GmA+R8wB3ZAAAAA==\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint is_bad_line = isnull(geo_line_centroid(dynamic({\"type\":\"LineString\",\"coordinates\":[[1, 1]]})))\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|is_bad_line|\\r\\n|---|\\r\\n|True|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/geo-line-centroid-function\",\"geo-line-centroid-function.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"geo_line_densify\",\"Converts planar lines or multiline edges to geodesics by adding intermediate points.\",'## Syntax\\r\\n\\r\\n`geo_line_densify(`*lineString*`,` *tolerance*`,` [ *preserve_crossing* ]`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n|Name|Type|Required|Description|\\r\\n|--|--|--|--|\\r\\n| *lineString* | dynamic | &check; | A LineString or MultiLineString in the [GeoJSON format](https://tools.ietf.org/html/rfc7946).|\\r\\n| *tolerance* | int, long, or real | | Defines maximum distance in meters between the original planar edge and the converted geodesic edge chain. Supported values are in the range [0.1, 10000]. If unspecified, the default value `10` is used.|\\r\\n| *preserve_crossing* | bool | | If `true`, preserves edge crossing over antimeridian. If unspecified, the default value `false` is used.\\r\\n\\r\\n## Returns\\r\\n\\r\\nDensified line in the [GeoJSON format](https://tools.ietf.org/html/rfc7946) and of a [dynamic](./scalar-data-types/dynamic.md) data type. If either the line or tolerance is invalid, the query will produce a null result.\\r\\n\\r\\n> [!NOTE]\\r\\n>\\r\\n> The geospatial coordinates are interpreted as represented by the [WGS-84](https://earth-info.nga.mil/index.php?dir=wgs84&action=wgs84) coordinate reference system.\\r\\n\\r\\n**LineString definition**\\r\\n\\r\\ndynamic({\"type\": \"LineString\",\"coordinates\": [[lng_1,lat_1], [lng_2,lat_2], ..., [lng_N,lat_N]]})\\r\\n\\r\\ndynamic({\"type\": \"MultiLineString\",\"coordinates\": [[line_1, line_2, ..., line_N]]})\\r\\n\\r\\n* LineString coordinates array must contain at least two entries.\\r\\n* The coordinates [longitude, latitude] must be valid. The longitude must be a real number in the range [-180, +180] and the latitude must be a real number in the range [-90, +90].\\r\\n* The edge length must be less than 180 degrees. The shortest edge between the two vertices will be chosen.\\r\\n\\r\\n**Constraints**\\r\\n\\r\\n* The maximum number of points in the densified line is limited to 10485760.\\r\\n* Storing lines in [dynamic](./scalar-data-types/dynamic.md) format has size limits.\\r\\n\\r\\n**Motivation**\\r\\n\\r\\n* [GeoJSON format](https://tools.ietf.org/html/rfc7946) defines an edge between two points as a straight cartesian line while Azure Data Explorer uses [geodesic](https://en.wikipedia.org/wiki/Geodesic).\\r\\n* The decision to use geodesic or planar edges might depend on the dataset and is especially relevant in long edges.','The following example densifies a road in Manhattan island. The edge is short and the distance between the planar edge and its geodesic counterpart is less than the distance specified by tolerance. As such, the result remains unchanged.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAy3K0QqDIBSA4VeRc6XgwqXoDPYGu9tlSESehbA00hsZe/dF7fb7/3ULsRCPMYdXQD+8Q0RyJyXlspeZzpgOG86lUl/juISJfqDUFaGDx16fxwwcppQ2H+JYMEPX9xcjG6tsqwwnSjTG6psWjp9upLj+XSvZSue+jLEf+uHlO5EAAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint densified_line = tostring(geo_line_densify(dynamic({\"type\":\"LineString\",\"coordinates\":[[-73.949247, 40.796860],[-73.973017, 40.764323]]})))\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|densified_line|\\r\\n|---|\\r\\n|{\"type\":\"LineString\",\"coordinates\":[[-73.949247, 40.796860], [-73.973017, 40.764323]]}|\\r\\n\\r\\nThe following example densifies an edge of ~130-km length\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAyWKMQqEMBAAv7JslUAKLdII9wM7yxBEzJ4s6EbMNuG4vxu0G2bmvFgUEknhL1OadxaCD2gu2spmNsqPm9+lmlRlOXg1P9R6Eg44tjo9Mzpcc74Sy6JUcAjBdw58Fx0E3zfqY/xba28ARL6/dAAAAA==\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint densified_line = tostring(geo_line_densify(dynamic({\"type\":\"LineString\",\"coordinates\":[[50, 50], [51, 51]]})))\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|densified_line|\\r\\n|---|\\r\\n|{\"type\":\"LineString\",\"coordinates\":[[50,50],[50.125,50.125],[50.25,50.25],[50.375,50.375],[50.5,50.5],[50.625,50.625],[50.75,50.75],[50.875,50.875],[51,51]]}|\\r\\n\\r\\nThe following example returns a null result because of the invalid coordinate input.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAysoyswrUUhJzSvOTMtMTYnPycxLVbBVSE/NBzPjITKVGimVeYm5mcka1UollQWpSlZKPkDZ4BKg7nQlHaXk/PyilMy8xJLUYiWr6GhjAwMdw1idaEMgGVurqQkAeUICdmUAAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint densified_line = geo_line_densify(dynamic({\"type\":\"LineString\",\"coordinates\":[[300,1],[1,1]]}))\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|densified_line|\\r\\n|---|\\r\\n||\\r\\n\\r\\nThe following example returns a null result because of the invalid tolerance input.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAysoyswrUUhJzSvOTMtMTYnPycxLVbBVSE/NBzPjITKVGimVeYm5mcka1UollQWpSlZKPkDZ4BKg7nQlHaXk/PyilMy8xJLUYiWr6GhDHcNYnWgjHaPY2FpNHQUDTQAqaEHvZgAAAA==\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint densified_line = geo_line_densify(dynamic({\"type\":\"LineString\",\"coordinates\":[[1,1],[2,2]]}), 0)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|densified_line|\\r\\n|---|\\r\\n||',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/geo-line-densify-function\",\"geo-line-densify-function.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"geo_line_length\",\"Calculates the total length of a line or a multiline on Earth.\",'## Syntax\\r\\n\\r\\n`geo_line_length(`*lineString*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n|Name|Type|Required|Description|\\r\\n|--|--|--|--|\\r\\n| *lineString* | dynamic | &check; | A LineString or MultiLineString in the [GeoJSON format](https://tools.ietf.org/html/rfc7946).|\\r\\n\\r\\n## Returns\\r\\n\\r\\nThe total length of a line or a multiline, in meters, on Earth. If the line or multiline is invalid, the query will produce a null result.\\r\\n\\r\\n> [!NOTE]\\r\\n>\\r\\n> * The geospatial coordinates are interpreted as represented by the [WGS-84](https://earth-info.nga.mil/index.php?dir=wgs84&action=wgs84) coordinate reference system.\\r\\n> * The [geodetic datum](https://en.wikipedia.org/wiki/Geodetic_datum) used to measure distance on Earth is a sphere. Line edges are [geodesics](https://en.wikipedia.org/wiki/Geodesic) on the sphere.\\r\\n> * If input line edges are straight cartesian lines, consider using [geo_line_densify()](geo-line-densify-function.md) in order to convert planar edges to geodesics.\\r\\n> * If input is a multiline and contains more than one line, the result will be total length of lines union.\\r\\n\\r\\n**LineString definition and constraints**\\r\\n\\r\\ndynamic({\"type\": \"LineString\",\"coordinates\": [[lng_1,lat_1], [lng_2,lat_2], ..., [lng_N,lat_N]]})\\r\\n\\r\\ndynamic({\"type\": \"MultiLineString\",\"coordinates\": [[line_1, line_2, ..., line_N]]})\\r\\n\\r\\n* LineString coordinates array must contain at least two entries.\\r\\n* Coordinates [longitude, latitude] must be valid where longitude is a real number in the range [-180, +180] and latitude is a real number in the range [-90, +90].\\r\\n* Edge length must be less than 180 degrees. The shortest edge between the two vertices will be chosen.','The following example calculates the total line length, in meters.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAz2PywqDMBBF9/0KyUrBSh6TSWLpH3TXpYiIBhuwUWw2UvrvTSp0VjOXw+XMbEM2O2+zazbuvn+6IX+TsK+W1OQW83vYnJ9ISYZl2Ubn+2BfpG6asxKVkZoqjsiFFJKXQCtNKXBkAAyNYLItDw4MIuMStOaaJU4ZNExJRuPIP6YEU1pj7JLC/DAESHcso0JA236Ky2mNQtHZ+ik8ovVkly490B1JnvbiCytjJ77WAAAA\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nlet line = dynamic({\"type\":\"LineString\",\"coordinates\":[[-73.95807266235352,40.800426144169315],[-73.94966125488281,40.79691751000055],[-73.97317886352539,40.764486356930334]]});\\r\\nprint length = geo_line_length(line)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|length|\\r\\n|---|\\r\\n|4922.48016992081|\\r\\n\\r\\nThe following example calculates total multiline length, in meters.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAzWPy2rDMBBF9/kKo1UCThh5NA8l9A/aVZdGhJAIV+DKIVEXofTfK8dkN4/DnTljLM2Ycmzemssjn77Tef1ryuMazd58/IwlvdflZ7mlPJjWnKfpdkn5VOLd7Pu+3wruPIlXVrTMBF3rYKcARAweoLOOObQLp9YjkkehGRKuvRWrROI4VGihnHeAwp1aQX2CnitHFmCOfYUJWlFlpI7QL3kOidGBq3dtCOFvc1hd69/VL+ahfFXDIU7HWfa4TNZzvfkHgvHPoQIBAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nlet line = dynamic({\"type\":\"MultiLineString\",\"coordinates\":[[[-73.95798683166502,40.800556090021466],[-73.98193359375,40.76819171855746]],[[-73.94940376281738,40.79691751000055],[-73.97317886352539,40.76435634049001]]]});\\r\\nprint length = geo_line_length(line)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|length|\\r\\n|---|\\r\\n|8262.24339753741|\\r\\n\\r\\nThe following example returns True because of the invalid line.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAysoyswrUcgsjk9KTInPycxLVbAF8vJKc3I00lPzwSLxOal56SUZGimVeYm5mcka1UollQWpSlZKPkDJ4BKgAelKOkrJ+flFKZl5iSWpxUpW0dGGOgqGsbG1mpqaAAO8tvRiAAAA\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint is_bad_line = isnull(geo_line_length(dynamic({\"type\":\"LineString\",\"coordinates\":[[1, 1]]})))\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|is_bad_line|\\r\\n|---|\\r\\n|True|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/geo-line-length-function\",\"geo-line-length-function.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"geo_line_simplify\",\"Simplifies a line or a multiline by replacing nearly straight chains of short edges with a single long edge on Earth.\",'## Syntax\\r\\n\\r\\n`geo_line_simplify(`*lineString*`,` *tolerance*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n|Name|Type|Required|Description|\\r\\n|--|--|--|--|\\r\\n| *lineString* | dynamic | &check; | A LineString or MultiLineString in the [GeoJSON format](https://tools.ietf.org/html/rfc7946).|\\r\\n| *tolerance* | int, long, or real | | Defines minimum distance in meters between any two vertices. Supported values are in the range [0, ~7,800,000 meters]. If unspecified, the default value `10` is used.|\\r\\n\\r\\n## Returns\\r\\n\\r\\nSimplified line or a multiline in the [GeoJSON format](https://tools.ietf.org/html/rfc7946) and of a [dynamic](./scalar-data-types/dynamic.md) data type, with no two vertices with distance less than tolerance. If either the line or tolerance is invalid, the query will produce a null result.\\r\\n\\r\\n> [!NOTE]\\r\\n>\\r\\n> * The geospatial coordinates are interpreted as represented by the [WGS-84](https://earth-info.nga.mil/index.php?dir=wgs84&action=wgs84) coordinate reference system.\\r\\n> * The [geodetic datum](https://en.wikipedia.org/wiki/Geodetic_datum) used to measure distance on Earth is a sphere. Line edges are [geodesics](https://en.wikipedia.org/wiki/Geodesic) on the sphere.\\r\\n> * If input line edges are straight cartesian lines, consider using [geo_line_densify()](geo-line-densify-function.md) in order to convert planar edges to geodesics.\\r\\n> * If input is a multiline and contains more than one line, the result will be simplification of lines union.\\r\\n> * High tolerance may cause small line to disappear.\\r\\n\\r\\n**LineString definition and constraints**\\r\\n\\r\\ndynamic({\"type\": \"LineString\",\"coordinates\": [[lng_1,lat_1], [lng_2,lat_2], ..., [lng_N,lat_N]]})\\r\\n\\r\\ndynamic({\"type\": \"MultiLineString\",\"coordinates\": [[line_1, line_2, ..., line_N]]})\\r\\n\\r\\n* LineString coordinates array must contain at least two entries.\\r\\n* Coordinates [longitude, latitude] must be valid where longitude is a real number in the range [-180, +180] and latitude is a real number in the range [-90, +90].\\r\\n* Edge length must be less than 180 degrees. The shortest edge between the two vertices will be chosen.','The following example simplifies the line by removing vertices that are within a 10-meter distance from each other.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA02Rz2rDMAyH73uKkFMLWZEtWX869ga77VhCKY1XDGkS2lzC2LvPYVlT3SQ+9P0st3Es2tTF4r1opu50TefNdzlOQyz35Ueef4631F3Kqjz3/a1J3WmM93J/OLwK7kwA0bEpBwatCHaiBozgwQWvnurqwRmDOBZP9MepiUkwD+p4xYidaBBDXKhcKMF5Qr9SebeSA6e8SFWMssAFdCvFM4dZwguUg5LlgBj4KRkHn4sR8cF5JshR4dkpXplDMPC2YMGLOaKQIz9hhoDKwPz/TkKarSKKXNc/27eXIV90LO7pOrTpK8Umn/4S++P8C8dlOm3mriocbH8B+xvcNaEBAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nlet line = dynamic({\"type\":\"LineString\",\"coordinates\":[[-73.97033169865608,40.789063020152824],[-73.97039607167244,40.78897975920816],[-73.9704617857933,40.78888837512432],[-73.97052884101868,40.7887949601531],[-73.9706052839756,40.788698498903564],[-73.97065222263336,40.78862640672032],[-73.97072866559029,40.78852791445617],[-73.97079303860664,40.788434498977836]]});\\r\\nprint simplified = geo_line_simplify(line, 10)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|simplified|\\r\\n|---|\\r\\n|{\"type\": \"LineString\", \"coordinates\": [[-73.97033169865608, 40.789063020152824], [-73.97079303860664, 40.788434498977836]]}|\\r\\n\\r\\nThe following example simplifies lines and combines results into GeoJSON geometry collection.\\r\\n\\r\\n```\\r\\nNY_Manhattan_Roads\\r\\n| project road = features.geometry\\r\\n| project road_simplified = geo_line_simplify(road, 100)\\r\\n| summarize roads_lst = make_list(road_simplified)\\r\\n| project geojson = bag_pack(\"type\", \"Feature\",\"geometry\", bag_pack(\"type\", \"GeometryCollection\", \"geometries\", roads_lst), \"properties\", bag_pack(\"name\", \"roads\"))\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|geojson|\\r\\n|---|\\r\\n|{\"type\": \"Feature\", \"geometry\": {\"type\": \"GeometryCollection\", \"geometries\": [ ... ]}, \"properties\": {\"name\": \"roads\"}}|\\r\\n\\r\\nThe following example simplifies lines and unifies result\\r\\n\\r\\n```\\r\\nNY_Manhattan_Roads\\r\\n| project road = features.geometry\\r\\n| project road_simplified = geo_line_simplify(road, 100)\\r\\n| summarize roads_lst = make_list(road_simplified)\\r\\n| project roads = geo_union_lines_array(roads_lst)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|roads|\\r\\n|---|\\r\\n|{\"type\": \"MultiLineString\", \"coordinates\": [ ... ]}|\\r\\n\\r\\nThe following example returns True because of the invalid line.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAysoyswrUcgsjs/MK0vMyUyJz8nMS1WwBYrklebkaKSn5oNF4oszcwtyMtMqNVIq8xJzM5M1qpVKKgtSlayUfIDSwSVAY9KVdJSS8/OLUjLzEktSi5WsoqMNdRQMY2NrNTU1Af5nM/VoAAAA\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint is_invalid_line = isnull(geo_line_simplify(dynamic({\"type\":\"LineString\",\"coordinates\":[[1, 1]]})))\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|is_invalid_line|\\r\\n|---|\\r\\n|True|\\r\\n\\r\\nThe following example returns True because of the invalid tolerance.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAx3MQQrDIBBA0avIrBSmC7MM9AbddSkiEm0YmIwSbUBK717p9n349STpiloguSJTCkyS1X2KvJn1nstfQqOjMr2GTkPiQZv+QB81wwqPmZ99bnZA2Eo5E0nsucHqnEVlPboFF++/BtXNGvMDQCCfRnIAAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint is_invalid_line = isnull(geo_line_simplify(dynamic({\"type\":\"LineString\",\"coordinates\":[[1, 1],[2,2]]}), -1))\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|is_invalid_line|\\r\\n|---|\\r\\n|True|\\r\\n\\r\\nThe following example returns True because high tolerance causes small line to disappear.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAx2MwQrDIBBEf0X2pCCl6THQP8gtxyAi0YaFzSrRFiTk37vtwAzDG5hyIDeF1SN/AmH0hJzUUwi/ifSW8p/4inshfHUdO4cdV31C6yXBCJPMc5ObDSysOR8RObRUYVyW4TZYJeGs1IcVO3cZQfefjPkC36xb1X4AAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint is_invalid_line = isnull(geo_line_simplify(dynamic({\"type\":\"LineString\",\"coordinates\":[[1.1, 1.1],[1.2,1.2]]}), 100000))\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|is_invalid_line|\\r\\n|---|\\r\\n|True|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/geo-line-simplify-function\",\"geo-line-simplify-function.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"geo_point_buffer\",\"Calculates polygon that contains all points within the given radius of the point on Earth.\",\"## Syntax\\r\\n\\r\\n`geo_point_buffer(`*longitude*`,` *latitude*`,` *radius*`,` *tolerance*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n|Name|Type|Required|Description|\\r\\n|--|--|--|--|\\r\\n| *longitude* | real | &check; | Geospatial coordinate longitude value in degrees. Valid value is a real number and in the range [-180, +180].|\\r\\n| *latitude* | real | &check; | Geospatial coordinate latitude value in degrees. Valid value is a real number and in the range [-90, +90].|\\r\\n| *radius* | real | &check; | Buffer radius in meters. Valid value must be positive.|\\r\\n| *tolerance* | real || Defines the tolerance in meters that determines how much a polygon can deviate from the ideal radius. If unspecified, the default value `10` is used. Tolerance should be no lower than 0.0001% of the radius. Specifying tolerance bigger than radius will lower the tolerance to biggest possible value below the radius.|\\r\\n\\r\\n## Returns\\r\\n\\r\\nPolygon around the input point. If the coordinates or radius or tolerance is invalid, the query will produce a null result.\\r\\n\\r\\n> [!NOTE]\\r\\n>\\r\\n>* The geospatial coordinates are interpreted as represented by the [WGS-84](https://earth-info.nga.mil/index.php?dir=wgs84&action=wgs84) coordinate reference system.\\r\\n>* The [geodetic datum](https://en.wikipedia.org/wiki/Geodetic_datum) used to measure distance on Earth is a sphere.\",'The following query calculates polygon around [-115.1745008278, 36.1497251277] coordinates, with 20km radius.\\r\\n\\r\\n```\\r\\nprint buffer = geo_point_buffer(-115.1745008278, 36.1497251277, 20000)\\r\\n```\\r\\n\\r\\n|buffer|\\r\\n|---|\\r\\n|{\"type\": \"Polygon\",\"coordinates\": [ ... ]}|\\r\\n\\r\\nThe following query calculates buffer around each point and unifies result\\r\\n\\r\\n```\\r\\ndatatable(longitude:real, latitude:real, radius:real)\\r\\n[\\r\\n    real(-80.3212217992616), 25.268683367546604, 5000,\\r\\n    real(-80.81717403605833), 24.82658441221962, 3000\\r\\n]\\r\\n| project buffer = geo_point_buffer(longitude, latitude, radius)\\r\\n| summarize polygons = make_list(buffer)\\r\\n| project result = geo_union_polygons_array(polygons)\\r\\n```\\r\\n\\r\\n|result|\\r\\n|---|\\r\\n|{\"type\": \"MultiPolygon\",\"coordinates\": [ ... ]}|\\r\\n\\r\\nThe following example will return true, due to invalid point.\\r\\n\\r\\n```\\r\\nprint result = isnull(geo_point_buffer(200, 1,0.1))\\r\\n```\\r\\n\\r\\n|result|\\r\\n|---|\\r\\n|True|\\r\\n\\r\\nThe following example will return true, due to invalid radius.\\r\\n\\r\\n```\\r\\nprint result = isnull(geo_point_buffer(10, 10, -1))\\r\\n```\\r\\n\\r\\n|result|\\r\\n|---|\\r\\n|True|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/geo-point-buffer-function\",\"geo-point-buffer-function.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"geo_point_in_circle\",\"Calculates whether the geospatial coordinates are inside a circle on Earth.\",\"## Syntax\\r\\n\\r\\n`geo_point_in_circle(`*p_longitude*`,` *p_latitude*`,` *pc_longitude*`,` *pc_latitude*`,` *c_radius*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n|Name|Type|Required|Description|\\r\\n|--|--|--|--|\\r\\n| *p_longitude* | real | &check; | Geospatial coordinate longitude value in degrees. Valid value is a real number and in the range [-180, +180].|\\r\\n| *p_latitude* | real | &check; | Geospatial coordinate latitude value in degrees. Valid value is a real number and in the range [-90, +90].|\\r\\n| *pc_longitude* | real | &check; | Circle center geospatial coordinate longitude value in degrees. Valid value is a real number and in the range [-180, +180].|\\r\\n| *pc_latitude* | real | &check; | circle center geospatial coordinate latitude value in degrees. Valid value is a real number and in the range [-90, +90].|\\r\\n| *c_radius* | real | &check; | Circle radius in meters. Valid value must be positive.|\\r\\n\\r\\n## Returns\\r\\n\\r\\nIndicates whether the geospatial coordinates are inside a circle. If the coordinates or circle is invalid, the query will produce a null result.\\r\\n\\r\\n> [!NOTE]\\r\\n>\\r\\n>* The geospatial coordinates are interpreted as represented by the [WGS-84](https://earth-info.nga.mil/index.php?dir=wgs84&action=wgs84) coordinate reference system.\\r\\n>* The [geodetic datum](https://en.wikipedia.org/wiki/Geodetic_datum) used to measure distance on Earth is a sphere.\\r\\n>* A circle is a spherical cap on Earth. The radius of the cap is measured along the surface of the sphere.\",'The following query finds all the places in the area defined by the following circle: Radius of 18 km, center at [-122.317404, 47.609119] coordinates.\\r\\n\\r\\n![Places near Seattle.](images/geo-point-in-circle-function/circle-seattle.png)\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA3XS0UrDMBSA4fs+xbnbCrVL2rRp9wCCCArqnUiJ6bFG06RkERV8eKN1rN1qchUCH384aYUP+1HjWlvTKf/W4tah0Alo4afHQQuJ2513ynRxdB9BWD836zOaZWlOOSMsToDxtCQ1pXUCq1sU3mtcJXC6Nhu4MCCVkxphhuUpq3lZVSPGiorUVcCu9Wc/KAlXIcsaoeHcOtz5X3zE8MOjU9aBfdrDcJSZkdBJ/zI5JxUL8qVyr1qYdqlzmnlkMZaXZT5aGeOkzoJ1J6TtxeKL/608cmlGa17sG2nOiuDeYNvb5cR540P0Be/P6BA6tM1glfGNMs14e5jxYbwJTAY4mx+tCCFx8AZnX1D68Qt8AzYb0g4xAgAA\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\ndatatable(longitude:real, latitude:real, place:string)\\r\\n[\\r\\n    real(-122.317404), 47.609119, \\'Seattle\\',                   // In circle \\r\\n    real(-123.497688), 47.458098, \\'Olympic National Forest\\',   // In exterior of circle  \\r\\n    real(-122.201741), 47.677084, \\'Kirkland\\',                  // In circle\\r\\n    real(-122.443663), 47.247092, \\'Tacoma\\',                    // In exterior of circle\\r\\n    real(-122.121975), 47.671345, \\'Redmond\\',                   // In circle\\r\\n]\\r\\n| where geo_point_in_circle(longitude, latitude, -122.317404, 47.609119, 18000)\\r\\n| project place\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|place|\\r\\n|---|\\r\\n|Seattle|\\r\\n|Kirkland|\\r\\n|Redmond|\\r\\n\\r\\nStorm events in Orlando. The events are filtered by 100 km within Orlando coordinates, and aggregated by event type and hash.\\r\\n\\r\\n![Storm events in Orlando.](images/geo-point-in-circle-function/orlando-storm-events.png)\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA22PwU7DMAyG7zyFjw0KW7sBKoddkHaCG9yrLLVaszSJHHdjiIcn3SbRw0625P//PvlDAg/bA3pJd78QOXyhFXjFjvx78Pq6GdFwDn2eIubcsUdG6DA0MZCXhnxjia3D4laT0bjioa4W6/qlUhpW9eJp/fisoSrLEu6noTI0jcNgmH4QbBi9FAp2p3+rht6kHjYzq4QmrSw6d8OqZt9MjUtwqtgMZOMujGKCKj3XnOVNrjP6Fhkioe0NCxxJeij25NvNYKKC5RLynO7XKPkOzMGQMzuHQB7exiQBtt/RBc6kFtNeQvwDFpFHo3MBAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nStormEvents\\r\\n| project BeginLon, BeginLat, EventType\\r\\n| where geo_point_in_circle(BeginLon, BeginLat, real(-81.3891), 28.5346, 1000 * 100)\\r\\n| summarize count() by EventType, hash = geo_point_to_s2cell(BeginLon, BeginLat)\\r\\n| project geo_s2cell_to_central_point(hash), EventType, count_\\r\\n| render piechart with (kind=map) // map pie rendering available in Kusto Explorer desktop\\r\\n```\\r\\n\\r\\nThe following example shows NY Taxi pickups within 10 meters of a particular location. Relevant pickups are aggregated by hash.\\r\\n\\r\\n![NY Taxi nearby Pickups.](images/geo-point-in-circle-function/circle-junction.png)\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA42Py27CQAxF93yFlxMpRTBFgiz4lpFxLMZlMjNyHPEQH9+kSBW7dnt17zl2vlMwvMnqCVXLF5NBFbpMNaSSz2JTz+1vgvYTzN1rZGU4cwm1SLYgOZAoJXZ/z1tQxuQ+9p/rrvOHpoXdZr3f+a6F7aaZ4eM0DKjyYDjdIeIY4fimshJGT5yS+4fJ++btswXy2i4U4myK6YV1i2fpKueeFUZCM1aKqAZXsQjuIrmfLxmwNt9Em1nwNgEAAA==\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nnyc_taxi\\r\\n| project pickup_longitude, pickup_latitude\\r\\n| where geo_point_in_circle( pickup_longitude, pickup_latitude, real(-73.9928), 40.7429, 10)\\r\\n| summarize by hash = geo_point_to_s2cell(pickup_longitude, pickup_latitude, 22)\\r\\n| project geo_s2cell_to_central_point(hash)\\r\\n| render scatterchart with (kind = map)\\r\\n```\\r\\n\\r\\nThe following example will return true.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAysoyswrUcjMi0/OLErOSVWwVUhPzY8vyAeKxsNFNXQNjYz0DE2MTc1MdBRMzPVMgSxzcx0FiLiBgYWlGUTcyNzY1FBHwdjUwEATAJnKnMpbAAAA\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint in_circle = geo_point_in_circle(-122.143564, 47.535677, -122.100896, 47.527351, 3500)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|in_circle|\\r\\n|---|\\r\\n|1|\\r\\n\\r\\nThe following example will return false.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAysoyswrUcjMi0/OLErOSVWwVUhPzY8vyAeKxsNFNXQNjYz0DI3NTc1NdRRMzPXMjA3MLIx1FCDiBgYWlmZgcVMjc2NTQx0FY1MDA00AV0g5xlsAAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint in_circle = geo_point_in_circle(-122.137575, 47.630683, -122.100896, 47.527351, 3500)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|in_circle|\\r\\n|---|\\r\\n|0|\\r\\n\\r\\nThe following example will return a null result because of the invalid coordinate input.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAysoyswrUcjMi0/OLErOSVWwVUhPzY8vyAeKxsNFNYwMDHQUDOFIEwAH8KEmNgAAAA==\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint in_circle = geo_point_in_circle(200, 1, 1, 1, 1)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|in_circle|\\r\\n|---|\\r\\n||\\r\\n\\r\\nThe following example will return a  null result because of the invalid circle radius input.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAysoyswrUcjMi0/OLErOSVWwVUhPzY8vyAeKxsNFNQx1FOBI11ATAAIUtdY1AAAA\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint in_circle = geo_point_in_circle(1, 1, 1, 1, -1)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|in_circle|\\r\\n|---|\\r\\n||',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/geo-point-in-circle-function\",\"geo-point-in-circle-function.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"geo_point_in_polygon\",\"Calculates whether the geospatial coordinates are inside a polygon or a multipolygon on Earth.\",'## Syntax\\r\\n\\r\\n`geo_point_in_polygon(`*longitude*`,` *latitude*`,` *polygon*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n|Name|Type|Required|Description|\\r\\n|--|--|--|--|\\r\\n| *longitude* | real | &check; | Geospatial coordinate, longitude value in degrees. Valid value is a real number and in the range [-180, +180].|\\r\\n| *latitude* | real | &check; | Geospatial coordinate, latitude value in degrees. Valid value is a real number and in the range [-90, +90].|\\r\\n| *polygon* | dynamic | &check; | Polygon or multipolygon in the [GeoJSON format](https://tools.ietf.org/html/rfc7946).|\\r\\n\\r\\n## Returns\\r\\n\\r\\nIndicates whether the geospatial coordinates are inside a polygon. If the coordinates or polygon is invalid, the query will produce a null result.\\r\\n\\r\\n> [!NOTE]\\r\\n>\\r\\n> * The geospatial coordinates are interpreted as represented by the [WGS-84](https://earth-info.nga.mil/index.php?dir=wgs84&action=wgs84) coordinate reference system.\\r\\n> * The [geodetic datum](https://en.wikipedia.org/wiki/Geodetic_datum) used for measurements on Earth is a sphere. Polygon edges are [geodesics](https://en.wikipedia.org/wiki/Geodesic) on the sphere.\\r\\n> * If input polygon edges are straight cartesian lines, consider using [geo_polygon_densify()](geo-polygon-densify-function.md) to convert planar edges to geodesics.\\r\\n\\r\\n**Polygon definition and constraints**\\r\\n\\r\\ndynamic({\"type\": \"Polygon\",\"coordinates\": [ LinearRingShell, LinearRingHole_1, ..., LinearRingHole_N ]})\\r\\n\\r\\ndynamic({\"type\": \"MultiPolygon\",\"coordinates\": [[LinearRingShell, LinearRingHole_1, ..., LinearRingHole_N ], ..., [LinearRingShell, LinearRingHole_1, ..., LinearRingHole_M]]})\\r\\n\\r\\n* LinearRingShell is required and defined as a `counterclockwise` ordered array of coordinates [[lng_1,lat_1],...,[lng_i,lat_i],...,[lng_j,lat_j],...,[lng_1,lat_1]]. There can be only one shell.\\r\\n* LinearRingHole is optional and defined as a `clockwise` ordered array of coordinates [[lng_1,lat_1],...,[lng_i,lat_i],...,[lng_j,lat_j],...,[lng_1,lat_1]]. There can be any number of interior rings and holes.\\r\\n* LinearRing vertices must be distinct with at least three coordinates. The first coordinate must be equal to the last. At least four entries are required.\\r\\n* Coordinates [longitude, latitude] must be valid. Longitude must be a real number in the range [-180, +180] and latitude must be a real number in the range [-90, +90].\\r\\n* LinearRingShell encloses at most half of the sphere. LinearRing divides the sphere into two regions. The smaller of the two regions will be chosen.\\r\\n* LinearRing edge length must be less than 180 degrees. The shortest edge between the two vertices will be chosen.\\r\\n* LinearRings must not cross and must not share edges. LinearRings may share vertices.\\r\\n* Polygon doesn\\'t necessarily contain its vertices. Point containment in polygon is defined so that if the Earth is subdivided into polygons, every point is contained by exactly one polygon.\\r\\n\\r\\n> [!TIP]\\r\\n>\\r\\n> * Using literal Polygon or a MultiPolygon may result in better performance.\\r\\n> * If you want to know if any of the polygons contains a point, try the following steps: Fold the collection of polygons into one multipolygon. Then query this multipolygon. This may improve performance. See the following example.','Manhattan island without Central Park.\\r\\n\\r\\n![Screenshot of a map of the Manhattan area, with markers for a landmark, a museum, and an airport. The island appears dimmed except for Central Park.](images/geo-point-in-polygon-function/polygon-manhattan-with-hole.png)\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA4VT0WrbQBB8z1cIvyQGN7nb273dzVsKpRRaKLRvIQQ1VhOBIxlZpg1t/70jy5abQogMNkZzs7Mzc8uyx+fbqjpbtc193W+X1WVXlatFsSr7f/8uq81dV6/7um0uN31XN/fzk+uTAs/w/uyNpnM3ycLzRcHhXNnYdFGcvntc111VfMGYqni7rVdLHD1dFMfn4qL40BSf29XTfdsU/1HmROx7SnUhAeXXh6r4VPVdu25XdV82xaftpto+Fu334qrrB+6RsvrZV13ddsOL9Uj/nN2UU9YDuybJYP9Yvt+W3bIui6u6W7cj4bPnZfabk9/Fj4cK+95X7e26rZv+tm5u96+PFh/dhbFPTflY3539mvVP62p2Ods7MVvM7toWQho4t5ldXl9f7xwhcY0Od2GNLaDc1Cha5Bg4S7xZjDDOHjkrmUSsNcAkZM/RMomovQxjQMRzNg9qeYfj8xBDsBzERUOKA04lejKBEHGfUJbBR+BQ1x0qsFiGQs9CLBOO4nAsB08qAy67e4geMSZhjYM6V6XMHJg8+8hnGIw5ZOp0gKkyZLk6O9EOFoMlAmXCr0+wQDlkCjHCwB2MPLAy9MGaCQWfNCbDl+0c0cQYaQwyyM1HNmeoE/i5Q7GgTJRUQ5SjvYSTUQb9tgtLFX4grZCTaJpgiREgS4p7MgsWIkOpRNIDihy3StKQ1B4GV+LgBx6RAywFVYSdphAs8CAOah3QaQHMdMNCnHFXRxxSijljCsZMMAQXkQ86NmaFM9EDCiKMvKaxRGYE2WhNpLFw8ALrwgHYfIAhPHXYGy2NfdOI9mH5jIuuE+y1lgM3AsWIOcF39Ga/bUByQtHVbEoV0hAOOmKkY38zcsFSmQzOTKEOGQeMTHB2hDFRHvhd0jGv4dLQsF30KQlGhzEGxZ4sfk3czc2f+fwvLfY7vIMFAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\ndatatable(longitude:real, latitude:real, description:string)\\r\\n[\\r\\n    real(-73.985654), 40.748487, \\'Empire State Building\\',           // In Polygon \\r\\n    real(-73.963249), 40.779525, \\'The Metropolitan Museum of Art\\',  // In exterior of polygon\\r\\n    real(-73.874367), 40.777356, \\'LaGuardia Airport\\',               // In exterior of polygon\\r\\n]\\r\\n| where geo_point_in_polygon(longitude, latitude, dynamic({\"type\":\"Polygon\",\"coordinates\":[[[-73.92597198486328,40.87821814104651],[-73.94691467285156,40.85069618625578],[-73.94691467285156,40.841865966890786],[-74.01008605957031,40.7519385984599],[-74.01866912841797,40.704586878965245],[-74.01214599609375,40.699901911003046],[-73.99772644042969,40.70875101828792],[-73.97747039794922,40.71083299030839],[-73.97026062011719,40.7290474687069],[-73.97506713867186,40.734510840309376],[-73.970947265625,40.74543623770158],[-73.94210815429688,40.77586181063573],[-73.9434814453125,40.78080140115127],[-73.92974853515625,40.79691751000055],[-73.93077850341797,40.804454347291006],[-73.93489837646484,40.80965166748853],[-73.93524169921875,40.837190668541105],[-73.92288208007812,40.85770758108904],[-73.9101791381836,40.871728144624974],[-73.92597198486328,40.87821814104651]],[[-73.95824432373047,40.80071852197889],[-73.98206233978271,40.76815921628347],[-73.97309303283691,40.76422632379533],[-73.94914627075195,40.796949998204596],[-73.95824432373047,40.80071852197889]]]}))\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|longitude|latitude|description|\\r\\n|---|---|---|\\r\\n|-73.985654|40.748487|Empire State Building|\\r\\n\\r\\nSearch for coordinates in multipolygon.\\r\\n\\r\\n![Screenshot of a map of the Manhattan area, with markers for the Upper West Side, Greenwich Village, and an airport. Three neighborhoods appear dimmed.](images/geo-point-in-polygon-function/multipolygon-manhattan.png)\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=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\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nlet multipolygon = dynamic({\"type\":\"MultiPolygon\",\"coordinates\":[[[[-73.991460000000131,40.731738000000206],[-73.992854491775518,40.730082566051351],[-73.996772,40.725432000000154],[-73.997634685522883,40.725786309886963],[-74.002855946639244,40.728346630056791],[-74.001413,40.731065000000207],[-73.996796995070824,40.73736378205173],[-73.991724524037934,40.735245208931886],[-73.990703782359589,40.734781896080477],[-73.991460000000131,40.731738000000206]]],[[[-73.958357552055688,40.800369095633819],[-73.98143901556422,40.768762584141953],[-73.981548752788598,40.7685590292784],[-73.981565335901905,40.768307084720796],[-73.981754418060945,40.768399727738668],[-73.982038573548124,40.768387823012056],[-73.982268248204349,40.768298621883247],[-73.982384797518051,40.768097213086911],[-73.982320919746599,40.767894461792181],[-73.982155532845766,40.767756204474757],[-73.98238873834039,40.767411004834273],[-73.993650353659021,40.772145571634361],[-73.99415893763998,40.772493009137818],[-73.993831082030937,40.772931787850908],[-73.993891252437052,40.772955194876722],[-73.993962585514595,40.772944653908901],[-73.99401262480508,40.772882846631894],[-73.994122058082397,40.77292405902601],[-73.994136652588594,40.772901870174394],[-73.994301342391154,40.772970028663913],[-73.994281535134448,40.77299380206933],[-73.994376552751078,40.77303955110149],[-73.994294029824005,40.773156243992048],[-73.995023275860802,40.773481196576356],[-73.99508939189289,40.773388475039134],[-73.995013963716758,40.773358035426909],[-73.995050284699261,40.773297153189958],[-73.996240651898916,40.773789791397689],[-73.996195837470992,40.773852356184044],[-73.996098807369748,40.773951805299085],[-73.996179459973888,40.773986954351571],[-73.996095245226442,40.774086186437756],[-73.995572265161172,40.773870731394297],[-73.994017424135961,40.77321375261053],[-73.993935876811335,40.773179512586211],[-73.993861942928888,40.773269531698837],[-73.993822393527211,40.773381758622882],[-73.993767019318497,40.773483981224835],[-73.993698463744295,40.773562141052594],[-73.993358326468751,40.773926888327956],[-73.992622663865575,40.774974056037109],[-73.992577842766124,40.774956016359418],[-73.992527743951555,40.775002110439829],[-73.992469745815342,40.775024159551755],[-73.992403837191887,40.775018140390664],[-73.99226708903538,40.775116033858794],[-73.99217809026365,40.775279293897171],[-73.992059084937338,40.775497598192516],[-73.992125372394938,40.775509075053385],[-73.992226867797001,40.775482211026116],[-73.992329346608813,40.775468900958522],[-73.992361756801131,40.775501899766638],[-73.992386042960277,40.775557180424634],[-73.992087684712729,40.775983970821372],[-73.990927174149746,40.777566878763238],[-73.99039616003671,40.777585065679204],[-73.989461267506471,40.778875124584417],[-73.989175778438053,40.779287524015778],[-73.988868617400072,40.779692922911607],[-73.988871874499793,40.779713738253008],[-73.989219022880576,40.779697895209402],[-73.98927785904425,40.779723439271038],[-73.989409054180143,40.779737706471963],[-73.989498614927044,40.779725044389757],[-73.989596493388234,40.779698146683387],[-73.989679812902509,40.779677568658038],[-73.989752702937935,40.779671244211556],[-73.989842247806507,40.779680752670664],[-73.990040102120489,40.779707677698219],[-73.990137977524839,40.779699769704784],[-73.99033584033225,40.779661794394983],[-73.990430598697046,40.779664973055503],[-73.990622199396725,40.779676064914298],[-73.990745069505479,40.779671328184051],[-73.990872114282197,40.779646007643876],[-73.990961672224358,40.779639683751753],[-73.991057472829539,40.779652352625774],[-73.991157429497036,40.779669775606465],[-73.991242817404469,40.779671367084504],[-73.991255318289745,40.779650782516491],[-73.991294887120119,40.779630209208889],[-73.991321967649895,40.779631796041372],[-73.991359455569423,40.779585883337383],[-73.991551059227476,40.779574821437407],[-73.99141982585985,40.779755280287233],[-73.988886144117032,40.779878898532999],[-73.988939656706265,40.779956178440393],[-73.988926103530844,40.780059292013632],[-73.988911680264692,40.780096037146606],[-73.988919261468567,40.780226094343945],[-73.988381050202634,40.780981074045783],[-73.988232413846987,40.781233144215555],[-73.988210420831663,40.781225482542055],[-73.988140000000143,40.781409000000224],[-73.988041288067166,40.781585961353777],[-73.98810029382463,40.781602878305286],[-73.988076449145055,40.781650935001608],[-73.988018059972219,40.781634188810422],[-73.987960792842145,40.781770987031535],[-73.985465811970457,40.785360700575431],[-73.986172704965611,40.786068452258647],[-73.986455862401996,40.785919219081421],[-73.987072345615601,40.785189638820121],[-73.98711901394276,40.785210319004058],[-73.986497781023601,40.785951202887254],[-73.986164628806279,40.786121882448327],[-73.986128422486075,40.786239001331111],[-73.986071135219746,40.786240706026611],[-73.986027274789123,40.786228964236727],[-73.986097637849426,40.78605822569795],[-73.985429321269592,40.785413942184597],[-73.985081137732209,40.785921935110366],[-73.985198833254501,40.785966552197777],[-73.985170502389906,40.78601333415817],[-73.985216218673656,40.786030501816427],[-73.98525509797993,40.785976205511588],[-73.98524273937646,40.785972572653328],[-73.98524962933017,40.785963139855845],[-73.985281779186749,40.785978620950075],[-73.985240032884533,40.786035858136792],[-73.985683885242182,40.786222123919686],[-73.985717529004575,40.786175994668795],[-73.985765660297687,40.786196274858618],[-73.985682871922691,40.786309786213067],[-73.985636270930442,40.786290150649279],[-73.985670722564691,40.786242911993817],[-73.98520511880038,40.786047669212785],[-73.985211035607492,40.786039554883686],[-73.985162639946992,40.786020999769754],[-73.985131636312062,40.786060297019972],[-73.985016964065125,40.78601423719563],[-73.984655078830457,40.786534741807841],[-73.985743787901043,40.786570082854738],[-73.98589227228328,40.786426529019593],[-73.985942854994988,40.786452847880334],[-73.985949561556794,40.78648711396653],[-73.985812373526713,40.786616865357047],[-73.985135209703174,40.78658761889551],[-73.984619428584324,40.786586016349787],[-73.981952458164173,40.790393724337193],[-73.972823037363767,40.803428052816756],[-73.971036786332192,40.805918478839672],[-73.966701,40.804169000000186],[-73.959647,40.801156000000113],[-73.958508540159471,40.800682279767472],[-73.95853274080838,40.800491362464697],[-73.958357552055688,40.800369095633819]]],[[[-73.943592454622546,40.782747908206574],[-73.943648235390199,40.782656161333449],[-73.943870759887162,40.781273026571704],[-73.94345932494096,40.780048275653243],[-73.943213862652243,40.779317588660199],[-73.943004239504688,40.779639495474292],[-73.942716005450905,40.779544169476175],[-73.942712374762181,40.779214856940001],[-73.942535563208608,40.779090956062532],[-73.942893408188027,40.778614093246276],[-73.942438481745029,40.777315235766039],[-73.942244919522594,40.777104088947254],[-73.942074188038887,40.776917846977142],[-73.942002667222781,40.776185317382648],[-73.942620205199006,40.775180871576474],[-73.94285645694552,40.774796600349191],[-73.94293043781397,40.774676268036011],[-73.945870899588215,40.771692257932997],[-73.946618690150586,40.77093339256956],[-73.948664164778933,40.768857624399587],[-73.950069793030679,40.767025088383498],[-73.954418260786071,40.762184104951245],[-73.95650786241211,40.760285256574043],[-73.958787773424007,40.758213471309809],[-73.973015157270069,40.764278692864671],[-73.955760332998182,40.787906554459667],[-73.944023,40.782960000000301],[-73.943592454622546,40.782747908206574]]]]});\\r\\nlet coordinates = \\r\\n    datatable(longitude:real, latitude:real, description:string)\\r\\n    [\\r\\n        real(-73.9741), 40.7914, \\'Upper West Side\\',    // In MultiPolygon\\r\\n        real(-73.9950), 40.7340, \\'Greenwich Village\\',  // In MultiPolygon\\r\\n        real(-73.8743), 40.7773, \\'LaGuardia Airport\\',  // In exterior of MultiPolygon\\r\\n    ];\\r\\ncoordinates\\r\\n| where geo_point_in_polygon(longitude, latitude, multipolygon)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|longitude|latitude|description|\\r\\n|---|---|---|\\r\\n|-73.9741|40.7914|Upper West Side|\\r\\n|-73.995|40.734|Greenwich Village|\\r\\n\\r\\nStorm events in California. The events are filtered by a California state polygon and aggregated by event type and hash.\\r\\n\\r\\n![Storm events in California.](images/geo-point-in-polygon-function/california-storm-events.png)\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA22WS2/cNhSF9/0Vglc2MFXI++AlU2RTIKt2UaDdBYExGau2mrE0mFGSuo//3kNqyEkdrzz+cHVIXZ5zqf2wdLvtfvx9Pk7jtnvT3T1N28dxd/331fJ0GK5eX/0y75/u5+lqc7Wb5+PdOG2X4XT1+t27d9974p6YScNGqHcu+BjebzKnni1G5cK9D4FX7nvH5hy471NSYlq5w9N42D/jPuG/wFE24noKoj49q+eIisSyrutjb14sZuyxLsUVWy8pxpQ2bD15lK849CpOWDeMX0Vv5dpHdSwb1j6Z03RWkT6wiKbMsbz/BksfTclXLOa8+ozNu+SockbLKGYuEp1LlXsOTgtnp8E1efRXVx1v4kPTEa8cqXAXhVu9skbD7rlPzN5Cq0+mHDIPyUK41JMk8pkrStp2jEyDZSzOuOGAU5aijhYlfUHFUZL4TReoxx4p6PN66k011CPJy5JLBXujpPWknNiqEkh8tHquHq7ImyS8NboUKicJKZTygBZzw1iVS3m04KnJMCWsnTcP72pMzTaGvWvmlCyqr9wil87gACI37/nI6gu3wJx85RScT0XdHHvRysWzSixcvESuHI8GKa2MglTFyjWEhOzgwJ0QdlZ5dOhJqU/F5jU7BEuvvvRoklnjFpPTzCkYNawaiUo5nIUYVQ5Tx1T8Jy4Fqwn0HA3JzBi+Sly5GEV7bm/wAFOUcrUkqg27FF1Rj7CtXcoxJ6TIIDqaLvWwtFszmGBjqTwmCY4yJwFugwVvCl9kLurofLR5EDn03BcOJ0gbUD7A3kU/wFFOK6eIKaOFm8RLPcJsaplbDiFVbj544TxafIKHWn1MIebUhp69Bmn6iZVyHgLWRf8aR1c05w0cFm3q0Xil0bFLTT3BpyuHX7l2mTAhFE4qHIuezzaPacaki3kuYuxR7T7BAeYTlXkp6E5s3DnLYxeRCXkaVY43hMEyV3Jq9C230r+2LqK96vyfiwvE6/xWJ01GELO8HWCcabzIwyLEWSax53oomB0IXCo8JsZJV57Y1JVbA0MqUXstTMZs5RxVlXOgKQ+DVIKLqKoPSpVjrEYpMohknaTggkSXzYcU22Eh3Wyei0yCF7nikPODl0qYpBh6TSVmA2vmjIvT+SZTLsDMVQmDptXjzinlsWxrxflSQItDvjlx+PBc5Tg4dYUjVq3HOfTOUsxcGOa56Chu8pR5jifbc31ECSOzvu2lHlESdx5qwC5onuDAIuTCRV4sDyPJicF+2jZJYWQpPPrAbZuEaxK3Z/ngcFbHywsfIu/f/3vzw3e/LvPx8e3nYVpO3/3THY7zH8Nu6X4c7sfp53nanH9tl01Xin7DRw/qvjwMx6G7H+bbwzxOy+044Uf5Drp+6dHLF9QNHj59enzcHse/hm43f5qW65vuw9NFfdM9bE8P+NK6qC/z7Yl2w37/orjdfLXx/NBam5/aQfO43a8y11n3ZvP1SmX9Wzx+HKa74dgdxmH3sD0u3ZdxeeiuP47T3ZvH7eGme/Wqw99z2Tjdd9vP23G//bAfunHqfvp0Wubu7Z+H/XyEyt1w+rjMh/8AiuopHzsKAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nlet california = dynamic({\"type\":\"Polygon\",\"coordinates\":[[[-123.233256,42.006186],[-122.378853,42.011663],[-121.037003,41.995232],[-120.001861,41.995232],[-119.996384,40.264519],[-120.001861,38.999346],[-118.71478,38.101128],[-117.498899,37.21934],[-116.540435,36.501861],[-115.85034,35.970598],[-114.634459,35.00118],[-114.634459,34.87521],[-114.470151,34.710902],[-114.333228,34.448009],[-114.136058,34.305608],[-114.256551,34.174162],[-114.415382,34.108438],[-114.535874,33.933176],[-114.497536,33.697668],[-114.524921,33.54979],[-114.727567,33.40739],[-114.661844,33.034958],[-114.524921,33.029481],[-114.470151,32.843265],[-114.524921,32.755634],[-114.72209,32.717295],[-116.04751,32.624187],[-117.126467,32.536556],[-117.24696,32.668003],[-117.252437,32.876127],[-117.329114,33.122589],[-117.471515,33.297851],[-117.7837,33.538836],[-118.183517,33.763391],[-118.260194,33.703145],[-118.413548,33.741483],[-118.391641,33.840068],[-118.566903,34.042715],[-118.802411,33.998899],[-119.218659,34.146777],[-119.278905,34.26727],[-119.558229,34.415147],[-119.875891,34.40967],[-120.138784,34.475393],[-120.472878,34.448009],[-120.64814,34.579455],[-120.609801,34.858779],[-120.670048,34.902595],[-120.631709,35.099764],[-120.894602,35.247642],[-120.905556,35.450289],[-121.004141,35.461243],[-121.168449,35.636505],[-121.283465,35.674843],[-121.332757,35.784382],[-121.716143,36.195153],[-121.896882,36.315645],[-121.935221,36.638785],[-121.858544,36.6114],[-121.787344,36.803093],[-121.929744,36.978355],[-122.105006,36.956447],[-122.335038,37.115279],[-122.417192,37.241248],[-122.400761,37.361741],[-122.515777,37.520572],[-122.515777,37.783465],[-122.329561,37.783465],[-122.406238,38.15042],[-122.488392,38.112082],[-122.504823,37.931343],[-122.701993,37.893004],[-122.937501,38.029928],[-122.97584,38.265436],[-123.129194,38.451652],[-123.331841,38.566668],[-123.44138,38.698114],[-123.737134,38.95553],[-123.687842,39.032208],[-123.824765,39.366301],[-123.764519,39.552517],[-123.85215,39.831841],[-124.109566,40.105688],[-124.361506,40.259042],[-124.410798,40.439781],[-124.158859,40.877937],[-124.109566,41.025814],[-124.158859,41.14083],[-124.065751,41.442061],[-124.147905,41.715908],[-124.257444,41.781632],[-124.213628,42.000709],[-123.233256,42.006186]]]});\\r\\nStormEvents\\r\\n| project BeginLon, BeginLat, EventType\\r\\n| where geo_point_in_polygon(BeginLon, BeginLat, california)\\r\\n| summarize count() by EventType, hash = geo_point_to_s2cell(BeginLon, BeginLat, 7)\\r\\n| project geo_s2cell_to_central_point(hash), EventType, count_\\r\\n| render piechart with (kind=map) // map rendering available in Kusto Explorer desktop\\r\\n```\\r\\n\\r\\nThe following example shows how to classify coordinates to polygons using the [partition](./partitionoperator.md) operator.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA51U22rbQBB991csepJAUfZ+cckfhBIIFIoxZiMtjhJFK6RNXTfJv3dkXezUpC2xwdZoztzOmd3KBXTjq/3W1x26QoUN8L2rXFy4Lm/LJpS+XqIutGW9TVEzIJeo2Nf2qcyTBYLPCqHDf/TV7dB33z6ivAx7ZFtno3SCxi9R2DcuWqJorAe+KPe+LcraBteBZ7VaXSiWaYGxUVJIKlLEMdiKc2UIw4xQsk4RoHhGJOaScCqUJhOQU4O5VooaqeQMNFgqpukME8YwIbFWRgqiBxhUZfCGCE37KgNQEoihlFMqBCEz8O/trddvSTrwcetsCJX7JBNQOqNQiirFOFN9MZVJqMYwJYRBq+rQUo/jwhAsORdj7x8DlRBamCkdl9pwIEtJRbnmM4woSbEGDwYoH6CKSkm11JIwTmfkvzo8oePaduib29ruE1wQnpkUMZmxQVdCRMa50RTmJoMUvZNR0Bl0ZKCH+hAoYFOAKi4wpwSGGoFQghsDSiui1YAzmDJjwCKcSSKOwKmXYbz1l0UFB+na57Y/MO9PUuXrbRmeC7dEsAdViioAHe3xDB1+ezvud8yIJB0sWDDVG5eX6NY/ud29ax0qazSdtZO4Xg42x4ES8HwWN+7kaRgwRPQUB2MRmZzHzeL1w043xuIVNa1/cHmYroYb28JwwAFQEPxwb8SNzR/j6ORG6RfgaIHizSz++JQkfe452X1Zh+wJFqItbVX+csVVaJ/d8BqKgGO7v4KFKX84dLc/a+Yw7Qsa76lZpoP1itzP4OritCNoHmp3bvPQ+TqGOXJb2Tb+M22SZCdB77ON2P/PNL4aswy8b53fNB6G3JT1ZgQc9+m4SUfaxvBRlQu7szMbB9fbb4lZo3bxBQAA\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nlet Polygons = datatable(description:string, polygon:dynamic)\\r\\n    [  \\r\\n      \"New York city area\", dynamic({\"type\":\"Polygon\",\"coordinates\":[[[-73.85009765625,40.85744791303121],[-74.16046142578125,40.84290487729676],[-74.190673828125,40.59935608796518],[-73.83087158203125,40.61812224225511],[-73.85009765625,40.85744791303121]]]}),\\r\\n      \"Seattle area\",       dynamic({\"type\":\"Polygon\",\"coordinates\":[[[-122.200927734375,47.68573021131587],[-122.4591064453125,47.68573021131587],[-122.4755859375,47.468949677672484],[-122.17620849609374,47.47266286861342],[-122.200927734375,47.68573021131587]]]}),\\r\\n      \"Las Vegas\",          dynamic({\"type\":\"Polygon\",\"coordinates\":[[[-114.9,36.36],[-115.4498291015625,36.33282808737917],[-115.4498291015625,35.84453450421662],[-114.949951171875,35.902399875143615],[-114.9,36.36]]]}),\\r\\n    ];\\r\\nlet Locations = datatable(longitude:real, latitude:real)\\r\\n    [\\r\\n      real(-73.95),  real(40.75), // Somewhere in New York\\r\\n      real(-122.3),  real(47.6),  // Somewhere in Seattle\\r\\n      real(-115.18), real(36.16)  // Somewhere in Las Vegas\\r\\n    ];\\r\\nPolygons\\r\\n| project polygonPartition = tostring(pack(\"description\", description, \"polygon\", polygon))\\r\\n| partition hint.materialized=true hint.strategy=native by polygonPartition\\r\\n{   \\r\\n     Locations\\r\\n     | extend description = parse_json(toscalar(polygonPartition)).description\\r\\n     | extend polygon = parse_json(toscalar(polygonPartition)).polygon\\r\\n     | where geo_point_in_polygon(longitude, latitude, polygon)\\r\\n     | project-away polygon\\r\\n}\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|longitude|latitude|description|\\r\\n|---|---|---|\\r\\n|-73.95|40.75|New York city area|\\r\\n|-122.3|47.6|Seattle area|\\r\\n|-115.18|36.16|Las Vegas|\\r\\n\\r\\nSee also [geo_polygon_to_s2cells()](geo-polygon-to-s2cells-function.md).\\r\\n\\r\\nFolding several polygons into one multipolygon and querying it.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA6WaW4tcxxWF3/UrGr1YAxNR94tNHkIe/JJAICR5EEK0Zxq549HM0NOKUS7/Pd863VVnHxtjSBSIUffqOlV7r7322nX0cDjv/vT08OXj0+PL7re7Vzv+3O/P/O+7h8Ob58s3X+/uvzzuPx3vbpbv311Ql4/e/Ov1+cvz4fXXu9fXdV7f7l7fPT2d7o+P+/PhhW/evXv3mxrf9u5TcZc/PvrbXXJva/Q1tstnwZX3t7srNLScUve15uzbFepcC7kUl33MfoWWWsMFEXKK4fqAnFZELTGVlnMIrcUBra1E11srvcQLNL1lE8B6KiX2kNIV2qI+cC6X2v0K9cnHcQhX8jhEtTvrpffsKhu/LhZrLLG2wCFqXJG+hpRDcrH2OJBZH7nWo2eTK5TVtEDMPbd+habafOvFNZeqef6vx/v9+//c3P6v+cwtZvLDWXJplySxdCzd9VxibL7PrTSfYicpuaRwTVZptYTcEmHsORpkTq3mUFvLvQ0oSXGh82GywJIjYXC+uzyAUcFOlTT0YqAVNvnmiutphUKMUAlHKW2FBhdbJvip+ZEzoE0Rd56jmlVDKOSVX6SY+oCG3kogYzGkaqCRTfUKl0n8gDqe76ODgd5baHDd95pK7mPV2npKxdfOyhZKQHMMLeVayoDWXNhRqqnm7QYaR41QbC6avHcu8VmwVIxQOWb+n4hft8o2U87VU0axmMpLHgpGqquPTEHjTqV0H8VIs2ijRhRbB35AYXYlsNl1t4F2H+B+rC6HCUUGOrwoNQQD7WIQXyWKYUKJVIZsDWKYrZK8QrJcdnOrrRE6KpvSSfZQgTQ3dhv7ulVqUwEpmzV9LCWzA5iaJtL5Vp2v8N0uCnmIcyTTeYVW6Y20xpv4pwCzEbiYUppbVVhUsD1aJKGn/GCVqwMZyS8B8ahTt2sSAJjJKUapoAQQhV122GLCnx0ErLlJTEb4I8Xge4Fl0fAfKNnvRC8MIapUPUSHQBwpWaQnVxEGsfKEEmTqLEgvLJQdkBb2VQb9IqEiJjwJzTHyynEKJdVhTBlQSgWVJnWlmVWLl1pRE451B7RlVLT4ligXA1VTcMg0JTj32pfKJQ2uZbtqRU+QEU69Qqln+lD2FMxm1UXPQ0lpbCBR+r4V0lg3Yc2QnHMV7+u618qWOBaZrBtW1xTgYe4mWBRfJngu26ruhJuYeE/cJwMq54K/CJa3BUi0eA71sZ6KLJGAQmhitdAQtHJAIfxKAS/+qNnaWqV2UWqSmGZZwSvCRb3x32wVqEMAssUm5l4hK52CHGRbVyIRe6O71zw3AHOaBJjTWUfBjqi1RsnUsSpboa4LDdVbDmIO6DQBUZ09ACg4FJDHW2FDqapqPUuKr1CsAOGgK1BwdtUkSmVV96QAXEdEVbE0UgulC7EpiqvVCUX7Jd+uFBMBDlWldUj2SBblz5Ggd6s2VgG1ddIwtH0giVGQ4lZvyRqkdeQpKpkDSqxoyJ4TextV+BMrJAA9oVJ09pu1B7tT8kJ/kuz5uSoMIlbQdbMqFS/T5VobHgsoFU1rQfBtDwh0JMqnOT89jjYgrSB/5NtCUTU4VRw5m1DKFNtEcqxg4bsollQ9zB7axumRFfoC9WU24LAlVKEXl4YKsSEYyRIx2A2QvEJqsEjVTyT9r8hZIsNru8aC0q+IYUkT2sRxNKRhZUxnxzsudKVB5BErarfKTnp9s0LxkdQ2lHduKgsOlVIPXZypFkpYqECi2OeqlZNT8llO3GwgYMBU7Y4Gsa6KEGMN1XcslP3ALSo7z0UDrkIxdNEumuBQlmfDOU4oSrlEZFr2CxTJJfyhumHZtWrmb2K2dUEdnYSoyHWIad0qdUW++NhCSQnSxMlg84QqsyhI2+5VdUR7lXnPK5RcJbidrWVE2FA76hCTVSeUdpNVxpvCxpo5CsOrPc8N0AXYQ5H1M8pCd+UrZbzFda8qAH6QrGmGgigmKhLDmoGy9DGVcDMdA/1CBtqyxJpWwofHoGqchSKtfrFj1axaC7liBsF32OklQWp1efywiRUuVo3YznWUIOHDDrH2GiuNNJWeSXHZGqSu6Jr4mekv4AiRpRVSH3bSgqXMByhzNrGSE6BBUC4mVuSuyjkRgWgioEjraMVoG7nmAFVOomyOJXHmxHbVkGVl8Ew1rcGCDk3Kmrq3UDwvhRgQt3XViBGUQDVrcAigV8iTSL5CSSyStxUsuQXsfC40+VlayBAtM6q+bbBoTJAgBEI2I0BQSAmuJbnNrOlhZdbQtpY27hQXSR6NbZWroFwZPgjrVCHUkuJgmOndTI3ylxJHCDZ7FgYJviKCqKldVX5RXZB4X0ubYTRL3CgPhNhCETv2RQqHGQTaFxugplM2UK2r24NSB5Q+hq5JtVI2UHyPvKsa7NwAEuLEilyb3Sv9jaTI5Y72jtTE6CUYZMauGjASJBvvVeKEBvVNrLPbQH0a036aUMnoZdoPpr3Q8LwEG4aOwRFb0uQiiWCtthEwI8oiqEEOZFFOGbXJro2V6lIFT3HnCUU9I4aI39hG5GSnNX+HQeym6RK703RekywRWP0saQYdUNoA37ioQWmF4hCyBpWqeF+hDLIOv4HlS9FMzjBI7ULkGsYVb0DHx1vgXe3oXqiVplEDhRuxyqIFXY/4BrMq6kxfYUlZxQHVxYwaDgOohbJPt/j5Ohcl1dEvum+mnCbF5ciMZWZR+XaS0HTlZU8FpZe8hiGufKbbCFqRDLGFhqUVcerhhjkk5pJNRe/thQQIvFUOfjU4SzyoSrhetlD8ElqhET5OKFJXkBoE2m7A6VqOOiYEc1UOTvxR2L5JK/yjD9I1ZrniDBQ7WkY28xBWSgOOxpUwmjaxYudRIzHTuoF6lWwkftmEtWig5qCbEqCDqLAxE3S6uVXiFHUBYr0Yv9XlT2F6zCuSQpF3JwYbqGwyGtmHv+Lxtaik6TutWaQuaDRApZV/usAMuv8KWyRDMf6GsXA9ksbGBoetWGV1K+ZktprWQClZGGwa7AaKrPAYfh/jeiY1DLW3bmo166Zs2S/9bU0/uYsUTLFigevGr4jseeUfH3VdvrZt/mvRrW/QSF8nlIPSh7Im6M0GUCavoajPso5uOZiPyJ2FRlZAnNwcyAHpjlKuhfqxUBU2vExmVQ5JG9EIvCUAFoZ6I2JtxoreWTQo1bYJqxiJUJCAsIaVUZCWH7exglS6Y1suRSaUTF0cnlWAzBDEwSLqUFboEjzpV7XJQpOpS92ghLyymkIlgNkabGRV9gTBX3UV6qUqe04Fe5srfAHpcxp/J7Tq5p6ardY15yZfgTjArYFECkQKnm9be9adGPOnDOoKhcIIDU48pg1U9iBroEoTKrWNqm27qDquLtnl0gYSAdXJslzzJqiaZNRv6lxUtykkWqO7jZRf9so0FgxyuThAxu184Zf7IKmCr9fnaz7EqaWoDKxblVmN7vLi4GpCODWPUf/VjdpKFQ1RRZSXGwxXKM1qidRizye06Drmikgw4eocDO80K43HebW0C8LcVWp2JTHUTB9jKsynBikf3S+bx2V5O914YWXmqwLMAkWYVFfVIH/1rcL/9daCEaETeRol2j8EVU2r64Iasq50ShHuMBno1cW4i29BnqEs6m+uWNNyQ4f5hWuz8ih5zHqR1jm7Kk0LfmjEHc/XPXyoeqFB+g0S1Wryvppshv+Nul6Dq9qTgbIEMsuoUZodgaiHpClmTQXdRJcQanzzxQmCm8QCpMob8Rc06NpUXW3cQyBlCC9YscFAqRsShFct84qdnClraFGOdgP4eqggnQxjstNM4BQWVLkYKIFNmqxowGME0tU1WUFVKRgDDXKfXQ5uXsdTEDyocS5rlDDO0i5N8ev9Gtpe5cj5TbJ7dTI5mi3rjACFn5cXaYwQzUDpntJ/ze5jWtK9MZRgs8kSC41AwYrmsHkbrNkSousMNqzqUHqbsr6NSMx5gQFGhtAgUSS33JDrvdAVSkoJB5xhrlpLjBZLoS+9DnG6Qgl+jF3uywgK/hCBYu9YutH94RfHWV4dZKNo2AYZN5SKPjvfMen6RKMRx1ojtbyMY4iqi7e8QmXmyFZf7rhW6DIZ8zQ/b5g1feCeVKkuWTFCX3WnLL9yDVXWZR3SpBe95oKXqvS6n6f/uzGuy50REyYawrtGNXNU3ZZ0FHt6GnhNS0xJftFENblpenXJePkTbY38uvRcpO39N68eDufd71cB+/nL+Yenx4/H8+f7w9e702H/cLt72J83f78/vNydjs/no97gv5xPx8eP9gW+QG8u4Uj+5tqBPIXz1V+enw+n3d8OL+fdn4/3h69uf4In1Vc8VQz+29Ph8Pjj8e773V+PDw/7jz/7RcMV3Mzi5Rd/2H/7ec/R9rvfHU/PT6fzV/PMnz4/nI/Xf3jAoc9PL3f7h/3pzbLi+KcKy1/+vXs+Pf39cHfeHR/vj/843n/eP3xYf/m8v/vhw/502n8Z/47hrWkIN9clXj5/+rQ/Hf952Dz4w90m8p/2Pxw+PBxfzm9+/qSbn+zlJ/v/bv/xg3by5tKg6Ep/FOAXutTtL+7i5uabV4YOr/69+/H7w+mw+3h4YifHx/OH4+PY0kqNlRTblW/+C0aGcjj4IQAA\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nlet Polygons = \\r\\n    datatable(polygon:dynamic)\\r\\n    [\\r\\n        dynamic({\"type\":\"Polygon\",\"coordinates\":[[[-73.991460000000131,40.731738000000206],[-73.992854491775518,40.730082566051351],[-73.996772,40.725432000000154],[-73.997634685522883,40.725786309886963],[-74.002855946639244,40.728346630056791],[-74.001413,40.731065000000207],[-73.996796995070824,40.73736378205173],[-73.991724524037934,40.735245208931886],[-73.990703782359589,40.734781896080477],[-73.991460000000131,40.731738000000206]]]}),\\r\\n        dynamic({\"type\":\"Polygon\",\"coordinates\":[[[-73.958357552055688,40.800369095633819],[-73.98143901556422,40.768762584141953],[-73.981548752788598,40.7685590292784],[-73.981565335901905,40.768307084720796],[-73.981754418060945,40.768399727738668],[-73.982038573548124,40.768387823012056],[-73.982268248204349,40.768298621883247],[-73.982384797518051,40.768097213086911],[-73.982320919746599,40.767894461792181],[-73.982155532845766,40.767756204474757],[-73.98238873834039,40.767411004834273],[-73.993650353659021,40.772145571634361],[-73.99415893763998,40.772493009137818],[-73.993831082030937,40.772931787850908],[-73.993891252437052,40.772955194876722],[-73.993962585514595,40.772944653908901],[-73.99401262480508,40.772882846631894],[-73.994122058082397,40.77292405902601],[-73.994136652588594,40.772901870174394],[-73.994301342391154,40.772970028663913],[-73.994281535134448,40.77299380206933],[-73.994376552751078,40.77303955110149],[-73.994294029824005,40.773156243992048],[-73.995023275860802,40.773481196576356],[-73.99508939189289,40.773388475039134],[-73.995013963716758,40.773358035426909],[-73.995050284699261,40.773297153189958],[-73.996240651898916,40.773789791397689],[-73.996195837470992,40.773852356184044],[-73.996098807369748,40.773951805299085],[-73.996179459973888,40.773986954351571],[-73.996095245226442,40.774086186437756],[-73.995572265161172,40.773870731394297],[-73.994017424135961,40.77321375261053],[-73.993935876811335,40.773179512586211],[-73.993861942928888,40.773269531698837],[-73.993822393527211,40.773381758622882],[-73.993767019318497,40.773483981224835],[-73.993698463744295,40.773562141052594],[-73.993358326468751,40.773926888327956],[-73.992622663865575,40.774974056037109],[-73.992577842766124,40.774956016359418],[-73.992527743951555,40.775002110439829],[-73.992469745815342,40.775024159551755],[-73.992403837191887,40.775018140390664],[-73.99226708903538,40.775116033858794],[-73.99217809026365,40.775279293897171],[-73.992059084937338,40.775497598192516],[-73.992125372394938,40.775509075053385],[-73.992226867797001,40.775482211026116],[-73.992329346608813,40.775468900958522],[-73.992361756801131,40.775501899766638],[-73.992386042960277,40.775557180424634],[-73.992087684712729,40.775983970821372],[-73.990927174149746,40.777566878763238],[-73.99039616003671,40.777585065679204],[-73.989461267506471,40.778875124584417],[-73.989175778438053,40.779287524015778],[-73.988868617400072,40.779692922911607],[-73.988871874499793,40.779713738253008],[-73.989219022880576,40.779697895209402],[-73.98927785904425,40.779723439271038],[-73.989409054180143,40.779737706471963],[-73.989498614927044,40.779725044389757],[-73.989596493388234,40.779698146683387],[-73.989679812902509,40.779677568658038],[-73.989752702937935,40.779671244211556],[-73.989842247806507,40.779680752670664],[-73.990040102120489,40.779707677698219],[-73.990137977524839,40.779699769704784],[-73.99033584033225,40.779661794394983],[-73.990430598697046,40.779664973055503],[-73.990622199396725,40.779676064914298],[-73.990745069505479,40.779671328184051],[-73.990872114282197,40.779646007643876],[-73.990961672224358,40.779639683751753],[-73.991057472829539,40.779652352625774],[-73.991157429497036,40.779669775606465],[-73.991242817404469,40.779671367084504],[-73.991255318289745,40.779650782516491],[-73.991294887120119,40.779630209208889],[-73.991321967649895,40.779631796041372],[-73.991359455569423,40.779585883337383],[-73.991551059227476,40.779574821437407],[-73.99141982585985,40.779755280287233],[-73.988886144117032,40.779878898532999],[-73.988939656706265,40.779956178440393],[-73.988926103530844,40.780059292013632],[-73.988911680264692,40.780096037146606],[-73.988919261468567,40.780226094343945],[-73.988381050202634,40.780981074045783],[-73.988232413846987,40.781233144215555],[-73.988210420831663,40.781225482542055],[-73.988140000000143,40.781409000000224],[-73.988041288067166,40.781585961353777],[-73.98810029382463,40.781602878305286],[-73.988076449145055,40.781650935001608],[-73.988018059972219,40.781634188810422],[-73.987960792842145,40.781770987031535],[-73.985465811970457,40.785360700575431],[-73.986172704965611,40.786068452258647],[-73.986455862401996,40.785919219081421],[-73.987072345615601,40.785189638820121],[-73.98711901394276,40.785210319004058],[-73.986497781023601,40.785951202887254],[-73.986164628806279,40.786121882448327],[-73.986128422486075,40.786239001331111],[-73.986071135219746,40.786240706026611],[-73.986027274789123,40.786228964236727],[-73.986097637849426,40.78605822569795],[-73.985429321269592,40.785413942184597],[-73.985081137732209,40.785921935110366],[-73.985198833254501,40.785966552197777],[-73.985170502389906,40.78601333415817],[-73.985216218673656,40.786030501816427],[-73.98525509797993,40.785976205511588],[-73.98524273937646,40.785972572653328],[-73.98524962933017,40.785963139855845],[-73.985281779186749,40.785978620950075],[-73.985240032884533,40.786035858136792],[-73.985683885242182,40.786222123919686],[-73.985717529004575,40.786175994668795],[-73.985765660297687,40.786196274858618],[-73.985682871922691,40.786309786213067],[-73.985636270930442,40.786290150649279],[-73.985670722564691,40.786242911993817],[-73.98520511880038,40.786047669212785],[-73.985211035607492,40.786039554883686],[-73.985162639946992,40.786020999769754],[-73.985131636312062,40.786060297019972],[-73.985016964065125,40.78601423719563],[-73.984655078830457,40.786534741807841],[-73.985743787901043,40.786570082854738],[-73.98589227228328,40.786426529019593],[-73.985942854994988,40.786452847880334],[-73.985949561556794,40.78648711396653],[-73.985812373526713,40.786616865357047],[-73.985135209703174,40.78658761889551],[-73.984619428584324,40.786586016349787],[-73.981952458164173,40.790393724337193],[-73.972823037363767,40.803428052816756],[-73.971036786332192,40.805918478839672],[-73.966701,40.804169000000186],[-73.959647,40.801156000000113],[-73.958508540159471,40.800682279767472],[-73.95853274080838,40.800491362464697],[-73.958357552055688,40.800369095633819]]]}),\\r\\n        dynamic({\"type\":\"Polygon\",\"coordinates\":[[[-73.943592454622546,40.782747908206574],[-73.943648235390199,40.782656161333449],[-73.943870759887162,40.781273026571704],[-73.94345932494096,40.780048275653243],[-73.943213862652243,40.779317588660199],[-73.943004239504688,40.779639495474292],[-73.942716005450905,40.779544169476175],[-73.942712374762181,40.779214856940001],[-73.942535563208608,40.779090956062532],[-73.942893408188027,40.778614093246276],[-73.942438481745029,40.777315235766039],[-73.942244919522594,40.777104088947254],[-73.942074188038887,40.776917846977142],[-73.942002667222781,40.776185317382648],[-73.942620205199006,40.775180871576474],[-73.94285645694552,40.774796600349191],[-73.94293043781397,40.774676268036011],[-73.945870899588215,40.771692257932997],[-73.946618690150586,40.77093339256956],[-73.948664164778933,40.768857624399587],[-73.950069793030679,40.767025088383498],[-73.954418260786071,40.762184104951245],[-73.95650786241211,40.760285256574043],[-73.958787773424007,40.758213471309809],[-73.973015157270069,40.764278692864671],[-73.955760332998182,40.787906554459667],[-73.944023,40.782960000000301],[-73.943592454622546,40.782747908206574]]]}),\\r\\n    ];\\r\\nlet Coordinates = \\r\\n    datatable(longitude:real, latitude:real, description:string)\\r\\n    [\\r\\n        real(-73.9741), 40.7914, \\'Upper West Side\\',\\r\\n        real(-73.9950), 40.7340, \\'Greenwich Village\\',\\r\\n        real(-73.8743), 40.7773, \\'LaGuardia Airport\\',\\r\\n    ];\\r\\nlet multipolygon = toscalar(\\r\\n    Polygons\\r\\n    | project individual_polygon = pack_array(polygon.coordinates)\\r\\n    | summarize multipolygon_coordinates = make_list(individual_polygon)\\r\\n    | project multipolygon = bag_pack(\"type\",\"MultiPolygon\", \"coordinates\", multipolygon_coordinates));\\r\\nCoordinates\\r\\n| where geo_point_in_polygon(longitude, latitude, multipolygon)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|longitude|latitude|description|\\r\\n|---|---|---|\\r\\n|-73.9741|40.7914|Upper West Side|\\r\\n|-73.995|40.734|Greenwich Village|\\r\\n\\r\\nThe following example will return a null result because of the invalid coordinate input.\\r\\n\\r\\n```\\r\\nprint in_polygon = geo_point_in_polygon(200,1,dynamic({\"type\": \"Polygon\",\"coordinates\": [[[0,0],[10,10],[10,1],[0,0]]]}))\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n| in_polygon |\\r\\n|------------|\\r\\n|            |\\r\\n\\r\\nThe following example will return a null result because of the invalid polygon input.\\r\\n\\r\\n```\\r\\nprint in_polygon = geo_point_in_polygon(1,1,dynamic({\"type\": \"Polygon\",\"coordinates\": [[[0,0],[10,10],[10,10],[0,0]]]}))\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n| in_polygon |\\r\\n|------------|\\r\\n|            |',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/geo-point-in-polygon-function\",\"geo-point-in-polygon-function.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"geo_point_to_geohash\",\"Calculates the geohash string value of a geographic location.\",\"Read more about [geohash](https://en.wikipedia.org/wiki/Geohash).  \\r\\n\\r\\n## Syntax\\r\\n\\r\\n`geo_point_to_geohash(`*longitude*`,` *latitude*`,`[ *accuracy* ]`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n|Name|Type|Required|Description|\\r\\n|--|--|--|--|\\r\\n| *longitude* | real | &check; | Geospatial coordinate, longitude value in degrees. Valid value is a real number and in the range [-180, +180].|\\r\\n| *latitude* | real | &check; | Geospatial coordinate, latitude value in degrees. Valid value is a real number and in the range [-90, +90].|\\r\\n| *accuracy* | int | | Defines the requested accuracy. Supported values are in the range [1, 18]. If unspecified, the default value `5` is used.|\\r\\n\\r\\n## Returns\\r\\n\\r\\nThe geohash string value of a given geographic location with requested accuracy length. If the coordinate or accuracy is invalid, the query will produce an empty result.\\r\\n\\r\\n> [!NOTE]\\r\\n>\\r\\n> * Geohash can be a useful geospatial clustering tool.\\r\\n> * Geohash has 18 accuracy levels with area coverage ranging from 25 Million km\\u00b2 at the highest level 1 to 0.6 \\u03bc\\u00b2 at the lowest level 18.\\r\\n> * Common prefixes of geohash indicate proximity of points to each other. The longer a shared prefix is, the closer the two places are. Accuracy value translates to geohash length.\\r\\n> * Geohash is a rectangular area on a plane surface.\\r\\n> * Invoking the [geo_geohash_to_central_point()](geo-geohash-to-central-point-function.md) function on a geohash string that was calculated on longitude x and latitude y won't necessarily return x and y.\\r\\n> * Due to the geohash definition, it's possible that two geographic locations are very close to each other but have different geohash codes.\\r\\n\\r\\n**Geohash rectangular area coverage per accuracy value:**\\r\\n\\r\\n| Accuracy | Width     | Height    |\\r\\n|----------|-----------|-----------|\\r\\n| 1        | 5000 km   | 5000 km   |\\r\\n| 2        | 1250 km   | 625 km    |\\r\\n| 3        | 156.25 km | 156.25 km |\\r\\n| 4        | 39.06 km  | 19.53 km  |\\r\\n| 5        | 4.88 km   | 4.88 km   |\\r\\n| 6        | 1.22 km   | 0.61 km   |\\r\\n| 7        | 152.59 m  | 152.59 m  |\\r\\n| 8        | 38.15 m   | 19.07 m   |\\r\\n| 9        | 4.77 m    | 4.77 m    |\\r\\n| 10       | 1.19 m    | 0.59 m    |\\r\\n| 11       | 149.01 mm | 149.01 mm |\\r\\n| 12       | 37.25 mm  | 18.63 mm  |\\r\\n| 13       | 4.66 mm   | 4.66 mm   |\\r\\n| 14       | 1.16 mm   | 0.58 mm   |\\r\\n| 15       | 145.52 \\u03bc  | 145.52 \\u03bc  |\\r\\n| 16       | 36.28 \\u03bc   | 18.19 \\u03bc   |\\r\\n| 17       | 4.55 \\u03bc    | 4.55 \\u03bc    |\\r\\n| 18       | 1.14 \\u03bc    | 0.57 \\u03bc    |\\r\\n\\r\\nSee also [geo_point_to_s2cell()](geo-point-to-s2cell-function.md), [geo_point_to_h3cell()](geo-point-to-h3cell-function.md).\\r\\n\\r\\nFor comparison with other available grid systems, see [geospatial clustering with Kusto Query Language](geospatial-grid-systems.md).\",'US storm events aggregated by geohash.\\r\\n\\r\\n![US geohash.](images/geo-point-to-geohash-function/geohash.png)\\r\\n\\r\\n```\\r\\nStormEvents\\r\\n| project BeginLon, BeginLat\\r\\n| summarize by hash=geo_point_to_geohash(BeginLon, BeginLat, 3)\\r\\n| project geo_geohash_to_central_point(hash)\\r\\n| render scatterchart with (kind=map)\\r\\n```\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAysoyswrUUhPzc9ILM5QsAWx4gvygWLxJfnxUGENQ2NLPQsDM0NDUx0FY1M9U1MTQyMLHQVDI00Aj1DetD8AAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint geohash = geo_point_to_geohash(139.806115, 35.554128, 12)  \\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n| geohash      |\\r\\n|--------------|\\r\\n| xn76m27ty9g4 |\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAysoyswrUUhPzc9ILM5QsAWx4gvygWLxJfnxUGENXQsDPUNLUwsjSx0FI1M9CwMjI0NTHQULTQB7u14ZPgAAAA==\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint geohash = geo_point_to_geohash(-80.195829, 25.802215, 8)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|geohash|\\r\\n|---|\\r\\n|dhwfz15h|\\r\\n\\r\\nThe following example finds groups of coordinates. Every pair of coordinates in the group resides in a rectangular area of 4.88 km by 4.88 km.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA42Qy07DMBBF9/mKUVeJZNo0ceJSqYvCZyBkuY2bWDieyI8FiI/H5EEQLGBmMfbozFncRvjYFy1TjVfhFRqumiM4b5VpCWg0rfKhkUewUui4iMz6z5KnBGJtzhsCDYZPz92+KLZlXtKcZgQo21Ysp4eCTODDL5AyWs1gzfJqAR9/gAU77Kt6Aev7sibJc/IOLvS9sOpNjmdXDMbDaZpppP9dux0oL3sHg7TQWgzDJBm1SzYuqnvxIrlWzn9PLPtTqwz4Tk7m0Xl5hVZiJ1wXpfHFB1TGc498Xqdf4a+xZ7NzucTbav0AhjDhi8sBAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\ndatatable(location_id:string, longitude:real, latitude:real)\\r\\n[\\r\\n  \"A\", double(-122.303404), 47.570482,\\r\\n  \"B\", double(-122.304745), 47.567052,\\r\\n  \"C\", double(-122.278156), 47.566936,\\r\\n]\\r\\n| summarize count = count(),                                          // items per group count\\r\\n            locations = make_list(location_id)                        // items in the group\\r\\n            by geohash = geo_point_to_geohash(longitude, latitude)    // geohash of the group\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n| geohash | count | locations  |\\r\\n|---------|-------|------------|\\r\\n| c23n8   | 2     | [\"A\", \"B\"] |\\r\\n| c23n9   | 1     | [\"C\"]      |\\r\\n\\r\\nThe following example produces an empty result because of the invalid coordinate input.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAysoyswrUUhPzc9ILM5QsAWx4gvygWLxJfnxUGENIwMDHUMdC00AvfV/vi0AAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint geohash = geo_point_to_geohash(200,1,8)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n| geohash |\\r\\n|---------|\\r\\n|         |\\r\\n\\r\\nThe following example produces an empty result because of the invalid accuracy input.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAysoyswrUUhPzc9ILM5QsAWx4gvygWLxJfnxUGENQx1DHaCQRl5pTo6mJgCmJkAVMwAAAA==\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint geohash = geo_point_to_geohash(1,1,int(null))\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n| geohash |\\r\\n|---------|\\r\\n|         |',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/geo-point-to-geohash-function\",\"geo-point-to-geohash-function.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"geo_point_to_h3cell\",\"Calculates the H3 Cell token string value of a geographic location.\",\"Read more about [H3 Cell](https://eng.uber.com/h3/).\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`geo_point_to_h3cell(`*longitude*`,` *latitude*`,` [ *resolution* ]`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n|Name|Type|Required|Description|\\r\\n|--|--|--|--|\\r\\n| *longitude* | real | &check; | Geospatial coordinate, longitude value in degrees. Valid value is a real number and in the range [-180, +180].|\\r\\n| *latitude* | real | &check; | Geospatial coordinate, latitude value in degrees. Valid value is a real number and in the range [-90, +90].|\\r\\n| *resolution* | int | | Defines the requested cell resolution. Supported values are in the range [0, 15]. If unspecified, the default value `6` is used.|\\r\\n\\r\\n## Returns\\r\\n\\r\\nThe H3 Cell token string value of a given geographic location. If the coordinates or levels are invalid, the query will produce an empty result.\\r\\n\\r\\n> [!NOTE]\\r\\n>\\r\\n> * H3 Cell can be a useful geospatial clustering tool.\\r\\n> * H3 Cell has 16 levels of hierarchy with area coverage ranging from 4,250,547km\\u00b2 at the highest level 0 to 0.9m\\u00b2 at the lowest level 15.\\r\\n> * H3 Cell has a unique hexagon shape and this leads some unique properties:\\r\\n> * Hexagons have 6 neighbors\\r\\n> * Hexagons allow us to approximate radiuses easily and all neighbors are equidistant\\r\\n> * Hexagons are visually pleasant\\r\\n> * In some rare cases the shape is pentagon.\\r\\n> * H3 Cell has a rectangular area on a plane surface.\\r\\n> * Invoking the [geo_h3cell_to_central_point()](geo-h3cell-to-central-point-function.md) function on an H3 Cell token string that was calculated on longitude x and latitude y won't necessarily return x and y.\\r\\n> * It's possible that two geographic locations are very close to each other but have different H3 Cell tokens.\\r\\n\\r\\n**H3 Cell approximate area coverage per resolution value**\\r\\n\\r\\n|Level|Average Hexagon Edge Length|\\r\\n|--|--|\\r\\n|0|1108 km|\\r\\n|1|419 km|\\r\\n|2|158 km|\\r\\n|3|60 km|\\r\\n|4|23 km|\\r\\n|5|8 km|\\r\\n|6|3 km|\\r\\n|7|1 km|\\r\\n|8|460 m|\\r\\n|9|174 m|\\r\\n|10|66 m|\\r\\n|11|25 m|\\r\\n|12|9 m|\\r\\n|13|3 m|\\r\\n|14|1 m|\\r\\n|15|0.5 m|\\r\\n\\r\\nThe table source can be found [in this H3 Cell statistical resource](https://h3geo.org/docs/core-library/restable/).\\r\\n\\r\\nSee also [geo_point_to_s2cell()](geo-point-to-s2cell-function.md), [geo_point_to_geohash()](geo-point-to-geohash-function.md).\\r\\n\\r\\nFor comparison with other available grid systems. see [geospatial clustering with Kusto Query Language](geospatial-grid-systems.md).\",'> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAysoyswrUcgwTk7NyVGwVUhPzY8vyAcKxZfkx0NENXTNTfQMTExMgdjMwNjSwtxER8HEQM/MwtLI1MDC1NLY0MQSJGamCQB924YeTQAAAA==\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint h3cell = geo_point_to_h3cell(-74.04450446039874, 40.689250859314974, 6)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|h3cell|\\r\\n|---|\\r\\n|862a1072fffffff|\\r\\n\\r\\nThe following example finds groups of coordinates. Every pair of coordinates in the group resides in the H3 Cell with average hexagon area of 253 km\\u00b2.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA42QsU7DMBCGdz/FqVMimTbBaexUYoAu8AwIWWlypBaOHdnOAOLhMTVpywTnwTp/5++kv29DPAeNmbZdG5Q1UvU7H5wyAwVtzaDC3OPOYatjHyfObU6eCcRa3a8o3HC2brZ1LRiFqliLgjcFp4k/LLysRd0kXgpWVj98v3DRlJU4cV6xW84oeSGf4OdxbJ36QOjsbALcpTvLKfy3Nht4Cjh6mNDB4Ow8JQe5HloC8HHD2L6h1MqH61jyv+zKQDhiWvBLfXiHI+tQ66ge0MrJKhNksDK9ZuecLxFT2OYn9SOD/fdP+3qRfwFmTm29tgEAAA==\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\ndatatable(location_id:string, longitude:real, latitude:real)\\r\\n[\\r\\n    \"A\", -73.956683, 40.807907,\\r\\n    \"B\", -73.916869, 40.818314,\\r\\n    \"C\", -73.989148, 40.743273,\\r\\n]\\r\\n| summarize count = count(),                                         // Items per group count\\r\\n            locations = make_list(location_id)                       // Items in the group\\r\\n            by h3cell = geo_point_to_h3cell(longitude, latitude, 5)  // H3 Cell of the group\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|h3cell|count|locations|\\r\\n|---|---|---|\\r\\n|852a100bfffffff|2|[<br>  \"A\",<br>  \"B\"<br>]|\\r\\n|852a1073fffffff|1|[<br>  \"C\"<br>]|\\r\\n\\r\\nThe following example produces an empty result because of the invalid coordinate input.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAysoyswrUcgwTk7NyVGwVUhPzY8vyAcKxZfkx0NENYwNDHQMdSw0Ab7tXHErAAAA\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint h3cell = geo_point_to_h3cell(300,1,8)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|h3cell|\\r\\n|---|\\r\\n||\\r\\n\\r\\nThe following example produces an empty result because of the invalid level input.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAysoyswrUcgwTk7NyVGwVUhPzY8vyAcKxZfkx0NENQx1gNBMEwAbZ3TmKgAAAA==\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint h3cell = geo_point_to_h3cell(1,1,16)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|h3cell|\\r\\n|---|\\r\\n||\\r\\n\\r\\nThe following example produces an empty result because of the invalid level input.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAysoyswrUcgwTk7NyVGwVUhPzY8vyAcKxZfkx0NENQx1DHWAIhp5pTk5mpoAkLg/djEAAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint h3cell = geo_point_to_h3cell(1,1,int(null))\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|h3cell|\\r\\n|---|\\r\\n||',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/geo-point-to-h3cell-function\",\"geo-point-to-h3cell-function.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"geo_point_to_s2cell\",\"Calculates the S2 cell token string value of a geographic location.\",\"S2 Cell can be a useful geospatial clustering tool. The S2 Cell is a cell on a spherical surface and its edges are geodesics. S2 Cell has 31 levels of hierarchy with area coverage ranging from 85,011,012.19km\\u00b2 at the highest level of 0 to 0.44 cm\\u00b2 at the lowest level of 30. S2 Cell preserves the cell center well during level increase from 0 to 30. Two geographic locations can be very close to each other but have different S2 cell tokens.\\r\\n\\r\\n>[!NOTE]\\r\\n> If you invoke the [geo_s2cell_to_central_point()](geo-s2cell-to-central-point-function.md) function on an S2 cell token string that was calculated on longitude x and latitude y, the function won't necessarily return x and y.\\r\\n\\r\\nRead more about [S2 cell hierarchy](https://s2geometry.io/devguide/s2cell_hierarchy).\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`geo_point_to_s2cell(`*longitude*`,` *latitude*`,` [ *level* ]`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n|Name|Type|Required|Description|\\r\\n|--|--|--|--|\\r\\n| *longitude* | real | &check; | Geospatial coordinate, longitude value in degrees. Valid value is a real number and in the range [-180, +180].|\\r\\n| *latitude* | real | &check; | Geospatial coordinate, latitude value in degrees. Valid value is a real number and in the range [-90, +90].|\\r\\n| *level* | int | | Defines the requested cell level. Supported values are in the range [0, 30]. If unspecified, the default value `11` is used.|\\r\\n\\r\\n## Returns\\r\\n\\r\\nThe S2 cell token string value of a given geographic location. If the coordinates or levels are invalid, the query will produce an empty result.\\r\\n\\r\\n## S2 Cell approximate area coverage per level value\\r\\n\\r\\nFor every level, the size of the S2 Cell is similar but not exactly equal. Nearby cell sizes tend to be more equal.\\r\\n\\r\\n|Level|Minimum random cell edge length (UK)|Maximum random cell edge length (US)|\\r\\n|--|--|--|\\r\\n|0|7842 km|7842 km|\\r\\n|1|3921 km|5004 km|\\r\\n|2|1825 km|2489 km|\\r\\n|3|840 km|1310 km|\\r\\n|4|432 km|636 km|\\r\\n|5|210 km|315 km|\\r\\n|6|108 km|156 km|\\r\\n|7|54 km|78 km|\\r\\n|8|27 km|39 km|\\r\\n|9|14 km|20 km|\\r\\n|10|7 km|10 km|\\r\\n|11|3 km|5 km|\\r\\n|12|1699 m|2 km|\\r\\n|13|850 m|1225 m|\\r\\n|14|425 m|613 m|\\r\\n|15|212 m|306 m|\\r\\n|16|106 m|153 m|\\r\\n|17|53 m|77 m|\\r\\n|18|27 m|38 m|\\r\\n|19|13 m|19 m|\\r\\n|20|7 m|10 m|\\r\\n|21|3 m|5 m|\\r\\n|22|166 cm|2 m|\\r\\n|23|83 cm|120 cm|\\r\\n|24|41 cm|60 cm|\\r\\n|25|21 cm|30 cm|\\r\\n|26|10 cm|15 cm|\\r\\n|27|5 cm|7 cm|\\r\\n|28|2 cm|4 cm|\\r\\n|29|12 mm|18 mm|\\r\\n|30|6 mm|9 mm|\\r\\n\\r\\nThe table source can be found [in this S2 Cell statistical resource](https://s2geometry.io/resources/s2cell_statistics).\\r\\n\\r\\nFor comparison with other available grid systems, see [geospatial clustering with Kusto Query Language](geospatial-grid-systems.md).\",'### US storm events aggregated by S2 Cell\\r\\n\\r\\n![US s2cell.](images/geo-point-to-s2cell-function/s2cell.png)\\r\\n\\r\\n```\\r\\nStormEvents\\r\\n| project BeginLon, BeginLat\\r\\n| summarize by hash=geo_point_to_s2cell(BeginLon, BeginLat, 5)\\r\\n| project geo_s2cell_to_central_point(hash)\\r\\n| render scatterchart with (kind=map)\\r\\n```\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAysoyswrUSg2Sk7NyVGwVUhPzY8vyAcKxZfkx0NENXQtDPQMLU0tjCx1FIxM9SwMjIwMTXUULDQBug9pJTwAAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint s2cell = geo_point_to_s2cell(-80.195829, 25.802215, 8)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n| s2cell |\\r\\n|--------|\\r\\n| 88d9b  |\\r\\n\\r\\n### Find a group of coordinates\\r\\n\\r\\nThe following example finds groups of coordinates. Every pair of coordinates in the group resides in the S2 cell with a maximum area of 1632.45 km\\u00b2.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA42QzWrDMAyA73kK0VMCpj9J/1boYdtjlGLcRE3FHCvYymFjD1+3Zml32qyD0Yf0CakxEuNkMbdcGyF2mppdEE+uVWDZtSRDgzuPxsY8VoxpkR0ygMnrRMFiPl2U1VLBqlI39pZYtdq8jOw9sfV2WSZ2zL4hDF1nPH0h1Dw4gX3680LBP99sBiTYBejRQ+t56JMiey762S3EAZ35QG0pyPPGxR9yciAXTP5f5tMnhLJGa6O5RdY9kxMtrBPNxws+jqdgW9zMoYR7I58f7itUpqIvjwEAAA==\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\ndatatable(location_id:string, longitude:real, latitude:real)\\r\\n[\\r\\n  \"A\", 10.1234, 53,\\r\\n  \"B\", 10.3579, 53,\\r\\n  \"C\", 10.6842, 53,\\r\\n]\\r\\n| summarize count = count(),                                        // items per group count\\r\\n            locations = make_list(location_id)                      // items in the group\\r\\n            by s2cell = geo_point_to_s2cell(longitude, latitude, 8) // s2 cell of the group\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n| s2cell | count | locations |\\r\\n|--------|-------|-----------|\\r\\n| 47b1d  | 2     | [\"A\",\"B\"] |\\r\\n| 47ae3  | 1     | [\"C\"]     |\\r\\n\\r\\n### Empty results\\r\\n\\r\\nThe following example produces an empty result because of the invalid coordinate input.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAysoyswrUSg2Sk7NyVGwVUhPzY8vyAcKxZfkx0NENYwNDHQMdSw0AU8vTgcrAAAA\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint s2cell = geo_point_to_s2cell(300,1,8)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n| s2cell |\\r\\n|--------|\\r\\n|        |\\r\\n\\r\\nThe following example produces an empty result because of the invalid level input.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAysoyswrUSg2Sk7NyVGwVUhPzY8vyAcKxZfkx0NENQx1DHWMTTUB9oFeACoAAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint s2cell = geo_point_to_s2cell(1,1,35)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n| s2cell |\\r\\n|--------|\\r\\n|        |\\r\\n\\r\\nThe following example produces an empty result because of the invalid level input.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAysoyswrUSg2Sk7NyVGwVUhPzY8vyAcKxZfkx0NENQx1DHWAIhp5pTk5mpoAYUJIkTEAAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint s2cell = geo_point_to_s2cell(1,1,int(null))\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n| s2cell |\\r\\n|--------|\\r\\n|        |\\r\\n\\r\\n## See also\\r\\n\\r\\n* [geo_point_to_geohash()](geo-point-to-geohash-function.md)\\r\\n* [geo_point_to_h3cell()](geo-point-to-h3cell-function.md)',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/geo-point-to-s2cell-function\",\"geo-point-to-s2cell-function.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"geo_polygon_area\",\"Calculates the area of a polygon or a multipolygon on Earth.\",'## Syntax\\r\\n\\r\\n`geo_polygon_area(`*polygon*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n|Name|Type|Required|Description|\\r\\n|--|--|--|--|\\r\\n| *polygon* | dynamic | &check; | Polygon or multipolygon in the [GeoJSON format](https://tools.ietf.org/html/rfc7946).|\\r\\n\\r\\n## Returns\\r\\n\\r\\nThe area of a polygon or a multipolygon, in square meters, on Earth. If the polygon or the multipolygon is invalid, the query will produce a null result.\\r\\n\\r\\n> [!NOTE]\\r\\n>\\r\\n> * The geospatial coordinates are interpreted as represented by the [WGS-84](https://earth-info.nga.mil/index.php?dir=wgs84&action=wgs84) coordinate reference system.\\r\\n> * The [geodetic datum](https://en.wikipedia.org/wiki/Geodetic_datum) used for measurements on Earth is a sphere. Polygon edges are [geodesics](https://en.wikipedia.org/wiki/Geodesic) on the sphere.\\r\\n> * If input polygon edges are straight cartesian lines, consider using [geo_polygon_densify()](geo-polygon-densify-function.md) to convert planar edges to geodesics.\\r\\n> * If input is a multipolygon and contains more than one polygon, the result will be the area of polygons union.\\r\\n\\r\\n**Polygon definition and constraints**\\r\\n\\r\\ndynamic({\"type\": \"Polygon\",\"coordinates\": [ LinearRingShell, LinearRingHole_1, ..., LinearRingHole_N ]})\\r\\n\\r\\ndynamic({\"type\": \"MultiPolygon\",\"coordinates\": [[ LinearRingShell, LinearRingHole_1, ..., LinearRingHole_N ], ..., [LinearRingShell, LinearRingHole_1, ..., LinearRingHole_M]]})\\r\\n\\r\\n* LinearRingShell is required and defined as a `counterclockwise` ordered array of coordinates [[lng_1,lat_1],...,[lng_i,lat_i],...,[lng_j,lat_j],...,[lng_1,lat_1]]. There can be only one shell.\\r\\n* LinearRingHole is optional and defined as a `clockwise` ordered array of coordinates [[lng_1,lat_1],...,[lng_i,lat_i],...,[lng_j,lat_j],...,[lng_1,lat_1]]. There can be any number of interior rings and holes.\\r\\n* LinearRing vertices must be distinct with at least three coordinates. The first coordinate must be equal to the last. At least four entries are required.\\r\\n* Coordinates [longitude, latitude] must be valid. Longitude must be a real number in the range [-180, +180] and latitude must be a real number in the range [-90, +90].\\r\\n* LinearRingShell encloses at most half of the sphere. LinearRing divides the sphere into two regions. The smaller of the two regions will be chosen.\\r\\n* LinearRing edge length must be less than 180 degrees. The shortest edge between the two vertices will be chosen.\\r\\n* LinearRings must not cross and must not share edges. LinearRings may share vertices.','The following example calculates NYC Central Park area.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA02Py2rDMBBF9/0Ko1UCbpA0modS+g/dG2OEI4KpKxlVG1P6741rDFkN3Dlc7pljbcaYagnzsITy2bw3tzWFr2k8/ai6LlFd1Uee13tOqlVjzuU2pVDjt7p2XffKcPHOY+v0hT35vt0jFM2WyAIC2u0pWpOQBiTjrTkwsdp4Z50DcfLfQWKR2IJGZj4wBsMi9KhC8DvmEA0Q6u0c2POOvv89v70sZUq1CSWGh9Y95mHZTYYtOj1rn/8Au8DFaggBAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nlet central_park = dynamic({\"type\":\"Polygon\",\"coordinates\":[[[-73.9495,40.7969],[-73.95807266235352,40.80068603561921],[-73.98201942443848,40.76825672305777],[-73.97317886352539,40.76455136505513],[-73.9495,40.7969]]]});\\r\\nprint area = geo_polygon_area(central_park)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|area|\\r\\n|---|\\r\\n|3475207.28346606|\\r\\n\\r\\nThe following example performs union of polygons in multipolygon and calculates area on the unified polygon.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA4WRzWrDMAyA73uKklMLXZFl669jjzDYfZQS2lACWRLS9BDG3n1qvbS7TReD9Fn+ZDXVuOi7Zjp17XnxujhObflZH5ZfxTj1VbEt3i7NWL9noFgXh64bjnVbjtW52H54PEvcWDJaJ9iIse3WOUUKgswYKRJeiwrAyhCJg2GYMUUIljClqElvPViRWDACiciMSQyiyt6KomUsEYXIBNdjxv567Dw566F7BH8BReINEDILComYSOkuE0AI1TUJM+dQskCUWNjunDGAmzMzBM79wGdSvxvsIc3B7VRNDSnPRgzmADFHvn/Bv3Ye36uXp36o28eu9pe27tp9OVSlr+1Udfvfyi21nLHVD9mabgXgAQAA\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nlet polygons = dynamic({\"type\":\"MultiPolygon\",\"coordinates\":[[[[-73.9495,40.7969],[-73.95807266235352,40.80068603561921],[-73.98201942443848,40.76825672305777],[-73.97317886352539,40.76455136505513],[-73.9495,40.7969]]],[[[-73.94262313842773,40.775991804565585],[-73.98107528686523,40.791849155467695],[-73.99600982666016,40.77092185281977],[-73.96150588989258,40.75609977566361],[-73.94262313842773,40.775991804565585]]]]});\\r\\nprint polygons_union_area = geo_polygon_area(polygons)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|polygons_union_area|\\r\\n|---|\\r\\n|10889971.5343487|\\r\\n\\r\\nThe following example calculates top 5 biggest US states by area.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAwsNjg8uSSxJLeaqUSgoys9KTS5RyEvMTVWwVUhLTSwpLUot1gOKF6QWlWQCmX6Ovq46CgX5OZXp+XlANemp+fFQXnxKal5xZlqlBlwfUDI3taSoUhPNbB2FxKLURDTdICENKAekoSS/QMFUIakSojYltTgZAArmjpSrAAAA\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nUS_States\\r\\n| project name = features.properties.NAME, polygon = geo_polygon_densify(features.geometry)\\r\\n| project name, area = geo_polygon_area(polygon)\\r\\n| top 5 by area desc\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|name|area|\\r\\n|---|---|\\r\\n|Alaska|1550934810070.61|\\r\\n|Texas|693231378868.483|\\r\\n|California|410339536449.521|\\r\\n|Montana|379583933973.436|\\r\\n|New Mexico|314979912310.579|\\r\\n\\r\\nThe following example returns True because of the invalid polygon.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAysoyswrUcgszivNydFIT82PL8jPqUzPz4tPLEpN1EipzEvMzUzWqFYqqSxIVbJSUAqASCvpKCXn5xelZOYllqQWAyWio6MNdAxidaINDXQMkWmQaGxsraamJgCVD2IfawAAAA==\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint isnull(geo_polygon_area(dynamic({\"type\": \"Polygon\",\"coordinates\": [[[0,0],[10,10],[10,10],[0,0]]]})))\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|print_0|\\r\\n|---|\\r\\n|True|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/geo-polygon-area-function\",\"geo-polygon-area-function.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"geo_polygon_buffer\",\"Calculates polygon or multipolygon that contains all points within the given radius of the input polygon or multipolygon on Earth.\",'## Syntax\\r\\n\\r\\n`geo_polygon_buffer(`*polygon*`,` *radius*`,` *tolerance*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n|Name|Type|Required|Description|\\r\\n|--|--|--|--|\\r\\n| *polygon* | dynamic | &check; | Polygon or multipolygon in the [GeoJSON format](https://tools.ietf.org/html/rfc7946).|\\r\\n| *radius* | real | &check; | Buffer radius in meters. Valid value must be positive.|\\r\\n| *tolerance* | real || Defines the tolerance in meters that determines how much a polygon can deviate from the ideal radius. If unspecified, the default value `10` is used. Tolerance should be no lower than 0.0001% of the radius. Specifying tolerance bigger than radius will lower the tolerance to biggest possible value below the radius.|\\r\\n\\r\\n## Returns\\r\\n\\r\\nPolygon or MultiPolygon around the input Polygon or multipolygon. If the coordinates or radius or tolerance is invalid, the query will produce a null result.\\r\\n\\r\\n> [!NOTE]\\r\\n>\\r\\n> * The geospatial coordinates are interpreted as represented by the [WGS-84](https://earth-info.nga.mil/index.php?dir=wgs84&action=wgs84) coordinate reference system.\\r\\n> * The [geodetic datum](https://en.wikipedia.org/wiki/Geodetic_datum) used for measurements on Earth is a sphere. Polygon edges are [geodesics](https://en.wikipedia.org/wiki/Geodesic) on the sphere.\\r\\n> * If input polygon edges are straight cartesian lines, consider using [geo_polygon_densify()](geo-polygon-densify-function.md) to convert planar edges to geodesics.\\r\\n\\r\\n**Polygon definition and constraints**\\r\\n\\r\\ndynamic({\"type\": \"Polygon\",\"coordinates\": [LinearRingShell, LinearRingHole_1, ..., LinearRingHole_N]})\\r\\n\\r\\ndynamic({\"type\": \"MultiPolygon\",\"coordinates\": [[LinearRingShell, LinearRingHole_1, ..., LinearRingHole_N], ..., [LinearRingShell, LinearRingHole_1, ..., LinearRingHole_M]]})\\r\\n\\r\\n* LinearRingShell is required and defined as a `counterclockwise` ordered array of coordinates [[lng_1,lat_1], ..., [lng_i,lat_i], ...,[lng_j,lat_j], ...,[lng_1,lat_1]]. There can be only one shell.\\r\\n* LinearRingHole is optional and defined as a `clockwise` ordered array of coordinates [[lng_1,lat_1], ...,[lng_i,lat_i], ...,[lng_j,lat_j], ...,[lng_1,lat_1]]. There can be any number of interior rings and holes.\\r\\n* LinearRing vertices must be distinct with at least three coordinates. The first coordinate must be equal to the last. At least four entries are required.\\r\\n* Coordinates [longitude, latitude] must be valid. Longitude must be a real number in the range [-180, +180] and latitude must be a real number in the range [-90, +90].\\r\\n* LinearRingShell encloses at most half of the sphere. LinearRing divides the sphere into two regions. The smaller of the two regions will be chosen.\\r\\n* LinearRing edge length must be less than 180 degrees. The shortest edge between the two vertices will be chosen.\\r\\n* LinearRings must not cross and must not share edges. LinearRings may share vertices.\\r\\n* Polygon contains its vertices.','The following query calculates polygon around input polygon, with radius of 10km.\\r\\n\\r\\n```\\r\\nlet polygon = dynamic({\"type\":\"Polygon\",\"coordinates\":[[[139.813757,35.719666],[139.72558,35.71813],[139.727471,35.653231],[139.818721,35.657264],[139.813757,35.719666]]]});\\r\\nprint buffer = geo_polygon_buffer(polygon, 10000)\\r\\n```\\r\\n\\r\\n|buffer|\\r\\n|---|\\r\\n|{\"type\": \"Polygon\",\"coordinates\": [ ... ]}|\\r\\n\\r\\nThe following query calculates buffer around each polygon and unifies result\\r\\n\\r\\n```\\r\\ndatatable(polygon:dynamic, radius:real )\\r\\n[\\r\\n    dynamic({\"type\":\"Polygon\",\"coordinates\":[[[12.451218693639277,41.906457003556625],[12.445753852969375,41.90160968881543],[12.453514425793855,41.90361551885886],[12.451218693639277,41.906457003556625]]]}), 100,\\r\\n    dynamic({\"type\":\"Polygon\",\"coordinates\":[[[12.4566086734784,41.905119850039995],[12.453913683559591,41.903652663265234],[12.455485761012113,41.90146110630562],[12.4566086734784,41.905119850039995]]]}), 20\\r\\n]\\r\\n| project buffer = geo_polygon_buffer(polygon, radius)\\r\\n| summarize polygons = make_list(buffer)\\r\\n| project result = geo_union_polygons_array(polygons)\\r\\n```\\r\\n\\r\\n|result|\\r\\n|---|\\r\\n|{\"type\": \"Polygon\",\"coordinates\": [ ... ]}|\\r\\n\\r\\nThe following example will return true, due to invalid polygon.\\r\\n\\r\\n```\\r\\nprint buffer = isnull(geo_polygon_buffer(dynamic({\"type\":\"p\"}), 1))\\r\\n```\\r\\n\\r\\n|buffer|\\r\\n|---|\\r\\n|True|\\r\\n\\r\\nThe following example will return true, due to invalid radius.\\r\\n\\r\\n```\\r\\nprint buffer = isnull(geo_polygon_buffer(dynamic({\"type\":\"Polygon\",\"coordinates\":[[[10,10],[0,10],[0,0],[10,10]]]}), 0))\\r\\n```\\r\\n\\r\\n|buffer|\\r\\n|---|\\r\\n|True|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/geo-polygon-buffer-function\",\"geo-polygon-buffer-function.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"geo_polygon_centroid\",\"Calculates the centroid of a polygon or a multipolygon on Earth.\",'## Syntax\\r\\n\\r\\n`geo_polygon_centroid(`*polygon*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n|Name|Type|Required|Description|\\r\\n|--|--|--|--|\\r\\n| *polygon* | dynamic | &check; | Polygon or multipolygon in the [GeoJSON format](https://tools.ietf.org/html/rfc7946).|\\r\\n\\r\\n## Returns\\r\\n\\r\\nThe centroid coordinate values in [GeoJSON Format](https://tools.ietf.org/html/rfc7946) and of a [dynamic](./scalar-data-types/dynamic.md) data type. If polygon or multipolygon are invalid, the query will produce a null result.\\r\\n\\r\\n> [!NOTE]\\r\\n>\\r\\n> * The geospatial coordinates are interpreted as represented by the [WGS-84](https://earth-info.nga.mil/index.php?dir=wgs84&action=wgs84) coordinate reference system.\\r\\n> * The [geodetic datum](https://en.wikipedia.org/wiki/Geodetic_datum) used for measurements on Earth is a sphere. Polygon edges are [geodesics](https://en.wikipedia.org/wiki/Geodesic) on the sphere.\\r\\n> * If input polygon edges are straight cartesian lines, consider using [geo_polygon_densify()](geo-polygon-densify-function.md) to convert planar edges to geodesics.\\r\\n> * If input is a multipolygon and contains more than one polygon, the result will be the centroid of polygons union.\\r\\n\\r\\n**Polygon definition and constraints**\\r\\n\\r\\ndynamic({\"type\": \"Polygon\",\"coordinates\": [ LinearRingShell, LinearRingHole_1, ..., LinearRingHole_N ]})\\r\\n\\r\\ndynamic({\"type\": \"MultiPolygon\",\"coordinates\": [[ LinearRingShell, LinearRingHole_1, ..., LinearRingHole_N], ..., [LinearRingShell, LinearRingHole_1, ..., LinearRingHole_M]]})\\r\\n\\r\\n* LinearRingShell is required and defined as a `counterclockwise` ordered array of coordinates [[lng_1,lat_1],...,[lng_i,lat_i],...,[lng_j,lat_j],...,[lng_1,lat_1]]. There can be only one shell.\\r\\n* LinearRingHole is optional and defined as a `clockwise` ordered array of coordinates [[lng_1,lat_1],...,[lng_i,lat_i],...,[lng_j,lat_j],...,[lng_1,lat_1]]. There can be any number of interior rings and holes.\\r\\n* LinearRing vertices must be distinct with at least three coordinates. The first coordinate must be equal to the last. At least four entries are required.\\r\\n* Coordinates [longitude, latitude] must be valid. Longitude must be a real number in the range [-180, +180] and latitude must be a real number in the range [-90, +90].\\r\\n* LinearRingShell encloses at most half of the sphere. LinearRing divides the sphere into two regions. The smaller of the two regions will be chosen.\\r\\n* LinearRing edge length must be less than 180 degrees. The shortest edge between the two vertices will be chosen.\\r\\n* LinearRings must not cross and must not share edges. LinearRings may share vertices.','The following example calculates NYC Central Park centroid.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA02PzYqDMBSF9/MUklUFpyS5uT9p6TvMXkREQ5HaRKwbKX33seMIXV049+NwviHMWRviPDVDPTbTLbtk3RKbe98enmpexqBO6icNyzVFVag2panrYzOHhzqVZfnNcPTOY+H0kT35qtgiFM2WyAIC2vdTtCYhDUjGW7NjYrXxzjoH4uSvg8QisQWNzLxjDIZFaK1C8BvmEA0Q6vfZsc8dVfXKz1/j1Md/vdR3q9o1pHrcbOo9Pnzq578zKeEgEAEAAA==\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nlet central_park = dynamic({\"type\":\"Polygon\",\"coordinates\":[[[-73.9495,40.7969],[-73.95807266235352,40.80068603561921],[-73.98201942443848,40.76825672305777],[-73.97317886352539,40.76455136505513],[-73.9495,40.7969]]]});\\r\\nprint centroid = geo_polygon_centroid(central_park)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|centroid|\\r\\n|---|\\r\\n|{\"type\": \"Point\", \"coordinates\": [-73.965735689907618, 40.782550538057812]}|\\r\\n\\r\\nThe following example calculates NYC Central Park centroid longitude.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA02P3WqEMBBG732KkKtdsJK/mSS79B16LyKiQWxtEtLcyLbvXncl4NXAN2c+5qwuk9H5nIa1j0P6Iu9k2vzwvYyXB81bdPRGP8K6zcHTmo4hpGnxQ3Y/9Na27ZuWjVUWasUabdF29RGBYVogCgkSxHNpGEODTAJyK3jBjGDcKqGUNMq8OtAIQC0kA611wbTk2hjcq0DaA1MAXCKw5yjY+Y+u+7veq5gWn0n18gvLtLvNLvTx0OlLfDn7X6tfElP4dGMmq5/3k4I1J/mWdf/IA8G+OQEAAA==\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nlet central_park = dynamic({\"type\":\"Polygon\",\"coordinates\":[[[-73.9495,40.7969],[-73.95807266235352,40.80068603561921],[-73.98201942443848,40.76825672305777],[-73.97317886352539,40.76455136505513],[-73.9495,40.7969]]]});\\r\\nprint \\r\\ncentroid = geo_polygon_centroid(central_park)\\r\\n| project lng = centroid.coordinates[0]\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|lng|\\r\\n|---|\\r\\n|-73.9657356899076|\\r\\n\\r\\nThe following example performs union of polygons in multipolygon and calculates centroid of the unified polygon.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA4WRzWoCQQyA732KZU8KW8lkJn+WPkKh9yIiusiCnRFdD1L67o1ud+2tuQwk32S+TA5tXx3L4bov+Vy9Vrtr3nx229lX3V+Pbb2s3y6HvnsfgLqpt6Wcdl3e9O25Xn54PEtcWDJqEizE2FbNkCIFQWaMFAlvRQVgZYjEwTCMmCIES5hS1KT3HqxILBiBRGTEJAZRZW9F0QYsEYXIBLdjxP56rDw56qF7BH8BReIdEDILComYSGmSCSCE6pqEA+dQskCUWNgmzhjAzZkZAg/9wGdSvxvsIc3B7VRNDWmYjRjMAWKOPH3Bv3Ye3/OXp+Opy49drS+5K3m9bXN/Kt3OV7dvy/q3OqVnIz7/AcPyFDroAQAA\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nlet polygons = dynamic({\"type\":\"MultiPolygon\",\"coordinates\":[[[[-73.9495,40.7969],[-73.95807266235352,40.80068603561921],[-73.98201942443848,40.76825672305777],[-73.97317886352539,40.76455136505513],[-73.9495,40.7969]]],[[[-73.94262313842773,40.775991804565585],[-73.98107528686523,40.791849155467695],[-73.99600982666016,40.77092185281977],[-73.96150588989258,40.75609977566361],[-73.94262313842773,40.775991804565585]]]]});\\r\\nprint polygons_union_centroid = geo_polygon_centroid(polygons)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|polygons_union_centroid|\\r\\n|---|\\r\\n|\"type\": \"Point\", \"coordinates\": [-73.968569587829577, 40.776310752555119]}|\\r\\n\\r\\nThe following example visualizes NYC Central Park centroid on a map\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA02PzYrDIBSF93kKcZVAphj1+tMy7zD7EIIYaaWpihWG0M67T9MQ6OrCuR+H882uIOtCyWYek8lX9I2mJZibt/UDlyU5fMQ/cV7OMeAW2xjz5IMp7o6Pfd9/SXbQXEPLyUFqoYd2i0ARSYWgDBjQ9akIEUoQBqLTtNsxRUmnOeWcKa7eHUJREJIyAlLKHZOsk0qJVxUwvWEcoGMCyHp27HPHMPw1pyplHwqq3n7RTy+3s4tj2nTGPa4//ZvqibILk8vobk0pLtuLyQX9+nJB9dWHteVmUvMPRtRI5jkBAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nlet central_park = dynamic({\"type\":\"Polygon\",\"coordinates\":[[[-73.9495,40.7969],[-73.95807266235352,40.80068603561921],[-73.98201942443848,40.76825672305777],[-73.97317886352539,40.76455136505513],[-73.9495,40.7969]]]});\\r\\nprint \\r\\ncentroid = geo_polygon_centroid(central_park)\\r\\n| render scatterchart with (kind = map)\\r\\n```\\r\\n\\r\\n![Screenshot of N Y C Central park centroid.](images/geo-polygon-centroid-function/nyc-central-park-centroid.png)\\r\\nThe following example returns True because of the invalid polygon.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA02KQQqAIBAAvyJ7UvCg117RXSRCJRZsV9QOEv29okungZkpFakLbHTkLLfES+E8NqYlJOqVMco4aN0xyBP6KAkmAfO3gIbAXCPS2lN7gnPOaOO1s0bbP1/r/aWUugEuNYE7bwAAAA==\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint isnull(geo_polygon_centroid(dynamic({\"type\": \"Polygon\",\"coordinates\": [[[0,0],[10,10],[10,10],[0,0]]]})))\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|print_0|\\r\\n|---|\\r\\n|True|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/geo-polygon-centroid-function\",\"geo-polygon-centroid-function.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"geo_polygon_densify\",\"Converts polygon or multipolygon planar edges to geodesics by adding intermediate points.\",'## Syntax\\r\\n\\r\\n`geo_polygon_densify(`*polygon*`,` *tolerance*`,` [ *preserve_crossing* ]`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n|Name|Type|Required|Description|\\r\\n|--|--|--|--|\\r\\n| *polygon* | dynamic | &check; | Polygon or multipolygon in the [GeoJSON format](https://tools.ietf.org/html/rfc7946).|\\r\\n| *tolerance* | int, long, or real | | Defines maximum distance in meters between the original planar edge and the converted geodesic edge chain. Supported values are in the range [0.1, 10000]. If unspecified, the default value is  `10`.|\\r\\n| *preserve_crossing* | bool | | If `true`, preserves edge crossing over antimeridian. If unspecified, the default value `false` is used.|\\r\\n\\r\\n### Polygon definition\\r\\n\\r\\ndynamic({\"type\": \"Polygon\",\"coordinates\": [ LinearRingShell, LinearRingHole_1, ..., LinearRingHole_N ]})\\r\\n\\r\\ndynamic({\"type\": \"MultiPolygon\",\"coordinates\": [[ LinearRingShell, LinearRingHole_1, ..., LinearRingHole_N ], ..., [LinearRingShell, LinearRingHole_1, ..., LinearRingHole_M]]})\\r\\n\\r\\n* `LinearRingShell` is required and defined as a `counterclockwise` ordered array of coordinates [[lng_1,lat_1],...,[lng_i,lat_i],...,[lng_j,lat_j],...,[lng_1,lat_1]]. There can be only one shell.\\r\\n* `LinearRingHole` is optional and defined as a `clockwise` ordered array of coordinates [[lng_1,lat_1],...,[lng_i,lat_i],...,[lng_j,lat_j],...,[lng_1,lat_1]]. There can be any number of interior rings and holes.\\r\\n* `LinearRing` vertices must be distinct with at least three coordinates. The first coordinate must be equal to the last. At least four entries are required.\\r\\n* Coordinates [longitude, latitude] must be valid. Longitude must be a real number in the range [-180, +180] and latitude must be a real number in the range [-90, +90].\\r\\n* `LinearRingShell` encloses at most half of the sphere. LinearRing divides the sphere into two regions. The smaller of the two regions will be chosen.\\r\\n* `LinearRing` edge length must be less than 180 degrees. The shortest edge between the two vertices will be chosen.\\r\\n\\r\\n### Constraints\\r\\n\\r\\n* The maximum number of points in the densified polygon is limited to 10485760.\\r\\n* Storing polygons in [dynamic](./scalar-data-types/dynamic.md) format has size limits.\\r\\n* Densifying a valid polygon may invalidate the polygon. The algorithm adds points in a non-uniform manner, and as such may cause edges to intertwine with each other.\\r\\n\\r\\n### Motivation\\r\\n\\r\\n* [GeoJSON format](https://tools.ietf.org/html/rfc7946) defines an edge between two points as a straight cartesian line while Azure Data Explorer uses [geodesic](https://en.wikipedia.org/wiki/Geodesic).\\r\\n* The decision to use geodesic or planar edges might depend on the dataset and is especially relevant in long edges.\\r\\n\\r\\n## Returns\\r\\n\\r\\nDensified polygon in the [GeoJSON format](https://tools.ietf.org/html/rfc7946) and of a [dynamic](./scalar-data-types/dynamic.md) data type. If either the polygon or tolerance is invalid, the query will produce a null result.\\r\\n\\r\\n> [!NOTE]\\r\\n> The geospatial coordinates are interpreted as represented by the [WGS-84](https://earth-info.nga.mil/index.php?dir=wgs84&action=wgs84) coordinate reference system.','The following example densifies Manhattan Central Park polygon. The edges are short and the distance between planar edges and their geodesic counterparts is less than the distance specified by tolerance. As such, the result remains unchanged.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA13MSwrDIABF0a2IIwNpMGr8BLqHziWEEG0QWpXoREr33o+kg07Pe9y4O5+BsT65q7NmjuFWtuDBGeSQ8nvc0GbDwXM9FmSKX+5uRQ+YS7RwhJd6gC1cQ9iN80u2CY5a65OgnRokYaxluJMYi15NbWWmesY/LBRXw6GCYkW/yhkh/GBJMCeVZT/8Gv/paXo2TfMCwhc/8NgAAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint densified_polygon = tostring(geo_polygon_densify(dynamic({\"type\":\"Polygon\",\"coordinates\":[[[-73.958244,40.800719],[-73.949146,40.79695],[-73.973093,40.764226],[-73.982062,40.768159],[-73.958244,40.800719]]]})))\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|densified_polygon|\\r\\n|---|\\r\\n|{\"type\":\"Polygon\",\"coordinates\":[[[-73.958244,40.800719],[-73.949146,40.79695],[-73.973093,40.764226],[-73.982062,40.768159],[-73.958244,40.800719]]]}|\\r\\n\\r\\nThe following example densifies two edges of the polygon. Densified edges length is ~110 km\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA0XKQQrDIBCF4avIrBRcONtA7tC9SAjRykA6I3E2Unr3tISS1Qfv/e0gVpMLd3pSyUuTfVRhMxuVrt+z2lrkPy9XOGwevL5os2/Q0QpM8LgC8LCJHJl41dJhijFi8BiSj4i3+DPchpTSxzl3AtyuS1uOAAAA\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint densified_polygon = tostring(geo_polygon_densify(dynamic({\"type\":\"Polygon\",\"coordinates\":[[[10,10],[11,10],[11,11],[10,11],[10,10]]]})))\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|densified_polygon|\\r\\n|---|\\r\\n|{\"type\":\"Polygon\",\"coordinates\":[[[10,10],[10.25,10],[10.5,10],[10.75,10],[11,10],[11,11],[10.75,11],[10.5,11],[10.25,11],[10,11],[10,10]]]}|\\r\\n\\r\\nThe following example returns a null result because of the invalid coordinate input.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAysoyswrUUhJzSvOTMtMTYkvyM+pTM/PU7BVSE/Nh/HiIfKVGimVeYm5mcka1UollQWpSlZKARAFSjpKyfn5RSmZeYklqcVKVtHR0YYGOpYGBrE60YaGOoYw2hBEGyBog9jY2FpNTQDqeX/DhQAAAA==\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint densified_polygon = geo_polygon_densify(dynamic({\"type\":\"Polygon\",\"coordinates\":[[[10,900],[11,10],[11,11],[10,11],[10,10]]]}))\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|densified_polygon|\\r\\n|---|\\r\\n||\\r\\n\\r\\nThe following example returns a null result because of the invalid tolerance input.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAysoyswrUUhJzSvOTMtMTYkvyM+pTM/PU7BVSE/Nh/HiIfKVGimVeYm5mcka1UollQWpSlZKARAFSjpKyfn5RSmZeYklqcVKVtHR0YYGOoYGsTrRhoYI2hBEGyBog9jY2FpNHQUDTQCMm+c8hwAAAA==\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint densified_polygon = geo_polygon_densify(dynamic({\"type\":\"Polygon\",\"coordinates\":[[[10,10],[11,10],[11,11],[10,11],[10,10]]]}), 0)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|densified_polygon|\\r\\n|---|\\r\\n||',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/geo-polygon-densify-function\",\"geo-polygon-densify-function.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"geo_polygon_perimeter\",\"Calculates the length of the boundary of a polygon or a multipolygon on Earth.\",'## Syntax\\r\\n\\r\\n`geo_polygon_perimeter(`*polygon*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n|Name|Type|Required|Description|\\r\\n|--|--|--|--|\\r\\n| *polygon* | dynamic | &check; | Polygon or multipolygon in the [GeoJSON format](https://tools.ietf.org/html/rfc7946).|\\r\\n\\r\\n## Returns\\r\\n\\r\\nThe length of the boundary of polygon or a multipolygon, in meters, on Earth. If polygon or multipolygon are invalid, the query will produce a null result.\\r\\n\\r\\n> [!NOTE]\\r\\n>\\r\\n> * The geospatial coordinates are interpreted as represented by the [WGS-84](https://earth-info.nga.mil/index.php?dir=wgs84&action=wgs84) coordinate reference system.\\r\\n> * The [geodetic datum](https://en.wikipedia.org/wiki/Geodetic_datum) used for measurements on Earth is a sphere. Polygon edges are [geodesics](https://en.wikipedia.org/wiki/Geodesic) on the sphere.\\r\\n> * If input polygon edges are straight cartesian lines, consider using [geo_polygon_densify()](geo-polygon-densify-function.md) to convert planar edges to geodesics.\\r\\n> * If input is a multipolygon and contains more than one polygon, the result will be the length of the boundary of polygons union.\\r\\n\\r\\n**Polygon definition and constraints**\\r\\n\\r\\ndynamic({\"type\": \"Polygon\",\"coordinates\": [ LinearRingShell, LinearRingHole_1, ..., LinearRingHole_N ]})\\r\\n\\r\\ndynamic({\"type\": \"MultiPolygon\",\"coordinates\": [[ LinearRingShell, LinearRingHole_1, ..., LinearRingHole_N ], ..., [LinearRingShell, LinearRingHole_1, ..., LinearRingHole_M]]})\\r\\n\\r\\n* LinearRingShell is required and defined as a `counterclockwise` ordered array of coordinates [[lng_1,lat_1],...,[lng_i,lat_i],...,[lng_j,lat_j],...,[lng_1,lat_1]]. There can be only one shell.\\r\\n* LinearRingHole is optional and defined as a `clockwise` ordered array of coordinates [[lng_1,lat_1],...,[lng_i,lat_i],...,[lng_j,lat_j],...,[lng_1,lat_1]]. There can be any number of interior rings and holes.\\r\\n* LinearRing vertices must be distinct with at least three coordinates. The first coordinate must be equal to the last. At least four entries are required.\\r\\n* Coordinates [longitude, latitude] must be valid. Longitude must be a real number in the range [-180, +180] and latitude must be a real number in the range [-90, +90].\\r\\n* LinearRingShell encloses at most half of the sphere. LinearRing divides the sphere into two regions. The smaller of the two regions will be chosen.\\r\\n* LinearRing edge length must be less than 180 degrees. The shortest edge between the two vertices will be chosen.\\r\\n* LinearRings must not cross and must not share edges. LinearRings may share vertices.','The following example calculates the NYC Central Park perimeter, in meters.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA02QzWrDMBCE730Ko1MCbpC02h+l9B16N8YYRwRTRxKqLqb03ZvUuOQ0MPMx7OwSajOFWMu4DHksn817c1njeJunw7eqaw7qrD7Ssl5TVK2aUiqXOY41fKlz13WvDCfvPLZOn9iT79vNQtFsiSwgoH2EojUJaUAy3podE6uNd9Y5ECd/HSQWiS1oZOYdYzAsQvcqBL9hDtEAoX7Ijj3f0fc/x7eXXOZYmxzKfAs1lPu2a0hD3uYM//7h+QHHX4p2a4cSAQAA\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nlet central_park = dynamic({\"type\":\"Polygon\",\"coordinates\":[[[-73.9495,40.7969],[-73.95807266235352,40.80068603561921],[-73.98201942443848,40.76825672305777],[-73.97317886352539,40.76455136505513],[-73.9495,40.7969]]]});\\r\\nprint perimeter = geo_polygon_perimeter(central_park)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|perimeter|\\r\\n|---|\\r\\n|9930.30149604938|\\r\\n\\r\\nThe following example performs union of polygons in multipolygon and calculates perimeter of the unified polygon.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA4WRTWrDMBBG9z2F8SoBN4xGmr+UHqHQfQkhJCIYHDs4ziKU3r2TuHa7qzaC0dPojb4mD8W5a27Hrr0Ur8Xh1u5O9X7xWQ63cy7X5du1Ger3ESirct91/aFud0O+lOsPX88SV5aMqgQrMbZNNZZIQZAZI0XC+6ECsDJE4mAYJkwRgiVMKWrSRw9WJBaMQCIyYRKDqLK3omgjlohCZIL7NmF/PTZenPTQPYK/gCLxAQiZBYVETKQ0ywQQQnVNwpFzKFkgSixsM2cM4ObMDIHHfuAzqd8N9ivNwe1UTQ1pnI0YzAFijjx/wb92vr6WL0/nvm49q9zXpzzk3sM65m77k912ri+mNJff9ugUsNsBAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nlet polygons = dynamic({\"type\":\"MultiPolygon\",\"coordinates\":[[[[-73.9495,40.7969],[-73.95807266235352,40.80068603561921],[-73.98201942443848,40.76825672305777],[-73.97317886352539,40.76455136505513],[-73.9495,40.7969]]],[[[-73.94262313842773,40.775991804565585],[-73.98107528686523,40.791849155467695],[-73.99600982666016,40.77092185281977],[-73.96150588989258,40.75609977566361],[-73.94262313842773,40.775991804565585]]]]});\\r\\nprint perimeter = geo_polygon_perimeter(polygons)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|perimeter|\\r\\n|---|\\r\\n|15943.5384578745|\\r\\n\\r\\nThe following example returns True because of the invalid polygon.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA02KQQrDIBBFryKzUnBhtoXeoXsRkTiEATMjxgYk5O61dNPV5733ayPuio5IfKZCWT0n8LsUvaHEKmVswrFiox07Np0Hp51WfUEfFeGh4PX7gIVVpGXi1PGYwXvvrAvWL84u//u1IdzGmA8jsUSgfQAAAA==\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint is_invalid = isnull(geo_polygon_perimeter(dynamic({\"type\": \"Polygon\",\"coordinates\": [[[0,0],[10,10],[10,10],[0,0]]]})))\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|is_invalid|\\r\\n|---|\\r\\n|True|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/geo-polygon-perimeter-function\",\"geo-polygon-perimeter-function.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"geo_polygon_simplify\",\"Simplifies a polygon or a multipolygon by replacing nearly straight chains of short edges with a single long edge on Earth.\",'## Syntax\\r\\n\\r\\n`geo_polygon_simplify(`*polygon*`,` *tolerance*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n|Name|Type|Required|Description|\\r\\n|--|--|--|--|\\r\\n| *polygon* | dynamic | &check; | Polygon or multipolygon in the [GeoJSON format](https://tools.ietf.org/html/rfc7946).|\\r\\n| *tolerance* | int, long, or real | | Defines maximum distance in meters between the original planar edge and the converted geodesic edge chain. Supported values are in the range [0.1, 10000]. If unspecified, the default value is  `10`.|\\r\\n\\r\\n## Returns\\r\\n\\r\\nSimplified polygon or a multipolygon in the [GeoJSON format](https://tools.ietf.org/html/rfc7946) and of a [dynamic](./scalar-data-types/dynamic.md) data type, with no two vertices with distance less than tolerance. If either the polygon or tolerance is invalid, the query will produce a null result.\\r\\n\\r\\n> [!NOTE]\\r\\n>\\r\\n> * If input has more than one polygon, with mutual borders, please see [geo_simplify_polygons_array()](geo-simplify-polygons-array-function.md).\\r\\n> * The geospatial coordinates are interpreted as represented by the [WGS-84](https://earth-info.nga.mil/index.php?dir=wgs84&action=wgs84) coordinate reference system.\\r\\n> * The [geodetic datum](https://en.wikipedia.org/wiki/Geodetic_datum) used for measurements on Earth is a sphere. Polygon edges are [geodesics](https://en.wikipedia.org/wiki/Geodesic) on the sphere.\\r\\n> * If input polygon edges are straight cartesian lines, consider using [geo_polygon_densify()](geo-polygon-densify-function.md) to convert planar edges to geodesics.\\r\\n> * If input is a multipolygon and contains more than one polygon, the result will be the area of polygons union.\\r\\n> * High tolerance may cause small polygon to disappear.\\r\\n\\r\\n**Polygon definition and constraints**\\r\\n\\r\\ndynamic({\"type\": \"Polygon\",\"coordinates\": [ LinearRingShell, LinearRingHole_1, ..., LinearRingHole_N ]})\\r\\n\\r\\ndynamic({\"type\": \"MultiPolygon\",\"coordinates\": [[ LinearRingShell, LinearRingHole_1, ..., LinearRingHole_N ], ..., [LinearRingShell, LinearRingHole_1, ..., LinearRingHole_M]]})\\r\\n\\r\\n* LinearRingShell is required and defined as a `counterclockwise` ordered array of coordinates [[lng_1,lat_1],...,[lng_i,lat_i],...,[lng_j,lat_j],...,[lng_1,lat_1]]. There can be only one shell.\\r\\n* LinearRingHole is optional and defined as a `clockwise` ordered array of coordinates [[lng_1,lat_1],...,[lng_i,lat_i],...,[lng_j,lat_j],...,[lng_1,lat_1]]. There can be any number of interior rings and holes.\\r\\n* LinearRing vertices must be distinct with at least three coordinates. The first coordinate must be equal to the last. At least four entries are required.\\r\\n* Coordinates [longitude, latitude] must be valid. Longitude must be a real number in the range [-180, +180] and latitude must be a real number in the range [-90, +90].\\r\\n* LinearRingShell encloses at most half of the sphere. LinearRing divides the sphere into two regions. The smaller of the two regions will be chosen.\\r\\n* LinearRing edge length must be less than 180 degrees. The shortest edge between the two vertices will be chosen.\\r\\n* LinearRings must not cross and must not share edges. LinearRings may share vertices.','The following example simplifies polygons by removing vertices that are within a 10-meter distance from each other.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA33Ry2rCUBAG4H2fImSlkMqcuZyZsfQdupcgYlIJaBI0m1D67j3FaLJyO/PBP5dzPWR9dx5PXZt9ZtXYHi7NcfWTD2Nf59v8697Ki/zYddeqaQ9Dfcu3u93uXWnjbCYBUTUChYJhox6VWCOJRNGymJmjMplSnJgjikW0pBdMnRxc2PXJQERUgXjBUggGCMwP9Z/pFMFpoSwlqhgCvmbEgTGaPJR4SPODB5CZOYBxGljBn46AyRXNn8whUjoIKrLdmQZIS6MGNZsZUgzIKuSPVFMwsKC+3PPlccvyd/3x1l+bdshuzaU/N99NXaUvnupuP/10PzXG1VRY/wEdFq3Y8QEAAA==\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nlet polygon = dynamic({\"type\":\"Polygon\",\"coordinates\":[[[-73.94885122776031,40.79673476355657],[-73.94885927438736,40.79692258628347],[-73.94887939095497,40.79692055577034],[-73.9488673210144,40.79693476936093],[-73.94888743758202,40.79693476936093],[-73.9488834142685,40.796959135509105],[-73.94890084862709,40.79695304397289],[-73.94906312227248,40.79710736271788],[-73.94923612475395,40.7968708081794],[-73.94885122776031,40.79673476355657]]]});\\r\\nprint simplified = geo_polygon_simplify(polygon)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|simplified|\\r\\n|---|\\r\\n|{\"type\": \"Polygon\", \"coordinates\": [[[-73.948851227760315, 40.796734763556572],[-73.949063122272477, 40.797107362717881],[-73.949236124753952, 40.7968708081794],[-73.948851227760315, 40.796734763556572]]]}|\\r\\n\\r\\nThe following example simplifies polygons and combines results into GeoJSON geometry collection.\\r\\n\\r\\n```\\r\\nPolygons\\r\\n| project polygon = features.geometry\\r\\n| project simplified = geo_polygon_simplify(polygon, 1000)\\r\\n| summarize lst = make_list(simplified)\\r\\n| project geojson = bag_pack(\"type\", \"Feature\",\"geometry\", bag_pack(\"type\", \"GeometryCollection\", \"geometries\", lst), \"properties\", bag_pack(\"name\", \"polygons\"))\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|geojson|\\r\\n|---|\\r\\n|{\"type\": \"Feature\", \"geometry\": {\"type\": \"GeometryCollection\", \"geometries\": [ ... ]}, \"properties\": {\"name\": \"polygons\"}}|\\r\\n\\r\\nThe following example simplifies polygons and unifies result\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA2WOQQoCMQxF954iyxZExgN4isF1KZoZou20JOmig4c3i4qC2///e8l1DrNGRTm8oHJ54E2hltTXssEFFozaGOW0Ysmo3H9WQrkmWgjvNrQ+DCyMorsRHOE8TZM3VFrOkWlHSKJG5fjEkEjUfWX+/xEZB9pGpv+EITLH7szk3/JsgkXFAAAA\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nUS_States\\r\\n| project polygon = features.geometry\\r\\n| project simplified = geo_polygon_simplify(polygon, 1000)\\r\\n| summarize lst = make_list(simplified)\\r\\n| project polygons = geo_union_polygons_array(lst)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|polygons|\\r\\n|---|\\r\\n|{\"type\": \"MultiPolygon\", \"coordinates\": [ ... ]}|\\r\\n\\r\\nThe following example returns True because of the invalid polygon.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA0WMQQrDIBAA732F7EnBYwslIX/IXUQkmrCw2ZVoC1L69x7S0tPADAzlpopQ34TVpFLnuOOiX9B6yTDAfCawsIgcCTm2XGFwzt3s9e7tCe/fZryUA7kprAH5GQlT+H+x8oNIb1l+MlTcC+Ha9VcY8wFgUlqniwAAAA==\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nlet polygon = dynamic({\"type\":\"Polygon\",\"coordinates\":[[[5,48],[5,48]]]});\\r\\nprint is_invalid_polygon = isnull(geo_polygon_simplify(polygon))\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|is_invalid_polygon|\\r\\n|---|\\r\\n|1|\\r\\n\\r\\nThe following example returns True because of the invalid tolerance.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA0WNwQoCIRQA732FeFKwMHApdukfuouIrLY8cJ+yWiDRvxe7RaeBmcPEUElOsU0JyYX4hm6GkT1pbTnQnl63RAUdU1o8oKuh0F5r3Ql1NkJL0ckV6vSB2rA2Y1582OUFsBIoFvDhInj7n0HBe4xsCuknbYE5R7g19hWC7OXhyPkbMhZUVaYAAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nlet polygon = dynamic({\"type\":\"Polygon\",\"coordinates\":[[[5,48],[0,50],[0,47],[4,47],[5,48]]]});\\r\\nprint is_invalid_polygon = isnull(geo_polygon_simplify(polygon, -0.1))\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|is_invalid_polygon|\\r\\n|---|\\r\\n|1|\\r\\n\\r\\nThe following example returns True because high tolerance causes polygon to disappear.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA0WNwQoCIRRF932FvJWCCwOHYqJ/mL2IyGjDA0dltECify+cors5cM7iBl9JTqEtKZIrcS3aFWf6hNqyhxGmPQGHOaXNYbTVFxiVUgOXZ82V4IPokKcP5I7etH6xyyFvGCvBYjA+bEBn/mdY4j0Euvj0k6bgmgPeGv0KTo6ij7E3IUIHfKkAAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nlet polygon = dynamic({\"type\":\"Polygon\",\"coordinates\":[[[5,48],[0,50],[0,47],[4,47],[5,48]]]});\\r\\nprint is_invalid_polygon = isnull(geo_polygon_simplify(polygon, 1000000))\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|is_invalid_polygon|\\r\\n|---|\\r\\n|1|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/geo-polygon-simplify-function\",\"geo-polygon-simplify-function.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"geo_polygon_to_s2cells\",\"Calculates S2 cell tokens that cover a polygon or multipolygon on Earth. This function is a useful geospatial join tool.\",'Read more about [S2 cell hierarchy](https://s2geometry.io/devguide/s2cell_hierarchy).\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`geo_polygon_to_s2cells(`*polygon*`,` *level*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n|Name|Type|Required|Description|\\r\\n|--|--|--|--|\\r\\n| *polygon* | dynamic | &check; | Polygon or multipolygon in the [GeoJSON format](https://tools.ietf.org/html/rfc7946).|\\r\\n| *level* | int | | Defines the requested cell level. Supported values are in the range [0, 30]. If unspecified, the default value `11` is used.|\\r\\n\\r\\n## Returns\\r\\n\\r\\nArray of S2 cell token strings that cover a polygon or a multipolygon. If either the polygon or level is invalid, or the cell count exceeds the limit, the query will produce a null result.\\r\\n\\r\\n> [!NOTE]\\r\\n>\\r\\n> * Covering the polygon with S2 cell tokens can be useful in matching coordinates to polygons that might include these coordinates and matching polygons to polygons.\\r\\n> * The polygon covering tokens are of the same S2 cell level.\\r\\n> * The maximum count of tokens per polygon is 65536.\\r\\n> * The [geodetic datum](https://en.wikipedia.org/wiki/Geodetic_datum) used for measurements on Earth is a sphere. Polygon edges are [Geodesics](https://en.wikipedia.org/wiki/Geodesic) on the sphere.\\r\\n> * If input polygon edges are straight cartesian lines, consider using [geo_polygon_densify()](geo-polygon-densify-function.md) in order to convert planar edges to geodesics.\\r\\n\\r\\n**Motivation for covering polygons with S2 cell tokens**\\r\\n\\r\\nWithout this function, here\\'s one approach we could take in order to classify coordinates into polygons containing these coordinates.\\r\\n\\r\\n```\\r\\nlet Polygons = \\r\\n    datatable(description:string, polygon:dynamic)\\r\\n    [  \\r\\n      \"New York\",  dynamic({\"type\":\"Polygon\",\"coordinates\":[[[-73.85009765625,40.85744791303121],[-74.16046142578125,40.84290487729676],[-74.190673828125,40.59935608796518],[-73.83087158203125,40.61812224225511],[-73.85009765625,40.85744791303121]]]}),\\r\\n      \"Seattle\",   dynamic({\"type\":\"Polygon\",\"coordinates\":[[[-122.200927734375,47.68573021131587],[-122.4591064453125,47.68573021131587],[-122.4755859375,47.468949677672484],[-122.17620849609374,47.47266286861342],[-122.200927734375,47.68573021131587]]]}),\\r\\n      \"Las Vegas\", dynamic({\"type\":\"Polygon\",\"coordinates\":[[[-114.9,36.36],[-115.4498291015625,36.33282808737917],[-115.4498291015625,35.84453450421662],[-114.949951171875,35.902399875143615],[-114.9,36.36]]]}),\\r\\n    ];\\r\\nlet Coordinates = \\r\\n    datatable(longitude:real, latitude:real)\\r\\n    [\\r\\n      real(-73.95),  real(40.75), // New York\\r\\n      real(-122.3),  real(47.6),  // Seattle\\r\\n      real(-115.18), real(36.16)  // Las Vegas\\r\\n    ];\\r\\nPolygons | extend dummy=1\\r\\n| join kind=inner (Coordinates | extend dummy=1) on dummy\\r\\n| where geo_point_in_polygon(longitude, latitude, polygon)\\r\\n| project longitude, latitude, description\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|longitude|latitude|description|\\r\\n|---|---|---|\\r\\n|-73.95|40.75|New York city|\\r\\n|-122.3|47.6|Seattle|\\r\\n|-115.18|36.16|Las Vegas|\\r\\n\\r\\nWhile this method works in some cases, it\\'s inefficient. This method does a cross-join, meaning that it tries to match every polygon to every point. This process consumes a large amount of memory and compute resources.\\r\\nInstead, we would like to match every polygon to a point with a high probability of containment success, and filter out other points.\\r\\n\\r\\nThis match can be achieved by the following process:\\r\\n\\r\\n1. Converting polygons to S2 cells of level k,\\r\\n1. Converting points to the same S2 cells level k,\\r\\n1. Joining on S2 cells,\\r\\n1. Filtering by [geo_point_in_polygon()](geo-point-in-polygon-function.md).\\r\\n\\r\\n**Choosing the S2 cell level**\\r\\n\\r\\n* Ideally we would want to cover every polygon with one or just a few unique cells such that no two polygons share the same cell.\\r\\n* If the polygons are close to each other, choose the [S2 cell level](geo-point-to-s2cell-function.md) such that its cell edge will be smaller (4, 8, 12 times smaller) than the edge of the average polygon.\\r\\n* If the polygons are far from each other, choose the [S2 cell level](geo-point-to-s2cell-function.md) such that its cell edge will be similar to the edge of the average polygon.\\r\\n* In practice, covering a polygon with more than 10,000 cells might not yield good performance.\\r\\n* Sample use cases:\\r\\n* S2 cell level 5 might prove to be good for covering countries/regions.\\r\\n* S2 cell level 16 can cover dense and relatively small Manhattan (New York) neighborhoods.\\r\\n* S2 cell level 11 can be used for covering suburbs of Australia.\\r\\n* Query run time and memory consumption might differ because of different S2 cell level values.\\r\\n\\r\\n> [!WARNING]\\r\\n> Covering a large-area polygon with small-area cells can lead to a huge amount of covering cells. As a result, the query might return null.','The following example classifies coordinates into polygons.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=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\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nlet Polygons = \\r\\n    datatable(description:string, polygon:dynamic)\\r\\n    [\\r\\n        \\'Greenwich Village\\', dynamic({\"type\":\"Polygon\",\"coordinates\":[[[-73.991460000000131,40.731738000000206],[-73.992854491775518,40.730082566051351],[-73.996772,40.725432000000154],[-73.997634685522883,40.725786309886963],[-74.002855946639244,40.728346630056791],[-74.001413,40.731065000000207],[-73.996796995070824,40.73736378205173],[-73.991724524037934,40.735245208931886],[-73.990703782359589,40.734781896080477],[-73.991460000000131,40.731738000000206]]]}),\\r\\n        \\'Upper West Side\\',   dynamic({\"type\":\"Polygon\",\"coordinates\":[[[-73.958357552055688,40.800369095633819],[-73.98143901556422,40.768762584141953],[-73.981548752788598,40.7685590292784],[-73.981565335901905,40.768307084720796],[-73.981754418060945,40.768399727738668],[-73.982038573548124,40.768387823012056],[-73.982268248204349,40.768298621883247],[-73.982384797518051,40.768097213086911],[-73.982320919746599,40.767894461792181],[-73.982155532845766,40.767756204474757],[-73.98238873834039,40.767411004834273],[-73.993650353659021,40.772145571634361],[-73.99415893763998,40.772493009137818],[-73.993831082030937,40.772931787850908],[-73.993891252437052,40.772955194876722],[-73.993962585514595,40.772944653908901],[-73.99401262480508,40.772882846631894],[-73.994122058082397,40.77292405902601],[-73.994136652588594,40.772901870174394],[-73.994301342391154,40.772970028663913],[-73.994281535134448,40.77299380206933],[-73.994376552751078,40.77303955110149],[-73.994294029824005,40.773156243992048],[-73.995023275860802,40.773481196576356],[-73.99508939189289,40.773388475039134],[-73.995013963716758,40.773358035426909],[-73.995050284699261,40.773297153189958],[-73.996240651898916,40.773789791397689],[-73.996195837470992,40.773852356184044],[-73.996098807369748,40.773951805299085],[-73.996179459973888,40.773986954351571],[-73.996095245226442,40.774086186437756],[-73.995572265161172,40.773870731394297],[-73.994017424135961,40.77321375261053],[-73.993935876811335,40.773179512586211],[-73.993861942928888,40.773269531698837],[-73.993822393527211,40.773381758622882],[-73.993767019318497,40.773483981224835],[-73.993698463744295,40.773562141052594],[-73.993358326468751,40.773926888327956],[-73.992622663865575,40.774974056037109],[-73.992577842766124,40.774956016359418],[-73.992527743951555,40.775002110439829],[-73.992469745815342,40.775024159551755],[-73.992403837191887,40.775018140390664],[-73.99226708903538,40.775116033858794],[-73.99217809026365,40.775279293897171],[-73.992059084937338,40.775497598192516],[-73.992125372394938,40.775509075053385],[-73.992226867797001,40.775482211026116],[-73.992329346608813,40.775468900958522],[-73.992361756801131,40.775501899766638],[-73.992386042960277,40.775557180424634],[-73.992087684712729,40.775983970821372],[-73.990927174149746,40.777566878763238],[-73.99039616003671,40.777585065679204],[-73.989461267506471,40.778875124584417],[-73.989175778438053,40.779287524015778],[-73.988868617400072,40.779692922911607],[-73.988871874499793,40.779713738253008],[-73.989219022880576,40.779697895209402],[-73.98927785904425,40.779723439271038],[-73.989409054180143,40.779737706471963],[-73.989498614927044,40.779725044389757],[-73.989596493388234,40.779698146683387],[-73.989679812902509,40.779677568658038],[-73.989752702937935,40.779671244211556],[-73.989842247806507,40.779680752670664],[-73.990040102120489,40.779707677698219],[-73.990137977524839,40.779699769704784],[-73.99033584033225,40.779661794394983],[-73.990430598697046,40.779664973055503],[-73.990622199396725,40.779676064914298],[-73.990745069505479,40.779671328184051],[-73.990872114282197,40.779646007643876],[-73.990961672224358,40.779639683751753],[-73.991057472829539,40.779652352625774],[-73.991157429497036,40.779669775606465],[-73.991242817404469,40.779671367084504],[-73.991255318289745,40.779650782516491],[-73.991294887120119,40.779630209208889],[-73.991321967649895,40.779631796041372],[-73.991359455569423,40.779585883337383],[-73.991551059227476,40.779574821437407],[-73.99141982585985,40.779755280287233],[-73.988886144117032,40.779878898532999],[-73.988939656706265,40.779956178440393],[-73.988926103530844,40.780059292013632],[-73.988911680264692,40.780096037146606],[-73.988919261468567,40.780226094343945],[-73.988381050202634,40.780981074045783],[-73.988232413846987,40.781233144215555],[-73.988210420831663,40.781225482542055],[-73.988140000000143,40.781409000000224],[-73.988041288067166,40.781585961353777],[-73.98810029382463,40.781602878305286],[-73.988076449145055,40.781650935001608],[-73.988018059972219,40.781634188810422],[-73.987960792842145,40.781770987031535],[-73.985465811970457,40.785360700575431],[-73.986172704965611,40.786068452258647],[-73.986455862401996,40.785919219081421],[-73.987072345615601,40.785189638820121],[-73.98711901394276,40.785210319004058],[-73.986497781023601,40.785951202887254],[-73.986164628806279,40.786121882448327],[-73.986128422486075,40.786239001331111],[-73.986071135219746,40.786240706026611],[-73.986027274789123,40.786228964236727],[-73.986097637849426,40.78605822569795],[-73.985429321269592,40.785413942184597],[-73.985081137732209,40.785921935110366],[-73.985198833254501,40.785966552197777],[-73.985170502389906,40.78601333415817],[-73.985216218673656,40.786030501816427],[-73.98525509797993,40.785976205511588],[-73.98524273937646,40.785972572653328],[-73.98524962933017,40.785963139855845],[-73.985281779186749,40.785978620950075],[-73.985240032884533,40.786035858136792],[-73.985683885242182,40.786222123919686],[-73.985717529004575,40.786175994668795],[-73.985765660297687,40.786196274858618],[-73.985682871922691,40.786309786213067],[-73.985636270930442,40.786290150649279],[-73.985670722564691,40.786242911993817],[-73.98520511880038,40.786047669212785],[-73.985211035607492,40.786039554883686],[-73.985162639946992,40.786020999769754],[-73.985131636312062,40.786060297019972],[-73.985016964065125,40.78601423719563],[-73.984655078830457,40.786534741807841],[-73.985743787901043,40.786570082854738],[-73.98589227228328,40.786426529019593],[-73.985942854994988,40.786452847880334],[-73.985949561556794,40.78648711396653],[-73.985812373526713,40.786616865357047],[-73.985135209703174,40.78658761889551],[-73.984619428584324,40.786586016349787],[-73.981952458164173,40.790393724337193],[-73.972823037363767,40.803428052816756],[-73.971036786332192,40.805918478839672],[-73.966701,40.804169000000186],[-73.959647,40.801156000000113],[-73.958508540159471,40.800682279767472],[-73.95853274080838,40.800491362464697],[-73.958357552055688,40.800369095633819]]]}),\\r\\n        \\'Upper East Side\\',   dynamic({\"type\":\"Polygon\",\"coordinates\":[[[-73.943592454622546,40.782747908206574],[-73.943648235390199,40.782656161333449],[-73.943870759887162,40.781273026571704],[-73.94345932494096,40.780048275653243],[-73.943213862652243,40.779317588660199],[-73.943004239504688,40.779639495474292],[-73.942716005450905,40.779544169476175],[-73.942712374762181,40.779214856940001],[-73.942535563208608,40.779090956062532],[-73.942893408188027,40.778614093246276],[-73.942438481745029,40.777315235766039],[-73.942244919522594,40.777104088947254],[-73.942074188038887,40.776917846977142],[-73.942002667222781,40.776185317382648],[-73.942620205199006,40.775180871576474],[-73.94285645694552,40.774796600349191],[-73.94293043781397,40.774676268036011],[-73.945870899588215,40.771692257932997],[-73.946618690150586,40.77093339256956],[-73.948664164778933,40.768857624399587],[-73.950069793030679,40.767025088383498],[-73.954418260786071,40.762184104951245],[-73.95650786241211,40.760285256574043],[-73.958787773424007,40.758213471309809],[-73.973015157270069,40.764278692864671],[-73.955760332998182,40.787906554459667],[-73.944023,40.782960000000301],[-73.943592454622546,40.782747908206574]]]}),\\r\\n    ];\\r\\nlet Coordinates = \\r\\n    datatable(longitude:real, latitude:real)\\r\\n    [\\r\\n        real(-73.9741), 40.7914, // Upper West Side\\r\\n        real(-73.9950), 40.7340, // Greenwich Village\\r\\n        real(-73.9584), 40.7688, // Upper East Side\\r\\n    ];\\r\\nlet Level = 16;\\r\\nPolygons\\r\\n| extend covering = geo_polygon_to_s2cells(polygon, Level) // cover every polygon with s2 cell token array\\r\\n| mv-expand covering to typeof(string)                     // expand cells array such that every row will have one cell mapped to its polygon\\r\\n| join kind=inner hint.strategy=broadcast                  // assume that Polygons count is small (In some specific case)\\r\\n(\\r\\n    Coordinates\\r\\n    | extend covering = geo_point_to_s2cell(longitude, latitude, Level) // cover point with cell\\r\\n) on covering // join on the cell, this filters out rows of point and polygons where the point definitely does not belong to the polygon\\r\\n| where geo_point_in_polygon(longitude, latitude, polygon)\\r\\n| project longitude, latitude, description\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|longitude|latitude|description|\\r\\n|---|---|---|\\r\\n|-73.9741|40.7914|Upper West Side|\\r\\n|-73.995|40.734|Greenwich Village|\\r\\n|-73.9584|40.7688|Upper East Side|\\r\\n\\r\\nThe following example filters out polygons that don\\'t intersect with the area of the polygon of interest. The maximum error is diagonal of s2cell length. This example is based on a polygonized earth at night raster file.\\r\\n\\r\\n```\\r\\nlet intersection_level_hint = 7;\\r\\nlet area_of_interest = dynamic({\"type\": \"Polygon\",\"coordinates\": [[[-73.94966125488281,40.79698248639272],[-73.95841598510742,40.800426144169315],[-73.98124694824219,40.76806170936614],[-73.97283554077148,40.7645513650551],[-73.94966125488281,40.79698248639272]]]});\\r\\nlet area_of_interest_covering = geo_polygon_to_s2cells(area_of_interest, intersection_level_hint);\\r\\nEarthAtNight\\r\\n| project value = features.properties.DN, polygon = features.geometry\\r\\n| extend covering = geo_polygon_to_s2cells(polygon, intersection_level_hint)\\r\\n| mv-apply c = covering to typeof(string) on\\r\\n(\\r\\n    summarize is_intersects = take_anyif(1, array_index_of(area_of_interest_covering, c) != -1)\\r\\n)\\r\\n| where is_intersects == 1\\r\\n| count\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|Count|\\r\\n|---|\\r\\n|83|\\r\\n\\r\\nCount of cells that will be needed in order to cover some polygon with S2 cells of level 5.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAy2OwQrDIBBE7/0K8ZSABxvIJSH/0LuIiFlSqd0VNQcp/fcqzWVmeLMLE6CwSKEehGxje0X79m748FIj8IU//hUX3BGl3aMtkPmilJJCatF07naXV+hU6++43mLyWFiejIMQTKEXoHF0NrYxm5KtJgAe5TkcQOZa0M5MnvpDHi4k2DyO6w+pbpZDpgAAAA==\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nlet polygon = dynamic({\"type\":\"Polygon\",\"coordinates\":[[[0,0],[0,50],[100,50],[0,0]]]});\\r\\nprint s2_cell_token_count = array_length(geo_polygon_to_s2cells(polygon, 5));\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|s2_cell_token_count|\\r\\n|---|\\r\\n|286|\\r\\n\\r\\nCovering a large-area polygon with small-area cells returns null.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA8tJLVEoyM+pTM/PU7BVSKnMS8zNTNaoViqpLEhVslIKgEgp6Sgl5+cXpWTmJZakFitZRUdHG+gYxOoASVMQZWgAZYBEY2NrNa25Cooy80oU0lPz46HGx5fkxxcbJafm5BRrQIV0FIwNNK0BZqBOaoMAAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nlet polygon = dynamic({\"type\":\"Polygon\",\"coordinates\":[[[0,0],[0,50],[100,50],[0,0]]]});\\r\\nprint geo_polygon_to_s2cells(polygon, 30);\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|print_0|\\r\\n|---|\\r\\n||\\r\\n\\r\\nCovering a large-area polygon with small-area cells returns null.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA8tJLVEoyM+pTM/PU7BVSKnMS8zNTNaoViqpLEhVslIKgEgp6Sgl5+cXpWTmJZakFitZRUdHG+gYxOoASVMQZWgAZYBEY2NrNa25Cooy80oUMovzSnNyNNJT8+OhtsSX5McXGyWn5uQUa0CFdBSMDTQ1rQE1TEGniwAAAA==\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nlet polygon = dynamic({\"type\":\"Polygon\",\"coordinates\":[[[0,0],[0,50],[100,50],[0,0]]]});\\r\\nprint isnull(geo_polygon_to_s2cells(polygon, 30));\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|print_0|\\r\\n|---|\\r\\n|1|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/geo-polygon-to-s2cells-function\",\"geo-polygon-to-s2cells-function.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"geo_s2cell_neighbors\",\"Calculates S2 cell neighbors.\",\"Read more about [S2 cell hierarchy](https://s2geometry.io/devguide/s2cell_hierarchy).\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`geo_s2cell_neighbors(`*s2cell*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n|Name|Type|Required|Description|\\r\\n|--|--|--|--|\\r\\n| *s2cell* | string | &check; | S2 cell token value as it was calculated by [geo_point_to_s2cell()](geo-point-to-s2cell-function.md). The S2 cell token maximum string length is 16 characters.|\\r\\n\\r\\n## Returns\\r\\n\\r\\nAn array of S2 cell neighbors. If the S2 Cell is invalid, the query will produce a null result.\\r\\n\\r\\n> [!NOTE]\\r\\n> S2 Cell edges are spherical geodesics.\",'The following example calculates S2 cell neighbors.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAysoyswrUchLzUzPSMovKlawVUhPzY8vNkpOzcmJhwtrqFtYJhuZWqprAgC1Bx0UMAAAAA==\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint neighbors = geo_s2cell_neighbors(\\'89c259\\')\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|neighbors|\\r\\n|---|\\r\\n|[\"89c25d\",\"89c2f9\",\"89c251\",\"89c257\",\"89c25f\",\"89c25b\",\"89c2f7\",\"89c2f5\"]|\\r\\n\\r\\nThe following example calculates an array of input S2 cell with its neighbors.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA8tJLVEoNkpOzclRsFVQt7BMNjK1VLfmKijKzCtRAAkXA8UTi4oSK+OT8/OSE0s0ChKTs+PBIhoQjZo6Cump+fEQTnxeamZ6RlJ+UTFMVhMAzd7c0mMAAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nlet s2cell = \\'89c259\\';\\r\\nprint cells = array_concat(pack_array(s2cell), geo_s2cell_neighbors(s2cell))\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|cells|\\r\\n|---|\\r\\n|[\"89c259\",\"89c25d\",\"89c2f9\",\"89c251\",\"89c257\",\"89c25f\",\"89c25b\",\"89c2f7\",\"89c2f5\"]|\\r\\n\\r\\nThe following example calculates S2 cells polygons GeoJSON geometry collection.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA2WQ0UpDMQyG7/cUpTfrgXkzEBzilaCPUbIaa7e2KW0mHvHhTc/pcOBd8+fPlz+NyKrtHcaontT24eD294ft46bUkFl1uYkOtcJsHWUHbAq4s10Usw5OO+WR7FrYjMF/HKm2a3fa/Kj0eYdfBfLbQDIpngvSu2ksm3z3lEondKwKxdlT7ntvsEx2NMyC6BPtkhLU8I09oNgTnNHG0CTjYNxyBXZqlMV3BG/7FUb3EHqn9AsCX6o8tbgScp1F/W97Hc1nilGQgXJXx0jAJpUkkf/QsrRg5VX7A2VIC+iaT0/TL+9ZgYaBAQAA\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nlet s2cell = \\'89c259\\';\\r\\nprint cells = array_concat(pack_array(s2cell), geo_s2cell_neighbors(s2cell))\\r\\n| mv-expand cells to typeof(string)\\r\\n| project polygons = geo_s2cell_to_polygon(cells)\\r\\n| summarize arr = make_list(polygons)\\r\\n| project geojson = bag_pack(\"type\", \"Feature\",\"geometry\", bag_pack(\"type\", \"GeometryCollection\", \"geometries\", arr), \"properties\", bag_pack(\"name\", \"polygons\"))\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|geojson|\\r\\n|---|\\r\\n|{\"type\": \"Feature\",\"geometry\": {\"type\": \"GeometryCollection\",\"geometries\": [<br>  {\"type\": \"Polygon\",\"coordinates\": [[[  -74.030012249838478,  40.8012684339439],[  -74.030012249838478,  40.7222262918358],[  -73.935982114337421,  40.708880489804564],[  -73.935982114337421,  40.787917134506841],[  -74.030012249838478,  40.8012684339439]]]},<br>  {\"type\": \"Polygon\",\"coordinates\": [[[  -73.935982114337421,  40.708880489804564],[  -73.935982114337421,  40.629736433321796],[  -73.841906340776248,  40.616308079144915],[  -73.841906340776248,  40.695446474556284],[  -73.935982114337421,  40.708880489804564]]]},<br>  {\"type\": \"Polygon\",\"coordinates\": [[[  -74.1239959854733,  40.893471289549765],[  -74.1239959854733,  40.814531536204242],[  -74.030012249838478,  40.8012684339439],[  -74.030012249838478,  40.880202851376716],[  -74.1239959854733,  40.893471289549765]]]},<br>  {\"type\": \"Polygon\",\"coordinates\": [[[  -74.1239959854733,  40.735483949993387],[  -74.1239959854733,  40.656328734184143],[  -74.030012249838478,  40.643076628676461],[  -74.030012249838478,  40.7222262918358],[  -74.1239959854733,  40.735483949993387]]]},<br>  {\"type\": \"Polygon\",\"coordinates\": [[[  -74.1239959854733,  40.814531536204242],[  -74.1239959854733,  40.735483949993387],[  -74.030012249838478,  40.7222262918358],[  -74.030012249838478,  40.8012684339439],[  -74.1239959854733,  40.814531536204242]]]},<br>  {\"type\": \"Polygon\",\"coordinates\": [[[  -73.935982114337421,  40.787917134506841],[  -73.935982114337421,  40.708880489804564],[  -73.841906340776248,  40.695446474556284],[  -73.841906340776248,  40.774477568182071],[  -73.935982114337421,  40.787917134506841]]]},<br>  {\"type\": \"Polygon\",\"coordinates\": [[[  -74.030012249838478,  40.7222262918358],[  -74.030012249838478,  40.643076628676461],[  -73.935982114337421,  40.629736433321796],[  -73.935982114337421,  40.708880489804564],[  -74.030012249838478,  40.7222262918358]]]},<br>  {\"type\": \"Polygon\",\"coordinates\": [[[  -74.030012249838478,  40.880202851376716],[  -74.030012249838478,  40.8012684339439],[  -73.935982114337421,  40.787917134506841],[  -73.935982114337421,  40.866846163445771],[  -74.030012249838478,  40.880202851376716]]]},<br>  {\"type\": \"Polygon\",\"coordinates\": [[[  -73.935982114337421,  40.866846163445771],[  -73.935982114337421,  40.787917134506841],[  -73.841906340776248,  40.774477568182071],[  -73.841906340776248,  40.853401155678846],[  -73.935982114337421,  40.866846163445771]]]}]},<br>  \"properties\": {\"name\": \"polygons\"}}|\\r\\n\\r\\nThe following example calculates polygon unions that represent S2 cell and its neighbors.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA22PwQrCMAyG73uK3taBXgaCQ3yWUmusdW1T2kyc+PC2WwcevATyJ//3JxaIpV6BtezM2uOg+sPQnpoQjSdW5JR1GaOchUKvJPEg1SgWha/Gbsc0oFgb4cHo+wVj2qZd82HuuYdXkP5akYSM5gB444lyki47IeIDFLGAdtboS+4PllDUAV8QxZEm52Q0bygH5nUnRxDWpHxjZfzhVuzkDfoNmeo/uXZfEaCuxhEBAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nlet s2cell = \\'89c259\\';\\r\\nprint cells = array_concat(pack_array(s2cell), geo_s2cell_neighbors(s2cell))\\r\\n| mv-expand cells to typeof(string)\\r\\n| project polygons = geo_s2cell_to_polygon(cells)\\r\\n| summarize arr = make_list(polygons)\\r\\n| project polygon = geo_union_polygons_array(arr)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|polygon|\\r\\n|---|\\r\\n|{\"type\": \"Polygon\",\"coordinates\": [[[-73.841906340776248,40.695446474556284],[-73.841906340776248,40.774477568182071],[-73.841906340776248,40.853401155678846],[-73.935982114337421,40.866846163445771],[-74.030012249838478,40.880202851376716],[-74.1239959854733,40.893471289549758],[-74.1239959854733,40.814531536204242],[-74.1239959854733,40.735483949993387],[-74.1239959854733,40.656328734184143],[-74.030012249838478,40.643076628676461],[-73.935982114337421,40.629736433321796],[-73.841906340776248,40.616308079144915],[-73.841906340776248,40.695446474556284]]]}|\\r\\n\\r\\nThe following example returns true because of the invalid S2 Cell token input.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAysoyswrUcjMK0vMyUxRsFXILM4rzcnRSE/Njy82Sk7NyYnPS81Mz0jKLyrWUE9U19QEAB3YxNYxAAAA\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint invalid = isnull(geo_s2cell_neighbors(\\'a\\'))\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|invalid|\\r\\n|---|\\r\\n|1|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/geo-s2cell-neighbors-function\",\"geo-s2cell-neighbors-function.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"geo_s2cell_to_central_point\",\"Calculates the geospatial coordinates that represent the center of an S2 cell.\",\"Read more about [S2 cell hierarchy](https://s2geometry.io/devguide/s2cell_hierarchy).\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`geo_s2cell_to_central_point(`*s2cell*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n|Name|Type|Required|Description|\\r\\n|--|--|--|--|\\r\\n| *s2cell* | string | &check; | S2 cell token value as it was calculated by [geo_point_to_s2cell()](geo-point-to-s2cell-function.md). The S2 cell token maximum string length is 16 characters.|\\r\\n\\r\\n## Returns\\r\\n\\r\\nThe geospatial coordinate values in [GeoJSON Format](https://tools.ietf.org/html/rfc7946) and of a [dynamic](./scalar-data-types/dynamic.md) data type. If the S2 cell token is invalid, the query will produce a null result.\\r\\n\\r\\n> [!NOTE]\\r\\n> The GeoJSON format specifies longitude first and latitude second.\",'> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAysoyswrUSjIB5G2Cump+fHFRsmpOTnxJfnxyal5JUWJOfFgWQ0lQyNjE1MzcyVNrhqF1IqS1LwUheT8/KKUzLzEktRioG6wOj0kMYTCnPy89MyS0pRUoDIkBdEGsToKOYkl2KQMYwEypEkCnAAAAA==\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint point = geo_s2cell_to_central_point(\"1234567\")\\r\\n| extend coordinates = point.coordinates\\r\\n| extend longitude = coordinates[0], latitude = coordinates[1]\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|point|coordinates|longitude|latitude|\\r\\n|---|---|---|---|\\r\\n|{<br>  \"type\": \"Point\",<br>  \"coordinates\": [<br>    9.86830731850408,<br>    27.468392925827604<br>  ]<br>}|[<br>  9.86830731850408,<br>  27.468392925827604<br>]|9.86830731850408|27.4683929258276|\\r\\n\\r\\nThe following example returns a null result because of the invalid S2 cell token input.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAysoyswrUSjIB5G2Cump+fHFRsmpOTnxJfnxyal5JUWJOfFgWQ2lRCVNADb75CkuAAAA\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint point = geo_s2cell_to_central_point(\"a\")\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|point|\\r\\n|---|\\r\\n||',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/geo-s2cell-to-central-point-function\",\"geo-s2cell-to-central-point-function.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"geo_s2cell_to_polygon\",\"Calculates the polygon that represents the S2 Cell rectangular area.\",\"Read more about [S2 Cells](https://s2geometry.io/devguide/s2cell_hierarchy).\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`geo_s2cell_to_polygon(`*s2cell*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n|Name|Type|Required|Description|\\r\\n|--|--|--|--|\\r\\n| *s2cell* | string | &check; | S2 cell token value as it was calculated by [geo_point_to_s2cell()](geo-point-to-s2cell-function.md). The S2 cell token maximum string length is 16 characters.|\\r\\n\\r\\n## Returns\\r\\n\\r\\nPolygon in [GeoJSON Format](https://tools.ietf.org/html/rfc7946) and of a [dynamic](./scalar-data-types/dynamic.md) data type. If the s2cell is invalid, the query will produce a null result.\\r\\n\\r\\n> [!NOTE]\\r\\n> S2 Cell edges are spherical geodesics.\",'> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAysoyswrUSg2Sk7NyQnIz6lMz89TsFVIT82Ph4jFl+THF0DENZQsLJONTC2VNAF6g4+NNQAAAA==\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint s2cellPolygon = geo_s2cell_to_polygon(\"89c259\")\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|s2cellPolygon|\\r\\n|---|\\r\\n|{<br>\"type\": \"Polygon\",<br>\"coordinates\": [[[-74.030012249838478, 40.8012684339439], [-74.030012249838478, 40.7222262918358], [-73.935982114337421, 40.708880489804564], [-73.935982114337421, 40.787917134506841], [-74.030012249838478, 40.8012684339439]]]<br>}|\\r\\n\\r\\nThe following example assembles GeoJSON geometry collection of S2 Cell polygons.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA22QTW6DMBCF95xixAokN+KvYCplFSk9QJdVZTl0RGgMRrazoOrhO4AVorT2xp4335tnf0pH+6QwUkP7YlAqBkq65RQH7wHQeqryXf1cljxnUCQ7nlR1UrFNSkte1quU8jwt7iRepwVfpKrIsypnwUfwA6PRX9g4sJk4S3uGPbSoxai7wQmnhc0aVGoOtGRhkCbxX4r61dTqwdMrNOO+Hvm+GbXXvpem+8ZHWCjryKCXFxSqsy560O/nnmQrRtlcouV5oZtGDBmER5Tuaui4lilLj85MJN2AW++rFw9aKbLs9DBXPdKhpds/AWNvTUFGNG7t28wH2S/mbxkc6AvAkxaabUoc/wKv/5OK6QEAAA==\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\ndatatable(lng:real, lat:real)\\r\\n[\\r\\n    -73.956683, 40.807907,\\r\\n    -73.916869, 40.818314,\\r\\n    -73.989148, 40.743273,\\r\\n]\\r\\n| project s2_hash = geo_point_to_s2cell(lng, lat, 10)\\r\\n| project s2_hash_polygon = geo_s2cell_to_polygon(s2_hash)\\r\\n| summarize s2_hash_polygon_lst = make_list(s2_hash_polygon)\\r\\n| project bag_pack(\\r\\n    \"type\", \"Feature\",\\r\\n    \"geometry\", bag_pack(\"type\", \"GeometryCollection\", \"geometries\", s2_hash_polygon_lst),\\r\\n    \"properties\", bag_pack(\"name\", \"S2 Cell polygons collection\"))\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|Column1|\\r\\n|---|\\r\\n|{<br>\"type\": \"Feature\",<br>\"geometry\": {\"type\": \"GeometryCollection\", \"geometries\": [<br>{\"type\": \"Polygon\", \"coordinates\": [[[-74.030012249838478, 40.880202851376716], [-74.030012249838478, 40.8012684339439], [-73.935982114337421, 40.787917134506841], [-73.935982114337421, 40.866846163445771], [-74.030012249838478, 40.880202851376716]]]},<br>{\"type\": \"Polygon\", \"coordinates\": [[[-73.935982114337421, 40.866846163445771], [-73.935982114337421, 40.787917134506841], [-73.841906340776248, 40.774477568182071], [-73.841906340776248, 40.853401155678846], [-73.935982114337421, 40.866846163445771]]]},<br>{\"type\": \"Polygon\", \"coordinates\": [[[-74.030012249838478, 40.8012684339439], [-74.030012249838478, 40.7222262918358], [-73.935982114337421, 40.708880489804564], [-73.935982114337421, 40.787917134506841], [-74.030012249838478, 40.8012684339439]]]}]<br>},<br> \"properties\": {\"name\": \"S2 Cell polygons collection\"}<br>}|\\r\\n\\r\\nThe following example returns a null result because of the invalid s2cell token input.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAysoyswrUSg2Sk7NyQnIz6lMz89TsFVIT82Ph4jFl+THF0DENZQSlTQByV78WTAAAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint s2cellPolygon = geo_s2cell_to_polygon(\"a\")\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|s2cellPolygon|\\r\\n|---|\\r\\n||',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/geo-s2cell-to-polygon-function\",\"geo-s2cell-to-polygon-function.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"geo_simplify_polygons_array\",\"Simplifies polygons by replacing nearly straight chains of short edges with a single long edge on Earth.\",'## Syntax\\r\\n\\r\\n`geo_simplify_polygons_array(`*polygons*`,` *tolerance*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n|Name|Type|Required|Description|\\r\\n|--|--|--|--|\\r\\n| *polygon* | dynamic | &check; | Polygon or multipolygon in the [GeoJSON format](https://tools.ietf.org/html/rfc7946).|\\r\\n| *tolerance* | int, long, or real | | Defines minimum distance in meters between any two vertices. Supported values are in the range [0, ~7,800,000 meters]. If unspecified, the default value `10` is used.|\\r\\n\\r\\n## Returns\\r\\n\\r\\nSimplified polygon or a multipolygon in the [GeoJSON format](https://tools.ietf.org/html/rfc7946) and of a [dynamic](./scalar-data-types/dynamic.md) data type, with no two vertices with distance less than tolerance. If either the polygon or tolerance is invalid, the query will produce a null result.\\r\\n\\r\\n> [!NOTE]\\r\\n>\\r\\n> * If input is a single polygon, please see [geo_polygon_simplify()](geo-polygon-simplify-function.md).\\r\\n> * The geospatial coordinates are interpreted as represented by the [WGS-84](https://earth-info.nga.mil/index.php?dir=wgs84&action=wgs84) coordinate reference system.\\r\\n> * The [geodetic datum](https://en.wikipedia.org/wiki/Geodetic_datum) used for measurements on Earth is a sphere. Polygon edges are [geodesics](https://en.wikipedia.org/wiki/Geodesic) on the sphere.\\r\\n> * If input polygon edges are straight cartesian lines, consider using [geo_polygon_densify()](geo-polygon-densify-function.md) to convert planar edges to geodesics.\\r\\n> * If input is a multipolygon and contains more than one polygon, the result will be the area of polygons union.\\r\\n> * High tolerance may cause small polygon to disappear.\\r\\n\\r\\n**Polygon definition and constraints**\\r\\n\\r\\ndynamic({\"type\": \"Polygon\",\"coordinates\": [ LinearRingShell, LinearRingHole_1, ..., LinearRingHole_N ]})\\r\\n\\r\\ndynamic({\"type\": \"MultiPolygon\",\"coordinates\": [[ LinearRingShell, LinearRingHole_1, ..., LinearRingHole_N ], ..., [LinearRingShell, LinearRingHole_1, ..., LinearRingHole_M]]})\\r\\n\\r\\n* LinearRingShell is required and defined as a `counterclockwise` ordered array of coordinates [[lng_1,lat_1],...,[lng_i,lat_i],...,[lng_j,lat_j],...,[lng_1,lat_1]]. There can be only one shell.\\r\\n* LinearRingHole is optional and defined as a `clockwise` ordered array of coordinates [[lng_1,lat_1],...,[lng_i,lat_i],...,[lng_j,lat_j],...,[lng_1,lat_1]]. There can be any number of interior rings and holes.\\r\\n* LinearRing vertices must be distinct with at least three coordinates. The first coordinate must be equal to the last. At least four entries are required.\\r\\n* Coordinates [longitude, latitude] must be valid. Longitude must be a real number in the range [-180, +180] and latitude must be a real number in the range [-90, +90].\\r\\n* LinearRingShell encloses at most half of the sphere. LinearRing divides the sphere into two regions. The smaller of the two regions will be chosen.\\r\\n* LinearRing edge length must be less than 180 degrees. The shortest edge between the two vertices will be chosen.\\r\\n* LinearRings must not cross and must not share edges. LinearRings may share vertices.','The following example simplifies polygons with mutual borders (USA states), by removing vertices that are within a 100-meter distance from each other.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA2XMMQ6DMAyF4b2n8AgSQnCAngJ1tqzKoNC4iWwzpOLw9dBOrE/f+x8LLk7Odjuhatn56VBLblt5wx1WJj+Ubdy4CLu2UHaIkKYPQzYPI/RizMm8+/36a8rCRQItSc1pbfjfkVSpdVEaYJ6m/gsta1dmjwAAAA==\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nUS_States\\r\\n| project polygon = features.geometry\\r\\n| summarize lst = make_list(polygon)\\r\\n| project polygons = geo_simplify_polygons_array(lst, 100)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|polygons|\\r\\n|---|\\r\\n|{ \"type\": \"MultiPolygon\", \"coordinates\": [ ... ]]}|\\r\\n\\r\\nThe following example returns True because one of the polygons is invalid.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA6WR3WqEMBCF732KkCsFu8T8qrDvsPcikmq6pI1GTLZgf9692WYVr9sEAvPNzOEcMkgf7rNR6WzNerWTq4d1kqPus6RJQDiPMv2Efp0VrOElDsIc9tYug56kVw7WTdM8CXKqaMVyik6i4lWbR8RKJO6sRIiXGywxKn4HeYnZBgUpRISU7fCo2LbfWf43XxzjKIPpf3QEIdGOwIJuFivCo21O0J6lEDEg4+wQ8Lh9d5G0yRdwt3GUi/5QQC4LOINRvqnOaOf3b8nC1LzYV9V7oF2np3dp9NA92mFFu+lmTHpVtnN6nI1+Wbeu64KqXNPwZtkPN6O8sPIBAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\ndatatable(polygons:dynamic)\\r\\n[\\r\\n    dynamic({\"type\":\"Polygon\",\"coordinates\":[[[-73.9495,40.7969],[-73.95807,40.80068],[-73.98201,40.76825],[-73.97317,40.76455],[-73.9495,40.7969]]]}),\\r\\n    dynamic({\"type\":\"Polygon\",\"coordinates\":[[[-73.94622,40.79249]]]}),\\r\\n    dynamic({\"type\":\"Polygon\",\"coordinates\":[[[-73.97335,40.77274],[-73.9936,40.76630],[-73.97171,40.75655],[-73.97335,40.77274]]]})\\r\\n]\\r\\n| summarize arr = make_list(polygons)\\r\\n| project is_invalid_polygon = isnull(geo_simplify_polygons_array(arr))\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|is_invalid_polygon|\\r\\n|---|\\r\\n|1|\\r\\n\\r\\nThe following example returns True because of the invalid tolerance.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA52RzW6EIBSF9z4FYaWJM0GQH036Dt0bY6jSCVMUI87C/rx7sYxkuh1ICHw59+TcyyBXv9+MSmdrtoudXD1skxx1nyVNAvy6P9MvuG6zgjV8DUKYw97aZdCTXJWDddM0J07OVVnRvERnXrGqzQOiAvGdCYSYOKDAqPgTMoHpATkpeIAljfDRsW1/svy5XAzjYIPLmIwJIe5Q4BiXhwxcRN3/4udDcEJCLxzz8jCvCAs9M4LiIAoepkMZfZjOY/WeImmTb+Bu4ygX/amAXBbwAkb5oTqj3Rr/NPOqebFX1a9Au266GeN12u2X9KJs5/Q4G/2+dUdF563klvozB6ciy34BttDM2igCAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\ndatatable(polygons:dynamic)\\r\\n[\\r\\n    dynamic({\"type\":\"Polygon\",\"coordinates\":[[[-73.9495,40.7969],[-73.95807,40.80068],[-73.98201,40.76825],[-73.97317,40.76455],[-73.9495,40.7969]]]}),\\r\\n    dynamic({\"type\":\"Polygon\",\"coordinates\":[[[-73.94622,40.79249],[-73.96888,40.79282],[-73.9577,40.7789],[-73.94622,40.79249]]]}),\\r\\n    dynamic({\"type\":\"Polygon\",\"coordinates\":[[[-73.97335,40.77274],[-73.9936,40.76630],[-73.97171,40.75655],[-73.97335,40.77274]]]})\\r\\n]\\r\\n| summarize arr = make_list(polygons)\\r\\n| project is_null = isnull(geo_simplify_polygons_array(arr, -1))\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|is_null|\\r\\n|---|\\r\\n|1|\\r\\n\\r\\nThe following example returns True because high tolerance causes polygon to disappear.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA52RzW6EIBSF9z4FYaWJnSDIjyZ9h+6NMVTphBbFiLOwP+9eLCOx24GEwJdzT869DHL1+9WodLZmu9rJ1cM2yVH3WdIkwK/7M/2C6zYrWMOXIIQ57K1dBj3JVTlYN03zxMmlKiual+jCK1a1eUBUIL4zgRATBxQYFX9CJjA9ICcFD7CkEZ4d2/Ynyx/LxTAONriMyZgQ4g4FjnF5yMBF1P0vfjwEJyT0wjEvD/OKsNAzIygOouBhOpTR03TO1XuKpE2+gbuNo1z0pwJyWcAzGOWH6ox2a/zTzKvmxb6rfgXaddPNGK/Tbr+kV2U7p8fZ6LetOyo6byW31J85KJBfWfYLADokJCsCAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\ndatatable(polygons:dynamic)\\r\\n[\\r\\n    dynamic({\"type\":\"Polygon\",\"coordinates\":[[[-73.9495,40.7969],[-73.95807,40.80068],[-73.98201,40.76825],[-73.97317,40.76455],[-73.9495,40.7969]]]}),\\r\\n    dynamic({\"type\":\"Polygon\",\"coordinates\":[[[-73.94622,40.79249],[-73.96888,40.79282],[-73.9577,40.7789],[-73.94622,40.79249]]]}),\\r\\n    dynamic({\"type\":\"Polygon\",\"coordinates\":[[[-73.97335,40.77274],[-73.9936,40.76630],[-73.97171,40.75655],[-73.97335,40.77274]]]})\\r\\n]\\r\\n| summarize arr = make_list(polygons)\\r\\n| project is_null = isnull(geo_simplify_polygons_array(arr, 10000))\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|is_null|\\r\\n|---|\\r\\n|1|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/geo-simplify-polygons-array-function\",\"geo-simplify-polygons-array-function.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"geo_union_lines_array\",\"Calculates the union of lines or multilines on Earth.\",'## Syntax\\r\\n\\r\\n`geo_union_lines_array(`*lineStrings*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n|Name|Type|Required|Description|\\r\\n|--|--|--|--|\\r\\n| *lineStrings* | dynamic | &check; | An array of lines or multilines in the [GeoJSON format](https://tools.ietf.org/html/rfc7946).|\\r\\n\\r\\n## Returns\\r\\n\\r\\nA line or a multiline in [GeoJSON Format](https://tools.ietf.org/html/rfc7946) and of a [dynamic](./scalar-data-types/dynamic.md) data type. If any of the provided lines or multilines is invalid, the query will produce a null result.\\r\\n\\r\\n> [!NOTE]\\r\\n>\\r\\n> * The geospatial coordinates are interpreted as represented by the [WGS-84](https://earth-info.nga.mil/index.php?dir=wgs84&action=wgs84) coordinate reference system.\\r\\n> * The [geodetic datum](https://en.wikipedia.org/wiki/Geodetic_datum) used for measurements on Earth is a sphere. Polygon edges are [geodesics](https://en.wikipedia.org/wiki/Geodesic) on the sphere.\\r\\n> * If input line edges are straight cartesian lines, consider using [geo_line_densify()](geo-line-densify-function.md) in order to convert planar edges to geodesics.\\r\\n\\r\\n**LineString definition and constraints**\\r\\n\\r\\ndynamic({\"type\": \"LineString\",\"coordinates\": [[lng_1,lat_1], [lng_2,lat_2], ..., [lng_N,lat_N]]})\\r\\n\\r\\ndynamic({\"type\": \"MultiLineString\",\"coordinates\": [[line_1, line_2, ..., line_N]]})\\r\\n\\r\\n* LineString coordinates array must contain at least two entries.\\r\\n* Coordinates [longitude, latitude] must be valid where longitude is a real number in the range [-180, +180] and latitude is a real number in the range [-90, +90].\\r\\n* Edge length must be less than 180 degrees. The shortest edge between the two vertices will be chosen.','The following example performs geospatial union on line rows.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA8WSSWrEMBBF9z6F0coGp1FpbkNukF2WxhjFFo06ttTI6oUz3D1KPBwgBFK1KX3eLz6oBh1Tv4ymGK0zcz0sTk+2L7Mmy1Ntz+IdxeVmUI2eEvUcg3UXVKHe+zBYp6OZUd00D5KezlwoqhQTBAvBK4ZPCnNM1BmYwklvqx2jVBJJgSR1wyR8N4CUB8WSkQvCBKh9GWCCMaNAAdr2s6x+nfMvAuwYp5JRgbFinK4YY5A0SFYO/P+DpgBZm33k832adLBvJv/5706HkD/mk3413WjnuF5BmcBb8FfTxw27O+tdAi/Gr3N32PVSHHP5BY0haIxPAgAA\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\ndatatable(lines:dynamic)\\r\\n[\\r\\n    dynamic({\"type\":\"LineString\",\"coordinates\":[[-73.95683884620665,40.80502891480884],[-73.95633727312088,40.8057171711177],[-73.95489156246185,40.80510200431311]]}),\\r\\n    dynamic({\"type\":\"LineString\",\"coordinates\":[[-73.95633727312088,40.8057171711177],[-73.95489156246185,40.80510200431311],[-73.95537436008453,40.804413741624515]]}),\\r\\n    dynamic({\"type\":\"LineString\",\"coordinates\":[[-73.95633727312088,40.8057171711177],[-73.95489156246185,40.80510200431311]]})\\r\\n]\\r\\n| summarize lines_arr = make_list(lines)\\r\\n| project lines_union = geo_union_lines_array(lines_arr)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|lines_union|\\r\\n|---|\\r\\n|{\"type\": \"LineString\", \"coordinates\": [[-73.956838846206651, 40.805028914808844], [-73.95633727312088, 40.8057171711177], [ -73.954891562461853, 40.80510200431312], [-73.955374360084534, 40.804413741624522]]}|\\r\\n\\r\\nThe following example performs geospatial union on line columns.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA62Rz2rDMAzG73kK41MDXrH8v4G9QW87hlC8xBRvnR1c9xC2vfucJulltzHrok/8PklYg80lXi9ud/HBQTNMwX74nqBZsk3WVVuh8la5+8R5Gh1u8LFQLzn5cMYE9zGmwQeb3RU3bfuk+f4gleHGCMWoUpIIujdUUmYOIAwt9Y5sGOeaaQ6sVFdMwxwAWj8oUYxSMaHAbM2AMkoFBw7Qdd81+dOO/zF8wyTXgitKjZB8wYSAUoNilSDnJauu+kJjim+uz/ePvp5sSugZjbZ/n1M7LedYz1D/wm/Bx1AMZxeX/PRos3rvef0DcJZ9Yt8BAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\ndatatable(line1:dynamic, line2:dynamic)\\r\\n[\\r\\n    dynamic({\"type\":\"LineString\",\"coordinates\":[[-73.95683884620665,40.80502891480884],[-73.95633727312088,40.8057171711177],[-73.95489156246185,40.80510200431311]]}), dynamic({\"type\":\"LineString\",\"coordinates\":[[-73.95633727312088,40.8057171711177],[-73.95489156246185,40.80510200431311],[-73.95537436008453,40.804413741624515]]})\\r\\n]\\r\\n| project lines_arr = pack_array(line1, line2)\\r\\n| project lines_union = geo_union_lines_array(lines_arr)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|lines_union|\\r\\n|---|\\r\\n|{\"type\": \"LineString\", \"coordinates\":[[-73.956838846206651, 40.805028914808844], [-73.95633727312088, 40.8057171711177], [-73.954891562461853, 40.80510200431312], [-73.955374360084534, 40.804413741624522]]}|\\r\\n\\r\\nThe following example returns True because one of the lines is invalid.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA5WQzWrFIBCF93kKcZVAenHUqDfQN+iuyxCCTeTirdGLMYX0591r70/2ndnMHL5zGGbSKfebM6Wz3izttHk927EqugLluq/lF07bxeAWv2TqNUXrT7jGYwhxsl4ns+C2654kOxwboZhSXFAiRFNzclCkIVQdgSuS9b5+YIxJKhnQrN4xCX8NIOVO8WxsBOUC1CMMCCWEM2AAff9T1f+/E2p0tRZ98Y2WdZ51tJ8GXR8w6BjRM5r1uxmcXdLtLVUGLzGczZiQ9R/a2WlYvQ0+o3bxq3PlyYSbNOw5eiv3uap+AQk/yOdqAQAA\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\ndatatable(lines:dynamic)\\r\\n[\\r\\n    dynamic({\"type\":\"LineString\",\"coordinates\":[[-73.95683884620665,40.80502891480884],[-73.95633727312088,40.8057171711177],[-73.95489156246185,40.80510200431311]]}),\\r\\n    dynamic({\"type\":\"LineString\",\"coordinates\":[[1, 1]]})\\r\\n]\\r\\n| summarize lines_arr = make_list(lines)\\r\\n| project invalid_union = isnull(geo_union_lines_array(lines_arr))\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|invalid_union|\\r\\n|---|\\r\\n|True|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/geo-union-lines-array-function\",\"geo-union-lines-array-function.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"geo_union_polygons_array\",\"Calculates the union of polygons or multipolygons on Earth.\",'## Syntax\\r\\n\\r\\n`geo_union_polygons_array(`*polygons*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n|Name|Type|Required|Description|\\r\\n|--|--|--|--|\\r\\n| *polygons* | dynamic | &check; | An array of polygons or multipolygons in the [GeoJSON format](https://tools.ietf.org/html/rfc7946).|\\r\\n\\r\\n## Returns\\r\\n\\r\\nA polygon or a multipolygon in [GeoJSON Format](https://tools.ietf.org/html/rfc7946) and of a [dynamic](./scalar-data-types/dynamic.md) data type. If any of the provided polygons or multipolygons is invalid, the query will produce a null result.\\r\\n\\r\\n> [!NOTE]\\r\\n>\\r\\n> * The geospatial coordinates are interpreted as represented by the [WGS-84](https://earth-info.nga.mil/index.php?dir=wgs84&action=wgs84) coordinate reference system.\\r\\n> * The [geodetic datum](https://en.wikipedia.org/wiki/Geodetic_datum) used for measurements on Earth is a sphere. Polygon edges are [geodesics](https://en.wikipedia.org/wiki/Geodesic) on the sphere.\\r\\n> * If input polygon edges are straight cartesian lines, consider using [geo_polygon_densify()](geo-polygon-densify-function.md) to convert planar edges to geodesics.\\r\\n\\r\\n**Polygon definition and constraints**\\r\\n\\r\\ndynamic({\"type\": \"Polygon\",\"coordinates\": [ LinearRingShell, LinearRingHole_1, ..., LinearRingHole_N ]})\\r\\n\\r\\ndynamic({\"type\": \"MultiPolygon\",\"coordinates\": [[ LinearRingShell, LinearRingHole_1, ..., LinearRingHole_N], ..., [LinearRingShell, LinearRingHole_1, ..., LinearRingHole_M]]})\\r\\n\\r\\n* LinearRingShell is required and defined as a `counterclockwise` ordered array of coordinates [[lng_1,lat_1],...,[lng_i,lat_i],...,[lng_j,lat_j],...,[lng_1,lat_1]]. There can be only one shell.\\r\\n* LinearRingHole is optional and defined as a `clockwise` ordered array of coordinates [[lng_1,lat_1],...,[lng_i,lat_i],...,[lng_j,lat_j],...,[lng_1,lat_1]]. There can be any number of interior rings and holes.\\r\\n* LinearRing vertices must be distinct with at least three coordinates. The first coordinate must be equal to the last. At least four entries are required.\\r\\n* Coordinates [longitude, latitude] must be valid. Longitude must be a real number in the range [-180, +180] and latitude must be a real number in the range [-90, +90].\\r\\n* LinearRingShell encloses at most half of the sphere. LinearRing divides the sphere into two regions. The smaller of the two regions will be chosen.\\r\\n* LinearRing edge length must be less than 180 degrees. The shortest edge between the two vertices will be chosen.\\r\\n* LinearRings must not cross and must not share edges. LinearRings may share vertices.','The following example performs geospatial union on polygon rows.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA52Ry26DMBBF93yF5RVINDJ+jUHKP2SPEHLBimjBRkAW9PHvJXVw6Tb2xnN0fXVnptXLdl97E4+uX6/OzkW7Wj10TRKVEdrOo4w/8bKOBhf44oU4xY1zU9tZvZgZF2VZvgA75TwXKScnyGVepR4JReDOFCFS7VBRkv0KpaJih8Ay8JCLAI+OVfWdpM/lkpR6G8pDMqmUekBFQ1zwGUAF3f/Pz4cAxnwvQIHv5jmTvmfJSBhEBn46QorDdI6/7ymiKvpC820Y9NR9GLTvsNbThM5o0O+m7rt5CctNNvk4uTfTLH/im+2c3eRX4/y7PvroNT6WyQ/35ucGMgIAAA==\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\ndatatable(polygons:dynamic)\\r\\n[\\r\\n    dynamic({\"type\":\"Polygon\",\"coordinates\":[[[-73.9495,40.7969],[-73.95807,40.80068],[-73.98201,40.76825],[-73.97317,40.76455],[-73.9495,40.7969]]]}),\\r\\n    dynamic({\"type\":\"Polygon\",\"coordinates\":[[[-73.94622,40.79249],[-73.96888,40.79282],[-73.9577,40.7789],[-73.94622,40.79249]]]}),\\r\\n    dynamic({\"type\":\"Polygon\",\"coordinates\":[[[-73.97335,40.77274],[-73.9936,40.76630],[-73.97171,40.75655],[-73.97335,40.77274]]]})\\r\\n]\\r\\n| summarize polygons_arr = make_list(polygons)\\r\\n| project polygons_union = geo_union_polygons_array(polygons_arr)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|polygons_union|\\r\\n|---|\\r\\n|{\"type\":\"Polygon\",\"coordinates\":[[[-73.972599326729608,40.765330371902991],[-73.960302383706178,40.782140794645024],[-73.9577,40.7789],[-73.94622,40.79249],[-73.9526593223173,40.792584227716468],[-73.9495,40.7969],[-73.95807,40.80068],[-73.9639277517478,40.792748258673875],[-73.96888,40.792819999999992],[-73.9662719791645,40.7895734224338],[-73.9803360309571,40.770518810606404],[-73.9936,40.7663],[-73.97171,40.756550000000004],[-73.972599326729608,40.765330371902991]]]}|\\r\\n\\r\\nThe following example performs geospatial union on polygon columns.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA5WQTQ6CMBCF95yi6QqSakqFdiDxDu4JIRUagz8tAVwQ9e6ChaqJG9vNzJeZNy+vkv3492flN+Y8HIwO02rQ8lKXBM2ELSTwMg+Nb279G+6HRuEU7+wgJrg0pq1qLXvV4TTLspXYrJMoiUlE1yLhSU4sioGKiQGlHBYIjIavQQ4sXqDYhMLCKHbwUzHPHwH53xNnzEqwyLniADBDYM6qsPcFuLnv5cmAl3t31LTmqMp+ya0rZNuiLWpkeZpKObiM39kGv/auujZ63DwoY+viU/Kt82qDJ6h5+jHDAQAA\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\ndatatable(polygon1:dynamic, polygon2:dynamic)\\r\\n[\\r\\n    dynamic({\"type\":\"Polygon\",\"coordinates\":[[[-73.9495,40.7969],[-73.95807,40.80068],[-73.98201,40.76825],[-73.97317,40.76455],[-73.9495,40.7969]]]}), dynamic({\"type\":\"Polygon\",\"coordinates\":[[[-73.94622,40.79249],[-73.96888,40.79282],[-73.9577,40.7789],[-73.94622,40.79249]]]})\\r\\n]\\r\\n| project polygons_arr = pack_array(polygon1, polygon2)\\r\\n| project polygons_union = geo_union_polygons_array(polygons_arr)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|polygons_union|\\r\\n|---|\\r\\n|{\"type\":\"Polygon\",\"coordinates\":[[[-73.9495,40.7969],[-73.95807,40.80068],[-73.9639277517478,40.792748258673875],[-73.96888,40.792819999999992],[-73.9662719791645,40.7895734224338],[-73.98201,40.76825],[-73.97317,40.76455],[-73.960302383706178,40.782140794645024],[-73.9577,40.7789],[-73.94622,40.79249],[-73.9526593223173,40.792584227716468],[-73.9495,40.7969]]]}|\\r\\n\\r\\nThe following example returns True because one of the polygons is invalid.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA52QzYqDMBRG9z5FyMqALTH+JAp9h+5FJKOhZCYmksSCbefdxzZjcd17V/dw+Lh8A/frfikRT0YtF6NdPSyaj7JHUROBdf7P+A79MglYw3MQYQJ7Y+wgNffCwbppmgPNjlVeFUmOj7QqqzYJqGCYPhnDuGQbZASnL7FkpNggzVIaYF684T6xbX9R8tlfJSEhhuQhJ2qjB3DzOHIrbwJsBXTcWnACI/8RnZLOv5tBqz5Z8y16D6S+ciWHbtbS6NWWTs9KxRdhAur2aXyJ9ydCf8U93vV2AQAA\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\ndatatable(polygons:dynamic)\\r\\n[\\r\\n    dynamic({\"type\":\"Polygon\",\"coordinates\":[[[-73.9495,40.7969],[-73.95807,40.80068],[-73.98201,40.76825],[-73.97317,40.76455],[-73.9495,40.7969]]]}),\\r\\n    dynamic({\"type\":\"Polygon\",\"coordinates\":[[[-73.94622,40.79249]]]})\\r\\n]\\r\\n| summarize polygons_arr = make_list(polygons)\\r\\n| project invalid_union = isnull(geo_union_polygons_array(polygons_arr))\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|invalid_union|\\r\\n|---|\\r\\n|True|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/geo-union-polygons-array-function\",\"geo-union-polygons-array-function.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.OperatorToken,\"getschema\",\"Produce a table that represents a tabular schema of the input.\",\"## Syntax\\r\\n\\r\\n*T* `|` `getschema`\",'> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAwsuyS/KdS1LzSsp5qpRSE8tKU7OSM1NBADhHoKkFwAAAA==\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nStormEvents\\r\\n| getschema\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|ColumnName|ColumnOrdinal|DataType|ColumnType|\\r\\n|---|---|---|---|\\r\\n|StartTime|0|System.DateTime|datetime|\\r\\n|EndTime|1|System.DateTime|datetime|\\r\\n|EpisodeId|2|System.Int32|int|\\r\\n|EventId|3|System.Int32|int|\\r\\n|State|4|System.String|string|\\r\\n|EventType|5|System.String|string|\\r\\n|InjuriesDirect|6|System.Int32|int|\\r\\n|InjuriesIndirect|7|System.Int32|int|\\r\\n|DeathsDirect|8|System.Int32|int|\\r\\n|DeathsIndirect|9|System.Int32|int|\\r\\n|DamageProperty|10|System.Int32|int|\\r\\n|DamageCrops|11|System.Int32|int|\\r\\n|Source|12|System.String|string|\\r\\n|BeginLocation|13|System.String|string|\\r\\n|EndLocation|14|System.String|string|\\r\\n|BeginLat|15|System.Double|real|\\r\\n|BeginLon|16|System.Double|real|\\r\\n|EndLat|17|System.Double|real|\\r\\n|EndLon|18|System.Double|real|\\r\\n|EpisodeNarrative|19|System.String|string|\\r\\n|EventNarrative|20|System.String|string|\\r\\n|StormSummary|21|System.Object|dynamic|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/getschemaoperator\",\"getschemaoperator.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"gettype\",\"Returns the runtime type of its single argument.\",\"The runtime type may be different than the nominal (static) type for expressions whose nominal type is `dynamic`; in such cases `gettype()` can be useful to reveal the type of the actual value (how the value is encoded in memory).\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`gettype(`*value*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *value* | scalar | &check; | The value for which to find the type. |\\r\\n\\r\\n## Returns\\r\\n\\r\\nA string representing the runtime type of *value*.\",\"|Expression                          |Returns      |\\r\\n|------------------------------------|-------------|\\r\\n|`gettype(\\\"a\\\")`                      |`string`     |\\r\\n|`gettype(111)`                      |`long`       |\\r\\n|`gettype(1==1)`                     |`bool`       |\\r\\n|`gettype(now())`                    |`datetime`   |\\r\\n|`gettype(1s)`                       |`timespan`   |\\r\\n|`gettype(parse_json('1'))`           |`int`        |\\r\\n|`gettype(parse_json(' \\\"abc\\\" '))`     |`string`     |\\r\\n|`gettype(parse_json(' {\\\"abc\\\":1} '))` |`dictionary` |\\r\\n|`gettype(parse_json(' [1, 2, 3] '))` |`array`      |\\r\\n|`gettype(123.45)`                   |`real`       |\\r\\n|`gettype(guid(12e8b78d-55b4-46ae-b068-26d7a0080254))`|`guid`|\\r\\n|`gettype(parse_json(''))`            |`null`|\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/gettypefunction\",\"gettypefunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"getyear\",\"Returns the year part of the `datetime` argument.\",\"## Syntax\\r\\n\\r\\n`getyear(`*date*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *date* | datetime | &check; | The date for which to get the year. |\\r\\n\\r\\n## Returns\\r\\n\\r\\nThe year that contains the given *date*.\",'> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAysoyswrUahMTSxSsFVITy0BsTRSEktSSzJzUzWMDAxNdQ0NdA2NNDUB6MDMlCoAAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint year = getyear(datetime(2015-10-12))\\r\\n```\\r\\n\\r\\n|year|\\r\\n|--|\\r\\n|2015|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/getyearfunction\",\"getyearfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.OperatorToken,\"has\",\"Filters a record set for data with a case-insensitive string. `has` searches for indexed terms, where an indexed [term](datatypes-string-operators.md#what-is-a-term) is three or more characters. If your term is fewer than three characters, the query scans the values in the column, which is slower than looking up the term in the term index.\",\"[!INCLUDE [has-operator-comparison](../../includes/has-operator-comparison.md)]\\r\\n\\r\\n## Performance tips\\r\\n\\r\\n[!INCLUDE [performance-tip-note](../../includes/performance-tip-note.md)]\\r\\n\\r\\nWhen possible, use the case-sensitive [has_cs](has-cs-operator.md).\\r\\n\\r\\n## Syntax\\r\\n\\r\\n*T* `|` `where` *Column* `has` `(`*Expression*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *T* | string | &check; | The tabular input whose records are to be filtered.|\\r\\n| *Column* | string | &check; | The column used to filter the records.|\\r\\n| *Expression* | scalar or tabular | &check; | An expression for which to search. If the value is a tabular expression and has multiple columns, the first column is used.|\\r\\n\\r\\n## Returns\\r\\n\\r\\nRows in *T* for which the predicate is `true`.\",'> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAwsuyS/KdS1LzSsp5qpRKC7NzU0syqxKVUgFCcUn55fmldiCSQ1NhaRKheCSxJJUoMLyjNSiVAhPISOxWEHJL7VcCS6OpFnBTsHQAChRUJSflZpcAtGig6wCANR4w8uCAAAA\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nStormEvents\\r\\n| summarize event_count=count() by State\\r\\n| where State has \"New\"\\r\\n| where event_count > 10\\r\\n| project State, event_count\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|State|event_count|\\r\\n|-----|-----------|\\r\\n|NEW YORK|1,750|\\r\\n|NEW JERSEY|1,044|\\r\\n|NEW MEXICO|527|\\r\\n|NEW HAMPSHIRE|394|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/has-operator\",\"has-operator.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.OperatorToken,\"has_all\",\"Filters a record set for data with one or more case-insensitive search strings. `has_all` searches for indexed terms, where an indexed [term](datatypes-string-operators.md#what-is-a-term) is three or more characters. If your term is fewer than three characters, the query scans the values in the column, which is slower than looking up the term in the term index.\",\"For more information about other operators and to determine which operator is most appropriate for your query, see [datatype string operators](datatypes-string-operators.md).\\r\\n\\r\\n## Syntax\\r\\n\\r\\n*T* `|` `where` *col* `has_all` `(`*expression*`,` ... `)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *T* | string | &check; | The tabular input to filter.|\\r\\n| *col* | string | &check; | The column by which to filter.|\\r\\n| *expression* | scalar or tabular | &check; |An expression that specifies the values for which to search. Each expression can be a [scalar value](scalar-data-types/index.md) or a [tabular expression](tabularexpressionstatements.md) that produces a set of values. If a tabular expression has multiple columns, the first column is used. The search will consider up to 256 distinct values.|\\r\\n\\r\\n## Returns\\r\\n\\r\\nRows in *T* for which the predicate is `true`.\",'### Set of scalars\\r\\n\\r\\nThe following query shows how to use `has_all` with a comma-separated set of scalar values.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAx2NsQ7CMAxEd77CytRKbMxMqCsL7Mi0hkRK7Mh2i4r4eJoup7vT093NRcuwELvB4QefSEow1GQy0RVV0dNCENEemDN0YZQ8hSMEcxV+N4cvJ2URbiFiyqHfhmwuBTV9CS4ys5/Hpl0PzxX2t/taacNcKpxauVN/jkW/jI0AAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nStormEvents \\r\\n| where EpisodeNarrative has_all (\"cold\", \"strong\", \"afternoon\", \"hail\")\\r\\n| summarize Count=count() by EventType\\r\\n| top 3 by Count\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|EventType|Count|\\r\\n|---|---|\\r\\n|Thunderstorm Wind|517|\\r\\n|Hail|392|\\r\\n|Flash Flood|24|\\r\\n\\r\\n### Dynamic array\\r\\n\\r\\nThe same result can be achieved using a dynamic array notation.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAx2NsQoCMRBEe8F/WFJdwM7aSq610U4OWXOrF0h2j83eScSPl1wzzAyPmauJ5n4ltgL73Q8+EylBP8ciI11QFS2uBBOWB6YE3VgZcwzd3QVJozuAK6bC7+bwZaQswi1MGJMbvG+jZckZNX4JzrKwnULTzsOzwnZ9qzM1zmSGY2s37A8IXzPSmwAAAA==\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nStormEvents \\r\\n| where EpisodeNarrative has_all (dynamic([\"cold\", \"strong\", \"afternoon\", \"hail\"]))\\r\\n| summarize Count=count() by EventType\\r\\n| top 3 by Count\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|EventType|Count|\\r\\n|---|---|\\r\\n|Thunderstorm Wind|517|\\r\\n|Hail|392|\\r\\n|Flash Flood|24|\\r\\n\\r\\nThe same query can also be written with a [let statement](letstatement.md).\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAzWNsQrCQBBE+3zFclUCdpaSStLaaCci62U1C3e3YW8Tifjx5gI2w8zwmAlk4JWNlBFa6JeEkX19dV5C73bgsqmkV3H4XKkkkkoYkIO7NYfqbKKxmylZhuoL74GUoBs5S08nVEXjmWDAfMcQoP5/NSubpxhR+UNwlClZ64vWDTwW2AYvy0grZjLCvpQb9QMQPEgrsQAAAA==\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nlet criteria = dynamic([\"cold\", \"strong\", \"afternoon\", \"hail\"]);\\r\\nStormEvents \\r\\n| where EpisodeNarrative has_all (criteria)\\r\\n| summarize Count=count() by EventType\\r\\n| top 3 by Count\\r\\n```\\r\\n\\r\\n|EventType|Count|\\r\\n|---|---|\\r\\n|Thunderstorm Wind|517|\\r\\n|Hail|392|\\r\\n|Flash Flood|24|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/has-all-operator\",\"has-all-operator.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.OperatorToken,\"has_any\",\"Filters a record set for data with any set of case-insensitive strings. `has_any` searches for indexed terms, where an indexed [term](datatypes-string-operators.md#what-is-a-term) is three or more characters. If your term is fewer than three characters, the query scans the values in the column, which is slower than looking up the term in the term index.\",\"For more information about other operators and to determine which operator is most appropriate for your query, see [datatype string operators](datatypes-string-operators.md).\\r\\n\\r\\n## Syntax\\r\\n\\r\\n*T* `|` `where` *col* `has_any` `(`*expression*`,` ... `)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *T* | string | &check; | The tabular input to filter.|\\r\\n| *col* | string | &check; | The column by which to filter.|\\r\\n| *expression* | scalar or tabular | &check; | An expression that specifies the values for which to search. Each expression can be a [scalar](scalar-data-types/index.md) value or a [tabular expression](tabularexpressionstatements.md) that produces a set of values. If a tabular expression has multiple columns, the first column is used. The search will consider up to 10,000 distinct values.|\\r\\n\\r\\n> [!NOTE]\\r\\n> An inline tabular expression must be enclosed with double parentheses. See [example](#tabular-expression).\\r\\n\\r\\n## Returns\\r\\n\\r\\nRows in *T* for which the predicate is `true`.\",'### List of scalars\\r\\n\\r\\nThe following query shows how to use `has_any` with a comma-separated list of scalar values.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAwsuyS/KdS1LzSspVuDlqlEoz0gtSlUILkksSVXISCyOT8yrVNBQcnYM8vfx9HNU0lFQcnH09g8Bs/xcw5U0wbqKS3NzE4syq1IVkvNL80o0NBWSKiGGAACHltT/YAAAAA==\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nStormEvents \\r\\n| where State has_any (\"CAROLINA\", \"DAKOTA\", \"NEW\") \\r\\n| summarize count() by State\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|State|count_|\\r\\n|---|---|\\r\\n|NEW YORK|1750|\\r\\n|NORTH CAROLINA|1721|\\r\\n|SOUTH DAKOTA|1567|\\r\\n|NEW JERSEY|1044|\\r\\n|SOUTH CAROLINA|915|\\r\\n|NORTH DAKOTA|905|\\r\\n|NEW MEXICO|527|\\r\\n|NEW HAMPSHIRE|394|\\r\\n\\r\\n### Dynamic array\\r\\n\\r\\nThe following query shows how to use `has_any` with a dynamic array.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAwsuyS/KdS1LzSspVuDlqlEoz0gtSlUILkksSVXISCyOT8yrVNBIqcxLzM1M1ohWL84vLclQ11FQz8svAjJiNTVBmopLc3MTizKrUhWS80vzSjQ0FZIqIWYAAIx5b2ZfAAAA\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nStormEvents \\r\\n| where State has_any (dynamic([\\'south\\', \\'north\\']))\\r\\n| summarize count() by State\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|State|count_|\\r\\n|---|---|\\r\\n|NORTH CAROLINA|1721|\\r\\n|SOUTH DAKOTA|1567|\\r\\n|SOUTH CAROLINA|915|\\r\\n|NORTH DAKOTA|905|\\r\\n|ATLANTIC SOUTH|193|\\r\\n|ATLANTIC NORTH|188|\\r\\n\\r\\nThe same query can also be written with a [let statement](letstatement.md).\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAyWMQQrCMBBF9z3F3yUBbyBdeoIuRWRsB1IwE5iZtER6eIvuHrzHe7ODlMkwYulCZZ3jPVhtnsMFQaqe8EjXYfKq5baxuGE4sGdWxuTkjEz2JOmIv1E6rbVSSNcPY65NPCa8+j/+AmgCW+9wAAAA\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nlet areas = dynamic([\\'south\\', \\'north\\']);\\r\\nStormEvents \\r\\n| where State has_any (areas)\\r\\n| summarize count() by State\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|State|count_|\\r\\n|---|---|\\r\\n|NORTH CAROLINA|1721|\\r\\n|SOUTH DAKOTA|1567|\\r\\n|SOUTH CAROLINA|915|\\r\\n|NORTH DAKOTA|905|\\r\\n|ATLANTIC SOUTH|193|\\r\\n|ATLANTIC NORTH|188|\\r\\n\\r\\n### Tabular expression\\r\\n\\r\\nThe following query shows how to use `has_any` with an inline tabular expression. Notice that an inline tabular expression must be enclosed with double parentheses.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAwsuyS/KdS1LzSspVuDlqlEoz0gtSlUILkksSVXISCyOT8yrVNDQCMgvKM1JLMnMz3NJLElUgClDCCvYKZgagAFQsqAoPys1uQRiiqYmyNji0tzcxKLMqlSF5PzSvBINTYWkSog8AMlS+PGBAAAA\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nStormEvents \\r\\n| where State has_any ((PopulationData | where Population > 5000000 | project State))\\r\\n| summarize count() by State\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|State|count_|\\r\\n|--|--|\\r\\n|TEXAS |4701|\\r\\n|ILLINOIS |2022|\\r\\n|MISSOURI |2016|\\r\\n|GEORGIA |1983|\\r\\n|MINNESOTA |1881|\\r\\n|...|...|\\r\\n\\r\\nThe same query can also be written with a [let statement](letstatement.md). Notice that the double parentheses as provided in the last example aren\\'t necessary in this case.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA02NsQrCQBBE+0D+Ycqks7ESrbQX8gFhDYuJ3N2G3b1IxI/XRIRMOW8eE9gRSO/cmpOz4YirjDmQD5LO5IQ3nj0rb2qcsN+t+cJR5cGdo1n0Q1k0LhovEyc3lMVfXil6spbSjGr7WC8ryzGSDi9GJzl5VeM2/6QPjBKdkqEAAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nlet large_states = PopulationData | where Population > 5000000 | project State;\\r\\nStormEvents \\r\\n| where State has_any (large_states)\\r\\n| summarize count() by State\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|State|count_|\\r\\n|--|--|\\r\\n|TEXAS |4701|\\r\\n|ILLINOIS |2022|\\r\\n|MISSOURI |2016|\\r\\n|GEORGIA |1983|\\r\\n|MINNESOTA |1881|\\r\\n|...|...|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/has-anyoperator\",\"has-anyoperator.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"has_any_index\",\"Searches the string for items specified in the array and returns the position in the array of the first item found in the string. `has_any_index` searches for indexed terms, where an indexed [term](datatypes-string-operators.md#what-is-a-term) is three or more characters. If your term is fewer than three characters, the query scans the values in the column, which is slower than looking up the term in the term index.\",\"## Syntax\\r\\n\\r\\n`has_any_index` `(`*source*`,` *values*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *source*| string | &check;| The value to search.|\\r\\n| *values*| dynamic | &check;| An array of scalar or literal expressions to look up. |\\r\\n\\r\\n## Returns\\r\\n\\r\\nZero-based index position of the first item in *values* that is found in *source*.\\r\\nReturns -1 if none of the array items were found in the string or if *values* is empty.\",'> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA53RsQ6CMBDG8d2n+MICJk0IqKMjm29gDDmlYCNcm7Yk8PYWkEUXNbntkv/vmhqr2G+gqiHDEXdyJfFYKq7kkET+rhzCEEMO1JlWRgLVyNSpW3KOp3UsEL928WW7BdIUtbLOo9X60RvUuucKisOY3sP5ADYbiInMfyZZ+3cxgC195+3+9eboqrH+xtp/WsUCgPvuKi3yIFniRiaZwE4gW/KnpU3W0ghdh7aXjbTu1T38+ob1V4rO+HG9fK4/AfXYgrf8AQAA\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint\\r\\n idx1 = has_any_index(\"this is an example\", dynamic([\\'this\\', \\'example\\']))  // first lookup found in input string\\r\\n , idx2 = has_any_index(\"this is an example\", dynamic([\\'not\\', \\'example\\'])) // last lookup found in input string\\r\\n , idx3 = has_any_index(\"this is an example\", dynamic([\\'not\\', \\'found\\'])) // no lookup found in input string\\r\\n , idx4 = has_any_index(\"Example number 2\", range(1, 3, 1)) // Lookup array of integers\\r\\n , idx5 = has_any_index(\"this is an example\", dynamic([]))  // Empty lookup array\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|idx1|idx2|idx3|idx4|idx5|\\r\\n|----|----|----|----|----|\\r\\n| 0  | 1 | -1 |1 | -1 |',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/has-any-index-function\",\"has-any-index-function.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"has_any_ipv4\",\"Returns a value indicating whether one of specified IPv4 addresses appears in a text.\",'IP address entrances in a text must be properly delimited with non-alphanumeric characters. For example, properly delimited IP addresses are:\\r\\n\\r\\n* \"These requests came from: 192.168.1.1, 10.1.1.115 and 10.1.1.201\"\\r\\n* \"05:04:54 127.0.0.1 GET /favicon.ico 404\"\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`has_any_ipv4(`*source* `,` *ip_address* [`,` *ip_address_2*`,` ...] `)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *source*| string | &check; | The value to search.|\\r\\n| *ip_address*| string or dynamic | &check; | An IP address, or an array of IP addresses, for which to search.|\\r\\n\\r\\n## Returns\\r\\n\\r\\n`true` if one of specified IP addresses is a valid IPv4 address, and it was found in *source*. Otherwise, the function returns `false`.','### IP addresses as list of strings\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAysoyswrUShKLS7NKbHNSCyOT8yrjM8sKDPRUDcwtTIwsTI1UTA0MtczAEJDBXfXEAX9tMSyzOT8PD0goWBiYKKuo6AOV4HMMVLXBAATwSNyXgAAAA==\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint result=has_any_ipv4(\\'05:04:54 127.0.0.1 GET /favicon.ico 404\\', \\'127.0.0.1\\', \\'127.0.0.2\\')\\r\\n```\\r\\n\\r\\n|result|\\r\\n|--|\\r\\n|true|\\r\\n\\r\\n### IP addresses as dynamic array\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAysoyswrUShKLS7NKbHNSCyOT8yrjM8sKDPRUDcwtTIwsTI1UTA0MtczAEJDBXfXEAX9tMSyzOT8PD0goWBiYKKuo5BSmZeYm5msEa0OVwoUhXOM1GM1NQHScYQ8aQAAAA==\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint result=has_any_ipv4(\\'05:04:54 127.0.0.1 GET /favicon.ico 404\\', dynamic([\\'127.0.0.1\\', \\'127.0.0.2\\']))\\r\\n```\\r\\n\\r\\n|result|\\r\\n|--|\\r\\n|true|\\r\\n\\r\\n### Invalid IPv4 address\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAysoyswrUShKLS7NKbHNSCyOT8yrjM8sKDPRUDcwtTIwsTI1UTA0MtczAEIjUzMFd9cQBf20xLLM5Pw8PSChYGJgoq6jkFKZl5ibmawRrYSkWElHQcnQ0kjP0MxCz1DPUClWUxMAIDlcGW8AAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint result=has_any_ipv4(\\'05:04:54 127.0.0.256 GET /favicon.ico 404\\', dynamic([\"127.0.0.256\", \"192.168.1.1\"]))\\r\\n```\\r\\n\\r\\n|result|\\r\\n|--|\\r\\n|false|\\r\\n\\r\\n### Improperly deliminated IP address\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAz2NywrCMBQFf+XsYqHkUVIfBZdF3LlwX4JJ8UKahiQW+vcGFzJwYODAxEShILn88eX6NnkyYZ8obvrAZD9IPfRadScuKwq38Qkxm41ea+B1oKVmLdj/8ZNLx9XxzFXVBkJgNj67FrTEtEaX/A7rPC1UnMX9AWNtzecvfjhaaIkAAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint result=has_any_ipv4(\\'05:04:54127.0.0.1 GET /favicon.ico 404\\', \\'127.0.0.1\\', \\'192.168.1.1\\') // false, improperly delimited IP address\\r\\n```\\r\\n\\r\\n|result|\\r\\n|--|\\r\\n|false|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/has-any-ipv4-function\",\"has-any-ipv4-function.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"has_any_ipv4_prefix\",\"Returns a boolean value indicating whether one of specified IPv4 address prefixes appears in a text.\",'IP address entrances in a text must be properly delimited with non-alphanumeric characters. For example, properly delimited IP addresses are:\\r\\n\\r\\n* \"These requests came from: 192.168.1.1, 10.1.1.115 and 10.1.1.201\"\\r\\n* \"05:04:54 127.0.0.1 GET /favicon.ico 404\"\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`has_any_ipv4_prefix(`*source* `,` *ip_address_prefix* [`,` *ip_address_prefix_2*`,` ...] `)`  \\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *source*| string | &check; | The value to search.|\\r\\n| *ip_address_prefix*| string or dynamic | &check; | An IP address prefix, or an array of IP address prefixes, for which to search. A valid IP address prefix is either a complete IPv4 address, such as `192.168.1.11`, or its prefix ending with a dot, such as `192.`, `192.168.` or `192.168.1.`.|\\r\\n\\r\\n## Returns\\r\\n\\r\\n`true` if the one of specified IP address prefixes is a valid IPv4 address prefix, and it was found in *source*. Otherwise, the function returns `false`.','### IP addresses as list of strings\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAysoyswrUShKLS7NKbHNSCyOT8yrjM8sKDOJLyhKTcus0FA3MLUyMLEyNVEwNDLXMwBCQwV31xAF/bTEsszk/Dw9IKFgYmCirqOgDlEBZlka6RmaWeipayro6yuUFJWmAgAUwkzUaQAAAA==\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint result=has_any_ipv4_prefix(\\'05:04:54 127.0.0.1 GET /favicon.ico 404\\', \\'127.0.\\', \\'192.168.\\') // true\\r\\n\\r\\n```\\r\\n\\r\\n|result|\\r\\n|--|\\r\\n|true|\\r\\n\\r\\n### IP addresses as dynamic array\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAysoyswrUShKLS7NKbHNSCyOT8yrjM8sKDOJLyhKTcus0FA3MLUyMLEyNVEwNDLXMwBCQwV31xAF/bTEsszk/Dw9IKFgYmCirqOQUpmXmJuZrBGtBFGqpKOgZGhppGdoZqGnFKupCQARxDvmbAAAAA==\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint result=has_any_ipv4_prefix(\\'05:04:54 127.0.0.1 GET /favicon.ico 404\\', dynamic([\"127.0.\", \"192.168.\"]))\\r\\n```\\r\\n\\r\\n|result|\\r\\n|--|\\r\\n|true|\\r\\n\\r\\n### Invalid IPv4 prefix\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAysoyswrUShKLS7NKbHNSCyOT8yrjM8sKDOJLyhKTcus0FA3MLUyMLEyNVEwNDLXMwBCQwV31xAF/bTEsszk/Dw9IKFgYmCirqOgDlahrgkA7mfKHVQAAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint result=has_any_ipv4_prefix(\\'05:04:54 127.0.0.1 GET /favicon.ico 404\\', \\'127.0\\')\\r\\n```\\r\\n\\r\\n|result|\\r\\n|--|\\r\\n|false|\\r\\n\\r\\n### Improperly deliminated IP address\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAysoyswrUShKLS7NKbHNSCyOT8yrjM8sKDOJLyhKTcus0FA3MLUyMLEyNTE0MtczAEJDBXfXEAX9tMSyzOT8PD0goWBiYKKuo6AOUQFmWRrpqWsCACl5RqJcAAAA\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint result=has_any_ipv4_prefix(\\'05:04:54127.0.0.1 GET /favicon.ico 404\\', \\'127.0.\\', \\'192.\\')\\r\\n```\\r\\n\\r\\n|result|\\r\\n|--|\\r\\n|false|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/has-any-ipv4-prefix-function\",\"has-any-ipv4-prefix-function.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.OperatorToken,\"has_cs\",\"Filters a record set for data with a case-sensitive search string. `has_cs` searches for indexed terms, where an indexed [term](datatypes-string-operators.md#what-is-a-term) is three or more characters. If your term is fewer than three characters, the query scans the values in the column, which is slower than looking up the term in the term index.\",\"[!INCLUDE [has-operator-comparison](../../includes/has-operator-comparison.md)]\\r\\n\\r\\n## Performance tips\\r\\n\\r\\n[!INCLUDE [performance-tip-note](../../includes/performance-tip-note.md)]\\r\\n\\r\\n## Syntax\\r\\n\\r\\n*T* `|` `where` *Column* `has_cs` `(`*Expression*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *T* | string | &check; | The tabular input whose records are to be filtered.|\\r\\n| *Column* | string | &check; | The column used to filter the records.|\\r\\n| *Expression* | scalar or tabular | &check; | An expression for which to search. If the value is a tabular expression and has multiple columns, the first column is used.|\\r\\n\\r\\n## Returns\\r\\n\\r\\nRows in *T* for which the predicate is `true`.\",'> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAwsuyS/KdS1LzSsp5qpRKC7NzU0syqxKVUgFCcUn55fmldiCSQ1NhaRKheCSxJJUoMLyjNSiVAhPISOxOD65WEHJzcc/yNPFUQkAo0dX71MAAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nStormEvents\\r\\n| summarize event_count=count() by State\\r\\n| where State has_cs \"FLORIDA\"\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|State|event_count|\\r\\n|--|--|\\r\\n|FLORIDA|1042|\\r\\n\\r\\nSince all `State` values are capitalized, searching for a lowercase string with the same value, such as \"florida\", won\\'t yield any results.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAwsuyS/KdS1LzSspVuDlqlEoz0gtSlUILkksSVXISCyOT8yrVNBQcnYM8vfx9HNU0lFQcnH09g8Bs/xcw5U0wbqKS3NzE4syq1IVkvNL80o0NBWSKiGGAACHltT/YAAAAA==\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nStormEvents\\r\\n| summarize event_count=count() by State\\r\\n| where State has_cs \"florida\"\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|State|event_count|\\r\\n|--|--|\\r\\n|||',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/has-cs-operator\",\"has-cs-operator.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"has_ipv4\",\"Returns a value indicating whether a specified IPv4 address appears in a text.\",'IP address entrances in a text must be properly delimited with non-alphanumeric characters. For example, properly delimited IP addresses are:\\r\\n\\r\\n* \"These requests came from: 192.168.1.1, 10.1.1.115 and 10.1.1.201\"\\r\\n* \"05:04:54 127.0.0.1 GET /favicon.ico 404\"\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`has_ipv4(`*source* `,` *ip_address* `)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *source* | string | &check; | The text to search.|\\r\\n| *ip_address* | string | &check; | The value containing the IP address for which to search.|\\r\\n\\r\\n## Returns\\r\\n\\r\\n`true` if the *ip_address* is a valid IPv4 address, and it was found in *source*. Otherwise, the function returns `false`.\\r\\n\\r\\n> [!TIP]\\r\\n>\\r\\n> * To search for many IPv4 addresses at once, use [has_any_ipv4()](has-any-ipv4-function.md) function.\\r\\n> * To search for IPv4 addresses prefix, use [has_ipv4_prefix()](has-ipv4-prefix-function.md) function.','### Properly formatted IP address\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAysoyswrUShKLS7NKbHNSCyOzywoM9FQNzC1MjCxMjVRMDQy1zMAQkMFd9cQBf20xLLM5Pw8PSChYGJgoq6joA5Xoa4JAIl8hqBNAAAA\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint result=has_ipv4(\\'05:04:54 127.0.0.1 GET /favicon.ico 404\\', \\'127.0.0.1\\')\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|result|\\r\\n|--|\\r\\n|true|\\r\\n\\r\\n### Invalid IP address\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAysoyswrUShKLS7NKbHNSCyOzywoM9FQNzC1MjCxMjVRMDQy1zMAQiNTMwV31xAF/bTEsszk/Dw9IKFgYmCirqOgjqRGXRMAk108LFEAAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint result=has_ipv4(\\'05:04:54 127.0.0.256 GET /favicon.ico 404\\', \\'127.0.0.256\\')\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|result|\\r\\n|--|\\r\\n|false|\\r\\n\\r\\n### Improperly delimited IP\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAysoyswrUShKLS7NKbHNSCyOzywoM9FQNzC1MjCxMjUxNDLXMwBCQwV31xAF/bTEsszk/Dw9IKFgYmCirqOgDlehrgkAPqxiHkwAAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint result=has_ipv4(\\'05:04:54127.0.0.1 GET /favicon.ico 404\\', \\'127.0.0.1\\')\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|result|\\r\\n|--|\\r\\n|false|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/has-ipv4-function\",\"has-ipv4-function.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"has_ipv4_prefix\",\"Returns a value indicating whether a specified IPv4 address prefix appears in a text.\",'A valid IP address prefix is either a complete IPv4 address (`192.168.1.11`) or its prefix ending with a dot (`192.`, `192.168.` or `192.168.1.`).\\r\\n\\r\\nIP address entrances in a text must be properly delimited with non-alphanumeric characters. For example, properly delimited IP addresses are:\\r\\n\\r\\n* \"These requests came from: 192.168.1.1, 10.1.1.115 and 10.1.1.201\"\\r\\n* \"05:04:54 127.0.0.1 GET /favicon.ico 404\"\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`has_ipv4_prefix(`*source* `,` *ip_address_prefix* `)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *source*| string| &check;| The text to search.|\\r\\n| *ip_address_prefix*| string| &check;| The IP address prefix for which to search.|\\r\\n\\r\\n## Returns\\r\\n\\r\\n`true` if the *ip_address_prefix* is a valid IPv4 address prefix, and it was found in *source*. Otherwise, the function returns `false`.\\r\\n\\r\\n> [!TIP]\\r\\n> To search for many IPv4 prefixes at once, use the [has_any_ipv4_prefix()](has-any-ipv4-prefix-function.md) function.','### Properly formatted IPv4 prefix\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAysoyswrUShKLS7NKbHNSCyOzywoM4kvKEpNy6zQUDcwtTIwsTI1UTA0MtczAEJDBXfXEAX9tMSyzOT8PD0goWBiYKKuo6AOUaGuCQBk8fTRUQAAAA==\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint result=has_ipv4_prefix(\\'05:04:54 127.0.0.1 GET /favicon.ico 404\\', \\'127.0.\\')\\r\\n```\\r\\n\\r\\n|result|\\r\\n|--|\\r\\n|true|\\r\\n\\r\\n### Invalid IPv4 prefix\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAysoyswrUShKLS7NKbHNSCyOzywoM4kvKEpNy6zQUDcwtTIwsTI1UTA0MtczAEJDBXfXEAX9tMSyzOT8PD0goWBiYKKuo6AOVqGuCQDlc4Z2UAAAAA==\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint result=has_ipv4_prefix(\\'05:04:54 127.0.0.1 GET /favicon.ico 404\\', \\'127.0\\')\\r\\n```\\r\\n\\r\\n|result|\\r\\n|--|\\r\\n|false|\\r\\n\\r\\n### Invalid IPv4 address\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAysoyswrUShKLS7NKbHNSCyOzywoM4kvKEpNy6zQUDcwtTIwsTI1UTA0MtczAEIjUzMFd9cQBf20xLLM5Pw8PSChYGJgoq6joA5Ro64JAMAcwIpTAAAA\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint result=has_ipv4_prefix(\\'05:04:54 127.0.0.256 GET /favicon.ico 404\\', \\'127.0.\\')\\r\\n```\\r\\n\\r\\n|result|\\r\\n|--|\\r\\n|false|\\r\\n\\r\\n### Improperly delimited IPv4 address\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAysoyswrUShKLS7NKbHNSCyOzywoM4kvKEpNy6zQUDcwtTIwsTI1MTQy1zMAQkMFd9cQBf20xLLM5Pw8PSChYGJgoq6joA5Roa4JAD4FydVQAAAA\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint result=has_ipv4_prefix(\\'05:04:54127.0.0.1 GET /favicon.ico 404\\', \\'127.0.\\')\\r\\n```\\r\\n\\r\\n|result|\\r\\n|--|\\r\\n|false|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/has-ipv4-prefix-function\",\"has-ipv4-prefix-function.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"hash\",\"Returns a hash value for the input value.\",\"> [!NOTE]\\r\\n>\\r\\n> * The function calculates hashes using the xxhash64 algorithm, but this may change. It's recommended to only use this function within a single query.\\r\\n> * If you need to persist a combined hash, it's recommended to use [hash_sha256()](sha256hashfunction.md), [hash_sha1()](sha1-hash-function.md), or [hash_md5()](md5hashfunction.md) and combine the hashes with a [bitwise operator](binoperators.md). These functions are more complex to calculate than `hash()`.\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`hash(`*source* [`,` *mod*]`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *source* | scalar | &check; | The value to be hashed.|\\r\\n| *mod* | int | | A modulo value to be applied to the hash result, so that the output value is between `0` and `mod - 1`. This parameter is useful for limiting the range of possible output values or for compressing the output of the hash function into a smaller range.|\\r\\n\\r\\n## Returns\\r\\n\\r\\nThe hash value of *source*. If *mod* is specified, the function returns the hash value modulo the value of *mod*, meaning that the output of the function will be the remainder of the hash value divided by *mod*. The output will be a value between `0` and `mod - 1`, inclusive.\",'### String input\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAysoyswrUShKLS7NKbHNSCzO0FAKzy/KSVHSBADZZgKmGgAAAA==\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint result=hash(\"World\")\\r\\n```\\r\\n\\r\\n|result|\\r\\n|--|\\r\\n|1846988464401551951|\\r\\n\\r\\n### String input with mod\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAysoyswrUShKLS7NKbHNSCzO0FAKzy/KSVHSUTA0MNAEAJfnV8cfAAAA\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint result=hash(\"World\", 100)\\r\\n```\\r\\n\\r\\n|result|\\r\\n|--|\\r\\n|51|\\r\\n\\r\\n### Datetime input\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAysoyswrUShKLS7NKbHNSCzO0EhJLEktycxN1VAyMjA01TUwBCIlTU0AvUZeXikAAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint result=hash(datetime(\"2015-01-01\"))\\r\\n```\\r\\n\\r\\n|result|\\r\\n|--|\\r\\n|1380966698541616202|\\r\\n\\r\\n### Use hash to check data distribution\\r\\n\\r\\nUse the `hash()` function for sampling data if the values in one of its columns is uniformly distributed. In the following example, *StartTime* values are uniformly distributed and the function is used to run a query on 10% of the data.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAz2NOw6DMBBEe04xJZYooKB0FaVOYS7gwCJTGCPvkgjE4bFBohpp3nyMhOjfP5qFURz4O4oEZ9mVRmyUbvJUoakVtEadArx6b+O0E0xuvsI6CzT6rKWq0G0LfcaLcfKHG1wHGSl8t9S0QvlNwoL2dp6tgbg/AeFM8LmVAAAA\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nStormEvents \\r\\n| where hash(StartTime, 10) == 0\\r\\n| summarize StormCount = count(), TypeOfStorms = dcount(EventType) by State \\r\\n| top 5 by StormCount desc\\r\\n```',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/hashfunction\",\"hashfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"hash_combine\",\"Combines hash values of two or more hashes.\",\"## Syntax\\r\\n\\r\\n`hash_combine(`*h1* `,` *h2* [`,` *h3* ...]`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *h1*, *h2*, ... *hN* | long | &check; | The hash values to combine.|\\r\\n\\r\\n## Returns\\r\\n\\r\\nThe combined hash value of the given scalars.\",'> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAysoyswrUShLzClNNVSwVVDySM3JyVfSgYgYgUTC84tyUpS4ahRSK0pS81IUMkDqMhKLMzQgujR1FDKMbBECRpoItcn5uUmZeakpUB3xUL5GhiFIkyYAFnd56X0AAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint value1 = \"Hello\", value2 = \"World\"\\r\\n| extend h1 = hash(value1), h2=hash(value2)\\r\\n| extend combined = hash_combine(h1, h2)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|value1|value2|h1|h2|combined|\\r\\n|---|---|---|---|---|\\r\\n|Hello|World|753694413698530628|1846988464401551951|-1440138333540407281|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/hash_combinefunction\",\"hash_combinefunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"hash_many\",\"Returns a combined hash value of multiple values.\",\"## Syntax\\r\\n\\r\\n`hash_many(`*s1* `,` *s2* [`,` *s3* ...]`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *s1*, *s2*, ..., *sN* | scalar | &check; | The values to hash together.|\\r\\n\\r\\n## Returns\\r\\n\\r\\nThe [hash()](hashfunction.md) function is applied to each of the specified scalars. The resulting hashes are combined into a single hash and returned.\\r\\n\\r\\n> [!WARNING]\\r\\n> The function uses the *xxhash64* algorithm to calculate the hash for each scalar, but this may change. We therefore only recommend using this function within a single query where all invocations of the function will use the same algorithm.\\r\\n>\\r\\n> If you need to persist a combined hash, we recommend using [hash_sha256()](sha256hashfunction.md), [hash_sha1()](sha1-hash-function.md), or [hash_md5()](md5hashfunction.md) and combining the hashes into a single hash with a [bitwise operator](binoperators.md). Note that these functions are more complex to calculate than `hash()`.\",'> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAysoyswrUShLzClNNVSwVVDySM3JyVfSgYgYgUTC84tyUpS4ahRSK0pS81IUkvNzkzLzUlOAchmJxRnxuYl5lRoQA2DaNAGiXIb7VgAAAA==\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint value1 = \"Hello\", value2 = \"World\"\\r\\n| extend combined = hash_many(value1, value2)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|value1|value2|combined|\\r\\n|---|---|---|\\r\\n|Hello|World|-1440138333540407281|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/hash_manyfunction\",\"hash_manyfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"hash_md5\",\"Returns an MD5 hash value of the input.\",'## Syntax\\r\\n\\r\\n`hash_md5(`*source*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *source* | scalar | &check; | The value to be hashed.|\\r\\n\\r\\n## Returns\\r\\n\\r\\nThe MD5 hash value of the given scalar, encoded as a hex string (a string\\r\\nof characters, each two of which represent a single Hex number between 0\\r\\nand 255).\\r\\n\\r\\n> [!WARNING]\\r\\n> The algorithm used by this function (MD5) is guaranteed\\r\\n> to not be modified in the future, but is very complex to calculate. Users that\\r\\n> need a \"lightweight\" hash function for the duration of a single query are advised\\r\\n> to use the function [hash()](./hashfunction.md) instead.','> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAysoyswrUeDKMLTNSCzOiM9NMdVQCs8vyklR0tThyjBCiKYklqSWZOamahgZGBnoGhgCkaYmADVybf0+AAAA\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint \\r\\nh1=hash_md5(\"World\"),\\r\\nh2=hash_md5(datetime(2020-01-01))\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|h1|h2|\\r\\n|---|---|\\r\\n|f5a7924e621e84c9280a9a27e1bcb7f6|786c530672d1f8db31fee25ea8a9390b|\\r\\n\\r\\nThe following example uses the `hash_md5()` function to aggregate StormEvents based on State\\'s MD5 hash value.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAwsuyS/KdS1LzSsp5qpRKC7NzU0syqxKVQgGiTvnl+aVKNgqJINoDU2FpEqgeGJJqg6E8kgszrDNABLxuSmmGmAhTaAhJfkFCqYQtTAzAJ9n7vdmAAAA\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nStormEvents\\r\\n| summarize StormCount = count() by State, StateHash=hash_md5(State)\\r\\n| top 5 by StormCount\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|State|StateHash|StormCount|\\r\\n|---|---|---|\\r\\n|TEXAS|3b00dbe6e07e7485a1c12d36c8e9910a|4701|\\r\\n|KANSAS|e1338d0ac8be43846cf9ae967bd02e7f|3166|\\r\\n|IOWA|6d4a7c02942f093576149db764d4e2d2|2337|\\r\\n|ILLINOIS|8c00d9e0b3fcd55aed5657e42cc40cf1|2022|\\r\\n|MISSOURI|2d82f0c963c0763012b2539d469e5008|2016|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/md5hashfunction\",\"md5hashfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"hash_sha1\",\"Returns a sha1 hash value of the source input.\",'## Syntax\\r\\n\\r\\n`hash_sha1(`*source*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *source* | scalar | &check; | The value to be hashed.|\\r\\n\\r\\n## Returns\\r\\n\\r\\nThe sha1 hash value of the given scalar, encoded as a hex string (a string\\r\\nof characters, each two of which represent a single Hex number between 0\\r\\nand 255).\\r\\n\\r\\n> [!WARNING]\\r\\n> The algorithm used by this function (SHA1) is guaranteed\\r\\n> to not be modified in the future, but is very complex to calculate. If you\\r\\n> need a \"lightweight\" hash function for the duration of a single query, consider using [hash()](./hashfunction.md).','> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAysoyswrUeBSAIIMQ9uMxOKM+OKMREMNpfD8opwUJU0diJQRklRKYklqSWZuqoaRgZGBroEhEGlqAgBM1jIESAAAAA==\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint \\r\\n    h1=hash_sha1(\"World\"),\\r\\n    h2=hash_sha1(datetime(2020-01-01))\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|h1|h2|\\r\\n|---|---|\\r\\n|70c07ec18ef89c5309bbb0937f3a6342411e1fdd|e903e533f4d636b4fc0dcf3cf81e7b7f330de776|\\r\\n\\r\\nThe following example uses the `hash_sha1()` function to aggregate StormEvents based on State\\'s SHA1 hash value. \\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAwsuyS/KdS1LzSspVuCqUSguzc1NLMqsSlUIBkk455fmlSjYKiSDaA1NhaRKoHhiSaoOhPJILM6wzQAS8cUZiYYaYDFNoCkl+QUKphDFcENSUouTAeqGdyxtAAAA\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nStormEvents \\r\\n| summarize StormCount = count() by State, StateHash=hash_sha1(State)\\r\\n| top 5 by StormCount desc\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|State|StateHash|StormCount|\\r\\n|---|---|---|\\r\\n|TEXAS|3128d805194d4e6141766cc846778eeacb12e3ea|4701|\\r\\n|KANSAS|ea926e17098148921e472b1a760cd5a8117e84d6|3166|\\r\\n|IOWA|cacf86ec119cfd5b574bde5b59604774de3273db|2337|\\r\\n|ILLINOIS|03740763b16dae9d799097f51623fe635d8c4852|2022|\\r\\n|MISSOURI|26d938907240121b54d9e039473dacc96e712f61|2016|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/sha1-hash-function\",\"sha1-hash-function.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"hash_sha256\",\"Returns a sha256 hash value of the source input.\",'## Syntax\\r\\n\\r\\n`hash_sha256(`*source*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *source* | scalar | &check; | The value to be hashed.|\\r\\n\\r\\n## Returns\\r\\n\\r\\nThe sha256 hash value of the given scalar, encoded as a hex string (a string\\r\\nof characters, each two of which represent a single Hex number between 0\\r\\nand 255).\\r\\n\\r\\n> [!WARNING]\\r\\n> The algorithm used by this function (SHA256) is guaranteed\\r\\n> to not be modified in the future, but is very complex to calculate. Users that\\r\\n> need a \"lightweight\" hash function for the duration of a single query are advised\\r\\n> to use the function [hash()](./hashfunction.md) instead.','> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAysoyswrUeBSAIIMQ9uMxOKM+OKMRCNTMw2l8PyinBQlTR2IpBGKZEpiSWpJZm6qhpGBkYGugSEQaWoCAD4yqn1MAAAA\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint \\r\\n    h1=hash_sha256(\"World\"),\\r\\n    h2=hash_sha256(datetime(2020-01-01))\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|h1|h2|\\r\\n|---|---|\\r\\n|78ae647dc5544d227130a0682a51e30bc7777fbb6d8a8f17007463a3ecd1d524|ba666752dc1a20eb750b0eb64e780cc4c968bc9fb8813461c1d7e750f302d71d|\\r\\n\\r\\nThe following example uses the `hash_sha256()` function to aggregate StormEvents based on State\\'s SHA256 hash value.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAwsuyS/KdS1LzSspVuCqUSguzc1NLMqsSlUIBkk455fmlSjYKiSDaA1NhaRKoHhiSaoOhPJILM6wzQAS8cUZiUamZhpgUU2gOSX5BQqmEOVwY1JSi5MBsDX5S28AAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nStormEvents \\r\\n| summarize StormCount = count() by State, StateHash=hash_sha256(State)\\r\\n| top 5 by StormCount desc\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|State|StateHash|StormCount|\\r\\n|---|---|---|\\r\\n|TEXAS|9087f20f23f91b5a77e8406846117049029e6798ebbd0d38aea68da73a00ca37|4701|\\r\\n|KANSAS|c80e328393541a3181b258cdb4da4d00587c5045e8cf3bb6c8fdb7016b69cc2e|3166|\\r\\n|IOWA|f85893dca466f779410f65cd904fdc4622de49e119ad4e7c7e4a291ceed1820b|2337|\\r\\n|ILLINOIS|ae3eeabfd7eba3d9a4ccbfed6a9b8cff269dc43255906476282e0184cf81b7fd|2022|\\r\\n|MISSOURI|d15dfc28abc3ee73b7d1f664a35980167ca96f6f90e034db2a6525c0b8ba61b1|2016|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/sha256hashfunction\",\"sha256hashfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"hash_xxhash64\",\"Returns an xxhash64 value for the input value.\",\"## Syntax\\r\\n\\r\\n`hash_xxhash64(`*source* [`,` *mod*]`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *source* | scalar | &check; | The value to be hashed.|\\r\\n| *mod* | int | | A modulo value to be applied to the hash result, so that the output value is between `0` and `mod - 1`. This parameter is useful for limiting the range of possible output values or for compressing the output of the hash function into a smaller range.|\\r\\n\\r\\n## Returns\\r\\n\\r\\nThe hash value of *source*. If *mod* is specified, the function returns the hash value modulo the value of *mod*, meaning that the output of the function will be the remainder of the hash value divided by *mod*. The output will be a value between `0` and `mod - 1`, inclusive.\",'### String input\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAysoyswrUShKLS7NKbHNSCzOiK+oAFFmJhpK4flFOSlKmgDB9B3HIwAAAA==\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint result=hash_xxhash64(\"World\")\\r\\n```\\r\\n\\r\\n|result|\\r\\n|--|\\r\\n|1846988464401551951|\\r\\n\\r\\n### String input with mod\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAysoyswrUShKLS7NKbHNSCzOiK+oAFFmJhpK4flFOSlKOgqGBgaaAFCsEusoAAAA\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint result=hash_xxhash64(\"World\", 100)\\r\\n```\\r\\n\\r\\n|result|\\r\\n|--|\\r\\n|51|\\r\\n\\r\\n### Datetime input\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAysoyswrUShKLS7NKbHNSCzOiK+oAFFmJhopiSWpJZm5qRpKRgaGproGhkCkpKkJAN5RmvEyAAAA\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint result=hash_xxhash64(datetime(\"2015-01-01\"))\\r\\n```\\r\\n\\r\\n|result|\\r\\n|--|\\r\\n|1380966698541616202|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/hash-xxhash64-function\",\"hash-xxhash64-function.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.OperatorToken,\"hasprefix\",\"Filters a record set for data with a case-insensitive starting string.\",\"For best performance, use strings of three characters or more. `hasprefix` searches for indexed terms, where a [term](datatypes-string-operators.md#what-is-a-term) is three or more characters. If your term is fewer than three characters, the query scans the values in the column, which is slower than looking up the term in the term index.\\r\\n\\r\\n[!INCLUDE [has-prefix-operator-comparison](../../includes/has-prefix-operator-comparison.md)]\\r\\n\\r\\n## Performance tips\\r\\n\\r\\n[!INCLUDE [performance-tip-note](../../includes/performance-tip-note.md)]\\r\\n\\r\\nWhen possible, use the case-sensitive [hasprefix_cs](hasprefix-cs-operator.md).\\r\\n\\r\\n## Syntax\\r\\n\\r\\n*T* `|` `where` *Column* `hasprefix` `(`*Expression*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *T* | string | &check; | The tabular input whose records are to be filtered.|\\r\\n| *Column* | string | &check; | The column used to filter.|\\r\\n| *Expression* | string | &check; | The expression for which to search.|\\r\\n\\r\\n## Returns\\r\\n\\r\\nRows in *T* for which the predicate is `true`.\",'> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAwsuyS/KdS1LzSsp5qpRKC7NzU0syqxKVUgFCcUn55fmldiCSQ1NhaRKheCSxJJUoMLyjNSiVAhPISOxuKAoNS2zQkEpJ1EJKFlQlJ+VmlwCkdZBNgoAsFHbIG4AAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nStormEvents\\r\\n| summarize event_count=count() by State\\r\\n| where State hasprefix \"la\"\\r\\n| project State, event_count\\r\\n```\\r\\n\\r\\n|State|event_count|\\r\\n|-----|-----------|\\r\\n|LAKE MICHIGAN|182|\\r\\n|LAKE HURON|63|\\r\\n|LAKE SUPERIOR|34|\\r\\n|LAKE ST CLAIR|32|\\r\\n|LAKE ERIE|27|\\r\\n|LAKE ONTARIO|8|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/hasprefix-operator\",\"hasprefix-operator.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.OperatorToken,\"hasprefix_cs\",\"Filters a record set for data with a case-sensitive starting string.\",\"For best performance, use strings of three characters or more. `hasprefix_cs` searches for indexed terms, where a [term](datatypes-string-operators.md#what-is-a-term) is three or more characters. If your term is fewer than three characters, the query scans the values in the column, which is slower than looking up the term in the term index.\\r\\n\\r\\n[!INCLUDE [has-prefix-operator-comparison](../../includes/has-prefix-operator-comparison.md)]\\r\\n\\r\\n## Performance tips\\r\\n\\r\\n[!INCLUDE [performance-tip-note](../../includes/performance-tip-note.md)]\\r\\n\\r\\n## Syntax\\r\\n\\r\\n*T* `|` `where` *Column* `hasprefix_cs` `(`*Expression*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *T* | string | &check; | The tabular input whose records are to be filtered.|\\r\\n| *Column* | string | &check; | The column used to filter.|\\r\\n| *Expression* | string | &check; | The expression for which to search.|\\r\\n\\r\\n## Returns\\r\\n\\r\\nRows in *T* for which the predicate is `true`.\",'> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAwsuyS/KdS1LzSsp5qpRKC7NzU0syqxKVUgFCcUn55fmldiCSQ1NhaRKheCSxJJUoMLyjNSiVAhPISOxuKAoNS2zIj65WEEpQAkoDdYBACZmycFbAAAA\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nStormEvents\\r\\n| summarize event_count=count() by State\\r\\n| where State hasprefix_cs \"P\"\\r\\n| count \\r\\n```\\r\\n\\r\\n|Count|\\r\\n|-----|\\r\\n|3|\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAwsuyS/KdS1LzSsp5qpRKC7NzU0syqxKVUgFCcUn55fmldiCSQ1NhaRKheCSxJJUoMLyjNSiVAhPISOxuKAoNS2zIj65WEEpQAkoXVCUn5WaXAJRoINsGAAawoaacAAAAA==\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nStormEvents\\r\\n| summarize event_count=count() by State\\r\\n| where State hasprefix_cs \"P\"\\r\\n| project State, event_count\\r\\n```\\r\\n\\r\\n|State|event_count|\\r\\n|-----|-----------|\\r\\n|PENNSYLVANIA|1687|\\r\\n|PUERTO RICO|192|\\r\\n|E PACIFIC|10|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/hasprefix-cs-operator\",\"hasprefix-cs-operator.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.OperatorToken,\"hassuffix\",\"Filters a record set for data with a case-insensitive ending string. `hassuffix` returns `true` if there is a [term](datatypes-string-operators.md#what-is-a-term) inside the filtered string column ending with the specified string expression.\",\"[!INCLUDE [hassuffix-operator-comparison](../../includes/hassuffix-operator-comparison.md)]\\r\\n\\r\\n## Performance tips\\r\\n\\r\\n[!INCLUDE [performance-tip-note](../../includes/performance-tip-note.md)]\\r\\n\\r\\nWhen possible, use the case-sensitive [hassuffix_cs](hassuffix-cs-operator.md).\\r\\n\\r\\n> [!NOTE]\\r\\n> Text index cannot be fully utilized for this function, therefore the performance of this function is comparable to [endswith](endswith-operator.md) function, though the semantics is different.\\r\\n\\r\\n## Syntax\\r\\n\\r\\n*T* `|` `where` *Column* `hassuffix` `(`*Expression*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n|Name|Type|Required|Description|\\r\\n|--|--|--|--|\\r\\n|*T*|string|The tabular input whose records are to be filtered.|\\r\\n|*Column*|string|The column by which to filter.|\\r\\n|*Expression*|scalar|The scalar or literal expression for which to search.|\\r\\n\\r\\n## Returns\\r\\n\\r\\nRows in *T* for which the predicate is `true`.\",'> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAwsuyS/KdS1LzSsp5qpRKC7NzU0syqxKVUgFCcUn55fmldiCSQ1NhaRKheCSxJJUoMLyjNSiVAhPISOxuLg0LS2zQkEpXwkoV1CUn5WaXAKR1UE2CQBH0LHRbQAAAA==\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nStormEvents\\r\\n| summarize event_count=count() by State\\r\\n| where State hassuffix \"o\"\\r\\n| project State, event_count\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|State|event_count|\\r\\n|-----|-----------|\\r\\n|COLORADO|1654|\\r\\n|OHIO|1233|\\r\\n|GULF OF MEXICO|577|\\r\\n|NEW MEXICO|527|\\r\\n|IDAHO|247|\\r\\n|PUERTO RICO|192|\\r\\n|LAKE ONTARIO|8|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/hassuffix-operator\",\"hassuffix-operator.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.OperatorToken,\"hassuffix_cs\",\"Filters a record set for data with a case-insensitive ending string. `hassuffix_cs` returns `true` if there is a [term](datatypes-string-operators.md#what-is-a-term) inside the filtered string column ending with the specified string expression.\",\"[!INCLUDE [hassuffix-operator-comparison](../../includes/hassuffix-operator-comparison.md)]\\r\\n\\r\\n## Performance tips\\r\\n\\r\\n[!INCLUDE [performance-tip-note](../../includes/performance-tip-note.md)]\\r\\n\\r\\n> [!NOTE]\\r\\n> Text index cannot be fully utilized for this function, therefore the performance of this function is comparable to [endswith_cs](endswith-cs-operator.md) function, though the semantics is different.\\r\\n\\r\\n## Syntax\\r\\n\\r\\n*T* `|` `where` *column* `hassuffix_cs` `(` *expression* `)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n|Name|Type|Required|Description|\\r\\n|--|--|--|--|\\r\\n|*T* | string | &check; | The tabular input whose records are to be filtered.|\\r\\n|*column* | string | &check; | The column by which to filter.|\\r\\n|*expression* | scalar | &check; | The scalar or literal expression for which to search.|\\r\\n\\r\\n## Returns\\r\\n\\r\\nRows in *T* for which the predicate is `true`.\",'> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAwsuyS/KdS1LzSsp5qpRKC7NzU0syqxKVUgFCcUn55fmldiCSQ1NhaRKheCSxJJUoMLyjNSiVAhPISOxuLg0LS2zIj65WEHJMVgJLo9kiIKdgpGBgQFQqqAoPys1uQSiWQdZDQCa6WLOjAAAAA==\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nStormEvents\\r\\n| summarize event_count=count() by State\\r\\n| where State hassuffix_cs \"AS\"\\r\\n| where event_count > 2000\\r\\n| project State, event_count\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|State|event_count|\\r\\n|-----|-----------|\\r\\n|TEXAS|4701|\\r\\n|KANSAS|3166|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/hassuffix-cs-operator\",\"hassuffix-cs-operator.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"hll\",\"The `hll()` function is a way to estimate the number of unique values in a set of values. It does this by calculating intermediate results for aggregation within the [summarize](summarizeoperator.md) operator for a group of data using the [`dcount`](dcount-aggfunction.md) function.\",\"Read about the [underlying algorithm (*H*yper*L*og*L*og) and the estimation accuracy](#estimation-accuracy).\\r\\n\\r\\n[!INCLUDE [data-explorer-agg-function-summarize-note](../../includes/data-explorer-agg-function-summarize-note.md)]\\r\\n\\r\\n> [!TIP]\\r\\n>\\r\\n>- Use the [hll_merge](hllmergefunction.md) function to merge the results of multiple `hll()` functions.\\r\\n>- Use the [dcount_hll](dcount-hllfunction.md) function to calculate the number of distinct values from the output of the `hll()` or `hll_merge` functions.\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`hll` `(`*expr* [`,` *accuracy*]`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *expr* |  string | &check; | The expression used for the aggregation calculation. |\\r\\n| *accuracy* | int |   | The value that controls the balance between speed and accuracy. If unspecified, the default value is `1`. For supported values, see [Estimation accuracy](#estimation-accuracy). |\\r\\n\\r\\n## Returns\\r\\n\\r\\nReturns the intermediate results of distinct count of *expr* across the group.\",'In the following example, the `hll()` function is used to estimate the number of unique values of the `DamageProperty` column within each 10-minute time bin of the `StartTime` column.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAwsuyS/KdS1LzSsp5qpRKC7NzU0syqxKVcjIydFwScxNTE8NKMovSC0qqdRUSKpUSMrM0wguSSwqCcnMTdUxNMjVBACCSG7CQQAAAA==\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nStormEvents\\r\\n| summarize hll(DamageProperty) by bin(StartTime,10m)\\r\\n```\\r\\n\\r\\nThe results table shown includes only the first 10 rows.\\r\\n\\r\\n| StartTime | hll_DamageProperty |\\r\\n|--|--|\\r\\n| 2007-01-01T00:20:00Z | [[1024,14],[\"3803688792395291579\"],[]] |\\r\\n| 2007-01-01T01:00:00Z | [[1024,14],[\"7755241107725382121\",\"-5665157283053373866\",\"3803688792395291579\",\"-1003235211361077779\"],[]] |\\r\\n| 2007-01-01T02:00:00Z | [[1024,14],[\"-1003235211361077779\",\"-5665157283053373866\",\"7755241107725382121\"],[]] |\\r\\n| 2007-01-01T02:20:00Z  | [[1024,14],[\"7755241107725382121\"],[]] |\\r\\n| 2007-01-01T03:30:00Z  | [[1024,14],[\"3803688792395291579\"],[]] |\\r\\n| 2007-01-01T03:40:00Z | [[1024,14],[\"-5665157283053373866\"],[]] |\\r\\n| 2007-01-01T04:30:00Z | [[1024,14],[\"3803688792395291579\"],[]] |\\r\\n| 2007-01-01T05:30:00Z | [[1024,14],[\"3803688792395291579\"],[]] |\\r\\n| 2007-01-01T06:30:00Z | [[1024,14],[\"1589522558235929902\"],[]] |\\r\\n\\r\\n## Estimation accuracy\\r\\n\\r\\n[!INCLUDE [data-explorer-estimation-accuracy](../../includes/data-explorer-estimation-accuracy.md)]',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/hll-aggfunction\",\"hll-aggfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"hll_if\",\"Calculates the intermediate results of [`dcount`](dcount-aggfunction.md) in records for which the *predicate* evaluates to `true`.\",\"Read about the [underlying algorithm (*H*yper*L*og*L*og) and the estimation accuracy](dcount-aggfunction.md#estimation-accuracy).\\r\\n\\r\\n[!INCLUDE [data-explorer-agg-function-summarize-note](../../includes/data-explorer-agg-function-summarize-note.md)]\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`hll_if` `(`*expr*, *predicate* [`,` *accuracy*]`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *expr* |  string | &check; | The expression used for the aggregation calculation. |\\r\\n| *predicate* |  string | &check; | The *Expr* used to filter records to add to the intermediate result of `dcount`. |\\r\\n| *accuracy* | int |   | The value that controls the balance between speed and accuracy. If unspecified, the default value is `1`. For supported values, see [Estimation accuracy](#estimation-accuracy). |\\r\\n\\r\\n## Returns\\r\\n\\r\\nReturns the intermediate results of distinct count of *Expr* for which *Predicate* evaluates to `true`.\\r\\n\\r\\n> [!TIP]\\r\\n>\\r\\n> - You can use the aggregation function [`hll_merge`](hll-merge-aggfunction.md) to merge more than one `hll` intermediate result. Only works with `hll` output only.\\r\\n> - You can use [`dcount_hll`](dcount-hllfunction.md), to calculate the distinct count from `hll`,`hll_merge`, or `hll_if` aggregation functions.\",'> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAz2OQQrCMBBF955imFUCuUIXXSiIYBcpuCw1ndBI2ylJqlQ8vDEBd/Ph/fdHR/bz8UlLDIcPvEbyBDr2kcAtIPDc3GpUgJf6qmuNMjFhm+feuzfBOE2dnZgHqPLtrNC8eUMKsrHdV4KqAjz9IJRw34s7WVbPDzKxZAWlFxqb0fJPsg6GtyV2SS7+Y/IL9SJmoLMAAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nStormEvents\\r\\n| where State in (\"IOWA\", \"KANSAS\")\\r\\n| summarize hll_flood = hll_if(Source, EventType == \"Flood\") by State\\r\\n| project State, SourcesOfFloodEvents = dcount_hll(hll_flood)\\r\\n```\\r\\n\\r\\n|State|SourcesOfFloodEvents|\\r\\n|---|---|\\r\\n|KANSAS|11|\\r\\n|IOWA|7|\\r\\n\\r\\n## Estimation accuracy\\r\\n\\r\\n| Accuracy | Speed | Error (%) |\\r\\n|---|---|---|---|\\r\\n| 0 | Fastest | 1.6 |\\r\\n| 1 | Balanced | 0.8 |\\r\\n| 2 | Slow | 0.4 |\\r\\n| 3 | Slow | 0.28 |\\r\\n| 4 | Slowest | 0.2 |',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/hll-if-aggregation-function\",\"hll-if-aggregation-function.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"hll_merge\",\"Merges HLL results. This is the scalar version of the aggregate version [`hll_merge()`](hll-merge-aggfunction.md).\",\"Read about the [underlying algorithm (*H*yper*L*og*L*og) and estimation accuracy](#estimation-accuracy).\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`hll_merge(` *hll*`,` *hll2*`,` [ *hll3*`,` ... ]`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n|*hll*, *hll2*, ... |string|&check;|The column names containing HLL values to merge. The function expects between 2-64 arguments.|\\r\\n\\r\\n## Returns\\r\\n\\r\\nReturns one HLL value. The value is the result of merging the columns *hll*, *hll2*, ... *hllN*.\",'This example shows the value of the merged columns.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA1WMQQ6DMAwE75X4wx6J6KE8gLdEiLi0iCTIGCmp+vg6gUtP1uzsmscwExKeHD16SET/wC60KTS3LygJBYeMQUudyhLuh/cjvz+E17rapE5vm8y9cr44m9LdOC40CTzxTO5UtkJbx9fmr+umeASx5ck5Mz9Hg5B+pwAAAA==\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nrange x from 1 to 10 step 1 \\r\\n| extend y = x + 10\\r\\n| summarize hll_x = hll(x), hll_y = hll(y)\\r\\n| project merged = hll_merge(hll_x, hll_y)\\r\\n| project dcount_hll(merged)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|`dcount_hll_merged`|\\r\\n|---|\\r\\n|20|\\r\\n\\r\\n## Estimation accuracy\\r\\n\\r\\n[!INCLUDE [data-explorer-estimation-accuracy](../../includes/data-explorer-estimation-accuracy.md)]',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/hllmergefunction\",\"hllmergefunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"hourofday\",\"Returns the integer number representing the hour number of the given date.\",\"## Syntax\\r\\n\\r\\n`hourofday(`*date*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n|*date*|datetime|&check;|The date for which to return the hour number.|\\r\\n\\r\\n## Returns\\r\\n\\r\\nAn integer between 0-23 representing the hour number of the day for *date*.\",'> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAysoyswrUcjILy2yBRH5aSmJlRopiSWpJZm5qRpGBoamuoZGuoYmCoYWVqYmmpoAPkfViTAAAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint hour=hourofday(datetime(2015-12-14 18:54))\\r\\n```\\r\\n\\r\\n|hour|\\r\\n|--|\\r\\n|18|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/hourofdayfunction\",\"hourofdayfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"http_request\",\"The `http_request` plugin sends an HTTP GET request and converts the response into a table.\",\"## Prerequisites\\r\\n\\r\\n* Run `.enable plugin http_request` to [enable the plugin](../management/enable-plugin.md)\\r\\n* Set the URI to access as an allowed destination for `webapi` in the [Callout policy](../management/calloutpolicy.md)\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`evaluate` `http_request` `(` *Uri* [`,` *RequestHeaders* [`,` *Options*]] `)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *Uri* | string | &check; | The destination URI for the HTTP or HTTPS request. |\\r\\n| *RequestHeaders* | dynamic |  | A property bag containing [HTTP headers](#headers) to send with the request. |\\r\\n| *Options* | dynamic |  | A property bag containing additional properties of the request. |\\r\\n\\r\\n> [!NOTE]\\r\\n>\\r\\n> * To specify an optional parameter that follows an optional parameter, make sure to provide a value for the preceding optional parameter. For more information, see [Working with optional parameters](syntax-conventions.md#working-with-optional-parameters).\\r\\n> * If you're using authentication, use the HTTPS protocol. Attempts to use HTTP with authentication results in an error.\\r\\n\\r\\n## Authentication and authorization\\r\\n\\r\\nTo authenticate, use the HTTP standard `Authorization` header or any custom header supported by the web service.\\r\\n\\r\\n> [!NOTE]\\r\\n> If the query includes confidential information, make sure that the relevant parts of the query text are obfuscated so that they'll be omitted from any tracing. For more information, see [obfuscated string literals](./scalar-data-types/string.md#obfuscated-string-literals).\\r\\n\\r\\n## Returns\\r\\n\\r\\nThe plugin returns a table that has a single record with the following dynamic columns:\\r\\n\\r\\n* *ResponseHeaders*: A property bag with the response header.\\r\\n* *ResponseBody*: The response body parsed as a value of type `dynamic`.\\r\\n\\r\\nIf the HTTP response indicates (via the `Content-Type` response header) that the media type is `application/json`,\\r\\nthe response body is automatically parsed as-if it's a JSON object. Otherwise, it's returned as-is.\\r\\n\\r\\n## Headers\\r\\n\\r\\nThe *RequestHeaders* argument can be used to add custom headers\\r\\nto the outgoing HTTP request. In addition to the standard HTTP request headers\\r\\nand the user-provided custom headers, the plugin also adds the following\\r\\ncustom headers:\\r\\n\\r\\n| Name | Description |\\r\\n|--|--|\\r\\n| `x-ms-client-request-id` | A correlation ID that identifies the request. Multiple invocations of the plugin in the same query will all have the same ID. |\\r\\n| `x-ms-readonly` | A flag indicating that the processor of this request shouldn't make any persistent changes. |\\r\\n\\r\\n> [!WARNING]\\r\\n> The `x-ms-readonly` flag is set for every HTTP request sent by the plugin\\r\\n> that was triggered by a query and not a control command. Web services should\\r\\n> treat any requests with this flag as one that does not make internal\\r\\n> state changes, otherwise they should refuse the request. This protects users from being\\r\\n> sent seemingly-innocent queries that end up making unwanted changes by using\\r\\n> a Kusto query as the launchpad for such attacks.\",\"The following example retrieves Azure retails prices for Azure Purview in west Europe:\\r\\n\\r\\n```\\r\\nlet Uri = \\\"https://prices.azure.com/api/retail/prices?$filter=serviceName eq 'Azure Purview' and location eq 'EU West'\\\";\\r\\nevaluate http_request(Uri)\\r\\n| project ResponseBody.Items\\r\\n| mv-expand ResponseBody_Items\\r\\n| evaluate bag_unpack(ResponseBody_Items)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n| armRegionName |                   armSkuName                   | currencyCode |  effectiveStartDate  | isPrimaryMeterRegion | location |               meterId                |                      meterName                       |  productId   |                     productName                     | retailPrice | serviceFamily |  serviceId   |  serviceName  |       skuId       |                 skuName                  | tierMinimumUnits |    type     | unitOfMeasure | unitPrice |\\r\\n|---------------|------------------------------------------------|--------------|----------------------|----------------------|----------|--------------------------------------|------------------------------------------------------|--------------|-----------------------------------------------------|-------------|---------------|--------------|---------------|-------------------|------------------------------------------|------------------|-------------|---------------|-----------|\\r\\n| westeurope    | Data Insights                                  | USD          | 2022-06-01T00:00:00Z | false                | EU West  | 8ce915f7-20db-564d-8cc3-5702a7c952ab | Data Insights Report Consumption            | DZH318Z08M22 | Azure Purview Data Map                              |        0.21 | Analytics     | DZH318Q66D0F | Azure Purview | DZH318Z08M22/006C | Catalog Insights                         |                0 | Consumption | 1 API Calls   |      0.21 |\\r\\n| westeurope    | Data Map Enrichment - Data Insights Generation | USD          | 2022-06-01T00:00:00Z | false                | EU West  | 7ce2db1d-59a0-5193-8a57-0431a10622b6 | Data Map Enrichment - Data Insights Generation vCore | DZH318Z08M22 | Azure Purview Data Map                              |        0.82 | Analytics     | DZH318Q66D0F | Azure Purview | DZH318Z08M22/005C | Data Map Enrichment - Insight Generation |                0 | Consumption | 1 Hour        |      0.82 |\\r\\n| westeurope    |                                                | USD          | 2021-09-28T00:00:00Z | false                | EU West  | 053e2dcb-82c0-5e50-86cd-1f1c8d803705 | Power BI vCore                                        | DZH318Z08M23 | Azure Purview Scanning Ingestion and Classification |           0 | Analytics     | DZH318Q66D0F | Azure Purview | DZH318Z08M23/0005 | Power BI                                  |                0 | Consumption | 1 Hour        |         0 |\\r\\n| westeurope    |                                                | USD          | 2021-09-28T00:00:00Z | false                | EU West  | a7f57f26-5f31-51e5-a5ed-ffc2b0da37b9 | Resource Set vCore                                   | DZH318Z08M22 | Azure Purview Data Map                              |        0.21 | Analytics     | DZH318Q66D0F | Azure Purview | DZH318Z08M22/000X | Resource Set                             |                0 | Consumption | 1 Hour        |      0.21 |\\r\\n| westeurope    |                                                | USD          | 2021-09-28T00:00:00Z | false                | EU West  | 5d157295-441c-5ea7-ba7c-5083026dc456 | SQL Server vCore                                     | DZH318Z08M23 | Azure Purview Scanning Ingestion and Classification |           0 | Analytics     | DZH318Q66D0F | Azure Purview | DZH318Z08M23/000F | SQL Server                               |                0 | Consumption | 1 Hour        |         0 |\\r\\n| westeurope    |                                                | USD          | 2021-09-28T00:00:00Z | false                | EU West  | 0745df0d-ce4f-52db-ac31-ac574d4dcfe5 | Standard Capacity Unit                               | DZH318Z08M22 | Azure Purview Data Map                              |       0.411 | Analytics     | DZH318Q66D0F | Azure Purview | DZH318Z08M22/0002 | Standard                                 |                0 | Consumption | 1 Hour        |     0.411 |\\r\\n| westeurope    |                                                | USD          | 2021-09-28T00:00:00Z | false                | EU West  | 811e3118-5380-5ee8-a5d9-01d48d0a0627 | Standard vCore                                       | DZH318Z08M23 | Azure Purview Scanning Ingestion and Classification |        0.63 | Analytics     | DZH318Q66D0F | Azure Purview | DZH318Z08M23/0009 | Standard                                 |                0 | Consumption | 1 Hour        |      0.63 |\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/http-request-plugin\",\"http-request-plugin.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"http_request_post\",\"The `http_request_post` plugin sends an HTTP POST request and converts the response into a table.\",\"## Prerequisites\\r\\n\\r\\n* Run `.enable plugin http_request_post` to [enable the plugin](../management/enable-plugin.md)\\r\\n* Set the URI to access as an allowed destination for `webapi` in the [Callout policy](../management/calloutpolicy.md)\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`evaluate` `http_request_post` `(` *Uri* [`,` *RequestHeaders* [`,` *Options* [`,` *Content*]]] `)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *Uri* | string | &check; | The destination URI for the HTTP or HTTPS request. |\\r\\n| *RequestHeaders* | dynamic |  | A property bag containing [HTTP headers](#headers) to send with the request. |\\r\\n| *Options* | dynamic |  | A property bag containing additional properties of the request. |\\r\\n| *Content* | string |  | The body content to send with the request. The content is encoded in `UTF-8` and the media type for the `Content-Type` attribute is `application/json`. |\\r\\n\\r\\n> [!NOTE]\\r\\n>\\r\\n> * To specify an optional parameter that follows an optional parameter, make sure to provide a value for the preceding optional parameter. For more information, see [Working with optional parameters](syntax-conventions.md#working-with-optional-parameters).\\r\\n> * If you're using authentication, use the HTTPS protocol. Attempts to use HTTP with authentication results in an error.\\r\\n\\r\\n## Authentication and authorization\\r\\n\\r\\nTo authenticate, use the HTTP standard `Authorization` header or any custom header supported by the web service.\\r\\n\\r\\n> [!NOTE]\\r\\n> If the query includes confidential information, make sure that the relevant parts of the query text are obfuscated so that they'll be omitted from any tracing. For more information, see [obfuscated string literals](./scalar-data-types/string.md#obfuscated-string-literals).\\r\\n\\r\\n## Returns\\r\\n\\r\\nThe plugin returns a table that has a single record with the following dynamic columns:\\r\\n\\r\\n* *ResponseHeaders*: A property bag with the response header.\\r\\n* *ResponseBody*: The response body parsed as a value of type `dynamic`.\\r\\n\\r\\nIf the HTTP response indicates (via the `Content-Type` response header) that the media type is `application/json`,\\r\\nthe response body is automatically parsed as-if it's a JSON object. Otherwise, it's returned as-is.\\r\\n\\r\\n## Headers\\r\\n\\r\\nThe *RequestHeaders* argument can be used to add custom headers\\r\\nto the outgoing HTTP request. In addition to the standard HTTP request headers\\r\\nand the user-provided custom headers, the plugin also adds the following\\r\\ncustom headers:\\r\\n\\r\\n| Name | Description |\\r\\n|--|--|\\r\\n| `x-ms-client-request-id` | A correlation ID that identifies the request. Multiple invocations of the plugin in the same query will all have the same ID. |\\r\\n| `x-ms-readonly` | A flag indicating that the processor of this request shouldn't make any persistent changes. |\\r\\n\\r\\n> [!WARNING]\\r\\n> The `x-ms-readonly` flag is set for every HTTP request sent by the plugin\\r\\n> that was triggered by a query and not a control command. Web services should\\r\\n> treat any requests with this flag as one that does not make internal\\r\\n> state changes, otherwise they should refuse the request. This protects users from being\\r\\n> sent seemingly-innocent queries that end up making unwanted changes by using\\r\\n> a Kusto query as the launchpad for such attacks.\",\"The following example is for a hypothetical HTTPS web service that accepts additional request headers and must be authenticated to using Azure AD:\\r\\n\\r\\n```\\r\\nlet uri='https://example.com/node/js/on/eniac';\\r\\nlet headers=dynamic({'x-ms-correlation-vector':'abc.0.1.0', 'authorization':'bearer ...Azure-AD-bearer-token-for-target-endpoint...'});\\r\\nevaluate http_request_post(uri, headers)\\r\\n```\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/http-request-post-plugin\",\"http-request-post-plugin.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"iff\",\"Returns the value of *then* if *if* evaluates to `true`,\\r\\nor the value of *else* otherwise.\",\"> The `iff()` and `iif()` functions are equivalent\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`iff(`*if*`,` *then*`,` *else*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n|*if*| string | &check; | An expression that evaluates to a boolean value.|\\r\\n|*then*| scalar | &check; | An expression that gets evaluated and its value returned from the function if *if* evaluates to `true`.|\\r\\n|*else*| scalar | &check; | An expression that gets evaluated and its value returned from the function if *if* evaluates to `false`.|\\r\\n\\r\\n## Returns\\r\\n\\r\\nThis function returns the value of *then* if *if* evaluates to `true`,\\r\\nor the value of *else* otherwise.\",'> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAwsuyS/KdS1LzSsp5qpRSK0oSc1LUQhKzMxTsFXITEvT0ADLhVQWpCoAxTSUPFITyyrBCpR0FJTcchKLMxTccvLzUyBcEENTE8gEG5EK0guS8MsvUShCiGgCrSooys9KTS5RCC5JLEnVUQBb45kCZYDs0wHbAgAA0TJCoAAAAA==\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nStormEvents\\r\\n| extend Rain = iff((EventType in (\"Heavy Rain\", \"Flash Flood\", \"Flood\")), \"Rain event\", \"Not rain event\")\\r\\n| project State, EventId, EventType, Rain\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\nThe following table shows only the first 5 rows.\\r\\n\\r\\n|State|EventId|EventType|Rain|\\r\\n|--|--|--|--|\\r\\n|ATLANTIC SOUTH| 61032 |Waterspout |Not rain event\\r\\n|FLORIDA| 60904 |Heavy Rain |Rain event\\r\\n|FLORIDA| 60913 |Tornado |Not rain event\\r\\n|GEORGIA| 64588 |Thunderstorm Wind |Not rain event\\r\\n|MISSISSIPPI| 68796 |Thunderstorm Wind |Not rain event\\r\\n|...|...|...|...|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/ifffunction\",\"ifffunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.OperatorToken,\"in\",\"Filters a record set for data with a case-sensitive string.\",\"[!INCLUDE [in-operator-comparison](../../includes/in-operator-comparison.md)]\\r\\n\\r\\n## Performance tips\\r\\n\\r\\n[!INCLUDE [performance-tip-note](../../includes/performance-tip-note.md)]\\r\\n\\r\\n## Syntax\\r\\n\\r\\n*T* `|` `where` *col* `in` `(`*expression*`,` ... `)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *T* | string | &check; | The tabular input to filter.|\\r\\n| *col* | string | &check; | The column by which to filter.|\\r\\n| *expression* | scalar or tabular | &check; | An expression that specifies the values for which to search. the values for which to search. Each expression can be a [scalar](scalar-data-types/index.md) value or a [tabular expression](tabularexpressionstatements.md) that produces a set of values. If a tabular expression has multiple columns, the first column is used. The search will consider up to 1,000,000 distinct values.|\\r\\n\\r\\n> [!NOTE]\\r\\n> An inline tabular expression must be enclosed with double parentheses. See [example](#tabular-expression).\\r\\n\\r\\n## Returns\\r\\n\\r\\nRows in *T* for which the predicate is `true`.\",'### List of scalars\\r\\n\\r\\nThe following query shows how to use `in` with a list of scalar values.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAwsuyS/KdS1LzSspVuCqUSjPSC1KVQguSSxJVcjMU9BQcvPxD/J0cVTSUVByd/UPcvcEM/1cwxUi/YO8lTRBmpLzS/NKAJNAy9pJAAAA\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nStormEvents \\r\\n| where State in (\"FLORIDA\", \"GEORGIA\", \"NEW YORK\") \\r\\n| count\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|Count|\\r\\n|---|\\r\\n|4775|  \\r\\n\\r\\n### Dynamic array\\r\\n\\r\\nThe following query shows how to use `in` with a dynamic array.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA8tJLVEoLkksSS1WsFVIqcxLzM1M1ohWd/PxD/J0cVTXUVB3DPFx9AvxdFYI9g8N8QCJuLv6B7l7OqrHalpzBZfkF+W6lqXmlRQrcNUolGekFqUqBIMMVMjMU9CAGK0JlEnOL80rAQDj7kmUbgAAAA==\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nlet states = dynamic([\\'FLORIDA\\', \\'ATLANTIC SOUTH\\', \\'GEORGIA\\']);\\r\\nStormEvents \\r\\n| where State in (states)\\r\\n| count\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|Count|\\r\\n|---|\\r\\n|3218|\\r\\n\\r\\n### Tabular expression\\r\\n\\r\\nThe following query shows how to use `in` with a tabular expression.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA8tJLVEIyS+IN40PLkksSS1WsFXg5VIAguCS/KJc17LUvJJiiECNQnFpbm5iUWZVqkJyfmleiYamQlKlAlgbTEVJfoGCKUgUrCDeGmgWkjlAXo1CeUZqUSpEl0JmnoIGsuWaYBVgvQBWFNNCmAAAAA==\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nlet Top_5_States = \\r\\n    StormEvents\\r\\n    | summarize count() by State\\r\\n    | top 5 by count_; \\r\\nStormEvents \\r\\n| where State in (Top_5_States) \\r\\n| count\\r\\n```\\r\\n\\r\\nThe same query can be written with an inline tabular expression statement. Notice that an inline tabular expression must be enclosed with double parentheses.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAwsuyS/KdS1LzSspVuDlqlEoz0gtSlUILkksSVXIzFPQ0ODlUgCCYIQyiECNQnFpbm5iUWZVqkJyfmleiYamQlIlRCNMRUl+gYIpSBSsIB4irKkJtgcsBAD4wHSifQAAAA==\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nStormEvents \\r\\n| where State in ((\\r\\n    StormEvents\\r\\n    | summarize count() by State\\r\\n    | top 5 by count_\\r\\n    )) \\r\\n| count\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|Count|\\r\\n|---|\\r\\n|14242|  \\r\\n\\r\\n### Top with other example\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA22PPQuDMBCG9/yKFxcVXJ3EpdCt0EF3sfaqKZpIPEst/vhGpVZqs+Tg7nk/amKcZFmxkqrMDkOWcM6EGI39jMxr+SIvYW2a44MUdwL2jej6psmN3aFeYZoPLFroXrG8eTORDq2Vi+GuLq6Py4DZx49EbQOkus3CxXni/+QZwbpFOIE7wxGt0XcqeNGMIPYCYgQ9mdQVn37SBlxmqeBtE/jBchTAOXNFxvHFtrCdvN8M30ZvE2wmM1ABAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nlet Lightning_By_State = materialize(StormEvents\\r\\n    | summarize lightning_events = countif(EventType == \\'Lightning\\') by State);\\r\\nlet Top_5_States = Lightning_By_State | top 5 by lightning_events | project State; \\r\\nLightning_By_State\\r\\n| extend State = iff(State in (Top_5_States), State, \"Other\")\\r\\n| summarize sum(lightning_events) by State \\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n| State     | sum_lightning_events |\\r\\n|-----------|----------------------|\\r\\n| ALABAMA   | 29                   |\\r\\n| WISCONSIN | 31                   |\\r\\n| TEXAS     | 55                   |\\r\\n| FLORIDA   | 85                   |\\r\\n| GEORGIA   | 106                  |\\r\\n| Other     | 415                  |\\r\\n\\r\\n### Use a static list returned by a function\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAwsuyS/KdS1LzSspVuCqUSjPSC1KVQguSSxJVcjMU9DwzCsBChSXZOalgwWLNTQ1QeqS80vzSgAtnqHrPAAAAA==\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nStormEvents \\r\\n| where State in (InterestingStates()) \\r\\n| count\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|Count|\\r\\n|---|\\r\\n|4775|  \\r\\n\\r\\nThe function definition.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA9MrzsgvV0grzUsuyczPU/DMK0ktSi0uycxLDy5JLEktBgBVrDk7IAAAAA==\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\n.show function InterestingStates\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|Name|Parameters|Body|Folder|DocString|\\r\\n|---|---|---|---|---|\\r\\n|InterestingStates|()|{ dynamic([\"WASHINGTON\", \"FLORIDA\", \"GEORGIA\", \"NEW YORK\"]) }',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/in-cs-operator\",\"in-cs-operator.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.OperatorToken,\"in~\",\"Filters a record set for data with a case-insensitive string.\",\"[!INCLUDE [in-operator-comparison](../../includes/in-operator-comparison.md)]\\r\\n\\r\\n## Performance tips\\r\\n\\r\\n[!INCLUDE [performance-tip-note](../../includes/performance-tip-note.md)]\\r\\n\\r\\nWhen possible, use the case-sensitive [in](in-cs-operator.md).\\r\\n\\r\\n## Syntax\\r\\n\\r\\n*T* `|` `where` *col* `in~` `(`*expression*`,` ... `)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *T* | string | &check; | The tabular input to filter.|\\r\\n| *col* | string | &check; | The column by which to filter.|\\r\\n| *expression* | scalar or tabular | &check; | An expression that specifies the values for which to search. Each expression can be a [scalar](scalar-data-types/index.md) value or a [tabular expression](tabularexpressionstatements.md) that produces a set of values. If a tabular expression has multiple columns, the first column is used. The search will consider up to 1,000,000 distinct values.|\\r\\n\\r\\n> [!NOTE]\\r\\n> An inline tabular expression must be enclosed with double parentheses. See [example](#tabular-expression).\\r\\n\\r\\n## Returns\\r\\n\\r\\nRows in *T* for which the predicate is `true`.\",'### List of scalars\\r\\n\\r\\nThe following query shows how to use `in~` with a comma-separated list of scalar values.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAwsuyS/KdS1LzSspVuCqUSjPSC1KVQguSSxJVcjMq1PQUHLz8Q/ydHFU0lFQSk/NL0rPTAQx/VzDFSL9g7yVNEG6kvNL80oAl8ORJUoAAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nStormEvents \\r\\n| where State in~ (\"FLORIDA\", \"georgia\", \"NEW YORK\") \\r\\n| count\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|Count|\\r\\n|---|\\r\\n|4775|  \\r\\n\\r\\n### Dynamic array\\r\\n\\r\\nThe following query shows how to use `in~` with a dynamic array.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAwsuyS/KdS1LzSspVuCqUSjPSC1KVQguSSxJVcjMq1PQSKnMS8zNTNaIVnLz8Q/ydHFU0lFQSk/NL0rPTAQx/VzDFSL9g7yVYjU1QQYk55fmlQAAcLCM41UAAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nStormEvents \\r\\n| where State in~ (dynamic([\"FLORIDA\", \"georgia\", \"NEW YORK\"])) \\r\\n| count\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|Count|\\r\\n|---|\\r\\n|4775|  \\r\\n\\r\\nThe same query can also be written with a [let statement](letstatement.md).\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA8tJLVEoLkksSS1WsFVIqcxLzM1M1ohWcvPxD/J0cVTSUVBKT80vSs9MBDH9XMMVIv2DvJViNa25gkvyi3Jdy1LzSooVuGoUyjNSi1IVgkFGKWQkFscn5lUqaEBM1gRKF5fm5iYWZValKiTnl+aVaGgqJFVCVAMACG2BiYIAAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nlet states = dynamic([\"FLORIDA\", \"georgia\", \"NEW YORK\"]);\\r\\nStormEvents \\r\\n| where State has_any (states)\\r\\n| summarize count() by State\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|Count|\\r\\n|---|\\r\\n|4775|\\r\\n\\r\\n### Tabular expression\\r\\n\\r\\nThe following query shows how to use `in~` with an inline tabular expression. Notice that an inline tabular expression must be enclosed with double parentheses.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAwsuyS/KdS1LzSspVuCqUSjPSC1KVQguSSxJVcjMq1PQ0AjILyjNSSzJzM9zSSxJVIApQQgr2CmYGoABULKgKD8rNbkEYoKmJtDE4tLc3MSizKpUheT80rwSDU2FpEqINACuenXZewAAAA==\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nStormEvents \\r\\n| where State in~ ((PopulationData | where Population > 5000000 | project State))\\r\\n| summarize count() by State\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|State|count_|\\r\\n|--|--|\\r\\n|TEXAS |4701|\\r\\n|ILLINOIS |2022|\\r\\n|MISSOURI |2016|\\r\\n|GEORGIA |1983|\\r\\n|MINNESOTA |1881|\\r\\n|...|...|\\r\\n\\r\\nThe same query can also be written with a [let statement](letstatement.md). Notice that the double parentheses as provided in the last example aren\\'t necessary in this case.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA02NsQ6CQBBEe75iSuhorIxW0pvwAWYlGz1yd0v29jAaw7eDEBOmnHkv49ngSR98S0bGCSdcZciezEm8kBG+eD1ZeVfjjEO9ZhkHlZ47Q/vTj0VroqEZOVpC8VfXDS5OKPdf1QKkHAKp+zA6ydHKCvf3xs9WLYRGmgAAAA==\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nlet large_states = PopulationData | where Population > 5000000 | project State;\\r\\nStormEvents \\r\\n| where State in~ (large_states)\\r\\n| summarize count() by State\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|State|count_|\\r\\n|--|--|\\r\\n|TEXAS |4701|\\r\\n|ILLINOIS |2022|\\r\\n|MISSOURI |2016|\\r\\n|GEORGIA |1983|\\r\\n|MINNESOTA |1881|\\r\\n|...|...|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/inoperator\",\"inoperator.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"indexof\",\"Reports the zero-based index of the first occurrence of a specified string within the input string.\",\"For more information, see [`indexof_regex()`](indexofregexfunction.md).\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`indexof(`*string*`,`*match*`[,`*start*`[,`*length*`[,`*occurrence*`]]])`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n|*string*| string | &check; | The source string to search.|  \\r\\n|*match*| string | &check; | The string for which to search.|\\r\\n|*start*| int | | The search start position. A negative value will offset the starting search position from the end of the *string* by this many steps: `abs(`*start*`)`. |\\r\\n|*length*| int | | The number of character positions to examine. A value of -1 means unlimited length.|\\r\\n|*occurrence*| int | | The number of the occurrence. The default is 1.|\\r\\n\\r\\n> [!NOTE]\\r\\n> If *string* or *match* isn't of type `string`, the function forcibly casts their value to `string`.\\r\\n\\r\\n## Returns\\r\\n\\r\\nThe zero-based index position of *match*.\\r\\n\\r\\n* Returns -1 if *match* isn't found in *string*.\\r\\n* Returns `null` if:\\r\\n  * *start* is less than 0.\\r\\n  * *occurrence* is less than 0.\\r\\n  * *length* is less than -1.\",'> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA42STW6DMBCF9znFyJsWyVEKhCRd9DDGjIlVYqOxadLbd4LdqpUoioXFxu97b35Gsi5uwHa3Et7Aug5v3jwL1eoOTS+k4L8ogM9uB4P379MIxk+u47f8jVOEEJnRb0DeKdX/FFnKfbGEIQyoSJ+xA1KuR8isepVVzayk5AyKYgBD/pIkUEpo53B+DKBMRIIK9FlRkBA8mGkYvoNo5Z4itJgSZfP9inmdC/lrnky81hMROo3gTXbIyGYFuW2KucUOexXtByZoep7lh1/ysqr3zeEom9TUdFger1yapRBhVKQuyIkCXJHutZG27fDJ1YbInY4+Dy6AmGkCFI9DNCLbHVfSVnJbFo+uxGkB9MODBLyPq3yRUBVrmzZvR6a+Pkjd8q0zNZ6Rr6VucUpgAzgflzbyC/vZ0L4mAwAA\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint\\r\\n idx1 = indexof(\"abcdefg\",\"cde\")    // lookup found in input string\\r\\n , idx2 = indexof(\"abcdefg\",\"cde\",1,4) // lookup found in researched range \\r\\n , idx3 = indexof(\"abcdefg\",\"cde\",1,2) // search starts from index 1, but stops after 2 chars, so full lookup can\\'t be found\\r\\n , idx4 = indexof(\"abcdefg\",\"cde\",3,4) // search starts after occurrence of lookup\\r\\n , idx5 = indexof(\"abcdefg\",\"cde\",-5)  // negative start index\\r\\n , idx6 = indexof(1234567,5,1,4)       // two first parameters were forcibly casted to strings \"12345\" and \"5\"\\r\\n , idx7 = indexof(\"abcdefg\",\"cde\",2,-1)  // lookup found in input string\\r\\n , idx8 = indexof(\"abcdefgabcdefg\", \"cde\", 1, 10, 2)   // lookup found in input range\\r\\n , idx9 = indexof(\"abcdefgabcdefg\", \"cde\", 1, -1, 3)   // the third occurrence of lookup is not in researched range\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|idx1|idx2|idx3|idx4|idx5|idx6|idx7|idx8|idx9|\\r\\n|----|----|----|----|----|----|----|----|----|\\r\\n|2   |2   |-1  |-1  | 2  |4   |2   |9   |-1  |',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/indexoffunction\",\"indexoffunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"indexof_regex\",\"Returns the zero-based index of the first occurrence of a specified lookup regular expression within the input string.\",\"See [`indexof()`](indexoffunction.md).\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`indexof_regex(`*string*`,`*match*`[,`*start*`[,`*length*`[,`*occurrence*`]]])`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n|*string*| string | &check; | The source string to search.|  \\r\\n|*match*| string | &check; | The regular expression lookup string.|\\r\\n|*start*| int | | The search start position. A negative value will offset the starting search position from the end of the *string* by this many steps: `abs(`*start*`)`. |\\r\\n|*length*| int | | The number of character positions to examine. A value of -1 means unlimited length.|\\r\\n|*occurrence*| int | | The number of the occurrence. The default is 1.|\\r\\n\\r\\n## Returns\\r\\n\\r\\nThe zero-based index position of *match*.\\r\\n\\r\\n* Returns -1 if *match* isn't found in *string*.\\r\\n* Returns `null` if:\\r\\n  * *start* is less than 0.\\r\\n  * *occurrence* is less than 0.\\r\\n  * *length* is less than -1.\\r\\n\\r\\n> [!NOTE]\\r\\n>\\r\\n\\r\\n* Overlapping matches lookup aren't supported.\\r\\n* Regular expression strings may contain characters that require either escaping or using @'' string-literals.\",'> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA42Qy07DMBBF93zFVTalkqGkwIIFEj/AN1QTe+JYGDvyo8qCj2dSatjwsmd3Nef4ek4ulAvIcWbp8QgXDC9xPCS2vFx2NGiZTuGpo2vdbRV2O/gYX+qMMdZgZEFmrgW5CMs21v4nluHRfvIUbhQeFPYC/i/59s9XKvQKV/0XtkyceJMRIjLrKOyodU2Jg+ZVI7kElPSERMFyU919p5JLZxV9FGgqMT1T0RNnmBg2BfHIydOMHDFW71s9TWs48Llns93/XuyNhm51bU+VXDiSd0b+hlI5nNZAydZXDuUd3NbxhNUBAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint\\r\\n    idx1 = indexof_regex(\"abcabc\", @\"a.c\"), // lookup found in input string\\r\\n    idx2 = indexof_regex(\"abcabcdefg\", @\"a.c\", 0, 9, 2),  // lookup found in input string\\r\\n    idx3 = indexof_regex(\"abcabc\", @\"a.c\", 1, -1, 2),  // there\\'s no second occurrence in the search range\\r\\n    idx4 = indexof_regex(\"ababaa\", @\"a.a\", 0, -1, 2), // Matches don\\'t overlap so full lookup can\\'t be found \\r\\n    idx5 = indexof_regex(\"abcabc\", @\"a|ab\", -1)  // invalid start argument\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|idx1|idx2|idx3|idx4|idx5|\\r\\n|----|----|----|----|----|\\r\\n|0   |3   |-1  |-1  |    |',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/indexofregexfunction\",\"indexofregexfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"infer_storage_schema\",\"This plugin infers schema of external data, and returns it as CSL schema string. The string can be used when [creating external tables](../management/external-tables-azurestorage-azuredatalake.md). The plugin is invoked with the [`evaluate`](evaluateoperator.md) operator.\",\"## Authentication and authorization\\r\\n\\r\\nIn the [properties of the request](#properties-of-the-request), you specify storage connection strings to access. Each storage connection string specifies the authorization method to use for access to the storage. Depending on the authorization method, the principal may need to be granted permissions on the external storage to perform the schema inference.\\r\\n\\r\\nThe following table lists the supported authentication methods and any required permissions by storage type.\\r\\n\\r\\n|Authentication method|Azure Blob Storage / Data Lake Storage Gen2|Data Lake Storage Gen1|\\r\\n|--|--|--|\\r\\n|[Impersonation](../api/connection-strings/storage-authentication-methods.md#impersonation)|Storage Blob Data Reader|Reader|\\r\\n|[Shared Access (SAS) token](../api/connection-strings/storage-authentication-methods.md#shared-access-sas-token)|List + Read|This authentication method isn't supported in Gen1.|\\r\\n|[Azure AD access token](../api/connection-strings/storage-authentication-methods.md#azure-ad-access-token)||\\r\\n|[Storage account access key](../api/connection-strings/storage-authentication-methods.md#storage-account-access-key)||This authentication method isn't supported in Gen1.|\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`evaluate` `infer_storage_schema(` *Options* `)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *Options* | dynamic | &check; |A property bag specifying the [properties of the request](#properties-of-the-request).|\\r\\n\\r\\n### Properties of the request\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n|*StorageContainers*| dynamic |&check;|An array of [storage connection strings](../api/connection-strings/storage-connection-strings.md) that represent prefix URI for stored data artifacts.|\\r\\n|*DataFormat*|string|&check;|One of the supported [data formats](../../ingestion-supported-formats.md).|\\r\\n|*FileExtension*|string||If specified, the function will only scan files ending with this file extension. Specifying the extension may speed up the process or eliminate data reading issues.|\\r\\n|*FileNamePrefix*|string||If specified, the function will only scan files starting with this prefix. Specifying the prefix may speed up the process.|\\r\\n|*Mode*|string||The schema inference strategy. A value of: `any`, `last`, `all`. The function infers the data schema from the first found file, from the last written file, or from all files respectively. The default value is `last`.|\\r\\n\\r\\n## Returns\\r\\n\\r\\nThe `infer_storage_schema` plugin returns a single result table containing a single row/column holding CSL schema string.\\r\\n\\r\\n> [!NOTE]\\r\\n>\\r\\n> * Storage container URI secret keys must have the permissions for *List* in addition to *Read*.\\r\\n> * Schema inference strategy 'all' is a very \\\"expensive\\\" operation, as it implies reading from *all* artifacts found and merging their schema.\\r\\n> * Some returned types may not be the actual ones as a result of wrong type guess (or, as a result of schema merge process). This is why you should review the result carefully before creating an external table.\",\"```\\r\\nlet options = dynamic({\\r\\n  'StorageContainers': [\\r\\n    h@'https://storageaccount.blob.core.windows.net/MobileEvents;secretKey'\\r\\n  ],\\r\\n  'FileExtension': '.parquet',\\r\\n  'FileNamePrefix': 'part-',\\r\\n  'DataFormat': 'parquet'\\r\\n});\\r\\nevaluate infer_storage_schema(options)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|CslSchema|\\r\\n|---|\\r\\n|app_id:string, user_id:long, event_time:datetime, country:string, city:string, device_type:string, device_vendor:string, ad_network:string, campaign:string, site_id:string, event_type:string, event_name:string, organic:string, days_from_install:int, revenue:real|\\r\\n\\r\\nUse the returned schema in external table definition:\\r\\n\\r\\n```\\r\\n.create external table MobileEvents(\\r\\n    app_id:string, user_id:long, event_time:datetime, country:string, city:string, device_type:string, device_vendor:string, ad_network:string, campaign:string, site_id:string, event_type:string, event_name:string, organic:string, days_from_install:int, revenue:real\\r\\n)\\r\\nkind=blob\\r\\npartition by (dt:datetime = bin(event_time, 1d), app:string = app_id)\\r\\npathformat = ('app=' app '/dt=' datetime_pattern('yyyyMMdd', dt))\\r\\ndataformat = parquet\\r\\n(\\r\\n    h@'https://storageaccount.blob.core.windows.net/MovileEvents;secretKey'\\r\\n)\\r\\n```\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/inferstorageschemaplugin\",\"inferstorageschemaplugin.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"ingestion_time\",\"Returns the approximate time at which the current record was ingested.\",'This function must be used in context of a table for which the [IngestionTime policy](../management/ingestiontimepolicy.md) is enabled. Otherwise, this function produces null values.\\r\\n\\r\\n> [!NOTE]\\r\\n> The value returned by this function is only approximate, as the ingestion process may take several minutes to complete and multiple ingestion activities may take place concurrently. To process all records of a table with exactly-once guarantees, use [database cursors](../management/databasecursor.md).\\r\\n\\r\\n> [!TIP]\\r\\n> The ingestion_time() function returns values according to the service clock as measured when ingestion was completed. As a result, this value cannot be used to \"order\" ingestion operations, as two operations that overlap in time might have any ordering of these values. If ordering records is important for application semantics, one should ensure that the table has a timestamp column as measured by the source of the data instead of relying on the ingestion_time() value.\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`ingestion_time()`\\r\\n\\r\\n## Returns\\r\\n\\r\\nA `datetime` value specifying the approximate time of ingestion into a table.',\"```\\r\\nT\\r\\n| extend ingestionTime = ingestion_time() | top 10 by ingestionTime\\r\\n```\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/ingestiontimefunction\",\"ingestiontimefunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.OperatorToken,\"invoke\",\"Invokes a lambda expression that receives the source of `invoke` as a tabular argument.\",\"> [!NOTE]\\r\\n> For more information on how to declare lambda expressions that can accept tabular arguments, see [let statements](./letstatement.md).\\r\\n\\r\\n## Syntax\\r\\n\\r\\n*T* `| invoke` *function*`(`[*param1*`,` *param2*]`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *T*| string | &check; | The tabular source.|\\r\\n| *function*| string | &check; | The name of the lambda `let` expression or stored function name to be evaluated.|\\r\\n| *param1*, *param2* ... | string || Any additional lambda arguments to pass to the function.|\\r\\n\\r\\n## Returns\\r\\n\\r\\nReturns the result of the evaluated expression.\",'The following example shows how to use the `invoke` operator to call lambda `let` expression:\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA42RzU7DMBCE736KOcZSpDQHDk2BZ+ghd7QkS2LVsSPb+RGEd8cphRLKAR/s9Vrz7WicZai06nuun2hkRw0nskBFuho0Bfbo2VVsgtKx1qpTwacgUyO0bNDRKbbJ2HhzEFmGP1ZP3sNG+KpBTYEQ7HUELnMxqdBiJD1EpDJe1XwW/DAgNIffdvGApCySuYC2ppFpPKbjt6So7fCsOcXQ3zSleBPR3spsVdNGULA+2iKXlFjgh64jp143DpJ5i5Ly8MWIc/+N2Hi8MEqs+4IpRsmY8XgmrlHPuD87/Hy/QmlskllCvB+EI9OsohdnO+RrvvluBx+4Ry6WGOdoT3zz03cp9nv5AaTMZq0DAgAA\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\n// clipped_average(): calculates percentiles limits, and then makes another \\r\\n//                    pass over the data to calculate average with values inside the percentiles\\r\\nlet clipped_average = (T:(x: long), lowPercentile:double, upPercentile:double)\\r\\n{\\r\\n   let high = toscalar(T | summarize percentiles(x, upPercentile));\\r\\n   let low = toscalar(T | summarize percentiles(x, lowPercentile));\\r\\n   T \\r\\n   | where x > low and x < high\\r\\n   | summarize avg(x) \\r\\n};\\r\\nrange x from 1 to 100 step 1\\r\\n| invoke clipped_average(5, 99)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|avg_x|\\r\\n|---|\\r\\n|52|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/invokeoperator\",\"invokeoperator.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"ipv4_compare\",\"Compares two IPv4 strings. The two IPv4 strings are parsed and compared while accounting for the combined IP-prefix mask calculated from argument prefixes, and the optional `PrefixMask` argument.\",\"## Syntax\\r\\n\\r\\n`ipv4_compare(`*Expr1*`,`*Expr2*`[ ,`*PrefixMask*`])`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n|*Expr1*, *Expr2*| string | &check; | A string expression representing an IPv4 address. IPv4 strings can be masked using [IP-prefix notation](#ip-prefix-notation).\\r\\n|*PrefixMask*| int | | An integer from 0 to 32 representing the number of most-significant bits that are taken into account.\\r\\n\\r\\n[!INCLUDE [ip-prefix-notation](../../includes/ip-prefix-notation.md)]\\r\\n\\r\\n## Returns\\r\\n\\r\\n* `0`: If the long representation of the first IPv4 string argument is equal to the second IPv4 string argument\\r\\n* `1`: If the long representation of the first IPv4 string argument is greater than the second IPv4 string argument\\r\\n* `-1`: If the long representation of the first IPv4 string argument is less than the second IPv4 string argument\\r\\n* `null`: If conversion for one of the two IPv4 strings wasn't successful.\\r\\n\\r\\n## Examples: IPv4 comparison equality cases\\r\\n\\r\\n### Compare IPs using the IP-prefix notation specified inside the IPv4 strings\\r\\n\\r\\n> [!div class=\\\"nextstepaction\\\"]\\r\\n> <a href=\\\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA51QsQ6CMBDd+YrbkAQprWDUxNHBzd0YAlLIJUhrWwyDH+8ldYAw6d1wyct7715eXTraqpMr1LywzmDfHvyJAbWYQ1FwDSDke5Hw7S7hSRrGQLNEaBiD03MoOzhf7EzEmciINUFEnn9lJBIZVOhItdZGNjgCWhisrKFRBu7qoUuDVvVzy0UOsvRv/rZkm3SR8nfLW/AGOTrZ12CkHToHR6r1lRWeM6192nf0AaIgALOYAQAA\\\" target=\\\"_blank\\\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\ndatatable(ip1_string:string, ip2_string:string)\\r\\n[\\r\\n '192.168.1.0',    '192.168.1.0',       // Equal IPs\\r\\n '192.168.1.1/24', '192.168.1.255',     // 24 bit IP-prefix is used for comparison\\r\\n '192.168.1.1',    '192.168.1.255/24',  // 24 bit IP-prefix is used for comparison\\r\\n '192.168.1.1/30', '192.168.1.255/24',  // 24 bit IP-prefix is used for comparison\\r\\n]\\r\\n| extend result = ipv4_compare(ip1_string, ip2_string)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|ip1_string|ip2_string|result|\\r\\n|---|---|---|\\r\\n|192.168.1.0|192.168.1.0|0|\\r\\n|192.168.1.1/24|192.168.1.255|0|\\r\\n|192.168.1.1|192.168.1.255/24|0|\\r\\n|192.168.1.1/30|192.168.1.255/24|0|\\r\\n\\r\\n### Compare IPs using IP-prefix notation specified inside the IPv4 strings and as additional argument of the `ipv4_compare()` function\\r\\n\\r\\n> [!div class=\\\"nextstepaction\\\"]\\r\\n> <a href=\\\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA52QQQrCMBBF9z3F7GqhtiamRQsewJ17kdLatAzUJCSpdOHhDUYh6kpnFh8ew2P4XWPdtiNfoCK1sRrFUPlIARX9RErzHudqlGJIomMEMdnSjJSbjGQkTsFNQFYPsiYp5LkLaNHC/rD0DkADk+Ed9FLDWV5Uo9FI8a7MKXOOgNCicOCppOwP5deXXknZT8pTdAM+Wy460NxMo4Wdq+vKan8T1hn2+CowuQNRhO/LeAEAAA==\\\" target=\\\"_blank\\\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\ndatatable(ip1_string:string, ip2_string:string, prefix:long)\\r\\n[\\r\\n '192.168.1.1',    '192.168.1.0',   31, // 31 bit IP-prefix is used for comparison\\r\\n '192.168.1.1/24', '192.168.1.255', 31, // 24 bit IP-prefix is used for comparison\\r\\n '192.168.1.1',    '192.168.1.255', 24, // 24 bit IP-prefix is used for comparison\\r\\n]\\r\\n| extend result = ipv4_compare(ip1_string, ip2_string, prefix)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|ip1_string|ip2_string|prefix|result|\\r\\n|---|---|---|---|\\r\\n|192.168.1.1|192.168.1.0|31|0|\\r\\n|192.168.1.1/24|192.168.1.255|31|0|\\r\\n|192.168.1.1|192.168.1.255|24|0|\",\"\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/ipv4-comparefunction\",\"\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"ipv4_is_in_any_range\",\"Checks whether IPv4 string address is in any of the specified IPv4 address ranges.\",\"## Syntax\\r\\n\\r\\n`ipv4_is_in_any_range(`*Ipv4Address* `,` *Ipv4Range* [ `,` *Ipv4Range* ...] `)`\\r\\n\\r\\n`ipv4_is_in_any_range(`*Ipv4Address* `,` *Ipv4Ranges* `)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *Ipv4Address*| string | &check; | An expression representing an IPv4 address.|\\r\\n| *Ipv4Range*| string | &check; | An IPv4 range or list of IPv4 ranges written with [IP-prefix notation](#ip-prefix-notation).|\\r\\n| *Ipv4Ranges*| dynamic | &check; | A dynamic array containing IPv4 ranges written with [IP-prefix notation](#ip-prefix-notation).|\\r\\n\\r\\n> [!NOTE]\\r\\n> Either one or more *IPv4Range* strings or an *IPv4Ranges* dynamic array is required.\\r\\n\\r\\n[!INCLUDE [ip-prefix-notation](../../includes/ip-prefix-notation.md)]\\r\\n\\r\\n## Returns\\r\\n\\r\\n* `true`: If the IPv4 address is in the range of any of the specified IPv4 networks.\\r\\n* `false`: Otherwise.\\r\\n* `null`: If conversion for one of the two IPv4 strings wasn't successful.\",'### Syntax using list of strings\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAysoyswrUQhKLS7NKbHNLCgzic8sjs/Mi0/Mq4wvSsxLT9VQN7Q00jM0s9Az1DNT11FA4hrqG5mARQz0QNBQ3wLMMzIHyoG4hmbqmgA/iDq/YAAAAA==\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint Result=ipv4_is_in_any_range(\\'192.168.1.6\\', \\'192.168.1.1/24\\', \\'10.0.0.1/8\\', \\'127.1.0.1/16\\')\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|Result|\\r\\n|--|\\r\\n|true|\\r\\n\\r\\n### Syntax using dynamic array\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAysoyswrUQhKLS7NKbHNLCgzic8sjs/Mi0/Mq4wvSsxLT9VQMjQy1zMAQkMlHYWUyrzE3MxkjWgUUSVDSyM9QzMLPUMgN1ZTEwBpBE7bVQAAAA==\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint Result=ipv4_is_in_any_range(\"127.0.0.1\", dynamic([\"127.0.0.1\", \"192.168.1.1\"]))\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|Result|\\r\\n|--|\\r\\n|true|\\r\\n\\r\\n### Extend table with IPv4 range check\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA1WP0QqCMBSG7/cUwysFmR4ts8QHECK8l5ClQ0ZrhhuV0MN3lFh0/ruPc/6Po4Slx7Hj6iTsc5yupuxnzW+y8xtCcTzYJwyynAGDCDIv/NJkx2IMRLlDsSPkHBREYXNVYx+3mIsSflUfjJ2kHgLauBtgCUtdh5Ntf6Z0ceMaOMTWoKYgaCBvKl5W6J5WZn2llPfHppWmlbrlem4nrofFHv5/GnwAOfWtJ/wAAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nlet LocalNetworks=dynamic([\\r\\n    \"192.168.1.1/16\",\\r\\n    \"127.0.0.1/8\",\\r\\n    \"10.0.0.1/8\"\\r\\n]);\\r\\nlet IPs=datatable(IP:string) [\\r\\n    \"10.1.2.3\",\\r\\n    \"192.168.1.5\",\\r\\n    \"123.1.11.21\",\\r\\n    \"1.1.1.1\"\\r\\n];\\r\\nIPs\\r\\n| extend IsLocal=ipv4_is_in_any_range(IP, LocalNetworks)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|IP|IsLocal|\\r\\n|---|---|\\r\\n|10.1.2.3|true|\\r\\n|192.168.1.5|true|\\r\\n|123.1.11.21|false|\\r\\n|1.1.1.1|false|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/ipv4-is-in-any-range-function\",\"ipv4-is-in-any-range-function.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"ipv4_is_in_range\",\"Checks if IPv4 string address is in IPv4-prefix notation range.\",\"## Syntax\\r\\n\\r\\n`ipv4_is_in_range(`*Ipv4Address*`,`*Ipv4Range*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *Ipv4Address*| string | &check; | An expression representing an IPv4 address.|\\r\\n| *Ipv4Range*| string | &check; | An IPv4 range or list of IPv4 ranges written with [IP-prefix notation](#ip-prefix-notation).|\\r\\n\\r\\n[!INCLUDE [ip-prefix-notation](../../includes/ip-prefix-notation.md)]\\r\\n\\r\\n## Returns\\r\\n\\r\\n* `true`: If the long representation of the first IPv4 string argument is in range of the second IPv4 string argument.\\r\\n* `false`: Otherwise.\\r\\n* `null`: If conversion for one of the two IPv4 strings wasn't successful.\",\"> [!div class=\\\"nextstepaction\\\"]\\r\\n> <a href=\\\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA4WPsQrCQBBE+/uK7WIgJtwRRQVLCzt7kXDxNmEhXuLtRVL48a4oKFg40z14MONslNYdzmiorHMBmTccA/k2A0HB+hbfIFVHBYlem1wvV7nOdZKB5JdIigJ219F2sD/wH8ksFoUpn1gkU0JNUaz5ELChCYhhZHTQ9AHO/WWwgbj36qTugFNE70Amj12Ercy9lRVxRf41++vS50v6AE4amhHyAAAA\\\" target=\\\"_blank\\\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\ndatatable(ip_address:string, ip_range:string)\\r\\n[\\r\\n '192.168.1.1',    '192.168.1.1',       // Equal IPs\\r\\n '192.168.1.1',    '192.168.1.255/24',  // 24 bit IP-prefix is used for comparison\\r\\n]\\r\\n| extend result = ipv4_is_in_range(ip_address, ip_range)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|ip_address|ip_range|result|\\r\\n|---|---|---|\\r\\n|192.168.1.1|192.168.1.1|true|\\r\\n|192.168.1.1|192.168.1.255/24|true|\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/ipv4-is-in-range-function\",\"ipv4-is-in-range-function.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"ipv4_is_match\",\"Matches two IPv4 strings. The two IPv4 strings are parsed and compared while accounting for the combined IP-prefix mask calculated from argument prefixes, and the optional `prefix` argument.\",\"## Syntax\\r\\n\\r\\n`ipv4_is_match(`*ip1*`,`*ip2*`[ ,`*prefix*`])`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *ip1*, *ip2*| string | &check; | An expression representing an IPv4 address. IPv4 strings can be masked using [IP-prefix notation](#ip-prefix-notation).|\\r\\n| *prefix*| int | | An integer from 0 to 32 representing the number of most-significant bits that are taken into account.|\\r\\n\\r\\n[!INCLUDE [ip-prefix-notation](../../includes/ip-prefix-notation.md)]\\r\\n\\r\\n## Returns\\r\\n\\r\\n* `true`: If the long representation of the first IPv4 string argument is equal to the second IPv4 string argument.\\r\\n* `false`: Otherwise.\\r\\n* `null`: If conversion for one of the two IPv4 strings wasn't successful.\\r\\n\\r\\n>[!NOTE]\\r\\n> When matching against an IPv4 address that's not a range, we recommend using the [equals operator](equals-cs-operator.md) (`==`), for better performance.\",\"### IPv4 comparison equality - IP-prefix notation specified inside the IPv4 strings\\r\\n\\r\\n> [!div class=\\\"nextstepaction\\\"]\\r\\n> <a href=\\\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA51Quw6CQBDs+YrtkAQ57gSjJpYWdvbGkAMO3YTHeXcYCj/eTbCAUOlssclkZ3YypXQ0ea1WqHlmncH2fhhXCKjFnAq8qwc+34uIb3cRj2I/BMKSITAGp2cvazhf7EzEmUjoasKINP3KSCQSyNGRaq2NqnAAtNBbVULVGSi6RkuDtmvnloscZDm++duSbeJFyt8tb94b1OBUW4JRtq8dHKnWV5KhzRrpisek92nhwQew+y1lmQEAAA==\\\" target=\\\"_blank\\\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\ndatatable(ip1_string:string, ip2_string:string)\\r\\n[\\r\\n '192.168.1.0',    '192.168.1.0',       // Equal IPs\\r\\n '192.168.1.1/24', '192.168.1.255',     // 24 bit IP-prefix is used for comparison\\r\\n '192.168.1.1',    '192.168.1.255/24',  // 24 bit IP-prefix is used for comparison\\r\\n '192.168.1.1/30', '192.168.1.255/24',  // 24 bit IP-prefix is used for comparison\\r\\n]\\r\\n| extend result = ipv4_is_match(ip1_string, ip2_string)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|ip1_string|ip2_string|result|\\r\\n|---|---|---|\\r\\n|192.168.1.0|192.168.1.0|true|\\r\\n|192.168.1.1/24|192.168.1.255|true|\\r\\n|192.168.1.1|192.168.1.255/24|true|\\r\\n|192.168.1.1/30|192.168.1.255/24|true|\\r\\n\\r\\n### IPv4 comparison equality - IP-prefix notation specified inside the IPv4 strings and an additional argument of the `ipv4_is_match()` function\\r\\n\\r\\n> [!div class=\\\"nextstepaction\\\"]\\r\\n> <a href=\\\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA52QvQrCMBCA9z7FbbVQWxNT0YIP4OYuUvqT1oM2CUkqHXx4g1WIOundcPANH8fXlNZt1fMFKlIYq1F0+XxiQEU/kdK8xSnvpeii4BRASHY0IZttQhISxuDGI6sHWZMY0tQdqNDC4bicHYAGRsMbaKWGWg6q1GikeFemlDmHR2iWOfBUUvaH8uvLWUnZT8pzcAM+WS4a0NyMvYW9y3VlBZpiKG198Xr6IV8FozvG3oupeQEAAA==\\\" target=\\\"_blank\\\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\ndatatable(ip1_string:string, ip2_string:string, prefix:long)\\r\\n[\\r\\n '192.168.1.1',    '192.168.1.0',   31, // 31 bit IP-prefix is used for comparison\\r\\n '192.168.1.1/24', '192.168.1.255', 31, // 24 bit IP-prefix is used for comparison\\r\\n '192.168.1.1',    '192.168.1.255', 24, // 24 bit IP-prefix is used for comparison\\r\\n]\\r\\n| extend result = ipv4_is_match(ip1_string, ip2_string, prefix)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|ip1_string|ip2_string|prefix|result|\\r\\n|---|---|---|---|\\r\\n|192.168.1.1|192.168.1.0|31|true|\\r\\n|192.168.1.1/24|192.168.1.255|31|true|\\r\\n|192.168.1.1|192.168.1.255|24|true|\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/ipv4-is-matchfunction\",\"ipv4-is-matchfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"ipv4_is_private\",\"Checks if the IPv4 string address belongs to a set of private network IPs.\",\"[Private network addresses](https://en.wikipedia.org/wiki/Private_network) were originally defined to assist in delaying IPv4 address exhaustion. IP packets originating from or addressed to a private IP address can't be routed through the public internet.\\r\\n\\r\\n## Private IPv4 addresses\\r\\n\\r\\nThe Internet Engineering Task Force (IETF) has directed the Internet Assigned Numbers Authority (IANA) to reserve the following IPv4 address ranges for private networks:\\r\\n\\r\\n| IP address range|Number of addresses|Largest CIDR block (subnet mask)|\\r\\n|-----------------|-------------------|--------------------------------|\\r\\n|10.0.0.0 \\u2013 10.255.255.255|16777216|10.0.0.0/8 (255.0.0.0)|\\r\\n|172.16.0.0 \\u2013 172.31.255.255|1048576|172.16.0.0/12 (255.240.0.0)|\\r\\n|192.168.0.0 \\u2013 192.168.255.255|65536|192.168.0.0/16 (255.255.0.0)|\\r\\n\\r\\n```\\r\\nipv4_is_private('192.168.1.1/24') == true\\r\\nipv4_is_private('10.1.2.3/24') == true\\r\\nipv4_is_private('202.1.2.3') == false\\r\\nipv4_is_private(\\\"127.0.0.1\\\") == false\\r\\n```\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`ipv4_is_private(`*ip*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n|*ip*| string| &check; | An expression representing an IPv4 address. IPv4 strings can be masked using [IP-prefix notation](#ip-prefix-notation).|\\r\\n\\r\\n[!INCLUDE [ip-prefix-notation](../../includes/ip-prefix-notation.md)]\\r\\n\\r\\n## Returns\\r\\n\\r\\n* `true`: If the IPv4 address belongs to any of the private network ranges.\\r\\n* `false`: Otherwise.\\r\\n* `null`: If parsing of the input as IPv4 address string wasn't successful.\\r\\n\\r\\n## Example: Check if IPv4 belongs to a private network\\r\\n\\r\\n> [!div class=\\\"nextstepaction\\\"]\\r\\n> <a href=\\\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA0tJLAHCpJxUjcyC+OKSosy8dCsIpckVzaWgbmigZ6hnpGesrgPiWBrpGZpZAEUM9Y1MIEJG5noGQGgI5MVy1SikVpSk5qUoFKUWl+aUKNgqZBaUmcRnFscXFGWWJZYg2aIJAAFWRs16AAAA\\\" target=\\\"_blank\\\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\ndatatable(ip_string:string)\\r\\n[\\r\\n '10.1.2.3',\\r\\n '192.168.1.1/24',\\r\\n '127.0.0.1',\\r\\n]\\r\\n| extend result = ipv4_is_private(ip_string)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|ip_string|result|\\r\\n|---|---|\\r\\n|10.1.2.3|true|\\r\\n|192.168.1.1/24|true|\\r\\n|127.0.0.1|false|\",\"\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/ipv4-is-privatefunction\",\"\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"ipv4_lookup\",\"The `ipv4_lookup` plugin looks up an IPv4 value in a lookup table and returns rows with matched values. The plugin is invoked with the [`evaluate`](evaluateoperator.md) operator.\",\"## Syntax\\r\\n\\r\\n*T* `|` `evaluate` `ipv4_lookup(` *LookupTable* `,` *SourceIPv4Key* `,` *IPv4LookupKey* [`,` *ExtraKey1* [.. `,` *ExtraKeyN* [`,` *return_unmatched* ]]] `)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *T* | string | &check; | The tabular input whose column *SourceIPv4Key* will be used for IPv4 matching.|\\r\\n| *LookupTable* | string | &check; | Table or tabular expression with IPv4 lookup data, whose column *LookupKey* will be used for IPv4 matching. IPv4 values can be masked using [IP-prefix notation](#ip-prefix-notation).|\\r\\n| *SourceIPv4Key* | string | &check; | The column of *T* with IPv4 string to be looked up in *LookupTable*. IPv4 values can be masked using [IP-prefix notation](#ip-prefix-notation).|\\r\\n| *IPv4LookupKey* | string | &check; | The column of *LookupTable* with IPv4 string that is matched against each *SourceIPv4Key* value.|\\r\\n| *ExtraKey1* .. *ExtraKeyN* | string | | Additional column references that are used for lookup matches. Similar to `join` operation: records with equal values will be considered matching. Column name references must exist both is source table `T` and `LookupTable`.|\\r\\n| *return_unmatched* | bool | | A boolean flag that defines if the result should include all or only matching rows (default: `false` - only matching rows returned).|\\r\\n\\r\\n[!INCLUDE [ip-prefix-notation](../../includes/ip-prefix-notation.md)]\\r\\n\\r\\n## Returns\\r\\n\\r\\nThe `ipv4_lookup` plugin returns a result of join (lookup) based on IPv4 key. The schema of the table is the union of the source table and the lookup table, similar to the result of the [`lookup` operator](lookupoperator.md).\\r\\n\\r\\nIf the *return_unmatched* argument is set to `true`, the resulting table will include both matched and unmatched rows (filled with nulls).\\r\\n\\r\\nIf the *return_unmatched* argument is set to `false`, or omitted (the default value of `false` is used), the resulting table will have as many records as matching results. This variant of lookup has better performance compared to `return_unmatched=true` execution.\\r\\n\\r\\n> [!NOTE]\\r\\n>\\r\\n> * This plugin covers the scenario of IPv4-based join, assuming a small lookup table size (100K-200K rows), with the input table optionally having a larger size.\\r\\n> * The performance of the plugin will depend on the sizes of the lookup and data source tables, the number of columns, and number of matching records.\",'### IPv4 lookup - matching rows only\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA12STU/DMAyG7/0V1i6AVJIlW8cY4sCXEOzABOKE0BTaMKK1SZWkm5D48dhtgY1D3ybOY79WYs7hbgGlc+umhqjeSj3DwPJaRZVwDgvlo1ElFLiHd++qGXzEWIcZ515t2crEj+atCdrnzkZtI8tdxQkOOga+0s7U8tjUmzGvVIjat2e7cZaHTVLq+GMK561X28mh1XHr/HoWojd2lQKZGIs2y9wVug9D+he2qtI7dGOj/1ya4Hb5v4Md+ih5SQAGQgg2mTIhp2zIxckgHVw8kQSj8He/IFG1soOU6IwhRuApxm+eSRrvao2LR9o9NqFNJFbKEZNZht8YM+T4X+mnWxJsRNXO6y5lPGGjCZPDIcsEH0kEHq5Icq1sm3Q1J8Gng7tQKluE3gpzmJiOfnz2O7u9RHm2JuoC5mhYuArTXs/6Rwh7D2Dqvfs5+C0t5EEKADgh+6UIomsRrAOgg7qboENxKpmYZFiAiRNE2gpr67aWekD/5Av0RpWNihpoQJbdbB7285FiMIV+MI6+AVer8Qy+AgAA\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\n// IP lookup table: IP_Data\\r\\n// Partial data from: https://raw.githubusercontent.com/datasets/geoip2-ipv4/master/data/geoip2-ipv4.csv\\r\\nlet IP_Data = datatable(network:string, continent_code:string ,continent_name:string, country_iso_code:string, country_name:string)\\r\\n[\\r\\n  \"111.68.128.0/17\",\"AS\",\"Asia\",\"JP\",\"Japan\",\\r\\n  \"5.8.0.0/19\",\"EU\",\"Europe\",\"RU\",\"Russia\",\\r\\n  \"223.255.254.0/24\",\"AS\",\"Asia\",\"SG\",\"Singapore\",\\r\\n  \"46.36.200.51/32\",\"OC\",\"Oceania\",\"CK\",\"Cook Islands\",\\r\\n  \"2.20.183.0/24\",\"EU\",\"Europe\",\"GB\",\"United Kingdom\",\\r\\n];\\r\\nlet IPs = datatable(ip:string)\\r\\n[\\r\\n  \\'2.20.183.12\\',   // United Kingdom\\r\\n  \\'5.8.1.2\\',       // Russia\\r\\n  \\'192.165.12.17\\', // Unknown\\r\\n];\\r\\nIPs\\r\\n| evaluate ipv4_lookup(IP_Data, ip, network)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|ip|network|continent_code|continent_name|country_iso_code|country_name|\\r\\n|---|---|---|---|---|---|\\r\\n|2.20.183.12|2.20.183.0/24|EU|Europe|GB|United Kingdom|\\r\\n|5.8.1.2|5.8.0.0/19|EU|Europe|RU|Russia|\\r\\n\\r\\n### IPv4 lookup - return both matching and non-matching rows\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA11SwW7bMAy9+yuIXNoCnhQpcZqm6GHrhqLrYUGLnobCUG0tEWJLhkQlGLCPH2U7RVIDpq3H9/gIipzD4xoa53axA1TvjV4RUH5XqDLOYa08GtVATWf44127ggRvEbuw4tyrA9sY3Mb3GLSvnEVtkVWu5UkQNAa+0c508ovp9nPeqoDa97lTnFVhnzUaj8Zw1/v13VxajQfnd6uA3thNnjyMJZeycrUeUTiBrWpP4WjR/y1NcJ/5Q+KUfZX9zoCeiRCCLZZMyCWbcnE9ySdfX1IIRtHn5zoF1Sk7yQd+wYiYqDeU+fGaQvSu0/TznE7PMfTSgS3ljMmioHdOGjn/VP7lIQXqR3XO66NovmCzBZPTKSsEn0mi/LpPodLK9rL7pxToGuExNMrW4cOOVEwsZ0ev8/4evlF4tQZ1DU9kWruWhG+343WEs6sw3Tiq46QuPooLeZETQKtxXmygpQEJNlBgoA0zGdLiRjKxKKgIE9dE6qvsrDvY1Al1kf0DvVdNVKghLUw57OvluC85gTmMi5KD1xi9LaNtFVZb6uUO0Ed99R9LR6CF6wIAAA==\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\n// IP lookup table: IP_Data\\r\\n// Partial data from: \\r\\n// https://raw.githubusercontent.com/datasets/geoip2-ipv4/master/data/geoip2-ipv4.csv\\r\\nlet IP_Data = datatable(network:string,continent_code:string ,continent_name:string ,country_iso_code:string ,country_name:string )\\r\\n[\\r\\n    \"111.68.128.0/17\",\"AS\",\"Asia\",\"JP\",\"Japan\",\\r\\n    \"5.8.0.0/19\",\"EU\",\"Europe\",\"RU\",\"Russia\",\\r\\n    \"223.255.254.0/24\",\"AS\",\"Asia\",\"SG\",\"Singapore\",\\r\\n    \"46.36.200.51/32\",\"OC\",\"Oceania\",\"CK\",\"Cook Islands\",\\r\\n    \"2.20.183.0/24\",\"EU\",\"Europe\",\"GB\",\"United Kingdom\",\\r\\n];\\r\\nlet IPs = datatable(ip:string)\\r\\n[\\r\\n    \\'2.20.183.12\\',   // United Kingdom\\r\\n    \\'5.8.1.2\\',       // Russia\\r\\n    \\'192.165.12.17\\', // Unknown\\r\\n];\\r\\nIPs\\r\\n| evaluate ipv4_lookup(IP_Data, ip, network, return_unmatched = true)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|ip|network|continent_code|continent_name|country_iso_code|country_name|\\r\\n|---|---|---|---|---|---|\\r\\n|2.20.183.12|2.20.183.0/24|EU|Europe|GB|United Kingdom|\\r\\n|5.8.1.2|5.8.0.0/19|EU|Europe|RU|Russia|\\r\\n|192.165.12.17||||||\\r\\n\\r\\n### IPv4 lookup - using source in external_data()\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA12RTU/DMAyG7/0VuXWTSkrL1yjajQvigkCcJhRlrbVFS+MqcbpN4sfjfiAmcsvjR8lr2wKJlzf1rEmLtYATgXfaqobvCwd0RH+oAnnjdtkO0OkWlGkqi3yv0ZFx4EjV2MCv9UcHeaaCcXTkz8oE/KdP/ELOTFDaoTu3GIPqPJ7O1RbRDjxoAmsNwcB704AfS8tE8Nmke6IuVHnu9VHuDO3jNgbwQyQOJGts86GxABRy7sZ05ZXp+tu81YH7HmuXXNahT7+eEjvOKPB8BoP01sLCdHPaZbIZP09LWV7LYnUjizLNGOS5+HSctBGvrDXYTtqdXMlCToqYtPcYgtFTuXgsZXF/x4/I4oElLn8coQGXcBAOkXwL6LWNPAcxZFQW8RC7xbzDjGEm5sVlwgNF71R0raZ6z1HWgnyE5Q/Q4oI/9gEAAA==\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nlet IP_Data = external_data(network:string,geoname_id:long,continent_code:string,continent_name:string ,country_iso_code:string,country_name:string,is_anonymous_proxy:bool,is_satellite_provider:bool)\\r\\n    [\\'https://raw.githubusercontent.com/datasets/geoip2-ipv4/master/data/geoip2-ipv4.csv\\'];\\r\\nlet IPs = datatable(ip:string)\\r\\n[\\r\\n    \\'2.20.183.12\\',   // United Kingdom\\r\\n    \\'5.8.1.2\\',       // Russia\\r\\n    \\'192.165.12.17\\', // Sweden\\r\\n];\\r\\nIPs\\r\\n| evaluate ipv4_lookup(IP_Data, ip, network, return_unmatched = true)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|ip|network|geoname_id|continent_code|continent_name|country_iso_code|country_name|is_anonymous_proxy|is_satellite_provider|\\r\\n|---|---|---|---|---|---|---|---|---|\\r\\n|2.20.183.12|2.20.183.0/24|2635167|EU|Europe|GB|United Kingdom|0|0|\\r\\n|5.8.1.2|5.8.0.0/19|2017370|EU|Europe|RU|Russia|0|0|\\r\\n|192.165.12.17|192.165.8.0/21|2661886|EU|Europe|SE|Sweden|0|0|\\r\\n\\r\\n### IPv4 lookup - using extra columns for matching\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA22SS0/DMBCE7/kVe0srBYeEVynigkAIcUEgTghFbrJqLRxvZG9aKvHjWSdF5ZVDFH+eSXYmtshw91Bda9ZwCfjO6J22VSPriUPekH+bB/bGLbMlktMtVqaZW5J1TY6NQ8dVTQ1+qfY0incUBPeO/bYygX7JR/5NnJlQaUdu21Ifqs7T+3a+ILKRB81orWGMfG0a9MPWNAG5XtIVcxfmee71Ri0Nr/pFH9DHkWQgVVObx2ABOeSSxnTlgenWx3mrg+Qe9r5zVYd1+nqR2KGjIP1EBeuFxYnpvqaFfxNH/G/iafIyDJuWqjxUxexIFWWaRXDTe+pQntPbK7nnOTw7SdrAvdgaakfbiZqpQo0W+Gl7fB5tj30IRo/y4rxUxemJfEQVZ1G0lw+vEPnTBht0YAKkTzcpHEAgMAwbcinDAqHVXK+wSaQJaSH5AFxr28uPgFhSZYne+m6yO0SZwAx2J+d3N39LmX4Cz/sMXoACAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nlet IP_Data = external_data(network:string,geoname_id:long,continent_code:string,continent_name:string ,country_iso_code:string,country_name:string,is_anonymous_proxy:bool,is_satellite_provider:bool)\\r\\n    [\\'https://raw.githubusercontent.com/datasets/geoip2-ipv4/master/data/geoip2-ipv4.csv\\'];\\r\\nlet IPs = datatable(ip:string, continent_name:string, country_iso_code:string)\\r\\n[\\r\\n    \\'2.20.183.12\\',   \\'Europe\\', \\'GB\\', // United Kingdom\\r\\n    \\'5.8.1.2\\',       \\'Europe\\', \\'RU\\', // Russia\\r\\n    \\'192.165.12.17\\', \\'Europe\\', \\'\\',   // Sweden is \\'SE\\' - so it won\\'t be matched\\r\\n];\\r\\nIPs\\r\\n| evaluate ipv4_lookup(IP_Data, ip, network, continent_name, country_iso_code)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|ip|continent_name|country_iso_code|network|geoname_id|continent_code|country_name|is_anonymous_proxy|is_satellite_provider|\\r\\n|---|---|---|---|---|---|---|---|---|\\r\\n|2.20.183.12|Europe|GB|2.20.183.0/24|2635167|EU|United Kingdom|0|0|\\r\\n|5.8.1.2|Europe|RU|5.8.0.0/19|2017370|EU|Russia|0|0|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/ipv4-lookup-plugin\",\"ipv4-lookup-plugin.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"ipv4_netmask_suffix\",\"Returns the value of the IPv4 netmask suffix from an IPv4 string address.\",\"## Syntax\\r\\n\\r\\n`ipv4_netmask_suffix(`*ip*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n|*ip*| string | &check;| An expression representing an IPv4 address. IPv4 strings can be masked using [IP-prefix notation](#ip-prefix-notation).|\\r\\n\\r\\n[!INCLUDE [ip-prefix-notation](../../includes/ip-prefix-notation.md)]\\r\\n\\r\\n## Returns\\r\\n\\r\\n* The value of the netmask suffix the IPv4 address. If the suffix isn't present in the input, a value of `32` (full netmask suffix) is returned.\\r\\n* `null`: If parsing the input as an IPv4 address string wasn't successful.\\r\\n\\r\\n## Example: Resolve IPv4 mask suffix\\r\\n\\r\\n> [!div class=\\\"nextstepaction\\\"]\\r\\n> <a href=\\\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA0tJLAHCpJxUjcyC+OKSosy8dCsIpckVzaWgbmigZ6hnpGesrgPiWBrpGZpZAEUM9Y1MIEJG5noGQGiob2gGFIjlqlFIrShJzUtRSM5MKYovLk1Ly6xQsFXILCgzic9LLclNLM6GiiJs1AQAK1xCiYYAAAA=\\\" target=\\\"_blank\\\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\ndatatable(ip_string:string)\\r\\n[\\r\\n '10.1.2.3',\\r\\n '192.168.1.1/24',\\r\\n '127.0.0.1/16',\\r\\n]\\r\\n| extend cidr_suffix = ipv4_netmask_suffix(ip_string)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|ip_string|cidr_suffix|\\r\\n|---|---|\\r\\n|10.1.2.3|32|\\r\\n|192.168.1.1/24|24|\\r\\n|127.0.0.1/16|16|\",\"\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/ipv4-netmask-suffix-function\",\"\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"ipv4_range_to_cidr_list\",\"Converts a IPv4 address range denoted by starting and ending IPv4 addresses to a list of IPv4 ranges in CIDR notation.\",\"## Syntax\\r\\n\\r\\n`ipv4_range_to_cidr_list(`*StartAddress* `,` *EndAddress* `)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *StartAddress*| string | &check; | An expression representing a starting IPv4 address of the range.|\\r\\n| *EndAddress*| string | &check; | An expression representing an ending IPv4 address of the range.|\\r\\n\\r\\n## Returns\\r\\n\\r\\nA dynamic array object containing the list of ranges in CIDR notation.\\r\\n\\r\\n[!INCLUDE [CIDR notation](../../includes/ip-prefix-notation.md)]\",'```\\r\\nprint start_IP=\"1.1.128.0\", end_IP=\"1.1.140.255\"\\r\\n | project ipv4_range_list = ipv4_range_to_cidr_list(start_IP, end_IP)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|ipv4_range_list|\\r\\n|--|\\r\\n|`[\"1.1.128.0/21\", \"1.1.136.0/22\",\"1.1.140.0/24\"]`|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/ipv4-range-to-cidr-list-function\",\"ipv4-range-to-cidr-list-function.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"ipv6_compare\",\"Compares two IPv6 or IPv4 network address strings. The two IPv6 strings are parsed and compared while accounting for the combined IP-prefix mask calculated from argument prefixes, and the optional `prefix` argument.\",\">[!Note]\\r\\n> The function can accept and compare arguments representing both IPv6 and IPv4 network addresses. However, if the caller knows that arguments are in IPv4 format, use [ipv4_is_compare()](./ipv4-comparefunction.md) function. This function will result in better runtime performance.\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`ipv6_compare(`*ip1*`,`*ip2*`[ ,`*prefix*`])`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *ip1*, *ip2*| string | &check; | An expression representing an IPv6 or IPv4 address. IPv6 and IPv4 strings can be masked using [IP-prefix notation](#ip-prefix-notation).|\\r\\n| *prefix*| int | | An integer from 0 to 128 representing the number of most significant bits that are taken into account.|\\r\\n\\r\\n[!INCLUDE [ip-prefix-notation](../../includes/ip-prefix-notation.md)]\\r\\n\\r\\n## Returns\\r\\n\\r\\n* `0`: If the long representation of the first IPv6 string argument is equal to the second IPv6 string argument.\\r\\n* `1`: If the long representation of the first IPv6 string argument is greater than the second IPv6 string argument.\\r\\n* `-1`: If the long representation of the first IPv6 string argument is less than the second IPv6 string argument.\\r\\n* `null`: If conversion for one of the two IPv6 strings wasn't successful.\\r\\n\\r\\n## Examples: IPv6/IPv4 comparison equality cases\\r\\n\\r\\n### Compare IPs using the IP-prefix notation specified inside the IPv6/IPv4 strings\\r\\n\\r\\n> [!div class=\\\"nextstepaction\\\"]\\r\\n> <a href=\\\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA61UwU6EMBC98xVzWzdZgVbA0sSjBw8m3o3ZdKE1TRCQwoaDH+/s0igKwkIcDk1m5r2Zvg6Tihq/QyavdEn2pq50/sq7Ywe6pD9dW+fZAc+Dh6djAKKSkBRvJZ4pCHNyRiDStJLGSOPAhsTUJRFziUs2O0AbetCQ7v69ERnif4E8GmBWz0PD0MIQRAM46BpRwXVZSaVb0AYag72oorKNaVPkM40gZ1dnPad34w/6XMNplY0gEZ2ASjKfcxamXDKa8DgIIn4bx2dVJmIwruxfCI9Qf4KRfUuOifYu0aw+K3pntpN/rDZ3NxtfVg2zH3WLgdM7QaHs75Cn59cbmzecOM4VGk98wbhPfNJVnZz8AUqpDvU1UrO6jFQdm9OFnBfN/gLOF+cDZFtLVBCXR5PVcIe75xjt7Xrp7ab+Utp+Aj++uYm9BAAA\\\" target=\\\"_blank\\\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\ndatatable(ip1_string:string, ip2_string:string)\\r\\n[\\r\\n // IPv4 are compared as IPv6 addresses\\r\\n '192.168.1.1',    '192.168.1.1',       // Equal IPs\\r\\n '192.168.1.1/24', '192.168.1.255',     // 24 bit IP4-prefix is used for comparison\\r\\n '192.168.1.1',    '192.168.1.255/24',  // 24 bit IP4-prefix is used for comparison\\r\\n '192.168.1.1/30', '192.168.1.255/24',  // 24 bit IP4-prefix is used for comparison\\r\\n  // IPv6 cases\\r\\n 'fe80::85d:e82c:9446:7994', 'fe80::85d:e82c:9446:7994',         // Equal IPs\\r\\n 'fe80::85d:e82c:9446:7994/120', 'fe80::85d:e82c:9446:7998',     // 120 bit IP6-prefix is used for comparison\\r\\n 'fe80::85d:e82c:9446:7994', 'fe80::85d:e82c:9446:7998/120',     // 120 bit IP6-prefix is used for comparison\\r\\n 'fe80::85d:e82c:9446:7994/120', 'fe80::85d:e82c:9446:7998/120', // 120 bit IP6-prefix is used for comparison\\r\\n // Mixed case of IPv4 and IPv6\\r\\n '192.168.1.1',      '::ffff:c0a8:0101', // Equal IPs\\r\\n '192.168.1.1/24',   '::ffff:c0a8:01ff', // 24 bit IP-prefix is used for comparison\\r\\n '::ffff:c0a8:0101', '192.168.1.255/24', // 24 bit IP-prefix is used for comparison\\r\\n '::192.168.1.1/30', '192.168.1.255/24', // 24 bit IP-prefix is used for comparison\\r\\n]\\r\\n| extend result = ipv6_compare(ip1_string, ip2_string)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|ip1_string|ip2_string|result|\\r\\n|---|---|---|\\r\\n|192.168.1.1|192.168.1.1|0|\\r\\n|192.168.1.1/24|192.168.1.255|0|\\r\\n|192.168.1.1|192.168.1.255/24|0|\\r\\n|192.168.1.1/30|192.168.1.255/24|0|\\r\\n|fe80::85d:e82c:9446:7994|fe80::85d:e82c:9446:7994|0|\\r\\n|fe80::85d:e82c:9446:7994/120|fe80::85d:e82c:9446:7998|0|\\r\\n|fe80::85d:e82c:9446:7994|fe80::85d:e82c:9446:7998/120|0|\\r\\n|fe80::85d:e82c:9446:7994/120|fe80::85d:e82c:9446:7998/120|0|\\r\\n|192.168.1.1|::ffff:c0a8:0101|0|\\r\\n|192.168.1.1/24|::ffff:c0a8:01ff|0|\\r\\n|::ffff:c0a8:0101|192.168.1.255/24|0|\\r\\n|::192.168.1.1/30|192.168.1.255/24|0|\\r\\n\\r\\n### Compare IPs using IP-prefix notation specified inside the IPv6/IPv4 strings and as additional argument of the `ipv6_compare()` function\\r\\n\\r\\n> [!div class=\\\"nextstepaction\\\"]\\r\\n> <a href=\\\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA61UTW+DMAy98yt86yp1kITwZWk/YIdJu09TRSGpInWACK162I+fC5kEa7uOauFg6Rm9Z7/YKfOOvs1OPZiGr23XmmqLQ1iBacRPqGmVNkfc1dV26b15EATw/HqQkLcKivqjoVhCbk9gDHlZtspaZcGDBc+Ez+PU5z5frIDOCGE9EvLViS/ksDEdMcjHQQ2Mhb0lXl23TsTYuppyBkISyQgRUUSA4xTyHs6zOgdOIWdygrMphiInN0hEq5QhplGJKhUFZlLGmGRZ38KVXDRUA1wkvTxFpx/f7OmaXEAkv0imlOOCOTn2H3LsplwyV47+fjFHSpzMhVq7gazK3vJLU0J3iqjpYMHyFBnXeiL9d2OnNIxfGsH+zuabiDiuO2Rn1EMv8w179z5BHTtFBtF27ncdPNGmH+K129/RSzB+Ar53f/kFFQW7YjMEAAA=\\\" target=\\\"_blank\\\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\ndatatable(ip1_string:string, ip2_string:string, prefix:long)\\r\\n[\\r\\n // IPv4 are compared as IPv6 addresses \\r\\n '192.168.1.1',    '192.168.1.0',   31, // 31 bit IP4-prefix is used for comparison\\r\\n '192.168.1.1/24', '192.168.1.255', 31, // 24 bit IP4-prefix is used for comparison\\r\\n '192.168.1.1',    '192.168.1.255', 24, // 24 bit IP4-prefix is used for comparison\\r\\n   // IPv6 cases\\r\\n 'fe80::85d:e82c:9446:7994', 'fe80::85d:e82c:9446:7995',     127, // 127 bit IP6-prefix is used for comparison\\r\\n 'fe80::85d:e82c:9446:7994/127', 'fe80::85d:e82c:9446:7998', 120, // 120 bit IP6-prefix is used for comparison\\r\\n 'fe80::85d:e82c:9446:7994/120', 'fe80::85d:e82c:9446:7998', 127, // 120 bit IP6-prefix is used for comparison\\r\\n // Mixed case of IPv4 and IPv6\\r\\n '192.168.1.1/24',   '::ffff:c0a8:01ff', 127, // 127 bit IP6-prefix is used for comparison\\r\\n '::ffff:c0a8:0101', '192.168.1.255',    120, // 120 bit IP6-prefix is used for comparison\\r\\n '::192.168.1.1/30', '192.168.1.255/24', 127, // 120 bit IP6-prefix is used for comparison\\r\\n]\\r\\n| extend result = ipv6_compare(ip1_string, ip2_string, prefix)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|ip1_string|ip2_string|prefix|result|\\r\\n|---|---|---|---|\\r\\n|192.168.1.1|192.168.1.0|31|0|\\r\\n|192.168.1.1/24|192.168.1.255|31|0|\\r\\n|192.168.1.1|192.168.1.255|24|0|\\r\\n|fe80::85d:e82c:9446:7994|fe80::85d:e82c:9446:7995|127|0|\\r\\n|fe80::85d:e82c:9446:7994/127|fe80::85d:e82c:9446:7998|120|0|\\r\\n|fe80::85d:e82c:9446:7994/120|fe80::85d:e82c:9446:7998|127|0|\\r\\n|192.168.1.1/24|::ffff:c0a8:01ff|127|0|\\r\\n|::ffff:c0a8:0101|192.168.1.255|120|0|\\r\\n|::192.168.1.1/30|192.168.1.255/24|127|0|\",\"\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/ipv6-comparefunction\",\"\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"ipv6_is_in_any_range\",\"Checks whether an IPv6 string address is in any of the specified IPv6 address ranges.\",\"## Syntax\\r\\n\\r\\n`ipv6_is_in_any_range(`*Ipv6Address* `,` *Ipv6Range* [ `,` *Ipv6Range* ...] `)`\\r\\n\\r\\n`ipv6_is_in_any_range(`*Ipv6Address* `,` *Ipv6Ranges* `)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *Ipv6Address* | string | &check; | An expression representing an IPv6 address.|\\r\\n| *Ipv6Range* | string | &check; | An expression representing an IPv6 range using [IP-prefix notation](#ip-prefix-notation).|\\r\\n| *Ipv6Ranges* | dynamic | &check; | An array containing IPv6 ranges using [IP-prefix notation](#ip-prefix-notation).|\\r\\n\\r\\n> [!NOTE]\\r\\n> Either one or more *IPv6Range* strings or an *IPv6Ranges* dynamic array is required.\\r\\n\\r\\n[!INCLUDE [ip-prefix-notation](../../includes/ip-prefix-notation.md)]\\r\\n\\r\\n## Returns\\r\\n\\r\\n* `true`: If the IPv6 address is in the range of any of the specified IPv6 networks.\\r\\n* `false`: Otherwise.\\r\\n* `null`: If conversion for one of the two IPv6 strings wasn't successful.\",'> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA5WQzQqCQBSF9/MUg6sEQcdyshs+gBDRPkSu8yNDNoYO/UAP31S4aGfnbL/Lx7mdcnTXC+z2yt364TQW8mHxbMTiSKhPgJkCzdI15LiRwFZcgmJJCk0mlyDWWQaaCxkzlgbR9yKBqdoHRII5oIh5EpAq3JLOG8uD96DzbTq1KA8wusHYNqSzpdgIOQln0eovWs+luacl83S1JX4VeVJ1d8pKWo6ftxbmcuW1GWtja7SPekDbvhdHv18PX7mD2cSIAQAA\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nlet LocalNetworks=dynamic([\\r\\n    \"a5e:f127:8a9d:146d:e102:b5d3:c755:f6cd/112\",\\r\\n    \"0:0:0:0:0:ffff:c0a8:ac/60\"\\r\\n]);\\r\\nlet IPs=datatable(IP:string) [\\r\\n    \"a5e:f127:8a9d:146d:e102:b5d3:c755:abcd\",\\r\\n    \"a5e:f127:8a9d:146d:e102:b5d3:c755:abce\",\\r\\n    \"a5e:f127:8a9d:146d:e102:b5d3:c755:abcf\",\\r\\n    \"a5e:f127:8a9d:146d:e102:b5d3:c756:abd1\",\\r\\n];\\r\\nIPs\\r\\n| extend IsLocal=ipv6_is_in_any_range(IP, LocalNetworks)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|IP|IsLocal|\\r\\n|---|---|\\r\\n|a5e:f127:8a9d:146d:e102:b5d3:c755:abcd|\\tTrue|\\r\\n|a5e:f127:8a9d:146d:e102:b5d3:c755:abce|\\tTrue|\\r\\n|a5e:f127:8a9d:146d:e102:b5d3:c755:abcf|\\tTrue|\\r\\n|a5e:f127:8a9d:146d:e102:b5d3:c756:abd1|\\tFalse|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/ipv6-is-in-any-range-function\",\"ipv6-is-in-any-range-function.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"ipv6_is_in_range\",\"Checks if an IPv6 string address is in the IPv6-prefix notation range.\",\"## Syntax\\r\\n\\r\\n`ipv6_is_in_range(`*Ipv6Address*`,`*Ipv6Range*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *Ipv6Address* | string | &check; | An expression representing an IPv6 address.|\\r\\n| *Ipv6Range*| string | &check; | An expression representing an IPv6 range using [IP-prefix notation](#ip-prefix-notation).|\\r\\n\\r\\n[!INCLUDE [ip-prefix-notation](../../includes/ip-prefix-notation.md)]\\r\\n\\r\\n## Returns\\r\\n\\r\\n* `true`: If the long representation of the first IPv6 string argument is in range of the second IPv6 string argument.\\r\\n* `false`: Otherwise.\\r\\n* `null`: If conversion for one of the two IPv6 strings wasn't successful.\",\"> [!div class=\\\"nextstepaction\\\"]\\r\\n> <a href=\\\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA62QwQrCMBBE7/2K3Gqh0KSati74JSJlm92WQAnSRPHgx7tQRY8KztyG4R0eYZIOM2/8uUeihWOEmBYfplLJtGCY+DkU2TFTOVqG0dQtdLgnMLuGgI2uYbC0BddaCzg4yksl+eKsJZUxdV7+n72ef+VqeHWUgNPYAbqq0YI6ZXfFt8SBlJi6zEkdxNK16X3sfVhtfZh8KywepKIru2kBAAA=\\\" target=\\\"_blank\\\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\ndatatable(ip_address:string, ip_range:string)\\r\\n[\\r\\n 'a5e:f127:8a9d:146d:e102:b5d3:c755:abcd',    'a5e:f127:8a9d:146d:e102:b5d3:c755:0000/112',\\r\\n 'a5e:f127:8a9d:146d:e102:b5d3:c755:abcd',    'a5e:f127:8a9d:146d:e102:b5d3:c755:abcd',\\r\\n 'a5e:f127:8a9d:146d:e102:b5d3:c755:abcd',    '0:0:0:0:0:ffff:c0a8:ac/60',\\r\\n]\\r\\n| extend result = ipv6_is_in_range(ip_address, ip_range)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|ip_address|ip_range|result|\\r\\n|---|---|---|\\r\\n|a5e:f127:8a9d:146d:e102:b5d3:c755:abcd|a5e:f127:8a9d:146d:e102:b5d3:c755:0000/112|True|\\r\\n|a5e:f127:8a9d:146d:e102:b5d3:c755:abcd|a5e:f127:8a9d:146d:e102:b5d3:c755:abcd|True|\\r\\n|a5e:f127:8a9d:146d:e102:b5d3:c755:abcd|0:0:0:0:0:ffff:c0a8:ac/60|False|\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/ipv6-is-in-range-function\",\"ipv6-is-in-range-function.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"ipv6_is_match\",\"Matches two IPv6 or IPv4 network address strings. The two IPv6/IPv4 strings are parsed and compared while accounting for the combined IP-prefix mask calculated from argument prefixes, and the optional `prefix` argument.\",\"> [!NOTE]\\r\\n> The function can accept and compare arguments representing both IPv6 and IPv4 network addresses. If the caller knows that arguments are in IPv4 format, use the [ipv4_is_match()](./ipv4-is-matchfunction.md) function. This function will result in better runtime performance.\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`ipv6_is_match(`*ip1*`,`*ip2*`[ ,`*prefix*`])`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *ip1*, *ip2*| string | &check; | An expression representing an IPv6 or IPv4 address. IPv6 and IPv4 strings can be masked using [IP-prefix notation](#ip-prefix-notation).|\\r\\n| *prefix*| int | | An integer from 0 to 128 representing the number of most-significant bits that are taken into account.|\\r\\n\\r\\n[!INCLUDE [ip-prefix-notation](../../includes/ip-prefix-notation.md)]\\r\\n\\r\\n## Returns\\r\\n\\r\\n* `true`: If the long representation of the first IPv6/IPv4 string argument is equal to the second IPv6/IPv4 string argument.\\r\\n* `false`: Otherwise.\\r\\n* `null`: If conversion for one of the two IPv6/IPv4 strings wasn't successful.\",\"### IPv6/IPv4 comparison equality case - IP-prefix notation specified inside the IPv6/IPv4 strings\\r\\n\\r\\n> [!div class=\\\"nextstepaction\\\"]\\r\\n> <a href=\\\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA61UwW6DMAy98xW+dZW6QjJgIdKOO+wwafdpQilJtkgUGIGKwz5+bok2ttKyoplDJNvv2XkxlqLBb5OrK1OR1Da1KV55f6zAVPSna+k9e+D78PC0C0HUCrJyW+EpQdi9MwYhZa2sVdaDBUnomsRsTdZksQK0Yw8a0t2/tyJH/C+QT0PMGnhoFDkYgmgIG9MgKryuaqVNB8ZCa7EXXdauMWPLYqIR5OzrzOf0b4KjPudwOmVjyEQvoFYs4JxFkitGM56EYcxvk+SgypkYjCt7CuETGpxhZN+SY6K7Szypz4zemevkH6tN3c3FL6uG2Y+mw8D+naDU7nco5OH1xuYNJ45zjcazQDAekID0Vc9O/hFK6x71NVKTuoxUHZvTCzn/NPsXcL54H6C6RqGCuDzavIE73D27ODU23Yomexssp+FWWn4C162p674EAAA=\\\" target=\\\"_blank\\\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\ndatatable(ip1_string:string, ip2_string:string)\\r\\n[\\r\\n // IPv4 are compared as IPv6 addresses\\r\\n '192.168.1.1',    '192.168.1.1',       // Equal IPs\\r\\n '192.168.1.1/24', '192.168.1.255',     // 24 bit IP4-prefix is used for comparison\\r\\n '192.168.1.1',    '192.168.1.255/24',  // 24 bit IP4-prefix is used for comparison\\r\\n '192.168.1.1/30', '192.168.1.255/24',  // 24 bit IP4-prefix is used for comparison\\r\\n  // IPv6 cases\\r\\n 'fe80::85d:e82c:9446:7994', 'fe80::85d:e82c:9446:7994',         // Equal IPs\\r\\n 'fe80::85d:e82c:9446:7994/120', 'fe80::85d:e82c:9446:7998',     // 120 bit IP6-prefix is used for comparison\\r\\n 'fe80::85d:e82c:9446:7994', 'fe80::85d:e82c:9446:7998/120',     // 120 bit IP6-prefix is used for comparison\\r\\n 'fe80::85d:e82c:9446:7994/120', 'fe80::85d:e82c:9446:7998/120', // 120 bit IP6-prefix is used for comparison\\r\\n // Mixed case of IPv4 and IPv6\\r\\n '192.168.1.1',      '::ffff:c0a8:0101', // Equal IPs\\r\\n '192.168.1.1/24',   '::ffff:c0a8:01ff', // 24 bit IP-prefix is used for comparison\\r\\n '::ffff:c0a8:0101', '192.168.1.255/24', // 24 bit IP-prefix is used for comparison\\r\\n '::192.168.1.1/30', '192.168.1.255/24', // 24 bit IP-prefix is used for comparison\\r\\n]\\r\\n| extend result = ipv6_is_match(ip1_string, ip2_string)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|ip1_string|ip2_string|result|\\r\\n|---|---|---|\\r\\n|192.168.1.1|192.168.1.1|1|\\r\\n|192.168.1.1/24|192.168.1.255|1|\\r\\n|192.168.1.1|192.168.1.255/24|1|\\r\\n|192.168.1.1/30|192.168.1.255/24|1|\\r\\n|fe80::85d:e82c:9446:7994|fe80::85d:e82c:9446:7994|1|\\r\\n|fe80::85d:e82c:9446:7994/120|fe80::85d:e82c:9446:7998|1|\\r\\n|fe80::85d:e82c:9446:7994|fe80::85d:e82c:9446:7998/120|1|\\r\\n|fe80::85d:e82c:9446:7994/120|fe80::85d:e82c:9446:7998/120|1|\\r\\n|192.168.1.1|::ffff:c0a8:0101|1|\\r\\n|192.168.1.1/24|::ffff:c0a8:01ff|1|\\r\\n|::ffff:c0a8:0101|192.168.1.255/24|1|\\r\\n|::192.168.1.1/30|192.168.1.255/24|1|\\r\\n\\r\\n### IPv6/IPv4 comparison equality case- IP-prefix notation specified inside the IPv6/IPv4 strings and as additional argument of the `ipv6_is_match()` function\\r\\n\\r\\n> [!div class=\\\"nextstepaction\\\"]\\r\\n> <a href=\\\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA61UTW+DMAy98yt86yp1kKSBgqX9gB0m7T5NVQpJF6kFRGjFYT9+5mMSXdu1TAsHS8/oPfvFTqZq+jY7/WBLvnZ1ZfMt9mEBthQ/obLSxja4K/Lt3HvzIAjg+fUoQVUa0mJfUsxAuRaMQGVZpZ3TDjyY8UT4PIp97vPZAuiMENYhS75o+ZYcNrYmBvnYq4F1cHDEa4pqELGuyE85AyGJZISIMCRg4BTyL5xndfacQk7khMGmCFJFbpCI0TFDjMMMdSxSTKSMcJUkXQtXcmFfDXCx6uQpDvrRzZ6uyQVE8otkTDku2CDH/kOO3ZRbTZWjv19sQ4nWXCjMMJB51ll+aUroThENHUyZipFxY06k7zf2lIbxSyPY3dl0ExHHdS/ZGXXfy3TD3r1P0E2tySDazsOuhifa9GO0tm69V3X6MXoKxm/A9/LPvwDOD5PYNAQAAA==\\\" target=\\\"_blank\\\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\ndatatable(ip1_string:string, ip2_string:string, prefix:long)\\r\\n[\\r\\n // IPv4 are compared as IPv6 addresses \\r\\n '192.168.1.1',    '192.168.1.0',   31, // 31 bit IP4-prefix is used for comparison\\r\\n '192.168.1.1/24', '192.168.1.255', 31, // 24 bit IP4-prefix is used for comparison\\r\\n '192.168.1.1',    '192.168.1.255', 24, // 24 bit IP4-prefix is used for comparison\\r\\n   // IPv6 cases\\r\\n 'fe80::85d:e82c:9446:7994', 'fe80::85d:e82c:9446:7995',     127, // 127 bit IP6-prefix is used for comparison\\r\\n 'fe80::85d:e82c:9446:7994/127', 'fe80::85d:e82c:9446:7998', 120, // 120 bit IP6-prefix is used for comparison\\r\\n 'fe80::85d:e82c:9446:7994/120', 'fe80::85d:e82c:9446:7998', 127, // 120 bit IP6-prefix is used for comparison\\r\\n // Mixed case of IPv4 and IPv6\\r\\n '192.168.1.1/24',   '::ffff:c0a8:01ff', 127, // 127 bit IP6-prefix is used for comparison\\r\\n '::ffff:c0a8:0101', '192.168.1.255',    120, // 120 bit IP6-prefix is used for comparison\\r\\n '::192.168.1.1/30', '192.168.1.255/24', 127, // 120 bit IP6-prefix is used for comparison\\r\\n]\\r\\n| extend result = ipv6_is_match(ip1_string, ip2_string, prefix)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|ip1_string|ip2_string|prefix|result|\\r\\n|---|---|---|---|\\r\\n|192.168.1.1|192.168.1.0|31|1|\\r\\n|192.168.1.1/24|192.168.1.255|31|1|\\r\\n|192.168.1.1|192.168.1.255|24|1|\\r\\n|fe80::85d:e82c:9446:7994|fe80::85d:e82c:9446:7995|127|1|\\r\\n|fe80::85d:e82c:9446:7994/127|fe80::85d:e82c:9446:7998|120|1|\\r\\n|fe80::85d:e82c:9446:7994/120|fe80::85d:e82c:9446:7998|127|1|\\r\\n|192.168.1.1/24|::ffff:c0a8:01ff|127|1|\\r\\n|::ffff:c0a8:0101|192.168.1.255|120|1|\\r\\n|::192.168.1.1/30|192.168.1.255/24|127|1|\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/ipv6-is-matchfunction\",\"ipv6-is-matchfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"isempty\",\"Returns `true` if the argument is an empty string or is null.\",\"## Syntax\\r\\n\\r\\n`isempty(`*value*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n| -- | -- | -- | -- |\\r\\n|*value*|string|&check;| The value to check if empty or null.|\\r\\n\\r\\n## Returns\\r\\n\\r\\nA boolean value indicating whether *value* is an empty string or is null.\",'|x|isempty(x)|\\r\\n|---|---|\\r\\n| \"\" | true|\\r\\n|\"x\" | false|\\r\\n|parsejson(\"\")|true|\\r\\n|parsejson(\"[]\")|false|\\r\\n|parsejson(\"{}\")|false|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/isemptyfunction\",\"isemptyfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"isfinite\",\"Returns whether the input is a finite value, meaning it's neither infinite nor NaN.\",\"## Syntax\\r\\n\\r\\n`isfinite(`*number*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n| -- | -- | -- | -- |\\r\\n|*number*|real|&check;| The value to check if finite.|\\r\\n\\r\\n## Returns\\r\\n\\r\\n`true` if x is finite and `false` otherwise.\",'> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAytKzEtPVahQSCvKz1XQNVQoyVcwVCguSS1QMOTlqlFIrShJzUtRqFSwVTDQM0ASScksA4oZ6hloVehXIolnFqdl5mWWpNrCGBpAlZoAbqyHpGYAAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nrange x from -1 to 1 step 1\\r\\n| extend y = 0.0\\r\\n| extend div = 1.0*x/y\\r\\n| extend isfinite=isfinite(div)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|x|y|div|isfinite|\\r\\n|---|---|---|---|\\r\\n|-1|0|-\\u221e|0|\\r\\n|0|0|NaN|0|\\r\\n|1|0|\\u221e|0|\\r\\n\\r\\n## See also\\r\\n\\r\\n* To check if a value is null, see [isnull()](isnullfunction.md).\\r\\n* To check if a value is infinite, see [isinf()](isinffunction.md).\\r\\n* To check if a value is NaN (Not-a-Number), see [isnan()](isnanfunction.md).',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/isfinitefunction\",\"isfinitefunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"isinf\",\"Returns whether the input is an infinite (positive or negative) value.\",\"## Syntax\\r\\n\\r\\n`isinf(`*number*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n| -- | -- | -- | -- |\\r\\n|*number*|real|&check;| The value to check if infinite.|\\r\\n\\r\\n## Returns\\r\\n\\r\\n`true` if x is a positive or negative infinite and `false` otherwise.\",'> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAytKzEtPVahQSCvKz1XQNVQoyVcwVCguSS1QMOTlqlFIrShJzUtRqFSwVTDQM0ASScksA4oZ6hloVehXIolnFmfmpdmCSQ2gGk0AQSRax2AAAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nrange x from -1 to 1 step 1\\r\\n| extend y = 0.0\\r\\n| extend div = 1.0*x/y\\r\\n| extend isinf=isinf(div)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|x|y|div|isinf|\\r\\n|---|---|---|---|\\r\\n|-1|0|-\\u221e|true|\\r\\n|0|0|NaN|false|\\r\\n|1|0|\\u221e|true|\\r\\n\\r\\n## See also\\r\\n\\r\\n* To check if a value is null, see [isnull()](isnullfunction.md).\\r\\n* To check if a value is finite, see [isfinite()](isfinitefunction.md).\\r\\n* To check if a value is NaN (Not-a-Number), see [isnan()](isnanfunction.md).',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/isinffunction\",\"isinffunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"isnan\",\"Returns whether the input is a Not-a-Number (NaN) value.\",\"## Syntax\\r\\n\\r\\n`isnan(`*number*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n| -- | -- | -- | -- |\\r\\n|*number*|scalar|&check;| The value to check if NaN.|\\r\\n\\r\\n## Returns\\r\\n\\r\\n`true` if x is NaN and `false` otherwise.\",'> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAytKzEtPVahQSCvKz1XQNVQoyVcwVCguSS1QMOTlqlFIrShJzUtRqFSwVdDQNdSq0FRAEk3JLAOKG+oZaFXoVyKJZxbnJebZgkkNoBpNAG+vyvhkAAAA\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nrange x from -1 to 1 step 1\\r\\n| extend y = (-1*x) \\r\\n| extend div = 1.0*x/y\\r\\n| extend isnan=isnan(div)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|x|y|div|isnan|\\r\\n|---|---|---|---|\\r\\n|-1|1|-1|false|\\r\\n|0|0|NaN|true|\\r\\n|1|-1|-1|false|\\r\\n\\r\\n## See also\\r\\n\\r\\n* To check if a value is null, see [isnull()](isnullfunction.md).\\r\\n* To check if a value is finite, see [isfinite()](isfinitefunction.md).\\r\\n* To check if a value is infinite, see [isinf()](isinffunction.md).',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/isnanfunction\",\"isnanfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"isnotempty\",\"Returns `true` if the argument isn't an empty string, and it isn't null.\",\"> **Deprecated aliases:** notempty()\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`isnotempty(`*value*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n| -- | -- | -- | -- |\\r\\n|*value*|scalar|&check;| The value to check if not empty or null.|\\r\\n\\r\\n## Returns\\r\\n\\r\\n`true` if *value* is not null and `false` otherwise.\",'Find the storm events for which there\\'s a begin location.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAwsuyS/KdS1LzSsp5uWqUSjPSC1KVcgszssvSc0tKKnUcEpNz8zzSSzRVEjMS8GUyM/TBAAbLqnSQgAAAA==\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nStormEvents\\r\\n| where isnotempty(BeginLat) and isnotempty(BeginLon)\\r\\n```',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/isnotemptyfunction\",\"isnotemptyfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"isnotnull\",\"Returns `true` if the argument isn't null.\",\"> **Deprecated aliases:** notnull()\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`isnotnull(`*value*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n| -- | -- | -- | -- |\\r\\n|*value*|scalar|&check;| The value to check if not null.|\\r\\n\\r\\n## Returns\\r\\n\\r\\n`true` if *value* is not null and `false` otherwise.\",'Find the storm events for which there\\'s a begin location.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAwsuyS/KdS1LzSsp5uWqUSjPSC1KVcgszssvySvNydFwSk3PzPNJLNFUSMxLwRDPz9MEAOSBMshAAAAA\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nStormEvents\\r\\n| where isnotnull(BeginLat) and isnotnull(BeginLon)\\r\\n```',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/isnotnullfunction\",\"isnotnullfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"isnull\",\"Evaluates its sole argument and returns a `bool` value indicating if the argument evaluates to a null value.\",'> [!NOTE]\\r\\n> String values can\\'t be null. Use [isempty](./isemptyfunction.md) to determine if a value of type `string` is empty or not.\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`isnull(`*Expr*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n| -- | -- | -- | -- |\\r\\n|*value*|scalar|&check;| The value to check if not null.|\\r\\n\\r\\n## Returns\\r\\n\\r\\n`true` if *value* is not null and `false` otherwise.\\r\\n\\r\\n|x                |`isnull(x)`|\\r\\n|-----------------|-----------|\\r\\n|`\"\"`             |`false`    |\\r\\n|`\"x\"`            |`false`    |\\r\\n|`parse_json(\"\")`  |`true`     |\\r\\n|`parse_json(\"[]\")`|`false`    |\\r\\n|`parse_json(\"{}\")`|`false`    |','Find the storm events for which there\\'s not a begin location.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAwsuyS/KdS1LzSsp5uWqUSjPSC1KVcgszivNydFwSk3PzPNJLNFUSMxLQRXMz9MEABMUXTY6AAAA\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nStormEvents\\r\\n| where isnull(BeginLat) and isnull(BeginLon)\\r\\n```',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/isnullfunction\",\"isnullfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"jaccard_index\",\"Calculates the [Jaccard index](https://en.wikipedia.org/wiki/Jaccard_index) of two input sets.\",\"## Syntax\\r\\n\\r\\n`jaccard_index`(*set1*, *set2*)\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n| -- | -- | -- | -- |\\r\\n| *set1*| dynamic | &check; | The array representing the first set for the calculation.|\\r\\n| *set2*| dynamic | &check; | The array representing the second set for the calculation.|\\r\\n\\r\\n> [!NOTE]\\r\\n> Duplicate values in the input arrays are ignored.\\r\\n\\r\\n## Returns\\r\\n\\r\\nThe [Jaccard index](https://en.wikipedia.org/wiki/Jaccard_index) of the two input sets. The Jaccard index formula is |*set1* \\u2229 *set2*| / |*set1* \\u222a *set2*|.\",'> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAysoyswrUShOLTG0TanMS8zNTNaINtQx0jGO1dQBCRuhCeuYxGryctUopFaUpOalKGQlJicnFqXYQun4zLyU1AoNkHEQ3ZoAjvvou2AAAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint set1=dynamic([1,2,3]), set2=dynamic([1,2,3,4])\\r\\n| extend jaccard=jaccard_index(set1, set2)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|`set1`|`set2`|`jaccard`|\\r\\n|---|---|---|\\r\\n|[1,2,3]|[1,2,3,4]|0.75|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/jaccard-index-function\",\"jaccard-index-function.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.OperatorToken,\"join\",\"Merge the rows of two tables to form a new table by matching values of the specified columns from each table.\",\"## Syntax\\r\\n\\r\\n*LeftTable* `|` `join` [ *JoinParameters* ] `(`*RightTable*`)` `on` *Attributes*\\r\\n\\r\\n## Parameters\\r\\n\\r\\n|Name|Type|Required|Description|\\r\\n|--|--|--|--|\\r\\n|*LeftTable*|string|&check;|The left table or tabular expression, sometimes called the outer table, whose rows are to be merged. Denoted as `$left`.|\\r\\n|*RightTable*|string|&check;|The right table or tabular expression, sometimes called the inner table, whose rows are to be merged. Denoted as `$right`.|\\r\\n|*Attributes*|string|&check;|One or more comma-separated rules that describe how rows from *LeftTable* are matched to rows from *RightTable*. Multiple rules are evaluated using the `and` logical operator. See [Rules](#rules).|\\r\\n|*JoinParameters*|string||Zero or more space-separated parameters in the form of *Name* `=` *Value* that control the behavior of the row-match operation and execution plan. See [Supported parameters](#supported-parameters).\\r\\n\\r\\n### Rules\\r\\n\\r\\n| Rule kind | Syntax | Predicate |\\r\\n|---|---|---|\\r\\n| Equality by name | *ColumnName* | `where` *LeftTable*.*ColumnName* `==` *RightTable*.*ColumnName* |\\r\\n| Equality by value | `$left.`*LeftColumn* `==` `$right.`*RightColumn* | `where` `$left.`*LeftColumn* `==` `$right.`*RightColumn* |\\r\\n\\r\\n> [!NOTE]\\r\\n> For 'equality by value', the column names *must* be qualified with the applicable owner table denoted by `$left` and `$right` notations.\\r\\n\\r\\n### Supported parameters\\r\\n\\r\\n|Parameters name |Values |Description  |\\r\\n|---|---|---|\\r\\n|`kind`|Join flavors|See [Join Flavors](#join-flavors)|\\r\\n|`hint.remote`  |`auto`, `left`, `local`, `right` |See [Cross-Cluster Join](joincrosscluster.md)|\\r\\n|`hint.strategy=broadcast` |Specifies the way to share the query load on cluster nodes. |See [broadcast join](broadcastjoin.md) |\\r\\n|`hint.shufflekey=<key>` |The `shufflekey` query shares the query load on cluster nodes, using a key to partition data. |See [shuffle query](shufflequery.md) |\\r\\n|`hint.strategy=shuffle` |The `shuffle` strategy query shares the query load on cluster nodes, where each node will process one partition of the data. |See [shuffle query](shufflequery.md)  |\\r\\n\\r\\n> [!NOTE]\\r\\n> If `kind` isn't specified, the default join flavor is `innerunique`. This is different than some other analytics products that have `inner` as the default flavor. See [join-flavors](#join-flavors) to understand the differences and make sure the query yields the intended results.\\r\\n\\r\\n## Returns\\r\\n\\r\\n**The output schema depends on the join flavor:**\\r\\n\\r\\n| Join flavor | Output schema |\\r\\n|---|---|\\r\\n|`kind=leftanti`, `kind=leftsemi`| The result table contains columns from the left side only.|\\r\\n| `kind=rightanti`, `kind=rightsemi` | The result table contains columns from the right side only.|\\r\\n|  `kind=innerunique`, `kind=inner`, `kind=leftouter`, `kind=rightouter`, `kind=fullouter` |  A column for every column in each of the two tables, including the matching keys. The columns of the right side will be automatically renamed if there are name clashes. |\\r\\n\\r\\n**Output records depend on the join flavor:**\\r\\n\\r\\n> [!NOTE]\\r\\n   >\\r\\n   > If there are several rows with the same values for those fields, you'll get rows for all the combinations.\\r\\n   > A match is a row selected from one table that has the same value for all the `on` fields as a row in the other table.\\r\\n\\r\\n| Join flavor | Output records |\\r\\n|---|---|\\r\\n| `kind=leftanti`, `kind=leftantisemi`| Returns all the records from the left side that don't have matches from the right|\\r\\n| `kind=rightanti`, `kind=rightantisemi`| Returns all the records from the right side that don't have matches from the left.|\\r\\n| `kind` unspecified, `kind=innerunique`| Only one row from the left side is matched for each value of the `on` key. The output contains a row for each match of this row with rows from the right.|\\r\\n| `kind=leftsemi`| Returns all the records from the left side that have matches from the right. |\\r\\n| `kind=rightsemi`| Returns all the records from the right side that have matches from the left. |\\r\\n| `kind=inner`| Returns all matching records from left and right sides. |\\r\\n| `kind=fullouter`| Returns all the records for all the records from the left and right sides. Unmatched cells contain nulls. |\\r\\n| `kind=leftouter`| Returns all the records from the left side and only matching records from the right side. |\\r\\n| `kind=rightouter`| Returns all the records from the right side and only matching records from the left side. |\\r\\n\\r\\n> [!TIP]\\r\\n>\\r\\n> For best performance, if one table is always smaller than the other, use it as the left (piped) side of the join.\",\"Get extended activities from a `login` that some entries mark as the start and end of an activity.\\r\\n\\r\\n```\\r\\nlet Events = MyLogTable | where type==\\\"Event\\\" ;\\r\\nEvents\\r\\n| where Name == \\\"Start\\\"\\r\\n| project Name, City, ActivityId, StartTime=timestamp\\r\\n| join (Events\\r\\n    | where Name == \\\"Stop\\\"\\r\\n        | project StopTime=timestamp, ActivityId)\\r\\n    on ActivityId\\r\\n| project City, ActivityId, StartTime, StopTime, Duration = StopTime - StartTime\\r\\n```\\r\\n\\r\\n```\\r\\nlet Events = MyLogTable | where type==\\\"Event\\\" ;\\r\\nEvents\\r\\n| where Name == \\\"Start\\\"\\r\\n| project Name, City, ActivityIdLeft = ActivityId, StartTime=timestamp\\r\\n| join (Events\\r\\n        | where Name == \\\"Stop\\\"\\r\\n        | project StopTime=timestamp, ActivityIdRight = ActivityId)\\r\\n    on $left.ActivityIdLeft == $right.ActivityIdRight\\r\\n| project City, ActivityId, StartTime, StopTime, Duration = StopTime - StartTime\\r\\n```\\r\\n\\r\\n## Join flavors\\r\\n\\r\\nThe exact flavor of the join operator is specified with the *kind* keyword. The following flavors of the join operator are supported:\\r\\n\\r\\n|Join kind/flavor|Description|\\r\\n|--|--|\\r\\n|[`innerunique`](#default-join-flavor) (or empty as default)|Inner join with left side deduplication|\\r\\n|[`inner`](#inner-join-flavor)|Standard inner join|\\r\\n|[`leftouter`](#left-outer-join-flavor)|Left outer join|\\r\\n|[`rightouter`](#right-outer-join-flavor)|Right outer join|\\r\\n|[`fullouter`](#full-outer-join-flavor)|Full outer join|\\r\\n|[`leftanti`](#left-anti-join-flavor), [`anti`](#left-anti-join-flavor), or [`leftantisemi`](#left-anti-join-flavor)|Left anti join|\\r\\n|[`rightanti`](#right-anti-join-flavor) or [`rightantisemi`](#right-anti-join-flavor)|Right anti join|\\r\\n|[`leftsemi`](#left-semi-join-flavor)|Left semi join|\\r\\n|[`rightsemi`](#right-semi-join-flavor)|Right semi join|\\r\\n\\r\\n### Default join flavor\\r\\n\\r\\nThe default join flavor is an inner join with left side deduplication. Default join implementation is useful in typical log/trace analysis scenarios where you want to correlate two events, each matching some filtering criterion, under the same correlation ID. You want to get back all appearances of the phenomenon, and ignore multiple appearances of the contributing trace records.\\r\\n\\r\\n```\\r\\nX | join Y on Key\\r\\n \\r\\nX | join kind=innerunique Y on Key\\r\\n```\\r\\n\\r\\nThe following two sample tables are used to explain the operation of the join.\\r\\n\\r\\n**Table X**\\r\\n\\r\\n|Key |Value1\\r\\n|---|---\\r\\n|a |1\\r\\n|b |2\\r\\n|b |3\\r\\n|c |4\\r\\n\\r\\n**Table Y**\\r\\n\\r\\n|Key |Value2\\r\\n|---|---\\r\\n|b |10\\r\\n|c |20\\r\\n|c |30\\r\\n|d |40\\r\\n\\r\\nThe default join does an inner join after deduplicating the left side on the join key (deduplication keeps the first record).\\r\\n\\r\\nGiven this statement: `X | join Y on Key`\\r\\n\\r\\nthe effective left side of the join, table X after deduplication, would be:\\r\\n\\r\\n|Key |Value1\\r\\n|---|---\\r\\n|a |1\\r\\n|b |2\\r\\n|c |4\\r\\n\\r\\nand the result of the join would be:\\r\\n\\r\\n```\\r\\nlet X = datatable(Key:string, Value1:long)\\r\\n[\\r\\n    'a',1,\\r\\n    'b',2,\\r\\n    'b',3,\\r\\n    'c',4\\r\\n];\\r\\nlet Y = datatable(Key:string, Value2:long)\\r\\n[\\r\\n    'b',10,\\r\\n    'c',20,\\r\\n    'c',30,\\r\\n    'd',40\\r\\n];\\r\\nX | join Y on Key\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|Key|Value1|Key1|Value2|\\r\\n|---|---|---|---|\\r\\n|b|2|b|10|\\r\\n|c|4|c|20|\\r\\n|c|4|c|30|\\r\\n\\r\\n> [!NOTE]\\r\\n> The keys 'a' and 'd' don't appear in the output, since there were no matching keys on both left and right sides.\\r\\n\\r\\n### Inner-join flavor\\r\\n\\r\\nThe inner-join function is like the standard inner-join from the SQL world. An output record is produced whenever a record on the left side has the same join key as the record on the right side.\\r\\n\\r\\n```\\r\\nlet X = datatable(Key:string, Value1:long)\\r\\n[\\r\\n    'a',1,\\r\\n    'b',2,\\r\\n    'b',3,\\r\\n    'c',4\\r\\n];\\r\\nlet Y = datatable(Key:string, Value2:long)\\r\\n[\\r\\n    'b',10,\\r\\n    'c',20,\\r\\n    'c',30,\\r\\n    'd',40\\r\\n];\\r\\nX | join kind=inner Y on Key\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|Key|Value1|Key1|Value2|\\r\\n|---|---|---|---|\\r\\n|b|3|b|10|\\r\\n|b|2|b|10|\\r\\n|c|4|c|20|\\r\\n|c|4|c|30|\\r\\n\\r\\n> [!NOTE]\\r\\n>\\r\\n> * (b,10) from the right side, was joined twice: with both (b,2) and (b,3) on the left.\\r\\n> * (c,4) on the left side, was joined twice: with both (c,20) and (c,30) on the right.\\r\\n\\r\\n### Innerunique-join flavor\\r\\n\\r\\nUse **innerunique-join flavor** to deduplicate keys from the left side. The result will be a row in the output from every combination of deduplicated left keys and right keys.\\r\\n\\r\\n> [!NOTE]\\r\\n> **innerunique flavor** may yield two possible outputs and both are correct.\\r\\n    In the first output, the join operator randomly selected the first key that appears in t1, with the value \\\"val1.1\\\" and matched it with t2 keys.\\r\\n    In the second output, the join operator randomly selected the second key that appears in t1, with the value \\\"val1.2\\\" and matched it with t2 keys.\\r\\n\\r\\n```\\r\\nlet t1 = datatable(key:long, value:string)  \\r\\n[\\r\\n1, \\\"val1.1\\\",  \\r\\n1, \\\"val1.2\\\"  \\r\\n];\\r\\nlet t2 = datatable(key:long, value:string)  \\r\\n[  \\r\\n1, \\\"val1.3\\\",\\r\\n1, \\\"val1.4\\\"  \\r\\n];\\r\\nt1\\r\\n| join kind = innerunique\\r\\n    t2\\r\\non key\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|key|value|key1|value1|\\r\\n|---|---|---|---|\\r\\n|1|val1.1|1|val1.3|\\r\\n|1|val1.1|1|val1.4|\\r\\n\\r\\n```\\r\\nlet t1 = datatable(key:long, value:string)  \\r\\n[\\r\\n1, \\\"val1.1\\\",  \\r\\n1, \\\"val1.2\\\"  \\r\\n];\\r\\nlet t2 = datatable(key:long, value:string)  \\r\\n[  \\r\\n1, \\\"val1.3\\\", \\r\\n1, \\\"val1.4\\\"  \\r\\n];\\r\\nt1\\r\\n| join kind = innerunique\\r\\n    t2\\r\\non key\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|key|value|key1|value1|\\r\\n|---|---|---|---|\\r\\n|1|val1.2|1|val1.3|\\r\\n|1|val1.2|1|val1.4|\\r\\n\\r\\n* Kusto is optimized to push filters that come after the `join`, towards the appropriate join side, left or right, when possible.\\r\\n\\r\\n* Sometimes, the flavor used is **innerunique** and the filter is propagated to the left side of the join. The flavor will be automatically propagated and the keys that apply to that filter will always appear in the output.\\r\\n\\r\\n* Use the example above and add a filter `where value == \\\"val1.2\\\" `. It will always give the second result and will never give the first result for the datasets:\\r\\n\\r\\n\\r\\n\\r\\n```\\r\\nlet t1 = datatable(key:long, value:string)  \\r\\n[\\r\\n1, \\\"val1.1\\\",  \\r\\n1, \\\"val1.2\\\"  \\r\\n];\\r\\nlet t2 = datatable(key:long, value:string)  \\r\\n[  \\r\\n1, \\\"val1.3\\\", \\r\\n1, \\\"val1.4\\\"  \\r\\n];\\r\\nt1\\r\\n| join kind = innerunique\\r\\n    t2\\r\\non key\\r\\n| where value == \\\"val1.2\\\"\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|key|value|key1|value1|\\r\\n|---|---|---|---|\\r\\n|1|val1.2|1|val1.3|\\r\\n|1|val1.2|1|val1.4|\\r\\n\\r\\n### Left outer-join flavor\\r\\n\\r\\nThe result of a left outer-join for tables X and Y always contains all records of the left table (X), even if the join condition doesn't find any matching record in the right table (Y).\\r\\n\\r\\n```\\r\\nlet X = datatable(Key:string, Value1:long)\\r\\n[\\r\\n    'a',1,\\r\\n    'b',2,\\r\\n    'b',3,\\r\\n    'c',4\\r\\n];\\r\\nlet Y = datatable(Key:string, Value2:long)\\r\\n[\\r\\n    'b',10,\\r\\n    'c',20,\\r\\n    'c',30,\\r\\n    'd',40\\r\\n];\\r\\nX | join kind=leftouter Y on Key\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|Key|Value1|Key1|Value2|\\r\\n|---|---|---|---|\\r\\n|a|1|||\\r\\n|b|2|b|10|\\r\\n|b|3|b|10|\\r\\n|c|4|c|20|\\r\\n|c|4|c|30|\\r\\n\\r\\n### Right outer-join flavor\\r\\n\\r\\nThe right outer-join flavor resembles the left outer-join, but the treatment of the tables is reversed.\\r\\n\\r\\n```\\r\\nlet X = datatable(Key:string, Value1:long)\\r\\n[\\r\\n    'a',1,\\r\\n    'b',2,\\r\\n    'b',3,\\r\\n    'c',4\\r\\n];\\r\\nlet Y = datatable(Key:string, Value2:long)\\r\\n[\\r\\n    'b',10,\\r\\n    'c',20,\\r\\n    'c',30,\\r\\n    'd',40\\r\\n];\\r\\nX | join kind=rightouter Y on Key\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|Key|Value1|Key1|Value2|\\r\\n|---|---|---|---|\\r\\n|b|2|b|10|\\r\\n|b|3|b|10|\\r\\n|c|4|c|20|\\r\\n|c|4|c|30|\\r\\n|||d|40|\\r\\n\\r\\n### Full outer-join flavor\\r\\n\\r\\nA full outer-join combines the effect of applying both left and right outer-joins. Whenever records in the joined tables don't match, the result set will have `null` values for every column of the table that lacks a matching row. For those records that do match, a single row will be produced in the result set, containing fields populated from both tables.\\r\\n\\r\\n```\\r\\nlet X = datatable(Key:string, Value1:long)\\r\\n[\\r\\n    'a',1,\\r\\n    'b',2,\\r\\n    'b',3,\\r\\n    'c',4\\r\\n];\\r\\nlet Y = datatable(Key:string, Value2:long)\\r\\n[\\r\\n    'b',10,\\r\\n    'c',20,\\r\\n    'c',30,\\r\\n    'd',40\\r\\n];\\r\\nX | join kind=fullouter Y on Key\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|Key|Value1|Key1|Value2|\\r\\n|---|---|---|---|\\r\\n|a|1|||\\r\\n|b|2|b|10|\\r\\n|b|3|b|10|\\r\\n|c|4|c|20|\\r\\n|c|4|c|30|\\r\\n|||d|40|\\r\\n\\r\\n### Left anti-join flavor\\r\\n\\r\\nLeft anti-join returns all records from the left side that don't match any record from the right side.\\r\\n\\r\\n```\\r\\nlet X = datatable(Key:string, Value1:long)\\r\\n[\\r\\n    'a',1,\\r\\n    'b',2,\\r\\n    'b',3,\\r\\n    'c',4\\r\\n];\\r\\nlet Y = datatable(Key:string, Value2:long)\\r\\n[\\r\\n    'b',10,\\r\\n    'c',20,\\r\\n    'c',30,\\r\\n    'd',40\\r\\n];\\r\\nX | join kind=leftanti Y on Key\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|Key|Value1|\\r\\n|---|---|\\r\\n|a|1|\\r\\n\\r\\n> [!NOTE]\\r\\n> Anti-join models the \\\"NOT IN\\\" query.\\r\\n\\r\\n### Right anti-join flavor\\r\\n\\r\\nRight anti-join returns all records from the right side that don't match any record from the left side.\\r\\n\\r\\n```\\r\\nlet X = datatable(Key:string, Value1:long)\\r\\n[\\r\\n    'a',1,\\r\\n    'b',2,\\r\\n    'b',3,\\r\\n    'c',4\\r\\n];\\r\\nlet Y = datatable(Key:string, Value2:long)\\r\\n[\\r\\n    'b',10,\\r\\n    'c',20,\\r\\n    'c',30,\\r\\n    'd',40\\r\\n];\\r\\nX | join kind=rightanti Y on Key\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|Key|Value2|\\r\\n|---|---|\\r\\n|d|40|\\r\\n\\r\\n> [!NOTE]\\r\\n> Anti-join models the \\\"NOT IN\\\" query.\\r\\n\\r\\n### Left semi-join flavor\\r\\n\\r\\nLeft semi-join returns all records from the left side that match a record from the right side. Only columns from the left side are returned.\\r\\n\\r\\n```\\r\\nlet X = datatable(Key:string, Value1:long)\\r\\n[\\r\\n    'a',1,\\r\\n    'b',2,\\r\\n    'b',3,\\r\\n    'c',4\\r\\n];\\r\\nlet Y = datatable(Key:string, Value2:long)\\r\\n[\\r\\n    'b',10,\\r\\n    'c',20,\\r\\n    'c',30,\\r\\n    'd',40\\r\\n];\\r\\nX | join kind=leftsemi Y on Key\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|Key|Value1|\\r\\n|---|---|\\r\\n|b|2|\\r\\n|b|3|\\r\\n|c|4|\\r\\n\\r\\n### Right semi-join flavor\\r\\n\\r\\nRight semi-join returns all records from the right side that match a record from the left side. Only columns from the right side are returned.\\r\\n\\r\\n```\\r\\nlet X = datatable(Key:string, Value1:long)\\r\\n[\\r\\n    'a',1,\\r\\n    'b',2,\\r\\n    'b',3,\\r\\n    'c',4\\r\\n];\\r\\nlet Y = datatable(Key:string, Value2:long)\\r\\n[\\r\\n    'b',10,\\r\\n    'c',20,\\r\\n    'c',30,\\r\\n    'd',40\\r\\n];\\r\\nX | join kind=rightsemi Y on Key\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|Key|Value2|\\r\\n|---|---|\\r\\n|b|10|\\r\\n|c|20|\\r\\n|c|30|\\r\\n\\r\\n### Cross-join\\r\\n\\r\\nKusto doesn't natively provide a cross-join flavor. You can't mark the operator with the `kind=cross`.\\r\\nTo simulate, use a dummy key.\\r\\n\\r\\n`X | extend dummy=1 | join kind=inner (Y | extend dummy=1) on dummy`\\r\\n\\r\\n## Join hints\\r\\n\\r\\nThe `join` operator supports a number of hints that control the way a query runs.\\r\\nThese hints don't change the semantic of `join`, but may affect its performance.\\r\\n\\r\\nJoin hints are explained in the following articles:\\r\\n\\r\\n* `hint.shufflekey=<key>` and `hint.strategy=shuffle` - [shuffle query](shufflequery.md)\\r\\n* `hint.strategy=broadcast` - [broadcast join](broadcastjoin.md)\\r\\n* `hint.remote=<strategy>` - [cross-cluster join](joincrosscluster.md)\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/joinoperator\",\"joinoperator.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"log\",\"The natural logarithm is the base-e logarithm: the inverse of the natural exponential function (exp).\",\"## Syntax\\r\\n\\r\\n`log(`*number*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n|*number*| real | &check; | The number for which to calculate the logarithm.|\\r\\n\\r\\n## Returns\\r\\n\\r\\n* `log()` returns the natural logarithm of the input.\\r\\n* `null` if the argument is negative or null or can't be converted to a `real` value.\",'> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAysoyswrUShKLS7NKbHNyU/XMNUEAE7U1nYTAAAA\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint result=log(5)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|result|\\r\\n|--|\\r\\n|1.6094379124341003|\\r\\n\\r\\n## See also\\r\\n\\r\\n* For common (base-10) logarithms, see [log10()](log10-function.md).\\r\\n* For base-2 logarithms, see [log2()](log2-function.md).',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/log-function\",\"log-function.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"log10\",\"`log10()` returns the common (base-10) logarithm of the input.\",\"## Syntax\\r\\n\\r\\n`log10(`*number*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n|*number*| real | &check; | The number for which to calculate the base-10 logarithm.|\\r\\n\\r\\n## Returns\\r\\n\\r\\n* The common logarithm is the base-10 logarithm: the inverse of the exponential function (exp) with base 10.\\r\\n* `null` if the argument is negative or null or can't be converted to a `real` value.\",'> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAysoyswrUShKLS7NKbHNyU83NNAw1QQAQyXyFRUAAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint result=log10(5)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|result|\\r\\n|--|\\r\\n|0.69897000433601886|\\r\\n\\r\\n## See also\\r\\n\\r\\n* For natural (base-e) logarithms, see [log()](log-function.md).\\r\\n* For base-2 logarithms, see [log2()](log2-function.md)',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/log10-function\",\"log10-function.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"log2\",\"The logarithm is the base-2 logarithm: the inverse of the exponential function (exp) with base 2.\",\"## Syntax\\r\\n\\r\\n`log2(`*number*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n|*number*| real | &check; | The number for which to calculate the base-2 logarithm.|\\r\\n\\r\\n## Returns\\r\\n\\r\\n* The logarithm is the base-2 logarithm: the inverse of the exponential function (exp) with base 2.\\r\\n* `null` if the argument is negative or null or can't be converted to a `real` value.\",'> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAysoyswrUShKLS7NKbHNyU830jDVBAAnF4/MFAAAAA==\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint result=log2(5)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|result|\\r\\n|--|\\r\\n|2.3219280948873622|\\r\\n\\r\\n## See also\\r\\n\\r\\n* For natural (base-e) logarithms, see [log()](log-function.md).\\r\\n* For common (base-10) logarithms, see [log10()](log10-function.md).',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/log2-function\",\"log2-function.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"loggamma\",\"Computes log of the absolute value of the [gamma function](https://en.wikipedia.org/wiki/Gamma_function)\",\"## Syntax\\r\\n\\r\\n`loggamma(`*number*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n|*number*| real | &check; | The number for which to calculate the gamma.|\",'> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAysoyswrUShKLS7NKbHNyU9PT8zNTdQw1QQAjpO9/xgAAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint result=loggamma(5)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|result|\\r\\n|--|\\r\\n|3.1780538303479458|\\r\\n\\r\\n## Returns\\r\\n\\r\\n* Returns the natural logarithm of the absolute value of the gamma function of x.\\r\\n* For computing gamma function, see [gamma()](gammafunction.md).',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/loggammafunction\",\"loggammafunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.OperatorToken,\"lookup\",\"Extends the columns of a fact table with values looked-up in a dimension table.\",\"```\\r\\nFactTable | lookup kind=leftouter (DimensionTable) on CommonColumn, $left.Col1 == $right.Col2\\r\\n```\\r\\n\\r\\nHere, the result is a table that extends the `FactTable` (`$left`) with data from `DimensionTable` (referenced by `$right`)\\r\\n by performing a lookup of each pair (`CommonColumn`,`Col`) from the former table\\r\\nwith each pair (`CommonColumn1`,`Col2`) in the latter table.\\r\\nFor the differences between fact and dimension tables, see [fact and dimension tables](../concepts/fact-and-dimension-tables.md).\\r\\n\\r\\nThe `lookup` operator performs an operation similar to the [join operator](joinoperator.md)\\r\\nwith the following differences:\\r\\n\\r\\n* The result doesn't repeat columns from the `$right` table that are the basis\\r\\n  for the join operation.\\r\\n* Only two kinds of lookup are supported, `leftouter` and `inner`,\\r\\n  with `leftouter` being the default.\\r\\n* In terms of performance, the system by default assumes that the `$left` table\\r\\n  is the larger (facts) table, and the `$right` table is the smaller (dimensions)\\r\\n  table. This is exactly opposite to the assumption used by the `join` operator.\\r\\n* The `lookup` operator automatically broadcasts the `$right` table to the `$left`\\r\\n  table (essentially, behaves as if `hint.broadcast` was specified). This limits the size of the `$right` table.\\r\\n\\r\\n> [!NOTE]\\r\\n> If the right side of the lookup is larger than several tens of MBs, the query will fail.\\r\\n>\\r\\n> You can run the following query to estimate the size of the right side in bytes:\\r\\n>\\r\\n> ```kusto\\r\\n> rightSide\\r\\n> | summarize sum(estimate_data_size(*))\\r\\n> ```\\r\\n\\r\\n## Syntax\\r\\n\\r\\n*LeftTable* `|` `lookup` [`kind` `=` (`leftouter`|`inner`)] `(`*RightTable*`)` `on` *Attributes*\\r\\n\\r\\n## Parameters\\r\\n\\r\\n|Name|Type|Required|Description|\\r\\n|--|--|--|--|\\r\\n|*LeftTable*|string|&check;|The table or tabular expression that is the basis for the lookup. Denoted as `$left`.|\\r\\n|*RightTable*|string|&check;|The table or tabular expression that is used to \\\"populate\\\" new columns in the fact table. Denoted as `$right`.|\\r\\n|*Attributes*|string|&check;|A comma-delimited list of one or more rules that describe how rows from *LeftTable* are matched to rows from *RightTable*. Multiple rules are evaluated using the `and` logical operator. See [Rules](#rules).|\\r\\n|`kind`|string||Determines how to treat rows in *LeftTable* that have no match in *RightTable*. By default, `leftouter` is used, which means all those rows will appear in the output with null values used for the missing values of *RightTable* columns added by the operator. If `inner` is used, such rows are omitted from the output. Other kinds of join aren't supported by the `lookup` operator.|\\r\\n\\r\\n### Rules\\r\\n\\r\\n| Rule kind | Syntax | Predicate |\\r\\n|---|---|---|\\r\\n| Equality by name | *ColumnName* | `where` *LeftTable*.*ColumnName* `==` *RightTable*.*ColumnName* |\\r\\n| Equality by value | `$left.`*LeftColumn* `==` `$right.`*RightColumn* | `where` `$left.`*LeftColumn* `==` `$right.`*RightColumn |\\r\\n\\r\\n> [!NOTE]\\r\\n> In case of 'equality by value', the column names *must* be qualified with the applicable owner table denoted by `$left` and `$right` notations.\\r\\n\\r\\n## Returns\\r\\n\\r\\nA table with:\\r\\n\\r\\n* A column for every column in each of the two tables, including the matching keys.\\r\\n  The columns of the right side will be automatically renamed if there are name conflicts.\\r\\n* A row for every match between the input tables. A match is a row selected from one table that has the same value for all the `on` fields as a row in the other table.\\r\\n* The Attributes (lookup keys) will appear only once in the output table.\\r\\n* If `kind` is unspecified or `kind=leftouter`, then in addition to the inner matches, there's a row for every row on the left (and/or right), even if it has no match. In that case, the unmatched output cells contain nulls.\\r\\n* If `kind=inner`, then there's a row in the output for every combination of matching rows from left and right.\",'> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA32RsW4CMQyG93sKKxOVslDahYoBqOhatWwVQ+4wyMJJqotpVakP3wQ3h2BAGRL7k+X/UxgFVq6TtWsZZ1sn+eTX6C1+T5P0FPb2FfsUg+Nar5wn/vmv7uCjATBjY8EsiDnfuXxxgsnYQu4vyZIpSAzKJjfYQ2Hvgl9YoFk4Zo+9ssfC1uRPY3kuxoNpNk8NZ5ln8tcuNwXsnMmlS5saqXqUJW3u7XX9gIfAijvFNfQ5M5hUeq3yGlxzq4KQ704Kw180v8CZHz/hQGE7Y9xJPAr2gyDEANXMgjr9AbRCGP7OAQAA\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nlet FactTable=datatable(Row:string,Personal:string,Family:string) [\\r\\n  \"1\", \"Bill\",   \"Gates\",\\r\\n  \"2\", \"Bill\",   \"Clinton\",\\r\\n  \"3\", \"Bill\",   \"Clinton\",\\r\\n  \"4\", \"Steve\",  \"Ballmer\",\\r\\n  \"5\", \"Tim\",    \"Cook\"\\r\\n];\\r\\nlet DimTable=datatable(Personal:string,Family:string,Alias:string) [\\r\\n  \"Bill\",  \"Gates\",   \"billg\",\\r\\n  \"Bill\",  \"Clinton\", \"billc\",\\r\\n  \"Steve\", \"Ballmer\", \"steveb\",\\r\\n  \"Tim\",   \"Cook\",    \"timc\"\\r\\n];\\r\\nFactTable\\r\\n| lookup kind=leftouter DimTable on Personal, Family\\r\\n```\\r\\n\\r\\nRow     | Personal  | Family   | Alias\\r\\n--------|-----------|----------|--------\\r\\n1       | Bill      | Gates    | billg\\r\\n2       | Bill      | Clinton  | billc\\r\\n3       | Bill      | Clinton  | billc\\r\\n4       | Steve     | Ballmer  | steveb\\r\\n5       | Tim       | Cook     | timc',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/lookupoperator\",\"lookupoperator.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"make_bag\",\"Creates a `dynamic` JSON property bag (dictionary) of all the values of *expr* in the group.\",\"[!INCLUDE [data-explorer-agg-function-summarize-note](../../includes/data-explorer-agg-function-summarize-note.md)]\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`make_bag` `(`*expr* [`,` *maxSize*]`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *expr* | dynamic | &check; | The expression used for the aggregation calculation. |\\r\\n| *maxSize* | int |  | The limit on the maximum number of elements returned. The default and max value is 1048576. |\\r\\n\\r\\n> [!NOTE]\\r\\n> `make_dictionary()` has been deprecated in favor of `make_bag()`. The legacy version has a default *maxSize* limit of 128.\\r\\n\\r\\n## Returns\\r\\n\\r\\nReturns a `dynamic` JSON property bag (dictionary) of all the values of *Expr* in the group, which are property bags. Non-dictionary values will be skipped.\\r\\nIf a key appears in more than one row, an arbitrary value, out of the possible values for this key, will be selected.\",'The following example shows a packed JSON property bag.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA1WNzQrDIAyA7z5F8FTBw35uG32L3saQqKFItRNrxyh9+GWjhS055csHX6QKHbTgsfLaSE0uj3yZagljr+GJcabtUuImgEd+jMNRapD8Nij1Dz7t2P7h844d4/tVdGIFelUaPWSuW+xNRjd841tVsTLNKWEJC4EPrrYJBzLsNlm9AS6AdnS4AAAA\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nlet T = datatable(prop:string, value:string)\\r\\n[\\r\\n    \"prop01\", \"val_a\",\\r\\n    \"prop02\", \"val_b\",\\r\\n    \"prop03\", \"val_c\",\\r\\n];\\r\\nT\\r\\n| extend p = bag_pack(prop, value)\\r\\n| summarize dict=make_bag(p)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|dict|\\r\\n|----|\\r\\n|{ \"prop01\": \"val_a\", \"prop02\": \"val_b\", \"prop03\": \"val_c\" } |\\r\\n\\r\\nUse the [bag_unpack()](bag-unpackplugin.md) plugin for transforming the bag keys in the make_bag() output into columns.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA1WNvQrDMAyEdz+F8BSDh/5sLXmLbKUYOREhxHZNYpdS+vCVTQKttJy+O3GOEnTQwoCJ1zpq4vKIlzUtUxg1PNFl2i4lbgJ4ZEkcjlKDZNug1D/4tGP7h8877hnfr6ITH6BXojBA5HaLo4nYz7V8a1UcWbP3uExvKonW40yGRROLRyWFqVomh/rOUn0B38wbbdIAAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nlet T = datatable(prop:string, value:string)\\r\\n[\\r\\n    \"prop01\", \"val_a\",\\r\\n    \"prop02\", \"val_b\",\\r\\n    \"prop03\", \"val_c\",\\r\\n];\\r\\nT\\r\\n| extend p = bag_pack(prop, value)\\r\\n| summarize bag=make_bag(p)\\r\\n| evaluate bag_unpack(bag)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|prop01|prop02|prop03|\\r\\n|---|---|---|\\r\\n|val_a|val_b|val_c|\\r\\n\\r\\n## See also\\r\\n\\r\\n[bag_unpack()](bag-unpackplugin.md).',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/make-bag-aggfunction\",\"make-bag-aggfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"make_bag_if\",\"Creates a `dynamic` JSON property bag (dictionary) of *expr* values in records for which *predicate* evaluates to `true`.\",\"[!INCLUDE [data-explorer-agg-function-summarize-note](../../includes/data-explorer-agg-function-summarize-note.md)]\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`make_bag_if(`*expr*`,` *predicate* [`,` *maxSize*]`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *expr* | dynamic | &check; | The expression used for the aggregation calculation. |\\r\\n| *predicate* | bool | &check; | The predicate that evaluates to `true`, in order for *expr* to be added to the result. |\\r\\n| *maxSize* | int |  | The limit on the maximum number of elements returned. The default and max value is 1048576. |\\r\\n\\r\\n## Returns\\r\\n\\r\\nReturns a `dynamic` JSON property bag (dictionary) of *expr* values in records for which *predicate* evaluates to `true`. Non-dictionary values will be skipped.\\r\\nIf a key appears in more than one row, an arbitrary value, out of the possible values for this key, will be selected.\\r\\n\\r\\n> [!NOTE]\\r\\n> This function without the predicate is similar to [`make_bag`](./make-bag-aggfunction.md).\",'The following example shows a packed JSON property bag.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA1WOywqDQAxF9/MVwZXCLPrYWfwLd0Uko1EGRx1mYimlH99YtNhkc8O5geOIoYQCWmRZ4yj1YfZ55GCnXsMD3UK/ywdqbYNMuZlnl6m7Aplk/TidEw2J1GuUwGEhfYCXHRoJHbr4R687bbZXVd1Uqd5AT6apBS9+BvvaYzN89TavTCpxGUcM9kUgZlyMOFC9dm2X+oNw9gEXEDu16AAAAA==\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nlet T = datatable(prop:string, value:string, predicate:bool)\\r\\n[\\r\\n    \"prop01\", \"val_a\", true,\\r\\n    \"prop02\", \"val_b\", false,\\r\\n    \"prop03\", \"val_c\", true\\r\\n];\\r\\nT\\r\\n| extend p = bag_pack(prop, value)\\r\\n| summarize dict=make_bag_if(p, predicate)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|dict|\\r\\n|----|\\r\\n|{ \"prop01\": \"val_a\", \"prop03\": \"val_c\" } |\\r\\n\\r\\nUse [bag_unpack()](bag-unpackplugin.md) plugin for transforming the bag keys in the make_bag_if() output into columns.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA1WOzQqDMBCE73mKxZNCDv25WXwLb6XIxqwSjBpiUkrpw3cjWuzuZZb5ZhlLAWqoQGPgVZZy52dXLsGbqZfwRBvpdzlP2rQYqFTzbAtxF8CTpcTpnEnIGG+QRfCR5MG87KZi0aFd/tzr7rZbVDxuohYfoFegSYPjfgr7xmE7rPW2XgUjSxxH9OZNiahGHKhJqOlyd+ibSEoZ1uurOK3PWBZfye97QAIBAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nlet T = datatable(prop:string, value:string, predicate:bool)\\r\\n[\\r\\n    \"prop01\", \"val_a\", true,\\r\\n    \"prop02\", \"val_b\", false,\\r\\n    \"prop03\", \"val_c\", true\\r\\n];\\r\\nT\\r\\n| extend p = bag_pack(prop, value)\\r\\n| summarize bag=make_bag_if(p, predicate)\\r\\n| evaluate bag_unpack(bag)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|prop01|prop03|\\r\\n|---|---|\\r\\n|val_a|val_c|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/make-bag-if-aggfunction\",\"make-bag-if-aggfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"make_datetime\",\"Creates a [datetime](./scalar-data-types/datetime.md) scalar value between the specified date and time.\",\"## Syntax\\r\\n\\r\\n`make_datetime(`*year*, *month*, *day*`)`\\r\\n\\r\\n`make_datetime(`*year*, *month*, *day*, *hour*, *minute*`)`\\r\\n\\r\\n`make_datetime(`*year*, *month*, *day*, *hour*, *minute*, *second*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n|*year*| int | &check; | The year value between 0 to 9999.|\\r\\n|*month*| int | &check; | The month value between 1 to 12. |\\r\\n|*day*| int | &check; | The day value between 1 to 28-31, depending on the month.|\\r\\n|*hour*| int | | The hour value between 0 to 23.|\\r\\n|*minute*| int | | The minute value between 0 to 59.|\\r\\n|*second*| double | | The second value between 0 to 59.9999999.|\\r\\n\\r\\n## Returns\\r\\n\\r\\nIf successful, the result will be a [datetime](./scalar-data-types/datetime.md) value, otherwise, the result will be null.\",'> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAysoyswrUahMTSyKz83PK8mIT0msVLBVyE3MTgUyS1JLMnNTNYwMDM11DA10DAw1AS/izjAwAAAA\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint year_month_day = make_datetime(2017,10,01)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|year_month_day|\\r\\n|---|\\r\\n|2017-10-01 00:00:00.0000000|\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAysoyswrUahMTSyKz83PK8mIT0msjM/ILwVyM/NKS1IVbBVyE7NTgcIlqSWZuakaRgaG5jqGBjoGhjqGRkCGJgB7AoRjQgAAAA==\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint year_month_day_hour_minute = make_datetime(2017,10,01,12,10)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|year_month_day_hour_minute|\\r\\n|---|\\r\\n|2017-10-01 12:10:00.0000000|\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAw3JSwqAIBAA0Ku4LBjCsY+rzjJIDijhGDYuvH0tH+9pWdQMDo1KFU0Uw6BU+88sXZlevqpEc5oSbv5XWXPhyVn0gBYsAjpABLugW7f98PMHKbr/e1MAAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint year_month_day_hour_minute_second = make_datetime(2017,10,01,12,11,0.1234567)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|year_month_day_hour_minute_second|\\r\\n|---|\\r\\n|2017-10-01 12:11:00.1234567|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/make-datetimefunction\",\"make-datetimefunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"make_list\",\"Creates a `dynamic` array of all the values of *expr* in the group.\",\"[!INCLUDE [data-explorer-agg-function-summarize-note](../../includes/data-explorer-agg-function-summarize-note.md)]\\r\\n\\r\\n> **Deprecated aliases:** makelist()\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`make_list(`*expr* [`,` *maxSize*]`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *expr* | dynamic | &check; | The expression used for the aggregation calculation. |\\r\\n| *maxSize* | int |  | The maximum number of elements returned. The default and max value is 1048576. |\\r\\n\\r\\n> [!NOTE]\\r\\n> The deprecated version has a default *maxSize* limit of 128.\\r\\n\\r\\n## Returns\\r\\n\\r\\nReturns a `dynamic` array of all the values of *expr* in the group.\\r\\nIf the input to the `summarize` operator isn't sorted, the order of elements in the resulting array is undefined.\\r\\nIf the input to the `summarize` operator is sorted, the order of elements in the resulting array tracks that of the input.\\r\\n\\r\\n> [!TIP]\\r\\n> Use the [`array_sort_asc()`](./arraysortascfunction.md) or [`array_sort_desc()`](./arraysortdescfunction.md) function to create an ordered list by some key.\",'### One column\\r\\n\\r\\nThe following example makes a list out of a single column:\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA0XPzwrCMAwG8Huh7xB2crCD4v+JJx9DROIWtmKbzrYDFR/eTldNLuGX7/JpCuBb7MjDHmoMcS+aYMJoqAQfnOKmAK9qOtieQwmKQy7FUQqIk8U/cqMpK2BejOZvPbpBFkkcVSHFftgRB2wsR1sma+k+0upPXYqtk9kq0SYRWx5pm6imaqTZVIrTTopvUSle4Htj0KkngXlo5UMsb/BK5+H+dM/ff3I+dBkBAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nlet shapes = datatable (name: string, sideCount: int)\\r\\n[\\r\\n    \"triangle\", 3,\\r\\n    \"square\", 4,\\r\\n    \"rectangle\", 4,\\r\\n    \"pentagon\", 5,\\r\\n    \"hexagon\", 6,\\r\\n    \"heptagon\", 7,\\r\\n    \"octagon\", 8,\\r\\n    \"nonagon\", 9,\\r\\n    \"decagon\", 10\\r\\n];\\r\\nshapes\\r\\n| summarize mylist = make_list(name)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|mylist|\\r\\n|---|\\r\\n|[\"triangle\",\"square\",\"rectangle\",\"pentagon\",\"hexagon\",\"heptagon\",\"octagon\",\"nonagon\",\"decagon\"]|\\r\\n\\r\\n### Using the \\'by\\' clause\\r\\n\\r\\nThe following example runs a query using the `by` clause:\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA0XQ3YrCMBAF4PtA3uEgCCv0wp/d9Y9eiU/gpYjEdqjBZlqbVFR8eKPbcSc3w5dzc6akAH80NXmkyE2I71ASvtg4WsCHxnKRwNucVlXLYQHLYaDVVivE6cV/w0VJvQSTpDN/bk3zkm+RhrIgsQ/WxMEUFUf7ETvStaPff6olNhWrMqGZEFfc0Vwop6yj0VCr3VKrv6JaPeBb50xj7wR3K60PsbwzJ9q/9nf3AQ43WL++EG+kfAx9DoE+xkhTDJ/VCjwFQQEAAA==\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nlet shapes = datatable (name: string, sideCount: int)\\r\\n[\\r\\n    \"triangle\", 3,\\r\\n    \"square\", 4,\\r\\n    \"rectangle\", 4,\\r\\n    \"pentagon\", 5,\\r\\n    \"hexagon\", 6,\\r\\n    \"heptagon\", 7,\\r\\n    \"octagon\", 8,\\r\\n    \"nonagon\", 9,\\r\\n    \"decagon\", 10\\r\\n];\\r\\nshapes\\r\\n| summarize mylist = make_list(name) by isEvenSideCount = sideCount % 2 == 0\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|isEvenSideCount| mylist|\\r\\n|---|---|\\r\\n|false|[\"triangle\",\"pentagon\",\"heptagon\",\"nonagon\"]|\\r\\n|true|[\"square\",\"rectangle\",\"hexagon\",\"octagon\",\"decagon\"]|\\r\\n\\r\\n### Packing a dynamic object\\r\\n\\r\\nThe following examples show how to [pack](./packfunction.md) a dynamic object in a column before making it a list.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA03Pz0rEMBAG8Hsg7zAUhBZ6WP/rSk/iE3gUWabN0A3bTGuTyq748E6ws5ocEn75JvANlCDucaIIDThMstuBoGQMtIWYZs99DdE7eh4XTlvwnCpr3qwBWYW8I/cDFTVc16vFjwXnLDcqM3VJY2eciBP2I4vdqu3puNLdH00au1cbO6UHJR55pUclR91Klxtr3p+s+S1qzTfQMRE7cFK6xX43YXcoi9xZ0vmopYZ2Lv71r/JwXELA2X8RhNPgY5JPAh5ol++lq6A9gY8vn8SvOiaJ8xdwAVfQNLD5ARd0KSV7AQAA\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nlet shapes = datatable (name: string, sideCount: int)\\r\\n[\\r\\n    \"triangle\", 3,\\r\\n    \"square\", 4,\\r\\n    \"rectangle\", 4,\\r\\n    \"pentagon\", 5,\\r\\n    \"hexagon\", 6,\\r\\n    \"heptagon\", 7,\\r\\n    \"octagon\", 8,\\r\\n    \"nonagon\", 9,\\r\\n    \"decagon\", 10\\r\\n];\\r\\nshapes\\r\\n| extend d = bag_pack(\"name\", name, \"sideCount\", sideCount)\\r\\n| summarize mylist = make_list(d) by isEvenSideCount = sideCount % 2 == 0\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|isEvenSideCount|mylist|\\r\\n|---|---|\\r\\n|false|[{\"name\":\"triangle\",\"sideCount\":3},{\"name\":\"pentagon\",\"sideCount\":5},{\"name\":\"heptagon\",\"sideCount\":7},{\"name\":\"nonagon\",\"sideCount\":9}]|\\r\\n|true|[{\"name\":\"square\",\"sideCount\":4},{\"name\":\"rectangle\",\"sideCount\":4},{\"name\":\"hexagon\",\"sideCount\":6},{\"name\":\"octagon\",\"sideCount\":8},{\"name\":\"decagon\",\"sideCount\":10}]|\\r\\n\\r\\n## See also\\r\\n\\r\\n[`make_list_if`](./makelistif-aggfunction.md) operator is similar to `make_list`, except it also accepts a predicate.',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/makelist-aggfunction\",\"makelist-aggfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"make_list_if\",\"Creates a `dynamic` array of *expr* values in the group for which *predicate* evaluates to `true`.\",\"[!INCLUDE [data-explorer-agg-function-summarize-note](../../includes/data-explorer-agg-function-summarize-note.md)]\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`make_list_if(`*expr*`,` *predicate* [`,` *maxSize*]`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *expr* | string | &check; | The expression used for the aggregation calculation. |\\r\\n| *predicate* | string | &check; | A predicate that has to evaluate to `true` in order for *expr* to be added to the result. |\\r\\n| *maxSize* | integer |  | The maximum number of elements returned. The default and max value is 1048576. |\\r\\n\\r\\n## Returns\\r\\n\\r\\nReturns a `dynamic` array of *expr* vlaues in the group for which *predicate* evaluates to `true`.\\r\\nIf the input to the `summarize` operator is not sorted, the order of elements in the resulting array is undefined.\\r\\nIf the input to the `summarize` operator is sorted, the order of elements in the resulting array tracks that of the input.\",'The following example shows a list of names with more than 4 letters.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAy2OsQrCMBRF90D+4dHJQhZFUSu6Ck4i3URCiq9p8CWBJB0UP95HLXc6Z7gcwgItHOFpCq8jXATjsckluWAV67eOve5cKkNDMdhairsUAFBd4hAqBXv1x6sZiXG5m/mMMVlks9rM5saPkcVWisdBilaKL+TRe5PcB8GbF2pyuWjXTw0KOIIwTFDDCdb1D5O20PKtAAAA\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nlet T = datatable(name:string, day_of_birth:long)\\r\\n[\\r\\n   \"John\", 9,\\r\\n   \"Paul\", 18,\\r\\n   \"George\", 25,\\r\\n   \"Ringo\", 7\\r\\n];\\r\\nT\\r\\n| summarize make_list_if(name, strlen(name) > 4)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|list_name|\\r\\n|----|\\r\\n|[\"George\", \"Ringo\"]|\\r\\n\\r\\n## See also\\r\\n\\r\\n[`make_list`](./makelist-aggfunction.md) function, which does the same, without predicate expression.',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/makelistif-aggfunction\",\"makelistif-aggfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"make_list_with_nulls\",\"Creates a `dynamic` array of all the values of *expr* in the group, including null values.\",\"[!INCLUDE [data-explorer-agg-function-summarize-note](../../includes/data-explorer-agg-function-summarize-note.md)]\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`make_list_with_nulls(`*expr*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *expr* | string | &check; | The expression that to use to create the array. |\\r\\n\\r\\n## Returns\\r\\n\\r\\nReturns a `dynamic` JSON object (array) of all the values of *expr* in the group, including null values.\\r\\nIf the input to the `summarize` operator isn't sorted, the order of elements in the resulting array is undefined.\\r\\nIf the input to the `summarize` operator is sorted, the order of elements in the resulting array tracks that of the input.\\r\\n\\r\\n> [!TIP]\\r\\n> Use the [`array_sort_asc()`](./arraysortascfunction.md) or [`array_sort_desc()`](./arraysortdescfunction.md) function to create an ordered list by some key.\",'The following example shows null values in the results.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAz3PywqDMBAF0H2+YnCl4KKFPi1d9TNKkVQHDU0mNhnpg358E4zObIZzZ3M1MvheDujhDK3ksHeNkJM0WHl2ijoowasWL3YkrkARF+IqIEwWYkmdxqyMnNOodVFOkX+O0sVgk8Bhw/PzbAMSy85SoG2iHt9JdosM89M+kW1mOSQhS0mOSVpskqxX4nYSU0nxAz8aI536IpiPVp5DbyMfWMe7finu69jD50vn4g++V3ROJAEAAA==\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nlet shapes = datatable (name:string , sideCount: int)\\r\\n[\\r\\n    \"triangle\", int(null),\\r\\n    \"square\", 4,\\r\\n    \"rectangle\", 4,\\r\\n    \"pentagon\", 5,\\r\\n    \"hexagon\", 6,\\r\\n    \"heptagon\", 7,\\r\\n    \"octagon\", 8,\\r\\n    \"nonagon\", 9,\\r\\n    \"decagon\", 10\\r\\n];\\r\\nshapes\\r\\n| summarize mylist = make_list_with_nulls(sideCount)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n| mylist |\\r\\n| ------ |\\r\\n| [null,4,4,5,6,7,8,9,10] |',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/make-list-with-nulls-aggfunction\",\"make-list-with-nulls-aggfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"make_set\",\"Creates a `dynamic` array of the set of distinct values that *expr* takes in the group.\",\"[!INCLUDE [data-explorer-agg-function-summarize-note](../../includes/data-explorer-agg-function-summarize-note.md)]\\r\\n\\r\\n> **Deprecated aliases:** makeset()\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`make_set(`*expr* [`,` *maxSize*]`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *expr* | string | &check; | The expression used for the aggregation calculation. |\\r\\n| *maxSize* | int |  | The maximum number of elements returned. The default and max value is 1048576. |\\r\\n\\r\\n> [!NOTE]\\r\\n> The deprecated version has a default *maxSize* limit of 128.\\r\\n\\r\\n## Returns\\r\\n\\r\\nReturns a `dynamic` array of the set of distinct values that *expr* takes in the group.\\r\\nThe array's sort order is undefined.\\r\\n\\r\\n> [!TIP]\\r\\n> To only count distinct values, use [dcount()](dcount-aggfunction.md) or [count_distinct()](count-distinct-aggfunction.md).\",'### Set from a scalar column\\r\\n\\r\\nThe following example shows the set of states grouped with the same amount of crop damage.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAwsuyS/KdS1LzSspVuDlqlEoLs3NTSzKrEpVKC5JLEktts1NzE6NL04t0QgG8TUVkioVXBJzE9NTnYvyC4oBmxrbeD8AAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nStormEvents \\r\\n| summarize states=make_set(State) by DamageCrops\\r\\n```\\r\\n\\r\\nThe results table shown includes only the first 10 rows.\\r\\n\\r\\n| DamageCrops | states |\\r\\n|--|--|\\r\\n| 0 | [\"NORTH CAROLINA\",\"WISCONSIN\",\"NEW YORK\",\"ALASKA\",\"DELAWARE\",\"OKLAHOMA\",\"INDIANA\",\"ILLINOIS\",\"MINNESOTA\",\"SOUTH DAKOTA\",\"TEXAS\",\"UTAH\",\"COLORADO\",\"VERMONT\",\"NEW JERSEY\",\"VIRGINIA\",\"CALIFORNIA\",\"PENNSYLVANIA\",\"MONTANA\",\"WASHINGTON\",\"OREGON\",\"HAWAII\",\"IDAHO\",\"PUERTO RICO\",\"MICHIGAN\",\"FLORIDA\",\"WYOMING\",\"GULF OF MEXICO\",\"NEVADA\",\"LOUISIANA\",\"TENNESSEE\",\"KENTUCKY\",\"MISSISSIPPI\",\"ALABAMA\",\"GEORGIA\",\"SOUTH CAROLINA\",\"OHIO\",\"NEW MEXICO\",\"ATLANTIC SOUTH\",\"NEW HAMPSHIRE\",\"ATLANTIC NORTH\",\"NORTH DAKOTA\",\"IOWA\",\"NEBRASKA\",\"WEST VIRGINIA\",\"MARYLAND\",\"KANSAS\",\"MISSOURI\",\"ARKANSAS\",\"ARIZONA\",\"MASSACHUSETTS\",\"MAINE\",\"CONNECTICUT\",\"GUAM\",\"HAWAII WATERS\",\"AMERICAN SAMOA\",\"LAKE HURON\",\"DISTRICT OF COLUMBIA\",\"RHODE ISLAND\",\"LAKE MICHIGAN\",\"LAKE SUPERIOR\",\"LAKE ST CLAIR\",\"LAKE ERIE\",\"LAKE ONTARIO\",\"E PACIFIC\",\"GULF OF ALASKA\"] |\\r\\n| 30000 | [\"TEXAS\",\"NEBRASKA\",\"IOWA\",\"MINNESOTA\",\"WISCONSIN\"] |\\r\\n| 4000000 | [\"CALIFORNIA\",\"KENTUCKY\",\"NORTH DAKOTA\",\"WISCONSIN\",\"VIRGINIA\"] |\\r\\n| 3000000 | [\"CALIFORNIA\",\"ILLINOIS\",\"MISSOURI\",\"SOUTH CAROLINA\",\"NORTH CAROLINA\",\"MISSISSIPPI\",\"NORTH DAKOTA\",\"OHIO\"] |\\r\\n| 14000000 | [\"CALIFORNIA\",\"NORTH DAKOTA\"] |\\r\\n| 400000 | [\"CALIFORNIA\",\"MISSOURI\",\"MISSISSIPPI\",\"NEBRASKA\",\"WISCONSIN\",\"NORTH DAKOTA\"] |\\r\\n| 50000 | [\"CALIFORNIA\",\"GEORGIA\",\"NEBRASKA\",\"TEXAS\",\"WEST VIRGINIA\",\"KANSAS\",\"MISSOURI\",\"MISSISSIPPI\",\"NEW MEXICO\",\"IOWA\",\"NORTH DAKOTA\",\"OHIO\",\"WISCONSIN\",\"ILLINOIS\",\"MINNESOTA\",\"KENTUCKY\"] |\\r\\n| 18000 | [\"WASHINGTON\",\"WISCONSIN\"] |\\r\\n| 107900000 | [\"CALIFORNIA\"] |\\r\\n| 28900000 | [\"CALIFORNIA\"] |\\r\\n\\r\\n### Set from array column\\r\\n\\r\\nThe following example shows the set of elements in an array.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA0tJLAHCpJxUBY2wxBwrhcy8Eh0Fx6IiQyuFlMq8xNzMZE2uaC4FIDDUgYloRKs7GqrrKKg7GoFJY/VYTR0FsCJTFEVgaWdDkDRY1hxZ1hlJM6ZeqCxIL1esAleNQnFpbm5iUWZVqgLQnfHFqSW2uYnZqSAGyOGaEEejioNENAHdRSJ74QAAAA==\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\ndatatable (Val: int, Arr1: dynamic)\\r\\n[\\r\\n    1, dynamic([\\'A1\\', \\'A2\\', \\'A3\\']), \\r\\n    5, dynamic([\\'A2\\', \\'C1\\']),\\r\\n    7, dynamic([\\'C2\\', \\'A3\\']),\\r\\n    5, dynamic([\\'C2\\', \\'A1\\'])\\r\\n] \\r\\n| summarize Val_set=make_set(Val), Arr1_set=make_set(Arr1)\\r\\n```\\r\\n\\r\\n| Val_set | Arr1_set |\\r\\n|--|--|\\r\\n| [1,5,7] | [\"A1\",\"A2\",\"A3\",\"C1\",\"C2\"] |\\r\\n\\r\\n## See also\\r\\n\\r\\n* Use [`mv-expand`](./mvexpandoperator.md) operator for the opposite function.\\r\\n* [`make_set_if`](./makesetif-aggfunction.md) operator is similar to `make_set`, except it also accepts a predicate.',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/makeset-aggfunction\",\"makeset-aggfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"make_set_if\",\"Creates a `dynamic` array of the set of distinct values that *expr* takes in records for which *predicate* evaluates to `true`.\",\"[!INCLUDE [data-explorer-agg-function-summarize-note](../../includes/data-explorer-agg-function-summarize-note.md)]\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`make_set_if(`*expr*`,` *predicate* [`,` *maxSize*]`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *expr* | string | &check; | The expression used for the aggregation calculation. |\\r\\n| *predicate* | string | &check; | A predicate that has to evaluate to `true` in order for *expr* to be added to the result. |\\r\\n| *maxSize* | int |  | The maximum number of elements returned. The default and max value is 1048576. |\\r\\n\\r\\n## Returns\\r\\n\\r\\nReturns a `dynamic` array of the set of distinct values that *expr* takes in records for which *predicate* evaluates to `true`. The array's sort order is undefined.\\r\\n\\r\\n> [!TIP]\\r\\n> To only count the distinct values, use [dcountif()](dcountif-aggfunction.md).\\r\\n\\r\\n## See also\\r\\n\\r\\n[`make_set`](./makeset-aggfunction.md) function, which does the same, without predicate expression.\",'The following example shows a list of names with more than 4 letters.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAyXNPQvCMBSF4T2/4tDJQBZFUSt1FZxEuomEFG/bYD4gSQfFH++l5U7PO9zjqKBFg5cpfJ2jVTCe6lySDYPi/NGx151NZaxdDIMUDwGgusYxVApHNetmJsdaHxZeKKaBOGx2S7jzs8jei+dJtOKHPHlvkv0SvHmTzlS07edpBd52FGZInLGVf+88QMOkAAAA\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nlet T = datatable(name:string, day_of_birth:long)\\r\\n[\\r\\n   \"John\", 9,\\r\\n   \"Paul\", 18,\\r\\n   \"George\", 25,\\r\\n   \"Ringo\", 7\\r\\n];\\r\\nT\\r\\n| summarize make_set_if(name, strlen(name) > 4)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|set_name|\\r\\n|----|\\r\\n|[\"George\", \"Ringo\"]|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/makesetif-aggfunction\",\"makesetif-aggfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"make_timespan\",\"Creates a [timespan](./scalar-data-types/timespan.md) scalar value from the specified time period.\",\"## Syntax\\r\\n\\r\\n`make_timespan(`*hour*, *minute*`)`\\r\\n\\r\\n`make_timespan(`*hour*, *minute*, *second*`)`\\r\\n\\r\\n`make_timespan(`*day*, *hour*, *minute*, *second*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n|*day*| int | &check;| The day.|\\r\\n|*hour*| int | &check;| The hour. A value from 0-23.|\\r\\n|*minute*| int || The minute. A value from 0-59.|\\r\\n|*second*| real || The second. A value from 0 to 59.9999999.|\\r\\n\\r\\n## Returns\\r\\n\\r\\nIf the creation is successful, the result will be a [timespan](./scalar-data-types/timespan.md) value. Otherwise, the result will be null.\",'> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAysoyswrUYhWL8nMTS0uSMxTj1WwVchNzE6Nh4loGOoYGukYG+iYmuoZGhlrAgBc6MUYMgAAAA==\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint [\\'timespan\\'] = make_timespan(1,12,30,55.123)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|timespan|\\r\\n|---|\\r\\n|1.12:30:55.1230000|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/make-timespanfunction\",\"make-timespanfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.OperatorToken,\"make-series\",\"Create series of specified aggregated values along a specified axis.\",\"## Syntax\\r\\n\\r\\n*T* `| make-series` [*MakeSeriesParameters*]\\r\\n      [*Column* `=`] *Aggregation* [`default` `=` *DefaultValue*] [`,` ...]\\r\\n    `on` *AxisColumn* [`from` *start*] [`to` *end*] `step` *step*\\r\\n    [`by`\\r\\n      [*Column* `=`] *GroupExpression* [`,` ...]]\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n|*Column*| string | | The name for the result column. Defaults to a name derived from the expression.|\\r\\n|*DefaultValue* | scalar | | A default value to use instead of absent values. If there's no row with specific values of *AxisColumn* and *GroupExpression*, then the corresponding element of the array will be assigned a *DefaultValue*. Default is 0.|\\r\\n|*Aggregation*| string | &check; | A call to an [aggregation function](make-seriesoperator.md#list-of-aggregation-functions), such as `count()` or `avg()`, with column names as arguments. See the [list of aggregation functions](make-seriesoperator.md#list-of-aggregation-functions). Only aggregation functions that return numeric results can be used with the `make-series` operator.|\\r\\n|*AxisColumn*| string | &check; | The column by which the series will be ordered. Usually the column values will be of type `datetime` or `timespan` but all numeric types are accepted.|\\r\\n|*start* | scalar | &check; | The low bound value of the *AxisColumn* for each of the series to be built. If *start* is not specified, it will be the first bin, or step, that has data in each series.|\\r\\n|*end*| scalar| &check; | The high bound non-inclusive value of the *AxisColumn*. The last index of the time series is smaller than this value and will be *start* plus integer multiple of *step* that is smaller than *end*. If *end* is not specified, it will be the upper bound of the last bin, or step, that has data per each series.|\\r\\n|*step*| scalar | &check; | The difference, or bin size, between two consecutive elements of the *AxisColumn* array. For a list of possible time intervals, see [timespan](./scalar-data-types/timespan.md).|\\r\\n|*GroupExpression* | | |An expression over the columns that provides a set of distinct values. Typically it's a column name that already provides a restricted set of values. |\\r\\n|*MakeSeriesParameters*| | | Zero or more space-separated parameters in the form of *Name* `=` *Value* that control the behavior. See [supported make series parameters](#supported-make-series-parameters).|\\r\\n\\r\\n> [!NOTE]\\r\\n> The *start*, *end*, and *step* parameters are used to build an array of *AxisColumn* values. The array consists of values between *start* and *end*, with the *step* value representing the difference between one array element to the next. All *Aggregation* values are ordered respectively to this array.\\r\\n\\r\\n### Supported make series parameters\\r\\n\\r\\n|Name|Description|\\r\\n|--|--|\\r\\n|`kind` |Produces default result when the input of make-series operator is empty. Value: `nonempty`|   \\r\\n|`hint.shufflekey=<key>` |The `shufflekey` query shares the query load on cluster nodes, using a key to partition data. See [shuffle query](shufflequery.md) |  \\r\\n\\r\\n> [!NOTE]\\r\\n>\\r\\n> The arrays generated by make-series are limited to 1048576 values (2^20). Trying to generate a larger array with make-series would result in either an error or a truncated array.\\r\\n\\r\\n**Alternate Syntax**\\r\\n\\r\\n*T* `| make-series`\\r\\n      [*Column* `=`] *Aggregation* [`default` `=` *DefaultValue*] [`,` ...]\\r\\n    `on` *AxisColumn* `in` `range(`*start*`,` *stop*`,` *step*`)`\\r\\n    [`by`\\r\\n      [*Column* `=`] *GroupExpression* [`,` ...]]\\r\\n\\r\\nThe generated series from the alternate syntax differs from the main syntax in two aspects:\\r\\n\\r\\n* The *stop* value is inclusive.\\r\\n* Binning the index axis is generated with bin() and not bin_at(), which means that *start* may not be included in the generated series.\\r\\n\\r\\nIt's recommended to use the main syntax of make-series and not the alternate syntax.\\r\\n\\r\\n## Returns\\r\\n\\r\\nThe input rows are arranged into groups having the same values of the `by` expressions and the `bin_at(`*AxisColumn*`,`*step*`,`*start*`)` expression. Then the specified aggregation functions are computed over each group, producing a row for each group. The result contains the `by` columns, *AxisColumn* column and also at least one column for each computed aggregate. (Aggregations over multiple columns or non-numeric results aren't supported.)\\r\\n\\r\\nThis intermediate result has as many rows as there are distinct combinations of `by` and `bin_at(`*AxisColumn*`,`*step*`,`*start*`)` values.\\r\\n\\r\\nFinally the rows from the intermediate result arranged into groups having the same values of the `by` expressions and all aggregated values are arranged into arrays (values of `dynamic` type). For each aggregation, there's one column containing its array with the same name. The last column is an array containing the values of *AxisColumn* binned according to the specified *step*.\\r\\n\\r\\n> [!NOTE]\\r\\n>\\r\\n> Although you can provide arbitrary expressions for both the aggregation and grouping expressions, it's more efficient to use simple column names.\\r\\n\\r\\n## List of aggregation functions\\r\\n\\r\\n|Function|Description|\\r\\n|--------|-----------|\\r\\n|[avg()](avg-aggfunction.md)|Returns an average value across the group|\\r\\n|[avgif()](avgif-aggfunction.md)|Returns an average with the predicate of the group|\\r\\n|[count()](count-aggfunction.md)|Returns a count of the group|\\r\\n|[countif()](countif-aggfunction.md)|Returns a count with the predicate of the group|\\r\\n|[dcount()](dcount-aggfunction.md)|Returns an  approximate distinct count of the group elements|\\r\\n|[dcountif()](dcountif-aggfunction.md)|Returns an approximate distinct count with the predicate of the group|\\r\\n|[max()](max-aggfunction.md)|Returns the maximum value across the group|\\r\\n|[maxif()](maxif-aggfunction.md)|Returns the maximum value with the predicate of the group|\\r\\n|[min()](min-aggfunction.md)|Returns the minimum value across the group|\\r\\n|[minif()](minif-aggfunction.md)|Returns the minimum value with the predicate of the group|\\r\\n|[percentile()](percentiles-aggfunction.md)|Returns the percentile value across the group|\\r\\n|[take_any()](take-any-aggfunction.md)|Returns a random non-empty value for the group|\\r\\n|[stdev()](stdev-aggfunction.md)|Returns the standard deviation across the group|\\r\\n|[sum()](sum-aggfunction.md)|Returns the sum of the elements within the group|\\r\\n|[sumif()](sumif-aggfunction.md)|Returns the sum of the elements with the predicate of the group|\\r\\n|[variance()](variance-aggfunction.md)|Returns the variance across the group|\\r\\n\\r\\n## List of series analysis functions\\r\\n\\r\\n|Function|Description|\\r\\n|--------|-----------|\\r\\n|[series_fir()](series-firfunction.md)|Applies [Finite Impulse Response](https://en.wikipedia.org/wiki/Finite_impulse_response) filter|\\r\\n|[series_iir()](series-iirfunction.md)|Applies [Infinite Impulse Response](https://en.wikipedia.org/wiki/Infinite_impulse_response) filter|\\r\\n|[series_fit_line()](series-fit-linefunction.md)|Finds a straight line that is the best approximation of the input|\\r\\n|[series_fit_line_dynamic()](series-fit-line-dynamicfunction.md)|Finds a line that is the best approximation of the input, returning dynamic object|\\r\\n|[series_fit_2lines()](series-fit-2linesfunction.md)|Finds two lines that are the best approximation of the input|\\r\\n|[series_fit_2lines_dynamic()](series-fit-2lines-dynamicfunction.md)|Finds two lines that are the best approximation of the input, returning dynamic object|\\r\\n|[series_outliers()](series-outliersfunction.md)|Scores anomaly points in a series|\\r\\n|[series_periods_detect()](series-periods-detectfunction.md)|Finds the most significant periods that exist in a time series|\\r\\n|[series_periods_validate()](series-periods-validatefunction.md)|Checks whether a time series contains periodic patterns of given lengths|\\r\\n|[series_stats_dynamic()](series-stats-dynamicfunction.md)|Return multiple columns with the common statistics (min/max/variance/stdev/average)|\\r\\n|[series_stats()](series-statsfunction.md)|Generates a dynamic value with the common statistics (min/max/variance/stdev/average)|\\r\\n\\r\\nFor a complete list of series analysis functions, see: [Series processing functions](scalarfunctions.md#series-processing-functions)\\r\\n\\r\\n## List of series interpolation functions\\r\\n\\r\\n|Function|Description|\\r\\n|--------|-----------|\\r\\n|[series_fill_backward()](series-fill-backwardfunction.md)|Performs backward fill interpolation of missing values in a series|\\r\\n|[series_fill_const()](series-fill-constfunction.md)|Replaces missing values in a series with a specified constant value|\\r\\n|[series_fill_forward()](series-fill-forwardfunction.md)|Performs forward fill interpolation of missing values in a series|\\r\\n|[series_fill_linear()](series-fill-linearfunction.md)|Performs linear interpolation of missing values in a series|\\r\\n\\r\\n* Note: Interpolation functions by default assume `null` as a missing value. Therefore specify `default=`*double*(`null`) in `make-series` if you intend to use interpolation functions for the series.\",'A table that shows arrays of the numbers and average prices of each fruit from each supplier ordered by the timestamp with specified range. There\\'s a row in the output for each distinct combination of fruit and supplier. The output columns show the fruit, supplier, and arrays of: count, average, and the whole timeline (from 2016-01-01 until 2016-01-10). All arrays are sorted by the respective timestamp and all gaps are filled with default values (0 in this example). All other input columns are ignored.\\r\\n\\r\\n```\\r\\nT | make-series PriceAvg=avg(Price) default=0\\r\\non Purchase from datetime(2016-09-10) to datetime(2016-09-13) step 1d by Supplier, Fruit\\r\\n```\\r\\n\\r\\n![Three tables. The first lists raw data, the second has only distinct supplier-fruit-date combinations, and the third contains the make-series results.](images/make-seriesoperator/makeseries.png)\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA3WSwW7DIAyG73kKHxMpkWxo0jRT34JbtQNbvSkaNBWgnvbwBZH1MIGEkOzvN7+FbTjAVQd9TlfQH4bbsFr2Qdv7EnOcoh4sB7d+LuBYm665NAB/rBVI00BikKRwWhC7Hkbs/ymOA1I8kR3KSEQky0jWq6RCmS2nsmCMaK4gRXI5pFqqGE9142O93bluOStBud2K4BSRqCBFItcSFRWECsf9//vm/a0xcbTrLbB7aANnoGtO+VQV49J4soJrCsKoSIvS/ILVPzx4dit70I/vNm9IB9sNXgsEX26zu2HY9nd94Purryf8i1rafwIAAA==\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nlet data=datatable(timestamp:datetime, metric: real)\\r\\n[\\r\\n  datetime(2016-12-31T06:00), 50,\\r\\n  datetime(2017-01-01), 4,\\r\\n  datetime(2017-01-02), 3,\\r\\n  datetime(2017-01-03), 4,\\r\\n  datetime(2017-01-03T03:00), 6,\\r\\n  datetime(2017-01-05), 8,\\r\\n  datetime(2017-01-05T13:40), 13,\\r\\n  datetime(2017-01-06), 4,\\r\\n  datetime(2017-01-07), 3,\\r\\n  datetime(2017-01-08), 8,\\r\\n  datetime(2017-01-08T21:00), 8,\\r\\n  datetime(2017-01-09), 2,\\r\\n  datetime(2017-01-09T12:00), 11,\\r\\n  datetime(2017-01-10T05:00), 5,\\r\\n];\\r\\nlet interval = 1d;\\r\\nlet stime = datetime(2017-01-01);\\r\\nlet etime = datetime(2017-01-10);\\r\\ndata\\r\\n| make-series avg(metric) on timestamp from stime to etime step interval \\r\\n```\\r\\n\\r\\n|avg_metric|timestamp|\\r\\n|---|---|\\r\\n|[ 4.0, 3.0, 5.0, 0.0, 10.5, 4.0, 3.0, 8.0, 6.5 ]|[ \"2017-01-01T00:00:00.0000000Z\", \"2017-01-02T00:00:00.0000000Z\", \"2017-01-03T00:00:00.0000000Z\", \"2017-01-04T00:00:00.0000000Z\", \"2017-01-05T00:00:00.0000000Z\", \"2017-01-06T00:00:00.0000000Z\", \"2017-01-07T00:00:00.0000000Z\", \"2017-01-08T00:00:00.0000000Z\", \"2017-01-09T00:00:00.0000000Z\" ]|  \\r\\n\\r\\nWhen the input to `make-series` is empty, the default behavior of `make-series` produces an empty result.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA3WSwW6DMAyG7zyFjyDBZCeFMibeIrdph6y4E1oCFbg97eEXFLZJE5GiKPb3O7+V2LHAYMX22yb23XEuo+dVrL91IcdbVIJnWcZLBwtbV2SvGcAPyxVSU5GqNBlsOsSihBrLf4pzhRRWYKdjpALSx0inq7RBHS2bY0EdUJtAhnR32mopYdykjc/pdtu0ZWsUxXYTgueAVAIZUrGW6FBBaLDe37/M3l4yF752nISXh3XQAw0xtW5VIT76nqjglIIwKLZByb7AjX4UwHDy9pOrlZeRV7CPjzzOSgEDX+3dSU9PCPMEv2MF12X2exsy726r8O2v23DrZb5P8g2FvL+MngIAAA==\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nlet data=datatable(timestamp:datetime, metric: real)\\r\\n[\\r\\n  datetime(2016-12-31T06:00), 50,\\r\\n  datetime(2017-01-01), 4,\\r\\n  datetime(2017-01-02), 3,\\r\\n  datetime(2017-01-03), 4,\\r\\n  datetime(2017-01-03T03:00), 6,\\r\\n  datetime(2017-01-05), 8,\\r\\n  datetime(2017-01-05T13:40), 13,\\r\\n  datetime(2017-01-06), 4,\\r\\n  datetime(2017-01-07), 3,\\r\\n  datetime(2017-01-08), 8,\\r\\n  datetime(2017-01-08T21:00), 8,\\r\\n  datetime(2017-01-09), 2,\\r\\n  datetime(2017-01-09T12:00), 11,\\r\\n  datetime(2017-01-10T05:00), 5,\\r\\n];\\r\\nlet interval = 1d;\\r\\nlet stime = datetime(2017-01-01);\\r\\nlet etime = datetime(2017-01-10);\\r\\ndata\\r\\n| take 0\\r\\n| make-series avg(metric) default=1.0 on timestamp from stime to etime step interval \\r\\n| count \\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|Count|\\r\\n|---|\\r\\n|0|\\r\\n\\r\\nUsing `kind=nonempty` in `make-series` will produce a non-empty result of the default values:\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA3WSwWqEMBCG7z7FHFfQMmNW11p8i9xKD2mdLWETFZ0uFPrwjcTuoRgIITPfP/xDZhwLDEZMv11i3h2fxHpexfi5CzneogI8y2I/OljYuDx7zQD+2KlCakqqSkUamw4xL6DG4p/iUiKFE9j5GFUBqWOk0lVKo4qWzbGgDqhNIE2qO2+1lDBu0saXdLtt2rLVFcV2E4LngKoE0lTFWqJDBaHGev//Int7yVwYrR2Fl7tx0AMNMbVuVSE+Gk9UcEpBGBTbomQ/4Ky3Ahhe3ty4XHmxvMLNjkM/TiP7Wb7B3D9PcXNyGPhqvpz09IQwjfBYMrguk9+bkmn3XoXnR++/5AUDOqMCAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nlet data=datatable(timestamp:datetime, metric: real)\\r\\n[\\r\\n  datetime(2016-12-31T06:00), 50,\\r\\n  datetime(2017-01-01), 4,\\r\\n  datetime(2017-01-02), 3,\\r\\n  datetime(2017-01-03), 4,\\r\\n  datetime(2017-01-03T03:00), 6,\\r\\n  datetime(2017-01-05), 8,\\r\\n  datetime(2017-01-05T13:40), 13,\\r\\n  datetime(2017-01-06), 4,\\r\\n  datetime(2017-01-07), 3,\\r\\n  datetime(2017-01-08), 8,\\r\\n  datetime(2017-01-08T21:00), 8,\\r\\n  datetime(2017-01-09), 2,\\r\\n  datetime(2017-01-09T12:00), 11,\\r\\n  datetime(2017-01-10T05:00), 5,\\r\\n];\\r\\nlet interval = 1d;\\r\\nlet stime = datetime(2017-01-01);\\r\\nlet etime = datetime(2017-01-10);\\r\\ndata\\r\\n| take 0\\r\\n| make-series kind=nonempty avg(metric) default=1.0 on timestamp from stime to etime step interval \\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|avg_metric|timestamp|\\r\\n|---|---|\\r\\n|[<br>  1.0,<br>  1.0,<br>  1.0,<br>  1.0,<br>  1.0,<br>  1.0,<br>  1.0,<br>  1.0,<br>  1.0<br>]|[<br>  \"2017-01-01T00:00:00.0000000Z\",<br>  \"2017-01-02T00:00:00.0000000Z\",<br>  \"2017-01-03T00:00:00.0000000Z\",<br>  \"2017-01-04T00:00:00.0000000Z\",<br>  \"2017-01-05T00:00:00.0000000Z\",<br>  \"2017-01-06T00:00:00.0000000Z\",<br>  \"2017-01-07T00:00:00.0000000Z\",<br>  \"2017-01-08T00:00:00.0000000Z\",<br>  \"2017-01-09T00:00:00.0000000Z\"<br>]|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/make-seriesoperator\",\"make-seriesoperator.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.OperatorToken,\"matches\",\"Filters a record set based on a case-sensitive regex value.\",\"For more information about other operators and to determine which operator is most appropriate for your query, see [datatype string operators](datatypes-string-operators.md).\\r\\n\\r\\n[!INCLUDE [performance-tip-note](../../includes/performance-tip-note.md)]\\r\\n\\r\\n## Syntax\\r\\n\\r\\n*T* `|` `where` *col* `matches` `regex` `(`*expression*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *T* | string | &check; | The tabular input whose records are to be filtered.|\\r\\n| *col* | string | &check; | The column by which to filter.|\\r\\n| *expression* | scalar | &check; | The expression used to filter.|\\r\\n\\r\\n## Returns\\r\\n\\r\\nRows in *T* for which the predicate is `true`.\",'> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAwsuyS/KdS1LzSsp5qpRKC7NzU0syqxKVUgFCcUn55fmldiCSQ1NhaRKheCSxJJUoMLyjNSiVAhPITexJDkjtVihKDU9tUJByVtPK1gJrgTJHAU7BUMDoERBUX5WanIJRLcOsgoA+5LANo0AAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nStormEvents\\r\\n| summarize event_count=count() by State\\r\\n| where State matches regex \"K.*S\"\\r\\n| where event_count > 10\\r\\n| project State, event_count\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|State|event_count|\\r\\n|-----|-----------|\\r\\n|KANSAS|3166|\\r\\n|ARKANSAS|1028|\\r\\n|LAKE SUPERIOR|34|\\r\\n|LAKE ST CLAIR|32|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/matches-regex-operator\",\"matches-regex-operator.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"materialize\",\"Captures the value of a tabular expression for the duration of the query execution so that it can be referenced multiple times by the query without recalculation.\",'## Syntax\\r\\n\\r\\n`materialize(`*expression*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *expression* | string | &check; | The tabular expression to be evaluated and cached during query execution.|\\r\\n\\r\\n## Remarks\\r\\n\\r\\nThe `materialize()` function is useful in the following scenarios:\\r\\n\\r\\n* To speed up queries that perform *heavy* calculations whose results are used multiple times in the query.\\r\\n* To evaluate a tabular expression only once and use it many times in a query. This is commonly required if the tabular expression is non-deterministic. For example, if the expression uses the `rand()` or the `dcount()` functions.\\r\\n\\r\\n> [!NOTE]\\r\\n> Materialize has a cache size limit of **5 GB**. This limit is per cluster node and is mutual for all queries running concurrently. If a query uses `materialize()` and the cache can\\'t hold any more data, the query will abort with an error.\\r\\n\\r\\n>[!TIP]\\r\\n> Another way to perform materialization of tabular expression is by using the `hint.materialized` flag\\r\\n> of the [as operator](asoperator.md) and [partition operator](partitionoperator.md). They all share a\\r\\n> single materialization cache.\\r\\n\\r\\n>[!TIP]\\r\\n>\\r\\n>* Push all possible operators that reduce the materialized data set and keep the semantics of the query. For example, use common filters on top of the same materialized expression.\\r\\n>* Use materialize with join or union when their operands have mutual subqueries that can be executed once. For example, join/union fork legs. See [example of using join operator](#examples-of-query-performance-improvement).\\r\\n>* Materialize can only be used in let statements if you give the cached result a name. See [example of using let statements](#examples-of-using-materialize)).\\r\\n\\r\\n## Examples of query performance improvement\\r\\n\\r\\nThe following example shows how `materialize()` can be used to improve performance of the query.\\r\\nThe expression `_detailed_data` is defined using `materialize()` function and therefore is calculated only once.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA2WPwQqDMAyG74LvkGMdstXz8Lj7QO/S2TAqtZUaxxx7+FUrOPXU8iffl0QjQSWRhNIoKylIQA6tIHRKaPVBVpB17e2Fhnr4Qj+0rXA+hxDltR0MsQQeIxTksTQUyrHD5BpHW3Uc/RtKS0LP0OLyJRa+q29CGqsMsK0qAWvWDnwTGhlG39HV/hFP9JcE3Snj/Mzhchg5sZ2zDdZ0WD/d65Zghsh2kPFpy13TDxDFARZQAQAA\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nlet _detailed_data = materialize(StormEvents | summarize Events=count() by State, EventType);\\r\\n_detailed_data\\r\\n| summarize TotalStateEvents=sum(Events) by State\\r\\n| join (_detailed_data) on State\\r\\n| extend EventPercentage = Events*100.0 / TotalStateEvents\\r\\n| project State, EventType, EventPercentage, Events\\r\\n| top 10 by EventPercentage\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|State|EventType|EventPercentage|Events|\\r\\n|---|---|---|---|\\r\\n|HAWAII WATERS|Waterspout|100|2|\\r\\n|LAKE ONTARIO|Marine Thunderstorm Wind|100|8|\\r\\n|GULF OF ALASKA|Waterspout|100|4|\\r\\n|ATLANTIC NORTH|Marine Thunderstorm Wind|95.2127659574468|179|\\r\\n|LAKE ERIE|Marine Thunderstorm Wind|92.5925925925926|25|\\r\\n|E PACIFIC|Waterspout|90|9|\\r\\n|LAKE MICHIGAN|Marine Thunderstorm Wind|85.1648351648352|155|\\r\\n|LAKE HURON|Marine Thunderstorm Wind|79.3650793650794|50|\\r\\n|GULF OF MEXICO|Marine Thunderstorm Wind|71.7504332755633|414|\\r\\n|HAWAII|High Surf|70.0218818380744|320|\\r\\n\\r\\nThe following example generates a set of random numbers and calculates:\\r\\n\\r\\n* How many distinct values in the set (`Dcount`)\\r\\n* The top three values in the set\\r\\n* The sum of all these values in the set\\r\\n\\r\\nThis operation can be done using [batches](batches.md) and materialize:\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA3WNQQqDMBBF94J3+Mu4M7gs2fUGniDVabEkToiT0hYP32gKQqF/k5nw5n1HgmjnkX2fJ4O6Qo63QnGybnqTKj9bMncjPHGN7KEhjK7dg0UoQB/kihD5ToPgYV2i7N06lC542zSnujpaVyzJextzG84Dp1nMuD9qv/6FhQM6XF7F/dfUJ2/y9nV8ADNWwIPoAAAA\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nlet randomSet = \\r\\n    materialize(\\r\\n        range x from 1 to 3000000 step 1\\r\\n        | project value = rand(10000000));\\r\\nrandomSet | summarize Dcount=dcount(value);\\r\\nrandomSet | top 3 by value;\\r\\nrandomSet | summarize Sum=sum(value)\\r\\n```\\r\\n\\r\\nResult set 1:  \\r\\n\\r\\n|Dcount|\\r\\n|---|\\r\\n|2578351|\\r\\n\\r\\nResult set 2:\\r\\n\\r\\n|value|\\r\\n|---|\\r\\n|9999998|\\r\\n|9999998|\\r\\n|9999997|\\r\\n\\r\\nResult set 3:\\r\\n\\r\\n|Sum|\\r\\n|---|\\r\\n|15002960543563|\\r\\n\\r\\n## Examples of using materialize()\\r\\n\\r\\n> [!TIP]\\r\\n> Materialize your column at ingestion time if most of your queries extract fields from dynamic objects across millions of rows.\\r\\n\\r\\nTo use the `let` statement with a value that you use more than once, use the [materialize() function](./materializefunction.md). Try to push all possible operators that will reduce the materialized data set and still keep the semantics of the query. For example, use filters, or project only required columns.\\r\\n\\r\\n```\\r\\n    let materializedData = materialize(Table\\r\\n    | where Timestamp > ago(1d));\\r\\n    union (materializedData\\r\\n    | where Text !has \"somestring\"\\r\\n    | summarize dcount(Resource1)), (materializedData\\r\\n    | where Text !has \"somestring\"\\r\\n    | summarize dcount(Resource2))\\r\\n```\\r\\n\\r\\nThe filter on `Text` is mutual and can be pushed to the materialize expression.\\r\\nThe query only needs columns `Timestamp`, `Text`, `Resource1`, and `Resource2`. Project these columns inside the materialized expression.\\r\\n\\r\\n```\\r\\n    let materializedData = materialize(Table\\r\\n    | where Timestamp > ago(1d)\\r\\n    | where Text !has \"somestring\"\\r\\n    | project Timestamp, Resource1, Resource2, Text);\\r\\n    union (materializedData\\r\\n    | summarize dcount(Resource1)), (materializedData\\r\\n    | summarize dcount(Resource2))\\r\\n```\\r\\n\\r\\nIf the filters aren\\'t identical, as in the following query:  \\r\\n\\r\\n```\\r\\n    let materializedData = materialize(Table\\r\\n    | where Timestamp > ago(1d));\\r\\n    union (materializedData\\r\\n    | where Text has \"String1\"\\r\\n    | summarize dcount(Resource1)), (materializedData\\r\\n    | where Text has \"String2\"\\r\\n    | summarize dcount(Resource2))\\r\\n ```\\r\\n\\r\\nWhen the combined filter reduces the materialized result drastically, combine both filters on the materialized result by a logical `or` expression as in the following query. However, keep the filters in each union leg to preserve the semantics of the query.\\r\\n\\r\\n```\\r\\n    let materializedData = materialize(Table\\r\\n    | where Timestamp > ago(1d)\\r\\n    | where Text has \"String1\" or Text has \"String2\"\\r\\n    | project Timestamp, Resource1, Resource2, Text);\\r\\n    union (materializedData\\r\\n    | where Text has \"String1\"\\r\\n    | summarize dcount(Resource1)), (materializedData\\r\\n    | where Text has \"String2\"\\r\\n    | summarize dcount(Resource2))\\r\\n```',\"\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/materializefunction\",\"\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"materialized_view\",\"References the materialized part of a [materialized view](../management/materialized-views/materialized-view-overview.md).\",\"The `materialized_view()` function supports a way of querying the *materialized* part only of the view, while specifying the max latency the user is willing to tolerate. This option isn't guaranteed to return the most up-to-date records, but should always be more performant than querying the entire view. This function is useful for scenarios in which you're willing to sacrifice some freshness for performance, for example in telemetry dashboards.\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`materialized_view(`*ViewName*`,` [ *max_age* ] `)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *ViewName*| string| &check;| The name of the materialized view.|\\r\\n| *max_age*| int || If not provided, only the *materialized* part of the view is returned. If provided, the function will return the _materialized_ part of the view if last materialization time is greater than `@now -  max_age`. Otherwise, the entire view is returned, which is identical to querying *ViewName* directly.\",'Query the *materialized* part of the view only, independent on when it was last materialized.\\r\\n\\r\\n```\\r\\nmaterialized_view(\"ViewName\")\\r\\n```\\r\\n\\r\\nQuery the *materialized* part only if it was materialized in the last 10 minutes. If the materialized part is older than 10 minutes, return the full view. This option is expected to be less performant than querying the materialized part.\\r\\n\\r\\n```\\r\\nmaterialized_view(\"ViewName\", 10m)\\r\\n```\\r\\n\\r\\n## Notes\\r\\n\\r\\n* Once a view is created, it can be queried just as any other table in the database, including participate in cross-cluster / cross-database queries.\\r\\n* Materialized views aren\\'t included in wildcard unions or searches.\\r\\n* Syntax for querying the view is the view name (like a table reference).\\r\\n* Querying the materialized view will always return the most up-to-date results, based on all records ingested to the source table. The query combines the materialized part of the view with all unmaterialized records in the source table. For more information, see [how materialized views work](../management/materialized-views/materialized-view-overview.md#how-materialized-views-work) for details.',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/materialized-view-function\",\"materialized-view-function.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"max\",\"Finds the maximum value the expression in the group.\",\"[!INCLUDE [data-explorer-agg-function-summarize-note](../../includes/data-explorer-agg-function-summarize-note.md)]\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`max(`*expr*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *expr* | string | &check; | The expression used for the aggregation calculation. |\\r\\n\\r\\n## Returns\\r\\n\\r\\nReturns the maximum value of *expr* across the group.\\r\\n\\r\\n> [!TIP]\\r\\n> This gives you the max on its own. If you want to see other columns in addition to the max, use [arg_max](arg-max-aggfunction.md).\",'This example returns the last record in a table.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAwsuyS/KdS1LzSsp5uWqUSguzc1NLMqsSlXwSSxJLS4By9jmJlZoBJckFpWEZOamagIADGp6XTMAAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nStormEvents\\r\\n| summarize LatestEvent=max(StartTime)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n| LatestEvent |\\r\\n|--|\\r\\n| 2007-12-31T23:53:00Z |',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/max-aggfunction\",\"max-aggfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"max_of\",\"Returns the maximum value of all argument expressions.\",\"## Syntax\\r\\n\\r\\n`max_of(`*arg*`,` *arg_2*`,` [ *arg_3*`,` ... ]`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n|*arg_i* | scalar | &check; | The values to compare.|\\r\\n\\r\\n* All arguments must be of the same type.\\r\\n* Maximum of 64 arguments is supported.\\r\\n* Non-null values take precedence to null values.\\r\\n\\r\\n## Returns\\r\\n\\r\\nThe maximum value of all argument expressions.\",'### Find the largest number\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAysoyswrUShKLS7NKVGwVchNrIjPT9MwNNBRMNRR0DUGUuaaADn0q08kAAAA\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint result = max_of(10, 1, -3, 17) \\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|result|\\r\\n|---|\\r\\n|17|\\r\\n\\r\\n### Find the maximum value in a data-table\\r\\n\\r\\nNotice that non-null values take precedence over null values.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA0tJLAHCpJxUBQ1HK4XMvBIdBScwrcnLFc3LpQAEhjoKZjoQpoUOkAdhApVo5JXm5GjqKBjpwBUiRDFUwZm8XLG8XDUKBUX5WanJJQq5iRXx+WkajkCLNQGMk9JIjgAAAA==\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\ndatatable (A: int, B: int)\\r\\n[\\r\\n    1, 6,\\r\\n    8, 1,\\r\\n    int(null), 2,\\r\\n    1, int(null),\\r\\n    int(null), int(null)\\r\\n]\\r\\n| project max_of(A, B)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|result|\\r\\n|---|\\r\\n|6|\\r\\n|8|\\r\\n|2|\\r\\n|1|\\r\\n|(null)|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/max-offunction\",\"max-offunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"maxif\",\"Calculates the maximum value of *expr* in records for which *predicate* evaluates to `true`.\",\"[!INCLUDE [data-explorer-agg-function-summarize-note](../../includes/data-explorer-agg-function-summarize-note.md)]\\r\\n\\r\\nSee also - [max()](max-aggfunction.md) function, which returns the maximum value across the group without predicate expression.\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`maxif(`*expr*`,`*predicate*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *expr* | string | &check; | The expression used for the aggregation calculation. |\\r\\n| *predicate* | string | &check; | The expression used to filter rows. |\\r\\n\\r\\n## Returns\\r\\n\\r\\nReturns the maximum value of *expr* in records for which *predicate* evaluates to `true`.\",'This example shows the maximum damage for events with no casualties.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAzWMPQ7CMAxGdyTu4BEEAxfw1DAwgJB6AkMNRMIJsl2UIg4PbWB6+n70Ws8q2ycnt/nsDVycUweBhK6MFY3mh8HqVx6/idWHNQQmvxlWhKh89vE1xV3qpmJ0Wi9CGl8MeypVcsgNWU93j2woVOJlUYe/FRBhs4TTAK2T8wcBsgcBpgAAAA==\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nStormEvents\\r\\n| extend Damage=DamageCrops + DamageProperty, Deaths=DeathsDirect + DeathsIndirect\\r\\n| summarize MaxDamageNoCasualties=maxif(Damage, Deaths == 0) by State\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\nThe results table shown includes only the first 10 rows.\\r\\n\\r\\n| State                | MaxDamageNoCasualties |\\r\\n| -------------------- | --------------------- |\\r\\n| TEXAS                | 25000000              |\\r\\n| KANSAS               | 37500000              |\\r\\n| IOWA                 | 15000000              |\\r\\n| ILLINOIS             | 5000000               |\\r\\n| MISSOURI             | 500005000             |\\r\\n| GEORGIA              | 344000000             |\\r\\n| MINNESOTA            | 38390000              |\\r\\n| WISCONSIN            | 45000000              |\\r\\n| NEBRASKA             | 4000000               |\\r\\n| NEW YORK             | 26000000              |\\r\\n| ... | ... |',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/maxif-aggfunction\",\"maxif-aggfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"merge_tdigest\",\"Merges `tdigest` results (scalar version of the aggregate version [`tdigest_merge()`](tdigest-merge-aggfunction.md)).\",\"Read more about the underlying algorithm (T-Digest) and the estimated error [here](percentiles-aggfunction.md#estimation-error-in-percentiles).\\r\\n\\r\\n> The `merge_tdigest()` and `tdigest_merge()` functions are equivalent\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`merge_tdigest(`*exprs*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *exprs* | dynamic | &check; | One or more comma-separated column references that have the `tdigest` values to be merged. |\\r\\n\\r\\n## Returns\\r\\n\\r\\nThe result for merging the columns `*Expr1*`, `*Expr2*`, ... `*ExprN*` to one `tdigest`.\",'> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA02OSwrDMBBD9z3FLG2aRXKA3qNdhZAoxiX+YE/BDj18h7Ym2Wmk0UNp8gZUaE3B0UAcaOgpM6IclzehMPxClW7yc5VMvPxybkp2B/FiDTLfJf1LVXTX9ONkVy3FmMITM5NDMliOdPwaqtEOwLkUkWZ4thvGBv1xOlnVS6dGhFVtwRutP5Qlo27WAAAA\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nrange x from 1 to 10 step 1 \\r\\n| extend y = x + 10\\r\\n| summarize tdigestX = tdigest(x), tdigestY = tdigest(y)\\r\\n| project merged = merge_tdigest(tdigestX, tdigestY)\\r\\n| project percentile_tdigest(merged, 100, typeof(long))\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|percentile_tdigest_merged|\\r\\n|---|\\r\\n|20|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/merge-tdigest-function\",\"merge-tdigest-function.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"min\",\"Finds the minimum value across the group.\",\"[!INCLUDE [data-explorer-agg-function-summarize-note](../../includes/data-explorer-agg-function-summarize-note.md)]\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`min` `(`*expr*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *expr* | string | &check; | The expression used for the minimum value aggregation calculation. |\\r\\n\\r\\n## Returns\\r\\n\\r\\nReturns the minimum value of *expr* across the group.\\r\\n\\r\\n> [!TIP]\\r\\n> This gives you the min on its own. If you want to see other columns in addition to the min, use [arg_min](arg-min-aggfunction.md).\",'This example returns the first record in a table.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAwsuyS/KdS1LzSsp5qpRKC7NzU0syqxKVXDLLCouAYvb5mbmaQSXJBaVhGTmpmoCAMaAOl8xAAAA\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nStormEvents\\r\\n| summarize FirstEvent=min(StartTime)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n| FirstEvent |\\r\\n|--|\\r\\n| 2007-01-01T00:00:00Z |',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/min-aggfunction\",\"min-aggfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"min_of\",\"Returns the minimum value of several evaluated scalar expressions.\",\"## Syntax\\r\\n\\r\\n`min_of` `(`*arg*`,` *arg_2*`,` [ *arg_3*, ... ]`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *arg*, *arg_2*, ... | scalar | &check; | A comma separated list of 2-64 scalar expressions to compare. The function returns the minimum value among these expressions.|\\r\\n\\r\\n* All arguments must be of the same type.\\r\\n* Maximum of 64 arguments is supported.\\r\\n* Non-null values take precedence to null values.\\r\\n\\r\\n## Returns\\r\\n\\r\\nThe minimum value of all argument expressions.\",'Find the maximum value in an array:\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAysoyswrUShKLS7NKbHNzcyLz0/TMDTQUTDUUdA1BlLmmgCoI/wyIgAAAA==\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint result=min_of(10, 1, -3, 17) \\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|result|\\r\\n|---|\\r\\n|-3|\\r\\n\\r\\nFind the minimum value in a data-table. Non-null values take precedence over null values:\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA0tJLAHCpJxUBQ1HK4XMvBIdBScwrckVzaUABKY6CkY6YJahgY6CIYQJlNfIK83J0dRRMIZK6iAJoquBM7liuWoUCorys1KTSxRyM/Pi89M0HIE2agIA226WNIcAAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\ndatatable (A: int, B: int)\\r\\n[\\r\\n    5, 2,\\r\\n    10, 1,\\r\\n    int(null), 3,\\r\\n    1, int(null),\\r\\n    int(null), int(null)\\r\\n]\\r\\n| project min_of(A, B)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|result|\\r\\n|---|\\r\\n|2|\\r\\n|1|\\r\\n|3|\\r\\n|1|\\r\\n|(null)|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/min-offunction\",\"min-offunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"minif\",\"Returns the minimum of *Expr* in records for which *Predicate* evaluates to `true`.\",\"* Can be used only in context of aggregation inside [summarize](summarizeoperator.md)\\r\\n\\r\\nSee also - [min()](min-aggfunction.md) function, which returns the minimum value across the group without predicate expression.\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`minif` `(`*Expr*`,`*Predicate*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *Expr* | string | &check; | Expression that will be used for aggregation calculation. |\\r\\n| *Predicate* | string | &check; | Expression that will be used to filter rows. |\\r\\n\\r\\n## Returns\\r\\n\\r\\nThe minimum value of *Expr* in records for which *Predicate* evaluates to `true`.\",'This example shows the minimum damage for events with casualties (Except 0)\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA3WOsQ6CUAxFd7+iIwQGfwAXcHAwMWFwrlKlCa+Y16Ji/Hif1NXp3tvenrS1MYbtncR09QZ6GkkHDQa8UuVSx/GmhftD8hRtLqEhtF4rl4Yjna3wsJNuiQmnUwgY+UWwZ3HCka2vUSccjEmrwMKXzFdl5gDYrHPA9MZv/s05nGZoDY0gcR89xb/MVF+uWWU0mYYh+1PMPyFcEcH8AAAA\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nStormEvents\\r\\n| extend Damage=DamageCrops+DamageProperty, Deaths=DeathsDirect+DeathsIndirect\\r\\n| summarize MinDamageWithCasualties=minif(Damage,(Deaths >0) and (Damage >0)) by State \\r\\n| where MinDamageWithCasualties >0 and isnotnull(MinDamageWithCasualties)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\nThe results table shown includes only the first 10 rows.\\r\\n\\r\\n| State          | MinDamageWithCasualties |\\r\\n| -------------- | ----------------------- |\\r\\n| TEXAS          | 8000                    |\\r\\n| KANSAS         | 5000                    |\\r\\n| IOWA           | 45000                   |\\r\\n| ILLINOIS       | 100000                  |\\r\\n| MISSOURI       | 10000                   |\\r\\n| GEORGIA        | 500000                  |\\r\\n| MINNESOTA      | 200000                  |\\r\\n| WISCONSIN      | 10000                   |\\r\\n| NEW YORK       | 25000                   |\\r\\n| NORTH CAROLINA | 15000                   |\\r\\n| ... | ... |',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/minif-aggfunction\",\"minif-aggfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"monthofyear\",\"Returns the integer number from 1-12 representing the month number of the given year.\",\"> The `monthofyear()` and `getmonth()` functions are equivalent\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`monthofyear(`*date*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *date* | datetime | &check; | The date for which to find the month number. |\\r\\n\\r\\n## Returns\\r\\n\\r\\nAn integer from 1-12 representing the month number of the given year.\",'> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAysoyswrUShKLS7NKbHNzc8rychPq0xNLNJISSxJLcnMTdVQMjIwNNU1NNI1NFHS1AQAVHohRTAAAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint result=monthofyear(datetime(\"2015-12-14\"))\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|result|\\r\\n|--|\\r\\n|12|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/monthofyearfunction\",\"monthofyearfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.OperatorToken,\"mv-apply\",\"Applies a subquery to each record, and returns the union of the results of\\r\\nall subqueries.\",\"For example, assume a table `T` has a column `Metric` of type `dynamic`\\r\\nwhose values are arrays of `real` numbers. The following query will locate the\\r\\ntwo biggest values in each `Metric` value, and return the records corresponding\\r\\nto these values.\\r\\n\\r\\n```\\r\\nT | mv-apply Metric to typeof(real) on \\r\\n(\\r\\n   top 2 by Metric desc\\r\\n)\\r\\n```\\r\\n\\r\\nThe `mv-apply` operator has the following\\r\\nprocessing steps:\\r\\n\\r\\n1. Uses the [`mv-expand`](./mvexpandoperator.md) operator to expand each record in the input into subtables (order is preserved).\\r\\n1. Applies the subquery for each of the subtables.\\r\\n1. Adds zero or more columns to the resulting subtable. These columns contain the values of the source columns that aren't expanded, and are repeated where needed.\\r\\n1. Returns the union of the results.\\r\\n\\r\\nThe `mv-apply` operator gets the following inputs:\\r\\n\\r\\n1. One or more expressions that evaluate into dynamic arrays to expand.\\r\\n   The number of records in each expanded subtable is the maximum length of\\r\\n   each of those dynamic arrays. Null values are added where multiple expressions are specified and the corresponding arrays have different lengths.\\r\\n1. Optionally, the names to assign the values of the expressions after expansion.\\r\\n   These names become the columns names in the subtables.\\r\\n   If not specified, the original name of the column is used when the expression is a column reference. A random name is used otherwise.\\r\\n   > [!NOTE]\\r\\n   > It is recommended to use the default column names.\\r\\n1. The data types of the elements of those dynamic arrays, after expansion.\\r\\n   These become the column types of the columns in the subtables.\\r\\n   If not specified, `dynamic` is used.\\r\\n1. Optionally, the name of a column to add to the subtables that specifies the\\r\\n   0-based index of the element in the array that resulted in the subtable record.\\r\\n1. Optionally, the maximum number of array elements to expand.\\r\\n\\r\\nThe `mv-apply` operator can be thought of as a generalization of the\\r\\n[`mv-expand`](./mvexpandoperator.md) operator (in fact, the latter can be implemented\\r\\nby the former, if the subquery includes only projections.)\\r\\n\\r\\n## Syntax\\r\\n\\r\\n*T* `|` `mv-apply` [*ItemIndex*] *ColumnsToExpand* [*RowLimit*] `on` `(` *SubQuery* `)`\\r\\n\\r\\nWhere *ItemIndex* has the syntax:\\r\\n\\r\\n`with_itemindex` `=` *IndexColumnName*\\r\\n\\r\\n*ColumnsToExpand* is a comma-separated list of one or more elements of the form:\\r\\n\\r\\n[*Name* `=`] *ArrayExpression* [`to` `typeof` `(`*Typename*`)`]\\r\\n\\r\\n*RowLimit* is simply:\\r\\n\\r\\n`limit` *RowLimit*\\r\\n\\r\\nand *SubQuery* has the same syntax of any query statement.\\r\\n\\r\\n## Parameters\\r\\n\\r\\n|Name|Type|Required|Description|\\r\\n|--|--|--|--|\\r\\n|*ItemIndex*|string||Indicates the name of a column of type `long` that's appended to the input as part of the array-expansion phase and indicates the 0-based array index of the expanded value.|\\r\\n|*Name*|string||The name to assign the array-expanded values of each array-expanded expression. If not specified, the name of the column will be used if available. A random name is generated if *ArrayExpression* isn't a simple column name.|\\r\\n|*ArrayExpression*|dynamic|&check;|The array whose values will be array-expanded. If the expression is the name of a column in the input, the input column is removed from the input and a new column of the same name, or *ColumnName* if specified, appears in the output.|\\r\\n|*Typename*|string||The name of the type that the individual elements of the `dynamic` array *ArrayExpression* take. Elements that don't conform to this type will be replaced by a null value. If unspecified, `dynamic` is used by default.|\\r\\n|*RowLimit*|int||A limit on the number of records to generate from each record of the input. If unspecified, 2147483647 is used.|\\r\\n|*SubQuery*|string||A tabular query expression with an implicit tabular source that gets applied to each array-expanded subtable.|\\r\\n\\r\\n>[!NOTE]\\r\\n> Unlike the [`mv-expand`](./mvexpandoperator.md) operator, the `mv-apply` operator doesn't support `bagexpand=array` expansion. If the expression to be expanded is a property bag and not an array, you can use an inner `mv-expand` operator (see example below).\",'### Getting the largest element from the array\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAy2NsQrDMBBD93yFlkIydEimQvEn9BuCSy4h9M5nkmuxSz6+jqkGDRJ6YjKMkzcP16Bo82EhJMybCnqY4obdKKKv9YH9LeK39UtgJ/5FI6+7tanDMyM9dBrgyvyC4d5UbnNAPlcfI2cQk1AwxyfXciSdW9awdNCAym+rm5a/E/gf1LD7ASAFbUCrAAAA\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nlet _data =\\r\\n    range x from 1 to 8 step 1\\r\\n    | summarize l=make_list(x) by xMod2 = x % 2;\\r\\n_data\\r\\n| mv-apply element=l to typeof(long) on \\r\\n    (\\r\\n    top 1 by element\\r\\n    )\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|`xMod2`|l           |element|\\r\\n|-----|------------|-------|\\r\\n|1    |[1, 3, 5, 7]|7      |\\r\\n|0    |[2, 4, 6, 8]|8      |\\r\\n\\r\\n### Calculating the sum of the largest two elements in an array\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA2WNsQ7CMBBD936FF6RkYGgmJJRPQAywV0FNq4pLLmqvKEH9eNqsePBw9j2TF3S9EwfbYNfs4uiRMcwc0EIYFyziE9oab1jWENw8fT3IBvf2HU2LqKzxKsg37g3s/n6CuTaV22wIn7NLiQro4ElJngdFHEcNjhWrqgsnmINDf1uPNdyHJydj95siXQv6B6sP8Fq9AAAA\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nlet _data =\\r\\n    range x from 1 to 8 step 1\\r\\n    | summarize l=make_list(x) by xMod2 = x % 2;\\r\\n_data\\r\\n| mv-apply l to typeof(long) on\\r\\n    (\\r\\n    top 2 by l\\r\\n    | summarize SumOfTop2=sum(l)\\r\\n    )\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|`xMod2`|l        |SumOfTop2|\\r\\n|-----|---------|---------|\\r\\n|1    |[1,3,5,7]|12       |\\r\\n|0    |[2,4,6,8]|14       |\\r\\n\\r\\n### Using `with_itemindex` for working with a subset of the array\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAzVOS27CMBDd5xRvU5FIRRC6rMwNOENkkoG4tT2WMyEJ4vCEQcziLeZ9PQmazoqFKbBetvFKmHHJHFBDGPUeg1BCrfwDwxiCze5O8CbYf2q8G6ScK5wXzCfuDjCr/wuH30KDiwfCbWtT8gsmJ33jhIKLHc1GEeQpUBTjX22yJOJL6TleK3CElpaKux16yoSFR/T2Rtiof4OW/RiiaiZVvHOPBj/6rNYJKfMftfKmvj+dT34iokT+AAAA\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nlet _data =\\r\\n    range x from 1 to 10 step 1\\r\\n    | summarize l=make_list(x) by xMod2 = x % 2;\\r\\n_data\\r\\n| mv-apply with_itemindex=index element=l to typeof(long) on \\r\\n    (\\r\\n    // here you have \\'index\\' column\\r\\n    where index >= 3\\r\\n    )\\r\\n| project index, element\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|index|element|\\r\\n|---|---|\\r\\n|3|7|\\r\\n|4|9|\\r\\n|3|8|\\r\\n|4|10|\\r\\n\\r\\n### Using mutiple columns to join element of 2 arrays\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA12OPQuDMBCG9/yKo0sSsIMpXYQOfuzduohIqhlCEysaSy3++KaXtog5CLwf93CtdH6uRgG7SJOA7lwE6TDECbRzJ61uUIq/5KQk4F8c/RxW0jSmEdBU4H+gFV+HGYYZhlkIkXBcl3Is5WKzW6BdfGxSAVnAPvay782MN4bT4N4BQ6J6OtW1cJ4cnGB0QyMdC71dvQtljsUFxslaOeiXQpCvW3lTtdFj2OBf9MYX3vf0tetlYPI3W/swT0sBAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\ndatatable (Val: int, Arr1: dynamic, Arr2: dynamic)\\r\\n[\\r\\n    1, dynamic([\\'A1\\', \\'A2\\', \\'A3\\']), dynamic([\\'B1\\', \\'B2\\', \\'B3\\']), \\r\\n    5, dynamic([\\'C1\\', \\'C2\\']), dynamic([\\'D1\\', \\'D2\\'])\\r\\n] \\r\\n| mv-apply Arr1, Arr2 on (\\r\\n    extend Out = strcat(Arr1, \"_\", Arr2)\\r\\n    | summarize Arr1 = make_list(Arr1), Arr2 = make_list(Arr2), Out= make_list(Out)\\r\\n    )\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|Val|Arr1|Arr2|`Out`|\\r\\n|---|---|---|---|\\r\\n|1|[\"A1\",\"A2\",\"A3\"]|[\"B1\",\"B2\",\"B3\"]|[\"A1_B1\",\"A2_B2\",\"A3_B3\"]|\\r\\n|5|[\"C1\",\"C2\"]|[\"D1\",\"D2\"]|[\"C1_D1\",\"C2_D2\"]|\\r\\n\\r\\n### Applying mv-apply to a property bag\\r\\n\\r\\nIn the following example, `mv-apply` is used in combination with an\\r\\ninner `mv-expand` to remove values that don\\'t start with \"555\" from a property bag:\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA21PwW6DMAy98xVeL4BEpdG1O1Tqqfdp2nqrEDLUooyQICdAmfrxczMOa7VEtuSX955fTujkFoqiT9NzSW99WxBvwTqudZXAAbki94juz8h2b3rttqCMruLgGICccLPZLG+Vrl7WYfJ3Tlcyr1+TR57HQ6lau0j3SsVBFlyBLo70CQZUPVnYQYdlk6NSUSyP7bDErlMTMLVmoHc2HbGrPXFWGA1+U+S7COjSoRg2tbQdIDNOM9czrjCeiWmGjmkGT9YhOzvW7gwLybqYebZvW+T6m6CTvfZgPnwIMW2xodySi2aT5yz2mvif/xRY5b/p84YmO0uSe8+bUIAvKt0SRwl89/oDn62shLsBAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\ndatatable(SourceNumber: string, TargetNumber: string, CharsCount: long)\\r\\n[\\r\\n    \\'555-555-1234\\', \\'555-555-1212\\', 46,\\r\\n    \\'555-555-1212\\', \\'\\', int(null)\\r\\n]\\r\\n| extend values = pack_all()\\r\\n| mv-apply removeProperties = values on \\r\\n    (\\r\\n    mv-expand kind = array values\\r\\n    | where values[1] !startswith \"555\"\\r\\n    | summarize propsToRemove = make_set(values[0])\\r\\n    )\\r\\n| extend values = bag_remove_keys(values, propsToRemove)\\r\\n| project-away propsToRemove\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|SourceNumber|TargetNumber|CharsCount|values\\r\\n|---|---|---|---|\\r\\n|555-555-1234|555-555-1212|46|{<br> \"SourceNumber\": \"555-555-1234\",<br>   \"TargetNumber\": \"555-555-1212\"<br> }|\\r\\n|555-555-1212|&nbsp;|&nbsp;|{<br> \"SourceNumber\": \"555-555-1212\"<br> }|\\r\\n\\r\\n## See also\\r\\n\\r\\n* [mv-expand](./mvexpandoperator.md) operator',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/mv-applyoperator\",\"mv-applyoperator.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.OperatorToken,\"mv-expand\",\"Expands multi-value dynamic arrays or property bags into multiple records.\",\"`mv-expand` can be described as the opposite of the aggregation operators\\r\\nthat pack multiple values into a single [dynamic](./scalar-data-types/dynamic.md)-typed\\r\\narray or property bag, such as `summarize` ... `make-list()` and `make-series`.\\r\\nEach element in the (scalar) array or property bag generates a new record in the\\r\\noutput of the operator. All columns of the input that aren't expanded are duplicated to all the records in the output.\\r\\n\\r\\n## Syntax\\r\\n\\r\\n*T* `|mv-expand` [`bagexpansion=`(`bag` | `array`)] [`with_itemindex=` *IndexColumnName*] *ColumnName* [`to typeof(` *Typename*`)`] [`,` *ColumnName* ...] [`limit` *Rowlimit*]\\r\\n\\r\\n*T* `|mv-expand` [`bagexpansion=`(`bag` | `array`)] [*Name* `=`] *ArrayExpression* [`to typeof(`*Typename*`)`] [`,` [*Name* `=`] *ArrayExpression* [`to typeof(`*Typename*`)`] ...] [`limit` *Rowlimit*]\\r\\n\\r\\n## Parameters\\r\\n\\r\\n|Name|Type|Required|Description|\\r\\n|--|--|--|--|\\r\\n|*ColumnName*, *ArrayExpression*|string|&check;|A column reference, or a scalar expression with a value of type `dynamic` that holds an array or a property bag. The individual top-level elements of the array or property bag get expanded into multiple records.<br>When *ArrayExpression* is used and *Name* doesn't equal any input column name, the expanded value is extended into a new column in the output. Otherwise, the existing *ColumnName* is replaced.|\\r\\n|*Name*|string| |A name for the new column.|\\r\\n|*Typename*|string|&check;|Indicates the underlying type of the array's elements, which becomes the type of the column produced by the `mv-expand` operator. The operation of applying type is cast-only and doesn't include parsing or type-conversion. Array elements that don't conform with the declared type become `null` values.|\\r\\n|*RowLimit*|int||The maximum number of rows generated from each original row. The default is 2147483647. `mvexpand` is a legacy and obsolete form of the operator `mv-expand`. The legacy version has a default row limit of 128.|\\r\\n|*IndexColumnName*|string||If `with_itemindex` is specified, the output includes another column named *IndexColumnName* that contains the index starting at 0 of the item in the original expanded collection.|\\r\\n\\r\\n## Returns\\r\\n\\r\\nFor each record in the input, the operator returns zero, one, or many records in the output,\\r\\nas determined in the following way:\\r\\n\\r\\n1. Input columns that aren't expanded appear in the output with their original value.\\r\\n   If a single input record is expanded into multiple output records, the value is duplicated\\r\\n   to all records.\\r\\n1. For each *ColumnName* or *ArrayExpression* that is expanded, the number of output records\\r\\n   is determined for each value as explained in [modes of expansion](#modes-of-expansion). For each input record, the maximum number of output records is calculated. All arrays or property bags are expanded \\\"in parallel\\\"\\r\\n   so that missing values (if any) are replaced by null values. Elements are expanded into rows in the order that they appear in the original array/bag.\\r\\n1. If the dynamic value is null, then a single record is produced for that value (null).\\r\\n   If the dynamic value is an empty array or property bag, no record is produced for that value.\\r\\n   Otherwise, as many records are produced as there are elements in the dynamic value.\\r\\n\\r\\nThe expanded columns are of type `dynamic`, unless they're explicitly typed\\r\\nby using the `to typeof()` clause.\\r\\n\\r\\n### Modes of expansion\\r\\n\\r\\nTwo modes of property bag expansions are supported:\\r\\n\\r\\n* `bagexpansion=bag` or `kind=bag`: Property bags are expanded into single-entry property bags. This mode is the default mode.\\r\\n* `bagexpansion=array` or `kind=array`: Property bags are expanded into two-element `[`*key*`,`*value*`]` array structures, allowing uniform access to keys and values. This mode also allows, for example, running a distinct-count aggregation over property names.\",'### Single column - array expansion\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA0tJLAHCpJxUBY1EK4XMvBIdhSQrhZTKvMTczGRNXq5oXi4FIDDUgYlpRBsa6CgYGcRq6kCkjJCk1BPVdRTUk9RjgTpjeblqFHLLdFMrChLzUhSSANALFPlqAAAA\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\ndatatable (a: int, b: dynamic)\\r\\n[\\r\\n    1, dynamic([10, 20]),\\r\\n    2, dynamic([\\'a\\', \\'b\\'])\\r\\n]\\r\\n| mv-expand b\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|a|b|\\r\\n|---|---|\\r\\n|1|10|\\r\\n|1|20|\\r\\n|2|a|\\r\\n|2|b|\\r\\n\\r\\n### Single column - bag expansion\\r\\n\\r\\nA simple expansion of a single column:\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA0tJLAHCpJxUBY1EK4XMvBIdhSQrhZTKvMTczGRNXq5oXi4FIDDUgYlpVCsVFOUXGCpZKSglGirpKIC5RiBukqFSraYORIMRdg1GqBqMgBp4uWJ5uWoUcst0UysKEvNSFJIAxNVM3ZQAAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\ndatatable (a: int, b: dynamic)\\r\\n[\\r\\n    1, dynamic({\"prop1\": \"a1\", \"prop2\": \"b1\"}),\\r\\n    2, dynamic({\"prop1\": \"a2\", \"prop2\": \"b2\"})\\r\\n]\\r\\n| mv-expand b\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|a|b|\\r\\n|---|---|\\r\\n|1|{\"prop1\": \"a1\"}|\\r\\n|1|{\"prop2\": \"b1\"}|\\r\\n|2|{\"prop1\": \"a2\"}|\\r\\n|2|{\"prop2\": \"b2\"}|\\r\\n\\r\\n### Single column - bag expansion to key-value pairs\\r\\n\\r\\nA simple bag expansion to key-value pairs:\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA22LwQqDMBBE74H8w5CTQgpNjoJfEjzsNqFINUoqYmj7742WHgqduczM7vO0FPMQUFGDPi4a3MDnSGN/qaVwUqDI6O9WPdScptmoBoqM0jiq3Ssb9ar1B7D/AfsL2AJI0UnxxLiewjZT9GC6HuneT7GllCiDsb+EbQnlfgsZLdidO42Vhpad6d7eMsidxwAAAA==\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\ndatatable (a: int, b: dynamic)\\r\\n[\\r\\n    1, dynamic({\"prop1\": \"a1\", \"prop2\": \"b1\"}),\\r\\n    2, dynamic({\"prop1\": \"a2\", \"prop2\": \"b2\"})\\r\\n]\\r\\n| mv-expand bagexpansion=array b \\r\\n| extend key = b[0], val=b[1]\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|a|b|key|val|\\r\\n|---|---|---|---|\\r\\n|1|[\"prop1\",\"a1\"]|prop1|a1|\\r\\n|1|[\"prop2\",\"b1\"]|prop2|b1|\\r\\n|2|[\"prop1\",\"a2\"]|prop1|a2|\\r\\n|2|[\"prop2\",\"b2\"]|prop2|b2|\\r\\n\\r\\n### Zipped two columns\\r\\n\\r\\nExpanding two columns will first \\'zip\\' the applicable columns and then expand them:\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA0tJLAHCpJxUBY1EK4XMvBIdhSQrhZTKvMTczGQdhWQ4WzOal0sBCAx1YCIa1UoFRfkFhkpWCkqJSjoKYJ4RiJekVKuJUBZtqqNgoqNgHKvJyxXLy1WjkFumm1pRkJiXopAEtAEANvW+roIAAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\ndatatable (a: int, b: dynamic, c: dynamic)[\\r\\n    1, dynamic({\"prop1\": \"a\", \"prop2\": \"b\"}), dynamic([5, 4, 3])\\r\\n]\\r\\n| mv-expand b, c\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|a|b|c|\\r\\n|---|---|---|\\r\\n|1|{\"prop1\":\"a\"}|5|\\r\\n|1|{\"prop2\":\"b\"}|4|\\r\\n|1||3|\\r\\n\\r\\n### Cartesian product of two columns\\r\\n\\r\\nIf you want to get a Cartesian product of expanding two columns, expand one after the other:\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA0tJLAHCpJxUBY1EK4XMvBIdhSQrhZTKvMTczGQdhWQ4W5OXK5qXSwEIDHVgYhrVSgVF+QWGSlYKSolKOgpgnhGIl6RUq4lQFm2qo2AWCzQhlperRiG3TDe1oiAxL0UhCZWbDACXJubPjQAAAA==\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\ndatatable (a: int, b: dynamic, c: dynamic)\\r\\n[\\r\\n    1, dynamic({\"prop1\": \"a\", \"prop2\": \"b\"}), dynamic([5, 6])\\r\\n]\\r\\n| mv-expand b\\r\\n| mv-expand c\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|a|b|c|\\r\\n|---|---|---|\\r\\n|1|{  \"prop1\": \"a\"}|5|\\r\\n|1|{  \"prop1\": \"a\"}|6|\\r\\n|1|{  \"prop2\": \"b\"}|5|\\r\\n|1|{  \"prop2\": \"b\"}|6|\\r\\n\\r\\n### Convert output\\r\\n\\r\\nTo force the output of an mv-expand to a certain type (default is dynamic), use `to typeof`:\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA02MuwoCMRRE+4X8w7BVAtfCBz629TOWFHm5BkyymIu44McbC8WZZjgzjDfcbG8B0gyofI95ItgBfskmRUdwv6xG0aGpP5dc2WTu6VvJcU3YELaEnVZ/eE84EI6Ek1ai06J7IT1W4Tmb7GHbO7iAlzmUi4yZ1WcwBa7uGpJ5A3+651CdAAAA\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\ndatatable (a: string, b: dynamic, c: dynamic)[\\r\\n    \"Constant\", dynamic([1, 2, 3, 4]), dynamic([6, 7, 8, 9])\\r\\n]\\r\\n| mv-expand b, c to typeof(int)\\r\\n| getschema \\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n| ColumnName | ColumnOrdinal | DateType | ColumnType |\\r\\n|---|---|---|---|\\r\\n| a | 0 | System.String | string |\\r\\n| b | 1 | System.Object | dynamic |\\r\\n| c | 2 | System.Int32 | int |\\r\\n\\r\\nNotice column `b` is returned as `dynamic` while `c` is returned as `int`.\\r\\n\\r\\n### Using with_itemindex\\r\\n\\r\\nExpansion of an array with `with_itemindex`:\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAytKzEtPVahQSCvKz1UwVCjJVzBRKC5JLVAw5OWqUSguzc1NLMqsAqmwVchNzE6Nz8ksLtGo0ATJ5pbpplYUJOalKJRnlmTEZ5ak5mbmpaRW2HqCSIUKAIrdlHpcAAAA\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nrange x from 1 to 4 step 1\\r\\n| summarize x = make_list(x)\\r\\n| mv-expand with_itemindex=Index x\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|x|Index|\\r\\n|---|---|\\r\\n|1|0|\\r\\n|2|1|\\r\\n|3|2|\\r\\n|4|3|\\r\\n\\r\\n## See also\\r\\n\\r\\n* For more examples, see [Chart count of live activities over time](./samples.md#chart-concurrent-sessions-over-time).\\r\\n* [mv-apply](./mv-applyoperator.md) operator.\\r\\n* For the opposite of the mv-expand operator, see [summarize make_list()](makelist-aggfunction.md).\\r\\n* For expanding dynamic JSON objects into columns using property bag keys, see [bag_unpack()](bag-unpackplugin.md) plugin.',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/mvexpandoperator\",\"mvexpandoperator.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"mysql_request\",\"The `mysql_request` plugin sends a SQL query to a MySQL Server network endpoint and returns the first rowset in the results. The query may return more than one rowset, but only the first rowset is made available for the rest of the Kusto query.\",'The plugin is invoked with the [`evaluate`](evaluateoperator.md) operator.\\r\\n\\r\\n> [!IMPORTANT]\\r\\n> The `mysql_request` plugin is disabled by default.\\r\\n> To enable the plugin, run the [`.enable plugin mysql_request` command](../management/enable-plugin.md). To see which plugins are enabled, use [`.show plugin` management commands](../management/show-plugins.md).\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`evaluate` `mysql_request` `(` *ConnectionString* `,` *SqlQuery* [`,` *SqlParameters*] `)` [`:` *OutputSchema*]\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required| Description |\\r\\n|---|---|---|---|\\r\\n| *ConnectionString* | string | &check; | The connection string that points at the MySQL Server network endpoint. See [authentication](#username-and-password-authentication) and how to specify the [network endpoint](#specify-the-network-endpoint). |\\r\\n| *SqlQuery* | string | &check; | The query that is to be executed against the SQL endpoint. Must return one or more row sets. Only the first set is made available for the rest of the query. |\\r\\n| *SqlParameters* | dynamic | | A property bag object that holds key-value pairs to pass as parameters along with the query. |\\r\\n| *OutputSchema* | | | The names and types for the expected columns of the `mysql_request` plugin output.<br /><br />**Syntax**: `(` *ColumnName* `:` *ColumnType* [`,` ...] `)` |\\r\\n\\r\\n> [!NOTE]\\r\\n>\\r\\n> * Specifying the *OutputSchema* is highly recommended, as it allows the plugin to be used in scenarios that might otherwise not work without it, such as a cross-cluster query. The *OutputSchema* can also enable multiple query optimizations.\\r\\n> * An error is raised if the run-time schema of the first row set returned by the SQL network endpoint doesn\\'t match the *OutputSchema* schema.\\r\\n\\r\\n## Authentication and authorization\\r\\n\\r\\nTo authorize to a MySQL Server network endpoint, you need to specify the authorization information in the connection string. The supported authorization method is via username and password.\\r\\n\\r\\n## Set callout policy\\r\\n\\r\\nThe plugin makes callouts to the MySql database. Make sure that the cluster\\'s [callout policy](../management/calloutpolicy.md) enables calls of type `mysql` to the target *MySqlDbUri*.\\r\\n\\r\\nThe following example shows how to define the callout policy for MySQL databases. We recommend restricting the callout policy to specific endpoints (`my_endpoint1`, `my_endpoint2`).\\r\\n\\r\\n```\\r\\n[\\r\\n  {\\r\\n    \"CalloutType\": \"mysql\",\\r\\n    \"CalloutUriRegex\": \"my_endpoint1\\\\\\\\.mysql\\\\\\\\.database\\\\\\\\.azure\\\\\\\\.com\",\\r\\n    \"CanCall\": true\\r\\n  },\\r\\n  {\\r\\n    \"CalloutType\": \"mysql\",\\r\\n    \"CalloutUriRegex\": \"my_endpoint2\\\\\\\\.mysql\\\\\\\\.database\\\\\\\\.azure\\\\\\\\.com\",\\r\\n    \"CanCall\": true\\r\\n  }\\r\\n]\\r\\n```\\r\\n\\r\\nThe following example shows an `.alter callout policy` command for `mysql` *CalloutType*:\\r\\n\\r\\n```\\r\\n.alter cluster policy callout @\\'[{\"CalloutType\": \"mysql\", \"CalloutUriRegex\": \"\\\\\\\\.mysql\\\\\\\\.database\\\\\\\\.azure\\\\\\\\.com\", \"CanCall\": true}]\\'\\r\\n```\\r\\n\\r\\n## Username and password authentication\\r\\n\\r\\nThe `mysql_request` plugin only supports username and password authentication to the MySQL server endpoint and doesn\\'t integrate with Azure Active Directory authentication.\\r\\n\\r\\nThe username and password are provided as part of the connections string using the following parameters:\\r\\n\\r\\n`User ID=...; Password=...;`\\r\\n\\r\\n> [!WARNING]\\r\\n> Confidential or guarded information should be obfuscated from connection strings and queries so that they are omitted from any Kusto tracing.\\r\\n> For more information, see [obfuscated string literals](scalar-data-types/string.md#obfuscated-string-literals).\\r\\n\\r\\n## Encryption and server validation\\r\\n\\r\\nFor security, `SslMode` is unconditionally set to `Required` when connecting to a MySQL server network endpoint. As a result, the server must be configured with a valid SSL/TLS server certificate.\\r\\n\\r\\n## Specify the network endpoint\\r\\n\\r\\nSpecify the MySQL network endpoint as part of the connection string.\\r\\n\\r\\n**Syntax**:\\r\\n\\r\\n`Server` `=` *FQDN* [`Port` `=` *Port*]\\r\\n\\r\\nWhere:\\r\\n\\r\\n* *FQDN* is the fully qualified domain name of the endpoint.\\r\\n* *Port* is the TCP port of the endpoint. By default, `3306` is assumed.',\"### SQL query to Azure MySQL DB\\r\\n\\r\\nThe following example sends a SQL query to an Azure MySQL database. It retrieves all records from `[dbo].[Table]`, and then processes the results.\\r\\n\\r\\n> [!NOTE]\\r\\n> This example shouldn't be taken as a recommendation to filter or project data in this manner. SQL queries should be constructed to return the smallest data set possible.\\r\\n\\r\\n```\\r\\nevaluate mysql_request(\\r\\n    'Server=contoso.mysql.database.azure.com; Port = 3306;'\\r\\n    'Database=Fabrikam;'\\r\\n    h'UID=USERNAME;'\\r\\n    h'Pwd=PASSWORD;',\\r\\n    'select * from [dbo].[Table]') : (Id: int, Name: string)\\r\\n| where Id > 0\\r\\n| project Name\\r\\n```\\r\\n\\r\\n### SQL query to an Azure MySQL database with modifications\\r\\n\\r\\nThe following example sends a SQL query to an Azure MySQL database\\r\\nretrieving all records from `[dbo].[Table]`, while appending another `datetime` column,\\r\\nand then processes the results on the Kusto side.\\r\\nIt specifies a SQL parameter (`@param0`) to be used in the SQL query.\\r\\n\\r\\n```\\r\\nevaluate mysql_request(\\r\\n    'Server=contoso.mysql.database.azure.com; Port = 3306;'\\r\\n    'Database=Fabrikam;'\\r\\n    h'UID=USERNAME;'\\r\\n    h'Pwd=PASSWORD;',\\r\\n    'select *, @param0 as dt from [dbo].[Table]',\\r\\n    dynamic({'param0': datetime(2020-01-01 16:47:26.7423305)})) : (Id:long, Name:string, dt: datetime)\\r\\n| where Id > 0\\r\\n| project Name\\r\\n```\\r\\n\\r\\n### SQL query to an Azure MySQL database without a query-defined output schema\\r\\n\\r\\nThe following example sends a SQL query to an Azure MySQL database without an output schema. This is not recommended unless the schema is unknown, as it may impact the performance of the query.\\r\\n\\r\\n```\\r\\nevaluate mysql_request(\\r\\n    'Server=contoso.mysql.database.azure.com; Port = 3306;'\\r\\n    'Database=Fabrikam;'\\r\\n    h'UID=USERNAME;'\\r\\n    h'Pwd=PASSWORD;',\\r\\n    'select * from [dbo].[Table]')\\r\\n| where Id > 0\\r\\n| project Name\\r\\n```\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/mysqlrequest-plugin\",\"mysqlrequest-plugin.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"narrow\",'The `narrow` plugin \"unpivots\" a wide table into a table with three columns:',\"* Row number\\r\\n* Column type\\r\\n* Column value (as `string`)\\r\\n\\r\\nThe `narrow` plugin is designed mainly for display purposes, as it allows wide\\r\\ntables to be displayed comfortably without the need of horizontal scrolling.\\r\\n\\r\\nThe plugin is invoked with the [`evaluate`](evaluateoperator.md) operator.\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`T | evaluate narrow()`\",'The following example shows an easy way to read the output of the Kusto\\r\\n`.show diagnostics` control command.\\r\\n\\r\\n```\\r\\n.show diagnostics\\r\\n | evaluate narrow()\\r\\n```\\r\\n\\r\\nThe results of `.show diagnostics` itself is a table with a single row and\\r\\n33 columns. By using the `narrow` plugin we \"rotate\" the output to something\\r\\nlike this:\\r\\n\\r\\nRow  | Column                              | Value\\r\\n-----|-------------------------------------|-----------------------------\\r\\n0    | IsHealthy                           | True\\r\\n0    | IsRebalanceRequired                 | False\\r\\n0    | IsScaleOutRequired                  | False\\r\\n0    | MachinesTotal                       | 2\\r\\n0    | MachinesOffline                     | 0\\r\\n0    | NodeLastRestartedOn                 | 2017-03-14 10:59:18.9263023\\r\\n0    | AdminLastElectedOn                  | 2017-03-14 10:58:41.6741934\\r\\n0    | ClusterWarmDataCapacityFactor       | 0.130552847673333\\r\\n0    | ExtentsTotal                        | 136\\r\\n0    | DiskColdAllocationPercentage        | 5\\r\\n0    | InstancesTargetBasedOnDataCapacity  | 2\\r\\n0    | TotalOriginalDataSize               | 5167628070\\r\\n0    | TotalExtentSize                     | 1779165230\\r\\n0    | IngestionsLoadFactor                | 0\\r\\n0    | IngestionsInProgress                | 0\\r\\n0    | IngestionsSuccessRate               | 100\\r\\n0    | MergesInProgress                    | 0\\r\\n0    | BuildVersion                        | 1.0.6281.19882\\r\\n0    | BuildTime                           | 2017-03-13 11:02:44.0000000\\r\\n0    | ClusterDataCapacityFactor           | 0.130552847673333\\r\\n0    | IsDataWarmingRequired               | False\\r\\n0    | RebalanceLastRunOn                  | 2017-03-21 09:14:53.8523455\\r\\n0    | DataWarmingLastRunOn                | 2017-03-21 09:19:54.1438800\\r\\n0    | MergesSuccessRate                   | 100\\r\\n0    | NotHealthyReason                    | [null]\\r\\n0    | IsAttentionRequired                 | False\\r\\n0    | AttentionRequiredReason             | [null]\\r\\n0    | ProductVersion                      | KustoRelease_2017.03.13.2\\r\\n0    | FailedIngestOperations              | 0\\r\\n0    | FailedMergeOperations               | 0\\r\\n0    | MaxExtentsInSingleTable             | 64\\r\\n0    | TableWithMaxExtents                 | KustoMonitoringPersistentDatabase.KustoMonitoringTable\\r\\n0    | WarmExtentSize                      | 1779165230',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/narrowplugin\",\"narrowplugin.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"new_activity_metrics\",\"Calculates useful activity metrics (distinct count values, distinct count of new values, retention rate, and churn rate) for the cohort of `New Users`. Each cohort of `New Users` (all users, which were first seen in time window) is compared to all prior cohorts.\\r\\nComparison takes into account *all* previous time windows. For example, for records from T2 to T3, the distinct count of users will be all users in T3 who weren't seen in both T1 and T2.\\r\\nThe plugin is invoked with the [`evaluate`](evaluateoperator.md) operator.\",\"## Syntax\\r\\n\\r\\n*TabularExpression* `| evaluate` `new_activity_metrics(`*IdColumn*`,` *TimelineColumn*`,` *Start*`,` *End*`,` *Window* [`,` *Cohort*] [`,` *dim1*`,` *dim2*`,` ...] [`,` *Lookback*] `)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *TabularExpression*| string | &check; | The tabular expression for which to calculate activity metrics.|\\r\\n| *IdColumn*| string | &check; | The name of the column with ID values that represent user activity.|\\r\\n| *TimelineColumn*| string | &check; | The name of the column that represents the timeline.|\\r\\n| *Start*| scalar | &check; | The value of the analysis start period.|\\r\\n| *End*| scalar | &check; | The value of the analysis end period.|\\r\\n| *Window*| scalar | &check; | The value of the analysis window period. Can be a numeric, datetime, or timespan value, or a string that is one of `week`, `month` or `year`, in which case all periods will be [startofweek](startofweekfunction.md)/[startofmonth](startofmonthfunction.md)/[startofyear](startofyearfunction.md) accordingly. When using `startofweek`, make sure start time is a Sunday, otherwise first cohort will be empty (since [startofweek](startofweekfunction.md) is considered to be a Sunday).|\\r\\n| *Cohort*| scalar | | Indicates a specific cohort. If not provided, all cohorts corresponding to the analysis time window are calculated and returned.|\\r\\n| *dim1*, *dim2*, ...| dynamic | | An array of the dimensions columns that slice the activity metrics calculation.|\\r\\n| *Lookback*| string | | A tabular expression with a set of IDs that belong to the 'look back' period.|\\r\\n\\r\\n## Returns\\r\\n\\r\\nReturns a table that contains the following for each combination of 'from' and 'to' timeline periods and for each existing column (dimensions) combination:\\r\\n\\r\\n* distinct count values\\r\\n* distinct count of new values\\r\\n* retention rate\\r\\n* churn rate\\r\\n\\r\\nOutput table schema is:\\r\\n\\r\\n|from_TimelineColumn|to_TimelineColumn|dcount_new_values|dcount_retained_values|dcount_churn_values|retention_rate|churn_rate|dim1|..|dim_n|\\r\\n|---|---|---|---|---|---|---|---|---|---|\\r\\n|type: as of *TimelineColumn*|same|long|long|double|double|double|..|..|..|\\r\\n\\r\\n* `from_TimelineColumn` - the cohort of new users. Metrics in this record refer to all users who were first seen in this period. The decision on *first seen* takes into account all previous periods in the analysis period.\\r\\n* `to_TimelineColumn` - the period being compared to.\\r\\n* `dcount_new_values` - the number of distinct users in `to_TimelineColumn` that weren't seen in *all* periods prior to and including `from_TimelineColumn`.\\r\\n* `dcount_retained_values` - out of all new users, first seen in `from_TimelineColumn`, the number of distinct users that were seen in `to_TimelineCoumn`.\\r\\n* `dcount_churn_values` - out of all new users, first seen in `from_TimelineColumn`, the number of distinct users that weren't seen in `to_TimelineCoumn`.\\r\\n* `retention_rate` - the percent of `dcount_retained_values` out of the cohort (users first seen in `from_TimelineColumn`).\\r\\n* `churn_rate` - the percent of `dcount_churn_values` out of the cohort (users first seen in `from_TimelineColumn`).\\r\\n\\r\\n>[!NOTE]\\r\\n>For definitions of `Retention Rate` and `Churn Rate` - refer to **Notes** section in [activity_metrics plugin](./activity-metrics-plugin.md) documentation.\",'The following sample data set shows which users seen on which days. The table was generated based on a source `Users` table, as follows:\\r\\n\\r\\n```\\r\\nUsers | summarize tostring(make_set(user)) by bin(Timestamp, 1d) | order by Timestamp asc;\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|Timestamp|set_user|\\r\\n|---|---|\\r\\n|2019-11-01 00:00:00.0000000|[0,2,3,4]|\\r\\n|2019-11-02 00:00:00.0000000|[0,1,3,4,5]|\\r\\n|2019-11-03 00:00:00.0000000|[0,2,4,5]|\\r\\n|2019-11-04 00:00:00.0000000|[0,1,2,3]|\\r\\n|2019-11-05 00:00:00.0000000|[0,1,2,3,4]|\\r\\n\\r\\nThe output of the plugin for the original table is the following:\\r\\n\\r\\n```\\r\\nlet StartDate = datetime(2019-11-01 00:00:00);\\r\\nlet EndDate = datetime(2019-11-07 00:00:00);\\r\\nUsers \\r\\n| evaluate new_activity_metrics(user, Timestamp, StartDate, EndDate-1tick, 1d) \\r\\n| where from_Timestamp < datetime(2019-11-03 00:00:00.0000000)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|R|from_Timestamp|to_Timestamp|dcount_new_values|dcount_retained_values|dcount_churn_values|retention_rate|churn_rate|\\r\\n|---|---|---|---|---|---|---|---|\\r\\n|1|2019-11-01 00:00:00.0000000|2019-11-01 00:00:00.0000000|4|4|0|1|0|\\r\\n|2|2019-11-01 00:00:00.0000000|2019-11-02 00:00:00.0000000|2|3|1|0.75|0.25|\\r\\n|3|2019-11-01 00:00:00.0000000|2019-11-03 00:00:00.0000000|1|3|1|0.75|0.25|\\r\\n|4|2019-11-01 00:00:00.0000000|2019-11-04 00:00:00.0000000|1|3|1|0.75|0.25|\\r\\n|5|2019-11-01 00:00:00.0000000|2019-11-05 00:00:00.0000000|1|4|0|1|0|\\r\\n|6|2019-11-01 00:00:00.0000000|2019-11-06 00:00:00.0000000|0|0|4|0|1|\\r\\n|7|2019-11-02 00:00:00.0000000|2019-11-02 00:00:00.0000000|2|2|0|1|0|\\r\\n|8|2019-11-02 00:00:00.0000000|2019-11-03 00:00:00.0000000|0|1|1|0.5|0.5|\\r\\n|9|2019-11-02 00:00:00.0000000|2019-11-04 00:00:00.0000000|0|1|1|0.5|0.5|\\r\\n|10|2019-11-02 00:00:00.0000000|2019-11-05 00:00:00.0000000|0|1|1|0.5|0.5|\\r\\n|11|2019-11-02 00:00:00.0000000|2019-11-06 00:00:00.0000000|0|0|2|0|1|\\r\\n\\r\\nFollowing is an analysis of a few records from the output:\\r\\n\\r\\n* Record `R=3`, `from_TimelineColumn` = `2019-11-01`,  `to_TimelineColumn` = `2019-11-03`:\\r\\n  * The users considered for this record are all new users seen on 11/1. Since this is the first period, these are all users in that bin \\u2013 [0,2,3,4]\\r\\n  * `dcount_new_values` \\u2013 the number of users on 11/3 who weren\\'t seen on 11/1. This includes a single user \\u2013 `5`.\\r\\n  * `dcount_retained_values` \\u2013 out of all new users on 11/1, how many were retained until 11/3? There are three values (`[0,2,4]`), while `count_churn_values` is one (user=`3`).\\r\\n  * `retention_rate` = 0.75 \\u2013 the three retained users out of the four new users who were first seen in 11/1.\\r\\n\\r\\n* Record `R=9`, `from_TimelineColumn` = `2019-11-02`,  `to_TimelineColumn` = `2019-11-04`:\\r\\n  * This record focuses on the new users who were first seen on 11/2 \\u2013 users `1` and `5`.\\r\\n  * `dcount_new_values` \\u2013 the number of users on 11/4 who weren\\'t seen through all periods `T0 .. from_Timestamp`. Meaning, users who are seen on 11/4 but who weren\\'t seen on either 11/1 or 11/2 \\u2013 there are no such users.\\r\\n  * `dcount_retained_values` \\u2013 out of all new users on 11/2 (`[1,5]`), how many were retained until 11/4? There\\'s one such user (`[1]`), `while count_churn_values` is one (user `5`).\\r\\n  * `retention_rate` is 0.5 \\u2013 the single user that was retained on 11/4 out of the two new ones on 11/2.\\r\\n\\r\\n\\r\\n### Weekly retention rate, and churn rate (single week)\\r\\n\\r\\nThe next query calculates a retention and churn rate for week-over-week window for `New Users` cohort (users that arrived on the first week).\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA21Ry27DIBC85yvmFmht2U4V5VDlVqk/0FtVWcisExIbLNg8LPXjC7arHFoOsBpmZ9ihKPBOlrxigldWux5asYJrcQnkoRo2V8OGwqojRh1YecY+kYhNT2JTVru83OZlJV9nCln9H+ElEaLFgfCmRrQ+Wi1y7OauwDSg0qtv0J0TkITYdc4ehEhN+dIhUUSefBB9JKbnC4lnVA+8TkOE/WQrFiWNJ2zLuHmZ4Q8W+zflXOWoIqOSiHr9Naf7EB1g9H5WTc/mcSDXiqQh0ZneMKpyWquiwIc6E5ztRvCR0BofGDeiMxp3dHFu0amIDMqrnpj8NM9VdZf0GZZu9RL+WMdrb5ogPtdGr7+yFGC2RJFN0WXY6V8kyQzenajhKeV6YrObTx+dLBtn6/TnGZrjxc/1D5PKiK4LAgAA\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\n// Generate random data of user activities\\r\\nlet _start = datetime(2017-05-01);\\r\\nlet _end = datetime(2017-05-31);\\r\\nrange Day from _start to _end step 1d\\r\\n| extend d = tolong((Day - _start) / 1d)\\r\\n| extend r = rand() + 1\\r\\n| extend _users=range(tolong(d * 50 * r), tolong(d * 50 * r + 200 * r - 1), 1) \\r\\n| mv-expand id=_users to typeof(long) limit 1000000\\r\\n// Take only the first week cohort (last parameter)\\r\\n| evaluate new_activity_metrics([\\'id\\'], Day, _start, _end, 7d, _start)\\r\\n| project from_Day, to_Day, retention_rate, churn_rate\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|from_Day|to_Day|retention_rate|churn_rate|\\r\\n|---|---|---|---|\\r\\n|2017-05-01 00:00:00.0000000|2017-05-01 00:00:00.0000000|1|0|\\r\\n|2017-05-01 00:00:00.0000000|2017-05-08 00:00:00.0000000|0.544632768361582|0.455367231638418|\\r\\n|2017-05-01 00:00:00.0000000|2017-05-15 00:00:00.0000000|0.031638418079096|0.968361581920904|\\r\\n|2017-05-01 00:00:00.0000000|2017-05-22 00:00:00.0000000|0|1|\\r\\n|2017-05-01 00:00:00.0000000|2017-05-29 00:00:00.0000000|0|1|\\r\\n\\r\\n### Weekly retention rate, and churn rate (complete matrix)\\r\\n\\r\\nThe next query calculates retention and churn rate for week-over-week window for `New Users` cohort. If the previous example calculated the statistics for a single week - the following query produces an NxN table for each from/to combination.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA22RwWrDMBBE7/mKuUVqbWynhByKb4Ve+gelGGFtUhVbMtImTaAf35VtyKH1QRbL25ndUVXhlTxFw4RovA0jrGGDcMQ5UYTp2V0cO0qbgRhdYhMZbYaI3UhqVzeHst6XdaOfF4S8/Q94yoBYnAgv5oZjFKtVjsPSlZgmNHbzA7pyLmQhDkPwJ6VyU7l2aFTC6TsYBczjK41HNPd6l5dI7WyrViWLB+xrOaIu8Kcm/bt6uZVohGg0RG+8lHSdxAHOtotqHptvE4Wjyhoagxsdo6nnb1NVeDOJMZloRmLJ0iUEIZisSOcZL2Y45+A9fXdr0LdO2Oj6pN63zm4/ihxWsa5dzDEVOMyrTzF8Uc9zkt1McVj+Uew8u+C7/K4F+s9zXO6/Mr0rj+8BAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\n// Generate random data of user activities\\r\\nlet _start = datetime(2017-05-01);\\r\\nlet _end = datetime(2017-05-31);\\r\\nrange Day from _start to _end step 1d\\r\\n| extend d = tolong((Day - _start) / 1d)\\r\\n| extend r = rand() + 1\\r\\n| extend _users=range(tolong(d * 50 * r), tolong(d * 50 * r + 200 * r - 1), 1) \\r\\n| mv-expand id=_users to typeof(long) limit 1000000\\r\\n// Last parameter is omitted - \\r\\n| evaluate new_activity_metrics([\\'id\\'], Day, _start, _end, 7d)\\r\\n| project from_Day, to_Day, retention_rate, churn_rate\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|from_Day|to_Day|retention_rate|churn_rate|\\r\\n|---|---|---|---|\\r\\n|2017-05-01 00:00:00.0000000|2017-05-01 00:00:00.0000000|1|0|\\r\\n|2017-05-01 00:00:00.0000000|2017-05-08 00:00:00.0000000|0.190397350993377|0.809602649006622|\\r\\n|2017-05-01 00:00:00.0000000|2017-05-15 00:00:00.0000000|0|1|\\r\\n|2017-05-01 00:00:00.0000000|2017-05-22 00:00:00.0000000|0|1|\\r\\n|2017-05-01 00:00:00.0000000|2017-05-29 00:00:00.0000000|0|1|\\r\\n|2017-05-08 00:00:00.0000000|2017-05-08 00:00:00.0000000|1|0|\\r\\n|2017-05-08 00:00:00.0000000|2017-05-15 00:00:00.0000000|0.405263157894737|0.594736842105263|\\r\\n|2017-05-08 00:00:00.0000000|2017-05-22 00:00:00.0000000|0.227631578947368|0.772368421052632|\\r\\n|2017-05-08 00:00:00.0000000|2017-05-29 00:00:00.0000000|0|1|\\r\\n|2017-05-15 00:00:00.0000000|2017-05-15 00:00:00.0000000|1|0|\\r\\n|2017-05-15 00:00:00.0000000|2017-05-22 00:00:00.0000000|0.785488958990536|0.214511041009464|\\r\\n|2017-05-15 00:00:00.0000000|2017-05-29 00:00:00.0000000|0.237644584647739|0.762355415352261|\\r\\n|2017-05-22 00:00:00.0000000|2017-05-22 00:00:00.0000000|1|0|\\r\\n|2017-05-22 00:00:00.0000000|2017-05-29 00:00:00.0000000|0.621835443037975|0.378164556962025|\\r\\n|2017-05-29 00:00:00.0000000|2017-05-29 00:00:00.0000000|1|0|\\r\\n\\r\\n### Weekly retention rate with lookback period\\r\\n\\r\\nThe following query calculates the retention rate of `New Users` cohort when taking into\\r\\nconsideration `lookback` period: a tabular query with set of Ids that are used to define\\r\\nthe `New Users` cohort (all IDs that don\\'t appear in this set are `New Users`). The\\r\\nquery examines the retention behavior of the `New Users` during the analysis period.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA22SzW6DMBCE7zzFHO0WBKSKcki4VepjIBdvUjeAkdn8SXn42jgpjVIfMFq+nR2PyXN8UE9OMcGpXtsOWrGC3eIwkoNq2BwNGxqTlhh1a+3+UzV7VIEjNh2JRVGusmKRFaVcR2pk5fgZWf5BqNf/AW+/wGSjCqZ2hHd1wdZ5c7MBtlFkZBpQ6gR+XUFnDsWgzba1/U6I0JvNjRK5x+Uj7+IkLSReUT5+q0MQYzUZETdRjRcsC/9wMsVTzWssiviWofREKXHT7I4ZnQc/CUZXUTmchC8D2a0IOhKt6QyjLKa1TvJ8CuTu/x5M3K84fZGLAW3uwV8xOPtNDYdy6ietk4lO/JmOqj2Ey+7pVN8u91J3xM40ozA6jS1RKJ0STrHSc+XBhkzmUeF66qmZbdwd+fzY2L4Ov9cPqFoyT2oCAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\n// Generate random data of user activities\\r\\nlet _lookback = datetime(2017-02-01);\\r\\nlet _start = datetime(2017-05-01);\\r\\nlet _end = datetime(2017-05-31);\\r\\nlet _data = range Day from _lookback to _end step 1d\\r\\n    | extend d = tolong((Day - _lookback) / 1d)\\r\\n    | extend r = rand() + 1\\r\\n    | extend _users=range(tolong(d * 50 * r), tolong(d * 50 * r + 200 * r - 1), 1) \\r\\n    | mv-expand id=_users to typeof(long) limit 1000000;\\r\\n//\\r\\nlet lookback_data = _data | where Day < _start | project Day, id;\\r\\n_data\\r\\n| evaluate new_activity_metrics(id, Day, _start, _end, 7d, _start, lookback_data)\\r\\n| project from_Day, to_Day, retention_rate\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|from_Day|to_Day|retention_rate|\\r\\n|---|---|---|\\r\\n|2017-05-01 00:00:00.0000000|2017-05-01 00:00:00.0000000|1|\\r\\n|2017-05-01 00:00:00.0000000|2017-05-08 00:00:00.0000000|0.404081632653061|\\r\\n|2017-05-01 00:00:00.0000000|2017-05-15 00:00:00.0000000|0.257142857142857|\\r\\n|2017-05-01 00:00:00.0000000|2017-05-22 00:00:00.0000000|0.296326530612245|\\r\\n|2017-05-01 00:00:00.0000000|2017-05-29 00:00:00.0000000|0.0587755102040816|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/new-activity-metrics-plugin\",\"new-activity-metrics-plugin.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"new_guid\",\"Returns a random GUID (Globally Unique Identifier).\",\"## Syntax\\r\\n\\r\\n`new_guid()`\\r\\n\\r\\n## Returns\\r\\n\\r\\nA new value of type [`guid`](scalar-data-types/guid.md).\",'> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAysoyswrUUgvzUyxzUstjwcxNDQBGYdeSRUAAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint guid=new_guid()\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|guid|\\r\\n|--|\\r\\n|2157828f-e871-479a-9d1c-17ffde915095|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/newguidfunction\",\"newguidfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"next\",\"Returns the value of a column in a row that is at some offset following the\\r\\ncurrent row in a [serialized row set](./windowsfunctions.md#serialized-row-set).\",\"## Syntax\\r\\n\\r\\n`next(`*column*`,` [ *offset*`,` *default_value* ]`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *column*| string |  &check; | The column from which to get the values.|\\r\\n| *offset*| int | | The amount of rows to move from the current row. Default is 1. |\\r\\n| *default_value*| scalar | | The default value when there's no value in the next row. When no default value is specified, `null` is used.|\",'### Filter data based on comparison between adjacent rows\\r\\n\\r\\nThe following query returns rows that show breaks longer than a quarter of a second between calls to `sensor-9`.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/SampleIoTData?query=H4sIAAAAAAAAA3WOMQvCMBCFd8H/8La0UEEFB4c4dXHQxe5yNhcMNKnkAir4400U7OR27313710XKYgdo2dz4iBjlJYSzWcv3K8cGV/zSJ6hNZR85GKrykaeEi5PdM6zJPI3kPQF8CNxMEjZb521+3Bww+CE+zEYgYahxAWeTaaV8hNVDUK+rn6RDVZ1MzXU02d/0ndYb5ZvMSIuUtYAAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nTransformedSensorsData\\r\\n| where SensorName == \\'sensor-9\\'\\r\\n| sort by Timestamp asc\\r\\n| extend timeDiffInMilliseconds = datetime_diff(\\'millisecond\\', next(Timestamp, 1), Timestamp)\\r\\n| where timeDiffInMilliseconds > 250\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|Timestamp|SensorName|Value|PublisherId|MachineId|timeDiff|\\r\\n|--|--|--|--|--|--|\\r\\n|2022-04-13T00:58:53.048506Z|sensor-9|0.39217481975439894|fdbd39ab-82ac-4ca0-99ed-2f83daf3f9bb|M100|251|\\r\\n|2022-04-13T01:07:09.63713Z|sensor-9|0.46645392778288297|e3ed081e-501b-4d59-8e60-8524633d9131|M100|313|\\r\\n|2022-04-13T01:07:10.858267Z|sensor-9|0.693091598493419|278ca033-2b5e-4f2c-b493-00319b275aea|M100|254|\\r\\n|2022-04-13T01:07:11.203834Z|sensor-9|0.52415808840249778|4ea27181-392d-4947-b811-ad5af02a54bb|M100|331|\\r\\n|2022-04-13T01:07:14.431908Z|sensor-9|0.35430645405452|0af415c2-59dc-4a50-89c3-9a18ae5d621f|M100|268|\\r\\n|...|...|...|...|...|...|\\r\\n\\r\\n### Perform aggregation based on comparison between adjacent rows\\r\\n\\r\\nThe following query calculates the average time difference in milliseconds between calls to `sensor-9`.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/SampleIoTData?query=H4sIAAAAAAAAA22NvQ6CQBCEexPfYbuDBAtLi+toLLSB3qzcopewB7ld8Sc+vBwWWNjNzDeZqSMGafvI5CoK0kcpUXG9esP9SpHgGx6RCawFI7Pd7ExqTErh/ITaM4kiD4DSJEAPpeBAp7z0bbsPB991XqjpgxOw4FApwZObaGZ4oaZY1goYIo3Zj9/m+fx7Y8boXwQ4XrL/L/kHqqI6JdkAAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nTransformedSensorsData\\r\\n| where SensorName == \\'sensor-9\\'\\r\\n| sort by Timestamp asc\\r\\n| extend timeDiffInMilliseconds = datetime_diff(\\'millisecond\\', next(Timestamp, 1), Timestamp)\\r\\n| summarize avg(timeDiffInMilliseconds)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|avg_timeDiffInMilliseconds|\\r\\n|--|\\r\\n|30.726900061254298\\r\\n\\r\\n### Extend row with data from the next row\\r\\n\\r\\nIn the following query, as part of the serialization done with the [serialize operator](serializeoperator.md), a new column `next_session_type` is added with data from the next row.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA3POz0tLLUrNS04NTi0uzszPK+aqUSjPAAopJMOlFGxtFdSdSjNzUhSMDAwt1YFKilOLMhNzMqtSFfJSK0riiyGa40sqC4CqwWIayGKaQC0FRflZqcklCiWZuanxiXkp8SmlRYklQBU6CnClmSU5qUhcoE4dTAsAcOu/KLQAAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nConferenceSessions\\r\\n| where conference == \\'Build 2019\\'\\r\\n| serialize next_session_type = next(session_type)\\r\\n| project time_and_duration, session_title, session_type, next_session_type\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n| time_and_duration | session_title | session_type | next_session_type |\\r\\n|---|---|---|---|\\r\\n| Mon, May 6, 8:30-10:00 am | Vision Keynote - Satya Nadella | Keynote | Expo Session |\\r\\n| Mon, May 6, 1:20-1:40 pm | Azure Data Explorer: Advanced Time Series analysis | Expo Session | Breakout |\\r\\n| Mon, May 6, 2:00-3:00 pm | Azure\\'s Data Platform - Powering Modern Applications and Cloud Scale Analytics at Petabyte Scale | Breakout | Expo Session |\\r\\n| Mon, May 6, 4:00-4:20 pm | How BASF is using Azure Data Services | Expo Session | Expo Session |\\r\\n| Mon, May 6, 6:50 - 7:10 pm | Azure Data Explorer: Operationalize your ML models | Expo Session | Expo Session |\\r\\n|...|...|...|...|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/nextfunction\",\"nextfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"not\",\"Reverses the value of its `bool` argument.\",\"## Syntax\\r\\n\\r\\n`not(`*expr*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n|*expr*|scalar|&check;|An expression that evaluates to a boolean value. The result of this expression will be reversed.|\\r\\n\\r\\n## Returns\\r\\n\\r\\nReturns the reversed logical value of its `bool` argument.\",'> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAysoyswrUcjLL9FIS8wpTtVUsLVVKCkqTQUAozQnchgAAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint not(false) == true\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|print_0|\\r\\n|--|\\r\\n|true|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/notfunction\",\"notfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"now\",\"Returns the current UTC time, optionally offset by a given [timespan](scalar-data-types/timespan.md).\",\"The current UTC time will stay the same across all uses of `now()` in a single query statement, even if there's technically a small time difference between when each `now()` runs.\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`now(`[ *offset* ]`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *offset* | timespan | | A timespan to add to the current UTC clock time. The default value is 0.|\\r\\n\\r\\n## Returns\\r\\n\\r\\nThe current UTC clock time, plus the *offset* time if provided, as a `datetime`.\",\"The following example determines the interval since the storm events.\\r\\n\\r\\n```\\r\\nT | where ... | extend Elapsed=now() - Timestamp\\r\\n```\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/nowfunction\",\"nowfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"pack_all\",\"Creates a [dynamic](scalar-data-types/dynamic.md) property bag object from all the columns of the tabular expression.\",\"> [!NOTE]\\r\\n> The representation of the returned object isn't guaranteed to be byte-level-compatible between runs. For example, properties that appear in the bag may appear in a different order.\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`pack_all(`[ *ignore_null_empty* ]`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *ignore_null_empty* | bool | | Indicates whether to ignore null/empty columns and exclude them from the resulting property bag. The default value is `false`.|\",'The following query will use `pack_all()` to create columns for the below table.\\r\\n\\r\\n|SourceNumber |TargetNumber| CharsCount\\r\\n|---|---|---\\r\\n|555-555-1234 |555-555-1212 | 46\\r\\n|555-555-1234 |555-555-1213 | 50\\r\\n|555-555-1313 | | 42\\r\\n| |555-555-3456 | 74\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA32PsQrCMBCG9zxFtrRwgm2SCgWn4uAigm4ikrZHFNOkpCko+PCmIFgXOY6f+/j+4VoV4tQGk4MbfYO7savRl0PwN6vhqLzG8Muqq/JD5UYbSuOsTsmJMCnlYtos54LB7MxyBqKAfwZnIJdzg0+IxV4OlLCZzIUsGKwEJWfyovgIaFu6V80d23Uf46KMSVL4oK22zsd/jNl0fXh+jeBHTN/V81O7+AAAAA==\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\ndatatable(SourceNumber:string,TargetNumber:string,CharsCount:long)\\r\\n[\\r\\n\\'555-555-1234\\',\\'555-555-1212\\',46,\\r\\n\\'555-555-1234\\',\\'555-555-1213\\',50,\\r\\n\\'555-555-1313\\',\\'\\',42, \\r\\n\\'\\',\\'555-555-3456\\',74 \\r\\n]\\r\\n| extend Packed=pack_all(), PackedIgnoreNullEmpty=pack_all(true)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|SourceNumber |TargetNumber | CharsCount | Packed |PackedIgnoreNullEmpty\\r\\n|---|---|---|---|---\\r\\n|555-555-1234 |555-555-1212 | 46 |{\"SourceNumber\":\"555-555-1234\", \"TargetNumber\":\"555-555-1212\", \"CharsCount\": 46} | {\"SourceNumber\":\"555-555-1234\", \"TargetNumber\":\"555-555-1212\", \"CharsCount\": 46}\\r\\n|555-555-1234 |555-555-1213 | 50 |{\"SourceNumber\":\"555-555-1234\", \"TargetNumber\":\"555-555-1213\", \"CharsCount\": 50} | {\"SourceNumber\":\"555-555-1234\", \"TargetNumber\":\"555-555-1213\", \"CharsCount\": 50}\\r\\n|555-555-1313 | | 42 | {\"SourceNumber\":\"555-555-1313\", \"TargetNumber\":\"\", \"CharsCount\": 42} | {\"SourceNumber\":\"555-555-1313\", \"CharsCount\": 42}\\r\\n| |555-555-3456 | 74 | {\"SourceNumber\":\"\", \"TargetNumber\":\"555-555-3456\", \"CharsCount\": 74} | {\"TargetNumber\":\"555-555-3456\", \"CharsCount\": 74}\\r\\n\\r\\n> [!NOTE]\\r\\n> There is a difference between the *Packed* and the *PackedIgnoreNullEmpty* columns in the last two rows of the above example. These two rows included empty values that were ignored by *pack_all(true)*.',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/packallfunction\",\"packallfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"pack_array\",\"Packs all input values into a [dynamic](scalar-data-types/dynamic.md) array.\",\"## Syntax\\r\\n\\r\\n`pack_array(`*value1*`,` [ *value2*, ... ]`)`\\r\\n\\r\\n`pack_array(*)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *value1...valueN* | string | &check; | Input expressions to be packed into a dynamic array.|\\r\\n| *The wildcard `*`*| string | | Providing the wildcard `*` will pack all input columns into a dynamic array.|\\r\\n\\r\\n## Returns\\r\\n\\r\\nA dynamic array that includes the values of *value1*, *value2*, ... *valueN*.\",'> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA0XKMQqAMAwF0N1T/FGlS3X2LBJqFBTbEjM0xcPrILg+nlDcGAWrpBMemjDiUs7wzQ0uynGBYXpHj+Gn+pJ9lCXtHBSZwjGTCFlbHMyhdg9FnMwrXgAAAA==\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nrange x from 1 to 3 step 1\\r\\n| extend y = x * 2\\r\\n| extend z = y * 2\\r\\n| project pack_array(x, y, z)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|Column1|\\r\\n|---|\\r\\n|[1,2,4]|\\r\\n|[2,4,8]|\\r\\n|[3,6,12]|\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA0XJMQ6AIBAF0d5T/FKMDVp7FkNwNWoEsmyxGA8vhYnNFPPYhY2gWDlesJCIEVkowTYPSIXCgoKpQhbew9YqOgzmx7viN2tsrpI4HuQFyflzdsyutNqj9LjNC2/1GNRvAAAA\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nrange x from 1 to 3 step 1\\r\\n| extend y = tostring(x * 2)\\r\\n| extend z = (x * 2) * 1s\\r\\n| project pack_array(x, y, z)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|Column1|\\r\\n|---|\\r\\n|[1,\"2\",\"00:00:02\"]|\\r\\n|[2,\"4\",\"00:00:04\"]|\\r\\n|[3,\"6\",\"00:00:06\"]|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/packarrayfunction\",\"packarrayfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.OperatorToken,\"parse\",\"Evaluates a string expression and parses its value into one or more calculated columns. The calculated columns will have nulls, for unsuccessfully parsed strings. If there's no need to use rows where parsing doesn't succeed, prefer using the [parse-where operator](parsewhereoperator.md).\",\"## Syntax\\r\\n\\r\\n*T* `| parse` [ `kind=`*kind* [ `flags=`*regexFlags* ]] *expression* `with` [ `*` ] *stringConstant* *columnName* [`:` *columnType*] [ `*` ] `,` ...\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *T* | string | &check; | The tabular input to parse.|\\r\\n| *kind* | string | &check; | One of the [supported kind values](#supported-kind-values). The default value is `simple`.|\\r\\n| *regexFlags* | string | |If *kind* is `regex`, then you can specify regex flags to be used like `U` for ungreedy, `m` for multi-line mode, `s` for match new line `\\\\n`, and `i` for case-insensitive. More flags can be found in [RE2 flags](re2.md).|\\r\\n| *expression* | string | &check; | An expression that evaluates to a string.|\\r\\n| *stringConstant* | string | &check; | A string constant for which to search and parse.|\\r\\n| *columnName* | string | &check; | The name of a column to assign a value to, extracted from the string expression. |\\r\\n| *columnType* | string | | The scalar value that indicates the type to convert the value to. The default is `string`.|\\r\\n\\r\\n> [!NOTE]\\r\\n>\\r\\n> * The parse pattern may start with *ColumnName* and not only with *StringConstant*.\\r\\n> * Use `*` in the pattern to skip junk values. The `*` can't be used after a `string` type column.\\r\\n> * If the parsed *expression* isn't of type `string`, it will be converted to type `string`.\\r\\n> * Use [`project`](projectoperator.md) if you also want to drop or rename some columns.\\r\\n\\r\\n### Supported kind values\\r\\n\\r\\n|Text|Description|\\r\\n|--|--|\\r\\n| `simple` | This is the default value. *stringConstant* is a regular string value and the match is strict. All string delimiters should appear in the parsed string, and all extended columns must match the required types.|\\r\\n| `regex` | *stringConstant* may be a regular expression and the match is strict. All string delimiters, which can be a regex for this mode, should appear in the parsed string, and all extended columns must match the required types.|\\r\\n| `relaxed` | *stringConstant* is a regular string value and the match is relaxed. All string delimiters should appear in the parsed string, but extended columns may partially match the required types. Extended columns that didn't match the required types will get the value `null`.|\\r\\n\\r\\n### Regex mode\\r\\n\\r\\nIn regex mode, parse will translate the pattern to a regex. Use [RE2 syntax](re2.md) to do the matching, and use numbered captured groups that are handled internally. For example:\\r\\n\\r\\n```\\r\\nparse kind=regex Col with * <regex1> var1:string <regex2> var2:long\\r\\n```\\r\\n\\r\\nIn the parse statement, the regex that will be internally generated by the parse is `.*?<regex1>(.*?)<regex2>(\\\\-\\\\d+)`.\\r\\n\\r\\n* `*` was translated to `.*?`.\\r\\n* `string` was translated to `.*?`.\\r\\n* `long` was translated to `\\\\-\\\\d+`.\\r\\n\\r\\n## Returns\\r\\n\\r\\nThe input table, extended according to the list of columns that are\\r\\nprovided to the operator.\",'The `parse` operator provides a streamlined way to `extend` a table by using multiple `extract` applications on the same `string` expression. This result is useful, when the table has a `string` column that contains several values that you want to break into individual columns. For example, a column that was produced by a developer trace (\"`printf`\"/\"`Console.WriteLine`\") statement.\\r\\n\\r\\nIn the example below, assume that the column `EventText` of table `Traces` contains\\r\\nstrings of the form `Event: NotifySliceRelease (resourceName={0}, totalSlices={1}, sliceNumber={2}, lockTime={3}, releaseTime={4}, previousLockTime={5})`.\\r\\nThe operation will extend the table with six columns: `resourceName`, `totalSlices`, `sliceNumber`, `lockTime`, `releaseTime`, and `previousLockTime`.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA93UQU+DMBQA4DsJ/+Glp82QrHS6KYajN0OM42Y8MPbcqh2QtkxN/PG2oAyC27jsIhyg4b3Sr695AjXEMklRQQirRJt7KXB0t8NMx/ihA1Ba8mw9dh0w11P9INX3AKJc85fPheApPqLARCGMJKq8lClGyRbDB16g4Bku0g2uSoHSA53rRFQpKmRzD5R9jcrtEmXIph6IPH2LucmlbOLPJ4z6M6DXwSUNqO+BrH9zOKCQuON5qe7/nmZ6Y6LGxDuvw7866qCnHHSQg57dwej/qAdjhx3+KYc/pB6V9vznanbUcfxcDXaYc+U6z7eu89MYwHW+oEikWX3TF+Cd6w1cAOlwCLSHQLoa0h4FBpKt7QxtIGlz9yGNmTR8O3kbS9qjwLYyG0Jsdo9MervwmzC2CbVX5q+Y6g6ow+lUZl+Wzqr62/0N0O/KLnAFAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nlet Traces = datatable(EventText: string)\\r\\n    [\\r\\n    \"Event: NotifySliceRelease (resourceName=PipelineScheduler, totalSlices=27, sliceNumber=23, lockTime=02/17/2016 08:40:01, releaseTime=02/17/2016 08:40:01, previousLockTime=02/17/2016 08:39:01)\",\\r\\n    \"Event: NotifySliceRelease (resourceName=PipelineScheduler, totalSlices=27, sliceNumber=15, lockTime=02/17/2016 08:40:00, releaseTime=02/17/2016 08:40:00, previousLockTime=02/17/2016 08:39:00)\",\\r\\n    \"Event: NotifySliceRelease (resourceName=PipelineScheduler, totalSlices=27, sliceNumber=20, lockTime=02/17/2016 08:40:01, releaseTime=02/17/2016 08:40:01, previousLockTime=02/17/2016 08:39:01)\",\\r\\n    \"Event: NotifySliceRelease (resourceName=PipelineScheduler, totalSlices=27, sliceNumber=22, lockTime=02/17/2016 08:41:01, releaseTime=02/17/2016 08:41:00, previousLockTime=02/17/2016 08:40:01)\",\\r\\n    \"Event: NotifySliceRelease (resourceName=PipelineScheduler, totalSlices=27, sliceNumber=16, lockTime=02/17/2016 08:41:00, releaseTime=02/17/2016 08:41:00, previousLockTime=02/17/2016 08:40:00)\"\\r\\n];\\r\\nTraces  \\r\\n| parse EventText with * \"resourceName=\" resourceName \", totalSlices=\" totalSlices: long * \"sliceNumber=\" sliceNumber: long * \"lockTime=\" lockTime \", releaseTime=\" releaseTime: date \",\" * \"previousLockTime=\" previousLockTime: date \")\" *  \\r\\n| project resourceName, totalSlices, sliceNumber, lockTime, releaseTime, previousLockTime\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|resourceName|totalSlices|sliceNumber|lockTime|releaseTime|previousLockTime|\\r\\n|---|---|---|---|---|---|\\r\\n|PipelineScheduler|27|15|02/17/2016 08:40:00|2016-02-17 08:40:00.0000000|2016-02-17 08:39:00.0000000|\\r\\n|PipelineScheduler|27|23|02/17/2016 08:40:01|2016-02-17 08:40:01.0000000|2016-02-17 08:39:01.0000000|\\r\\n|PipelineScheduler|27|20|02/17/2016 08:40:01|2016-02-17 08:40:01.0000000|2016-02-17 08:39:01.0000000|\\r\\n|PipelineScheduler|27|16|02/17/2016 08:41:00|2016-02-17 08:41:00.0000000|2016-02-17 08:40:00.0000000|\\r\\n|PipelineScheduler|27|22|02/17/2016 08:41:01|2016-02-17 08:41:00.0000000|2016-02-17 08:40:01.0000000|\\r\\n\\r\\n### Regex mode\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA9WUTU/CQBCG7036HyZ7arHItihoTYMevBlihJOUQ2lHWFlasrtFJP5414rYBvm4cDCbbDbtO+0878wORwV9EcUoIYAkUnqNOFr3C0xVH5fKl0qwdGybxsA0SPHYh26m2Mt7j7MYn5BjJBEsgTLLRYzdaIbBI5sjZyn24gkmOUfhgMpUxIsQGXhtB+TXsZvPRigCr+kAz+Jpn+lY6jXcdsOjbgvolX9Bfeo6IL5/s1swF7hgWS4f/v5M81qrbOKcjsG93MtADzHQoxjoSRk8+v/r4Hm7GdxDDO4xdShIT9tLrb0M+3vpaAbdS6YxvDGN9f0H0/iAeSR09lOWJnoeCBzjEjazAN6YmgCxzmsdexDVV3f152EtIFBGhVtSZQtlLUzO9K6jyoykTOzzLB0DEK2xfjK3OxsLyMaNQlKGJ2Urirdb5GTLDF8POi0OQ5usqUX2irGqkFRK8luPivfbPn8CDcwIyFAFAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nlet Traces = datatable(EventText: string)\\r\\n    [\\r\\n    \"Event: NotifySliceRelease (resourceName=PipelineScheduler, totalSlices=27, sliceNumber=23, lockTime=02/17/2016 08:40:01, releaseTime=02/17/2016 08:40:01, previousLockTime=02/17/2016 08:39:01)\",\\r\\n    \"Event: NotifySliceRelease (resourceName=PipelineScheduler, totalSlices=27, sliceNumber=15, lockTime=02/17/2016 08:40:00, releaseTime=02/17/2016 08:40:00, previousLockTime=02/17/2016 08:39:00)\",\\r\\n    \"Event: NotifySliceRelease (resourceName=PipelineScheduler, totalSlices=27, sliceNumber=20, lockTime=02/17/2016 08:40:01, releaseTime=02/17/2016 08:40:01, previousLockTime=02/17/2016 08:39:01)\",\\r\\n    \"Event: NotifySliceRelease (resourceName=PipelineScheduler, totalSlices=27, sliceNumber=22, lockTime=02/17/2016 08:41:01, releaseTime=02/17/2016 08:41:00, previousLockTime=02/17/2016 08:40:01)\",\\r\\n    \"Event: NotifySliceRelease (resourceName=PipelineScheduler, totalSlices=27, sliceNumber=16, lockTime=02/17/2016 08:41:00, releaseTime=02/17/2016 08:41:00, previousLockTime=02/17/2016 08:40:00)\"\\r\\n];\\r\\nTraces  \\r\\n| parse kind = regex EventText with \"(.*?)[a-zA-Z]*=\" resourceName @\", totalSlices=\\\\s*\\\\d+\\\\s*.*?sliceNumber=\" sliceNumber: long  \".*?(previous)?lockTime=\" lockTime \".*?releaseTime=\" releaseTime \".*?previousLockTime=\" previousLockTime: date \"\\\\\\\\)\"  \\r\\n| project resourceName, sliceNumber, lockTime, releaseTime, previousLockTime\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|resourceName|sliceNumber|lockTime|releaseTime|previousLockTime|\\r\\n|---|---|---|---|---|\\r\\n|PipelineScheduler|15|02/17/2016 08:40:00, |02/17/2016 08:40:00, |2016-02-17 08:39:00.0000000|\\r\\n|PipelineScheduler|23|02/17/2016 08:40:01, |02/17/2016 08:40:01, |2016-02-17 08:39:01.0000000|\\r\\n|PipelineScheduler|20|02/17/2016 08:40:01, |02/17/2016 08:40:01, |2016-02-17 08:39:01.0000000|\\r\\n|PipelineScheduler|16|02/17/2016 08:41:00, |02/17/2016 08:41:00, |2016-02-17 08:40:00.0000000|\\r\\n|PipelineScheduler|22|02/17/2016 08:41:01, |02/17/2016 08:41:00, |2016-02-17 08:40:01.0000000|\\r\\n\\r\\n### Regex mode with regex flags\\r\\n\\r\\nIf you\\'re interested in getting the resourceName only, use this query:\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA92Uz0vDMBTH74X+D49e9oPAkkw3rfToTYq43sRDlj63uKwtSTon+McbWxAHruulF5NDXng/kg/vy9PoIDNCooUEcuH8Xmsc3x+wcBkeXQzWGVVsJmEAfj23R9T4Y0hLp14/VlpJfEKNwiKMDdqyNhJTscfkUVWoVYErucW81mgIuNIJ3aTYhC8J2G8zrfdrNAmfE9Cl3GXK51I+Y8sZp2wB9Ca+ojFlBEz7zPmAyuBBlbV9+LvM/NZHTSIyLAe77uSglzhoLw46OAen/6MfnJ/nYJc4WJ9+NLTD62rRydGtq94cXldh8HIXBu1gCINPqITxf9+pIvdjwuAGj/AzIuBduS1MITohi+D3FUZkBNOmkinfULoT7xfmHnmlhQQAAA==\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nlet Traces = datatable(EventText: string)\\r\\n    [\\r\\n    \"Event: NotifySliceRelease (resourceName=PipelineScheduler, totalSlices=27, sliceNumber=23, lockTime=02/17/2016 08:40:01, releaseTime=02/17/2016 08:40:01, previousLockTime=02/17/2016 08:39:01)\",\\r\\n    \"Event: NotifySliceRelease (resourceName=PipelineScheduler, totalSlices=27, sliceNumber=15, lockTime=02/17/2016 08:40:00, releaseTime=02/17/2016 08:40:00, previousLockTime=02/17/2016 08:39:00)\",\\r\\n    \"Event: NotifySliceRelease (resourceName=PipelineScheduler, totalSlices=27, sliceNumber=20, lockTime=02/17/2016 08:40:01, releaseTime=02/17/2016 08:40:01, previousLockTime=02/17/2016 08:39:01)\",\\r\\n    \"Event: NotifySliceRelease (resourceName=PipelineScheduler, totalSlices=27, sliceNumber=22, lockTime=02/17/2016 08:41:01, releaseTime=02/17/2016 08:41:00, previousLockTime=02/17/2016 08:40:01)\",\\r\\n    \"Event: NotifySliceRelease (resourceName=PipelineScheduler, totalSlices=27, sliceNumber=16, lockTime=02/17/2016 08:41:00, releaseTime=02/17/2016 08:41:00, previousLockTime=02/17/2016 08:40:00)\"\\r\\n];\\r\\nTraces\\r\\n| parse kind = regex EventText with * \"resourceName=\" resourceName \\',\\' *\\r\\n| project resourceName\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|resourceName|\\r\\n|---|\\r\\n|PipelineScheduler, totalSlices=27, sliceNumber=23, lockTime=02/17/2016 08:40:01, releaseTime=02/17/2016 08:40:01|\\r\\n|PipelineScheduler, totalSlices=27, sliceNumber=15, lockTime=02/17/2016 08:40:00, releaseTime=02/17/2016 08:40:00|\\r\\n|PipelineScheduler, totalSlices=27, sliceNumber=20, lockTime=02/17/2016 08:40:01, releaseTime=02/17/2016 08:40:01|\\r\\n|PipelineScheduler, totalSlices=27, sliceNumber=22, lockTime=02/17/2016 08:41:01, releaseTime=02/17/2016 08:41:00|\\r\\n|PipelineScheduler, totalSlices=27, sliceNumber=16, lockTime=02/17/2016 08:41:00, releaseTime=02/17/2016 08:41:00|\\r\\n\\r\\nYou won\\'t get the expected results, since the default mode is greedy.\\r\\nIf you have a few records where the `resourceName`  sometimes appears as lower-case and sometimes as upper-case, you may get nulls for some values.\\r\\n\\r\\nTo get the wanted result, run the query with the non-greedy `U`, and disable case-sensitive `i` regex flags.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA92UTUvDMBjH74V+h4de9kJhaeY2rfQg0ptWWbuTeMjaZ11c1pYknRP88GYtiIJ7ufRickjgeUl+PH/+AjUkkqWoIICMabOXAvvhDgud4F77oLTkRT6wLTDrpT2cJu5DVGq++ogFT3GOAplC6EtUZS1TjNgWg2deoeAFxukas1qgdEGXmommRAV05oI6XKN6u0QZ0LELokw3CTe1hI682YgSbwrk2r8iPvFckO0zxxMqiTte1urh7zbjG5M1cNxuObzJSQ5yjoNcxEE656Dkf8yD0uMc3jkO75J5NLTd62p6kuO0ri7mMLqyrddb22qNwbY+oWLS/H3Di8zYhMQc97ASLD+YxoLDt1vAO9drGIIzD+Onxfw+jO4ew8CBn8zQc3swbJrK8g1T/Sv6BX2O9haQBAAA\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nlet Traces = datatable(EventText: string)\\r\\n    [\\r\\n    \"Event: NotifySliceRelease (resourceName=PipelineScheduler, totalSlices=27, sliceNumber=23, lockTime=02/17/2016 08:40:01, releaseTime=02/17/2016 08:40:01, previousLockTime=02/17/2016 08:39:01)\",\\r\\n    \"Event: NotifySliceRelease (resourceName=PipelineScheduler, totalSlices=27, sliceNumber=15, lockTime=02/17/2016 08:40:00, releaseTime=02/17/2016 08:40:00, previousLockTime=02/17/2016 08:39:00)\",\\r\\n    \"Event: NotifySliceRelease (resourceName=PipelineScheduler, totalSlices=27, sliceNumber=20, lockTime=02/17/2016 08:40:01, releaseTime=02/17/2016 08:40:01, previousLockTime=02/17/2016 08:39:01)\",\\r\\n    \"Event: NotifySliceRelease (resourceName=PipelineScheduler, totalSlices=27, sliceNumber=22, lockTime=02/17/2016 08:41:01, releaseTime=02/17/2016 08:41:00, previousLockTime=02/17/2016 08:40:01)\",\\r\\n    \"Event: NotifySliceRelease (resourceName=PipelineScheduler, totalSlices=27, sliceNumber=16, lockTime=02/17/2016 08:41:00, releaseTime=02/17/2016 08:41:00, previousLockTime=02/17/2016 08:40:00)\"\\r\\n];\\r\\nTraces\\r\\n| parse kind = regex flags = Ui EventText with * \"RESOURCENAME=\" resourceName \\',\\' *\\r\\n| project resourceName\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|resourceName|\\r\\n|---|\\r\\n|PipelineScheduler|\\r\\n|PipelineScheduler|\\r\\n|PipelineScheduler|\\r\\n|PipelineScheduler|\\r\\n|PipelineScheduler|\\r\\n\\r\\nIf the parsed string has newlines, use the flag `s`, to parse the text.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA92UTVPCMBCG753pf9jJiTIqaVHQOh1P3hzGEW7WQygLRELCJCkfM/54Q5FaRT4uXEwO2U3eTfIkOyvQQk+zDA0kMGDW9b7A2uMcpe3h0sZgrOZyFPgeuPa6GUixHkNHWT5cdQXP8AUFMoNQ02hUrjPssCkmz3yGgkvsZmMc5AJ1Kq2yTBQhJonaqTRrs5NP+6iTqJlKobJJj7tYGjXCdiOiYQvobXxNYxqmUm+O2S+YaZxzlZunv7dp3jlVQC7OyxHeHOSgxzjoSRz07BwR/R//EUX7OcJjHOEp/1HQnj+vWgc5DufVyRwur3zv7d73NoXB9z5gxrS7+4TLQaJxhEsYCjYyiYGyUMCC2zHUgfzgI1B1t8UESO2q/hBUSQlUvBiEKlUlL4GtGa8rFVpnfWmq1OsjS29HuYNP4PdUNSZNAwLFA2j1jpm9ZAu2+ob+BOPecsY+BQAA\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nlet Traces = datatable(EventText: string)\\r\\n    [\\r\\n    \"Event: NotifySliceRelease (resourceName=PipelineScheduler\\\\ntotalSlices=27\\\\nsliceNumber=23\\\\nlockTime=02/17/2016 08:40:01\\\\nreleaseTime=02/17/2016 08:40:01\\\\npreviousLockTime=02/17/2016 08:39:01)\",\\r\\n    \"Event: NotifySliceRelease (resourceName=PipelineScheduler\\\\ntotalSlices=27\\\\nsliceNumber=15\\\\nlockTime=02/17/2016 08:40:00\\\\nreleaseTime=02/17/2016 08:40:00\\\\npreviousLockTime=02/17/2016 08:39:00)\",\\r\\n    \"Event: NotifySliceRelease (resourceName=PipelineScheduler\\\\ntotalSlices=27\\\\nsliceNumber=20\\\\nlockTime=02/17/2016 08:40:01\\\\nreleaseTime=02/17/2016 08:40:01\\\\npreviousLockTime=02/17/2016 08:39:01)\",\\r\\n    \"Event: NotifySliceRelease (resourceName=PipelineScheduler\\\\ntotalSlices=27\\\\nsliceNumber=22\\\\nlockTime=02/17/2016 08:41:01\\\\nreleaseTime=02/17/2016 08:41:00\\\\npreviousLockTime=02/17/2016 08:40:01)\",\\r\\n    \"Event: NotifySliceRelease (resourceName=PipelineScheduler\\\\ntotalSlices=27\\\\nsliceNumber=16\\\\nlockTime=02/17/2016 08:41:00\\\\nreleaseTime=02/17/2016 08:41:00\\\\npreviousLockTime=02/17/2016 08:40:00)\"\\r\\n];\\r\\nTraces\\r\\n| parse kind=regex flags=s EventText with * \"resourceName=\" resourceName: string \"(.*?)totalSlices=\" totalSlices: long \"(.*?)lockTime=\" lockTime: datetime \"(.*?)releaseTime=\" releaseTime: datetime \"(.*?)previousLockTime=\" previousLockTime: datetime \"\\\\\\\\)\" \\r\\n| project-away EventText\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|resourceName|totalSlices|lockTime|releaseTime|previousLockTime|\\r\\n|---|---|---|---|---|\\r\\n|PipelineScheduler<br>|27|2016-02-17 08:40:00.0000000|2016-02-17 08:40:00.0000000|2016-02-17 08:39:00.0000000|\\r\\n|PipelineScheduler<br>|27|2016-02-17 08:40:01.0000000|2016-02-17 08:40:01.0000000|2016-02-17 08:39:01.0000000|\\r\\n|PipelineScheduler<br>|27|2016-02-17 08:40:01.0000000|2016-02-17 08:40:01.0000000|2016-02-17 08:39:01.0000000|\\r\\n|PipelineScheduler<br>|27|2016-02-17 08:41:00.0000000|2016-02-17 08:41:00.0000000|2016-02-17 08:40:00.0000000|\\r\\n|PipelineScheduler<br>|27|2016-02-17 08:41:01.0000000|2016-02-17 08:41:00.0000000|2016-02-17 08:40:01.0000000|\\r\\n\\r\\n### Relaxed mode\\r\\n\\r\\nIn this example for relaxed mode, `totalSlices` extended column must be of type `long`. However, in the parsed string, it has the value `nonValidLongValue`.\\r\\nIn `releaseTime` extended column, the value `nonValidDateTime` can\\'t be parsed as `datetime`.\\r\\nThese two extended columns will get the value `null` while the other ones, such as `sliceNumber`, still get the correct values.\\r\\n\\r\\nIf you use option `kind = simple` for the same query below, you\\'ll get `null` for all extended columns. This option is strict on extended columns, and is the difference between relaxed and simple mode.\\r\\n\\r\\n> [!NOTE]\\r\\n> In relaxed mode, extended columns can be partially matched.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA92Uz0/CMBTH70v2P7z0BGaGbijozG56I8QI8WI8lO0JldKStuNH4h9vNwIMp+gBPbge1rd9v6/99DVPoIWhZikaSCBj1o2RwMbdAqUd4srGYKzmctz0PXDP0+ZFyv8x9JXlL+uB4Ck+oEBmEBoajcp1in02w+Sez1FwiYN0glkuUAdglWWitJgk6gZgimk/n41QJ1E7AKHS6ZA7L41aYbcV0bAD9Cq+oDENA9CbZUqBVPKRCZ7dMlt+qMjmGhdc5ab3ebL2tVM1SfC7NOHlURp6nOZHEPTkENtt9JQcu0mOHypE/1OFouhrmrBGUxfQbzlK2r8uUtg5ikVPg+Xunu893/jepn/43hvMmXYoUy6zxK3AVpjBrpPAktsJnAE5ACVQDYEccpJqFDsmOS4yVFlJlXwv2eGT3UkUyavcpBrFRfMrJKRw1+hJ7UC2hqYzlOhavWJqz9mSrffQ7xu15UlfBQAA\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nlet Traces = datatable(EventText: string)\\r\\n    [\\r\\n    \"Event: NotifySliceRelease (resourceName=PipelineScheduler, totalSlices=27, sliceNumber=23, lockTime=02/17/2016 08:40:01, releaseTime=nonValidDateTime 08:40:01, previousLockTime=02/17/2016 08:39:01)\",\\r\\n    \"Event: NotifySliceRelease (resourceName=PipelineScheduler, totalSlices=27, sliceNumber=15, lockTime=02/17/2016 08:40:00, releaseTime=nonValidDateTime, previousLockTime=02/17/2016 08:39:00)\",\\r\\n    \"Event: NotifySliceRelease (resourceName=PipelineScheduler, totalSlices=nonValidLongValue, sliceNumber=20, lockTime=02/17/2016 08:40:01, releaseTime=nonValidDateTime 08:40:01, previousLockTime=02/17/2016 08:39:01)\",\\r\\n    \"Event: NotifySliceRelease (resourceName=PipelineScheduler, totalSlices=27, sliceNumber=22, lockTime=02/17/2016 08:41:01, releaseTime=02/17/2016 08:41:00, previousLockTime=02/17/2016 08:40:01)\",\\r\\n    \"Event: NotifySliceRelease (resourceName=PipelineScheduler, totalSlices=nonValidLongValue, sliceNumber=16, lockTime=02/17/2016 08:41:00, releaseTime=02/17/2016 08:41:00, previousLockTime=02/17/2016 08:40:00)\"\\r\\n];\\r\\nTraces\\r\\n| parse kind=relaxed EventText with * \"resourceName=\" resourceName \", totalSlices=\" totalSlices: long * \"sliceNumber=\" sliceNumber: long * \"lockTime=\" lockTime \", releaseTime=\" releaseTime: date \",\" * \"previousLockTime=\" previousLockTime: date \")\" *\\r\\n| project-away EventText\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|resourceName|totalSlices|sliceNumber|lockTime|releaseTime|previousLockTime|\\r\\n|---|---|---|---|---|---|\\r\\n|PipelineScheduler|27|15|02/17/2016 08:40:00||2016-02-17 08:39:00.0000000|\\r\\n|PipelineScheduler|27|23|02/17/2016 08:40:01||2016-02-17 08:39:01.0000000|\\r\\n|PipelineScheduler||20|02/17/2016 08:40:01||2016-02-17 08:39:01.0000000|\\r\\n|PipelineScheduler||16|02/17/2016 08:41:00|2016-02-17 08:41:00.0000000|2016-02-17 08:40:00.0000000|\\r\\n|PipelineScheduler|27|22|02/17/2016 08:41:01|2016-02-17 08:41:00.0000000|2016-02-17 08:40:01.0000000|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/parseoperator\",\"parseoperator.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"parse_csv\",\"Splits a given string representing a single record of comma-separated values and returns a string array with these values.\",\"## Syntax\\r\\n\\r\\n`parse_csv(`*csv_text*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *csv_text* | string | &check; | A single record of comma-separated values. |\\r\\n\\r\\n> [!NOTE]\\r\\n>\\r\\n> * Embedded line feeds, commas, and quotes may be escaped using the double quotation mark ('\\\"').\\r\\n> * This function doesn't support multiple records per row (only the first record is taken).\\r\\n\\r\\n## Returns\\r\\n\\r\\nA string array that contains the split values.\",'### Filter by count of values in record\\r\\n\\r\\nCount ADX conference sessions with more than three participants.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA3POz0tLLUrNS04NTi0uzszPK+aqUSjPAAopJBYVJVbG56TmpZdkaBQkFhWnxicXl4FYJZnJmQWJeSXFmpoKdgrGQB0pmcUlmXnJJQpaAB0oOCtRAAAA\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nConferenceSessions\\r\\n| where array_length(parse_csv(participants)) > 3\\r\\n| distinct *\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|sessionid|...|participants|\\r\\n|--|--|--|\\r\\n|CON-PRT157|...|Guy Reginiano, Guy Yehudy, Pankaj Suri, Saeed Copty|\\r\\n|BRK3099|...|Yoni Leibowitz, Eric Fleischman, Robert Pack, Avner Aharoni|\\r\\n\\r\\n### Use escaping quotes\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAxXFMQqAMAwF0KuUv1Qhi46CozdwFCSWIIVSa5N6fpU3vFJjNldFW7K5cFXZgz6dZyYc9AGFQFg0cIn5dHe7THRywBotCQBCilmGLf+N8P0LWIqWMVMAAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint result=parse_csv(\\'aa,\"b,b,b\",cc,\"Escaping quotes: \"\"Title\"\"\",\"line1\\\\nline2\"\\')\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|result|\\r\\n|---|\\r\\n|[<br>  \"aa\",<br>  \"b,b,b\",<br>  \"cc\",<br>  \"Escaping quotes: \\\\\"Title\\\\\"\",<br>  \"line1\\\\nline2\"<br>]|\\r\\n\\r\\n### CSV with multiple records\\r\\n\\r\\nOnly the first record is taken since this function does not support multiple records. \\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAysoyswrUShKLS7NKYnPBRKZ8UWpyflFKbYFiUXFqfHJxWUa6hARQ51EnSSd5Jg8CNdIp0KnUqdKXRMAyO6RzEMAAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint result_multi_record=parse_csv(\\'record1,a,b,c\\\\nrecord2,x,y,z\\')\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|result_multi_record|\\r\\n|---|\\r\\n|[<br>  \"record1\",<br>  \"a\",<br>  \"b\",<br>  \"c\"<br>]|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/parsecsvfunction\",\"parsecsvfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"parse_ipv4\",\"Converts IPv4 string to a signed 64-bit wide long number representation in big-endian order.\",\"## Syntax\\r\\n\\r\\n`parse_ipv4(`*ip*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *ip* | string | &check; | The IPv4 that will be converted to long. The value may include net-mask using [IP-prefix notation](#ip-prefix-notation).|\\r\\n\\r\\n[!INCLUDE [ip-prefix-notation](../../includes/ip-prefix-notation.md)]\\r\\n\\r\\n## Returns\\r\\n\\r\\nIf conversion is successful, the result will be a long number.\\r\\nIf conversion isn't successful, the result will be `null`.\",\"> [!div class=\\\"nextstepaction\\\"]\\r\\n> <a href=\\\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA0tJLAHCpJxUjcyC+OKSosy8dCsFCK3JFc2lAATqhpZGeoZmFnqGeobqOihcfSMTkIiRqakeEtY3NlTniuWqUUitKEnNS1EAmpyTn5euYKtQkFhUnBqfWVBmgrBOEwD8UomugwAAAA==\\\" target=\\\"_blank\\\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\ndatatable(ip_string: string)\\r\\n[\\r\\n    '192.168.1.1', '192.168.1.1/24', '255.255.255.255/31'\\r\\n]\\r\\n| extend ip_long = parse_ipv4(ip_string)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|ip_string|ip_long|\\r\\n|---|---|\\r\\n|192.168.1.1|3232235777|\\r\\n|192.168.1.1/24|3232235776|\\r\\n|255.255.255.255/31|4294967294|\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/parse-ipv4function\",\"parse-ipv4function.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"parse_ipv4_mask\",\"Converts the input string of IPv4 and netmask to a signed, 64-bit wide, long number representation in big-endian order.\",\"## Syntax\\r\\n\\r\\n`parse_ipv4_mask(`*ip* `,` *prefix*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *ip*| string | &check; | The IPv4 address to convert to a long number.|\\r\\n| *prefix*| int | &check; | An integer from 0 to 32 representing the number of most-significant bits that are taken into account.|\\r\\n\\r\\n## Returns\\r\\n\\r\\nIf conversion is successful, the result will be a [long](scalar-data-types/long.md) number.\\r\\nIf conversion isn't successful, the result will be `null`.\",'> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAysoyswrUShILCpOjc8sKDOJz00sztZQMjQy1zMAQkMlHQUjE00AwjOPByYAAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint parse_ipv4_mask(\"127.0.0.1\", 24)\\r\\n```',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/parse-ipv4-maskfunction\",\"parse-ipv4-maskfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"parse_ipv6\",\"Converts IPv6 or IPv4 string to a canonical IPv6 string representation.\",\"## Syntax\\r\\n\\r\\n`parse_ipv6(`*ip*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *ip* | string | &check; | The IPv6/IPv4 network address that will be converted to canonical IPv6 representation. The value may include net-mask using [IP-prefix notation](#ip-prefix-notation).|\\r\\n\\r\\n[!INCLUDE [ip-prefix-notation](../../includes/ip-prefix-notation.md)]\\r\\n\\r\\n## Returns\\r\\n\\r\\nIf conversion is successful, the result will be a string representing a canonical IPv6 network address.\\r\\nIf conversion isn't successful, the result will be an empty string.\",\"> [!div class=\\\"nextstepaction\\\"]\\r\\n> <a href=\\\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA0tJLAHCpJxUjcyCMhMrheKSosy8dE2uaC4FIFA3tDTSMzSz0DMyNQVhdR0MIX0jE5AolAdXyBXLVaOQWlGSmpeiADTZTMFWoSCxqDg1HsQB26UJANsJke17AAAA\\\" target=\\\"_blank\\\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\ndatatable(ipv4: string)\\r\\n[\\r\\n    '192.168.255.255', '192.168.255.255/24', '255.255.255.255'\\r\\n]\\r\\n| extend ipv6 = parse_ipv6(ipv4)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n| ipv4               | ipv6                                    |\\r\\n|--------------------|-----------------------------------------|\\r\\n| 192.168.255.255    | 0000:0000:0000:0000:0000:ffff:c0a8:ffff |\\r\\n| 192.168.255.255/24 | 0000:0000:0000:0000:0000:ffff:c0a8:ff00 |\\r\\n| 255.255.255.255    | 0000:0000:0000:0000:0000:ffff:ffff:ffff |\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/parse-ipv6function\",\"parse-ipv6function.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"parse_ipv6_mask\",\"Converts IPv6/IPv4 string and netmask to a canonical IPv6 string representation.\",\"## Syntax\\r\\n\\r\\n`parse_ipv6_mask(`*ip*`,` *prefix*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *ip*| string | | The IPv6/IPv4 network address to convert to canonical IPv6 representation. The value may include net-mask using [IP-prefix notation](#ip-prefix-notation).|\\r\\n| *prefix*| int | | An integer from 0 to 128 representing the number of most-significant bits that are taken into account.|\\r\\n\\r\\n[!INCLUDE [ip-prefix-notation](../../includes/ip-prefix-notation.md)]\\r\\n\\r\\n## Returns\\r\\n\\r\\nIf conversion is successful, the result will be a string representing a canonical IPv6 network address.\\r\\nIf conversion isn't successful, the result will be `null`.\",\"> [!div class=\\\"nextstepaction\\\"]\\r\\n> <a href=\\\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA61S0U7DIBR971fct7qkriuhSEn8AN98N6Zh5TqJFUhh0wc/XtqOmenmfBBCIMA599x7rpIhznWPV9q1PgzabATMewEGw6v0LwJ6azaL7CGDOMoS7u53FKRSA3qPfrrNq4YsK8aXpK7HlRdQkVUxfY+H67UOiQ60h61HdRJXEjpB6a/QAqQ/UgHKojd5GF9h6xwOwCEC9+L25EfieIrAz4qbU2XfU31CvhKC10ogJ51oKGXipmnogRYuMp/lKGPGqQAXSpfUvenwPBfD2GimtmYOIcQpT/6Q9k9kcoX/lyuP2Qfge0CjQDvWdtJYozvZwy04OXhstduxdiT/6stDPy4+ATm+kta1AgAA\\\" target=\\\"_blank\\\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\ndatatable(ip_string: string, netmask: long)\\r\\n[\\r\\n    // IPv4 addresses\\r\\n    '192.168.255.255', 120,  // 120-bit netmask is used\\r\\n    '192.168.255.255/24', 124,  // 120-bit netmask is used, as IPv4 address doesn't use upper 8 bits\\r\\n    '255.255.255.255', 128,  // 128-bit netmask is used\\r\\n    // IPv6 addresses\\r\\n    'fe80::85d:e82c:9446:7994', 128,     // 128-bit netmask is used\\r\\n    'fe80::85d:e82c:9446:7994/120', 124, // 120-bit netmask is used\\r\\n    // IPv6 with IPv4 notation\\r\\n    '::192.168.255.255', 128,  // 128-bit netmask is used\\r\\n    '::192.168.255.255/24', 128,  // 120-bit netmask is used, as IPv4 address doesn't use upper 8 bits\\r\\n]\\r\\n| extend ip6_canonical = parse_ipv6_mask(ip_string, netmask)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|ip_string|netmask|ip6_canonical|\\r\\n|---|---|---|\\r\\n|192.168.255.255|120|0000:0000:0000:0000:0000:ffff:c0a8:ff00|\\r\\n|192.168.255.255/24|124|0000:0000:0000:0000:0000:ffff:c0a8:ff00|\\r\\n|255.255.255.255|128|0000:0000:0000:0000:0000:ffff:ffff:ffff|\\r\\n|fe80::85d:e82c:9446:7994|128|fe80:0000:0000:0000:085d:e82c:9446:7994|\\r\\n|fe80::85d:e82c:9446:7994/120|124|fe80:0000:0000:0000:085d:e82c:9446:7900|\\r\\n|::192.168.255.255|128|0000:0000:0000:0000:0000:ffff:c0a8:ffff|\\r\\n|::192.168.255.255/24|128|0000:0000:0000:0000:0000:ffff:c0a8:ff00|\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/parse-ipv6-maskfunction\",\"parse-ipv6-maskfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"parse_json\",\"Interprets a `string` as a JSON value and returns the value as `dynamic`. If possible, the value is converted into relevant [data types](scalar-data-types/index.md).  For strict parsing with no data type conversion, use [extract()](extractfunction.md) or [extract_json()](extractjsonfunction.md) functions.\",\"It's better to use the parse_json() function over the [extract_json()](./extractjsonfunction.md) function when you need to extract more than one element of a JSON compound object. Use [dynamic()](./scalar-data-types/dynamic.md) when possible.\\r\\n\\r\\n> **Deprecated aliases:** parsejson(), toobject(), todynamic()\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`parse_json(`*json*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *json* | string | &check; | The string in the form of a [JSON-formatted value](https://json.org/) or a [dynamic](./scalar-data-types/dynamic.md) property bag to parse as JSON.|\\r\\n\\r\\n## Returns\\r\\n\\r\\nAn object of type `dynamic` that is determined by the value of *json*:\\r\\n\\r\\n* If *json* is of type `dynamic`, its value is used as-is.\\r\\n* If *json* is of type `string`, and is a [properly formatted JSON string](https://json.org/), then the string is parsed, and the value produced is returned.\\r\\n* If *json* is of type `string`, but it isn't a [properly formatted JSON string](https://json.org/), then the returned value is an object of type `dynamic` that holds the original `string` value.\",'In the following example, when `context_custom_metrics` is a `string`\\r\\nthat looks like this:\\r\\n\\r\\n```json\\r\\n{\"duration\":{\"value\":118.0,\"count\":5.0,\"min\":100.0,\"max\":150.0,\"stdDev\":0.0,\"sampledValue\":118.0,\"sum\":118.0}}\\r\\n```\\r\\n\\r\\nthen the following query retrieves the value of the `duration` slot\\r\\nin the object, and from that it retrieves two slots, `duration.value` and\\r\\n `duration.min` (`118.0` and `110.0`, respectively).\\r\\n\\r\\n```\\r\\nT\\r\\n| extend d=parse_json(context_custom_metrics) \\r\\n| extend duration_value=d.duration.value, duration_min=d[\"duration\"][\"min\"]\\r\\n```\\r\\n\\r\\n**Notes**\\r\\n\\r\\nIt\\'s common to have a JSON string describing a property bag in which\\r\\none of the \"slots\" is another JSON string. \\r\\n\\r\\nFor example:\\r\\n\\r\\n```\\r\\nlet d=\\'{\"a\":123, \"b\":\"{\\\\\\\\\"c\\\\\\\\\":456}\"}\\';\\r\\nprint d\\r\\n```\\r\\n\\r\\nIn such cases, it isn\\'t only necessary to invoke `parse_json` twice, but also\\r\\nto make sure that in the second call, `tostring` is used. Otherwise, the\\r\\nsecond call to `parse_json` will just pass on the input to the output as-is,\\r\\nbecause its declared type is `dynamic`.\\r\\n\\r\\n```\\r\\nlet d=\\'{\"a\":123, \"b\":\"{\\\\\\\\\"c\\\\\\\\\":456}\"}\\';\\r\\nprint d_b_c=parse_json(tostring(parse_json(d).b)).c\\r\\n```',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/parsejsonfunction\",\"parsejsonfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"parse_path\",\"Parses a file path `string` and returns a [`dynamic`](./scalar-data-types/dynamic.md) object that contains the following parts of the path:\",'* Scheme\\r\\n* RootPath\\r\\n* DirectoryPath\\r\\n* DirectoryName\\r\\n* Filename\\r\\n* Extension\\r\\n* AlternateDataStreamName\\r\\n\\r\\nIn addition to the simple paths with both types of slashes, the function supports paths with:\\r\\n\\r\\n* Schemas. For example, \"file://...\"\\r\\n* Shared paths. For example, \"\\\\\\\\shareddrive\\\\users...\"\\r\\n* Long paths. For example, \"\\\\\\\\?\\\\C:...\"\"\\r\\n* Alternate data streams. For example, \"file1.exe:file2.exe\"\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`parse_path(`*path*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *path* | string | &check; | The file path.|\\r\\n\\r\\n## Returns\\r\\n\\r\\nAn object of type `dynamic` that included the path components as listed above.','> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA22NQQrDIBBF94J3EFcJFN0LhUKOUUMwOE0Ek4ozASk9fOMiLYHOrOY95n/vaN8xQpMMUg7r1ArO7pyJfW6yM5ZgSfYRIigqJC+H+YtlBUbrzujq9eENPhdQUOD3by3OLoO3G0LGc4uaXt9EvWHWMYznQMlZz9lbQCFYvUiO5iG5TCiu+5ERhoqa1H4A8WAkd+AAAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\ndatatable(p:string) \\r\\n[\\r\\n    @\"C:\\\\temp\\\\file.txt\",\\r\\n    @\"temp\\\\file.txt\",\\r\\n    \"file://C:/temp/file.txt:some.exe\",\\r\\n    @\"\\\\\\\\shared\\\\users\\\\temp\\\\file.txt.gz\",\\r\\n    \"/usr/lib/temp/file.txt\"\\r\\n]\\r\\n| extend path_parts = parse_path(p)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|p|path_parts\\r\\n|---|---\\r\\n|C:\\\\temp\\\\file.txt|{\"Scheme\":\"\",\"RootPath\":\"C:\",\"DirectoryPath\":\"C:\\\\\\\\temp\",\"DirectoryName\":\"temp\",\"Filename\":\"file.txt\",\"Extension\":\"txt\",\"AlternateDataStreamName\":\"\"}\\r\\n|temp\\\\file.txt|{\"Scheme\":\"\",\"RootPath\":\"\",\"DirectoryPath\":\"temp\",\"DirectoryName\":\"temp\",\"Filename\":\"file.txt\",\"Extension\":\"txt\",\"AlternateDataStreamName\":\"\"}\\r\\n|file://C:/temp/file.txt:some.exe|{\"Scheme\":\"file\",\"RootPath\":\"C:\",\"DirectoryPath\":\"C:/temp\",\"DirectoryName\":\"temp\",\"Filename\":\"file.txt\",\"Extension\":\"txt\",\"AlternateDataStreamName\":\"some.exe\"}\\r\\n|\\\\\\\\shared\\\\users\\\\temp\\\\file.txt.gz|{\"Scheme\":\"\",\"RootPath\":\"\",\"DirectoryPath\":\"\\\\\\\\\\\\\\\\shared\\\\\\\\users\\\\\\\\temp\",\"DirectoryName\":\"temp\",\"Filename\":\"file.txt.gz\",\"Extension\":\"gz\",\"AlternateDataStreamName\":\"\"}\\r\\n|/usr/lib/temp/file.txt|{\"Scheme\":\"\",\"RootPath\":\"\",\"DirectoryPath\":\"/usr/lib/temp\",\"DirectoryName\":\"temp\",\"Filename\":\"file.txt\",\"Extension\":\"txt\",\"AlternateDataStreamName\":\"\"}',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/parsepathfunction\",\"parsepathfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"parse_url\",\"Parses an absolute URL `string` and returns a `dynamic` object contains URL parts.\",\"> **Deprecated aliases:** parseurl()\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`parse_url(`*url*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *url* | string | &check; | The URL or the query part of the URL.|\\r\\n\\r\\n## Returns\\r\\n\\r\\nAn object of type [dynamic](./scalar-data-types/dynamic.md) that included the URL components: Scheme, Host, Port, Path, Username, Password, Query Parameters, Fragment.\",'> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAw3GUQpAQBAA0KuIEl/TLl9q4wwuoIlhhbXNzHJ96n28yHvQbCRJp7qILDQlPqtcZk8XdQBJiAP+jSjy3rwM/hbtjG1aUL8L/BAiqu8P4x5THtY9tlgZt4uC5vUH0Z3WuWIAAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint Result=parse_url(\"scheme://username:password@host:1234/this/is/a/path?k1=v1&k2=v2#fragment\")\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|Result|\\r\\n|--|\\r\\n|{\"Scheme\":\"scheme\", \"Host\":\"host\", \"Port\":\"1234\", \"Path\":\"this/is/a/path\", \"Username\":\"username\", \"Password\":\"password\", \"Query Parameters\":\"{\"k1\":\"v1\", \"k2\":\"v2\"}\", \"Fragment\":\"fragment\"}|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/parseurlfunction\",\"parseurlfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"parse_urlquery\",\"Returns a `dynamic` object that contains the query parameters.\",\"> **Deprecated aliases:** parseurlquery()\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`parse_urlquery(`*query*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *query* | string | &check; | The query part of the URL. The format must follow URL query standards (key=value& ...).|\\r\\n\\r\\n## Returns\\r\\n\\r\\nAn object of type [dynamic](./scalar-data-types/dynamic.md) that includes the query parameters.\",'> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAysoyswrUQhKLS7NKbEtSCwqTo0vLcopLE0tqtRQyja0LTNUyzayLTNSyza2LTNW0gQABqxVODAAAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint Result=parse_urlquery(\"k1=v1&k2=v2&k3=v3\")\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|Result|\\r\\n|--|\\r\\n|{ \"Query Parameters\":\"{\"k1\":\"v1\", \"k2\":\"v2\", \"k3\":\"v3\"}\" }|\\r\\n\\r\\nThe following example uses a function to extract specific query parameters.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA4WPwQrCMBBE74X+w9KDaaAV9abSf9CDXkqRgksppLVuNlVR/900oVDxYC7Jzs6bIQoZKuS9QXrsSiqbY6kMQgbxdZA0U91WG/B3At1gGUcJzzAAe5QNcRttQfvQeDKkXMA0Rm69nS9+jj2TR64dXD0yko6Kee52hQyDt6U6a2c4kPLODERf4y3rdbpaLNezjlAj9Zg6lcmgCIMX4J2xPcMgWuT3l/EYmPg8ISfUmPmX/CoX8gPcEHXrUQEAAA==\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nlet getQueryParamValue = (querystring: string, param: string) {\\r\\n    let params = parse_urlquery(querystring);\\r\\n    tostring(params[\"Query Parameters\"].[param])\\r\\n};\\r\\nprint UrlQuery = \\'view=vs-2019&preserve-view=true\\'\\r\\n| extend view = getQueryParamValue(UrlQuery, \\'view\\')\\r\\n| extend preserve = getQueryParamValue(UrlQuery, \\'preserve-view\\')\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n| UrlQuery | view | preserve |\\r\\n|--|--|--|\\r\\n|view=vs-2019&preserve-view=true|vs-2019|true|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/parseurlqueryfunction\",\"parseurlqueryfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"parse_user_agent\",\"Interprets a user-agent string, which identifies the user's browser and provides certain system details to servers hosting the websites the user visits. The result is returned as [`dynamic`](./scalar-data-types/dynamic.md).\",'## Syntax\\r\\n\\r\\n`parse_user_agent(`*user-agent-string*, *look-for*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *user-agent-string*| string | &check; | The user-agent string to parse.|\\r\\n| *look-for*| string or dynamic | &check; | The value to search for in *user-agent-string*. The possible options are \"browser\", \"os\", or \"device\". If only a single parsing target is required, it can be passed a `string` parameter. If two or three targets are required, they can be passed as a `dynamic` array.|\\r\\n\\r\\n## Returns\\r\\n\\r\\nAn object of type `dynamic` that contains the information about the requested parsing targets.\\r\\n\\r\\nBrowser: Family, MajorVersion, MinorVersion, Patch\\r\\n\\r\\nOperatingSystem: Family, MajorVersion, MinorVersion, Patch, PatchMinor\\r\\n\\r\\nDevice: Family, Brand, Model\\r\\n\\r\\n> [!WARNING]\\r\\n> The function implementation is built on regex checks of the input string against a huge number of predefined patterns. Therefore the expected time and CPU consumption is high.\\r\\nWhen the function is used in a query, make sure it runs in a distributed manner on multiple machines.\\r\\nIf queries with this function are frequently used, you may want to pre-create the results via [update policy](../management/updatepolicy.md), but you need to take into account that using this function inside the update policy will increase the ingestion latency.','### Look-for parameter as string\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAz3OsQrCMBSF4d2nuGRKoSZWySDFoZNK7aKWjiWxFwkNSUgqFvHhjQ5uZ/jhOz5oO8EjYpB3TGsHpHEvbYzkgq2AdtoO7hlLaEtAu2wvGVTeG+xQ1XriYlOwLdD6cG1OORg9IuzxNrpUDU5hdTzzNROsIIs34DyhHWBOhpchYv9V+x9L/wdyICokEAPJPkPKisOcAAAA\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint useragent = \"Mozilla/5.0 (Windows; U; en-US) AppleWebKit/531.9 (KHTML, like Gecko) AdobeAIR/2.5.1\"\\r\\n| extend x = parse_user_agent(useragent, \"browser\") \\r\\n```\\r\\n\\r\\nExpected result is a dynamic object:\\r\\n\\r\\n{\\r\\n  \"Browser\": {\\r\\n    \"Family\": \"AdobeAIR\",\\r\\n    \"MajorVersion\": \"2\",\\r\\n    \"MinorVersion\": \"5\",\\r\\n    \"Patch\": \"1\"\\r\\n  }\\r\\n}\\r\\n\\r\\n### Look-for parameter as dynamic array\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAz2PQUvDQBCF7/6KYU8JJNlsUkUpHiQFlTa1EKWHImWSTMqQ7W7YpNqKP97Vgzx4DA/e8L3BsZngNJLDA/nrHkRpv1hrlNdJCkF1OdaM5qWSd0k2h7c5VOSYxptU5omCte0Z17cqzqVKE688g42zHWuS5fNiE2f+SWFNx4eTw4mtkcVqUcTKd0N4GAZNW6qXPMmZyiFYPr2Wqwg09wSP1PQ2hAo7dCxn4uob6DyRaeHsKQd0I+1/ufd/4MH/hAjai8EjN8FO1M5++lxEwo7eWvrghsR7GP4AbEGfNfcAAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint useragent = \"Mozilla/5.0 (SymbianOS/9.2; U; Series60/3.1 NokiaN81-3/10.0.032 Profile/MIDP-2.0 Configuration/CLDC-1.1 ) AppleWebKit/413 (KHTML, like Gecko) Safari/4\"\\r\\n| extend x = parse_user_agent(useragent, dynamic([\"browser\",\"os\",\"device\"])) \\r\\n```\\r\\n\\r\\nExpected result is a dynamic object:\\r\\n\\r\\n{\\r\\n  \"Browser\": {\\r\\n    \"Family\": \"Nokia OSS Browser\",\\r\\n    \"MajorVersion\": \"3\",\\r\\n    \"MinorVersion\": \"1\",\\r\\n    \"Patch\": \"\"\\r\\n  },\\r\\n  \"OperatingSystem\": {\\r\\n    \"Family\": \"Symbian OS\",\\r\\n    \"MajorVersion\": \"9\",\\r\\n    \"MinorVersion\": \"2\",\\r\\n    \"Patch\": \"\",\\r\\n    \"PatchMinor\": \"\"\\r\\n  },\\r\\n  \"Device\": {\\r\\n    \"Family\": \"Nokia N81\",\\r\\n    \"Brand\": \"Nokia\",\\r\\n    \"Model\": \"N81-3\"\\r\\n  }\\r\\n}',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/parse-useragentfunction\",\"parse-useragentfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"parse_version\",\"Converts the input string representation of the version to a comparable decimal number.\",\"## Syntax\\r\\n\\r\\n`parse_version` `(`*version*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *version* | string | &check; | The version to be parsed.|\\r\\n\\r\\n> [!NOTE]\\r\\n>\\r\\n> * *version* must contain from one to four version parts, represented as numbers and separated with dots ('.').\\r\\n> * Each part of *version* may contain up to eight digits, with the max value at 99999999.\\r\\n> * If the number of parts is less than four, all the missing parts are considered as trailing. For example, `1.0` == `1.0.0.0`.\\r\\n\\r\\n## Returns\\r\\n\\r\\nIf conversion is successful, the result will be a decimal.\\r\\nIf conversion is unsuccessful, the result will be `null`.\",'> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA11QYU/DIBD93l/x7CeITdcyF6MG/4gxC1txZWtpAwyd8cd7UJeod8nx7t3jcWHQAV2ARKcC5W7QLD7CB2fsgRegeMm1bOqUm7Ja4H3dXOF6AWI52losowTW9V2GqTz8RPZpyuL1qehC8YXZTUe9D4itjBW2J32RLYg/TsbiZGwnjbXagdGav9TiqqbdW47J5obuvffaaXLDjSQVEf48jsqZz0xKjOqDxZZXNEydsSwKjt0FrFe+TyPcYoGCc6xWcHqcIv0HuvM8mL0KZrL+z+bJrEJvDvT2NmrnSUHmxryxWTmvr1x2f8Y/TqRlsgf/Bt4b/NePAQAA\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nlet dt = datatable(v: string)\\r\\n    [\\r\\n    \"0.0.0.5\", \"0.0.7.0\", \"0.0.3\", \"0.2\", \"0.1.2.0\", \"1.2.3.4\", \"1\", \"99999999.0.0.0\"\\r\\n];\\r\\ndt\\r\\n| project v1=v, _key=1 \\r\\n| join kind=inner (dt | project v2=v, _key = 1) on _key\\r\\n| where v1 != v2\\r\\n| summarize v1 = max(v1), v2 = min(v2) by (hash(v1) + hash(v2)) // removing duplications\\r\\n| project v1, v2, higher_version = iif(parse_version(v1) > parse_version(v2), v1, v2)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|v1|v2|higher_version|\\r\\n|---|---|---|\\r\\n|99999999.0.0.0|0.0.0.5|99999999.0.0.0|\\r\\n|1|0.0.0.5|1|\\r\\n|1.2.3.4|0.0.0.5|1.2.3.4|\\r\\n|0.1.2.0|0.0.0.5|0.1.2.0|\\r\\n|0.2|0.0.0.5|0.2|\\r\\n|0.0.3|0.0.0.5|0.0.3|\\r\\n|0.0.7.0|0.0.0.5|0.0.7.0|\\r\\n|99999999.0.0.0|0.0.7.0|99999999.0.0.0|\\r\\n|1|0.0.7.0|1|\\r\\n|1.2.3.4|0.0.7.0|1.2.3.4|\\r\\n|0.1.2.0|0.0.7.0|0.1.2.0|\\r\\n|0.2|0.0.7.0|0.2|\\r\\n|0.0.7.0|0.0.3|0.0.7.0|\\r\\n|99999999.0.0.0|0.0.3|99999999.0.0.0|\\r\\n|1|0.0.3|1|\\r\\n|1.2.3.4|0.0.3|1.2.3.4|\\r\\n|0.1.2.0|0.0.3|0.1.2.0|\\r\\n|0.2|0.0.3|0.2|\\r\\n|99999999.0.0.0|0.2|99999999.0.0.0|\\r\\n|1|0.2|1|\\r\\n|1.2.3.4|0.2|1.2.3.4|\\r\\n|0.2|0.1.2.0|0.2|\\r\\n|99999999.0.0.0|0.1.2.0|99999999.0.0.0|\\r\\n|1|0.1.2.0|1|\\r\\n|1.2.3.4|0.1.2.0|1.2.3.4|\\r\\n|99999999.0.0.0|1.2.3.4|99999999.0.0.0|\\r\\n|1.2.3.4|1|1.2.3.4|\\r\\n|99999999.0.0.0|1|99999999.0.0.0|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/parse-versionfunction\",\"parse-versionfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"parse_xml\",\"Interprets a `string` as an XML value, converts the value to a JSON, and returns the value as `dynamic`.\",'## Syntax\\r\\n\\r\\n`parse_xml(`*xml*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *xml*| string | &check; | The XML-formatted string value to parse.|\\r\\n\\r\\n## Returns\\r\\n\\r\\nAn object of type [dynamic](./scalar-data-types/dynamic.md) that is determined by the value of *xml*, or null, if the XML format is invalid.\\r\\n\\r\\nThe conversion is done as follows:\\r\\n\\r\\nXML                                |JSON                                            |Access\\r\\n-----------------------------------|------------------------------------------------|--------------\\r\\n`<e/>`                             | { \"e\": null }                                  | o.e\\r\\n`<e>text<\\/e>`\\t                   | { \"e\": \"text\" }\\t                            | o.e\\r\\n`<e name=\"value\" />`               | { \"e\":{\"@name\": \"value\"} }\\t                    | o.e[\"@name\"]\\r\\n`<e name=\"value\">text<\\/e>`         | { \"e\": { \"@name\": \"value\", \"#text\": \"text\" } } | o.e[\"@name\"] o.e[\"#text\"]\\r\\n`<e> <a>text<\\/a> <b>text<\\/b> <\\/e>` | { \"e\": { \"a\": \"text\", \"b\": \"text\" } }\\t        | o.e.a o.e.b\\r\\n`<e> <a>text<\\/a> <a>text<\\/a> <\\/e>` | { \"e\": { \"a\": [\"text\", \"text\"] } }\\t            | o.e.a[0] o.e.a[1]\\r\\n`<e> text <a>text<\\/a> <\\/e>`        | { \"e\": { \"#text\": \"text\", \"a\": \"text\" } }\\t    | 1`o.e[\"#text\"] o.e.a\\r\\n\\r\\n> [!NOTE]\\r\\n>\\r\\n> * Maximal input `string` length for `parse_xml` is 1 MB (1,048,576 bytes). Longer strings interpretation will result in a null object.\\r\\n> * Only element nodes, attributes and text nodes will be translated. Everything else will be skipped.','In the following example, when `context_custom_metrics` is a `string` that looks like this:\\r\\n\\r\\n```xml\\r\\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\\r\\n<duration>\\r\\n    <value>118.0<\\/value>\\r\\n    <count>5.0<\\/count>\\r\\n    <min>100.0<\\/min>\\r\\n    <max>150.0<\\/max>\\r\\n    <stdDev>0.0<\\/stdDev>\\r\\n    <sampledValue>118.0<\\/sampledValue>\\r\\n    <sum>118.0<\\/sum>\\r\\n<\\/duration>\\r\\n```\\r\\n\\r\\nthen the following CSL Fragment translates the XML to the following JSON:\\r\\n\\r\\n```json\\r\\n{\\r\\n    \"duration\": {\\r\\n        \"value\": 118.0,\\r\\n        \"count\": 5.0,\\r\\n        \"min\": 100.0,\\r\\n        \"max\": 150.0,\\r\\n        \"stdDev\": 0.0,\\r\\n        \"sampledValue\": 118.0,\\r\\n        \"sum\": 118.0\\r\\n    }\\r\\n}\\r\\n```\\r\\n\\r\\nand retrieves the value of the `duration` slot\\r\\nin the object, and from that it retrieves two slots, `duration.value` and\\r\\n `duration.min` (`118.0` and `100.0`, respectively).\\r\\n\\r\\n```\\r\\nT\\r\\n| extend d=parse_xml(context_custom_metrics) \\r\\n| extend duration_value=d.duration.value, duration_min=d[\"duration\"][\"min\"]\\r\\n```',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/parse-xmlfunction\",\"parse-xmlfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.OperatorToken,\"parse-kv\",\"Extracts structured information from a string expression and represents the information in a key/value form.\",\"The following extraction modes are supported:\\r\\n\\r\\n* [**Specified delimeter**](#specified-delimeter): Extraction based on specified delimiters that dictate how keys/values and pairs are separated from each other.\\r\\n* [**Non-specified delimeter**](#non-specified-delimiter): Extraction with no need to specify delimiters. Any non-alphanumeric character is considered a delimiter.\\r\\n* [**Regex**](#regex): Extraction based on [RE2](re2.md) regular expression.\\r\\n\\r\\n## Syntax\\r\\n\\r\\n### Specified delimeter\\r\\n\\r\\n*T* `|` `parse-kv` *Expression* `as` `(` *KeysList* `)` `with` `(` `pair_delimiter` `=` *PairDelimiter* `,` `kv_delimiter` `=` *KvDelimiter*  [`,` `quote` `=` *QuoteChars* ... [`,` `escape` `=` *EscapeChar* ...]] [`,` `greedy` `=` `true`] `)`\\r\\n\\r\\n### Non-specified delimiter\\r\\n\\r\\n*T* `|` `parse-kv` *Expression* `as` `(` *KeysList* `)` `with` `(` [`quote` `=` *QuoteChars* ... [`,` `escape` `=` *EscapeChar* ...]] `)`\\r\\n\\r\\n### Regex\\r\\n\\r\\n*T* `|` `parse-kv` *Expression* `as` `(` *KeysList* `)` `with` `(` `regex` `=` *RegexPattern*`)` `)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n|Name|Type|Required|Description|\\r\\n|--|--|--|--|\\r\\n|*Expression*|string|&check;|The expression from which to extract key values.|\\r\\n|*KeysList*|string|&check;|A comma-separated list of key names and their value data types. The order of the keys doesn't have to match the order in which they appear in the text.|\\r\\n|*PairDelimiter*|string||A delimiter that separates key value pairs from each other.|\\r\\n|*KvDelimiter*|string||A delimiter that separates keys from values.|\\r\\n|*QuoteChars*|string||A one- or two-character string literal representing opening and closing quotes that key name or the extracted value may be wrapped with. The parameter can be repeated to specify a separate set of opening/closing quotes.|\\r\\n|*EscapeChar*|string||A one-character string literal describing a character that may be used for escaping special characters in a quoted value. The parameter can be repeated if multiple escape characters are used.|\\r\\n|*RegexPattern*|string||A [RE2](re2.md) regular expression containing two capturing groups exactly. The first group represents the key name, and the second group represents the key value.|\\r\\n\\r\\n## Returns\\r\\n\\r\\nThe original input tabular expression *T*, extended with columns per specified keys to extract.\\r\\n\\r\\n> [!NOTE]\\r\\n>\\r\\n> * If a key doesn't appear in a record, the corresponding column value will either be `null` or an empty string, depending on the column type.\\r\\n> * Only keys that are listed in the operator are extracted.\\r\\n> * The first appearance of a key is extracted, and subsequent values are ignored.\\r\\n> * When extracting keys and values, leading and trailing white spaces are ignored.\",'### Extraction with well-defined delimiters\\r\\n\\r\\nIn the following example, keys and values are separated by well defined delimiters. These delimeters are comma and colon characters.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA02N0QqCMBiF73uKH29UmGClFAMfQKiuvI/h/tqfNmVbs6CHz1FCl+cczveNhrQD60wVNcqgkLXkRbnfFeVus2VwFK0ijfw0SMzzNYMGn45DoxAsGk8tAll4jAwO6LHnUOvLEK3eMApjMet8QIOwkHyPcyJ9nTGLqx9CXDS/PYWJnIJkFGTOEnu6k0NTxSxm0Pn/hsdpkJnhhq3LxCReAfEBrq2ju9UAAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint str=\"ThreadId:458745723, Machine:Node001, Text: The service is up, Level: Info\"\\r\\n| parse-kv str as (Text: string, ThreadId:long, Machine: string) with (pair_delimiter=\\',\\', kv_delimiter=\\':\\')\\r\\n| project-away str\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|Text|\\tThreadId|\\tMachine|\\r\\n|--|--|--|\\r\\n|The service is up| 458745723|\\tNode001\\r\\n\\r\\n### Extraction with value quoting\\r\\n\\r\\nSometimes key names or values are wrapped in quotes, which allows the values themselves to contain delimiter characters. The following examples show how a `quote` argument is used for extracting such values.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA02Py6oCMQyG9z5F6KYKM9KOuin0LdwdROpM1OjYzmnjiODD24qoJIs/9y9DJM+QOFqZYmu1mutizQK6xN9wCbs7Y7K6WcHeUX+NaEUbvMeWKXhwuxAZOwECR8wLmS4obKMaXavia62MUma1lJMHDC4mrM9jOQsuwfRPfqfkxnSOscgKMpLJTeQPVeH56BeM6UPRb5x3bQY34iNMB0dx22FPF2LMz4Gs4Dz+ZmzO/F8Do5VCzgpWDKf8Tu1u7l7QnivUg0kbAQAA\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint str=\\'src=10.1.1.123 dst=10.1.1.124 bytes=125 failure=\"connection aborted\" \"event time\"=2021-01-01T10:00:54\\'\\r\\n| parse-kv str as ([\\'event time\\']:datetime, src:string, dst:string, bytes:long, failure:string) with (pair_delimiter=\\' \\', kv_delimiter=\\'=\\', quote=\\'\"\\')\\r\\n| project-away str\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|event time|\\tsrc|\\tdst|\\tbytes|\\tfailure|\\r\\n|--|--|--|--|--|\\r\\n|2021-01-01 10:00:54.0000000|\\t10.1.1.123|\\t10.1.1.124|\\t125|\\tconnection aborted|\\r\\n\\r\\nThe following example uses different opening and closing quotes:\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA02PzU7DMAzH7zyFb0mkFiVlu0TKk0zTlLUGzLqkJF6nSTw8MQIV2Qf//fnzUigxVC5B1TIGZ5+d2PACU+VN7uD8YKzBDXt4jTTfCgY95pRwZMoJ4jkXxsmAxhXbQqYrmqAHO7jeioOz3lq/3xn19AVLLBX7yyqHIVbQB7XNqaOHKTJK3EGj8tJG6a0Tpk38EHmYs4hfqL+qgTvxO+glUjlNONOVGNuPoDq4rP8zoWU+b5kxKG2UEbiSP9pbfbzHh6z7BsDEnzAjAQAA\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint str=\\'src=10.1.1.123 dst=10.1.1.124 bytes=125 failure=(connection aborted) (event time)=(2021-01-01 10:00:54)\\'\\r\\n| parse-kv str as ([\\'event time\\']:datetime, src:string, dst:string, bytes:long, failure:string) with (pair_delimiter=\\' \\', kv_delimiter=\\'=\\', quote=\\'()\\')\\r\\n| project-away str\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|event time|\\tsrc|\\tdst|\\tbytes|\\tfailure|\\r\\n|--|--|--|--|--|\\r\\n|2021-01-01 10:00:54.0000000|\\t10.1.1.123|\\t10.1.1.124|\\t125|\\tconnection aborted|\\r\\n\\r\\nThe values themselves may contain properly escaped quote characters, as the following example shows:\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA02PzW7CMAyA73sKr5eA1KKk0EukvAW3FU2h9WigpV1iQJX28NgIwZRI+fwj+8sUw5kgUXQqxcYZvTJyyjW0id7hBvYzYXKmrODHh/4S0WXUIUQcRkLoxsRTkEfVdbaf8ZOfDCgM6EpdmkLL3RpttbbVRn38weRjwuJ0ld3gEyy+lLSrnW09oWAObGS5HM6HXHRe/HCx/Sj8tHnWlnAL1MFi8iF+t9iHIRDy30DlcLr+zzjO/F7Y3amMEVPjJ+a6Vkuxi+MRGyr8zc9ieAfsfwfSJwEAAA==\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint str=\\'src=10.1.1.123 dst=10.1.1.124 bytes=125 failure=\"the remote host sent \\\\\\\\\"bye!\\\\\\\\\"\" time=2021-01-01T10:00:54\\'\\r\\n| parse-kv str as ([\\'time\\']:datetime, src:string, dst:string, bytes:long, failure:string) with (pair_delimiter=\\' \\', kv_delimiter=\\'=\\', quote=\\'\"\\', escape=\\'\\\\\\\\\\')\\r\\n| project-away str\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|time|\\tsrc|\\tdst|\\tbytes|\\tfailure|\\r\\n|--|--|--|--|--|\\r\\n|2021-01-01 10:00:54.0000000|\\t10.1.1.123|\\t10.1.1.124|\\t125|\\tthe remote host sent \"bye!\"|\\r\\n\\r\\n### Extraction in greedy mode\\r\\n\\r\\nThere are cases when unquoted values may contain pair delimiters. In this case, use the `greedy` mode to indicate to the operator to scan until the next key appearance (or end of string) when looking for the value ending.\\r\\n\\r\\nThe following examples compare how the operator works with and without the `greedy` mode specified:\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA02NMQvCMBBGd3/FbWmhHbMI2Zwc3J3kqIc5Y5NwORoK/fE2KOLywfvg8bJwVCgqzkScyZ2Tj3BKBNmnSM5aC7bNxLq6C1W4JgnmsEFGKTSGpbmABbqmH3fg+Bg+9o+a/IUeKquHLiPL7U4vnllpj4MZICz/jzN9y0h60qQjVlxb6g1YjlF0sAAAAA==\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint str=\\'name=John Doe phone=555 5555 city=New York\\'\\r\\n| parse-kv str as (name:string, phone:string, city:string) with (pair_delimiter=\\' \\', kv_delimiter=\\'=\\')\\r\\n| project-away str\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|name|\\tphone|\\tcity|\\r\\n|--|--|--|\\r\\n|John|\\t555|\\tNew\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA02NMQvCMBBGd3/FbWmhHbMI2Zwc3J0ktEdzxibhejYE/PEmKOLywfvg8RJTENiEjQp2RXOOLsApIiQXAxqtNeg2E0kxF8xwjezV4QXJ8oaj35sLdoOu6ccKFJbhY/+oyV/oIZM46JIlvs34oJUEaxzUAH7/f0x9FkacixF+Yt+aHO84yWizLa37BiIpW9a9AAAA\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint str=\\'name=John Doe phone=555 5555 city=New York\\'\\r\\n| parse-kv str as (name:string, phone:string, city:string) with (pair_delimiter=\\' \\', kv_delimiter=\\'=\\', greedy=true)\\r\\n| project-away str\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|name|\\tphone|\\tcity|\\r\\n|--|--|--|\\r\\n|John Doe|\\t555 5555|\\tNew York|\\r\\n\\r\\n### Extraction with no well-defined delimiters\\r\\n\\r\\nIn the following example, any non-alphanumeric character is considered a valid delimiter:\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAysoyswrUSguKbJVMjIwMtQ1AKEQQwMrAwMrYxOFaE8/N/9YhZCMotTEFM8UKxNTC3MTU3MjYx0F38TkjMy8VCu//JRUAwNDHYWQ1IoSK4XgksSiktQUJa4ahYLEouJU3ewykPEKicUKGhAVQF5mXroOwtCcfBAXZh5UXhNkQFF+VmpyiW5ieWIlSBgATRrnIq0AAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint str=\"2021-01-01T10:00:34 [INFO] ThreadId:458745723, Machine:Node001, Text: Started\"\\r\\n| parse-kv str as (Text: string, ThreadId:long, Machine: string)\\r\\n| project-away str\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|Text|\\tThreadId|\\tMachine|\\r\\n|--|--|--|\\r\\n|Started|\\t458745723|\\tNode001|\\r\\n\\r\\nValues quoting and escaping is allowed in this mode as shown in the following example:\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA0WNTQuCQBRF9/2Kx2xGYYTxC2PAbeAi27jLFoM+cirUZkYt6MfnUBHczeVy7hm16i0Yq3MS8SgMuEsVcsG5iBM4FuXucIKq0yjbohVJus2SNItiBnvZdKpHUQ4tch4yqPBhBdCqQzCoZ9Ug1DUFZWAaKdm8YJTaYHCdnQ6kAe9DrE31Z/aX3AZXf//f3YdF2Q68+zRYzAklDNA0csScrhbf3evhgo0N5CKfDnoDfs645tsAAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint str=\"2021-01-01T10:00:34 [INFO] ThreadId:458745723, Machine:Node001, Text: \\'The service \\\\\\\\\\' is up\\'\"\\r\\n| parse-kv str as (Text: string, ThreadId:long, Machine: string) with (quote=\"\\'\", escape=\\'\\\\\\\\\\')\\r\\n| project-away str\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|Text|\\tThreadId|\\tMachine|\\r\\n|--|--|--|\\r\\n|The service \\' is up|\\t458745723|\\tNode001|\\r\\n\\r\\n### Extraction using regex\\r\\n\\r\\nWhen no delimiters define text structure well enough, regular expression-based extraction can be useful.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA32QQW6DMBBF9z3FyBtDEofWoES1hNJ7ECq59gBOGiBjE1qph6/ZVMmmi9m8ma95+iO5PoAPVL7xihE2SEgw0aeCLoTRqyzrBh96fcGtGS4ZoXWEJhws+lBmh658kXnBNhCz1ymyf7J3x9rekILz8ZezCmTRYPNhtDCN3IvC7qTQO5kLWbwaqW3+bPY5q/nTD4yaPIrzbVEG7SGp+J00r1Xkrm83sPA/oQf+8DtuoJ2cTWF2oYOEsMWv2AVLquMM9To9+pWKk1TvrF6ljKeLBA2n2IHQs/5eRH4Blp2dfEUBAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint str=@\\'[\"referer url: https://hostname.com/redirect?dest=/?h=1234\", \"request url: https://hostname.com/?h=1234\", \"advertiser id: 24fefbca-cf27-4d62-a623-249c2ad30c73\"]\\'\\r\\n| parse-kv str as ([\\'referer url\\']:string, [\\'request url\\']:string, [\\'advertiser id\\']: guid) with (regex=@\\'\"([\\\\w ]+)\\\\s*:\\\\s*([^\"]*)\"\\')\\r\\n| project-away str\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|referer url|\\trequest url|\\tadvertiser id|\\r\\n|--|--|--|\\r\\n|`https://hostname.com/redirect?dest=/?h=1234`|\\t`https://hostname.com/?h=1234`|\\t24fefbca-cf27-4d62-a623-249c2ad30c73|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/parse-kv-operator\",\"parse-kv-operator.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.OperatorToken,\"parse-where\",\"Evaluates a string expression, and parses its value into one or more calculated columns. The result is only the successfully parsed strings.\",\"`parse-where` parses the strings in the same way as [parse](parseoperator.md), and filters out strings that were not parsed successfully.\\r\\n\\r\\nSee [parse operator](parseoperator.md), which produces nulls for unsuccessfully parsed strings.\\r\\n\\r\\n## Syntax\\r\\n\\r\\n*T* `| parse-where` [`kind=`*kind* [`flags=` *regexFlags*]] *expression* `with` `*` (*stringConstant* *columnName* [`:` *columnType*]) `*`...\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *T* | string | &check; | The tabular input to parse.|\\r\\n| *kind* | string | &check; | One of the [supported kind values](#supported-kind-values). The default value is `simple`.|\\r\\n| *regexFlags* | string | |If *kind* is `regex`, then you can specify regex flags to be used like `U` for ungreedy, `m` for multi-line mode, `s` for match new line `\\\\n`, and `i` for case-insensitive. More flags can be found in [RE2 flags](re2.md).|\\r\\n| *expression* | string | &check; | An expression that evaluates to a string.|\\r\\n| *stringConstant* | string | &check; | A string constant for which to search and parse.|\\r\\n| *columnName* | string | &check; | The name of a column to assign a value to, extracted from the string expression. |\\r\\n| *columnType* | string | | The scalar value that indicates the type to convert the value to. The default is the `string`.|\\r\\n\\r\\n>[!NOTE]\\r\\n>\\r\\n> * Use [project](projectoperator.md) if you also want to drop or rename some columns.\\r\\n> * Use `*` in the pattern to skip junk values. This value can't be used after `string` column.\\r\\n> * The parse pattern may start with *ColumnName*, in addition to *StringConstant*.\\r\\n> * If the parsed *expression* isn't of type `string`, it will be converted to type `string`.\\r\\n\\r\\n### Supported kind values\\r\\n\\r\\n|Text|Description|\\r\\n|--|--|\\r\\n| `simple` | This is the default value. *stringConstant* is a regular string value and the match is strict. All string delimiters should appear in the parsed string, and all extended columns must match the required types.|\\r\\n| `regex` | *stringConstant* may be a regular expression and the match is strict. All string delimiters, which can be a regex for this mode, should appear in the parsed string, and all extended columns must match the required types.|\\r\\n\\r\\n### Regex mode\\r\\n\\r\\nIn regex mode, parse will translate the pattern to a regex and use [RE2 syntax](re2.md) in order to do the matching using numbered captured groups that are handled internally. For example:\\r\\n\\r\\n```\\r\\nparse-where kind=regex Col with * <regex1> var1:string <regex2> var2:long\\r\\n```\\r\\n\\r\\nThe regex that will be generated by the parse internally is `.*?<regex1>(.*?)<regex2>(\\\\-\\\\d+)`.\\r\\n\\r\\n* `*` was translated to `.*?`.\\r\\n* `string` was translated to `.*?`.\\r\\n* `long` was translated to `\\\\-\\\\d+`.\\r\\n\\r\\n## Returns\\r\\n\\r\\nThe input table, which is extended according to the list of columns that are provided to the operator.\\r\\n\\r\\n> [!NOTE]\\r\\n> Only successfully parsed strings will be in the output. Strings that don't match the pattern will be filtered out.\",'The `parse-where` operator provides a streamlined way to `extend` a table by using multiple `extract` applications on the same `string` expression. This is most useful when the table has a `string` column that contains several values that you want to break into individual columns. For example, you can break up a column that was produced by a developer trace (\"`printf`\"/\"`Console.WriteLine`\") statement.\\r\\n\\r\\n### Using `parse`\\r\\n\\r\\nIn the example below, the column `EventText` of table `Traces` contains strings of the form `Event: NotifySliceRelease (resourceName={0}, totalSlices= {1}, sliceNumber={2}, lockTime={3}, releaseTime={4}, previousLockTime={5})`. The operation below will extend the table with six columns: `resourceName` , `totalSlices`, `sliceNumber`, `lockTime`, `releaseTime`, `previousLockTime`, `Month`, and `Day`.\\r\\n\\r\\nA few of the strings don\\'t have a full match.\\r\\n\\r\\nUsing `parse`, the calculated columns will have nulls.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA92UTU/DMAyG75X6H6ycNlRpaYENinrkhibEdkMIZZ3ZAlk7JekAiR9P0i/SARuH7UJ7aOy+cfzEiQVqmEqWooIE5kybdyawd73BTE/xTcegtOTZou97YJ776kPK/zGMc82f3ieCp3iHAplC6ElUeSFTHLMVJrd8jYJnOEmXOC8EygB0rpkop6gkGgWg7HBcrGYoE55tmODzx6w0AxB5+jLlJg6NBuFoENFwCPQiPqMxDQOQ1ZK/C9YSNzwv1M3PYU4vjapPguMyhec7OWiXo9kBUwrUxvEnCHp0iIj+j2JE0e8c4T6OsKzWHo6S9uAc2xejc8CGO5noYZjMGfO9hyvfq7sF+N4HrJk0JG2zgFeul3ACpINGwDWBdMmIa8UGJFvYCC4gcXG/JC0zafFtcBeWuFZs+5uVEDv7GzJpdqHxNPq+1Ve4Mn/GVFeldaHqajsktcdJvPY0qQZNlDa/2rOVxSekEWJPoQUAAA==\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nlet Traces = datatable(EventText: string)\\r\\n    [\\r\\n    \"Event: NotifySliceRelease (resourceName=PipelineScheduler, totalSlices=27, sliceNumber=invalid_number, lockTime=02/17/2016 08:40:01, releaseTime=02/17/2016 08:40:01, previousLockTime=02/17/2016 08:39:01)\",\\r\\n    \"Event: NotifySliceRelease (resourceName=PipelineScheduler, totalSlices=27, sliceNumber=15, lockTime=02/17/2016 08:40:00, releaseTime=invalid_datetime, previousLockTime=02/17/2016 08:39:00)\",\\r\\n    \"Event: NotifySliceRelease (resourceName=PipelineScheduler, totalSlices=27, sliceNumber=20, lockTime=02/17/2016 08:40:01, releaseTime=02/17/2016 08:40:01, previousLockTime=02/17/2016 08:39:01)\",\\r\\n    \"Event: NotifySliceRelease (resourceName=PipelineScheduler, totalSlices=27, sliceNumber=22, lockTime=02/17/2016 08:41:01, releaseTime=02/17/2016 08:41:00, previousLockTime=02/17/2016 08:40:01)\",\\r\\n    \"Event: NotifySliceRelease (resourceName=PipelineScheduler, totalSlices=invalid_number, sliceNumber=16, lockTime=02/17/2016 08:41:00, releaseTime=02/17/2016 08:41:00, previousLockTime=02/17/2016 08:40:00)\"\\r\\n];\\r\\nTraces  \\r\\n| parse EventText with * \"resourceName=\" resourceName \", totalSlices=\" totalSlices: long * \"sliceNumber=\" sliceNumber: long * \"lockTime=\" lockTime \", releaseTime=\" releaseTime: date \",\" * \"previousLockTime=\" previouLockTime: date \")\" *  \\r\\n| project\\r\\n    resourceName,\\r\\n    totalSlices,\\r\\n    sliceNumber,\\r\\n    lockTime,\\r\\n    releaseTime,\\r\\n    previouLockTime\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|resourceName|totalSlices|sliceNumber|lockTime|releaseTime|previousLockTime|\\r\\n|---|---|---|---|---|---|\\r\\n|||||||\\r\\n|||||||\\r\\n|||||||\\r\\n|PipelineScheduler|27|20|02/17/2016 08:40:01|2016-02-17 08:40:01.0000000|2016-02-17 08:39:01.0000000|\\r\\n|PipelineScheduler|27|22|02/17/2016 08:41:01|2016-02-17 08:41:00.0000000|2016-02-17 08:40:01.0000000|\\r\\n\\r\\n### Using `parse-where`\\r\\n\\r\\nUsing \\'parse-where\\' will filter-out unsuccessfully parsed strings from the result.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA92UzU7DMAyA75X6DlZOGypaWmCDoh65oQmx3RBCWWe2QNZOSbqBxMOT/pJubOOwXWgOrR3b9WcnFqhhLFmMCiKYMm3WRGDnboWJHuOHDkFpyZNZ13XAPE/lixT7IQxTzV8/R4LH+IgCmULoSFRpJmMcsgVGD3yJgic4iuc4zQRKD3SqmShcVBQMPFD55zBbTFBGPFkxwacvSSF6INL4fcxNHBr0/EEvoH4f6HV4SUPqeyDLX+42WEpc8TRT97+HubgxVl3inZbJv9rLQdscdQVMK1AbxZ8g6MkhAvo/mhEEuzn8Qxx+0a0DHAXt0Tk2L0brgPX3MtHjMJkz5jrPt65TTQtwnS9YMqnwfD1HidCMDFhzPYczIC1AArYIpM1HbCk0OMksj2BjEhv6x6QhJ00R8uA2MrGlMJ9yuQnJvbfAyVYtaodu7lBSy/QNY1122Kaqmm6hVBor80pT5+rVUZoEK81mGt84KDIhqQUAAA==\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nlet Traces = datatable(EventText: string)\\r\\n    [\\r\\n    \"Event: NotifySliceRelease (resourceName=PipelineScheduler, totalSlices=27, sliceNumber=invalid_number, lockTime=02/17/2016 08:40:01, releaseTime=02/17/2016 08:40:01, previousLockTime=02/17/2016 08:39:01)\",\\r\\n    \"Event: NotifySliceRelease (resourceName=PipelineScheduler, totalSlices=27, sliceNumber=15, lockTime=02/17/2016 08:40:00, releaseTime=invalid_datetime, previousLockTime=02/17/2016 08:39:00)\",\\r\\n    \"Event: NotifySliceRelease (resourceName=PipelineScheduler, totalSlices=27, sliceNumber=20, lockTime=02/17/2016 08:40:01, releaseTime=02/17/2016 08:40:01, previousLockTime=02/17/2016 08:39:01)\",\\r\\n    \"Event: NotifySliceRelease (resourceName=PipelineScheduler, totalSlices=27, sliceNumber=22, lockTime=02/17/2016 08:41:01, releaseTime=02/17/2016 08:41:00, previousLockTime=02/17/2016 08:40:01)\",\\r\\n    \"Event: NotifySliceRelease (resourceName=PipelineScheduler, totalSlices=invalid_number, sliceNumber=16, lockTime=02/17/2016 08:41:00, releaseTime=02/17/2016 08:41:00, previousLockTime=02/17/2016 08:40:00)\"\\r\\n];\\r\\nTraces  \\r\\n| parse-where EventText with * \"resourceName=\" resourceName \", totalSlices=\" totalSlices: long * \"sliceNumber=\" sliceNumber: long * \"lockTime=\" lockTime \", releaseTime=\" releaseTime: date \",\" * \"previousLockTime=\" previousLockTime: date \")\" *  \\r\\n| project\\r\\n    resourceName,\\r\\n    totalSlices,\\r\\n    sliceNumber,\\r\\n    lockTime,\\r\\n    releaseTime,\\r\\n    previousLockTime\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|resourceName|totalSlices|sliceNumber|lockTime|releaseTime|previousLockTime|\\r\\n|---|---|---|---|---|---|\\r\\n|PipelineScheduler|27|20|02/17/2016 08:40:01|2016-02-17 08:40:01.0000000|2016-02-17 08:39:01.0000000|\\r\\n|PipelineScheduler|27|22|02/17/2016 08:41:01|2016-02-17 08:41:00.0000000|2016-02-17 08:40:01.0000000|\\r\\n\\r\\n### Regex mode using regex flags\\r\\n\\r\\nTo get the resourceName and totalSlices, use the following query:\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA92Uz0/CMBTH70v2P7z0BGaGbiLozA7G7KbTAJ6MIWV7QqW0pO0AE/94y5YYMPLjgBfbQw/fb1/z6fvmCbQw0CxHAwkUzLo9EthIFyjtAFc2BmM1l+Om74FbL/VBKj2GTFn+9tEXPMceCmQGoaHRqFLnmLEZJk98joJL7OcTLEqBOgCrLBPVFZNIJYcLJngx5NLieC2btZKVsxHqJAwDECqfDrgrRaNW2G1FNOwAvYrbNKZO1fWruw1zjQuuSnP/e5mLa+dqkuC0WFH3B8flXg56iIMexUFPznGgPe32/2hPFO3mCA9xhMe0p6L9+5h19nLsj9nRHC5mvvd643v12PC9T5gzbfB8OUGNMOWycKNEu7is4HuMwJLbCZwB6aX9x+feXZrdPqQJgU1cIAFZWzYRySZw7OjkuLZVz2r1jrndKrL1Q1+VQ2/Q3QQAAA==\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nlet Traces = datatable(EventText: string)\\r\\n    [\\r\\n    \"Event: NotifySliceRelease (resourceName=PipelineScheduler, totalSlices=non_valid_integer, sliceNumber=11, lockTime=02/17/2016 08:40:01, releaseTime=02/17/2016 08:40:01, previousLockTime=02/17/2016 08:39:01)\",\\r\\n    \"Event: NotifySliceRelease (resourceName=PipelineScheduler, totalSlices=27, sliceNumber=15, lockTime=02/17/2016 08:40:00, releaseTime=02/17/2016 08:40:00, previousLockTime=02/17/2016 08:39:00)\",\\r\\n    \"Event: NotifySliceRelease (resourceName=PipelineScheduler, totalSlices=non_valid_integer, sliceNumber=44, lockTime=02/17/2016 08:40:01, releaseTime=02/17/2016 08:40:01, previousLockTime=02/17/2016 08:39:01)\",\\r\\n    \"Event: NotifySliceRelease (resourceName=PipelineScheduler, totalSlices=27, sliceNumber=22, lockTime=02/17/2016 08:41:01, releaseTime=02/17/2016 08:41:00, previousLockTime=02/17/2016 08:40:01)\",\\r\\n    \"Event: NotifySliceRelease (resourceName=PipelineScheduler, totalSlices=27, sliceNumber=16, lockTime=02/17/2016 08:41:00, releaseTime=02/17/2016 08:41:00, previousLockTime=02/17/2016 08:40:00)\"\\r\\n];\\r\\nTraces\\r\\n| parse-where kind = regex EventText with * \"RESOURCENAME=\" resourceName \",\" * \"totalSlices=\" totalSlices: long \",\" *\\r\\n| project resourceName, totalSlices\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|resourceName|totalSlices|\\r\\n|--|--|\\r\\n||\\r\\n\\r\\n### `parse-where` with case-insensitive regex flag\\r\\n\\r\\nIn the above query, the default mode was case-sensitive, so the strings were parsed successfully. No result was obtained.\\r\\n\\r\\nTo get the required result, run `parse-where` with a case-insensitive (`i`) regex flag.\\r\\n\\r\\nOnly three strings will be parsed successfully, so the result is three records (some totalSlices hold invalid integers).\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA92Uz0/CMBTH70v2P7zsBGaGbiLozA7G7KbTAJ6MIWV7jEppSdsBJv7xlC0xYOTHAS+2hx6+377m0/fN42hgoGiGGmLIqbF7xLGRLFCYAa5MBNooJoqm64Bdb/XhVXoEqTRs/NnnLMMecqQaoaFQy1JlmNIZxi9sjpwJ7GcTzEuOygcjDeXVFR0LKYYLylk+ZMJgsZH1RknL2QhVHAQ+cJlNB8yWImEr6LZCEnSA3ERtEhGrqvrV/Ya5wgWTpX78vczVrXU1Pf+8WGH3B8f1QQ5yjIOcxEHOznGkPe32/2hPGO7nCI5xBKe0p6L9+5h1DnIcjtnJHDZmrvN+5zr12HCdL5hTpfFyOUGFMGUit6NE2bisYMxpoWMG3+MElsxM4AK8XtJ/fu09JOn9UxJ7sI0Nnu9tLNuo3jZ4ZClFUduq55X8wMzsFNn5qTU3KKnV5QQAAA==\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nlet Traces = datatable(EventText: string)\\r\\n    [\\r\\n    \"Event: NotifySliceRelease (resourceName=PipelineScheduler, totalSlices=non_valid_integer, sliceNumber=11, lockTime=02/17/2016 08:40:01, releaseTime=02/17/2016 08:40:01, previousLockTime=02/17/2016 08:39:01)\",\\r\\n    \"Event: NotifySliceRelease (resourceName=PipelineScheduler, totalSlices=27, sliceNumber=15, lockTime=02/17/2016 08:40:00, releaseTime=02/17/2016 08:40:00, previousLockTime=02/17/2016 08:39:00)\",\\r\\n    \"Event: NotifySliceRelease (resourceName=PipelineScheduler, totalSlices=non_valid_integer, sliceNumber=44, lockTime=02/17/2016 08:40:01, releaseTime=02/17/2016 08:40:01, previousLockTime=02/17/2016 08:39:01)\",\\r\\n    \"Event: NotifySliceRelease (resourceName=PipelineScheduler, totalSlices=27, sliceNumber=22, lockTime=02/17/2016 08:41:01, releaseTime=02/17/2016 08:41:00, previousLockTime=02/17/2016 08:40:01)\",\\r\\n    \"Event: NotifySliceRelease (resourceName=PipelineScheduler, totalSlices=27, sliceNumber=16, lockTime=02/17/2016 08:41:00, releaseTime=02/17/2016 08:41:00, previousLockTime=02/17/2016 08:40:00)\"\\r\\n];\\r\\nTraces\\r\\n| parse-where kind = regex flags=i EventText with * \"RESOURCENAME=\" resourceName \",\" * \"totalSlices=\" totalSlices: long \",\" *\\r\\n| project resourceName, totalSlices\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|resourceName|totalSlices|\\r\\n|---|---|\\r\\n|PipelineScheduler|27|\\r\\n|PipelineScheduler|27|\\r\\n|PipelineScheduler|27|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/parsewhereoperator\",\"parsewhereoperator.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.OperatorToken,\"Partition\",\"The partition operator partitions the records of its input table into multiple subtables according to values in a key column. The operator runs a subquery on each subtable, and produces a single output table that is the union of the results of all subqueries. This operator is useful when you need to perform a subquery only on a subset of rows that belongs to the same partition key, and not query the whole dataset. These subqueries could include aggregate functions, window functions, top N and others.\",\"The partition operator supports several strategies of subquery operation:\\r\\n\\r\\n* [Native](#native-strategy) - use with an implicit data source with thousands of key partition values.\\r\\n* [Shuffle](#shuffle-strategy) - use with an implicit source with millions of key partition values.\\r\\n* [Legacy](#legacy-strategy) - use with an implicit or explicit source for 64 or less key partition values.\\r\\n\\r\\n## Native strategy\\r\\n\\r\\nThis subquery is a tabular transformation that doesn't specify a tabular source. The source is implicit and is assigned according to the subtable partitions. It should be applied when the number of distinct values of the partition key isn't large, roughly in the thousand. Use `hint.strategy=native` for this strategy. There's no restriction on the number of partitions.\\r\\n\\r\\n## Shuffle strategy\\r\\n\\r\\nThis subquery is a tabular transformation that doesn't specify a tabular source. The source is implicit and will be assigned according to the subtable partitions. The strategy applies when the number of distinct values of the partition key is large, in the millions. Use `hint.strategy=shuffle` for this strategy. There's no restriction on the number of partitions. For more information about shuffle strategy and performance, see [shuffle](shufflequery.md).\\r\\n\\r\\n## Native and shuffle strategy operators\\r\\n\\r\\nThe difference between `hint.strategy=native` and `hint.strategy=shuffle` is mainly to allow the caller to indicate the cardinality and execution strategy of the subquery, and can affect the execution time. There's no other semantic difference\\r\\nbetween the two.\\r\\n\\r\\nFor `native` and `shuffle` strategy, the source of the subquery is implicit, and can't be referenced by the subquery. This strategy supports a limited set of operators: `project`, `sort`, `summarize`, `take`, `top`, `order`, `mv-expand`, `mv-apply`, `make-series`, `limit`, `extend`, `distinct`, `count`, `project-away`, `project-keep`, `project-rename`, `project-reorder`, `parse`, `parse-where`, `reduce`, `sample`, `sample-distinct`, `scan`, `search`, `serialize`, `top-nested`, `top-hitters` and `where`.\\r\\n\\r\\nOperators like `join`, `union`, `external_data`, `plugins`, or any other operator that involves table source that isn't the subtable partitions, aren't allowed.\\r\\n\\r\\n## Legacy strategy\\r\\n\\r\\nLegacy subqueries can use the following sources:\\r\\n\\r\\n* Implicit - The source is a tabular transformation that doesn't specify a tabular source. The source is implicit and will be assigned according to the subtable partitions. This scenario applies when there are 64 or less key values. \\r\\n* Explicit - The subquery must include a tabular source explicitly. Only the key column of the input table is available in the subquery, and referenced by using its name in the `toscalar()` function.\\r\\n\\r\\nFor both implicit and explicit sources, the subquery type is used for legacy purposes only, and indicated by the use of `hint.strategy=legacy`, or by not including any strategy indication.\\r\\n\\r\\nAny other reference to the source is taken to mean the entire input table, for example, by using the [as operator](asoperator.md) and calling up the value again.\\r\\n\\r\\n> [!NOTE]\\r\\n> It is recommended to use the native or shuffle strategies rather than the legacy strategy, since the legacy strategy is limited to 64 partitions and is less efficient.\\r\\n> The legacy partition operator is currently limited by the number of partitions.\\r\\n> The operator will yield an error if the partition column (*Column*) has more than 64 distinct values.\\r\\n\\r\\n## All strategies\\r\\n\\r\\nFor native, shuffle and legacy subqueries, the result must be a single tabular result. Multiple tabular results and the use of the `fork` operator aren't supported. A subquery can't include other statements, for example, it can't have a `let` statement.\\r\\n\\r\\n## Syntax\\r\\n\\r\\n*T* `|` `partition` [`hint.strategy=` *strategy*] [ *PartitionParameters* ] `by` *Column* `(` *TransformationSubQuery* `)`\\r\\n\\r\\n*T* `|` `partition` [ *PartitionParameters* ] `by` *Column* `{` *ContextFreeSubQuery* `}`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *T* | string | &check; | The tabular source whose data is to be processed by the operator.|\\r\\n| *strategy*| | | The partition strategy, `native`, `shuffle` or `legacy`. `native` strategy is used with an implicit source with thousands of key partition values. `shuffle` strategy is used with an implicit source with millions of key partition values. `legacy` strategy is used with an explicit or implicit source with 64 or less key partition values.|\\r\\n| *Column*| | &check; | The name of a column in *T* whose values determine how the input table is to be partitioned.|\\r\\n| *TransformationSubQuery*| | &check; | A tabular transformation expression, whose source is implicitly the subtables produced by partitioning the records of *T*, each subtable being homogenous on the value of *Column*.|\\r\\n| *ContextFreeSubQuery*| | &check; | A tabular expression that includes its own tabular source, such as a table reference. The expression can reference a single column from *T*, being the key column *Column* using the syntax `toscalar(`*Column*`)`.|\\r\\n| *PartitionParameters*| | | Zero or more space-separated parameters in the form of: *HintName* `=` *Value* that control the behavior of the operator. See the [supported hints](#supported-hints).\\r\\n\\r\\n### Supported hints\\r\\n\\r\\n|HintName|Type|Description|Native/Shuffle/Legacy strategy|\\r\\n|--|--|--|--|\\r\\n|`hint.strategy`| string | The value `legacy`, `shuffle`, or `native`. This hint defines the execution strategy of the partition operator.|Native, Shuffle, Legacy|\\r\\n|`hint.shufflekey`| string | The partition key. Runs the partition operator in shuffle strategy where the shuffle key is the specified partition key.|Shuffle|\\r\\n|`hint.materialized`| bool |If set to `true`, will materialize the source of the `partition` operator. The default value is `false`. |Legacy|\\r\\n|`hint.concurrency`| int |Hints the system how many partitions to run in parallel. The default value is 16.|Legacy|\\r\\n|`hint.spread`| int |Hints the system how to distribute the partitions among cluster nodes. For example, if there are N partitions and the spread hint is set to P, then the N partitions will be processed by P different cluster nodes equally in parallel/sequentially depending on the concurrency hint. The default value is 1.|Legacy|\\r\\n\\r\\n## Returns\\r\\n\\r\\nThe operator returns a union of the results of the individual subqueries.\",\"### Native strategy examples\\r\\n\\r\\nUse `hint.strategy=native` for this strategy. See the following examples:\\r\\n\\r\\nThis query returns foreach InjuriesDirect, the count of events and total injuries in each State that starts with 'W'.\\r\\n\\r\\n> [!div class=\\\"nextstepaction\\\"]\\r\\n> <a href=\\\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA1WOvQoCMRCEe59iu0tAfAFJp4X1FdbxWMwKSWR3cseJD29UECyH+eZnRNV8nLnANk9aEivTiAgmQ1TYIkg0nIdu3rsWSC2UpGBn0I5d11AiZGa6rHQqt6bCdhDlCeSs5RxVHkzfhTDVVuD89keGjrj/mH83fS74/QtdD0E9ngAAAA==\\\" target=\\\"_blank\\\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nStormEvents\\r\\n| where State startswith 'W'\\r\\n| partition hint.strategy=native by InjuriesDirect (summarize Events=count(), Injuries=sum(InjuriesDirect) by State);\\r\\n```\\r\\n\\r\\n**Output** \\r\\n\\r\\n|State|Events|Injuries|\\r\\n|---|---|---|\\r\\n|WISCONSIN|4|4|\\r\\n|WYOMING|5|5|\\r\\n|WEST VIRGINIA|1|1|\\r\\n|WASHINGTON|2|2|\\r\\n|WEST VIRGINIA|756|0|\\r\\n|WYOMING|390|0|\\r\\n|WASHINGTON|256|0|\\r\\n|WISCONSIN|1845|0|\\r\\n|WYOMING|1|4|\\r\\n|WASHINGTON|1|5|\\r\\n|WISCONSIN|1|2|\\r\\n|WASHINGTON|1|2|\\r\\n|WASHINGTON|1|10|\\r\\n\\r\\nThis query returns the top 2 EventType by total injuries for each State that starts with 'W':\\r\\n\\r\\n> [!div class=\\\"nextstepaction\\\"]\\r\\n> <a href=\\\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA1WOsQ7CMAxE936Ft7YLAzsbDMytxJwiixiRpHKurYL68STphAdLp+d78oCg7rayR2x22iwr0wADpgijiJvAUvtoM5xzFkjwZMXjFKH57JXoQt5AVqYpHdWG8nR1x8U5o/JlGgPM5+7fC6twzKWMupJLvIryE30x1F/GNB+WnRBmOhfwL6i0/wEF39OovgAAAA==\\\" target=\\\"_blank\\\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nStormEvents\\r\\n| where State startswith 'W'\\r\\n| partition hint.strategy = native by State\\r\\n    (\\r\\n    summarize TotalInjueries = sum(InjuriesDirect) by EventType\\r\\n    | top 2 by TotalInjueries\\r\\n    )\\r\\n```\\r\\n\\r\\n**Output** \\r\\n\\r\\n|EventType|TotalInjueries|\\r\\n|---|---|\\r\\n|Tornado|4|\\r\\n|Hail|1|\\r\\n|Thunderstorm Wind|1|\\r\\n|Excessive Heat|0|\\r\\n|High Wind|13|\\r\\n|Lightning|5|\\r\\n|High Wind|5|\\r\\n|Avalanche|3|\\r\\n\\r\\n### Shuffle strategy example\\r\\n\\r\\nUse `hint.strategy=shuffle` for this strategy. See the following example:\\r\\n\\r\\nThis query will return the top 3 DamagedProperty foreach EpisodeId, it returns also the columns EpisodeId and State.\\r\\n\\r\\n> [!div class=\\\"nextstepaction\\\"]\\r\\n> <a href=\\\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA22OsQ6DMBBDd77iRiohFuZuZeiGxBcEOCAV5KKLQYrUjyewsODBi+0ntxBd650dQvYnbxQWVhzN1qEMUAOe4jvM2zguTF2k2tsgA3+HjJLyyyGeqjP8mNVM3Kh4VsQrS1CVH/e4lwW1SNziqf5KL3rZHA7GAN74mQAAAA==\\\" target=\\\"_blank\\\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nStormEvents\\r\\n| partition hint.strategy=shuffle by EpisodeId\\r\\n    (\\r\\n    top 3 by DamageProperty\\r\\n    | project EpisodeId, State, DamageProperty\\r\\n    )\\r\\n| count\\r\\n```\\r\\n\\r\\n**Output** \\r\\n\\r\\n|Count|\\r\\n|---|\\r\\n|22345|\\r\\n\\r\\n### Legacy strategy with explicit source\\r\\n\\r\\nThis strategy is for legacy purposes only, and indicated by the use of `hint.strategy=legacy` or by not including a strategy indication at all. See the following example:\\r\\n\\r\\nThis query will run two subqueries:\\r\\n\\r\\n* When x == 1, the query will return all rows from StormEvents that have InjuriesIndirect == 1.\\r\\n* When x == 2, the query will return all rows from StormEvents that have InjuriesIndirect == 2.\\r\\n\\r\\n\\r\\nthe final result is the union of these 2 subqueries.\\r\\n\\r\\n> [!div class=\\\"nextstepaction\\\"]\\r\\n> <a href=\\\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAxXMwRGCMBAF0LtV/AqcwXuOHjhbQYxrCCO7zOajZsDehQLe86hZ8MXTbUIHGi6olBndacMcnYXFFENRnis9UnILL8kxNdzbDtcbzafrW5QVGz6D+PGFgF7HxYvUXh/FJfG3j8kW5R+3ariUdAAAAA==\\\" target=\\\"_blank\\\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nrange x from 1 to 2 step 1\\r\\n| partition hint.strategy=legacy by x {StormEvents | where x == InjuriesIndirect}\\r\\n| count \\r\\n```\\r\\n\\r\\n**Output** \\r\\n\\r\\n|Count|\\r\\n|---|\\r\\n|113|\\r\\n\\r\\n### Partition operator\\r\\n\\r\\nIn some cases, it's more performant and easier to write a query using the `partition` operator than using the [`top-nested` operator](topnestedoperator.md). The following example runs a subquery calculating `summarize` and `top` for each of States starting with `W`: (WYOMING, WASHINGTON, WEST VIRGINIA, WISCONSIN)\\r\\n\\r\\n> [!div class=\\\"nextstepaction\\\"]\\r\\n> <a href=\\\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAz2NsQ6CQBBEe75iOyAhNtZ0WlhjYn2Sjbcm3JHdOQiGj/cEdYtJJvN2pkPU4TxxgBUrzZ6VqYMDk8EpbBZ4Km9lDsfsBRIDeQk4GDRjj6UNDjIx3ZfvY0H5qk0tDYNTeTHtE20fU0BVN3QJz6TC1mak+pmTKPeoP1Ubf11GbvbWrW4lxJGO/9z2rfoN+O3/98UAAAA=\\\" target=\\\"_blank\\\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nStormEvents\\r\\n| where State startswith 'W'\\r\\n| partition hint.strategy=native by State \\r\\n    (\\r\\n    summarize Events=count(), Injuries=sum(InjuriesDirect) by EventType, State\\r\\n    | top 3 by Events \\r\\n    ) \\r\\n```\\r\\n\\r\\n**Output** \\r\\n\\r\\n|EventType|State|Events|Injuries|\\r\\n|---|---|---|---|\\r\\n|Hail|WYOMING|108|0|\\r\\n|High Wind|WYOMING|81|5|\\r\\n|Winter Storm|WYOMING|72|0|\\r\\n|Heavy Snow|WASHINGTON|82|0|\\r\\n|High Wind|WASHINGTON|58|13|\\r\\n|Wildfire|WASHINGTON|29|0|\\r\\n|Thunderstorm Wind|WEST VIRGINIA|180|1|\\r\\n|Hail|WEST VIRGINIA|103|0|\\r\\n|Winter Weather|WEST VIRGINIA|88|0|\\r\\n|Thunderstorm Wind|WISCONSIN|416|1|\\r\\n|Winter Storm|WISCONSIN|310|0|\\r\\n|Hail|WISCONSIN|303|1|\\r\\n\\r\\n### Partition reference\\r\\n\\r\\nThe following example shows how to use the [as operator](asoperator.md) to give a \\\"name\\\" to each data partition and then reuse that name within the subquery. This approach is only relevant to the legacy strategy.\\r\\n\\r\\n```\\r\\nT\\r\\n| partition by Dim\\r\\n(\\r\\n    as Partition\\r\\n    | extend MetricPct = Metric * 100.0 / toscalar(Partition | summarize sum(Metric))\\r\\n)\\r\\n```\\r\\n\\r\\n---\\r\\n\\r\\n> [!IMPORTANT]\\r\\n> The content below is Microsoft confidential(not available in the [public site](https://docs.microsoft.com/en-us/azure/data-explorer/))\\r\\n\\r\\n# partition operator - Internal\\r\\n\\r\\n## Limitless partitions (preview)\\r\\n\\r\\nThe partition operator now supports (in preview mode) \\\"limitless\\\" partitions.\\r\\nThis alternative implementation lifts the limit on the number of partitions\\r\\nthat the operator can process, and performs better in all scenarios.\\r\\n\\r\\nTo enable this alternative implementation, add the following to the list of\\r\\nthe operator's *PartitionParamteres*:\\r\\n\\r\\n`hint.strategy` `=` `native`\\r\\n\\r\\nFor example, the following query will return the two highest mountains in each continent:\\r\\n\\r\\n```kusto\\r\\ndatatable (Name:string, Summit:long, Continent:string)\\r\\n[\\r\\n  // Asia\\r\\n  'Everest', 8848, 'Asia',\\r\\n  'K2', 8611, 'Asia',\\r\\n  'Kangchenjunga', 8586, 'Asia',\\r\\n  // Europe\\r\\n  'Elbrus', 5642, 'Europe',\\r\\n  'Dykh-Tau', 5205, 'Europe',\\r\\n  'Shkhara', 5201, 'Europe'\\r\\n  // Etc..\\r\\n]\\r\\n| partition hint.strategy=native by Continent\\r\\n  (top 2 by Summit desc)\\r\\n```\\r\\n\\r\\n|Name|Summit|Continent|\\r\\n|---|---|---|\\r\\n|Everest|8848|Asia|\\r\\n|K2|8611|Asia|\\r\\n|Elbrus|5642|Europe|\\r\\n|Dykh-Tau|5205|Europe|\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/partitionoperator\",\"partitionoperator.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"percentile\",\"The `percentile()` function calculates an estimate for the specified [nearest-rank percentile](#nearest-rank-percentile) of the population defined by *expr*.\\r\\nThe accuracy depends on the density of population in the region of the percentile.\",\"`percentiles()` works similarly to `percentile()`. However, `percentiles()` can calculate multiple percentile values at once, which is more efficient than calculating each percentile value separately.\\r\\n\\r\\nTo calculate weighted percentiles, see [percentilesw()](percentilesw-aggfunction.md).\\r\\n\\r\\n[!INCLUDE [data-explorer-agg-function-summarize-note](../../includes/data-explorer-agg-function-summarize-note.md)]\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`percentile(`*expr*`,` *percentile*`)`\\r\\n\\r\\n`percentiles(`*expr*`,` *percentiles*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n|*expr* | string | &check; | The expression to use for aggregation calculation.|\\r\\n|*percentile*| int or long | &check;| A constant that specifies the percentile.|\\r\\n|*percentiles* | int or long | &check; | One or more comma-separated percentiles.|\\r\\n\\r\\n## Returns\\r\\n\\r\\nReturns a table with the estimates for *expr* of the specified percentiles in the group, each in a separate column.\\r\\n\\r\\n> [!NOTE]\\r\\n> To return the percentiles in a single column, see [Return percentiles as an array](#return-percentiles-as-an-array).\",'### Calculate single percentile\\r\\n\\r\\nThe following example shows the value of `DamageProperty` being larger than 95% of the sample set and smaller than 5% of the sample set.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAwsuyS/KdS1LzSspVqhRKC7NzU0syqxKVShILUoGCmbmpGq4JOYmpqcGFOUDxUoqdRQsTTUVkioVgksSS1IBgwSa1j8AAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nStormEvents | summarize percentile(DamageProperty, 95) by State\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\nThe results table shown includes only the first 10 rows.\\r\\n\\r\\n| State | percentile_DamageProperty_95 |\\r\\n|--|--|\\r\\n| ATLANTIC SOUTH | 0 |\\r\\n| FLORIDA | 40000 |\\r\\n| GEORGIA | 143333 |\\r\\n| MISSISSIPPI | 80000 |\\r\\n| AMERICAN SAMOA | 250000 |\\r\\n| KENTUCKY | 35000 |\\r\\n| OHIO | 150000 |\\r\\n| KANSAS | 51392 |\\r\\n| MICHIGAN | 49167 |\\r\\n| ALABAMA | 50000 |\\r\\n\\r\\n### Calculate multiple percentiles\\r\\n\\r\\nThe following example shows the value of `DamageProperty` simultaneously calculated using 5, 50 (median) and 95.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAwsuyS/KdS1LzSspVqhRKC7NzU0syqxKVShILUoGCmbmpBZruCTmJqanBhTlAwVLKnUUTIHIQEfB0lRTIalSIbgksSQVAL6yeg1HAAAA\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nStormEvents | summarize percentiles(DamageProperty, 5, 50, 95) by State\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\nThe results table shown includes only the first 10 rows.\\r\\n\\r\\n| State | percentile_DamageProperty_5 | percentile_DamageProperty_50 | percentile_DamageProperty_95 |\\r\\n|--|--|--|--|\\r\\n| ATLANTIC SOUTH | 0 | 0 | 0 |\\r\\n| FLORIDA | 0 | 0 | 40000 |\\r\\n| GEORGIA | 0 | 0 | 143333 |\\r\\n| MISSISSIPPI | 0 | 0 | 80000 |\\r\\n| AMERICAN SAMOA | 0 | 0 | 250000 |\\r\\n| KENTUCKY | 0 | 0 | 35000 |\\r\\n| OHIO | 0 | 2000 | 150000 |\\r\\n| KANSAS | 0 | 0 | 51392 |\\r\\n| MICHIGAN | 0 | 0 | 49167 |\\r\\n| ALABAMA | 0 | 0 | 50000 |\\r\\n|...|...|\\r\\n\\r\\n## Return percentiles as an array\\r\\n\\r\\nInstead of returning the values in individual columns, use the `percentiles_array()` function to return the percentiles in a single column of dynamic array type.\\r\\n\\r\\n### Syntax\\r\\n\\r\\n`percentiles_array(`*expr*`,` *percentiles*`)`\\r\\n\\r\\n### Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n|*expr* | string | &check; | The expression to use for aggregation calculation.|\\r\\n|*percentiles*| int, long, or dynamic | &check;| One or more comma-separated percentiles or a dynamic array of percentiles. Each percentile can be an integer or long value.|\\r\\n\\r\\n### Returns\\r\\n\\r\\nReturns an estimate for *expr* of the specified percentiles in the group as a single column of dynamic array type.\\r\\n\\r\\n### Examples\\r\\n\\r\\n#### Comma-separated percentiles\\r\\n\\r\\nMultiple percentiles can be obtained as an array in a single dynamic column, instead of in multiple columns as with [percentiles()](percentiles-aggfunction.md).\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/SampleIoTData?query=H4sIAAAAAAAAAwspSswrTssvyk1NCU7NK84vKnZJLEnk5apRKC7NzU0syqxKVShILUpOzSvJzEktjk8sKkqs1AhLzClN1VEw1VEwAmJTAx0FcyBtaaqpo5BYlg6R1lRIqlSAmOmXmJsKANY0tLFpAAAA\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nTransformedSensorsData\\r\\n| summarize percentiles_array(Value, 5, 25, 50, 75, 95), avg(Value) by SensorName\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\nThe results table displays only the first 10 rows.\\r\\n\\r\\n|SensorName|percentiles_Value|avg_Value |\\r\\n|--|--|--|\\r\\n|sensor-82|[\"0.048141473520867069\",\"0.24407515500271132\",\"0.48974511106780577\",\"0.74160998970950343\",\"0.94587903204190071\"]|0.493950914|\\r\\n|sensor-130|[\"0.049200214398937764\",\"0.25735850440187535\",\"0.51206374010048239\",\"0.74182335059053839\",\"0.95210342463616771\"]|0.505111463|\\r\\n|sensor-56|[\"0.04857779335488676\",\"0.24709868149337144\",\"0.49668762923789589\",\"0.74458470404241883\",\"0.94889104840865857\"]|0.497955018|\\r\\n|sensor-24|[\"0.051507199150534679\",\"0.24803904945640423\",\"0.50397070213183581\",\"0.75653888126010793\",\"0.9518782718727431\"]|0.501084379|\\r\\n|sensor-47|[\"0.045991246974755672\",\"0.24644331118208851\",\"0.48089197707088743\",\"0.74475142784472248\",\"0.9518322864959039\"]|0.49386228|\\r\\n|sensor-135|[\"0.05132897529660399\",\"0.24204987641954018\",\"0.48470113942206461\",\"0.74275730068433621\",\"0.94784079559229406\"]|0.494817619|\\r\\n|sensor-74|[\"0.048914714739047828\",\"0.25160926036445724\",\"0.49832498850160978\",\"0.75257887767110776\",\"0.94932261924236094\"]|0.501627252|\\r\\n|sensor-173|[\"0.048333149363009836\",\"0.26084250046756496\",\"0.51288012531934613\",\"0.74964772791583412\",\"0.95156058795294\"]|0.505401226|\\r\\n|sensor-28|[\"0.048511161184567046\",\"0.2547387968731824\",\"0.50101318228599656\",\"0.75693845702682039\",\"0.95243122486483989\"]|0.502066244|\\r\\n|sensor-34|[\"0.049980293859462954\",\"0.25094722564949412\",\"0.50914023067384762\",\"0.75571549713447961\",\"0.95176564809278674\"]|0.504309494|\\r\\n|...|...|...|\\r\\n\\r\\n#### Dynamic array of percentiles\\r\\n\\r\\nPercentiles for `percentiles_array` can be specified in a dynamic array of integer or floating-point numbers. The array must be constant but doesn\\'t have to be literal.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/SampleIoTData?query=H4sIAAAAAAAAAwspSswrTssvyk1NCU7NK84vKnZJLEnkqlEoLs3NTSzKrEpVKEgtSk7NK8nMSS2OTywqSqzUCEvMKU3VUUipzEvMzUzWiDbVUTACYlMDHQVzIG1pGqupqaOQWJYOUampkFSpADHdLzE3FQAgg+RhcwAAAA==\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nTransformedSensorsData\\r\\n| summarize percentiles_array(Value, dynamic([5, 25, 50, 75, 95])), avg(Value) by SensorName\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\nThe results table displays only the first 10 rows.\\r\\n\\r\\n|SensorName|percentiles_Value|avg_Value |\\r\\n|--|--|--|\\r\\n|sensor-82|[\"0.048141473520867069\",\"0.24407515500271132\",\"0.48974511106780577\",\"0.74160998970950343\",\"0.94587903204190071\"]|0.493950914|\\r\\n|sensor-130|[\"0.049200214398937764\",\"0.25735850440187535\",\"0.51206374010048239\",\"0.74182335059053839\",\"0.95210342463616771\"]|0.505111463|\\r\\n|sensor-56|[\"0.04857779335488676\",\"0.24709868149337144\",\"0.49668762923789589\",\"0.74458470404241883\",\"0.94889104840865857\"]|0.497955018|\\r\\n|sensor-24|[\"0.051507199150534679\",\"0.24803904945640423\",\"0.50397070213183581\",\"0.75653888126010793\",\"0.9518782718727431\"]|0.501084379|\\r\\n|sensor-47|[\"0.045991246974755672\",\"0.24644331118208851\",\"0.48089197707088743\",\"0.74475142784472248\",\"0.9518322864959039\"]|0.49386228|\\r\\n|sensor-135|[\"0.05132897529660399\",\"0.24204987641954018\",\"0.48470113942206461\",\"0.74275730068433621\",\"0.94784079559229406\"]|0.494817619|\\r\\n|sensor-74|[\"0.048914714739047828\",\"0.25160926036445724\",\"0.49832498850160978\",\"0.75257887767110776\",\"0.94932261924236094\"]|0.501627252|\\r\\n|sensor-173|[\"0.048333149363009836\",\"0.26084250046756496\",\"0.51288012531934613\",\"0.74964772791583412\",\"0.95156058795294\"]|0.505401226|\\r\\n|sensor-28|[\"0.048511161184567046\",\"0.2547387968731824\",\"0.50101318228599656\",\"0.75693845702682039\",\"0.95243122486483989\"]|0.502066244|\\r\\n|sensor-34|[\"0.049980293859462954\",\"0.25094722564949412\",\"0.50914023067384762\",\"0.75571549713447961\",\"0.95176564809278674\"]|0.504309494|\\r\\n|...|...|...|\\r\\n\\r\\n## Nearest-rank percentile\\r\\n\\r\\n*P*-th percentile (0 < *P* <= 100) of a list of ordered values, sorted in ascending order, is the smallest value in the list. The *P* percent of the data is less or equal to *P*-th percentile value ([from Wikipedia article on percentiles](https://en.wikipedia.org/wiki/Percentile#The_Nearest_Rank_method)).\\r\\n\\r\\nDefine *0*-th percentiles to be the smallest member of the population.\\r\\n\\r\\n>[!NOTE]\\r\\n> Given the approximating nature of the calculation, the actual returned value may not be a member of the population.\\r\\n> Nearest-rank definition means that *P*=50 does not conform to the [interpolative definition of the median](https://en.wikipedia.org/wiki/Median). When evaluating the significance of this discrepancy for the specific application, the size of the population and an [estimation error](#estimation-error-in-percentiles) should be taken into account.\\r\\n\\r\\n## Estimation error in percentiles\\r\\n\\r\\nThe percentiles aggregate provides an approximate value using [T-Digest](https://github.com/tdunning/t-digest/blob/master/docs/t-digest-paper/histo.pdf).\\r\\n\\r\\n>[!NOTE]\\r\\n>\\r\\n> * The bounds on the estimation error vary with the value of the requested percentile. The best accuracy is at both ends of the [0..100] scale. Percentiles 0 and 100 are the exact minimum and maximum values of the distribution. The accuracy gradually decreases towards the middle of the scale. It\\'s worst at the median and is capped at 1%.\\r\\n> * Error bounds are observed on the rank, not on the value. Suppose percentile(X, 50) returned a value of Xm. The estimate guarantees that at least 49% and at most 51% of the values of X are less or equal to Xm. There is no theoretical limit on the difference between Xm and the actual median value of X.\\r\\n> * The estimation may sometimes result in a precise value but there are no reliable conditions to define when it will be the case.',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/percentiles-aggfunction\",\"percentiles-aggfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"percentile_array_tdigest\",\"Calculates the percentile result from the `tdigest` results (which was generated by [tdigest()](tdigest-aggfunction.md) or [tdigest_merge()](tdigest-merge-aggfunction.md))\",\"## Syntax\\r\\n\\r\\n`percentiles_array_tdigest(`*tdigest*`,` *percentile1* [`,` *percentile2*`,` ...]`)`\\r\\n\\r\\n`percentiles_array_tdigest(`*tdigest*`,` *Dynamic array* [`,` *typeLiteral* ]`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *tdigest*| string | &check; | The [`tdigest`](tdigest-aggfunction.md) or [tdigest_merge()](tdigest-merge-aggfunction.md) results used to calculate the percentiles.|\\r\\n| *percentile* | real | &check; | A value or comma-separated list of values that specifies the percentiles.|\\r\\n| *Dynamic array*| dynamic | &check; | A dynamic array of real numbers that specify the percentiles.|\\r\\n| *typeLiteral*| string | | A type literal. For example, `typeof(long)`. If provided, the result set will be of this type.|\\r\\n\\r\\n## Returns\\r\\n\\r\\nThe percentile/percentiles value of each value in *tdigest*.\\r\\n\\r\\n>[!TIP]\\r\\n>\\r\\n>* The function must receive at least one percent (and maybe more, see the syntax above: *percentile1* [`,` *percentile2*] ...[`,` *percentileN*]) and the result will be\\r\\na dynamic array that includes the results. (such like [`percentiles()`](percentiles-aggfunction.md))\\r\\n>* If only one percent was provided, and the type was provided also, then the result will be a column of the same type provided with the results of that percent. In this case, all `tdigest` functions must be of that type.\\r\\n>* If *tdigest* includes `tdigest` functions of different types, don't provide the type. The result will be of type dynamic. See below examples.\",'> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA0WMuwoCMRBFe79iygRSxMLSTntxP2AZ12uImAeTWSHix5tmsblwuJwzaZF0fiNr232prSmxxA9I7zGg6RWNjhuYEycOuEipEO2Wbp0mZcUwq5QnFqXxLCMWX2gzi3CfN/lfdCScA4x3tPdjDt460l5RHiZmtfYHKGdLI5UAAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nStormEvents\\r\\n| summarize tdigestRes = tdigest(DamageProperty) by State\\r\\n| project percentiles_array_tdigest(tdigestRes, range(0, 100, 50), typeof(int))\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|percentile_tdigest_tdigestRes|\\r\\n|---|\\r\\n|[0,0,0]|\\r\\n|[0,0,62000000]|\\r\\n|[0,0,110000000]|\\r\\n|[0,0,1200000]|\\r\\n|[0,0,250000]|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/percentile-array-tdigestfunction\",\"percentile-array-tdigestfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"percentile_tdigest\",\"Calculates the percentile result from the `tdigest` results (which was generated by [tdigest()](tdigest-aggfunction.md) or [tdigest_merge()](tdigest-merge-aggfunction.md))\",\"## Syntax\\r\\n\\r\\n`percentile_tdigest(`*expr*`,` *percentile1* `,` *typeLiteral*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n|Name|Type|Required|Description|\\r\\n|--|--|--|--|\\r\\n|*expr*|string|&check;|An expression that was generated by [`tdigest`](tdigest-aggfunction.md) or [tdigest_merge()](tdigest-merge-aggfunction.md).|\\r\\n|*percentile*|long|&check;|The value that specifies the percentile.|\\r\\n|*typeLiteral*|string||A type literal. If provided, the result set will be of this type. For example, `typeof(long)` will cast all results to type `long`.\\r\\n\\r\\n## Returns\\r\\n\\r\\nThe percentile value of each value in *expr*.\\r\\n\\r\\n>[!TIP]\\r\\n>\\r\\n>* If the type was provided, the result will be a column of the same type provided with the results of the percentile. In this case, all `tdigest` functions must be of that type.\\r\\n>* If *expr* includes `tdigest` functions of different types, don't provide the type. The result will be of type dynamic. See below examples.\",'> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAwsuyS/KdS1LzSsp5qpRKC7NzU0syqxKVShJyUxPLS4JSi1WsIVxNFwScxPTUwOK8gtSi0oqNRWSKhWCSxJLUoE6C4rys1KTSxSAMslAwzJzUuNhuhBG6SgYGhhoAgDlVqxicwAAAA==\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nStormEvents\\r\\n| summarize tdigestRes = tdigest(DamageProperty) by State\\r\\n| project percentile_tdigest(tdigestRes, 100)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|percentile_tdigest_tdigestRes|\\r\\n|---|\\r\\n|0|\\r\\n|62000000|\\r\\n|110000000|\\r\\n|1200000|\\r\\n|250000|\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA4XNsQrCQBAE0N6v2DIHFvED0plePHs5kyGsuHdhbxOI5OO9JlxpOTDzxltS6VdEy6ed8iISlL8gG3lCtjsydUdorkHChJumGWqbo9dG3oKhLJfIKVLjK0d/uT6ODxZUxxVo1vTGYFQuhsLwB8+jX5EzXdrW/QA/si5TvAAAAA==\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nStormEvents\\r\\n| summarize tdigestRes = tdigest(DamageProperty) by State\\r\\n| union (StormEvents | summarize tdigestRes = tdigest(EndTime) by State)\\r\\n| project percentile_tdigest(tdigestRes, 100)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|percentile_tdigest_tdigestRes|\\r\\n|---|\\r\\n|[0]|\\r\\n|[62000000]|\\r\\n|[\"2007-12-20T11:30:00.0000000Z\"]|\\r\\n|[\"2007-12-31T23:59:00.0000000Z\"]|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/percentile-tdigestfunction\",\"percentile-tdigestfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"percentilew\",\"The `percentilew()` function calculates a weighted estimate for the specified [nearest-rank percentile](percentiles-aggfunction.md#nearest-rank-percentile) of the population defined by *expr*. `percentilesw()` works similarly to `percentilew()`. However, `percentilesw()` can calculate multiple weighted percentile values at once, which is more efficient than calculating each weighted percentile value separately.\",'Weighted percentiles calculate percentiles in a dataset by giving each value in the input dataset a weight. In this method, each value is considered to be repeated a number of times equal to its weight, which is then used to calculate the percentile. By giving more importance to certain values, weighted percentiles provide a way to calculate percentiles in a \"weighted\" manner.\\r\\n\\r\\nTo calculate unweighted percentiles, see [percentiles()](percentiles-aggfunction.md).\\r\\n\\r\\n[!INCLUDE [data-explorer-agg-function-summarize-note](../../includes/data-explorer-agg-function-summarize-note.md)]\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`percentilew(`*expr*`,` *weightExpr*`,` *percentile*`)`\\r\\n\\r\\n`percentilesw(`*expr*`,` *weightExpr*`,` *percentiles*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n|*expr* | string | &check; | The expression to use for aggregation calculation.|\\r\\n|*percentile*| int or long | &check;| A constant that specifies the percentile.|\\r\\n|*percentiles* | int or long | &check; | One or more comma-separated percentiles.|\\r\\n|*weightExpr*|long|&check;|The weight to give each value.|\\r\\n\\r\\n## Returns\\r\\n\\r\\nReturns a table with the estimates for *expr* of the specified percentiles in the group, each in a separate column.\\r\\n\\r\\n> [!NOTE]\\r\\n> To return the percentiles in a single column, see [Return percentiles as an array](#return-percentiles-as-an-array).','### Calculate weighted percentiles\\r\\n\\r\\nAssume you repetitively measure the time (Duration) it takes an action to complete. Instead of recording every value of the measurement, you record each value of Duration, rounded to 100 msec, and how many times the rounded value appeared (BucketSize).\\r\\n\\r\\nUse `summarize percentilesw(Duration, BucketSize, ...)` to calculate the given\\r\\npercentiles in a \"weighted\" way. Treat each value of Duration as if it was repeated BucketSize times in the input, without actually needing to materialize those records.\\r\\n\\r\\nThe following example shows weighted percentiles.\\r\\nUsing the following set of latency values in milliseconds:\\r\\n`{ 1, 1, 2, 2, 2, 5, 7, 7, 12, 12, 15, 15, 15, 18, 21, 22, 26, 35 }`.\\r\\n\\r\\nTo reduce bandwidth and storage, do pre-aggregation to the\\r\\nfollowing buckets: `{ 10, 20, 30, 40, 50, 100 }`. Count the number of events in each bucket to produce the following table:\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA8tJLVHISSxJzUuuDElMyklVsFVISSwBQhBbIyi10Dm/NK/EKic/L11HwQei0Kk0OTsVIqapwBWtwKUABBY6CoYGOhC2mY6CEYxtrKNgDGMb6iiYGChwxVpzIVsJAGDD8KqDAAAA\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nlet latencyTable = datatable (ReqCount:long, LatencyBucket:long) \\r\\n[ \\r\\n    8, 10, \\r\\n    6, 20, \\r\\n    3, 30, \\r\\n    1, 40 \\r\\n];\\r\\nlatencyTable\\r\\n```\\r\\n\\r\\nThe table displays:\\r\\n\\r\\n* Eight events in the 10-ms bucket (corresponding to subset `{ 1, 1, 2, 2, 2, 5, 7, 7 }`)\\r\\n* Six events in the 20-ms bucket (corresponding to subset `{ 12, 12, 15, 15, 15, 18 }`)\\r\\n* Three events in the 30-ms bucket (corresponding to subset `{ 21, 22, 26 }`)\\r\\n* One event  in the 40-ms bucket (corresponding to subset `{ 35 }`)\\r\\n\\r\\n\\r\\nAt this point, the original data is no longer available. Only the number of events in each bucket. To compute percentiles from this data, use the `percentilesw()` function.\\r\\nFor the 50, 75, and 99.9 percentiles, use the following query:\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA1WOMQvCMBCF9/yKN7ZwSGutGsVFVydxE4cYDymmqbYJovjjjYSA3i0fj8d9Z9jBKMdWP/fqZBgrnJUL++Vsx/dN561bmM5eCNtYXHt95ZjlEAcIhJkTyoIiTwnjxBWhSlwSJgXEcSl+leKNwbet6psX48a9Zusaw8Mj+/MR0jeEOlyc1QQpRzL/AMC/VMrDAAAA\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nlet latencyTable = datatable (ReqCount:long, LatencyBucket:long) \\r\\n[ \\r\\n    8, 10, \\r\\n    6, 20, \\r\\n    3, 30, \\r\\n    1, 40 \\r\\n];\\r\\nlatencyTable\\r\\n| summarize percentilesw(LatencyBucket, ReqCount, 50, 75, 99.9)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n| percentile_LatencyBucket_50 | percentile_LatencyBucket_75 | percentile_LatencyBucket_99_9 |\\r\\n|--|--|--|\\r\\n| 20 | 20 | 40 |\\r\\n\\r\\n## Return percentiles as an array\\r\\n\\r\\nInstead of returning the values in individual columns, use the `percentilesw_array()` function to return the percentiles in a single column of dynamic array type.\\r\\n\\r\\n### Syntax\\r\\n\\r\\n`percentilesw_array(`*expr*`,` *weightExpr*`,` *percentiles*`)`\\r\\n\\r\\n### Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n|*expr* | string | &check; | The expression to use for aggregation calculation.|\\r\\n|*percentiles*| int, long, or dynamic | &check;| One or more comma-separated percentiles or a dynamic array of percentiles. Each percentile can be an integer or long value.|\\r\\n|*weightExpr*|long|&check;|The weight to give each value.|\\r\\n\\r\\n### Returns\\r\\n\\r\\nReturns an estimate for *expr* of the specified percentiles in the group as a single column of dynamic array type.\\r\\n\\r\\n### Examples\\r\\n\\r\\n#### Comma-separated percentiles\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/SampleIoTData?query=H4sIAAAAAAAAA1WOQQuCQBCF7/sr3lFhCM2sLLrUtVN0i4hpG0Ja11pXwujHZ8hCzVw+Ho/5xoiHYS9Wd3s+G8EKF/b9fjnayWNTt9YvTG2vhO1QXLf6JkMWQx2g0M+ckCY08JQwDpwRssApYZJAHZfqV6neaNqqYle+BHdxWqwvjTTPEzvHXfRnJYSfCHl/d5YTimJUxB+W4nlIyQAAAA==\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nlet latencyTable = datatable (ReqCount:long, LatencyBucket:long) \\r\\n[ \\r\\n    8, 10, \\r\\n    6, 20, \\r\\n    3, 30, \\r\\n    1, 40 \\r\\n];\\r\\nlatencyTable\\r\\n| summarize percentilesw_array(LatencyBucket, ReqCount, 50, 75, 99.9)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n| percentile_LatencyBucket |\\r\\n|---|---|---|\\r\\n| [20, 20, 40] |\\r\\n\\r\\n#### Dynamic array of percentiles\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/SampleIoTData?query=H4sIAAAAAAAAA1WOQQuCQBCF7/sr3lFhiMysLLrUtVN0E4lpHUJa11pXwujHZ4hQ8y4fjwffGPEw7MXq7sQXI9iiYN/ny8FRHvu6tX5tanslHIbhrtU3GboQKoNCfytCNKWBF4TZyDEhHjkizKdQ+Ub9KtUbTVtV7MqX4C5Oi/WlkeZ5Zue4C/6shPEnQtFZrkodZEkvWCaENJ2keRh+AIIR/2/UAAAA\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nlet latencyTable = datatable (ReqCount:long, LatencyBucket:long) \\r\\n[ \\r\\n    8, 10, \\r\\n    6, 20, \\r\\n    3, 30, \\r\\n    1, 40 \\r\\n];\\r\\nlatencyTable\\r\\n| summarize percentilesw_array(LatencyBucket, ReqCount, dynamic([50, 75, 99.9]))\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n| percentile_LatencyBucket |\\r\\n|---|---|---|\\r\\n| [20, 20, 40] |',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/percentilesw-aggfunction\",\"percentilesw-aggfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"percentrank_tdigest\",\"Calculates the approximate rank of the value in a set, where rank is expressed as a percentage of the set's size.\\r\\nThis function can be viewed as the inverse of the percentile.\",\"## Syntax\\r\\n\\r\\n`percentrank_tdigest(`*digest*`,` *value*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n|Name|Type|Required|Description|\\r\\n|--|--|--|--|\\r\\n|*digest*|string|&check;| An expression that was generated by [tdigest()](tdigest-aggfunction.md) or [tdigest_merge()](tdigest-merge-aggfunction.md).|\\r\\n|*value*|scalar|&check;|An expression representing a value to be used for percentage ranking calculation.|\\r\\n\\r\\n> [!NOTE]\\r\\n> The type of *value* and the type of the elements in *digest* should be the same.\\r\\n\\r\\n## Returns\\r\\n\\r\\nThe percentage rank of value in a dataset.\",'Getting the percentrank_tdigest() of the damage property that valued 4490$ is ~85%:\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAwsuyS/KdS1LzSsp5qpRKC7NzU0syqxKVShJyUxPLS4JSi1WsIVxNFwScxPTUwOK8gtSi0oqNYEaCorys1KTSxSAAslAM4oS87LjYaoRRugomJhYGmgCANhtajhsAAAA\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nStormEvents\\r\\n| summarize tdigestRes = tdigest(DamageProperty)\\r\\n| project percentrank_tdigest(tdigestRes, 4490)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|Column1|\\r\\n|---|\\r\\n|85.0015237192293|\\r\\n\\r\\nUsing percentile 85 over the damage property should give 4490$:\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAwsuyS/KdS1LzSsp5qpRKC7NzU0syqxKVShJyUxPLS4JSi1WsIVxNFwScxPTUwOK8gtSi0oqNYEaCorys1KTSxSAAslAMzJzUuNhihEm6ChYmOoolFQWpOanaeTk56VragIAa7SLZXcAAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nStormEvents\\r\\n| summarize tdigestRes = tdigest(DamageProperty)\\r\\n| project percentile_tdigest(tdigestRes, 85, typeof(long))\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|percentile_tdigest_tdigestRes|\\r\\n|---|\\r\\n|4490|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/percentrank-tdigestfunction\",\"percentrank-tdigestfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"pi\",\"Returns the constant value of Pi.\",\"## Syntax\\r\\n\\r\\n`pi()`\\r\\n\\r\\n## Returns\\r\\n\\r\\nThe double value of Pi (3.1415926...)\",\"\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/pifunction\",\"\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"pivot\",\"Rotates a table by turning the unique values from one column in the input table into multiple columns in the output table and performs aggregations as required on any remaining column values that will appear in the final output.\",\"> [!NOTE]\\r\\n> If the OutputSchema is not specified, the output schema of the `pivot` plugin is based on the input data. Therefore, multiple executions of the plugin using different data inputs, may produce different output schema. This also means that the query that is referencing unpacked columns may become 'broken' at any time. For this reason, we do not recommend using this plugin for automation jobs without specifying the OutputSchema function.\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`T | evaluate pivot(`*pivotColumn*`[, `*aggregationFunction*`] [,`*column1* `[,`*column2* ... `]])` [`:` *OutputSchema*]\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *pivotColumn* | string | &check; | The column to rotate. Each unique value from this column will be a column in the output table.|\\r\\n| *aggregationFunction* | string |  | An aggregation function used to aggregate multiple rows in the input table to a single row in the output table. Currently supported functions: `min()`, `max()`, `take_any()`, `sum()`, `dcount()`, `avg()`, `stdev()`, `variance()`, `make_list()`, `make_bag()`, `make_set()`, `count()`. The default is `count()`. |\\r\\n| *column1*, *column2*, ... | string | | A column name or comma-separated list of column names. The output table will contain an additional column per each specified column. The default is all columns other than the pivoted column and the aggregation column. |\\r\\n| *OutputSchema* | | | The names and types for the expected columns of the `pivot` plugin output.<br /><br />**Syntax**: `(` *ColumnName* `:` *ColumnType* [`,` ...] `)`<br /><br />Specifying the expected schema optimizes query execution by not having to first run the actual query to explore the schema. An error is raised if the run-time schema doesn't match the *OutputSchema* schema. |\\r\\n\\r\\n## Returns\\r\\n\\r\\nPivot returns the rotated table with specified columns (*column1*, *column2*, ...) plus all unique values of the pivot columns. Each cell for the pivoted columns will contain the aggregate function computation.\",'### Pivot by a column\\r\\n\\r\\nFor each EventType and State starting with \\'AL\\', count the number of events of this type in this state.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAwsuyS/KdS1LzSsp5qpRKCjKz0pNLlEILkksSdVRAIuHVBakAqXKM1KLUiESCsUliUUlxeWZJRkKSo4+SnBZuHqFjMRiBaXwzLwUkGRqWWJOKUhfQWZZfokG2AxNABd5uxJ5AAAA\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nStormEvents\\r\\n| project State, EventType\\r\\n| where State startswith \"AL\"\\r\\n| where EventType has \"Wind\"\\r\\n| evaluate pivot(State)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|EventType|ALABAMA|ALASKA|\\r\\n|---|---|---|\\r\\n|Thunderstorm Wind|352|1|\\r\\n|High Wind|0|95|\\r\\n|Extreme Cold/Wind Chill|0|10|\\r\\n|Strong Wind|22|0|\\r\\n\\r\\n### Pivot by a column with aggregation function\\r\\n\\r\\nFor each EventType and State starting with \\'AR\\', display the total number of direct deaths.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAwsuyS/KdS1LzSsp5qpRKM9ILUpVCC5JLElVKC5JLCopLs8syVBQcgxSAsoWFOVnpSaXQOR1FMC6QioLgEyX1MSSjGKXzCKgNNwYZEEFOwUDoERqWWJOKcjwgsyy/BINqEHFpbkayIo1NQH4o/xAlgAAAA==\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nStormEvents\\r\\n| where State startswith \"AR\"\\r\\n| project State, EventType, DeathsDirect\\r\\n| where DeathsDirect > 0\\r\\n| evaluate pivot(State, sum(DeathsDirect))\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|EventType|ARKANSAS|ARIZONA|\\r\\n|---|---|---|\\r\\n|Heavy Rain|1|0|\\r\\n|Thunderstorm Wind|1|0|\\r\\n|Lightning|0|1|\\r\\n|Flash Flood|0|6|\\r\\n|Strong Wind|1|0|\\r\\n|Heat|3|0|\\r\\n\\r\\n### Pivot by a column with aggregation function and a single additional column\\r\\n\\r\\nResult is identical to previous example.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAwsuyS/KdS1LzSsp5qpRKM9ILUpVCC5JLElVKC5JLCopLs8syVBQcgxSAsoWFOVnpSaXQOR1FMC6QioLgEyX1MSSjGKXzCKgNNwYZEEFOwUDoERqWWJOKcjwgsyy/BINqEHFpbkayIo1kczWBAB7xf6goQAAAA==\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nStormEvents\\r\\n| where State startswith \"AR\"\\r\\n| project State, EventType, DeathsDirect\\r\\n| where DeathsDirect > 0\\r\\n| evaluate pivot(State, sum(DeathsDirect), EventType)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|EventType|ARKANSAS|ARIZONA|\\r\\n|---|---|---|\\r\\n|Heavy Rain|1|0|\\r\\n|Thunderstorm Wind|1|0|\\r\\n|Lightning|0|1|\\r\\n|Flash Flood|0|6|\\r\\n|Strong Wind|1|0|\\r\\n|Heat|3|0|\\r\\n\\r\\n### Specify the pivoted column, aggregation function, and multiple additional columns\\r\\n\\r\\nFor each event type, source, and state, sum the number of direct deaths.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA03NOwqAMBCE4d5TLFYKFp5AEPQCxgsEWUhAjexOIoKH91GI9Tc/YxBk6ROv0Oyk3bEwGVgwKaxAdw9HeTvkn3Zs4bTzwhOoofoGTnaOT7P5FFC8fUUal+I/Lit6j8Zju9WEKBOXFzKrwnaAAAAA\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nStormEvents\\r\\n| where State startswith \"AR\"\\r\\n| where DeathsDirect > 0\\r\\n| evaluate pivot(State, sum(DeathsDirect), EventType, Source)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|EventType|Source|ARKANSAS|ARIZONA|\\r\\n|---|---|---|---|\\r\\n|Heavy Rain|Emergency Manager|1|0|\\r\\n|Thunderstorm Wind|Emergency Manager|1|0|\\r\\n|Lightning|Newspaper|0|1|\\r\\n|Flash Flood|Trained Spotter|0|2|\\r\\n|Flash Flood|Broadcast Media|0|3|\\r\\n|Flash Flood|Newspaper|0|1|\\r\\n|Strong Wind|Law Enforcement|1|0|\\r\\n|Heat|Newspaper|3|0|\\r\\n\\r\\n### Pivot with a query-defined output schema\\r\\n\\r\\nThe following example selects specific columns in the StormEvents table.\\r\\nIt uses an explicit schema definition that allows various optimizations to be evaluated before running the actual query.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAwsuyS/KdS1LzSsp5qpRKCjKz0pNLlEILkksSdVRAIuHVBakAqXKM1KLUhEiChmJxQpK4Zl5KUpAydSyxJxSoBaFgsyy/BINsHZNKwUNuHKr4pKizLx0HQVHH0cnR19Hq5x8KC/YG8LRBADkMGe5igAAAA==\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nStormEvents\\r\\n| project State, EventType\\r\\n| where EventType has \"Wind\"\\r\\n| evaluate pivot(State): (EventType:string, ALABAMA:long, ALASKA:long)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|EventType|ALABAMA|ALASKA|\\r\\n|---|---|---|\\r\\n|Thunderstorm Wind|352|1|\\r\\n|High Wind|0|95|\\r\\n|Marine Thunderstorm Wind|0|0|\\r\\n|Strong Wind|22|0|\\r\\n|Extreme Cold/Wind Chill|0|10|\\r\\n|Cold/Wind Chill|0|0|\\r\\n|Marine Strong Wind|0|0|\\r\\n|Marine High Wind|0|0|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/pivotplugin\",\"pivotplugin.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"postgresql_request\",\"The `postgresql_request` plugin sends a SQL query to a PostgreSql Server network endpoint and returns the first rowset in the results. The query may return more than one rowset, but only the first rowset is made available for the rest of the Kusto query.\",'The plugin is invoked with the [`evaluate`](evaluateoperator.md) operator.\\r\\n\\r\\n> [!IMPORTANT]\\r\\n> The `postgresql_request` plugin is disabled by default.\\r\\n> To enable the plugin, run the [`.enable plugin postgresql_request` command](../management/enable-plugin.md). To see which plugins are enabled, use [`.show plugin` management commands](../management/show-plugins.md).\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`evaluate` `postgresql_request` `(` *ConnectionString* `,` *SqlQuery* [`,` *SqlParameters*] `)` [`:` *OutputSchema*]\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required| Description |\\r\\n|---|---|---|---|\\r\\n| *ConnectionString* | string | &check; | The connection string that points at the PostgreSQL Server network endpoint. See [authentication](#username-and-password-authentication) and how to specify the [network endpoint](#specify-the-network-endpoint). |\\r\\n| *SqlQuery* | string | &check; | The query that is to be executed against the SQL endpoint. Must return one or more row sets. Only the first set is made available for the rest of the query. |\\r\\n| *SqlParameters* | dynamic | | A property bag object that holds key-value pairs to pass as parameters along with the query. |\\r\\n| *OutputSchema* | | | The names and types for the expected columns of the `postgresql_request` plugin output.<br /><br />**Syntax**: `(` *ColumnName* `:` *ColumnType* [`,` ...] `)`|\\r\\n\\r\\n> [!NOTE]\\r\\n>\\r\\n> * Specifying the *OutputSchema* is highly recommended, as it allows the plugin to be used in scenarios that might otherwise not work without it, such as a cross-cluster query. The *OutputSchema* can also enable multiple query optimizations.\\r\\n> * An error is raised if the run-time schema of the first row set returned by the SQL network endpoint doesn\\'t match the *OutputSchema* schema.\\r\\n\\r\\n## Authentication and authorization\\r\\n\\r\\nTo authorize a PostgreSql Server network endpoint, you must specify the authorization information in the connection string. The supported authorization method is via username and password.\\r\\n\\r\\n## Set callout policy\\r\\n\\r\\nThe plugin makes callouts to the PostgreSql database. Make sure that the cluster\\'s [callout policy](../management/calloutpolicy.md) enables calls of type `postgresql` to the target *PostgreSqlDbUri*.\\r\\n\\r\\nThe following example shows how to define the callout policy for PostgreSql databases. We recommend restricting the callout policy to specific endpoints (`my_endpoint1`, `my_endpoint2`).\\r\\n\\r\\n```\\r\\n[\\r\\n  {\\r\\n    \"CalloutType\": \"postgresql\",\\r\\n    \"CalloutUriRegex\": \"my_endpoint1\\\\\\\\.postgres\\\\\\\\.database\\\\\\\\.azure\\\\\\\\.com\",\\r\\n    \"CanCall\": true\\r\\n  },\\r\\n  {\\r\\n    \"CalloutType\": \"postgresql\",\\r\\n    \"CalloutUriRegex\": \"my_endpoint2\\\\\\\\.postgres\\\\\\\\.database\\\\\\\\.azure\\\\\\\\.com\",\\r\\n    \"CanCall\": true\\r\\n  }\\r\\n]\\r\\n```\\r\\n\\r\\nThe following example shows a `.alter callout policy` command for `postgresql` *CalloutType*:\\r\\n\\r\\n```\\r\\n.alter cluster policy callout @\\'[{\"CalloutType\": \"postgresql\", \"CalloutUriRegex\": \"\\\\\\\\.postgresql\\\\\\\\.database\\\\\\\\.azure\\\\\\\\.com\", \"CanCall\": true}]\\'\\r\\n```\\r\\n\\r\\n## Username and password authentication\\r\\n\\r\\nThe `postgresql_request` plugin only supports username and password authentication to the PostgreSQL server endpoint and doesn\\'t integrate with Azure Active Directory authentication.\\r\\n\\r\\nThe username and password are provided as part of the connections string using the following parameters:\\r\\n\\r\\n`User ID=...; Password=...;`\\r\\n\\r\\n> [!WARNING]\\r\\n> Confidential or guarded information should be obfuscated from connection strings and queries so that they are omitted from any Kusto tracing.\\r\\n> For more information, see [obfuscated string literals](scalar-data-types/string.md#obfuscated-string-literals).\\r\\n\\r\\n## Encryption and server validation\\r\\n\\r\\nFor security, `SslMode` is unconditionally set to `Required` when connecting to a PostgreSQL server network endpoint. As a result, the server must be configured with a valid SSL/TLS server certificate.\\r\\n\\r\\n## Specify the network endpoint\\r\\n\\r\\nSpecify the PostgreSQL network endpoint as part of the connection string.\\r\\n\\r\\n**Syntax**:\\r\\n\\r\\n`Host` `=` *FQDN* [`Port` `=` *Port*]\\r\\n\\r\\nWhere:\\r\\n\\r\\n* *FQDN* is the fully qualified domain name of the endpoint.\\r\\n* *Port* is the TCP port of the endpoint.',\"### SQL query to Azure PostgreSql DB\\r\\n\\r\\nThe following example sends a SQL query to an Azure PostgreSQL database. It retrieves all records from `public.\\\"Table\\\"`, and then processes the results.\\r\\n\\r\\n> [!NOTE]\\r\\n> This example shouldn't be taken as a recommendation to filter or project data in this manner. SQL queries should be constructed to return the smallest data set possible.\\r\\n\\r\\n```\\r\\nevaluate postgresql_request(\\r\\n    'Host=contoso.postgres.database.azure.com; Port = 5432;'\\r\\n    'Database=Fabrikam;'\\r\\n    h'User Id=USERNAME;'\\r\\n    h'Password=PASSWORD;',\\r\\n    'select * from public.\\\"Table\\\"') : (Id: int, Name: string)\\r\\n| where Id > 0\\r\\n| project Name\\r\\n```\\r\\n\\r\\n### SQL query to an Azure PostgreSql database with modifications\\r\\n\\r\\nThe following example sends a SQL query to an Azure PostgreSql database\\r\\nretrieving all records from `public.\\\"Table\\\"`, while appending another `datetime` column,\\r\\nand then processes the results on the Azure Data Explorer side.\\r\\nIt specifies a SQL parameter (`@param0`) to be used in the SQL query.\\r\\n\\r\\n```\\r\\nevaluate postgresql_request(\\r\\n    'Server=contoso.postgres.database.azure.com; Port = 5432;'\\r\\n    'Database=Fabrikam;'\\r\\n    h'User Id=USERNAME;'\\r\\n    h'Password=PASSWORD;',\\r\\n    'select *, @param0 as dt from public.\\\"Table\\\"',\\r\\n    dynamic({'param0': datetime(2020-01-01 16:47:26.7423305)})) : (Id: int, Name: string, dt: datetime)\\r\\n| where Id > 0\\r\\n| project Name\\r\\n```\\r\\n\\r\\n### SQL query to an Azure PostgreSql database without a query-defined output schema\\r\\n\\r\\nThe following example sends a SQL query to an Azure PostgreSQL database without an output schema. This is not recommended unless the schema is unknown, as it may impact the performance of the query\\r\\n\\r\\n```\\r\\nevaluate postgresql_request(\\r\\n    'Host=contoso.postgres.database.azure.com; Port = 5432;'\\r\\n    'Database=Fabrikam;'\\r\\n    h'User Id=USERNAME;'\\r\\n    h'Password=PASSWORD;',\\r\\n    'select * from public.\\\"Table\\\"')\\r\\n| where Id > 0\\r\\n| project Name\\r\\n```\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/postgresql-request-plugin\",\"postgresql-request-plugin.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"pow\",\"Returns a result of raising to power\",\"## Syntax\\r\\n\\r\\n`pow(`*base*`,` *exponent* `)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *base*| int, real, or long | &check; | The base value.|\\r\\n| *exponent*| int, real, or long | &check; | The exponent value.|\\r\\n\\r\\n## Returns\\r\\n\\r\\nReturns base raised to the power exponent: base ^ exponent.\",'> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAysoyswrUShKLS7NKbEtyC/XMNJRMNYEAGG04SkWAAAA\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint result=pow(2, 3)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|result|\\r\\n|--|\\r\\n|8|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/powfunction\",\"powfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"prev\",\"Returns the value of a specific column in a specified row.\\r\\nThe specified row is at a specified offset from the current row in a [serialized row set](./windowsfunctions.md#serialized-row-set).\",\"## Syntax\\r\\n\\r\\n`prev(`*column*`,` [ *offset* ]`,` [ *default_value* ] `)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *column*| string | &check; | The column from which to get the values.|\\r\\n| *offset*| int | | The offset to go back in rows. The default is 1.|\\r\\n| *default_value*| scalar | | The default value to be used when there are no previous rows from which to take the value. The default is `null`.|\",'### Filter data based on comparison between adjacent rows\\r\\n\\r\\nThe following query returns rows that show breaks longer than a quarter of a second between calls to `sensor-9`.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/SampleIoTData?query=H4sIAAAAAAAAA3WOvQoCMRCEe8F32C53cIIKFhZndY2FNl4v62WDgUtyZBd/wIc30SI2djPzDcP0ET2bEB3pE3kOkTsUnM9ecL9SJPiGR3QEbQuKP3axVbmRlMDlCb11xIJuAuQhA3oIeQ2S8s4as/cHO46WaQheM7SgUSjDs060Uq5Q1ZS1BqZIt+rHr+q6PPuzvoP1ZvkGO/YBANYAAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nTransformedSensorsData\\r\\n| where SensorName == \\'sensor-9\\'\\r\\n| sort by Timestamp asc\\r\\n| extend timeDiffInMilliseconds = datetime_diff(\\'millisecond\\', Timestamp, prev(Timestamp, 1))\\r\\n| where timeDiffInMilliseconds > 250\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|Timestamp|SensorName|Value|PublisherId|MachineId|timeDiff|\\r\\n|--|--|--|--|--|--|\\r\\n|2022-04-13T00:58:53.048506Z|sensor-9|0.39217481975439894|fdbd39ab-82ac-4ca0-99ed-2f83daf3f9bb|M100|251|\\r\\n|2022-04-13T01:07:09.63713Z|sensor-9|0.46645392778288297|e3ed081e-501b-4d59-8e60-8524633d9131|M100|313|\\r\\n|2022-04-13T01:07:10.858267Z|sensor-9|0.693091598493419|278ca033-2b5e-4f2c-b493-00319b275aea|M100|254|\\r\\n|2022-04-13T01:07:11.203834Z|sensor-9|0.52415808840249778|4ea27181-392d-4947-b811-ad5af02a54bb|M100|331|\\r\\n|2022-04-13T01:07:14.431908Z|sensor-9|0.35430645405452|0af415c2-59dc-4a50-89c3-9a18ae5d621f|M100|268|\\r\\n|...|...|...|...|...|...|\\r\\n\\r\\n### Perform aggregation based on comparison between adjacent rows\\r\\n\\r\\nThe following query calculates the average time difference in milliseconds between calls to `sensor-9`.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/SampleIoTData?query=H4sIAAAAAAAAA22NvQ6CQBCEexPfYbuDBAtLi+toLLSB3qzcopewB7ld8Sc+vBwWWNjNzDeZqSMGafvI5CoK0kcpUXG9esP9SpHgGx6RCawFI7Pd7ExqTErh/ITaM4kiD4DSJEAPpeBAp7z0bbsPB991XqjpgxOw4FApwZObaGZ4oaZY1goYIo3Zj9/m+fx7Y8boXwQ4XrL/L/kHqqI6JdkAAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nTransformedSensorsData\\r\\n| where SensorName == \\'sensor-9\\'\\r\\n| sort by Timestamp asc\\r\\n| extend timeDiffInMilliseconds = datetime_diff(\\'millisecond\\', Timestamp, prev(Timestamp, 1))\\r\\n| summarize avg(timeDiffInMilliseconds)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|avg_timeDiffInMilliseconds|\\r\\n|--|\\r\\n|30.726900061254298\\r\\n\\r\\n### Extend row with data from the previous row\\r\\n\\r\\nIn the following query, as part of the serialization done with the [serialize operator](serializeoperator.md), a new column `previous_session_type` is added with data from the previous row. Since there was no session prior to the first session, the column is empty in the first row.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA22NMQ7CMAwAd17hrSB1ADaGLvAEHhBFiRFGIYlspwjUx9cCqerA6POdfSn5how54BVFqGTZTPC6G4KwrGAYoDs3ShGO+8OpM0WQySf6IFTGkUoTJ78DTt/Vii/frtnOssrlgUFB6YnO5+hiY69m9LCopAlXo5X9/yczmplkXLwAAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nConferenceSessions\\r\\n| where conference == \\'Build 2019\\'\\r\\n| serialize previous_session_type = prev(session_type)\\r\\n| project time_and_duration, session_title, session_type, previous_session_type\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n| time_and_duration | session_title | session_type | previous_session_type |\\r\\n|---|---|---|---|\\r\\n| Mon, May 6, 8:30-10:00 am | Vision Keynote - Satya Nadella | Keynote | |\\r\\n| Mon, May 6, 1:20-1:40 pm | Azure Data Explorer: Advanced Time Series analysis | Expo Session | Keynote |\\r\\n| Mon, May 6, 2:00-3:00 pm | Azure\\'s Data Platform - Powering Modern Applications and Cloud Scale Analytics at Petabyte Scale | Breakout | Expo Session |\\r\\n| Mon, May 6, 4:00-4:20 pm | How BASF is using Azure Data Services | Expo Session | Breakout |\\r\\n| Mon, May 6, 6:50 - 7:10 pm | Azure Data Explorer: Operationalize your ML models | Expo Session | Expo Session |\\r\\n| ... | ... | ... | ... |',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/prevfunction\",\"prevfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"preview\",\"Returns a table with up to the specified number of rows from the input record set, and the total number of records in the input record set.\",\"## Syntax\\r\\n\\r\\n*T* `|` `evaluate` `preview(`*NumberOfRows*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n|*T*|string|&check;|The table to preview.|\\r\\n|*NumberOfRows*| int| &check; | The number of rows to preview from the table.|\\r\\n\\r\\n## Returns\\r\\n\\r\\nThe `preview` plugin returns two result tables:\\r\\n\\r\\n* A table with up to the specified number of rows.\\r\\n  For example, the sample query above is equivalent to running `T | take 50`.\\r\\n* A table with a single row/column, holding the number of records in the\\r\\n  input record set.\\r\\n  For example, the sample query above is equivalent to running `T | count`.\\r\\n\\r\\n> [!TIP]\\r\\n> If `evaluate` is preceded by a tabular source that includes a complex filter, or a filter that references most of the source table columns, prefer to use the [`materialize`](materializefunction.md) function. For example:\",'> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAwsuyS/KdS1LzSspVqhRSC1LzClNLElVKChKLctMLdcw1QQA4xlbCCEAAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nStormEvents | evaluate preview(5)\\r\\n```\\r\\n\\r\\n**Table1**\\r\\n\\r\\nThe following output table only includes the first 6 columns. To see the full result, run the query.\\r\\n\\r\\n|StartTime|EndTime|EpisodeId|EventId|State|EventType|...|\\r\\n|--|--|--|\\r\\n|2007-12-30T16:00:00Z|2007-12-30T16:05:00Z|11749|64588|GEORGIA| Thunderstorm Wind|...|\\r\\n|2007-12-20T07:50:00Z|2007-12-20T07:53:00Z|12554|68796|MISSISSIPPI| Thunderstorm Wind|...|\\r\\n|2007-09-29T08:11:00Z|2007-09-29T08:11:00Z|11091|61032|ATLANTIC SOUTH| Waterspout|...|\\r\\n|2007-09-20T21:57:00Z|2007-09-20T22:05:00Z|11078|60913|FLORIDA| Tornado|...|\\r\\n|2007-09-18T20:00:00Z|2007-09-19T18:00:00Z|11074|60904|FLORIDA| Heavy Rain|...|\\r\\n\\r\\n**Table2**\\r\\n\\r\\n|Count|\\r\\n|--|\\r\\n|59066|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/previewplugin\",\"previewplugin.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.OperatorToken,\"print\",\"Outputs a single row with one or more scalar expression results as columns.\",\"## Syntax\\r\\n\\r\\n`print` [*ColumnName* `=`] *ScalarExpression* [',' ...]\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *ColumnName* | string | | The name to assign to the output column.|\\r\\n| *ScalarExpression* | string | &check; | The expression to evaluate.|\\r\\n\\r\\n## Returns\\r\\n\\r\\nA table with one or more columns and a single row. Each column returns the corresponding value of the evaluated *ScalarExpression*.\",'> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAysoyswrUTBQ0FYwBGIjIDYGYhMgNtVRqFCwVVAKzy9XVAIAppjMyScAAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint 0 + 1 + 2 + 3 + 4 + 5, x = \"Wow!\"\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|print_0|x|\\r\\n|--|--|\\r\\n|15| Wow!|\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAysoyswrUUhKzMtLLbItLilKTizRUPJIzcnJV9JRgKLw/KKcFEUlTQBf/iftLAAAAA==\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint banner=strcat(\"Hello\", \", \", \"World!\")\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|banner|\\r\\n|--|\\r\\n|Hello, World!|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/printoperator\",\"printoperator.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.OperatorToken,\"project\",\"Select the columns to include, rename or drop, and insert new computed columns.\",\"The order of the columns in the result is specified by the order of the arguments. Only the columns specified in the arguments are included in the result. Any other columns in the input are dropped.\\r\\n\\r\\n## Syntax\\r\\n\\r\\n*T* `| project` [*ColumnName* | `(`*ColumnName*[`,`]`)` `=`] *Expression* [`,` ...]\\r\\n\\r\\nor\\r\\n\\r\\n*T* `| project` *ColumnName* [`=` *Expression*] [`,` ...]\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n| -- | -- | -- | -- |\\r\\n| *T* | string | &check; | The tabular input for which to project certain columns. |\\r\\n| *ColumnName* | string | | A column name or comma-separated list of column names to appear in the output. |\\r\\n| *Expression* | string | | The scalar expression to perform over the input. |\\r\\n\\r\\n* Either *ColumnName* or *Expression* must be specified.\\r\\n* If there's no *Expression*, then a column of *ColumnName* must appear in the input.\\r\\n* If *ColumnName* is omitted, the output column name of *Expression* will be automatically generated.\\r\\n* If *Expression* returns more than one column, a list of column names can be specified in parentheses. If a list of the column names isn't specified, all *Expression*'s output columns with generated names will be added to the output.\\r\\n\\r\\n> [!NOTE]\\r\\n> It's not recommended to return a new calculated column with the same name as an existing column in the input.\\r\\n\\r\\n## Returns\\r\\n\\r\\nA table with columns that were named as arguments. Contains same number of rows as the input table.\",'### Only show specific columns\\r\\n\\r\\nOnly show the `EventId`, `State`, `EventType` of the `StormEvents` table.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAwsuyS/KdS1LzSsp5qpRKCjKz0pNLlEAC3im6CgElySWpOpA+CGVBakAzXMiTy8AAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nStormEvents\\r\\n| project EventId, State, EventType\\r\\n```\\r\\n\\r\\nThe results table shows only the top 10 results.\\r\\n\\r\\n|EventId|State|EventType|\\r\\n|--|--|--|\\r\\n|61032| ATLANTIC SOUTH| Waterspout|\\r\\n|60904| FLORIDA| Heavy Rain|\\r\\n|60913| FLORIDA| Tornado|\\r\\n|64588| GEORGIA| Thunderstorm Wind|\\r\\n|68796| MISSISSIPPI| Thunderstorm Wind|\\r\\n|68814| MISSISSIPPI| Tornado|\\r\\n|68834| MISSISSIPPI| Thunderstorm Wind|\\r\\n|68846| MISSISSIPPI| Hail|\\r\\n|73241| AMERICAN SAMOA| Flash Flood|\\r\\n|64725| KENTUCKY| Flood|\\r\\n|...|...|...|\\r\\n\\r\\n### Potential manipulations using project\\r\\n\\r\\nThe following query renames the `BeginLocation` column and creates a new column called `TotalInjuries` from a calculation over two existing columns.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAwvJL0nM8czLKi3KTC1WsFWAMV0yi1KTSxS04QKeeSlgIQBwTr1bMQAAAA==\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nStormEvents\\r\\n| project StartLocation = BeginLocation, TotalInjuries = InjuriesDirect + InjuriesIndirect\\r\\n| where TotalInjuries > 5\\r\\n```\\r\\n\\r\\nThe following table shows only the first 10 results.\\r\\n\\r\\n|StartLocation| TotalInjuries|\\r\\n|--|--|\\r\\n|LYDIA| 15|\\r\\n|ROYAL| 15|\\r\\n|GOTHENBURG| 9|\\r\\n|PLAINS| 8|\\r\\n|KNOXVILLE| 9|\\r\\n|CAROL STREAM| 11|\\r\\n|HOLLY| 9|\\r\\n|RUFFIN| 9|\\r\\n|ENTERPRISE MUNI ARPT| 50|\\r\\n|COLLIERVILLE| 6|\\r\\n|...|...|\\r\\n\\r\\n## See also\\r\\n\\r\\n* [`extend`](extendoperator.md)\\r\\n* [series_stats](series-statsfunction.md)',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/projectoperator\",\"projectoperator.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.OperatorToken,\"project-away\",\"Select what columns from the input table to exclude from the output table.\",\"## Syntax\\r\\n\\r\\n*T* `| project-away` *ColumnNameOrPattern* [`,` ...]\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *T* | string | &check; | The tabular input from which to remove columns. |\\r\\n| *ColumnNameOrPattern* | string | &check; | One or more column names or column wildcard-patterns to be removed from the output.|\\r\\n\\r\\n## Returns\\r\\n\\r\\nA table with columns that weren't named as arguments. Contains same number of rows as the input table.\\r\\n\\r\\n> [!TIP]\\r\\n> You can `project-away` any columns that are present in the original table or that were computed as part of the query.\\r\\n\\r\\n> [!NOTE]\\r\\n> The order of the columns in the result is determined by their original order in the table. Only the columns that were specified as arguments are dropped. The other columns are included in the result.\",'The input table `PopulationData` has 2 columns: `State` and `Population`. Project-away the `Population` column and you\\'re left with a list of state names.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAwvILyjNSSzJzM9zSSxJ5OWqUSgoys9KTS7RTSxPrFQIgEsDAH2sb1kpAAAA\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nPopulationData\\r\\n| project-away Population\\r\\n```\\r\\n\\r\\nThe following table shows only the first 10 results.\\r\\n\\r\\n|State|\\r\\n|---|\\r\\n|ALABAMA|\\r\\n|ALASKA|\\r\\n|ARIZONA|\\r\\n|ARKANSAS|\\r\\n|CALIFORNIA|\\r\\n|COLORADO|\\r\\n|CONNECTICUT|\\r\\n|DELAWARE|\\r\\n|DISTRICT OF COLUMBIA|\\r\\n|FLORIDA|\\r\\n|...|\\r\\n\\r\\n### Project-away using a column name pattern\\r\\n\\r\\nThe following query removes columns starting with the word \"session\".\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA3POz0tLLUrNS04NTi0uzszPK+blqlEoKMrPSk0u0U0sT6xUKIZIaAEAV4MJgSsAAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nConferenceSessions\\r\\n| project-away session*\\r\\n```\\r\\n\\r\\nThe following table shows only the first 10 results.\\r\\n\\r\\n|conference|owner|participants|URL|level|starttime|duration|time_and_duration|kusto_affinity|\\r\\n|---|---|---|---|---|---|---|---|---|\\r\\n|PASS Summit 2019| Avner Aharoni| |<https://www.eventbrite.com/e/near-real-time-interact-analytics-on-big-data-using-azure-data-explorer-fg-tickets-77532775619>| |2019-11-07T19:15:00Z|  |Thu, Nov 7, 11:15 AM-12:15 PM PST |Focused|\\r\\n|PASS Summit| Rohan Kumar| Ariel Pisetzky|<https://www.pass.org/summit/2018/Learn/Keynotes.aspx>| |2018-11-07T08:15:00Z| 90 |Wed, Nov 7, 8:15-9:45 am |Mention|\\r\\n|Intelligent Cloud 2019| Rohan Kumar| Henning Rauch| | |2019-04-09T09:00:00Z| 90| Tue, Apr 9, 9:00-10:30 AM |Mention|\\r\\n|Ignite 2019| Jie Feng|   | `https://myignite.techcommunity.microsoft.com/sessions/83940` | 100| 2019-11-06T14:35:00Z| 20 |Wed, Nov 6, 9:35 AM - 9:55 AM| Mention|\\r\\n|Ignite 2019| Bernhard Rode| Le Hai Dang, Ricardo Niepel |`https://myignite.techcommunity.microsoft.com/sessions/81596` | 200 |2019-11-06T16:45:00Z| 45| Wed, Nov 6, 11:45 AM-12:30 PM |Mention|\\r\\n|Ignite 2019| Tzvia Gitlin| Troyna| `https://myignite.techcommunity.microsoft.com/sessions/83933` |  400 |2019-11-06T17:30:00Z| 75| Wed, Nov 6, 12:30 PM-1:30 PM |Focused|\\r\\n|Ignite 2019| Jie Feng | `https://myignite.techcommunity.microsoft.com/sessions/81057` | 300| 2019-11-06T20:30:00Z| 45 |Wed, Nov 6, 3:30 PM-4:15 PM |Mention|\\r\\n|Ignite 2019| Manoj Raheja|  | `https://myignite.techcommunity.microsoft.com/sessions/83939` | 300| 2019-11-07T18:15:00Z| 20 |Thu, Nov 7, 1:15 PM-1:35 PM|  Focused|\\r\\n|Ignite 2019| Uri Barash|  | `https://myignite.techcommunity.microsoft.com/sessions/81060` |  300| 2019-11-08T17:30:00Z| 45 |Fri, Nov8,  10:30 AM-11:15 AM|  Focused|\\r\\n|Ignite 2018| Manoj Raheja|  |<https://azure.microsoft.com/resources/videos/ignite-2018-azure-data-explorer-%E2%80%93-query-billions-of-records-in-seconds/>| 200|  |20|  |Focused|\\r\\n|...|...|...|...|...|...|...|...|...|\\r\\n\\r\\n## See also\\r\\n\\r\\n* To choose what columns from the input to keep in the output, use [project-keep](project-keep-operator.md).\\r\\n* To rename columns, use [`project-rename`](projectrenameoperator.md).\\r\\n* To reorder columns, use [`project-reorder`](projectreorderoperator.md).',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/projectawayoperator\",\"projectawayoperator.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.OperatorToken,\"project-keep\",\"Select what columns from the input to keep in the output. Only the columns that are specified as arguments will be shown in the result. The other columns are excluded.\",\"## Syntax\\r\\n\\r\\n*T* `| project-keep` *ColumnNameOrPattern* [`,` ...]\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *T* | string | &check; | The tabular input from which to keep columns.|\\r\\n| *ColumnNameOrPattern* | string | &check; | One or more column names or column wildcard-patterns to be kept in the output.|\\r\\n\\r\\n## Returns\\r\\n\\r\\nA table with columns that were named as arguments. Contains same number of rows as the input table.\\r\\n\\r\\n> [!TIP]\\r\\n> You can `project-keep` any columns that are present in the original table or that were computed as part of the query.\\r\\n\\r\\n> [!NOTE]\\r\\n> The order of the columns in the result is determined by their original order in the table. Only the columns that were specified as arguments are kept. The other columns are excluded from the result.\",'The following query returns columns from the `ConferenceSessions` table that contain the word \"session\".\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA3POz0tLLUrNS04NTi0uzszPK+blqlEoKMrPSk0u0c1OTS1QKIZIaAEAWs65FysAAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nConferenceSessions\\r\\n| project-keep session*\\r\\n```\\r\\n\\r\\nThe following table shows only the first 10 results.\\r\\n\\r\\n|sessionid|session_title|session_type|session_location|\\r\\n|--|--|--|--|\\r\\n|COM64| Focus Group: Azure Data Explorer |Focus Group|Online|\\r\\n|COM65| Focus Group: Azure Data Explorer |Focus Group|Online|\\r\\n|COM08| Ask the Team: Azure Data Explorer|Ask the Team|Online|\\r\\n|COM137| Focus Group: Built-In Dashboard and Smart Auto Scaling Capabilities in Azure Data Explorer|Focus Group| Online|\\r\\n|CON-PRT157| Roundtable: Monitoring and managing your Azure Data Explorer deployments|Roundtable|Online|\\r\\n|CON-PRT103| Roundtable: Advanced Kusto query language topics|Roundtable| Online|\\r\\n|CON-PRT157| Roundtable: Monitoring and managing your Azure Data Explorer deployments|Roundtable|Online|\\r\\n|CON-PRT103| Roundtable: Advanced Kusto query language topics|Roundtable|Online|\\r\\n|CON-PRT130| Roundtable: Data exploration and visualization with Azure Data Explorer |Roundtable |Online|\\r\\n|CON-PRT130| Roundtable: Data exploration and visualization with Azure Data Explorer |Roundtable |Online|\\r\\n|...|...|...|...|\\r\\n\\r\\n## See also\\r\\n\\r\\n* To choose what columns from the input to exclude from the output, use [project-away](projectawayoperator.md).\\r\\n* To rename columns, use [`project-rename`](projectrenameoperator.md).\\r\\n* To reorder columns, use [`project-reorder`](projectreorderoperator.md).',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/project-keep-operator\",\"project-keep-operator.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.OperatorToken,\"project-rename\",\"Renames columns in the output table.\",\"## Syntax\\r\\n\\r\\n*T* `| project-rename` *NewColumnName* = *ExistingColumnName* [`,` ...]\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *T* | string | &check; | The input tabular data.|\\r\\n| *NewColumnName* | string | &check; | The new column name.|\\r\\n| *ExistingColumnName* | string | &check; | The name of the existing column to rename.|\\r\\n\\r\\n## Returns\\r\\n\\r\\nA table that has the columns in the same order as in an existing table, with columns renamed.\",\"> [!div class=\\\"nextstepaction\\\"]\\r\\n> <a href=\\\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAysoyswrUUi0VU9U11FIslVPAlLJturJ6rxcNQoFRflZqcklukWpeYm5qQp5qeXxSbZJOmBGom0iALIWMhk8AAAA\\\" target=\\\"_blank\\\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint a='a', b='b', c='c'\\r\\n|  project-rename new_b=b, new_a=a\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|new_a|new_b|c|\\r\\n|---|---|---|\\r\\n|a|b|c|\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/projectrenameoperator\",\"projectrenameoperator.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.OperatorToken,\"project-reorder\",\"Reorders columns in the output table.\",\"## Syntax\\r\\n\\r\\n*T* `| project-reorder` *ColumnNameOrPattern* [`asc` | `desc` | `granny-asc` | `granny-desc`] [`,` ...]\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *T* | string | &check; | The input tabular data.|\\r\\n| *ColumnNameOrPattern* | string | &check; | The name of the column or column wildcard pattern by which to order the columns. |\\r\\n| `asc`, `desc`, `granny-asc`, `granny-desc` | string | | Indicates how to order the columns when a wildcard pattern is used. `asc` or `desc` orders columns by column name in ascending or descending manner, respectively. `granny-asc` or `granny-desc` orders by ascending or descending, respectively, while secondarily sorting by the next numeric value. For example, `a100` comes before `a20` when `granny-asc` is specified.|\\r\\n\\r\\n> [!NOTE]\\r\\n>\\r\\n> * If no explicit ordering is specified, the order is determined by the matching columns as they appear in the source table.\\r\\n> * In ambiguous *ColumnNameOrPattern* matching, the column appears in the first position matching the pattern.\\r\\n> * Specifying columns for the `project-reorder` is optional. Columns that aren't specified explicitly appear as the last columns of the output table.\\r\\n> * To remove columns, use [`project-away`](projectawayoperator.md).\\r\\n> * To choose which columns to keep, use [`project-keep`](project-keep-operator.md).\\r\\n> * To rename columns, use [`project-rename`](projectrenameoperator.md).\\r\\n\\r\\n## Returns\\r\\n\\r\\nA table that contains columns in the order specified by the operator arguments. `project-reorder` doesn't rename or remove columns from the table, therefore, all columns that existed in the source table, appear in the result table.\",\"Reorder a table with three columns (a, b, c) so the second column (b) will appear first.\\r\\n\\r\\n> [!div class=\\\"nextstepaction\\\"]\\r\\n> <a href=\\\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAysoyswrUUi0VU9U11FIslVPAlLJturJ6rxcNQoKBUX5WanJJbpFqflFKalFCkkA1H2l7S8AAAA=\\\" target=\\\"_blank\\\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint a='a', b='b', c='c'\\r\\n|  project-reorder b\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|b|a|c|\\r\\n|---|---|---|\\r\\n|b|a|c|\\r\\n\\r\\nReorder columns of a table so that columns starting with `a` will appear before other columns.\\r\\n\\r\\n> [!div class=\\\"nextstepaction\\\"]\\r\\n> <a href=\\\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAysoyswrUUhSsFVQT1LXUUg0slVPNAIxjIEMYxDDEMgwVOflqlFQKCjKz0pNLtEtSs0vSkktUkjUUkgsTgYAJU2yOEMAAAA=\\\" target=\\\"_blank\\\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint b = 'b', a2='a2', a3='a3', a1='a1'\\r\\n|  project-reorder a* asc\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|a1|a2|a3|b|\\r\\n|---|---|---|---|\\r\\n|a1|a2|a3|b|\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/projectreorderoperator\",\"projectreorderoperator.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"Python\",\"The Python plugin runs a user-defined function (UDF) using a Python script. The Python script gets tabular data as its input, and produces tabular output.\\r\\nThe plugin's runtime is hosted in [sandboxes](../concepts/sandboxes.md), running on the cluster's nodes.\",\"## Syntax\\r\\n\\r\\n*T* `|` `evaluate` [`hint.distribution` `=` (`single` | `per_node`)] `python(`*output_schema*`,` *script* [`,` *script_parameters*][`,` *external_artifacts*][`,` *spill_to_disk*]`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n|Name|Type|Required|Description|\\r\\n|--|--|--|--|\\r\\n|*output_schema*|string|&check;|A `type` literal that defines the output schema of the tabular data, returned by the Python code. The format is: `typeof(`*ColumnName*`:` *ColumnType*[, ...]`)`. For example, `typeof(col1:string, col2:long)`. To extend the input schema, use the following syntax: `typeof(*, col1:string, col2:long)`.|\\r\\n|*script*|string|&check;|The valid Python script to execute. To generate multi-line strings, see [Usage tips](#usage-tips).|\\r\\n|*script_parameters*|dynamic||A property bag of name value pairs to be passed to the Python script as the reserved `kargs` dictionary. For more information, see [Reserved Python variables](#reserved-python-variables).|\\r\\n|`hint.distribution`|string||A hint for the plugin's execution to be distributed across multiple cluster nodes. The default value is `single`. `single` means a single instance of the script will run over the entire query data. `per_node` means that if the query before the Python block is distributed, an instance of the script will run on each node, on the data that it contains.|\\r\\n|*external_artifacts*|dynamic||A property bag of name and URL pairs for artifacts that are accessible from cloud storage. See more in [Using external artifacts](#using-external-artifacts).|\\r\\n|*spill_to_disk*|bool||Specifies an alternative method for serializing the input table to the Python sandbox. For serializing big tables set it to `true` to speed up the serialization and significantly reduce the sandbox memory consumption. Default is `false` as this parameter is experimental.|\\r\\n\\r\\n## Reserved Python variables\\r\\n\\r\\nThe following variables are reserved for interaction between Kusto Query Language and the Python code.\\r\\n\\r\\n* `df`: The input tabular data (the values of `T` above), as a `pandas` DataFrame.\\r\\n* `kargs`: The value of the *script_parameters* argument, as a Python dictionary.\\r\\n* `result`: A `pandas` DataFrame created by the Python script, whose value becomes the tabular data that gets sent to the Kusto query operator that follows the plugin.\\r\\n\\r\\n## Enable the plugin\\r\\n\\r\\nThe plugin is disabled by default. Before you start, review the list of [prerequisites](../concepts/sandboxes.md#prerequisites-and-limitations).\\r\\n\\r\\nTo enable the plugin and select the version of the Python image, see [Enable language extensions on your cluster](../../language-extensions.md#enable-language-extensions-on-your-cluster).\\r\\n\\r\\n## Python sandbox image\\r\\n\\r\\nTo change the version of the Python image, see [Change the Python language extensions image on your cluster](../../language-extensions.md#change-the-python-language-extensions-image-on-your-cluster).\\r\\n\\r\\nTo see the list of packages for the different Python images, see [Python package reference](../../python-package-reference.md).\\r\\n\\r\\n> [!NOTE]\\r\\n>\\r\\n> * By default, the plugin imports *numpy* as **np** and *pandas* as **pd**. Optionally, you can import other modules as needed.\\r\\n> * Some packages might be incompatible with the limitations enforced by the sandbox where the plugin is run.\\r\\n\\r\\n## Use Ingestion from query and update policy\\r\\n\\r\\n* Use the plugin in queries that are:\\r\\n  * Defined as part of an [update policy](../management/updatepolicy.md), whose source table is ingested to using *non-streaming* ingestion.\\r\\n  * Run as part of a command that [ingests from a query](../management/data-ingestion/ingest-from-query.md), such as `.set-or-append`.\\r\\n    In both these cases, verify that the volume and frequency of the ingestion, and the complexity and\\r\\n    resources used by the Python logic, align with [sandbox parameters](../concepts/sandboxes.md#sandbox-parameters) and the cluster's available resources. Failure to do so may result in [throttling errors](../concepts/sandboxes.md#errors).\\r\\n* You can't use the plugin in a query that is defined as part of an update policy, whose source table is ingested using [streaming ingestion](../../ingest-data-streaming.md).\",\"~~~kusto\\r\\nrange x from 1 to 360 step 1\\r\\n| evaluate python(\\r\\n//\\r\\ntypeof(*, fx:double),               //  Output schema: append a new fx column to original table \\r\\n```\\r\\nresult = df\\r\\nn = df.shape[0]\\r\\ng = kargs[\\\"gain\\\"]\\r\\nf = kargs[\\\"cycles\\\"]\\r\\nresult[\\\"fx\\\"] = g * np.sin(df[\\\"x\\\"]/n*2*np.pi*f)\\r\\n```\\r\\n, bag_pack('gain', 100, 'cycles', 4)    //  dictionary of parameters\\r\\n)\\r\\n| render linechart \\r\\n~~~\\r\\n\\r\\n![sine demo.](images/plugin/sine-demo.png)\\r\\n\\r\\n~~~kusto\\r\\nprint \\\"This is an example for using 'external_artifacts'\\\"\\r\\n| evaluate python(\\r\\n    typeof(File:string, Size:string), ```if 1:\\r\\n    import os\\r\\n    result = pd.DataFrame(columns=['File','Size'])\\r\\n    sizes = []\\r\\n    path = '.\\\\\\\\\\\\\\\\Temp'\\r\\n    files = os.listdir(path)\\r\\n    result['File']=files\\r\\n    for file in files:\\r\\n        sizes.append(os.path.getsize(path + '\\\\\\\\\\\\\\\\' + file))\\r\\n    result['Size'] = sizes\\r\\n    ```,\\r\\n    external_artifacts = \\r\\n        dynamic({\\\"this_is_my_first_file\\\":\\\"https://kustoscriptsamples.blob.core.windows.net/samples/R/sample_script.r\\\",\\r\\n                 \\\"this_is_a_script\\\":\\\"https://kustoscriptsamples.blob.core.windows.net/samples/python/sample_script.py\\\"})\\r\\n)\\r\\n~~~\\r\\n\\r\\n| File                  | Size |\\r\\n|-----------------------|------|\\r\\n| this_is_a_script      | 120  |\\r\\n| this_is_my_first_file | 105  |\\r\\n\\r\\n## Performance tips\\r\\n\\r\\n* Reduce the plugin's input data set to the minimum amount required (columns/rows).\\r\\n  * Use filters on the source data set, when possible, with Kusto's query language.\\r\\n  * To do a calculation on a subset of the source columns, project only those columns before invoking the plugin.\\r\\n* Use `hint.distribution = per_node` whenever the logic in your script is distributable.\\r\\n  * You can also use the [partition operator](partitionoperator.md) for partitioning the input data set.\\r\\n* Use Kusto's query language whenever possible, to implement the logic of your Python script.\\r\\n\\r\\n\\r\\n## Usage tips\\r\\n\\r\\n* To generate multi-line strings containing the Python script in `Kusto.Explorer`, copy your Python script from your favorite\\r\\n  Python editor (*Jupyter*, *Visual Studio Code*, *PyCharm*, and so on).\\r\\n  Now do one of:\\r\\n  * Enclose the full script between lines containing three consecutive backticks, for example:  \\r\\n      ` ``` `  \\r\\n      ` python code`  \\r\\n      ` ``` `\\r\\n  * Press **F2** to open the *Edit in Python* window. Paste the script into this window. Select **OK**. The script will be\\r\\n      decorated with quotes and new lines, so it's valid in Kusto, and automatically pasted into the query tab.\\r\\n  * Paste the Python code directly into the query tab. Select those lines, and press **Ctrl+K**, **Ctrl+S** hot keys, to decorate them as\\r\\n      above. To reverse, press **Ctrl+K**, **Ctrl+M** hot keys. See the full list of [Query Editor shortcuts](../tools/kusto-explorer-shortcuts.md#query-editor).\\r\\n* To avoid conflicts between Kusto string delimiters and Python string literals, use:\\r\\n  * Single quote characters (`'`) for Kusto string literals in Kusto queries\\r\\n  * Double quote characters (`\\\"`) for Python string literals in Python scripts\\r\\n* Use the [`externaldata` operator](externaldata-operator.md) to obtain the content of a script that you've stored in an external location, such as Azure Blob storage.\\r\\n  \\r\\n\\r\\n### Example\\r\\n\\r\\n```\\r\\n    let script = \\r\\n        externaldata(script:string)\\r\\n        [h'https://kustoscriptsamples.blob.core.windows.net/samples/python/sample_script.py']\\r\\n        with(format = raw);\\r\\n    range x from 1 to 360 step 1\\r\\n    | evaluate python(\\r\\n        typeof(*, fx:double),\\r\\n        toscalar(script), \\r\\n        bag_pack('gain', 100, 'cycles', 4))\\r\\n    | render linechart \\r\\n ```\\r\\n\\r\\n## Using External Artifacts\\r\\n\\r\\nExternal artifacts from cloud storage can be made available for the script and used at runtime.\\r\\n\\r\\nThe URLs referenced by the external artifacts property must be:\\r\\n\\r\\n* Included in the cluster's [callout policy](../management/calloutpolicy.md).\\r\\n* In a publicly available location, or provide the necessary credentials, as explained in [storage connection strings](../api/connection-strings/storage-connection-strings.md).\\r\\n\\r\\n\\r\\n> [!NOTE]\\r\\n> When authenticating external artifacts using Managed Identities, the `SandboxArtifacts` usage must be defined on the cluster level [managed identity policy](../management/managed-identity-policy.md).\\r\\n\\r\\nThe artifacts are made available for the script to consume from a local temporary directory, `.\\\\Temp`. The names provided in the property bag are used as the local file names. See [Examples](#examples).\\r\\n\\r\\nFor information regarding referencing external packages, see [Install packages for the Python plugin](#install-packages-for-the-python-plugin).\\r\\n\\r\\n## Install packages for the Python plugin\\r\\n\\r\\nYou may need to install package(s) yourself, for the following reasons:\\r\\n\\r\\n* The package is private and is your own.\\r\\n* The package is public but isn't included in the plugin's base image.\\r\\n\\r\\n\\r\\nInstall packages as follows:\\r\\n\\r\\n### Prerequisites\\r\\n\\r\\n1. Create a blob container to host the packages, preferably in the same place as your cluster. For example, `https://artifactswestus.blob.core.windows.net/python`, assuming your cluster is in West US.\\r\\n  1. Alter the cluster's [callout policy](../management/calloutpolicy.md) to allow access to that location.\\r\\n        * This change requires [AllDatabasesAdmin](../management/access-control/role-based-access-control.md) permissions.\\r\\n\\r\\n        * For example, to enable access to a blob located in `https://artifactswestus.blob.core.windows.net/python`, run the following command:\\r\\n\\r\\n        \\r\\n        ```\\r\\n        .alter-merge cluster policy callout @'[ { \\\"CalloutType\\\": \\\"sandbox_artifacts\\\", \\\"CalloutUriRegex\\\": \\\"artifactswestus\\\\\\\\.blob\\\\\\\\.core\\\\\\\\.windows\\\\\\\\.net/python/\\\",\\\"CanCall\\\": true } ]'\\r\\n        ```\\r\\n\\r\\n\\r\\n### Install packages\\r\\n\\r\\n1. For public packages in [PyPi](https://pypi.org/) or other channels,\\r\\ndownload the package and its dependencies.\\r\\n\\r\\n   * From a cmd window in your local Windows Python environment, run:\\r\\n\\r\\n    ```python\\r\\n    pip wheel [-w download-dir] package-name.\\r\\n    ```\\r\\n\\r\\n1. Create a zip file that contains the required package and its dependencies.\\r\\n\\r\\n    * For private packages, zip the folder of the package and the folders of its dependencies.\\r\\n    * For public packages, zip the files that were downloaded in the previous step.\\r\\n\\r\\n\\r\\n> [!NOTE]\\r\\n>\\r\\n> * Make sure to download the package that is compatible to the Python engine and the platform of the sandbox runtime (currently 3.6.5 on Windows)\\r\\n    > * Make sure to zip the `.whl` files themselves, and not their parent folder.\\r\\n    > * You can skip `.whl` files for packages that already exist with the same version in the base sandbox image.\\r\\n\\r\\n1. Upload the zipped file to a blob in the artifacts location (from step 1).\\r\\n\\r\\n1. Call the `python` plugin.\\r\\n    * Specify the `external_artifacts` parameter with a property bag of name and reference to the zip file (the blob's URL, including a SAS token).\\r\\n    * In your inline python code, import `Zipackage` from `sandbox_utils` and call its `install()` method with the name of the zip file.\\r\\n\\r\\n\\r\\n### Example\\r\\n\\r\\nInstall the [Faker](https://pypi.org/project/Faker/) package that generates fake data.\\r\\n\\r\\n~~~kusto\\r\\nrange ID from 1 to 3 step 1 \\r\\n| extend Name=''\\r\\n| evaluate python(typeof(*), ```if 1:\\r\\n    from sandbox_utils import Zipackage\\r\\n    Zipackage.install(\\\"Faker.zip\\\")\\r\\n    from faker import Faker\\r\\n    fake = Faker()\\r\\n    result = df\\r\\n    for i in range(df.shape[0]):\\r\\n        result.loc[i, \\\"Name\\\"] = fake.name()\\r\\n    ```,\\r\\n    external_artifacts=bag_pack('faker.zip', 'https://artifacts.blob.core.windows.net/kusto/Faker.zip?*** REPLACE WITH YOUR SAS TOKEN ***'))\\r\\n~~~\\r\\n\\r\\n| ID | Name         |\\r\\n|----|--------------|\\r\\n|   1| Gary Tapia   |\\r\\n|   2| Emma Evans   |\\r\\n|   3| Ashley Bowen |\\r\\n\\r\\n---\\r\\n\\r\\n## See also\\r\\n\\r\\nFor more examples of UDF functions that use the Python plugin, see the [Functions library](../functions-library/functions-library.md).\\r\\n\\r\\n---\\r\\n\\r\\n> [!IMPORTANT]\\r\\n> The content below is Microsoft confidential(not available in the [public site](https://docs.microsoft.com/en-us/azure/data-explorer/))\\r\\n\\r\\n# Python plugin (Preview) - Internal\\r\\n\\r\\nFor questions or feedback about this plugin join the discussion at [Kusto Machine Learning DL](mailto:kustoML@microsoft.com).\\r\\n\\r\\n## Installing packages for the Python plugin (experimental) - Internal\\r\\n\\r\\nThe `python` plugin sandbox image is based on Anaconda 5.2.0 distribution with Python 3.6 engine. If you need a common public package that is not pre-installed, we recommend contacting [Kusto Machine Learning DL](mailto:kustoml@microsoft.com)to check if it can be added to the common image.\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/pythonplugin\",\"pythonplugin.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"R\",\"The R plugin runs a user-defined function (UDF) using an R script.\",\"The script gets tabular data as its input, and produces tabular output.\\r\\nThe plugin's runtime is hosted in a [sandbox](../concepts/sandboxes.md) on the cluster's nodes. The sandbox provides an isolated and secure environment.\\r\\n\\r\\n## Syntax\\r\\n\\r\\n*T* `|` `evaluate` [`hint.distribution` `=` (`single` | `per_node`)] `r(`*output_schema*`,` *script* [`,` *script_parameters*] [`,` *external_artifacts*]`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n|Name|Type|Required|Description|\\r\\n|--|--|--|--|\\r\\n|*output_schema*|string|&check;|A `type` literal that defines the output schema of the tabular data, returned by the R code. The format is: `typeof(`*ColumnName*`:` *ColumnType*[, ...]`)`. For example: `typeof(col1:string, col2:long)`. To extend the input schema, use the following syntax: `typeof(*, col1:string, col2:long)`.|\\r\\n|*script*|string|&check;|The valid R script to be executed.|\\r\\n|*script_parameters*|dynamic||A property bag of name and value pairs to be passed to the R script as the reserved `kargs` dictionary. For more information, see [Reserved R variables](#reserved-r-variables).|\\r\\n|`hint.distribution`|string||Hint for the plugin's execution to be distributed across multiple cluster nodes. The default value is `single`. `single` means that a single instance of the script will run over the entire query data. `per_node` means that if the query before the R block is distributed, an instance of the script will run on each node over the data that it contains.|\\r\\n|*external_artifacts*|dynamic||A property bag of name and URL pairs for artifacts that are accessible from cloud storage. They can be made available for the script to use at runtime. URLs referenced in this property bag are required to be included in the cluster's [callout policy](../management/calloutpolicy.md) and in a publicly available location, or contain the necessary credentials, as explained in [storage connection strings](../api/connection-strings/storage-connection-strings.md). The artifacts are made available for the script to consume from a local temporary directory, `.\\\\Temp`. The names provided in the property bag are used as the local file names. See [Example](#examples). For more information, see [Install packages for the R plugin](#install-packages-for-the-r-plugin).|\\r\\n\\r\\n## Reserved R variables\\r\\n\\r\\nThe following variables are reserved for interaction between Kusto Query Language and the R code:\\r\\n\\r\\n* `df`: The input tabular data (the values of `T` above), as an R DataFrame.\\r\\n* `kargs`: The value of the *script_parameters* argument, as an R dictionary.\\r\\n* `result`: An R DataFrame created by the R script. The value becomes the tabular data that gets sent to any Kusto query operator that follows the plugin.\\r\\n\\r\\n## Enable the plugin\\r\\n\\r\\n* The plugin is disabled by default.\\r\\n* Enable or disable the plugin in the Azure portal in the **Configuration** tab of your cluster. For more information, see [Manage language extensions in your Azure Data Explorer cluster (Preview)](../../language-extensions.md)\\r\\n\\r\\n## R sandbox image\\r\\n\\r\\n* The R sandbox image is based on *R 3.4.4 for Windows*, and includes packages from [Anaconda's R Essentials bundle](https://docs.anaconda.com/anaconda/packages/r-language-pkg-docs/).\",\"```\\r\\nrange x from 1 to 360 step 1\\r\\n| evaluate r(\\r\\n//\\r\\ntypeof(*, fx:double),               //  Output schema: append a new fx column to original table \\r\\n//\\r\\n'result <- df\\\\n'                    //  The R decorated script\\r\\n'n <- nrow(df)\\\\n'\\r\\n'g <- kargs$gain\\\\n'\\r\\n'f <- kargs$cycles\\\\n'\\r\\n'result$fx <- g * sin(df$x / n * 2 * pi * f)'\\r\\n//\\r\\n, bag_pack('gain', 100, 'cycles', 4)    //  dictionary of parameters\\r\\n)\\r\\n| render linechart \\r\\n```\\r\\n\\r\\n![Sine demo.](images/plugin/sine-demo.png)\\r\\n\\r\\n## Performance tips\\r\\n\\r\\n* Reduce the plugin's input data set to the minimum amount required (columns/rows).\\r\\n* Use filters on the source data set using the Kusto Query Language, when possible.\\r\\n* To make a calculation on a subset of the source columns, project only those columns before invoking the plugin.\\r\\n* Use `hint.distribution = per_node` whenever the logic in your script is distributable.\\r\\n* You can also use the [partition operator](partitionoperator.md) for partitioning the input data set.\\r\\n* Whenever possible, use the Kusto Query Language to implement the logic of your R script.\\r\\n\\r\\n    For example:\\r\\n\\r\\n    \\r\\n    ```\\r\\n    .show operations\\r\\n    | where StartedOn > ago(1d) // Filtering out irrelevant records before invoking the plugin\\r\\n    | project d_seconds = Duration / 1s // Projecting only a subset of the necessary columns\\r\\n    | evaluate hint.distribution = per_node r( // Using per_node distribution, as the script's logic allows it\\r\\n        typeof(*, d2:double),\\r\\n        'result <- df\\\\n'\\r\\n        'result$d2 <- df$d_seconds\\\\n' // Negative example: this logic should have been written using Kusto's query language\\r\\n      )\\r\\n    | summarize avg = avg(d2)\\r\\n    ```\\r\\n\\r\\n\\r\\n## Usage tips\\r\\n\\r\\n* To avoid conflicts between Kusto string delimiters and R string delimiters:  \\r\\n  * Use single quote characters (`'`) for Kusto string literals in Kusto queries.\\r\\n  * Use double quote characters (`\\\"`) for R string literals in R scripts.\\r\\n* Use the [external data operator](externaldata-operator.md) to obtain the content of\\r\\n  a script that you've stored in an external location, such as Azure blob storage or a public GitHub repository.\\r\\n  \\r\\n  For example:\\r\\n\\r\\n    \\r\\n    ```\\r\\n    let script = \\r\\n        externaldata(script:string)\\r\\n        [h'https://kustoscriptsamples.blob.core.windows.net/samples/R/sample_script.r']\\r\\n        with(format = raw);\\r\\n    range x from 1 to 360 step 1\\r\\n    | evaluate r(\\r\\n        typeof(*, fx:double),\\r\\n        toscalar(script), \\r\\n        bag_pack('gain', 100, 'cycles', 4))\\r\\n    | render linechart \\r\\n    ```\\r\\n\\r\\n\\r\\n## Install packages for the R plugin\\r\\n\\r\\nFollow these step by step instructions to install package(s) that aren't included in the plugin's base image.\\r\\n\\r\\n### Prerequisites\\r\\n\\r\\n1. Create a blob container to host the packages, preferably in the same place as your cluster. For example, `https://artifactswestus.blob.core.windows.net/r`, assuming your cluster is in West US.\\r\\n  1. Alter the cluster's [callout policy](../management/calloutpolicy.md) to allow access to that location.\\r\\n        * This change requires [AllDatabasesAdmin](../management/access-control/role-based-access-control.md) permissions.\\r\\n\\r\\n        * For example, to enable access to a blob located in `https://artifactswestus.blob.core.windows.net/r`, run the following command:\\r\\n\\r\\n        \\r\\n        ```\\r\\n        .alter-merge cluster policy callout @'[ { \\\"CalloutType\\\": \\\"sandbox_artifacts\\\", \\\"CalloutUriRegex\\\": \\\"artifactswestus\\\\\\\\.blob\\\\\\\\.core\\\\\\\\.windows\\\\\\\\.net/r/\\\",\\\"CanCall\\\": true } ]'\\r\\n        ```\\r\\n\\r\\n\\r\\n### Install packages\\r\\n\\r\\nThe example snips below assume local R machine on Windows environment.\\r\\n\\r\\n1. Verify you're using the appropriate R version \\u2013 current R Sandbox version is 3.4.4:\\r\\n\\r\\n    ```\\r\\n    > R.Version()[\\\"version.string\\\"]\\r\\n\\r\\n    $version.string\\r\\n    [1] \\\"R version 3.4.4 (2018-03-15)\\\"\\r\\n    ```\\r\\n\\r\\n    If needed you can download it from [here](https://cran.r-project.org/bin/windows/base/old/3.4.4/).\\r\\n\\r\\n1. Launch the x64 RGui\\r\\n\\r\\n1. Create a new empty folder to be populated with all the relevant packages you would like to install. In this example we install the [brglm2 package](https://cran.r-project.org/web/packages/brglm2/index.html), so creating \\\"C:\\\\brglm2\\\".\\r\\n\\r\\n1. Add the newly created folder path to lib paths:\\r\\n\\r\\n    ```\\r\\n    > .libPaths(\\\"C://brglm2\\\")\\r\\n    ```\\r\\n\\r\\n1. Verify that the new folder is now the first path in .libPaths():\\r\\n\\r\\n    ```\\r\\n    > .libPaths()\\r\\n    \\r\\n    [1] \\\"C:/brglm2\\\"    \\\"C:/Program Files/R/R-3.4.4/library\\\"\\r\\n    \\r\\n    ```\\r\\n\\r\\n1. Once this setup is done, any package that we install shall be added to this new folder. Let's install the requested package and its dependencies:\\r\\n\\r\\n    ```\\r\\n    > install.packages(\\\"brglm2\\\")\\r\\n    ```\\r\\n\\r\\n    In case the question \\\"Do you want to install from sources the packages which need compilation?\\\" pops up, answer \\\"Y\\\".\\r\\n\\r\\n1. Verify that new folders were added to \\\"C:\\\\brglm2\\\":\\r\\n\\r\\n    ![Screenshot of library directory content.](images/plugin/sample-directory.png)\\r\\n1. Select all items in that folder and zip them to e.g. libs.zip (do not zip the parent folder). You should get an archive structure like this:\\r\\n\\r\\n    libs.zip:\\r\\n\\r\\n    * brglm2 (folder)\\r\\n    * enrichwith (folder)\\r\\n    * numDeriv (folder)\\r\\n\\r\\n1. Upload libs.zip to the blob container that was set above\\r\\n\\r\\n1. Call the `r` plugin.\\r\\n    * Specify the `external_artifacts` parameter with a property bag of name and reference to the zip file (the blob's URL, including a SAS token).\\r\\n    * In your inline r code, import `zipfile` from `sandboxutils` and call its `install()` method with the name of the zip file.\\r\\n\\r\\n\\r\\n### Example\\r\\n\\r\\nInstall the [brglm2 package](https://cran.r-project.org/web/packages/brglm2/index.html):\\r\\n\\r\\n~~~kusto\\r\\nprint x=1\\r\\n| evaluate r(typeof(*, ver:string),\\r\\n    'library(sandboxutils)\\\\n'\\r\\n    'zipfile.install(\\\"brglm2.zip\\\")\\\\n'\\r\\n    'library(\\\"brglm2\\\")\\\\n'\\r\\n    'result <- df\\\\n'\\r\\n    'result$ver <-packageVersion(\\\"brglm2\\\")\\\\n'\\r\\n    ,external_artifacts=bag_pack(brglm2.zip', 'https://artifactswestus.blob.core.windows.net/r/libs.zip?*** REPLACE WITH YOUR SAS TOKEN ***'))\\r\\n~~~\\r\\n\\r\\n| x | ver     |\\r\\n|---|---------|\\r\\n|  1| 1.8.2   |\\r\\n\\r\\nMake sure that the archive's name (first value in pack pair) has the *.zip suffix to prevent collisions when unzipping folders whose name is identical to the archive name.\\r\\n\\r\\n---\\r\\n\\r\\n---\\r\\n\\r\\n> [!IMPORTANT]\\r\\n> The content below is Microsoft confidential(not available in the [public site](https://docs.microsoft.com/en-us/azure/data-explorer/))\\r\\n\\r\\n# R plugin (Preview) - Internal\\r\\n\\r\\n### Syntax\\r\\n\\r\\n*T* `|` `evaluate` [`hint.distribution` `=` (`single` | `per_node`)] `r(`*output_schema*`,` *script* [`,` *script_parameters*][`,` *external_artifacts*]`)`\\r\\n\\r\\n### Arguments\\r\\n\\r\\n* *external_artifacts*: An optional (and **experimental**) `dynamic` literal which is a property bag of name/URL pairs of artifacts\\r\\n    that are accessible from cloud storage and can be made available for the script to use at runtime.\\r\\n    * Any URL that is referenced as part of this property bag is required to be included in the cluster's [Callout policy](../management/calloutpolicy.md).\\r\\n    * The artifacts are made available for the script to consume from a local temporary directory, `D:/Temp`, and the names provided in the property bag are used as the local file names (see [example](#examples) below).\\r\\n\\r\\n\\r\\n### Onboarding\\r\\n\\r\\n* Prerequisites for enabling the plugin are listed [here](../concepts/sandboxes.md#prerequisites).\\r\\n* The plugin is disabled by default.\\r\\n    * *Interested in enabling the plugin on your cluster?*\\r\\n        * Open a [support ticket](https://aka.ms/kustosupport) in which you should specify\\r\\n          you've read and acknowledged all the prerequisites, and have approval from the cluster's owner(s).\\r\\n        * Disabling the plugin requires opening a support ticket as well.\\r\\n\\r\\n\\r\\n### Notes and Limitations\\r\\n\\r\\n* The R sandbox limits accessing the network, therefore the R code can't dynamically install additional packages that are not included in the image. Contact [Kusto Machine Learning DL](mailto:kustoml@microsoft.com) if you need specific packages.\\r\\n* **[Ingestion from query](../management/data-ingestion/ingest-from-query.md) and [Update policies](../management/updatepolicy.md)**\\r\\n    * It is possible to use the plugin in queries which are:\\r\\n        1. Defined as part of an update policy, whose source table is ingested to using *non-streaming* ingestion.\\r\\n        1. Run as part of a command which ingests from a query (for example, `.set-or-append`).\\r\\n    * In both the above cases, it's recommended to verify that the volume and frequency of the ingestion, as well as the complexity and\\r\\n      resources utilization of the R logic are aligned with [sandbox limitations](../concepts/sandboxes.md#limitations), and the cluster's available resources.\\r\\n      Failure to do so may result in [throttling errors](../concepts/sandboxes.md#errors).\\r\\n    * It is *not* possible to use the plugin in a query which is defined as part of an update policy, whose source table is ingested to\\r\\n    using [*streaming* ingestion](../management/streamingingestionpolicy.md).\\r\\n\\r\\n\\r\\n### Examples\\r\\n\\r\\n```\\r\\nprint \\\"This is an example for using 'external_artifacts'\\\"\\r\\n| evaluate r(\\r\\n    typeof(File:string),\\r\\n    'df <- as.data.frame(list(File=dir(\\\"D:/Temp\\\", all.files = TRUE, recursive = TRUE, include.dirs = TRUE)));'\\r\\n    'result <- df',\\r\\n    external_artifacts =\\r\\n        dynamic({\\\"this_is_my_first_file\\\":\\\"https://raw.githubusercontent.com/yonileibowitz/kusto.blog/master/resources/R/sample_script.r\\\",\\r\\n                 \\\"this_is_a_script\\\":\\\"https://raw.githubusercontent.com/yonileibowitz/kusto.blog/master/resources/python/sample_script.py\\\"})\\r\\n)\\r\\n```\\r\\n\\r\\n| File                  |\\r\\n|-----------------------|\\r\\n| this_is_a_script      |\\r\\n| this_is_my_first_file |\\r\\n\\r\\nPlease send feedback and questions about this plugin to [Kusto Machine Learning DL](mailto:kustoML@microsoft.com).\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/rplugin\",\"rplugin.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"radians\",\"Converts angle value in degrees into value in radians, using formula `radians = (PI / 180 ) * angle_in_degrees`\",\"## Syntax\\r\\n\\r\\n`radians(`*degrees*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *degrees* | real | &check; | The angle in degrees.|\\r\\n\\r\\n## Returns\\r\\n\\r\\nThe corresponding angle in radians for an angle specified in degrees.\",'> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAysoyswrUShKTMlMzCs2ULCFMTUsDTR1YBxDJHFDCyQJIyQJYzMDTQAGCoiHTgAAAA==\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint radians0 = radians(90), radians1 = radians(180), radians2 = radians(360) \\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|radians0|radians1|radians2|\\r\\n|---|---|---|\\r\\n|1.5707963267949|3.14159265358979|6.28318530717959|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/radiansfunction\",\"radiansfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"rand\",\"Returns a random number.\",\"```\\r\\nrand()\\r\\nrand(1000)\\r\\n```\\r\\n\\r\\n## Syntax\\r\\n\\r\\n* `rand()` - returns a value of type `real`\\r\\n  with a uniform distribution in the range [0.0, 1.0).\\r\\n* `rand(` *N* `)` - returns a value of type `real`\\r\\n  chosen with a uniform distribution from the set {0.0, 1.0, ..., *N* - 1}.\",\"\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/randfunction\",\"\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"range\",\"Generates a dynamic array holding a series of equally spaced values.\",\"## Syntax\\r\\n\\r\\n`range(`*start*`,` *stop* [`,` *step*]`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n|Name|Type|Required|Description|\\r\\n|--|--|--|--|\\r\\n|*start*|scalar|&check;|The value of the first element in the resulting array.|\\r\\n|*stop*|scalar|&check;|The value of the last element in the resulting array, or the least value that is greater than the last element in the resulting array and within an integer multiple of *step* from *start*.|\\r\\n|*step*|scalar||The difference between two consecutive elements of the array. The default value for *step* is `1` for numeric and `1h` for `timespan` or `datetime`.|\\r\\n\\r\\n## Returns\\r\\n\\r\\nDynamic array whose values are: *start*, *start* + *step*, ... up to and including *stop*.  The array will be truncated if the maximum number of values is reached.  \\r\\n\\r\\n> [!NOTE]\\r\\n> The maximum number of values is 1,048,576 (2^20).\",'The following example returns `[1, 4, 7]`:\\r\\n\\r\\n```\\r\\nT | extend r = range(1, 8, 3)\\r\\n```\\r\\n\\r\\nThe following example returns an array holding all days\\r\\nin the year 2015:\\r\\n\\r\\n```\\r\\nT | extend r = range(datetime(2015-01-01), datetime(2015-12-31), 1d)\\r\\n```\\r\\n\\r\\nThe following example returns `[1,2,3]`:\\r\\n\\r\\n```\\r\\nrange(1, 3)\\r\\n```\\r\\n\\r\\nThe following example returns `[\"01:00:00\",\"02:00:00\",\"03:00:00\",\"04:00:00\",\"05:00:00\"]`:\\r\\n\\r\\n```\\r\\nrange(1h, 5h)\\r\\n```\\r\\n\\r\\nThe following example returns `1048576`:\\r\\n\\r\\n```\\r\\nprint r = range(1,1000000000) | mv-expand r | count\\r\\n```',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/rangefunction\",\"rangefunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.OperatorToken,\"range\",\"Generates a single-column table of values.\",\"> [!NOTE]\\r\\n> This operator doesn't take a tabular input.\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`range` *columnName* `from` *start* `to` *stop* `step` *step*\\r\\n\\r\\n## Parameters\\r\\n\\r\\n|Name|Type|Required|Description|\\r\\n|--|--|--|--|\\r\\n|*columnName*|string|&check;| The name of the single column in the output table.|\\r\\n|*start*|int, long, real, datetime, or timespan|&check;| The smallest value in the output.|\\r\\n|*stop*|int, long, real, datetime, or timespan|&check;| The highest value being generated in the output or a bound on the highest value if *step* steps over this value.|\\r\\n|*step*|int, long, real, datetime, or timespan|&check;| The difference between two consecutive values.|\\r\\n\\r\\n> [!NOTE]\\r\\n> The values can't reference the columns of any table. If you want to compute the range based on an input table, use the [range](rangefunction.md) function potentially with the [mv-expand](mvexpandoperator.md) operator.\\r\\n\\r\\n## Returns\\r\\n\\r\\nA table with a single column called *columnName*,\\r\\nwhose values are *start*, *start* `+` *step*, ... up to and until *stop*.\",'The following example creates a table with entries for the current time stamp extended over the past seven days, once a day.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAytKzEtPVfBJLC4JT03NVkgrys9VSEzP1zBP0VQoyVfIyy/X0FQoLkktUDBMAQDbz6iXLAAAAA==\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nrange LastWeek from ago(7d) to now() step 1d\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|LastWeek|\\r\\n|---|\\r\\n|2015-12-05 09:10:04.627|\\r\\n|2015-12-06 09:10:04.627|\\r\\n|...|\\r\\n|2015-12-12 09:10:04.627|\\r\\n\\r\\nThe following example shows how to use the `range` operator with parameters, which are then extended and consumed as a table.  \\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA21QQU7DMBC8+xV7TKSGJCKAIOICHLhUSBQe4OINjUjWlrNRGyh/Zx1a4UpYlizvzNgz0yED21dqdy9tj3ALieEboxlZrimoL1AgS6aQwXGelNdXRVaUstMUcigHUN+16uSt5bS0xJsVa8/y2hBO2/RhlpDdJmlaQ57/wraBGZiFK0Z3N4mkOrs4rzYza3TOekYD4dPBaRpmKpHQLquiKAILnu0W7u1IDE573SP79hPNwU1I1bUUknlN73g0+GhHD423/aljtjC7FOPoDp7UHnDHSCbWthR19ldgElHSBTxIYU/UhVjrlmJwURrBg+SAx76y/9iqjuPswXqDHtbTiVIPbwKx/kBp6Qf2xjgc3AEAAA==\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nlet toUnixTime = (dt:datetime) \\r\\n{ \\r\\n    (dt - datetime(1970-01-01)) / 1s \\r\\n};\\r\\nlet MyMonthStart = startofmonth(now()); //Start of month\\r\\nlet StepBy = 4.534h; //Supported timespans\\r\\nlet nn = 64000; // Row Count parametrized\\r\\nlet MyTimeline = range MyMonthHour from MyMonthStart to now() step StepBy\\r\\n| extend MyMonthHourinUnixTime = toUnixTime(MyMonthHour), DateOnly = bin(MyMonthHour,1d), TimeOnly = MyMonthHour - bin(MyMonthHour,1d)\\r\\n; MyTimeline | order by MyMonthHour asc | take nn\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n| MyMonthHour | MyMonthHourinUnixTime | DateOnly     | TimeOnly                    |\\r\\n|--------------|------------------------|---------------|------------------------------|\\r\\n| 2023-02-01  | 00:00:00.0000000      | 1675209600   | 2023-02-01 00:00:00.0000000 |\\r\\n| 2023-02-01  | 04:32:02.4000000      | 1675225922.4 | 2023-02-01 00:00:00.0000000 |\\r\\n| 2023-02-01  | 09:04:04.8000000      | 1675242244.8 | 2023-02-01 00:00:00.0000000 |\\r\\n| 2023-02-01  | 13:36:07.2000000      | 1675258567.2 | 2023-02-01 00:00:00.0000000 |\\r\\n| ...         | ...                   | ...          | ...                         |\\r\\n\\r\\nThe following example creates a table with a single column called `Steps`\\r\\nwhose type is `long` and whose values are `1`, `4`, and `7`.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAytKzEtPVQguSS0oVkgrys9VMFQoyVewUCgGiigYAwBtHYQiHgAAAA==\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nrange Steps from 1 to 8 step 3\\r\\n```\\r\\n\\r\\nThe following example shows how the `range` operator can be used to create a small, ad-hoc, dimension table that is then used to introduce zeros where the source data has no values.\\r\\n\\r\\n```\\r\\nrange TIMESTAMP from ago(4h) to now() step 1m\\r\\n| join kind=fullouter\\r\\n  (Traces\\r\\n      | where TIMESTAMP > ago(4h)\\r\\n      | summarize Count=count() by bin(TIMESTAMP, 1m)\\r\\n  ) on TIMESTAMP\\r\\n| project Count=iff(isnull(Count), 0, Count), TIMESTAMP\\r\\n| render timechart  \\r\\n```',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/rangeoperator\",\"rangeoperator.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.OperatorToken,\"reduce\",\"Groups a set of strings together based on value similarity.\",\"For each such group, the operator returns a `pattern`, `count`, and `representative`. The `pattern` best describes the group, in which the `*` character represents a wildcard. The `count` is the number of values in the group, and the `representative` is one of the original values in the group.\\r\\n\\r\\n## Syntax\\r\\n\\r\\n*T* `|` `reduce` [`kind` `=` *ReduceKind*] `by` *Expr* [`with` [`threshold` `=` *Threshold*] [`,` `characters` `=` *Characters*]]\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *Expr* | string | &check; | The value by which to reduce.|\\r\\n| *Threshold* | real | | A value between 0 and 1 that determines the minimum fraction of rows required to match the grouping criteria in order to trigger a reduction operation. The default value is 0.1.<br/><br/>We recommend setting a small threshold value for large inputs. With a smaller threshold value, more similar values are grouped together, resulting in fewer but more similar groups. A larger threshold value requires less similarity, resulting in more groups that are less similar. See [Examples](#examples).|\\r\\n| *Characters* | string | | A list of characters that separate between terms. The default is every non-ascii numeric character. For examples, see [Behavior of Characters parameter](#behavior-of-characters-parameter).|\\r\\n| *ReduceKind* | string | | The only valid value is `source`. If `source` is specified, the operator appends the `Pattern` column to the existing rows in the table instead of aggregating by `Pattern`.|\\r\\n\\r\\n## Returns\\r\\n\\r\\nA table with as many rows as there are groups and columns titled `pattern`, `count`, and `representative`. The `pattern` best describes the group, in which the `*` character represents a wildcard, or placeholder for an arbitrary insertion string. The `count` is the number of values in the group, and the `representative` is one of the original values in the group.\\r\\n\\r\\nFor example, the result of `reduce by city` might include:\\r\\n\\r\\n|Pattern     |Count |Representative|\\r\\n|------------|------|--------------|\\r\\n| San *      | 5182 |San Bernard   |\\r\\n| Saint *    | 2846 |Saint Lucy    |\\r\\n| Moscow     | 3726 |Moscow        |\\r\\n| \\\\* -on- \\\\* | 2730 |One -on- One  |\\r\\n| Paris      | 2716 |Paris         |\",'### Small threshold value\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAzWNMQ7CMBAEe16xcmWkCNkPyA9IR5H2cI7YCOzochGJxOO5hq1WGu2sUJ0ZOx7S3ojQhhhCwKq8IJ6+WKQ9OSmG48a7ojciidS7gVIula9MUkudR9fZ2KB1r61U9UJ18jGcLSYSnrbEuB9/FT5FMzQLr7m9pj5cQojokDIJJWVZ7c2N7gefKNUWogAAAA==\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nrange x from 1 to 1000 step 1\\r\\n| project MyText = strcat(\"MachineLearningX\", tostring(toint(rand(10))))\\r\\n| reduce by MyText  with threshold=0.001 , characters = \"X\" \\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|Pattern         |Count|Representative   |\\r\\n|----------------|-----|-----------------|\\r\\n|MachineLearning*|1000 |MachineLearningX4|\\r\\n\\r\\n### Large threshold value\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/SampleIoTData?query=H4sIAAAAAAAAAzWNMQ7CMBAEe16xcmWkCNklRX5AOoq0h3PERmBHl0MkEo/nGrZaabSzQnVmbLhLeyFCG2IIAavygnj4YpH24KQY9itvit6IJFLvBkq5VL4wSS11Hl1nY4PWvbZS1QvVycdwtJhIeHonxm3/q/ApmqFZeM3tOfXhdEaHlEkoKctqX250Px4hVlGgAAAA\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nrange x from 1 to 1000 step 1\\r\\n| project MyText = strcat(\"MachineLearningX\", tostring(toint(rand(10))))\\r\\n| reduce by MyText  with threshold=0.9 , characters = \"X\" \\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|Pattern         |Count|Representative   |\\r\\n|----------------|-----|-----------------|\\r\\n|MachineLearning*|177|MachineLearningX9|\\r\\n|MachineLearning*|102|MachineLearningX0|\\r\\n|MachineLearning*|106|MachineLearningX1|\\r\\n|MachineLearning*|96|MachineLearningX6|\\r\\n|MachineLearning*|110|MachineLearningX4|\\r\\n|MachineLearning*|100|MachineLearningX3|\\r\\n|MachineLearning*|99|MachineLearningX8|\\r\\n|MachineLearning*|104|MachineLearningX7|\\r\\n|MachineLearning*|106|MachineLearningX2|\\r\\n\\r\\n### Behavior of Characters parameter\\r\\n\\r\\nIf the *Characters* parameter is unspecified, then every non-ascii numeric character will be a term separator.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAxWKQQqAMAwEv7L0VMGDfYAf8VZrKgo2JUao4ONNLwMzjMSyExqy8IUAZYQJt1I1+VCFT0pqQTB3pqjeZWY3wi0GZYtH2X0bBvuFticR1re/P7YelSlbAAAA\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nrange x from 1 to 10 step 1 | project str = strcat(\"foo\", \"Z\", tostring(x)) | reduce by str\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|Pattern|Count|Representative|\\r\\n|--|--|--|\\r\\n|others|10||\\r\\n\\r\\nHowever, if you specify that \"Z\" is a separator, then it\\'s as if each value in `str` is 2 terms: `foo` and `tostring(x)`:\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAx2LSQqAQAwEv9LMyQEP+gA/4m2McQMnEiMq+Hijl4IuujTlkXFhUFlRwwR1hd148/FgU1mYzIWi+UjJijCIhBKhdZi4nPNYXDH6X7k/iNHdf3HONoGmpImMdW+8eAEwpEQbbwAAAA==\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nrange x from 1 to 10 step 1 | project str = strcat(\"foo\", \"Z\", tostring(x)) | reduce by str with characters=\"Z\"\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|Pattern|Count|Representative|\\r\\n|--|--|--|\\r\\n|foo*|10|fooZ1|\\r\\n\\r\\n### Apply `reduce` to sanitized input\\r\\n\\r\\nThe following example shows how one might apply the `reduce` operator to a \"sanitized\"\\r\\ninput, in which GUIDs in the column being reduced are replaced prior to reducing\\r\\n\\r\\n```\\r\\n// Start with a few records from the Trace table.\\r\\nTrace | take 10000\\r\\n// We will reduce the Text column which includes random GUIDs.\\r\\n// As random GUIDs interfere with the reduce operation, replace them all\\r\\n// by the string \"GUID\".\\r\\n| extend Text=replace_regex(Text, @\"[[:xdigit:]]{8}-[[:xdigit:]]{4}-[[:xdigit:]]{4}-[[:xdigit:]]{4}-[[:xdigit:]]{12}\", @\"GUID\")\\r\\n// Now perform the reduce. In case there are other \"quasi-random\" identifiers with embedded \\'-\\'\\r\\n// or \\'_\\' characters in them, treat these as non-term-breakers.\\r\\n| reduce by Text with characters=\"-_\"\\r\\n```\\r\\n\\r\\n## See also\\r\\n\\r\\n[autocluster](./autoclusterplugin.md)\\r\\n\\r\\n> [!NOTE]\\r\\n> The implementation of `reduce` operator is largely based on the paper [A Data Clustering Algorithm for Mining Patterns From Event Logs](https://ristov.github.io/publications/slct-ipom03-web.pdf), by Risto Vaarandi.',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/reduceoperator\",\"reduceoperator.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"regex_quote\",\"Returns a string that escapes all regular expression characters.\",\"## Syntax\\r\\n\\r\\n`regex_quote(`*string*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *string* | string | &check; | The string to escape.|\\r\\n\\r\\n## Returns\\r\\n\\r\\nReturns *string* where all regex expression characters are escaped.\",'> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAysoyswrUShKLS7NKVGwBTLSUyviC0vzS1I11DWK81VyU/VCUuMqSjTVNQH+BIvaKwAAAA==\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint result = regex_quote(\\'(so$me.Te^xt)\\')\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n| result |\\r\\n|---|\\r\\n| `\\\\(so\\\\\\\\$me\\\\\\\\.Te\\\\\\\\^xt\\\\\\\\)` |',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/regexquotefunction\",\"regexquotefunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.OperatorToken,\"render\",\"Instructs the user agent to render a visualization of the query results.\",'The render operator must be the last operator in the query, and can only be used with queries that produce a single tabular data stream result.  The render operator does not modify data. It injects an annotation (\"Visualization\") into the result\\'s extended  properties. The annotation contains the information provided by the operator in the query. The interpretation of the visualization information is done by the user agent. Different agents, such as Kusto.Explorer or Azure Data Explorer web UI, may support different visualizations.\\r\\n\\r\\nThe data model of the render operator looks at the tabular data as if it has\\r\\nthree kinds of columns:\\r\\n\\r\\n* The x axis column (indicated by the `xcolumn` property).\\r\\n* The series columns (any number of columns indicated by the `series` property.) For each record, the combined values of these columns defines a single series, and the chart has as many series as there are distinct combined values.\\r\\n* The y axis columns (any number of columns indicated by the `ycolumns` property). For each record, the series has as many measurements (\"points\" in the chart) as there are y-axis columns.\\r\\n\\r\\n> [!TIP]\\r\\n>\\r\\n> * Use `where`, `summarize` and `top` to limit the volume that you display.\\r\\n> * Sort the data to define the order of the x-axis.\\r\\n> * User agents are free to \"guess\" the value of properties that are not specified\\r\\n  by the query. In particular, having \"uninteresting\" columns in the schema of\\r\\n  the result might translate into them guessing wrong. Try projecting-away such\\r\\n  columns when that happens.\\r\\n\\r\\n## Syntax\\r\\n\\r\\n*T* `|` `render` *visualization* [`with` `(` *propertyName* `=` *propertyValue* [`,` ...]`)`]\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n| -- | -- | -- | -- |\\r\\n| *T* | string | &check; | Input table name.\\r\\n| *visualization* | string | &check; | Indicates the kind of [visualization](#visualization) to use. Must be one of the supported values in the following list.|\\r\\n| *propertyName*, *propertyValue* | string | | A comma-separated list of key-value property pairs. See [supported properties](#supported-properties).|\\r\\n\\r\\n### Visualization\\r\\n\\r\\n| *visualization*                                         | Description                                                                                                                                                                                                       |\\r\\n|---------------------------------------------------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\\r\\n| [ `anomalychart`](visualization-anomalychart.md)        | Similar to timechart, but [highlights anomalies](./samples.md#get-more-from-your-data-by-using-kusto-with-machine-learning) using [series_decompose_anomalies](./series-decompose-anomaliesfunction.md) function. |\\r\\n| [`areachart`](visualization-areachart.md)               | Area graph.                                                                                                                                                                                                       |\\r\\n| [`barchart`](visualization-barchart.md)                 | displayed as horizontal strips.                                                                                                                                                                                   |\\r\\n| [`card`](visualization-card.md)                         | First result record is treated as set of scalar values and shows as a card.                                                                                                                                       |\\r\\n| [`columnchart`](visualization-columnchart.md)           | Like `barchart` with vertical strips instead of horizontal strips.                                                                                                                                                |\\r\\n| [`ladderchart`](visualization-ladderchart.md)           | Last two columns are the x-axis, other columns are y-axis.                                                                                                                                                        | \\r\\n| [`linechart`](visualization-linechart.md)               | Line graph.                                                                                                                                                                                                       |\\r\\n| [`piechart`](visualization-piechart.md)                 | First column is color-axis, second column is numeric.                                                                                                                                                             |\\r\\n| [`pivotchart`](visualization-pivotchart.md)             | Displays a pivot table and chart. User can interactively select data, columns, rows and various chart types.                                                                                                      |\\r\\n| [`scatterchart`](visualization-scatterchart.md)         | Points graph.                                                                                                                                                                                                     |\\r\\n| [`stackedareachart`](visualization-stackedareachart.md) | Stacked area graph.                                                                                                                                                                                               |\\r\\n| [`table`](visualization-table.md)                       | Default - results are shown as a table.                                                                                                                                                                           |\\r\\n| [`timechart`](visualization-timechart.md)               | Line graph. First column is x-axis, and must be datetime. Other (numeric) columns are y-axes.                                                                                                                     |\\r\\n| [`timepivot`](visualization-timepivot.md)               | Interactive navigation over the events time-line (pivoting on time axis)                                                                                                                                          |\\r\\n\\r\\n> [!NOTE]\\r\\n> The ladderchart, pivotchart, and timepivot visualizations can be used in Kusto.Explorer but are not available in the Azure Data Explorer web UI.\\r\\n\\r\\n### Supported properties\\r\\n\\r\\n*PropertyName*/*PropertyValue* indicate additional information to use when rendering.\\r\\n  All properties are optional. The supported properties are:\\r\\n\\r\\n|*PropertyName*|*PropertyValue*                                                                   |\\r\\n|--------------|----------------------------------------------------------------------------------|\\r\\n|`accumulate`  |Whether the value of each measure gets added to all its predecessors. (`true` or `false`)|\\r\\n|`kind`        |Further elaboration of the visualization kind.  For more information, see [`kind` property](#kind-property).                         |\\r\\n|`legend`      |Whether to display a legend or not (`visible` or `hidden`).                       |\\r\\n|`series`      |Comma-delimited list of columns whose combined per-record values define the series that record belongs to.|\\r\\n|`ymin`        |The minimum value to be displayed on Y-axis.                                      |\\r\\n|`ymax`        |The maximum value to be displayed on Y-axis.                                      |\\r\\n|`title`       |The title of the visualization (of type `string`).                                |\\r\\n|`xaxis`       |How to scale the x-axis (`linear` or `log`).                                      |\\r\\n|`xcolumn`     |Which column in the result is used for the x-axis.                                |\\r\\n|`xtitle`      |The title of the x-axis (of type `string`).                                       |\\r\\n|`yaxis`       |How to scale the y-axis (`linear` or `log`).                                      |\\r\\n|`ycolumns`    |Comma-delimited list of columns that consist of the values provided per value of the x column.|\\r\\n|`ysplit`      |How to split multiple the visualization. For more information, see [`y-split` property](#ysplit-property).                             |\\r\\n|`ytitle`      |The title of the y-axis (of type `string`).                                       |\\r\\n|`anomalycolumns`|Property relevant only for `anomalychart`. Comma-delimited list of columns, which will be considered as anomaly series and displayed as points on the chart|\\r\\n\\r\\n#### `kind` property\\r\\n\\r\\nThis visualization can be further elaborated by providing the `kind` property.\\r\\nThe supported values of this property are:\\r\\n\\r\\n|*Visualization*|`kind`             |Description                        |\\r\\n|---------------|-------------------|-----------------------------------|\\r\\n|`areachart`    |`default`          |Each \"area\" stands on its own.     |\\r\\n|               |`unstacked`        |Same as `default`.                 |\\r\\n|               |`stacked`          |Stack \"areas\" to the right.        |\\r\\n|               |`stacked100`       |Stack \"areas\" to the right and stretch each one to the same width as the others.|\\r\\n|`barchart`     |`default`          |Each \"bar\" stands on its own.      |\\r\\n|               |`unstacked`        |Same as `default`.                 |\\r\\n|               |`stacked`          |Stack \"bars\".                      |\\r\\n|               |`stacked100`       |Stack \"bars\" and stretch each one to the same width as the others.|\\r\\n|`columnchart`  |`default`          |Each \"column\" stands on its own.   |\\r\\n|               |`unstacked`        |Same as `default`.                 |\\r\\n|               |`stacked`          |Stack \"columns\" one atop the other.|\\r\\n|               |`stacked100`       |Stack \"columns\" and stretch each one to the same height as the others.|\\r\\n|`scatterchart` |`map`              |Expected columns are [Longitude, Latitude] or GeoJSON point. Series column is optional. For more information, see [Geospatial visualizations](geospatial-visualizations.md). |\\r\\n|`piechart`     |`map`              |Expected columns are [Longitude, Latitude] or GeoJSON point, color-axis and numeric. Supported in Kusto Explorer desktop. For more information, see [Geospatial visualizations](geospatial-visualizations.md).|\\r\\n\\r\\n#### `ysplit` property\\r\\n\\r\\nSome visualizations support splitting into multiple y-axis values:\\r\\n\\r\\n|`ysplit`  |Description                                                       |\\r\\n|----------|------------------------------------------------------------------|\\r\\n|`none`    |A single y-axis is displayed for all series data. (Default)       |\\r\\n|`axes`    |A single chart is displayed with multiple y-axes (one per series).|\\r\\n|`panels`  |One chart is rendered for each `ycolumn` value (up to some limit).|\\r\\n\\r\\n## How to render continuous data\\r\\n\\r\\nSeveral visualizations are used for rendering sequences of values, for example, `linechart`, `timechart`, and `areachart`.\\r\\nThese visualizations have the following conceptual model:\\r\\n\\r\\n* One column in the table represents the x-axis of the data. This column can be explicitly defined using the\\r\\n    `xcolumn` property. If not defined, the user agent will pick the first column that is appropriate for the visualization.\\r\\n  * For example: in the `timechart` visualization, the user agent will use the first `datetime` column.\\r\\n  * If this column is of type `dynamic` and it holds an array, the individual values in the array will be treated as the values of the x-axis.\\r\\n* One or more columns in the table represent one or more measures that vary by the x-axis.\\r\\n    These columns can be explicitly defined using the `ycolumns` property. If not defined, the user agent will pick all columns that are appropriate for the visualization.\\r\\n  * For example: in the `timechart` visualization, the user agent will use all columns with a numeric value that haven\\'t been specified otherwise.\\r\\n  * If the x-axis is an array, the values of each y-axis should also be an array of a similar length, with each y-axis occurring in a single column.\\r\\n* Zero or more columns in the table represent a unique set of dimensions that group together the measures. These columns can be specified by the `series` property, or the user agent will pick them automatically from the columns that are otherwise unspecified.\\r\\n\\r\\n## See also\\r\\n\\r\\n* [Rendering examples in the tutorial](tutorials/use-aggregation-functions.md#visualize-query-results)\\r\\n* [Anomaly detection](./samples.md#get-more-from-your-data-by-using-kusto-with-machine-learning)',\"\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/renderoperator\",\"\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"repeat\",\"Generates a dynamic array containing a series comprised of repeated numbers.\",\"## Syntax\\r\\n\\r\\n`repeat(`*value*`,` *count*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *value* | bool, int, long, real, datetime, string or timespan | &check; | The value of the element in the resulting array.|  \\r\\n| *count* | int | &check; | The count of the elements in the resulting array.|\\r\\n\\r\\n## Returns\\r\\n\\r\\nIf *count* is equal to zero, an empty array is returned.\\r\\nIf *count* is less than zero, a null value is returned.\",\"The following example returns `[1, 1, 1]`:\\r\\n\\r\\n```\\r\\nT | extend r = repeat(1, 3)\\r\\n```\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/repeatfunction\",\"repeatfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"replace_regex\",\"Replaces all regex matches with another string.\",\"> **Deprecated aliases:** replace()\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`replace_regex(`*source*`,`*lookup_regex*`,` *rewrite_pattern*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *source*| string | &check; | The text to search and replace.|\\r\\n| *lookup_regex*| string | &check; | The [regular expression](https://github.com/google/re2/wiki/Syntax) to search for in *text*. The expression can contain capture groups in parentheses.|\\r\\n| *rewrite_pattern*| string | &check; | The replacement regex for any match made by *matchingRegex*. Use `\\\\0` to refer to the whole match, `\\\\1` for the first capture group, `\\\\2` and so on for subsequent capture groups.|\\r\\n\\r\\n## Returns\\r\\n\\r\\n*source* after replacing all matches of *lookup_regex* with evaluations of *rewrite_pattern*. Matches do not overlap.\",\"> [!div class=\\\"nextstepaction\\\"]\\r\\n> <a href=\\\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAytKzEtPVahQSCvKz1UwVCjJVzBVKC5JLVAw5KpRSK0oSc1LAfKLbIE4ObFEQ92vNDcptUghs1hBXQeoGiicmZeuUaGpiVBelFqQk5icmmILZcQXpaanVmgAleooOKgDdWrEpGhrqoM45YnFVgoxhuqaAA84qqaHAAAA\\\" target=\\\"_blank\\\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nrange x from 1 to 5 step 1\\r\\n| extend str=strcat('Number is ', tostring(x))\\r\\n| extend replaced=replace_regex(str, @'is (\\\\d+)', @'was: \\\\1')\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n| x | str | replaced|\\r\\n|---|---|---|\\r\\n| 1    | Number is 1.000000  | Number was: 1.000000|\\r\\n| 2    | Number is 2.000000  | Number was: 2.000000|\\r\\n| 3    | Number is 3.000000  | Number was: 3.000000|\\r\\n| 4    | Number is 4.000000  | Number was: 4.000000|\\r\\n| 5    | Number is 5.000000  | Number was: 5.000000|\\r\\n\\r\\n## See also\\r\\n\\r\\n* For string matching, see [replace_string()](replace-string-function.md).\\r\\n* For replacing a set of characters, see [translate()](translatefunction.md).\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/replace-regex-function\",\"replace-regex-function.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"replace_string\",\"Replaces all string matches with another string.\",\"> **Deprecated aliases:** replace()\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`replace_string(`*text*`,` *lookup*`,` *rewrite*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n|Name|Type|Required|Description|\\r\\n|--|--|--|--|\\r\\n|*text*|string|&check;|The source string.|\\r\\n|*lookup*|string|&check;|The string to be replaced.|\\r\\n|*rewrite*|string|&check;|The replacement string.|\\r\\n\\r\\n## Returns\\r\\n\\r\\n*text* after replacing all matches of *lookup* with evaluations of *rewrite*. Matches don't overlap.\",\"> [!div class=\\\"nextstepaction\\\"]\\r\\n> <a href=\\\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA0WLOwqAMBBEe08x3RqwsbD0Cl5Boq4hoEnYREzh4d1CsBjmwxuxwTEqdoknepSIAblwQt884Fo4bNplVK22tDRd58ICn0Gd0jr74NpqzI8Lp8OuvI1fmD9IrQP5rEe6bSbzAkZqfYp8AAAA\\\" target=\\\"_blank\\\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nrange x from 1 to 5 step 1\\r\\n| extend str=strcat('Number is ', tostring(x))\\r\\n| extend replaced=replace_string(str, 'is', 'was')\\r\\n```\\r\\n\\r\\n**Output:**\\r\\n\\r\\n| x    | str | replaced|\\r\\n|---|---|---|\\r\\n| 1    | Number is 1.000000  | Number was 1.000000|\\r\\n| 2    | Number is 2.000000  | Number was 2.000000|\\r\\n| 3    | Number is 3.000000  | Number was 3.000000|\\r\\n| 4    | Number is 4.000000  | Number was 4.000000|\\r\\n| 5    | Number is 5.000000  | Number was 5.000000|\\r\\n\\r\\n## See also\\r\\n\\r\\n* For regex matching, see [replace_regex()](replace-regex-function.md).\\r\\n* For replacing a set of characters, see [translate()](translatefunction.md).\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/replace-string-function\",\"replace-string-function.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"reverse\",\"Function reverses the order of the input string.\\r\\nIf the input value isn't of type `string`, then the function forcibly casts the value to type `string`.\",\"## Syntax\\r\\n\\r\\n`reverse(`*value*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *value* | string | &check; | input value.|  \\r\\n\\r\\n## Returns\\r\\n\\r\\nThe reverse order of a string value.\",\"> [!div class=\\\"nextstepaction\\\"]\\r\\n> <a href=\\\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAysoyswrUSguKVKwVVBydHJ2cXVz9/D08vbx9fMPCAwKDgkNC4+IjFLiqlFIrShJzUtRKIIoLkotSy0qTtUA8jQB/i1rL0UAAAA=\\\" target=\\\"_blank\\\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint str = \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\\\"\\r\\n| extend rstr = reverse(str)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|str|rstr|\\r\\n|---|---|\\r\\n|ABCDEFGHIJKLMNOPQRSTUVWXYZ|ZYXWVUTSRQPONMLKJIHGFEDCBA|\\r\\n\\r\\n> [!div class=\\\"nextstepaction\\\"]\\r\\n> <a href=\\\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAysoyswrUYhWB5LqsQq2CoZGxiamOkCBlPzSpJxUmJgeSJALKJpYklqSmQsRh3E0jAwMzXUNDXQNTYFqrQwMNEEGgGSKCxLzwEqNM7hqFAqK8rNSk0sUwFbaKhSllqUWFadqQC0HaiqCWIoiB3MHUJqrCGYjqgq4m0BGwKxFUYJwiyYA300QcvEAAAA=\\\" target=\\\"_blank\\\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint ['int'] = 12345, ['double'] = 123.45, \\r\\n['datetime'] = datetime(2017-10-15 12:00), ['timespan'] = 3h\\r\\n| project rint = reverse(['int']), rdouble = reverse(['double']), \\r\\nrdatetime = reverse(['datetime']), rtimespan = reverse(['timespan'])\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|rint|rdouble|rdatetime|rtimespan|\\r\\n|---|---|---|---|\\r\\n|54321|54.321|Z0000000.00:00:21T51-01-7102|00:00:30|\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/reversefunction\",\"reversefunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"rolling_percentile\",\"Returns an estimate for the specified percentile of the *ValueColumn* population in a rolling (sliding) *BinsPerWindow* size window per *BinSize*.\",\"The plugin is invoked with the [`evaluate`](evaluateoperator.md) operator.\\r\\n\\r\\n## Syntax\\r\\n\\r\\n*T* `| evaluate` `rolling_percentile(`*ValueColumn*`,` *Percentile*`,` *IndexColumn*`,` *BinSize*`,` *BinsPerWindow*  [`,` *dim1*`,` *dim2*`,` ...] `)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *T*| string | &check; | The input tabular expression.|\\r\\n| *ValueColumn*| string | &check;| The name of the column used to calculate the percentiles.|\\r\\n| *Percentile*| int, long, or real | &check;| Scalar with the percentile to calculate.|\\r\\n| *IndexColumn*| string | &check;| The name of the column over which to run the rolling window.|\\r\\n| *BinSize*| int, long, real, datetime, or timespan | &check;| Scalar with size of the bins to apply over the *IndexColumn*.|\\r\\n| *BinsPerWindow*| int | &check;| The number of bins included in each window.|\\r\\n| *dim1*, *dim2*, ... | string | | A list of the dimensions columns to slice by.|\\r\\n\\r\\n## Returns\\r\\n\\r\\nReturns a table with a row per each bin (and combination of dimensions if specified) that has the rolling percentile of values in the window ending at the bin (inclusive).\\r\\nOutput table schema is:\\r\\n\\r\\n|IndexColumn|dim1|...|dim_n|rolling_BinsPerWindow_percentile_ValueColumn_Pct\\r\\n|---|---|---|---|---|\",'### Rolling 3-day median value per day\\r\\n\\r\\nThe next query calculates a 3-day median value in daily granularity. Each row in the output represents the median value for the last 3 bins (days), including the bin itself.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAz2OwQqDMAyG7z7FjzDQWaF1GwyGx529eB9io+uotdRueNjDL+5gCYSQ7/9SSxEtaiTgFzo3EoxeMYR5gkScUZ1xhJIoobBE8lB/9Asf5hf1nDYTLbGbPFt0FynynFVSXUupuHIUUE92sFbg09l68xe7htZITuP+IdeERmu2mGHIGMQBFeoaUiDd1il3BtL8lrRAwlGG3nwRYbbWuPHhKfTkorG05QUuHN2/J6C0wCn/AfIZwjfyAAAA\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nlet T = \\r\\n    range idx from 0 to 24 * 10 - 1 step 1\\r\\n    | project Timestamp = datetime(2018-01-01) + 1h * idx, val=idx + 1\\r\\n    | extend EvenOrOdd = iff(val % 2 == 0, \"Even\", \"Odd\");\\r\\nT  \\r\\n| evaluate rolling_percentile(val, 50, Timestamp, 1d, 3)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|Timestamp|rolling_3_percentile_val_50|\\r\\n|---|---|\\r\\n|2018-01-01 00:00:00.0000000| 12|\\r\\n|2018-01-02 00:00:00.0000000| 24|\\r\\n|2018-01-03 00:00:00.0000000| 36|\\r\\n|2018-01-04 00:00:00.0000000| 60|\\r\\n|2018-01-05 00:00:00.0000000| 84|\\r\\n|2018-01-06 00:00:00.0000000| 108|\\r\\n|2018-01-07 00:00:00.0000000| 132|\\r\\n|2018-01-08 00:00:00.0000000| 156|\\r\\n|2018-01-09 00:00:00.0000000| 180|\\r\\n|2018-01-10 00:00:00.0000000| 204|\\r\\n\\r\\n### Rolling 3-day median value per day by dimension\\r\\n\\r\\nSame example from above, but now also calculates the rolling window partitioned for each value of the dimension.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA0WOQQuDMAyF7/6KhzDQWaF1GwyGx529eB9io+uoVWonHvbjF3dwIRBC3vteLAXUKBGByzeuJxi9ovPjAIkwojjjCCWRQ2EONEH9pB9MfnxRy24z0ByaYWKKbgIF3pNCqmsuFXeKDOrJDMYKLI0tN362Y2gN5DTuC7nKV1ozxXRdwkIcUKAsIQXi7RzzZEGc3qIaiNjKojcnwo/WGtc/JvItuWAsbX6BC1v39wSUFjiJf1T6BZy1q2z9AAAA\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nlet T = \\r\\n    range idx from 0 to 24 * 10 - 1 step 1\\r\\n    | project Timestamp = datetime(2018-01-01) + 1h * idx, val=idx + 1\\r\\n    | extend EvenOrOdd = iff(val % 2 == 0, \"Even\", \"Odd\");\\r\\nT  \\r\\n| evaluate rolling_percentile(val, 50, Timestamp, 1d, 3, EvenOrOdd)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|Timestamp| EvenOrOdd| rolling_3_percentile_val_50|\\r\\n|---|---|---|\\r\\n|2018-01-01 00:00:00.0000000| Even| 12|\\r\\n|2018-01-02 00:00:00.0000000| Even| 24|\\r\\n|2018-01-03 00:00:00.0000000| Even| 36|\\r\\n|2018-01-04 00:00:00.0000000| Even| 60|\\r\\n|2018-01-05 00:00:00.0000000| Even| 84|\\r\\n|2018-01-06 00:00:00.0000000| Even| 108|\\r\\n|2018-01-07 00:00:00.0000000| Even| 132|\\r\\n|2018-01-08 00:00:00.0000000| Even| 156|\\r\\n|2018-01-09 00:00:00.0000000| Even| 180|\\r\\n|2018-01-10 00:00:00.0000000| Even| 204|\\r\\n|2018-01-01 00:00:00.0000000| Odd| 11|\\r\\n|2018-01-02 00:00:00.0000000| Odd|    23|\\r\\n|2018-01-03 00:00:00.0000000| Odd| 35|\\r\\n|2018-01-04 00:00:00.0000000| Odd| 59|\\r\\n|2018-01-05 00:00:00.0000000| Odd| 83|\\r\\n|2018-01-06 00:00:00.0000000| Odd| 107|\\r\\n|2018-01-07 00:00:00.0000000| Odd| 131|\\r\\n|2018-01-08 00:00:00.0000000| Odd| 155|\\r\\n|2018-01-09 00:00:00.0000000| Odd| 179|\\r\\n|2018-01-10 00:00:00.0000000| Odd| 203|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/rolling-percentile-plugin\",\"rolling-percentile-plugin.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"round\",\"Returns the rounded number to the specified precision.\",\"## Syntax\\r\\n\\r\\n`round(`*number* [`,` *precision*]`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *number*| long or real | &check; | The number to calculate the round on.|\\r\\n| *precision*| int | | The number of digits to round to. The default is 0.|\\r\\n\\r\\n## Returns\\r\\n\\r\\nThe rounded number to the specified precision.\\r\\n\\r\\nRound is different from the [`bin()`](binfunction.md) function in\\r\\nthat the `round()` function rounds a number to a specific number of digits while the `bin()` function rounds the value to an integer multiple of a given bin size. For example, `round(2.15, 1)` returns 2.2 while `bin(2.15, 1)` returns 2.\",\"```\\r\\nround(2.15, 1)      // 2.2\\r\\nround(2.15)         // 2 // equivalent to round(2.15, 0)\\r\\nround(-50.55, -2)   // -100\\r\\nround(21.5, -1)     // 20\\r\\n```\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/roundfunction\",\"roundfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"row_cumsum\",\"Calculates the cumulative sum of a column in a [serialized row set](./windowsfunctions.md#serialized-row-set).\",\"## Syntax\\r\\n\\r\\n`row_cumsum(` *term* [`,` *restart*] `)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *term*| int, long, or real | &check; | The expression indicating the value to be summed.|\\r\\n| *restart*| bool | | Indicates when the accumulation operation should be restarted, or set back to 0. It can be used to indicate partitions in the data.|\\r\\n\\r\\n## Returns\\r\\n\\r\\nThe function returns the cumulative sum of its argument.\",'The following example shows how to calculate the cumulative sum of the first\\r\\nfew even integers.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAw3ITQqDMBBA4X1O8TYFhVmo1f5BTlJKGXVohaiQVITSwzfv271RP1kfjEJvhHV5ldwduVpohKPQCp1wEs7CRbgKdeUe7sf+tmgoBxq8p8orWZw0TF9jSD6u+3PY5rTNhZZ/2Wk/Y2kAAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\ndatatable (a:long) [\\r\\n    1, 2, 3, 4, 5, 6, 7, 8, 9, 10\\r\\n]\\r\\n| where a%2==0\\r\\n| serialize cs=row_cumsum(a)\\r\\n```\\r\\n\\r\\na    | cs\\r\\n-----|-----\\r\\n2    | 2\\r\\n4    | 6\\r\\n6    | 12\\r\\n8    | 20\\r\\n10   | 30\\r\\n\\r\\nThis example shows how to calculate the cumulative sum (here, of `salary`)\\r\\nwhen the data is partitioned (here, by `name`):\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA2WPSw6CQAxA95yisoJkFuBnIQkLvYYxZgYaJJmPmSkqiYe3A7qBtovm9TVpW0mcSiNkVhqsAvnedgKMs3SveksCgtTSj5V2tsuTSwIc6Un3DaYCSq6iKMRMz04xgwX9u1uutcu0PB6W7o7pfuVONLrX5APOt+hBjRDvBhma39Gx5TG+CW0L5Ejq2rvXrRlMGEw2fyPmrU0ND4/P6fU8/wKEiBU0DAEAAA==\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\ndatatable (name:string, month:int, salary:long)\\r\\n[\\r\\n    \"Alice\", 1, 1000,\\r\\n    \"Bob\",   1, 1000,\\r\\n    \"Alice\", 2, 2000,\\r\\n    \"Bob\",   2, 1950,\\r\\n    \"Alice\", 3, 1400,\\r\\n    \"Bob\",   3, 1450,\\r\\n]\\r\\n| order by name asc, month asc\\r\\n| extend total=row_cumsum(salary, name != prev(name))\\r\\n```\\r\\n\\r\\nname   | month  | salary  | total\\r\\n-------|--------|---------|------\\r\\nAlice  | 1      | 1000    | 1000\\r\\nAlice  | 2      | 2000    | 3000\\r\\nAlice  | 3      | 1400    | 4400\\r\\nBob    | 1      | 1000    | 1000\\r\\nBob    | 2      | 1950    | 2950\\r\\nBob    | 3      | 1450    | 4400',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/rowcumsumfunction\",\"rowcumsumfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"row_number\",\"Returns the current row's index in a [serialized row set](./windowsfunctions.md#serialized-row-set).\",\"The row index starts by default at `1` for the first row, and is incremented by `1` for each additional row.\\r\\nOptionally, the row index can start at a different value than `1`.\\r\\nAdditionally, the row index may be reset according to some provided predicate.\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`row_number(` [*StartingIndex* [`,` *Restart*]] `)`\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *StartingIndex*| long | | The value of the row index to start at or restart to. The default value is 1.|\\r\\n| *restart*| bool | | Indicates when the numbering is to be restarted to the *StartingIndex* value. The default is `false`.|\\r\\n\\r\\n## Returns\\r\\n\\r\\nThe function returns the row index of the current row as a value of type `long`.\",'The following example returns a table with two columns, the first column (`a`)\\r\\nwith numbers from `10` down to `1`, and the second column (`rn`) with numbers\\r\\nfrom `1` up to `10`:\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAytKzEtPVUhUSCvKz1UwVCjJVzA0UCguSS1QMOSqUSjOLypRSKoEyqekFicDBVIrSlLzUhSK8myL8svj80pzk1KLNDQBtU8QmkUAAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nrange a from 1 to 10 step 1\\r\\n| sort by a desc\\r\\n| extend rn=row_number()\\r\\n```\\r\\n\\r\\nThe following example is similar to the above, only the second column (`rn`)\\r\\nstarts at `7`:\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAytKzEtPVUhUSCvKz1UwVCjJVzA0UCguSS1QMOSqUSjOLypRSKoEyqekFicDBVIrSlLzUhSK8myL8svj80pzk1KLNMw1AXIfYP9GAAAA\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nrange a from 1 to 10 step 1\\r\\n| sort by a desc\\r\\n| extend rn=row_number(7)\\r\\n```\\r\\n\\r\\nThe last example shows how one can partition the data and number the rows\\r\\nper each partition. Here, we partition the data by `Airport`:\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA0tJLAHCpJxUBQ3HzKKC/KISq+KSosy8dB0FID8nMy8VzndJLUgsKiktSi22ysnPS9fkiuZSUFAK8QlT0lFQ8vEAkoY6yCKRIBEDA7BYsKsjmiqoiBOINEJRA9JnwBXLVaNQDHSOQlKlAtRlConFycjOUEhJLU4GKkutKEnNS1EISszLti3KL4/PK81NSi3SMNRRKChKLYP5S1NB0RZmkiYA2Leu+/cAAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\ndatatable (Airport:string, Airline:string, Departures:long)\\r\\n[\\r\\n  \"TLV\", \"LH\", 1,\\r\\n  \"TLV\", \"LY\", 100,\\r\\n  \"SEA\", \"LH\", 1,\\r\\n  \"SEA\", \"BA\", 2,\\r\\n  \"SEA\", \"LY\", 0\\r\\n]\\r\\n| sort by Airport asc, Departures desc\\r\\n| extend Rank=row_number(1, prev(Airport) != Airport)\\r\\n```\\r\\n\\r\\nRunning this query produces the following result:\\r\\n\\r\\nAirport  | Airline  | Departures  | Rank\\r\\n---------|----------|-------------|------\\r\\nSEA      | BA       | 2           | 1\\r\\nSEA      | LH       | 1           | 2\\r\\nSEA      | LY       | 0           | 3\\r\\nTLV      | LY       | 100         | 1\\r\\nTLV      | LH       | 1           | 2',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/rownumberfunction\",\"rownumberfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"row_rank_dense\",\"Returns the current row's dense rank in a [serialized row set](./windowsfunctions.md#serialized-row-set).\",\"The row rank starts by default at `1` for the first row, and is incremented by `1` whenever the provided *Term* is different than the previous row's *Term*.\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`row_rank_dense` `(` *Term* `)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n|Name|Type|Required|Description|\\r\\n|--|--|--|--|\\r\\n|*Term*|string|&check;|An expression indicating the value to consider for the rank. The rank is increased whenever the *Term* changes.|\\r\\n\\r\\n## Returns\\r\\n\\r\\nReturns the row rank of the current row as a value of type `long`.\",'The following query shows how to rank the `Airline` by the number of departures from the SEA `Airport` using dense rank.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA0tJLAHCpJxUBQ3HzKKC/KISq+KSosy8dB0FID8nMy8VzndJLUgsKiktSi22ysnPS9fk5Yrm5VJQUAp2dVTSUVDy8QCSxjooQpFA0tDAAEUw1BFDnROINEIRcvUBqeLliuXlqlEoBjpLIakSyQUKicXJIJnUipLUvBSFoMS8bNui/PL4IiAjPiU1rzhVA6FYEwC7n6cO5QAAAA==\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\ndatatable (Airport:string, Airline:string, Departures:long)\\r\\n[\\r\\n  \"SEA\", \"LH\", 3,\\r\\n  \"SEA\", \"LY\", 100,\\r\\n  \"SEA\", \"UA\", 3,\\r\\n  \"SEA\", \"BA\", 2,\\r\\n  \"SEA\", \"EL\", 3\\r\\n]\\r\\n| sort by Departures asc\\r\\n| extend Rank=row_rank_dense(Departures)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\nAirport  | Airline  | Departures  | Rank\\r\\n---------|----------|-------------|------\\r\\nSEA      | BA       | 2           | 1\\r\\nSEA      | LH       | 3           | 2\\r\\nSEA      | UA       | 3           | 2\\r\\nSEA      | EL       | 3           | 2\\r\\nSEA      | LY       | 100         | 3',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/rowrankdensefunction\",\"rowrankdensefunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"row_rank_min\",\"Returns the current row's minimal rank in a [serialized row set](./windowsfunctions.md#serialized-row-set).\",\"The rank is the minimal row number that the current row's *Term* appears in.\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`row_rank_min` `(` *Term* `)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n|Name|Type|Required|Description|\\r\\n|--|--|--|--|\\r\\n|*Term*|string|&check;|An expression indicating the value to consider for the rank. The rank is the minimal row number for *Term*.|\\r\\n\\r\\n## Returns\\r\\n\\r\\nReturns the row rank of the current row as a value of type `long`.\",'The following query shows how to rank the `Airline` by the number of departures from the SEA `Airport`.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA0tJLAHCpJxUBQ3HzKKC/KISq+KSosy8dB0FID8nMy8VzndJLUgsKiktSi22ysnPS9fk5Yrm5VJQUAp2dVTSUVDy8QCSxjooQpFA0tDAAEUw1BFDnROINEIRcvUBqeLliuXlqlEoBjpLIakSyQUKicXJIJnUipLUvBSFoMS8bNui/PL4IiAjPjczTwOhVBMA9lGyTeMAAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\ndatatable (Airport:string, Airline:string, Departures:long)\\r\\n[\\r\\n  \"SEA\", \"LH\", 3,\\r\\n  \"SEA\", \"LY\", 100,\\r\\n  \"SEA\", \"UA\", 3,\\r\\n  \"SEA\", \"BA\", 2,\\r\\n  \"SEA\", \"EL\", 3\\r\\n]\\r\\n| sort by Departures asc\\r\\n| extend Rank=row_rank_min(Departures)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\nAirport  | Airline  | Departures  | Rank\\r\\n---------|----------|-------------|------\\r\\nSEA      | BA       | 2           | 1\\r\\nSEA      | LH       | 3           | 2\\r\\nSEA      | UA       | 3           | 2\\r\\nSEA      | EL       | 3           | 2\\r\\nSEA      | LY       | 100         | 5',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/rowrankminfunction\",\"rowrankminfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"row_window_session\",\"Calculates session start values of a column in a [serialized row set](./windowsfunctions.md#serialized-row-set).\",\"## Syntax\\r\\n\\r\\n`row_window_session` `(` *`Expr`* `,` *`MaxDistanceFromFirst`* `,` *`MaxDistanceBetweenNeighbors`* [`,` *`Restart`*] `)`\\r\\n\\r\\n* *`Expr`* is an expression whose values are grouped together in sessions.\\r\\n  Null values produce null values, and the next value starts a new session.\\r\\n  *`Expr`* must be a scalar expression of type `datetime`.\\r\\n* *`MaxDistanceFromFirst`* establishes one criterion for starting a new session:\\r\\n  The maximum distance between the current value of *`Expr`* and the value of\\r\\n  *`Expr`* at the beginning of the session.\\r\\n  It's a scalar constant of type `timespan`.\\r\\n* *`MaxDistanceBetweenNeighbors`* establishes a second criterion for starting a new session:\\r\\n  The maximum distance from one value of *`Expr`* to the next.\\r\\n  It's a scalar constant of type `timespan`.\\r\\n* *Restart* is an optional scalar expression of type `boolean`. If specified,\\r\\n  every value that evaluates to `true` will immediately restart the session.\\r\\n\\r\\n## Returns\\r\\n\\r\\nThe function returns the values at the beginning of each session.\\r\\n\\r\\nThe function has the following conceptual calculation model:\\r\\n\\r\\n1. Goes over the input sequence of *`Expr`* values in order.\\r\\n1. For every value, determines if it establishes a new session.\\r\\n1. If it establishes a new session, it emits the value of *`Expr`*. Otherwise, emits the previous value of *`Expr`*.\\r\\n\\r\\n>[!NOTE]\\r\\n>The condition that determines if the value represents a new session is a logical OR one of the following conditions:\\r\\n>\\r\\n>* If there was no previous session value, or the previous session value was null.\\r\\n>* If the value of *`Expr`* equals or exceeds the previous session value plus\\r\\n  *`MaxDistanceFromFirst`*.\\r\\n>* If the value of *`Expr`* equals or exceeds the previous value of *`Expr`*\\r\\n  plus *`MaxDistanceBetweenNeighbors`*.\\r\\n>* If *`Restart`* condition is specified and evaluates to `true`.\",\"The following example shows how to calculate the session start values for a table\\r\\nwith two columns: an `ID` column that identifies a sequence, and a `Timestamp`\\r\\ncolumn that gives the time at which each record occurred. In this example,\\r\\na session can't exceed 1 hour, and it continues as long as records are less than\\r\\n5 minutes apart.\\r\\n\\r\\n```\\r\\ndatatable (ID:string, Timestamp:datetime) [\\r\\n    // ...\\r\\n]\\r\\n| sort by ID asc, Timestamp asc\\r\\n| extend SessionStarted = row_window_session(Timestamp, 1h, 5m, ID != prev(ID))\\r\\n```\\r\\n\\r\\n## See also\\r\\n\\r\\n* [scan operator](scan-operator.md)\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/row-window-session-function\",\"row-window-session-function.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"rows_near\",\"Finds rows near a specified condition.\",\"The plugin is invoked with the [`evaluate`](evaluateoperator.md) operator.\\r\\n\\r\\n## Syntax\\r\\n\\r\\n*T* `| evaluate` `rows_near(`*Condition*`,` *NumRows*`,` [`,` *RowsAfter* ]`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *T*| string | &check; | The input tabular expression.|\\r\\n| *Condition*| bool | &check; | Represents the condition to find rows around.|\\r\\n| *NumRows*| int | &check; | The number of rows to find before and after the condition.|\\r\\n| *RowsAfter*| int | | When specified, overrides the number of rows to find after the condition.|\\r\\n\\r\\n## Returns\\r\\n\\r\\nEvery row from the input that is within *NumRows* from a `true` *Condition*,\\r\\nWhen *RowsAfter* is specified, returns every row from the input that is *NumRows* before or *RowsAfter* after a `true` *Condition*.\",'Find rows with an `\"Error\"` *State*, and returns `2` rows before and after the `\"Error\"` record.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA43SSwqDMBAG4L2nGFwppJDEVxVc9gSWbkopUYMIakoSWwo9fMdC3RRpklXIxwzM/K2weOtBQnDsR2msGG9FK6y0+CJwEsMsi0FNHYEKpSyM1f3UQeidPcDzpQGnnO1ouqMsJMAI+NXcNNIYn2w4ji52cBG6yMHFS1+XxskCEweYIuQOLlsK5ggPWiu9yfYLc6mXI8z+O0bR5Q6OuU2a8Z/NXbwXGKUt1E9Y4wHCNIAf8o7hwCKg1cNcJyl08IkIlOU6CuDhGzR1CNFiAgAA\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\ndatatable (Timestamp:datetime, Value:long, State:string )\\r\\n[\\r\\n    datetime(2021-06-01), 1, \"Success\",\\r\\n    datetime(2021-06-02), 4, \"Success\",\\r\\n    datetime(2021-06-03), 3, \"Success\",\\r\\n    datetime(2021-06-04), 11, \"Success\",\\r\\n    datetime(2021-06-05), 15, \"Success\",\\r\\n    datetime(2021-06-06), 2, \"Success\",\\r\\n    datetime(2021-06-07), 19, \"Error\",\\r\\n    datetime(2021-06-08), 12, \"Success\",\\r\\n    datetime(2021-06-09), 7, \"Success\",\\r\\n    datetime(2021-06-10), 9, \"Success\",\\r\\n    datetime(2021-06-11), 4, \"Success\",\\r\\n    datetime(2021-06-12), 1, \"Success\",\\r\\n]\\r\\n| sort by Timestamp asc \\r\\n| evaluate rows_near(State == \"Error\", 2)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|Timestamp|Value|State|\\r\\n|---|---|---|\\r\\n|2021-06-05 00:00:00.0000000|15|Success|\\r\\n|2021-06-06 00:00:00.0000000|2|Success|\\r\\n|2021-06-07 00:00:00.0000000|19|Error|\\r\\n|2021-06-08 00:00:00.0000000|12|Success|\\r\\n|2021-06-09 00:00:00.0000000|7|Success|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/rows-near-plugin\",\"rows-near-plugin.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.OperatorToken,\"sample\",\"Returns up to the specified number of random rows from the input table.\",\"> [!NOTE]\\r\\n>\\r\\n> * `sample` is geared for speed rather than even distribution of values. Specifically, it means that it will not produce 'fair' results if used after operators that union 2 data sets of different sizes (such as a `union` or `join` operators). It's recommended to use `sample` right after the table reference and filters.\\r\\n> * `sample` is a non-deterministic operator, and will return different result set each time it is evaluated during the query. For example, the following query yields two different rows (even if one would expect to return the same row twice).\\r\\n\\r\\n## Syntax\\r\\n\\r\\n*T* `| sample` *NumberOfRows*\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *T*| string | &check; | The input tabular expression. |\\r\\n| *NumberOfRows*| int, long, or real | &check; | The number of rows to return. You can specify any numeric expression.|\",'> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA8tJLVGIT0ksSVSwVShKzEtPVahQSCvKz1UwVCjJVzA0MFAoLkktUDC05soBqSxOzC3ISQWqheipUYAKAOVL8zLz8xQ0oEo0dRBMANt5ESNkAAAA\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nlet _data = range x from 1 to 100 step 1;\\r\\nlet _sample = _data | sample 1;\\r\\nunion (_sample), (_sample)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n| x   |\\r\\n| --- |\\r\\n| 83  |\\r\\n| 3   |\\r\\n\\r\\nTo ensure that in example above `_sample` is calculated once, one can use [materialize()](./materializefunction.md) function:\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA0XLOwqAMBCE4d5TTJmARVIHzyILrhLIi2QFEQ+vYsBu4P8msGBeSAgTKqWNcWCtOcJCMqwxaMIF1g3hlY1iCfzYSMLVU/Anq+9/oUer3bAnnxNU93r85w3rZ9v0cQAAAA==\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nlet _data = range x from 1 to 100 step 1;\\r\\nlet _sample = materialize(_data | sample 1);\\r\\nunion (_sample), (_sample)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n| x   |\\r\\n| --- |\\r\\n| 34  |\\r\\n| 34  |\\r\\n\\r\\nTo sample a certain percentage of your data (rather than a specified number of rows), you can use\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAwsuyS/KdS1LzSspVqhRKM9ILUpVKErMS9HQVLBRMNAzBABGrj/0IAAAAA==\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nStormEvents | where rand() < 0.1\\r\\n```\\r\\n\\r\\nTo sample keys rather than rows (for example - sample 10 Ids and get all rows for these Ids) you can use [`sample-distinct`](./sampledistinctoperator.md) in combination with the `in` operator.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA8tJLVEoTswtyEl1Lcgszk9JLVawVQguyS/KdS1LzSspVqiBSuumZBaXZOYllygYGijkpylAlXumWHMhKeeqUSjPSC1KRUgrZOYpaKDaoAkA08y7N3UAAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nlet sampleEpisodes = StormEvents | sample-distinct 10 of EpisodeId;\\r\\nStormEvents\\r\\n| where EpisodeId in (sampleEpisodes)\\r\\n```',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/sampleoperator\",\"sampleoperator.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.OperatorToken,\"sample-distinct\",\"Returns a single column that contains up to the specified number of distinct values of the requested column.\",\"The operator tries to return an answer as quickly as possible rather than trying to make a fair sample.\\r\\n\\r\\n## Syntax\\r\\n\\r\\n*T* `| sample-distinct` *NumberOfValues* `of` *ColumnName*\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *T*| string | &check; | The input tabular expression. |\\r\\n| *NumberOfValues*| int, long, or real | &check; | The number distinct values of *T* to return. You can specify any numeric expression.|\\r\\n| *ColumnName*| string | &check; | The name of the column from which to sample.|\\r\\n\\r\\n> [!TIP]\\r\\n>\\r\\n> * Use the [top-hitters](tophittersoperator.md) operator to get the top values.\\r\\n> * Refer to the [sample operator](sampleoperator.md) to sample data rows.\",'Get 10 distinct values from a population\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAwsuyS/KdS1LzSspVqhRKE7MLchJ1U3JLC7JzEsuUTA0UMhPU3AtyCzOT0n1TAEAXIVALi0AAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nStormEvents | sample-distinct 10 of EpisodeId\\r\\n```\\r\\n\\r\\nSample a population and do further computation without exceeding the query limits in the summarize\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA1WNuw6CUBBEe75iSihIsDZ0UlDzBVfuGpfcB9ldNBo+Xk0waDlzTmYCGdTFOVA3s2ZPihaDZYndjZIp1g3XntU4jYZDg3zBpvf+WPzqxYr7lYR2Dk4o/y+qj6ZLjE74SbBsLvRpWoRJ23dffsOJhUarcH7sey97JpXgsgAAAA==\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nlet sampleEpisodes = StormEvents | sample-distinct 10 of EpisodeId;\\r\\nStormEvents \\r\\n| where EpisodeId in (sampleEpisodes) \\r\\n| summarize totalInjuries=sum(InjuriesDirect) by EpisodeId\\r\\n```',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/sampledistinctoperator\",\"sampledistinctoperator.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.OperatorToken,\"scan\",\"Scans data, matches, and builds sequences based on the predicates.\",'Matching records are determined according to predicates defined in the operator\\u2019s steps. A predicate can depend on the state that is generated by previous steps.\\r\\nThe output for the matching record is determined by the input record and assignments defined in the operator\\'s steps.\\r\\n\\r\\nSteps are evaluated from last to first, according to the [scan logic](#scan-logic).\\r\\n\\r\\n```\\r\\nT\\r\\n| sort by Timestamp asc\\r\\n| scan with \\r\\n(\\r\\n    step s1 output=last: Event == \"Start\";\\r\\n    step s2: Event != \"Start\" and Event != \"Stop\" and Timestamp - s1.Timestamp <= 5m;\\r\\n    step s3: Event == \"Stop\"  and Ts - s1.Timestamp <= 5m;\\r\\n)\\r\\n```\\r\\n\\r\\n## Syntax\\r\\n\\r\\n*T* `| scan` [ `with_match_id` `=` *MatchIdColumnName* ] [ `declare` `(` *ColumnDeclarations* `)` ] `with` `(` *StepDefinitions* `)`\\r\\n\\r\\n### *ColumnDeclarations* syntax\\r\\n\\r\\n*ColumnName* `:` *ColumnType*[`=` *DefaultValue* ] [`,` ... ]\\r\\n\\r\\n### *StepDefinition* syntax\\r\\n\\r\\n`step` *StepName* [ `output` = `all` | `last` | `none`] `:` *Condition* [ `=>` *Column* `=` *Assignment* [`,` ... ] ] `;`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *MatchIdColumnName* | string | |  The name of a column of type `long` that is appended to the output as part of the scan execution. Indicates the 0-based index of the match for the row. |\\r\\n| *ColumnDeclarations* | string | | Declares an extension to the schema of the operator\\u2019s source. Additional columns are assigned in the steps or *DefaultValue* if not assigned. *DefaultValue* is `null` if not specified. |\\r\\n| *StepName* | string | &check; | Used to reference values in the state of scan for conditions and assignments. The step name must be unique.|\\r\\n| *Condition* | string | &check; | An expression that evaluates to a `bool`, `true` or `false`, that defines which records from the input matches the step. A record matches the step when the condition is `true` with the step\\u2019s state or with the previous step\\u2019s state.|\\r\\n| *Assignment* | string | | A scalar expression that is assigned to the corresponding column when a record matches a step.|\\r\\n| `output` | string | | Controls the output logic of the step on repeated matches. `all` outputs all records matching the step, `last` outputs only the last record in a series of repeating matches for the step, and `none` does not output records matching the step. The default is `all`.|\\r\\n\\r\\n## Returns\\r\\n\\r\\nA record for each match of a record from the input to a step. The schema of the output is the schema of the source extended with the column in the `declare` clause.','### Cumulative sum\\r\\n\\r\\nCalculate the cumulative sum for an input column. The result of this example is equivalent to using [row_cumsum()](rowcumsumfunction.md).\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA02NOwqAMBBE+5xiSkUQLWyUeBUJcf1ATCTZaAoPb7ByqmEej/HKroSExbsDLdihQ2A6cxcPglYWM2mjPKHQ8YhG8X7RlHrj7CqbEvfOG0QhkPOJoe3BPhLkiL8BmW+qjOv/OojyBSZSTeODAAAA\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nrange x from 1 to 5 step 1 \\r\\n| scan declare (cumulative_x:long=0) with \\r\\n(\\r\\n    step s1: true => cumulative_x = x + s1.cumulative_x;\\r\\n)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|x|cumulative_x|\\r\\n|---|---|\\r\\n|1|1|\\r\\n|2|3|\\r\\n|3|6|\\r\\n|4|10|\\r\\n|5|15|\\r\\n\\r\\n### Cumulative sum on multiple columns with a reset condition\\r\\n\\r\\nCalculate the cumulative sum for two input column, reset the sum value to the current row value whenever the cumulative sum reached 10 or more.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA22OQQrCMBBF9znFXzZaxAhuKulVJLSTWmhTSdKagIc3FIVo/fzVG+bNWGU6QoC20wgBP+EM5+kOwZ6g4Mm0iJA4YYeQkGuUQUvNoCyhaOZxHpTvF7qGaphMJ48lMhjfkOPR+xtYwZCy+p2o4O1MkHW+EdKtXuvCicMXrSVEcodU7PEz5SVW8Sb5K3/F8SOOqRtx5BfGX1hK/bgiAQAA\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nrange x from 1 to 5 step 1\\r\\n| extend y = 2 * x\\r\\n| scan declare (cumulative_x:long=0, cumulative_y:long=0) with \\r\\n(\\r\\n    step s1: true => cumulative_x = iff(s1.cumulative_x >= 10, x, x + s1.cumulative_x), \\r\\n                     cumulative_y = iff(s1.cumulative_y >= 10, y, y + s1.cumulative_y);\\r\\n)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|x|y|cumulative_x|cumulative_y|\\r\\n|---|---|---|---|\\r\\n|1|2|1|2|\\r\\n|2|4|3|6|\\r\\n|3|6|6|12|\\r\\n|4|8|10|8|\\r\\n|5|10|5|18|\\r\\n\\r\\n### Fill forward a column\\r\\n\\r\\nFill forward a string column. Each empty value is assigned the last seen non-empty value.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA01Qy2rDMBC86ysGnSwwoW5DCAkuNI8/yK2EoNjrViC7xrtNCPTjK8sOaPcyo50dRutJcLxRJ4wStZXQV0/ITryBuJa4t10+KTZgGVz3ZfCpEOqlzaE/dB5JMZIZv454N5O3ZLBM8GrE+5msk0ERrQ5PFs20OqutmnKqP/DPILg+cGJYrsaHynaoqfJ2CNmj7tI476l+hi61Nrg7+YbKojEL9eAi/HL4JZTvSLfCLVzTZI6p7eUxGZo8yBepar6L2SrzD0ocTu9HAQAA\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nlet Events = datatable (Ts: timespan, Event: string) [\\r\\n    0m, \"A\",\\r\\n    1m, \"\",\\r\\n    2m, \"B\",\\r\\n    3m, \"\",\\r\\n    4m, \"\",\\r\\n    6m, \"C\",\\r\\n    8m, \"\",\\r\\n    11m, \"D\",\\r\\n    12m, \"\"\\r\\n]\\r\\n;\\r\\nEvents\\r\\n| sort by Ts asc\\r\\n| scan declare (Event_filled: string=\"\") with \\r\\n(\\r\\n    step s1: true => Event_filled = iff(isempty(Event), s1.Event_filled, Event);\\r\\n)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|Ts|Event|Event_filled|\\r\\n|---|---|---|\\r\\n|00:00:00|A|A|\\r\\n|00:01:00||A|\\r\\n|00:02:00|B|B|\\r\\n|00:03:00||B|\\r\\n|00:04:00||B|\\r\\n|00:06:00|C|C|\\r\\n|00:08:00||C|\\r\\n|00:11:00|D|D|\\r\\n|00:12:00||D|\\r\\n\\r\\n### Sessions tagging\\r\\n\\r\\nDivide the input into sessions: a session ends 30 minutes after the first event of the session, after which a new session starts. Note the use of `with_match_id` flag which assigns a unique value for each distinct match (session) of *scan*. Also note the special use of two *steps* in this example, `inSession` has `true` as condition so it captures and outputs all the records from the input while `endSession` captures records that happen more than 30m from the `sessionStart` value for the current match. The `endSession` step has `output=none` meaning it doesn\\'t produce output records. The `endSession` step is used to advance the state of the current match from `inSession` to `endSession`, allowing a new match (session) to begin, starting from the current record.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA3WQy2rDMBBF9/qKS1Y2qCVt+sLGgT7yBcmulKDYSiOQZaMZtxT68ZVsp3EWkTY6M/fOQ1YzVl/aMaFApTjcndVINpSBTa2pVU4OigzE3rjPFO8C4cxridnzTPZwM4XbCC8jLCK8HeE89RDp9UhPU+VdX3E10uP9UF98iFwM84pfUOMZux9sCIrKGCiVw7fhw7ZWXB62pipIE5nGhScqXVrlw3JjbM3K82nNtHdCJH1HYt3CuPUgDSrfaRRLTL3hy8x+nxhynbXJv/h6qkllGE/iQjI/9dKuGiVoOm47LlzjdBaXu7pgxxKLeZ2L9A9Yk5hPxgEAAA==\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nlet Events = datatable (Ts: timespan, Event: string) [\\r\\n    0m, \"A\",\\r\\n    1m, \"A\",\\r\\n    2m, \"B\",\\r\\n    3m, \"D\",\\r\\n    32m, \"B\",\\r\\n    36m, \"C\",\\r\\n    38m, \"D\",\\r\\n    41m, \"E\",\\r\\n    75m, \"A\"\\r\\n]\\r\\n;\\r\\nEvents\\r\\n| sort by Ts asc\\r\\n| scan with_match_id=session_id declare (sessionStart: timespan) with \\r\\n(\\r\\n    step inSession: true => sessionStart = iff(isnull(inSession.sessionStart), Ts, inSession.sessionStart);\\r\\n    step endSession output=none: Ts - inSession.sessionStart > 30m;\\r\\n)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|Ts|Event|sessionStart|session_id|\\r\\n|---|---|---|---|\\r\\n|00:00:00|A|00:00:00|0|\\r\\n|00:01:00|A|00:00:00|0|\\r\\n|00:02:00|B|00:00:00|0|\\r\\n|00:03:00|D|00:00:00|0|\\r\\n|00:32:00|B|00:32:00|1|\\r\\n|00:36:00|C|00:32:00|1|\\r\\n|00:38:00|D|00:32:00|1|\\r\\n|00:41:00|E|00:32:00|1|\\r\\n|01:15:00|A|01:15:00|2|\\r\\n\\r\\n### Events between Start and Stop\\r\\n\\r\\nFind all sequences of events between the event `Start` and the event `Stop` that occur within 5 minutes. Assign a match ID for each sequence.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA3WPYWvCMBCGv+dXvPOTQidr3cZozYc5/QX6TYbENsxCE0vvcAj+eJM0FR0sgRzPe3fvXRrNWJ20ZYJEpdjdfaMx3lAOro2mVtmkr8hB3NX2Z4KtgDsvJsHoc5QESD2sWXUchcwLiwgzD8sIr33psY387vkrwsdfnzQ4rwbKbs3iWxSiX11cQMeOsT9jQ1BUeqFUFr81H3ZGcXnY1ZU07gkSxDi4EesWlOb9/yDlMLq4S2dD+umWhrLVg+jWCZqb/uwMpy7OJd7Mvc/sccz/LZMrJ20JNJQBAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nlet Events = datatable (Ts: timespan, Event: string) [\\r\\n    0m, \"A\",\\r\\n    1m, \"Start\",\\r\\n    2m, \"B\",\\r\\n    3m, \"D\",\\r\\n    4m, \"Stop\",\\r\\n    6m, \"C\",\\r\\n    8m, \"Start\",\\r\\n    11m, \"E\",\\r\\n    12m, \"Stop\"\\r\\n]\\r\\n;\\r\\nEvents\\r\\n| sort by Ts asc\\r\\n| scan with_match_id=m_id with \\r\\n(\\r\\n    step s1: Event == \"Start\";\\r\\n    step s2: Event != \"Start\" and Event != \"Stop\" and Ts - s1.Ts <= 5m;\\r\\n    step s3: Event == \"Stop\" and Ts - s1.Ts <= 5m;\\r\\n)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|Ts|Event|m_id|\\r\\n|---|---|---|\\r\\n|00:01:00|Start|0|\\r\\n|00:02:00|B|0|\\r\\n|00:03:00|D|0|\\r\\n|00:04:00|Stop|0|\\r\\n|00:08:00|Start|1|\\r\\n|00:11:00|E|1|\\r\\n|00:12:00|Stop|1|\\r\\n\\r\\n### Calculate a custom funnel of events\\r\\n\\r\\nCalculate a funnel completion of the sequence  `Hail` -> `Tornado` -> `Thunderstorm Wind` by `State` with custom thresholds on the times between the events (`Tornado` within `1h` and `Thunderstorm Wind` within `2h`). This example is similar to the [funnel_sequence_completion plugin](funnel-sequence-completion-plugin.md), but allows greater flexibility.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA2VQsa7CMBDb+QqrEwwgPUZ4HZHYqcR8NNHLSfRSJVeeivh40lBBgQw32D774oP60OwuVjTObmgpKCt7gWPRVdRAav/6Ukj5YnHqcdCEYIb05nlGH3QkglbcWFCsM3NDrEnwz+qmC3lJbQtHfN4gZ1d9a1GWKPYJK7bvunShkPGf0uoBFyAxk/Rl9l29gN8SP+7T0nVibIjD548s5st7wmMQfKeMV70HrcegxThTBV3TUOCrhal9JzrPBS6Gxp6RdzkEW8CEAQAA\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nStormEvents\\r\\n| partition hint.strategy=native by State \\r\\n    (\\r\\n    sort by StartTime asc\\r\\n    | scan with \\r\\n    (\\r\\n        step hail: EventType == \"Hail\";\\r\\n        step tornado: EventType == \"Tornado\" and StartTime - hail.StartTime <= 1h;\\r\\n        step thunderstormWind: EventType == \"Thunderstorm Wind\" and StartTime - tornado.StartTime <= 2h;\\r\\n    )\\r\\n    )\\r\\n| summarize dcount(State) by EventType\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|EventType|dcount_State|\\r\\n|---|---|\\r\\n|Hail|50|\\r\\n|Tornado|34|\\r\\n|Thunderstorm Wind|32|\\r\\n\\r\\n## Scan logic\\r\\n\\r\\n`scan` goes over the serialized input data, record by record, comparing each record against each step\\u2019s condition while taking into account the current state of each step.\\r\\n\\r\\n### Scan\\'s state\\r\\n\\r\\nThe state that is used behind the scenes by `scan` is a set of records, with the same schema of the output, including source and declared columns.\\r\\nEach step has its own state, the state of step *k* has *k* records in it, where each record in the step\\u2019s state corresponds to a step up to *k*.\\r\\n\\r\\nFor example, if a scan operator has *n* steps named *s_1*, *s_2*, ..., *s_n* then step *s_k* would have *k* records in its state corresponding to *s_1*, *s_2*, ..., *s_k*.\\r\\nReferencing a value in the state is done in the form *StepName*.*ColumnName*. For example, `s_2.col1` references column `col1` that belongs to step *s_2* in the state of *s_k*.\\r\\n\\r\\n### Matching logic\\r\\n\\r\\nEach record from the input is evaluated against all of scan\\u2019s steps, starting from last to first. When a record *r* is considered against some step *s_k*, the following logic is applied:\\r\\n\\r\\n* If the state of the previous step isn\\'t empty and the record *r* satisfies the condition of *s_k* using the state of the previous step *s_(k-1)*, then the following happens:\\r\\n    1. The state of *s_k* is deleted.\\r\\n    1. The state of *s_(k-1)* becomes (\"promoted\" to be) the state of *s_k*, and the state of *s_(k-1)* becomes empty.\\r\\n    1. All the assignments of *s_k* are calculated and extend *r*.\\r\\n    1. The extended *r* is added to the output (if *s_k* is defined as `output=all`) and to the state of *s_k*.\\r\\n* If *r* doesn\\'t satisfy the condition of *s_k* with the state of *s_(k-1)*, *r* is then checked with the state of *s_k*. If *r* satisfies the condition of *s_k* with the state of *s_k*, the following happens:\\r\\n    1. The record *r* is extended with the assignments of *s_k*.\\r\\n    1. If *s_k* is defined as `output=all`, the extended record r is added to the output.\\r\\n    1. The last record in the state of *s_k* (which represents *s_k* itself in the state) is replaced by the extended record *r*.\\r\\n    1. Whenever the first step is matched while its state is empty, a new match begins and the match ID is increased by `1`. This only affects the output when `with_match_id` is used.\\r\\n* If r doesn\\'t satisfy the condition *s_k* with the state *s_k*, evaluate *r* against condition *s_k-1* and repeat the logic above.',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/scan-operator\",\"scan-operator.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"schema_merge\",\"Merges tabular schema definitions into a unified schema.\",\"Schema definitions are expected to be in the format produced by the [`getschema`](./getschemaoperator.md) operator.\\r\\n\\r\\nThe `schema merge` operation joins columns in input schemas and tries to reduce\\r\\ndata types to common ones. If data types can't be reduced, an error is displayed on the problematic column.\\r\\n\\r\\nThe plugin is invoked with the [`evaluate`](evaluateoperator.md) operator.\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`T` `|` `evaluate` `schema_merge(`*PreserveOrder*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *PreserveOrder* | bool | | When set to `true`, directs the plugin to validate the column order as defined by the first tabular schema that is kept. If the same column is in several schemas, the column ordinal must be like the column ordinal of the first schema that it appeared in. Default value is `true`.|\\r\\n\\r\\n## Returns\\r\\n\\r\\nThe `schema_merge` plugin returns output similar to what [`getschema`](./getschemaoperator.md) operator returns.\",'Merge with a schema that has a new column appended.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA8tJLVEoTs5IzU00VLBVSEksAcKknFSN0KJMq+KSosy8dB0Fj5KSgmCgRGmxVWZeiWZ0rEKNQnpqCUSbNVcO3AgjIo3QUQhKTUstKkotgirAMLM0LzM/D+YwHbjxNQqpZYk5pYklqVCh+NzUovRUDU0ALOh/occAAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nlet schema1 = datatable(Uri:string, HttpStatus:int)[] | getschema;\\r\\nlet schema2 = datatable(Uri:string, HttpStatus:int, Referrer:string)[] | getschema;\\r\\nunion schema1, schema2 | evaluate schema_merge()\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|ColumnName | ColumnOrdinal | DataType | ColumnType|\\r\\n|---|---|---|---|\\r\\n|Uri|0|System.String|string|\\r\\n|HttpStatus|1|System.Int32|int|\\r\\n|Referrer|2|System.String|string|\\r\\n\\r\\nMerge with a schema that has different column ordering (`HttpStatus` ordinal changes from `1` to `2` in the new variant).\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA8tJLVEoTs5IzU00VLBVSEksAcKknFSN0KJMq+KSosy8dB0Fj5KSgmCgRGmxVWZeiWZ0rEKNQnpqCUSbNVcO3AgjnEYEpaalFhWlFhFrZmleZn4ezGE6cONrFFLLEnNKE0tSoULxualF6akamgBdra59xwAAAA==\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nlet schema1 = datatable(Uri:string, HttpStatus:int)[] | getschema;\\r\\nlet schema2 = datatable(Uri:string, Referrer:string, HttpStatus:int)[] | getschema;\\r\\nunion schema1, schema2 | evaluate schema_merge()\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|ColumnName | ColumnOrdinal | DataType | ColumnType|\\r\\n|---|---|---|---|\\r\\n|Uri|0|System.String|string|\\r\\n|Referrer|1|System.String|string|\\r\\n|HttpStatus|-1|ERROR(unknown CSL type:ERROR(columns are out of order))|ERROR(columns are out of order)|\\r\\n\\r\\nMerge with a schema that has different column ordering, but with `PreserveOrder` set to `false`.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA42OsQrCQBBEe79iywTSaBmxt1MUKxHZmMl5cLnI7l6qfHwO1HSCTDfDPF6AkT6e6HlNO2rZcpqA4iK+VhMfXUV7s9c5D0lrH6283mgiB3vftquwIDY/ESd0EIH8y0zRD/ErVi34iTBySGz4VPce4lAcBQoZcZAWkiU6DopyBn2W6PrcAAAA\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nlet schema1 = datatable(Uri:string, HttpStatus:int)[] | getschema;\\r\\nlet schema2 = datatable(Uri:string, Referrer:string, HttpStatus:int)[] | getschema;\\r\\nunion schema1, schema2 | evaluate schema_merge(PreserveOrder = false)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|ColumnName | ColumnOrdinal | DataType | ColumnType|\\r\\n|---|---|---|---|\\r\\n|Uri|0|System.String|string\\r\\n|Referrer|1|System.String|string\\r\\n|HttpStatus|2|System.Int32|int|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/schemamergeplugin\",\"schemamergeplugin.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.OperatorToken,\"search\",\"Searches a text pattern in multiple tables and columns.\",'> [!NOTE]\\r\\n> If you know the specific tables and columns you want to search, it\\'s more performant to use the [union](unionoperator.md) and [where](whereoperator.md) operators. The `search` operator can be slow when searching across a large number of tables and columns.\\r\\n\\r\\n## Syntax\\r\\n\\r\\n[*T* `|`] `search` [`kind=` *CaseSensitivity* ] [`in` `(`*TableSources*`)`] *SearchPredicate*\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *T* | string | | The tabular data source to be searched over, such as a table name, a [union operator](unionoperator.md), or the results of a tabular query. Cannot appear together with *TableSources*.|\\r\\n| *CaseSensitivity* | string | | A flag that controls the behavior of all `string` scalar operators, such as `has`, with respect to case sensitivity. Valid values are `default`, `case_insensitive`, `case_sensitive`. The options `default` and `case_insensitive` are synonymous, since the default behavior is case insensitive.|\\r\\n| *TableSources* | string | | A comma-separated list of \"wildcarded\" table names to take part in the search. The list has the same syntax as the list of the [union operator](unionoperator.md). Cannot appear together with *TabularSource*.|\\r\\n| *SearchPredicate* | string | &check; | A boolean expression to be evaluated for every record in the input. If it returns `true`, the record is outputted. See [Search predicate syntax](#search-predicate-syntax).|\\r\\n\\r\\n### Search predicate syntax\\r\\n\\r\\nThe *SearchPredicate* allows you to search for specific terms in all columns of a table. The operator that will be applied to a search term depends on the presence and placement of a wildcard asterisk (`*`) in the term, as shown in the following table.\\r\\n\\r\\n|Literal   |Operator   |\\r\\n|----------|-----------|\\r\\n|`billg`   |`has`      |\\r\\n|`*billg`  |`hassuffix`|\\r\\n|`billg*`  |`hasprefix`|\\r\\n|`*billg*` |`contains` |\\r\\n|`bi*lg`   |`matches regex`|\\r\\n\\r\\nYou can also restrict the search to a specific column, look for an exact match instead of a term match, or search by regular expression. The syntax for each of these cases is shown in the following table.\\r\\n\\r\\n|Syntax|Explanation|\\r\\n|--|--|\\r\\n|*ColumnName*`:`*StringLiteral* | This syntax can be used to restrict the search to a specific column. The default behavior is to search all columns. |\\r\\n|*ColumnName*`==`*StringLiteral* | This syntax can be used to search for exact matches of a column against a string value. The default behavior is to look for a term-match.|\\r\\n| *Column* `matches regex` *StringLiteral* | This syntax indicates regular expression matching, in which *StringLiteral* is the regex pattern.|\\r\\n\\r\\nUse boolean expressions to combine conditions and create more complex searches. For example, `\"error\" and x==123` would result in a search for records that have the term `error` in any columns and the value `123` in the `x` column.\\r\\n\\r\\n> [!NOTE]\\r\\n> If both *TabularSource* and *TableSources* are omitted, the search is carried over all unrestricted tables and views of the database in scope.\\r\\n\\r\\n### Search predicate syntax examples\\r\\n\\r\\n|# |Syntax                                 |Meaning (equivalent `where`)           |Comments|\\r\\n  |--|---------------------------------------|---------------------------------------|--------|\\r\\n  | 1|`search \"err\"`                         |`where * has \"err\"`                    ||\\r\\n  | 2|`search in (T1,T2,A*) \"err\"`           |<code>union T1,T2,A* &#124; where * has \"err\"<code>   ||\\r\\n  | 3|`search col:\"err\"`                     |`where col has \"err\"`                  ||\\r\\n  | 4|`search col==\"err\"`                    |`where col==\"err\"`                     ||\\r\\n  | 5|`search \"err*\"`                        |`where * hasprefix \"err\"`              ||\\r\\n  | 6|`search \"*err\"`                        |`where * hassuffix \"err\"`              ||\\r\\n  | 7|`search \"*err*\"`                       |`where * contains \"err\"`               ||\\r\\n  | 8|`search \"Lab*PC\"`                      |`where * matches regex @\"\\\\bLab.*PC\\\\b\"`||\\r\\n  | 9|`search *`                             |`where 0==0`                           ||\\r\\n  |10|`search col matches regex \"...\"`       |`where col matches regex \"...\"`        ||\\r\\n  |11|`search kind=case_sensitive`           |                                       |All string comparisons are case-sensitive|\\r\\n  |12|`search \"abc\" and (\"def\" or \"hij\")`    |`where * has \"abc\" and (* has \"def\" or * has hij\")`||\\r\\n  |13|`search \"err\" or (A>a and A<b)`        |`where * has \"err\" or (A>a and A<b)`   ||\\r\\n\\r\\n## Remarks\\r\\n\\r\\nUnlike the [find operator](findoperator.md), the `search` operator does not support the following:\\r\\n\\r\\n1. `withsource=`: The output will always include a column called `$table` of type `string` whose value\\r\\n   is the table name from which each record was retrieved (or some system-generated name if the source\\r\\n   isn\\'t a table but a composite expression).\\r\\n2. `project=`, `project-smart`: The output schema is equivalent to `project-smart` output schema.','### Global term search\\r\\n\\r\\nSearch for a term over all unrestricted tables and views of the database in scope.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/ContosoSales?query=H4sIAAAAAAAAAytOTSxKzlBQci9KTc1TAgAhG1rADgAAAA==\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nsearch \"Green\"\\r\\n```\\r\\n\\r\\nThe output contains records from the `Customers`, `Products`, and `SalesTable` tables. The `Customers` records shows all customers with the last name \"Green\", and the `Products` and `SalesTable` records shows products with some mention of \"Green\".\\r\\n\\r\\n### Conditional global term search\\r\\n\\r\\nSearch for records that match both terms over all unrestricted tables and views of the database in scope.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/ContosoSales?query=H4sIAAAAAAAAAytOTSxKzlBQci9KTc1TUkjMS1HQUHJJzSmtSFVSyC9SUAooyi9OLU8sSlXSBADUfdV9LAAAAA==\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nsearch \"Green\" and (\"Deluxe\" or \"Proseware\")\\r\\n```\\r\\n\\r\\n### Search a specific table\\r\\n\\r\\nSearch only in the `Customers` table.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/ContosoSales?query=H4sIAAAAAAAAAytOTSxKzlDIzFPQCCjKTylNLinWVFByL0pNzVMCAAJBkngcAAAA\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nsearch in (Products) \"Green\"\\r\\n```\\r\\n\\r\\n### Case-sensitive search\\r\\n\\r\\nSearch for records that match both case-sensitive terms over all unrestricted tables and views of the database in scope.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/ContosoSales?query=H4sIAAAAAAAAAytOTSxKzlDIzsxLsU1OLE6NL07NK84sySxLVVBKyilNVQIAA9DDEiEAAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nsearch kind=case_sensitive \"blue\"\\r\\n```\\r\\n\\r\\n### Search specific columns\\r\\n\\r\\nSearch for a term in the \"FirstName\" and \"LastName\" columns over all unrestricted tables and views of the database in scope.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/ContosoSales?query=H4sIAAAAAAAAAytOTSxKzlBwyywqLvFLzE21UnJMLMrPU1LIL1LwSYSJeZSmZ6QWKwEA/CSSXi0AAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nsearch FirstName:\"Aaron\" or LastName:\"Hughes\"\\r\\n```\\r\\n\\r\\n### Limit search by timestamp\\r\\n\\r\\nSearch for a term over all unrestricted tables and views of the database in scope if the term appears in a record with a date greater than the given date.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/ContosoSales?query=H4sIAAAAAAAAAytOTSxKzlBQ8ihNz0gtVlJIzEtRcEksSfVOrVSwU0gBskoyc1M11I0MDCx1DQyBSF0TAMIgQA00AAAA\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nsearch \"Hughes\" and DateKey > datetime(\\'2009-01-01\\')\\r\\n```\\r\\n\\r\\n## Performance Tips\\r\\n\\r\\n|#|Tip|Prefer|Over|\\r\\n|--|--|--|--|\\r\\n| 1| Prefer to use a single `search` operator over several consecutive `search` operators|`search \"billg\" and (\"steveb\" or \"satyan\")` |<code>search \"billg\" &#124; search \"steveb\" or \"satyan\"<code>|\\r\\n| 2| Prefer to filter inside the `search` operator |`search \"billg\" and \"steveb\"` |<code>search * &#124; where * has \"billg\" and * has \"steveb\"<code> |',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/searchoperator\",\"searchoperator.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"sequence_detect\",\"Detects sequence occurrences based on provided predicates. The plugin is invoked with the [`evaluate`](evaluateoperator.md) operator.\",\"## Syntax\\r\\n\\r\\n*T* `| evaluate` `sequence_detect` `(`*TimelineColumn*`,` *MaxSequenceStepWindow*`,` *MaxSequenceSpan*`,` *Expr1*`,` *Expr2*`,` ..., *Dim1*`,` *Dim2*`,` ...`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *T*| string | &check; | The input tabular expression.|\\r\\n| *TimelineColumn*| string | &check; | The column reference representing timeline, must be present in the source expression.|\\r\\n| *MaxSequenceStepWindow*| timespan | &check; | The value of the max allowed timespan between 2 sequential steps in the sequence.|\\r\\n| *MaxSequenceSpan*| timespan | &check; | The max timespan for the sequence to complete all steps.|\\r\\n| *Expr1*, *Expr2*, ...| string | &check; | The boolean predicate expressions defining sequence steps.|\\r\\n| *Dim1*, *Dim2*, ...| string | &check; | The dimension expressions that are used to correlate sequences.|\\r\\n\\r\\n## Returns\\r\\n\\r\\nReturns a single table where each row in the table represents a single sequence occurrence:\\r\\n\\r\\n* *Dim1*, *Dim2*, ...: dimension columns that were used to correlate sequences.\\r\\n* *Expr1*_*TimelineColumn*, *Expr2*_*TimelineColumn*, ...: Columns with time values, representing the timeline of each sequence step.\\r\\n* *Duration*: the overall sequence time window\",\"The following query looks at the table T to search for relevant data from a specified time period.\\r\\n\\r\\n```\\r\\nT | evaluate sequence_detect(datetime_column, 10m, 1h, e1 = (Col1 == 'Val'), e2 = (Col2 == 'Val2'), Dim1, Dim2)\\r\\n```\\r\\n\\r\\n### Exploring Storm Events\\r\\n\\r\\nThe following query looks on the table StormEvents (weather statistics for 2007) and shows cases where sequence of 'Excessive Heat' was followed by 'Wildfire' within 5 days.\\r\\n\\r\\n> [!div class=\\\"nextstepaction\\\"]\\r\\n> <a href=\\\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA3WPMQuDMBCFd3/F4aJCilPHjEJ3BccSklcaMNaaM7XQH99QXAz1xnvfx7tr+TG7JmBkn30IQQ2LYpDHc8GocTVgaC4z2k/LaubOOog0ORtBVNfkGRM5tZ44UofQVnMI3qFYlr/7uvcEkpLyZtXw3gbQJaZ5JSi1XnYwNzsjMYt+2xd/nPgR7+qrLywAQRgbAQAA\\\" target=\\\"_blank\\\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nStormEvents\\r\\n| evaluate sequence_detect(\\r\\n               StartTime,\\r\\n               5d,  // step max-time\\r\\n               5d,  // sequence max-time\\r\\n               heat=(EventType == \\\"Excessive Heat\\\"), \\r\\n               wildfire=(EventType == 'Wildfire'), \\r\\n               State\\r\\n           )\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|State|heat_StartTime|wildfire_StartTime|Duration|\\r\\n|---|---|---|---|\\r\\n|CALIFORNIA|2007-05-08 00:00:00.0000000|2007-05-08 16:02:00.0000000|16:02:00|\\r\\n|CALIFORNIA|2007-05-08 00:00:00.0000000|2007-05-10 11:30:00.0000000|2.11:30:00|\\r\\n|CALIFORNIA|2007-07-04 09:00:00.0000000|2007-07-05 23:01:00.0000000|1.14:01:00|\\r\\n|SOUTH DAKOTA|2007-07-23 12:00:00.0000000|2007-07-27 09:00:00.0000000|3.21:00:00|\\r\\n|TEXAS|2007-08-10 08:00:00.0000000|2007-08-11 13:56:00.0000000|1.05:56:00|\\r\\n|CALIFORNIA|2007-08-31 08:00:00.0000000|2007-09-01 11:28:00.0000000|1.03:28:00|\\r\\n|CALIFORNIA|2007-08-31 08:00:00.0000000|2007-09-02 13:30:00.0000000|2.05:30:00|\\r\\n|CALIFORNIA|2007-09-02 12:00:00.0000000|2007-09-02 13:30:00.0000000|01:30:00|\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/sequence-detect-plugin\",\"sequence-detect-plugin.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.OperatorToken,\"serialize\",\"Marks that the order of the input row set is safe to use for window functions.\",\"The operator has a declarative meaning. It marks the input row set as serialized (ordered), so that [window functions](./windowsfunctions.md) can be applied to it.\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`serialize` [*Name1* `=` *Expr1* [`,` *Name2* `=` *Expr2*]...]\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n| -- | -- | -- | -- |\\r\\n| *Name* | string | | The name of the column to add or update. If omitted, the output column name will be automatically generated. |\\r\\n| *Expr* | string | &check; | The calculation to perform over the input.|\",'### Serialize subset of rows by condition\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/SampleLogs?query=H4sIAAAAAAAAAwspSkxO9clPL+blqlEoz0gtSlVwzslMzSsJSi0sTS0u8UxRsLVVUDJNtDCxSDM30LW0tDTTTU0yNNc1NE1N0TUyTLJITbI0SUozSFUCGVGcWpSZmJNZlQoAv59YuFkAAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nTraceLogs\\r\\n| where ClientRequestId == \"5a848f70-9996-eb17-15ed-21b8eb94bf0e\"\\r\\n| serialize\\r\\n```\\r\\n\\r\\n### Add row number to the serialized table\\r\\n\\r\\nTo add a row number to the serialized table, use the [row_number()](rownumberfunction.md) function.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/SampleLogs?query=H4sIAAAAAAAAAwspSkxO9clPL+blqlEoScxOVTA0AADDD5pUFAAAAA==\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nTraceLogs\\r\\n| where ClientRequestId == \"5a848f70-9996-eb17-15ed-21b8eb94bf0e\"\\r\\n| serialize rn = row_number()\\r\\n```\\r\\n\\r\\n## Serialization behavior of operators\\r\\n\\r\\nThe output row set of the following operators is marked as serialized.\\r\\n\\r\\n* [getschema](./getschemaoperator.md)\\r\\n* [range](./rangeoperator.md)\\r\\n* [sort](./sort-operator.md)\\r\\n* [top](./topoperator.md)\\r\\n* [top-hitters](./tophittersoperator.md)\\r\\n\\r\\n\\r\\nThe output row set of the following operators is marked as non-serialized.\\r\\n\\r\\n* [count](./countoperator.md)\\r\\n* [distinct](./distinctoperator.md)\\r\\n* [evaluate](./evaluateoperator.md)\\r\\n* [facet](./facetoperator.md)\\r\\n* [join](./joinoperator.md)\\r\\n* [make-series](./make-seriesoperator.md)\\r\\n* [mv-expand](./mvexpandoperator.md)\\r\\n* [reduce by](./reduceoperator.md)\\r\\n* [sample](./sampleoperator.md)\\r\\n* [sample-distinct](./sampledistinctoperator.md)\\r\\n* [summarize](./summarizeoperator.md)\\r\\n* [top-nested](./topnestedoperator.md)\\r\\n\\r\\n\\r\\nAll other operators preserve the serialization property. If the input row set is serialized, then the output row set is also serialized.',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/serializeoperator\",\"serializeoperator.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"series_abs\",\"Calculates the element-wise absolute value of the numeric series input.\",\"## Syntax\\r\\n\\r\\n`series_abs(`*series*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *series* | dynamic | &check; | An array of numeric values over which the absolute value function is applied. |\\r\\n\\r\\n## Returns\\r\\n\\r\\nDynamic array of calculated absolute value. Any non-numeric element yields a `null` element value.\",'> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAysoyswrUUgsKlKwVUipzEvMzUzWiNY10zPVMdCx0DOK1eSqUUitKEnNSwEpik9MKgYqLE4tykwtBnE0gIKaAGEU39tEAAAA\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint arr = dynamic([-6.5,0,8.2])\\r\\n| extend arr_abs = series_abs(arr)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|arr|arr_abs|\\r\\n|---|---|\\r\\n|[-6.5,0,8.2]|[6.5,0,8.2]|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/series-absfunction\",\"series-absfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"series_acos\",\"Calculates the element-wise arccosine function of the numeric series input.\",\"## Syntax\\r\\n\\r\\n`series_acos(`*series*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *series* | dynamic | &check; | An array of numeric values over which the arccosine function is applied. |\\r\\n\\r\\n## Returns\\r\\n\\r\\nDynamic array of calculated arccosine function values. Any non-numeric element yields a `null` element value.\",'> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAysoyswrUUgsKlKwVUipzEvMzUzWiNY11DHQMYzV5KpRSK0oSc1LASmIT0zOLwaqKk4tykwtBvM0gMKaALhJgmxCAAAA\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint arr = dynamic([-1,0,1])\\r\\n| extend arr_acos = series_acos(arr)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|arr|arr_acos|\\r\\n|---|---|\\r\\n|[-6.5,0,8.2]|[3.1415926535897931,1.5707963267948966,0.0]|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/series-acosfunction\",\"series-acosfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"series_add\",\"Calculates the element-wise addition of two numeric series inputs.\",\"## Syntax\\r\\n\\r\\n`series_add(`*series1*`,` *series2*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *series1, series2* | dynamic | &check; | The numeric arrays to be element-wise added into a dynamic array result. |\\r\\n\\r\\n## Returns\\r\\n\\r\\nDynamic array of calculated element-wise add operation between the two inputs. Any non-numeric element or non-existing element (arrays of different sizes) yields a `null` element value.\",'> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA1XMwQrCMBAE0LtfMcdGctl69lvC0qyiYhN2c0iCH99UhOJxHjOjvN4FFTdNbxBKwgVWJINOH0gtskY0XEfjjPmgPqj9KGt6ylJgNDDz8gqsym2qvvnuPGz+9+7RPKo73owCxxi+RRN9iO15MtrHbgM/wNkBowAAAA==\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nrange x from 1 to 3 step 1\\r\\n| extend y = x * 2\\r\\n| extend z = y * 2\\r\\n| project s1 = pack_array(x,y,z), s2 = pack_array(z, y, x)\\r\\n| extend s1_add_s2 = series_add(s1, s2)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|s1|s2|s1_add_s2|\\r\\n|---|---|---|\\r\\n|[1,2,4]|[4,2,1]|[5,4,5]|\\r\\n|[2,4,8]|[8,4,2]|[10,8,10]|\\r\\n|[3,6,12]|[12,6,3]|[15,12,15]|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/series-addfunction\",\"series-addfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"series_asin\",\"Calculates the element-wise arcsine function of the numeric series input.\",\"## Syntax\\r\\n\\r\\n`series_asin(`*series*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *series* | dynamic | &check; | An array of numeric values over which the arcsine function is applied. |\\r\\n\\r\\n## Returns\\r\\n\\r\\nDynamic array of calculated arcsine function values. Any non-numeric element yields a `null` element value.\",'> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAysoyswrUUgsKlKwVUipzEvMzUzWiNY11DHQMYzV5KpRSK0oSc1LASmITyzOzAOqKk4tykwtBvM0gMKaAOO+/MVCAAAA\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint arr = dynamic([-1,0,1])\\r\\n| extend arr_asin = series_asin(arr)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|arr|arr_asin|\\r\\n|---|---|\\r\\n|[-6.5,0,8.2]|[1.5707963267948966,0.0,1.5707963267948966]|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/series-asinfunction\",\"series-asinfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"series_atan\",\"Calculates the element-wise arctangent function of the numeric series input.\",\"## Syntax\\r\\n\\r\\n`series_atan(`*series*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *series* | dynamic | &check; | An array of numeric values over which the arctangent function is applied. |\\r\\n\\r\\n## Returns\\r\\n\\r\\nDynamic array of calculated arctangent function values. Any non-numeric element yields a `null` element value.\",'> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAysoyswrUUgsKlKwVUipzEvMzUzWiNY11DHQMYzV5KpRSK0oSc1LASmITyxJzAOqKk4tykwtBvM0gMKaAKvO/bxCAAAA\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint arr = dynamic([-1,0,1])\\r\\n| extend arr_atan = series_atan(arr)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|arr|arr_atan|\\r\\n|---|---|\\r\\n|[-6.5,0,8.2]|[-0.78539816339744828,0.0,0.78539816339744828]|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/series-atanfunction\",\"series-atanfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"series_ceiling\",\"Calculates the element-wise ceiling function of the numeric series input.\",\"## Syntax\\r\\n\\r\\n`series_ceiling(`*series*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *series* | dynamic | &check; | An array of numeric values over which the ceiling function is applied. |\\r\\n\\r\\n## Returns\\r\\n\\r\\nDynamic array of the calculated ceiling function. Any non-numeric element yields a `null` element value.\",'> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAysoyswrUShWsFVIqcxLzM1M1ojWNdQz1THUMdIzjdXkqlFIrShJzUtRKI5PTs3MycxLByotTi3KTIULaBRrAgCQd2nZRgAAAA==\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint s = dynamic([-1.5,1,2.5])\\r\\n| extend s_ceiling = series_ceiling(s)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|s|s_ceiling|\\r\\n|---|---|\\r\\n|[-1.5,1,2.5]|[-1.0,1.0,3.0]|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/series-ceiling-function\",\"series-ceiling-function.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"series_cos\",\"Calculates the element-wise cosine function of the numeric series input.\",\"## Syntax\\r\\n\\r\\n`series_cos(`*series*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *series* | dynamic | &check; | An array of numeric values over which the cosine function is applied. |\\r\\n\\r\\n## Returns\\r\\n\\r\\nDynamic array of calculated cosine function values. Any non-numeric element yields a `null` element value.\",'> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAysoyswrUUgsKlKwVUipzEvMzUzWiNY11DHQMYzV5KpRSK0oSc1LASmIT84vBioqTi3KTC0GcTSAgpoASCWUy0AAAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint arr = dynamic([-1,0,1])\\r\\n| extend arr_cos = series_cos(arr)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|arr|arr_cos|\\r\\n|---|---|\\r\\n|[-6.5,0,8.2]|[0.54030230586813976,1.0,0.54030230586813976]|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/series-cosfunction\",\"series-cosfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"series_decompose\",\"Applies a decomposition transformation on a series.\",\"Takes an expression containing a series (dynamic numerical array) as input and decomposes it to seasonal, trend, and residual components.\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`series_decompose(`*Series* `,` [ *Seasonality*`,` *Trend*`,` *Test_points*`,` *Seasonality_threshold* ]`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n|*Series*| dynamic | &check; | An array of numeric values, typically the resulting output of [make-series](make-seriesoperator.md) or [make_list](makelist-aggfunction.md) operators.|\\r\\n|*Seasonality*|int|| Controls the seasonal analysis. The possible values are:<br/><br/>- `-1`: Autodetect seasonality using [series_periods_detect](series-periods-detectfunction.md). This is the default value.<br/>- Period: A positive integer specifying the expected period in number of bins. For example, if the series is in `1 - h` bins, a weekly period is 168 bins.<br/>- `0`: No seasonality, so skip extracting this component.|\\r\\n|*Trend*|string|| Controls the trend analysis. The possible values are:<br/><br/>- `avg`: Define trend component as `average(x)`. This is the default.<br/>- `linefit`: Extract trend component using linear regression.<br/>- `none`: No trend, so skip extracting this component.<br/>\\r\\n|*Test_points*|int|| A positive integer specifying the number of points at the end of the series to exclude from the learning, or regression, process. This parameter should be set for forecasting purposes. The default value is 0.|\\r\\n|*Seasonality_threshold*|real|| The threshold for seasonality score when *Seasonality* is set to autodetect. The default score threshold is 0.6.<br/><br/>For more information, see [series_periods_detect](series-periods-detectfunction.md).|\\r\\n\\r\\n## Returns\\r\\n\\r\\nThe function returns the following respective series:\\r\\n\\r\\n* `baseline`: the predicted value of the series (sum of seasonal and trend components, see below).\\r\\n* `seasonal`: the series of the seasonal component:\\r\\n  * if the period isn't detected or is explicitly set to 0: constant 0.\\r\\n  * if detected or set to positive integer: median of the series points in the same phase\\r\\n* `trend`: the series of the trend component.\\r\\n* `residual`: the series of the residual component (that is, x - baseline).\\r\\n  \\r\\n\\r\\n>[!NOTE]\\r\\n> * Component execution order:\\r\\n>\\r\\n> 1. Extract the seasonal series\\r\\n> 1. Subtract it from x, generating the deseasonal series\\r\\n> 1. Extract the trend component from the deseasonal series\\r\\n> 1. Create the baseline = seasonal + trend\\r\\n> 1. Create the residual = x - baseline\\r\\n>\\r\\n> * Either seasonality and, or trend should be enabled. Otherwise, the function is redundant, and just returns baseline = 0 and residual = x.\\r\\n\\r\\n**More about series decomposition**\\r\\n\\r\\nThis method is usually applied to time series of metrics expected to manifest periodic and/or trend behavior. You can use the method to  forecast future metric values and/or detect anomalous values. The implicit assumption of this regression process is that apart from seasonal and trend behavior, the time series is stochastic and randomly distributed. Forecast future metric values from the seasonal and trend components while ignoring the residual part. Detect anomalous values based on outlier detection only on the residual part only. Further details can be found in the [Time Series Decomposition chapter](https://otexts.com/fpp2/decomposition.html).\",'### Weekly seasonality\\r\\n\\r\\nIn the following example, we generate a series with weekly seasonality and without trend, we then add some outliers to it. `series_decompose` finds and automatically detects the seasonality, and generates a baseline that is almost identical to the seasonal component. The outliers we added can be clearly seen in the residuals component.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA21QQW7CMBC884q9IDkpIXYgBbVyX9E7svACFnEc2Yuoqz6+m1ZADvhgzc5oZ1bTIQElHU1/RCA4xOBBAQVo1uWmbCERDkzMfgC/CHsLn85jIuMH0GANIfEsGqm2lVxVUoFs36Qs4AXUCUp2fGxm3mhKTrJi1N3hIATVzbqYbz50uwAll5L/dsnrFQgW5yzWShblBBdQ13DEHiOHg4GE0WGCq6MTXBHPXWbKpNCbzlGepOsxkLRWrYQQgVEjb2iz5eRcbccD8l+CsRZS8AjWDRAu1DmM6Ynb6u6xvqNXOdq8PHNLgzvj1C9dvDfRfeOjWO3NGXedSyTu3NgOv2KRJ2q+se8zSpOi/yvZWdwHP4SEIhcsRpaQ72PL/clE+gWepuS1+gEAAA==\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nlet ts=range t from 1 to 24*7*5 step 1 \\r\\n| extend Timestamp = datetime(2018-03-01 05:00) + 1h * t \\r\\n| extend y = 2*rand() + iff((t/24)%7>=5, 10.0, 15.0) - (((t%24)/10)*((t%24)/10)) // generate a series with weekly seasonality\\r\\n| extend y=iff(t==150 or t==200 or t==780, y-8.0, y) // add some dip outliers\\r\\n| extend y=iff(t==300 or t==400 or t==600, y+8.0, y) // add some spike outliers\\r\\n| summarize Timestamp=make_list(Timestamp, 10000),y=make_list(y, 10000);\\r\\nts \\r\\n| extend series_decompose(y)\\r\\n| render timechart  \\r\\n```\\r\\n\\r\\n![Series decompose 1.](images/samples/series-decompose1.png)\\r\\n\\r\\n### Weekly seasonality with trend\\r\\n\\r\\nIn this example, we add a trend to the series from the previous example. First, we run `series_decompose` with the default parameters. The trend `avg` default value only takes the average and doesn\\'t compute the trend. The generated baseline doesn\\'t contain the trend. When observing the trend in the residuals, it becomes apparent that this example is less accurate than the previous example.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA21RQW7CMBC884q5ICWBECeQBrVKX9E7ssgSLJI4shdRV318N6qAHPDBGs9oZ0fjjhjsa6eHlsA4OdsjB1sUu6RKSnimUYjFL+ibaWjwZXryrPsRNRrNxPKOCpXvU7VNVQ5VvisVY4X8jEQcn5NBJopENjXRpJvTKYo4K3bxsvqsyzXKjVojlztGiki0pWhZruJkhqdJzqpio5BlaGkgJyGg4ckZ8rgZPuNGdOmCUNrbQXeGA2Qr7NBaM7RgJ3FmueopCtd1XipYB0GFuqNqL6FCup+yhXjaqZsG3vaExoywV+4MOf/Cbfvw2D3Qm5psVq/c/GguNPfz177XzvzQs/K61xc6dMZz9OCkMiUnXoeZGu7sx4L97Av+Szo0dLT9aD1FIRZxqoMkn1gez9rxH0eeYfoUAgAA\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nlet ts=range t from 1 to 24*7*5 step 1 \\r\\n| extend Timestamp = datetime(2018-03-01 05:00) + 1h * t \\r\\n| extend y = 2*rand() + iff((t/24)%7>=5, 5.0, 15.0) - (((t%24)/10)*((t%24)/10)) + t/72.0 // generate a series with weekly seasonality and ongoing trend\\r\\n| extend y=iff(t==150 or t==200 or t==780, y-8.0, y) // add some dip outliers\\r\\n| extend y=iff(t==300 or t==400 or t==600, y+8.0, y) // add some spike outliers\\r\\n| summarize Timestamp=make_list(Timestamp, 10000),y=make_list(y, 10000);\\r\\nts \\r\\n| extend series_decompose(y)\\r\\n| render timechart  \\r\\n```\\r\\n\\r\\n![Series decompose 2.](images/samples/series-decompose2.png)\\r\\nNext, we rerun the same example. Since we\\'re expecting a trend in the series, we specify `linefit` in the trend parameter. We can see that the positive trend is detected and the baseline is much closer to the input series. The residuals are close to zero, and only the outliers stand out. We can see all the components on the series in the chart.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA21R0Y6CMBB89yvmxQgIUlBOcxfuK+7dNLJgI1DSrvG43MffkovKg31otrO7M5NpSwz2pdN9Q2DUznbIwBb5LtpHBTzTIMDiF/TN1Ff4Mh151t2AEpVmYnkHucoOidomKoMq3pUKsUZ2RiSMz81RNvJIlKpg6pu6DgJO81243H+WRYxio2JkcodIEEhvKb00U2E0q6dNTvf5RiFN0VBPTkxAw5Mz5HEzfMaN6NKOAmlve90aHiGqsH1jTd+AndiZ+SonK1yWWaFgHaTK1b3aH8TUmBwmb2M4aeqqgrcdoTID7JVbQ86/YNs+OHaP6k1NNOtXbH4wF5rz+WvXaWd+6Bl52ekLHVvjOXhgEpmSE8bjrDve0Y8F+9kX/Id0rOhku8F6mgaTLMaqNT3VhlehzE7pkNgVhdNZO/4DpkIQcyMCAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nlet ts=range t from 1 to 24*7*5 step 1 \\r\\n| extend Timestamp = datetime(2018-03-01 05:00) + 1h * t \\r\\n| extend y = 2*rand() + iff((t/24)%7>=5, 5.0, 15.0) - (((t%24)/10)*((t%24)/10)) + t/72.0 // generate a series with weekly seasonality and ongoing trend\\r\\n| extend y=iff(t==150 or t==200 or t==780, y-8.0, y) // add some dip outliers\\r\\n| extend y=iff(t==300 or t==400 or t==600, y+8.0, y) // add some spike outliers\\r\\n| summarize Timestamp=make_list(Timestamp, 10000),y=make_list(y, 10000);\\r\\nts \\r\\n| extend series_decompose(y, -1, \\'linefit\\')\\r\\n| render timechart  \\r\\n```\\r\\n\\r\\n![Series decompose 3.](images/samples/series-decompose3.png)\\r\\n\\r\\n## See also\\r\\n\\r\\n* Visualize results with an [anomalychart](visualization-anomalychart.md)',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/series-decomposefunction\",\"series-decomposefunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"series_decompose_anomalies\",\"Anomaly Detection is based on series decomposition.\\r\\nFor more information, see [series_decompose()](series-decomposefunction.md).\",\"The function takes an expression containing a series (dynamic numerical array) as input, and extracts anomalous points with scores.\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`series_decompose_anomalies (`*Series*`,` [ *Threshold*`,` *Seasonality*`,` *Trend*`,` *Test_points*`,` *AD_method*`,` *Seasonality_threshold* ]`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n|*Series*| dynamic | &check; | An array of numeric values, typically the resulting output of [make-series](make-seriesoperator.md) or [make_list](makelist-aggfunction.md) operators.|\\r\\n|*Threshold*|real||The anomaly threshold. The default is 1.5, k value, for detecting mild or stronger anomalies.|\\r\\n|*Seasonality*|int|| Controls the seasonal analysis. The possible values are:<br/><br/>- `-1`: Autodetect seasonality using [series_periods_detect](series-periods-detectfunction.md). This is the default value.<br/>- Period: A positive integer specifying the expected period in number of bins. For example, if the series is in `1 - h` bins, a weekly period is 168 bins.<br/>- `0`: No seasonality, so skip extracting this component.|\\r\\n|*Trend*|string|| Controls the trend analysis. The possible values are:<br/><br/>- `avg`: Define trend component as `average(x)`. This is the default.<br/>- `linefit`: Extract trend component using linear regression.<br/>- `none`: No trend, so skip extracting this component.<br/>\\r\\n|*Test_points*|int|| A positive integer specifying the number of points at the end of the series to exclude from the learning, or regression, process. This parameter should be set for forecasting purposes. The default value is 0.|\\r\\n|*AD_method*|string||Controls the anomaly detection method on the residual time series, containing one of the following values:<br/><br/>- `ctukey`: [Tukey\\u2019s fence test](https://en.wikipedia.org/wiki/Outlier#Tukey's_fences) with custom 10th-90th percentile range. This is the default.<br/>- `tukey`: [Tukey\\u2019s fence test](https://en.wikipedia.org/wiki/Outlier#Tukey's_fences) with standard 25th-75th percentile range.<br/><br/>For more information on residual time series, see [series_outliers](series-outliersfunction.md).\\r\\n|*Seasonality_threshold*|real|| The threshold for seasonality score when *Seasonality* is set to autodetect. The default score threshold is 0.6.<br/><br/>For more information, see [series_periods_detect](series-periods-detectfunction.md).|\\r\\n\\r\\n## Returns\\r\\n\\r\\nThe function returns the following respective series:\\r\\n\\r\\n* `ad_flag`: A ternary series containing (+1, -1, 0) marking up/down/no anomaly respectively\\r\\n* `ad_score`: Anomaly score\\r\\n* `baseline`: The predicted value of the series, according to the decomposition\\r\\n\\r\\n## The algorithm\\r\\n\\r\\nThis function follows these steps:\\r\\n\\r\\n1. Calls [series_decompose()](series-decomposefunction.md) with the respective parameters, to create the baseline and residuals series.\\r\\n1. Calculates ad_score series by applying [series_outliers()](series-outliersfunction.md) with the chosen anomaly detection method on the residuals series.\\r\\n1. Calculates the ad_flag series by applying the threshold on the ad_score to mark up/down/no anomaly respectively.\",'### Detect anomalies in weekly seasonality\\r\\n\\r\\nIn the following example, generate a series with weekly seasonality, and then add some outliers to it. `series_decompose_anomalies` autodetects the seasonality and generates a baseline that captures the repetitive pattern. The outliers you added can be clearly spotted in the ad_score component.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA21QQW7CMBC884q9IDkpIXYgBbVyX9E7svACFnEc2Yuoqz6+m1ZADvhgjWe8M6vpkICSjqY/IhAcYvCggAI063JTtpAIByZmP4BfhL2FT+cxkfEDaLCGkPgtGqm2lVxVUoFs36Qs4AXUCUp2fExmnmhKTrJi1N3hIATVzbqYbz50uwAll5LvdsnjFQgW5yzWShblBBdQ13DEHiOHg4GE0WGCq6MTXBHPXWbKpNCbzlGepOsxkLRWrYQQgVEjb2iz5eRcbccF8l+CsRZS8AjWDRAu1DmM6Ynb6u6xvqNXOdq8PHNLgzvj1C9dvDfRfeOjWO3NGXedSyTu3NgOn2KRJ2q+se8zSpOi/yvZWdwHP4SEO9MHz3VgErngb5E/IW/K5vuTifQLuaqurwQCAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nlet ts=range t from 1 to 24*7*5 step 1 \\r\\n| extend Timestamp = datetime(2018-03-01 05:00) + 1h * t \\r\\n| extend y = 2*rand() + iff((t/24)%7>=5, 10.0, 15.0) - (((t%24)/10)*((t%24)/10)) // generate a series with weekly seasonality\\r\\n| extend y=iff(t==150 or t==200 or t==780, y-8.0, y) // add some dip outliers\\r\\n| extend y=iff(t==300 or t==400 or t==600, y+8.0, y) // add some spike outliers\\r\\n| summarize Timestamp=make_list(Timestamp, 10000),y=make_list(y, 10000);\\r\\nts \\r\\n| extend series_decompose_anomalies(y)\\r\\n| render timechart  \\r\\n```\\r\\n\\r\\n![Weekly seasonality showing baseline and outliers.](images/series-decompose-anomaliesfunction/weekly-seasonality-outliers.png)\\r\\n\\r\\n### Detect anomalies in weekly seasonality with trend\\r\\n\\r\\nIn this example, add a trend to the series from the previous example. First, run `series_decompose_anomalies` with the default parameters in which the trend `avg` default value only takes the average and doesn\\'t compute the trend. The generated baseline doesn\\'t contain the trend and is less exact, compared to the previous example. Consequently, some of the outliers you inserted in the data aren\\'t detected because of the higher variance.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA41RwXKjMAy95yvepTNAk2JoaDLtsF+xd8ZbBPEEY8YWbd3Zj1/RblIOPZQDI0t6T09PAzE41F6PPYHReWdRgB3KfXbIKgSmSRKbv6A3prHFb2MpsLYTarSaieWdlKo47tT9ThVQ1aNSKW5RnJAJ4xcyCqLMZFKbLHXTdUnCeblPbw6/6mqL6k5tUcg/xQ6J1G6klhcqzVbxguT8UN4p5Dl6GsmLCGgE8oYCXg2f8Ep0HqKkdHCjHgxHyFS4sXdm7MFe5Kx01YsUruuiUnAeEpXqEh2OIirujou2mC4zddsiOEtozQQ382DIh2/Y7q8c+2v0oBaa2+/YwmTOtOYLs7Xam3f6sry2+kzNYAIn15xYpuRLt3FVjZfs04bD6gSfJjUtPTs7uUCNHp0VgygkMf1JWxMb3TbdoHs55uZ/n50HNtMQk0LW+gn2Y/MLCn+iiEUnDr2YMEvru2bjRkyzXwgWL5aDkTgoSz+ftOd/zGMKx7YCAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nlet ts=range t from 1 to 24*7*5 step 1 \\r\\n| extend Timestamp = datetime(2018-03-01 05:00) + 1h * t \\r\\n| extend y = 2*rand() + iff((t/24)%7>=5, 5.0, 15.0) - (((t%24)/10)*((t%24)/10)) + t/72.0 // generate a series with weekly seasonality and ongoing trend\\r\\n| extend y=iff(t==150 or t==200 or t==780, y-8.0, y) // add some dip outliers\\r\\n| extend y=iff(t==300 or t==400 or t==600, y+8.0, y) // add some spike outliers\\r\\n| summarize Timestamp=make_list(Timestamp, 10000),y=make_list(y, 10000);\\r\\nts \\r\\n| extend series_decompose_anomalies(y)\\r\\n| extend series_decompose_anomalies_y_ad_flag = \\r\\nseries_multiply(10, series_decompose_anomalies_y_ad_flag) // multiply by 10 for visualization purposes\\r\\n| render timechart\\r\\n```\\r\\n\\r\\n![Weekly seasonality outliers with trend.](images/series-decompose-anomaliesfunction/weekly-seasonality-outliers-with-trend.png)\\r\\nNext, run the same example, but since you\\'re expecting a trend in the series, specify `linefit` in the trend parameter. You can see that the baseline is much closer to the input series. All the inserted outliers are detected, and also some false positives. See the next example on tweaking the threshold.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA41RwXKbMBC9+yveJRMgxghiak8z9Ct6Z9SwYI0RYqQlqTL9+C5p7fiQQ3TQrHb13r59OxKDQ+P1NBAYvXcWJdih2meHrEZgmiWx+QP6zTR1+GksBdZ2RoNOM7G8k0qVx1w95qqEqr8rleIB5QmZMH4goyCqTDp1yVo3fZ8kXFT79O7wo6m3qHdqi1LuFDkSqd1JrShVmt3EK5KLQ7VTKAoMNJEXEdAI5A0FvBo+4ZXoPEZJ6eAmPRqOkK5w0+DMNIC9yLnR1axSuGnKWsF5SFSpS3Q4iqiYH1dtMV176q5DcJbQmRlu4dGQD5+wPV459tfom1ppHj5jC7M50y1fWKzV3rzRh+WN1WdqRxM4uebEMiUn3cabarxknzYcblbwz6S2o2dnZxeo1ZOzYhCFd8hOtpCXW9yPZqLe8H36FWgbW921/agHWfDm/z+7jGzmMSaljPoV7LsbFxR+RRkAvbj2YsIiX980GzdhXvxKsPqzLpHEVTHi+aQ9/wVL2dxLygIAAA==\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nlet ts=range t from 1 to 24*7*5 step 1 \\r\\n| extend Timestamp = datetime(2018-03-01 05:00) + 1h * t \\r\\n| extend y = 2*rand() + iff((t/24)%7>=5, 5.0, 15.0) - (((t%24)/10)*((t%24)/10)) + t/72.0 // generate a series with weekly seasonality and ongoing trend\\r\\n| extend y=iff(t==150 or t==200 or t==780, y-8.0, y) // add some dip outliers\\r\\n| extend y=iff(t==300 or t==400 or t==600, y+8.0, y) // add some spike outliers\\r\\n| summarize Timestamp=make_list(Timestamp, 10000),y=make_list(y, 10000);\\r\\nts \\r\\n| extend series_decompose_anomalies(y, 1.5, -1, \\'linefit\\')\\r\\n| extend series_decompose_anomalies_y_ad_flag = \\r\\nseries_multiply(10, series_decompose_anomalies_y_ad_flag) // multiply by 10 for visualization purposes\\r\\n| render timechart  \\r\\n```\\r\\n\\r\\n![Weekly seasonality anomalies with linefit trend.](images/series-decompose-anomaliesfunction/weekly-seasonality-linefit-trend.png)\\r\\n\\r\\n### Tweak the anomaly detection threshold\\r\\n\\r\\nA few noisy points were detected as anomalies in the previous example. Now increase the anomaly detection threshold from a default of 1.5 to 2.5. Use this interpercentile range, so that only stronger anomalies are detected. Now, only the outliers you inserted in the data, will be detected.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA41RTVPjMAy991fowpCEpnFCQzsw2V+x94whSuqpPzK2ApjZH7/yLi05cMAHjyz5PT09aSSg0HlpJwSC0TsDNZCDZl8cihYC4cyJzR/Ad0I7wG9lMJA0M3QwSELid9aI+liK+1LUINpHIXK4g/oEBTN+ISMjmoI7DVmqq3HMMqqafX5z+NW1W2h3Ygs13zmUkHHthmtVLfJiFSckVYdmJ6CqYEKLnkWAhIBeYYA3RSd4QzzryCkZnJVaUQTuCs7qySk7AXnWsxLWJS3UdXUrwHngqBGX6HBkVbE8JnExT03lMEBwBmFQM7iFtEIfvmG7v3Lsr9GDSDR337GFWZ1xzRcWY6RXH/jleWfkGXutAmXXHHsm+OTbuKrGS/ZpQ2G1g/8u9QO+ODO7gL20zrBDGBKk2fEaynoLt1pZHBXd5j+B9rGXQz9qOfGGN5//zKJJzTpmNY/6E+w/Ny4oeI48AIzs2qsKC3/9kKSchXnxiSD5k5aI7Cob8XKSnv4C5QDdI8sCAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nlet ts=range t from 1 to 24*7*5 step 1 \\r\\n| extend Timestamp = datetime(2018-03-01 05:00) + 1h * t \\r\\n| extend y = 2*rand() + iff((t/24)%7>=5, 5.0, 15.0) - (((t%24)/10)*((t%24)/10)) + t/72.0 // generate a series with weekly seasonality and onlgoing trend\\r\\n| extend y=iff(t==150 or t==200 or t==780, y-8.0, y) // add some dip outliers\\r\\n| extend y=iff(t==300 or t==400 or t==600, y+8.0, y) // add some spike outliers\\r\\n| summarize Timestamp=make_list(Timestamp, 10000),y=make_list(y, 10000);\\r\\nts \\r\\n| extend series_decompose_anomalies(y, 2.5, -1, \\'linefit\\')\\r\\n| extend series_decompose_anomalies_y_ad_flag = \\r\\nseries_multiply(10, series_decompose_anomalies_y_ad_flag) // multiply by 10 for visualization purposes\\r\\n| render timechart  \\r\\n```\\r\\n\\r\\n![Weekly series anomalies with higher anomaly threshold.](images/series-decompose-anomaliesfunction/weekly-seasonality-higher-threshold.png)',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/series-decompose-anomaliesfunction\",\"series-decompose-anomaliesfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"series_decompose_forecast\",\"Forecast based on series decomposition.\",\"Takes an expression containing a series (dynamic numerical array) as input, and predicts the values of the last trailing points. For more information, see [series_decompose](series-decomposefunction.md).\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`series_decompose_forecast(`*Series*`,` *Points*`,` [ *Seasonality*`,` *Trend*`,` *Seasonality_threshold* ]`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n|*Series*| dynamic | &check; | An array of numeric values, typically the resulting output of [make-series](make-seriesoperator.md) or [make_list](makelist-aggfunction.md) operators.|\\r\\n|*Points*|int|&check;| Specifies the number of points at the end of the series to predict, or forecast. These points are excluded from the learning, or regression, process.|\\r\\n|*Seasonality*|int|| Controls the seasonal analysis. The possible values are:<br/><br/>- `-1`: Autodetect seasonality using [series_periods_detect](series-periods-detectfunction.md). This is the default value.<br/>- Period: A positive integer specifying the expected period in number of bins. For example, if the series is in `1 - h` bins, a weekly period is 168 bins.<br/>- `0`: No seasonality, so skip extracting this component.|\\r\\n|*Trend*|string|| Controls the trend analysis. The possible values are:<br/><br/>- `avg`: Define trend component as `average(x)`. This is the default.<br/>- `linefit`: Extract trend component using linear regression.<br/>- `none`: No trend, so skip extracting this component.<br/>\\r\\n|*Seasonality_threshold*|real|| The threshold for seasonality score when *Seasonality* is set to autodetect. The default score threshold is 0.6.<br/><br/>For more information, see [series_periods_detect](series-periods-detectfunction.md).|\\r\\n\\r\\n## Returns\\r\\n\\r\\nA dynamic array with the forecasted series.\\r\\n\\r\\n> [!NOTE]\\r\\n>\\r\\n> * The dynamic array of the original input series should include a number of *points* slots to be forecasted. The forecast is typically done by using [make-series](make-seriesoperator.md) and specifying the end time in the range that includes the timeframe to forecast.\\r\\n> * Either seasonality or trend should be enabled, otherwise the function is redundant, and just returns a series filled with zeroes.\",'In the following example, we generate a series of four weeks in an hourly grain, with weekly seasonality and a small upward trend. We then use `make-series` and add another empty week to the series. `series_decompose_forecast` is called with a week (24*7 points), and it automatically detects the seasonality and trend, and generates a forecast of the entire five-week period.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA31S0W6jMBB871fMSyUgIRgKTXQn7ivuPbLCEqwARvZWKdJ9/K1J0uOkti/W2uOdGXu2Jwb72unxTGC0zg7IwRZFmeyTEp5pkoMsw5lGcpoJJa5EFw/borNvrp/RaNZPf0DvTGOD32Ygz3qYUAeEWPZRofJDql5SlUNVP5SKsUHeIRHNf52zdBSJeGmigJu2jSLOijJ+3v+qqy2qndoilzVGikiwZ8GyXMXJqg6dnO2LnfrPtYYnZ8jjarhbXiDGPWlvR90bniGqsOPZmvEMdmJn5asOVriu80rBOkhVqEe1P4ipOT0Eb3McNHXTwNuB0JgJ9o17Q85/wvbywVF+VK8q0Gw+Y/OTudCab9AXSu+vmutBv0fSYcdVAEuc32QgOX+NbpYRqLr7DHQ/g5uTo9tvhp7Hl8okVPehiHrtealhPGiYeI6f2K9DPrbWneQWNRL3jeHY0MkOk/UUQApoNG+XGYwRZB+nIrxwy/6qXYgoJEVusXPqtOO/3SbERNECAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nlet ts=range t from 1 to 24*7*4 step 1 // generate 4 weeks of hourly data\\r\\n| extend Timestamp = datetime(2018-03-01 05:00) + 1h * t \\r\\n| extend y = 2*rand() + iff((t/24)%7>=5, 5.0, 15.0) - (((t%24)/10)*((t%24)/10)) + t/72.0 // generate a series with weekly seasonality and ongoing trend\\r\\n| extend y=iff(t==150 or t==200 or t==780, y-8.0, y) // add some dip outliers\\r\\n| extend y=iff(t==300 or t==400 or t==600, y+8.0, y) // add some spike outliers\\r\\n| make-series y=max(y) on Timestamp from datetime(2018-03-01 05:00) to datetime(2018-03-01 05:00)+24*7*5h step 1h; // create a time series of 5 weeks (last week is empty)\\r\\nts \\r\\n| extend y_forcasted = series_decompose_forecast(y, 24*7)  // forecast a week forward\\r\\n| render timechart \\r\\n```\\r\\n\\r\\n![Series decompose forecast.](images/series-decompose-forecastfunction/series-decompose-forecast.png)',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/series-decompose-forecastfunction\",\"series-decompose-forecastfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"series_divide\",\"Calculates the element-wise division of two numeric series inputs.\",\"## Syntax\\r\\n\\r\\n`series_divide(`*series1*`,` *series2*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *series1, series2* | dynamic | &check; | The numeric arrays over which to calculate the element-wise division. The first array is to be divided by the second. |\\r\\n\\r\\n## Returns\\r\\n\\r\\nDynamic array of calculated element-wise divide operation between the two inputs. Any non-numeric element or non-existing element (arrays of different sizes) yields a `null` element value.\\r\\n\\r\\nNote: the result series is of double type, even if the inputs are integers. Division by zero follows the double division by zero (e.g. 2/0 yields double(+inf)).\",'> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA1XMQQrCMBBG4b2n+JeNzCZ17VlCaEaJYhNmgiShhzdKobj9eDzx651RcZP0gkVJuEALZ9jTBq6F14CG6yjOmA/qg9pOWdKDlwK1A7Nfns6L+DZVatQNQed/74RGqOa4qXUhvmNg92uVJbLuNKn9LswHwOb0BqkAAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nrange x from 1 to 3 step 1\\r\\n| extend y = x * 2\\r\\n| extend z = y * 2\\r\\n| project s1 = pack_array(x,y,z), s2 = pack_array(z, y, x)\\r\\n| extend s1_divide_s2 = series_divide(s1, s2)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|s1\\t        |s2|\\t    s1_divide_s2|\\r\\n|---|---|---|\\r\\n|[1,2,4]\\t|[4,2,1]|\\t[0.25,1.0,4.0]|\\r\\n|[2,4,8]\\t|[8,4,2]|\\t[0.25,1.0,4.0]|\\r\\n|[3,6,12]\\t|[12,6,3]|\\t[0.25,1.0,4.0]|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/series-dividefunction\",\"series-dividefunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"series_dot_product\",\"Calculates the dot product of two numeric series.\",\"The function `series_dot_product()` takes two numeric series as input, and calculates their [dot product](https://en.wikipedia.org/wiki/Dot_product).\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`series_dot_product(`*series1*`,` *series2*`)`\\r\\n\\r\\n## Alternate syntax\\r\\n\\r\\n`series_dot_product(`*series*`, `*numeric*`)`\\r\\n\\r\\n`series_dot_product(`*numeric*`, `*series*`)`\\r\\n\\r\\n> [!NOTE]\\r\\n> The alternate syntax shows that one of the two function arguments can be a numerical scalar.\\r\\n>\\r\\n> This numerical scalar will be broadcasted to a vector whose length equals the length of the corresponding numeric series.\\r\\n>\\r\\n> For example, `series_dot_product([1, 2, 3], 10)` will be treated as `series_dot_product([1, 2, 3], [10, 10, 10])`.\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *series1, series2* | dynamic |  &check; | Input arrays with numeric data, to be element-wise multiplied and then summed into a value of type `real`.\\r\\n\\r\\n## Returns\\r\\n\\r\\nReturns a value of type `real` whose value is the sum over the product of each element of *series1* with the corresponding element of *series2*.\\r\\nIn case both series length isn't equal, the longer series will be truncated to the length of the shorter one.\\r\\nAny non-numeric element of the input series will be ignored.\\r\\n\\r\\n> [!NOTE]\\r\\n> If one or both input arrays are empty, the result will be `null`.\",'> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA1XMQQoCMQyF4b2neMupdNNx7VlKaeOg4rQkEdri4a2DMLoLH3k/h3UhVFw4P+CgGSeIUhn34QWqSmtCw3m8HDHv1Ae1LxXON4oKcQNLiHcfmEObqm22GwuZ/71bNItq9po4n7L6EUrPqH4bCPGV5NcncZ+YeQNovYwctAAAAA==\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nrange x from 1 to 3 step 1 \\r\\n| extend y = x * 2\\r\\n| extend z = y * 2\\r\\n| project s1 = pack_array(x,y,z), s2 = pack_array(z, y, x)\\r\\n| extend s1_dot_product_s2 = series_dot_product(s1, s2)\\r\\n```\\r\\n\\r\\n|s1|s2|s1_dot_product_s2|\\r\\n|---|---|---|\\r\\n|[1,2,4]|[4,2,1]|12|\\r\\n|[2,4,8]|[8,4,2]|48|\\r\\n|[3,6,12]|[12,6,3]|108|\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA03LQQrCMBCF4b2neMtWsklde5YQklGq2ISZEZLi4Z2K0O6Gb97PcbkTGm5cXvDQggtEqdp9+oCa0pLRcbXJGdNOq1H/U+XyoKQQb1hjeobIHPvQXHfr6CDT1u+t+JCLBsvyO2n4vYV4Jjn6IH5Lxy/j/FcsogAAAA==\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nrange x from 1 to 3 step 1 \\r\\n| extend y = x * 2\\r\\n| extend z = y * 2\\r\\n| project s1 = pack_array(x,y,z), s2 = x\\r\\n| extend s1_dot_product_s2 = series_dot_product(s1, s2)\\r\\n```\\r\\n\\r\\n|s1|s2|s1_dot_product_s2|\\r\\n|---|---|---|\\r\\n|[1,2,4]|1|7|\\r\\n|[2,4,8]|2|28|\\r\\n|[3,6,12]|3|63|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/series-dot-productfunction\",\"series-dot-productfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"series_equals\",\"Calculates the element-wise equals (`==`) logic operation of two numeric series inputs.\",\"## Syntax\\r\\n\\r\\n`series_equals (`*series1*`,` *series2*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *series1, series2* | dynamic | &check; | The numeric arrays to be element-wise compared. |\\r\\n\\r\\n## Returns\\r\\n\\r\\nDynamic array of booleans containing the calculated element-wise equal logic operation between the two inputs. Any non-numeric element or non-existing element (arrays of different sizes) yields a `null` element value.\",'> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAysoyswrUSg2VLBVSKnMS8zNTNaINtQx0jGJ1dRRKDZCFjYBChvGanLVKKRWlKTmpQB1xacWlibmFMeDFRanFmWmFkOFNIoNQfo1AT5VmINgAAAA\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint s1 = dynamic([1,2,4]), s2 = dynamic([4,2,1])\\r\\n| extend s1_equals_s2 = series_equals(s1, s2)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|s1|s2|s1_equals_s2|\\r\\n|---|---|---|\\r\\n|[1,2,4]|[4,2,1]|[false,true,false]|\\r\\n\\r\\n## See also\\r\\n\\r\\nFor entire series statistics comparisons, see:\\r\\n\\r\\n* [series_stats()](series-statsfunction.md)\\r\\n* [series_stats_dynamic()](series-stats-dynamicfunction.md)',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/series-equalsfunction\",\"series-equalsfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"series_exp\",\"Calculates the element-wise base-e exponential function (e^x) of the numeric series input.\",\"## Syntax\\r\\n\\r\\n`series_exp(`*series*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *series* | dynamic | &check; | An array of numeric values whose elements are applied as the exponent in the exponential function. |\\r\\n\\r\\n## Returns\\r\\n\\r\\nDynamic array of calculated exponential function. Any non-numeric element yields a `null` element value.\",'> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAysoyswrUShWsFVIqcxLzM1M1og21DHSMY7V5KpRSK0oSc1LUSiOT60oAKooTi3KTAVzNIo1ASk3NNg5AAAA\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint s = dynamic([1,2,3])\\r\\n| extend s_exp = series_exp(s)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|s|s_exp|\\r\\n|---|---|\\r\\n|[1,2,3]|[2.7182818284590451,7.38905609893065,20.085536923187668]|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/series-expfunction\",\"series-expfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"series_fft\",\"Applies the Fast Fourier Transform (FFT) on a series.\",\"The series_fft() function takes a series of complex numbers in the time/spatial domain and transforms it to the frequency domain using the [Fast Fourier Transform](https://en.wikipedia.org/wiki/Fast_Fourier_transform). The transformed complex series represents the magnitude and phase of the frequencies appearing in the original series. Use the complementary function [series_ifft](series-ifft-function.md) to transform from the frequency domain back to the time/spatial domain.\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`series_fft(`*x_real* [`,` *x_imaginary*]`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *x_real* | dynamic | &check; | A numeric array representing the real component of the series to transform.|\\r\\n| *x_imaginary* | dynamic | | A similar array representing the imaginary component of the series. This parameter should only be specified if the input series contains complex numbers.|\\r\\n\\r\\n## Returns\\r\\n\\r\\nThe function returns the complex inverse fft in two series. The first series for the real component and the second one for the imaginary component.\",'* Generate a complex series, where the real and imaginary components are pure sine waves in different frequencies. Use FFT to transform it to the frequency domain:\\r\\n\\r\\n    > [!div class=\"nextstepaction\"]\\r\\n    > <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA1WP3XKDIBCF732KcwmtjZreZJrhWRxaV2WK6ABpsD/v3jXGJt0bOIfvLLuWIoJxdNYfpER6QTOeXi3lmMibsbnpThu3KVXtSiZ6HejPKnelxFcGrgXFw9JW7PmcjJAorg1Zi4THNSxl9pMdM8szOFXtD0dcqijA4c5pC0uui33mtesICa0fB5SIIxyeUCFEmlBl36AUyTWYvdqWESnHQeaYzT/reS8ZD6dh0N58ck816HeqrQlRpAWvPWl7Z87+4ppBd/eukbdfRdvGeg3mWO8LLqEQeGkKNZtiA66PHPccJg/L47312kecTezFHCZropq0IxvkLxVC14SgAQAA\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n    \\r\\n    ```\\r\\n    let sinewave=(x:double, period:double, gain:double=1.0, phase:double=0.0)\\r\\n    {\\r\\n        gain*sin(2*pi()/period*(x+phase))\\r\\n    }\\r\\n    ;\\r\\n    let n=128;      //  signal length\\r\\n    range x from 0 to n-1 step 1 | extend yr=sinewave(x, 8), yi=sinewave(x, 32)\\r\\n    | summarize x=make_list(x), y_real=make_list(yr), y_imag=make_list(yi)\\r\\n    | extend (fft_y_real, fft_y_imag) = series_fft(y_real, y_imag)\\r\\n    | render linechart with(ysplit=panels)\\r\\n    ```\\r\\n\\r\\n    This query returns *fft_y_real* and *fft_y_imag*:  \\r\\n\\r\\n    ![Series fft.](images/series-fft-function/series-fft.png)\\r\\n* Transform a series to the frequency domain, and then apply the inverse transform to get back the original series:\\r\\n\\r\\n    > [!div class=\"nextstepaction\"]\\r\\n    > <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA3VQ23KDIBB99yvOI7QmUfuSaYZvcWiyKi2CA6TRXv69GLWxnXZfYM+NZTUFeGXoIl9JsP4RJ3t+0pSiI6fs6dbXUpmlE/k2i4pGevqGsm3G8Z4g1ijF3RjLinh2inHs5sDYsx73k5nz5DM5JDrOYERe7A+41m6HaK6N1NBk6tAkTpqa0KNytkWGYGGwQQ4fqEOefID6QOaEwYnlM6xPsecpBvUDeih4lPtz20qn3mKmaOULlVr5wPpRXjqSegUO7oqqVtZrVPHbq6yqQjkZU0z3Uc4h4OOnyZcRZItgJlf2iSkWioqVU43Wf/JjROfsMx3DRl7kgL9l80KDtWilGeZgVNZBx8UcG+kCLio06KQh7WOqi2PRb5oNvtMqiEnFvwD5H9DbOQIAAA==\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n    \\r\\n    ```\\r\\n    let sinewave=(x:double, period:double, gain:double=1.0, phase:double=0.0)\\r\\n    {\\r\\n        gain*sin(2*pi()/period*(x+phase))\\r\\n    }\\r\\n    ;\\r\\n    let n=128;      //  signal length\\r\\n    range x from 0 to n-1 step 1 | extend yr=sinewave(x, 8), yi=sinewave(x, 32)\\r\\n    | summarize x=make_list(x), y_real=make_list(yr), y_imag=make_list(yi)\\r\\n    | extend (fft_y_real, fft_y_imag) = series_fft(y_real, y_imag)\\r\\n    | extend (y_real2, y_image2) = series_ifft(fft_y_real, fft_y_imag)\\r\\n    | project-away fft_y_real, fft_y_imag   //  too many series for linechart with panels\\r\\n    | render linechart with(ysplit=panels)\\r\\n    ```\\r\\n\\r\\n    This query returns *y_real2* and *y_imag2, which are the same as *y_real* and *y_imag*:  \\r\\n\\r\\n    ![Series ifft.](images/series-fft-function/series-ifft.png)',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/series-fft-function\",\"series-fft-function.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"series_fill_backward\",\"Performs a backward fill interpolation of missing values in a series.\",\"An expression containing dynamic numerical array is the input. The function replaces all instances of missing_value_placeholder with the nearest value from its right side (other than missing_value_placeholder), and returns the resulting array. The rightmost instances of missing_value_placeholder are preserved.\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`series_fill_backward(`*series*`[,`*missing_value_placeholder*`])`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *series* | dynamic | &check; | An array of numeric values.|\\r\\n| *missing_value_placeholder* | scalar | | Specifies a placeholder for missing values. The default value is `double(`*null*`)`. The value can be of any type that will be converted to actual element types. `double`(*null*), `long`(*null*) and `int`(*null*) have the same meaning.|\\r\\n\\r\\n> [!NOTE]\\r\\n>\\r\\n> * If you create *series* using the [make-series](make-seriesoperator.md) operator, specify *null* as the default value to use interpolation functions like `series_fill_backward()` afterwards. See [explanation](make-seriesoperator.md#list-of-series-interpolation-functions).\\r\\n> * If *missing_value_placeholder* is `double`(*null*), or omitted, then a result may contain *null* values. To fill these *null* values, use other interpolation functions. Only [series_outliers()](series-outliersfunction.md) supports *null* values in input arrays.\\r\\n> * `series_fill_backward()` preserves the original type of the array elements.\\r\\n\\r\\n## Returns\\r\\n\\r\\n*series* with all instances of *missing_value_placeholder* filled backwards.\",'> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA8tJLVFISSxJVLAFUyWJSTmpGolFRVYKKZV5ibmZyZpcCkAQDSahQhrRhoaGOgp5pTk5OgrGZjoKJnAehDQEipkBxYyNkcVjNYFGcMVac4Ht46pRKCjKz0pNLgEbDbRSRwHMSsvMyYlPSkzOLk8sSgE6qzi1KDO1OB5FGORCTQBymgAduwAAAA==\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nlet data = datatable(arr: dynamic)\\r\\n    [\\r\\n    dynamic([111, null, 36, 41, null, null, 16, 61, 33, null, null])   \\r\\n];\\r\\ndata \\r\\n| project\\r\\n    arr, \\r\\n    fill_backward = series_fill_backward(arr)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|`arr`|`fill_backward`|\\r\\n|---|---|\\r\\n|[111,null,36,41,null,null,16,61,33,null,null]|[111,36,36,41,16,16,16,61,33,null,null]|\\r\\n\\r\\n> [!TIP]\\r\\n> Use [series_fill_forward](series-fill-forwardfunction.md) or [series-fill-const](series-fill-constfunction.md) to complete interpolation of the above array.',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/series-fill-backwardfunction\",\"series-fill-backwardfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"series_fill_const\",\"Replaces missing values in a series with a specified constant value.\",\"Takes an expression containing dynamic numerical array as input, replaces all instances of missing_value_placeholder with the specified constant_value and returns the resulting array.\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`series_fill_const(`*series*`,` *constant_value*`,` [ *missing_value_placeholder* ]`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *series* | dynamic | &check; | An array of numeric values.|\\r\\n| *constant_value* | scalar | &check; | The value used to replace the missing values.|\\r\\n| *missing_value_placeholder* | scalar | | Specifies a placeholder for missing values. The default value is `double(`*null*`)`. The value can be of any type that will be converted to actual element types. `double`(*null*), `long`(*null*) and `int`(*null*) have the same meaning.|\\r\\n\\r\\n## Returns\\r\\n\\r\\n*series* with all instances of *missing_value_placeholder* replaced with *constant_value*.\\r\\n\\r\\n> [!NOTE]\\r\\n>\\r\\n> * If you create *series* using the [make-series](make-seriesoperator.md) operator, specify *null* as the default value to use interpolation functions like `series_fill_const()` afterwards. See [explanation](make-seriesoperator.md#list-of-series-interpolation-functions).\\r\\n> * If *missing_value_placeholder* is `double`(*null*), or omitted, then a result may contain *null* values. To fill these *null* values, use other interpolation functions. Only [series_outliers()](series-outliersfunction.md) supports *null* values in input arrays.\\r\\n> * `series_fill_const()` preserves the original type of the array elements.\",'> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/kvc9rf7q4d68qcw5sk2d6f.northeurope/databases/MyDatabase?query=H4sIAAAAAAAAA3WOywrCMBBF94H8wywTiNJppAvFLymlxDRCJLaSxIXgxzsmPkBwFvM4XO6d4DJMJhvYl5HNIThhYtzCdJvN2VvJGVD1dbyg6BFRwXwNQYHuFGzoavWbIJGOiP6QZx8kGXA27DgriZzd4RKXk7O5mlOsgroefQijXeaUkT5LLnqXxi8URdqsG6l+9e1//QrlA3dBmsPvAAAA\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nlet data = datatable(arr: dynamic)\\r\\n    [\\r\\n    dynamic([111, null, 36, 41, 23, null, 16, 61, 33, null, null])   \\r\\n];\\r\\ndata \\r\\n| project\\r\\n    arr, \\r\\n    fill_const1 = series_fill_const(arr, 0.0),\\r\\n    fill_const2 = series_fill_const(arr, -1)  \\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|`arr`|`fill_const1`|`fill_const2`|\\r\\n|---|---|---|\\r\\n|[111,null,36,41,23,null,16,61,33,null,null]|[111,0.0,36,41,23,0.0,16,61,33,0.0,0.0]|[111,-1,36,41,23,-1,16,61,33,-1,-1]|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/series-fill-constfunction\",\"series-fill-constfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"series_fill_forward\",\"Performs a forward fill interpolation of missing values in a series.\",\"An expression containing dynamic numerical array is the input. The function replaces all instances of missing_value_placeholder with the nearest value from its left side other than missing_value_placeholder, and returns the resulting array. The leftmost instances of missing_value_placeholder are preserved.\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`series_fill_forward(`*series*`,` [ *missing_value_placeholder* ]`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *series* | dynamic | &check; | An array of numeric values.|\\r\\n| *missing_value_placeholder* | scalar | | Specifies a placeholder for missing values. The default value is `double(`*null*`)`. The value can be of any type that will be converted to actual element types. `double`(*null*), `long`(*null*) and `int`(*null*) have the same meaning.|\\r\\n\\r\\n## Returns\\r\\n\\r\\n*series* with all instances of *missing_value_placeholder* filled forwards.\\r\\n\\r\\n> [!NOTE]\\r\\n>\\r\\n> * If you create *series* using the [make-series](make-seriesoperator.md) operator, specify *null* as the default value to use interpolation functions like `series_fill_forward()` afterwards. See [explanation](make-seriesoperator.md#list-of-series-interpolation-functions).\\r\\n> * If *missing_value_placeholder* is `double`(*null*), or omitted, then a result may contain *null* values. To fill these *null* values, use other interpolation functions. Only [series_outliers()](series-outliersfunction.md) supports *null* values in input arrays.\\r\\n> * `series_fill_forward()` preserves the original type of the array elements.\",'> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/kvc9rf7q4d68qcw5sk2d6f.northeurope/databases/MyDatabase?query=H4sIAAAAAAAAA8tJLVFISSxJVLAFUyWJSTmpGolFRVYKKZV5ibmZyZq8XApAEA2hoIIa0XmlOTk6ChDS2ExHwcQQxoOQhkAxM6CYsTGyeKwm0AxerlhrXi6wpbxcNQoFRflZqcklEPOBNusoQJhpmTk58Wn5ReWJRSlA1xWnFmWmFscji4LcqQkA68oew8EAAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nlet data = datatable(arr: dynamic)\\r\\n    [\\r\\n    dynamic([null, null, 36, 41, null, null, 16, 61, 33, null, null])   \\r\\n];\\r\\ndata \\r\\n| project\\r\\n    arr, \\r\\n    fill_forward = series_fill_forward(arr)  \\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|`arr`|`fill_forward`|\\r\\n|---|---|\\r\\n|[null,null,36,41,null,null,16,61,33,null,null]|[null,null,36,41,41,41,16,61,33,33,33]|\\r\\n\\r\\nUse [series_fill_backward](series-fill-backwardfunction.md) or [series-fill-const](series-fill-constfunction.md) to complete interpolation of the above array.',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/series-fill-forwardfunction\",\"series-fill-forwardfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"series_fill_linear\",\"Linearly interpolates missing values in a series.\",\"Takes an expression containing dynamic numerical array as input, does linear interpolation for all instances of missing_value_placeholder, and returns the resulting array. If the beginning and end of the array contain missing_value_placeholder, then it will be replaced with the nearest value other than missing_value_placeholder. This feature can be turned off. If the whole array consists of the missing_value_placeholder, the array will be filled with constant_value, or 0 if not specified.  \\r\\n\\r\\n## Syntax\\r\\n\\r\\n`series_fill_linear(`*series*`,` [ *missing_value_placeholder* [`,`*fill_edges* [`,` *constant_value* ]]]`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *series* | dynamic | &check; | An array of numeric values.|\\r\\n| *missing_value_placeholder* | scalar | | Specifies a placeholder for missing values. The default value is `double(`*null*`)`. The value can be of any type that will be converted to actual element types. `double`(*null*), `long`(*null*) and `int`(*null*) have the same meaning.|\\r\\n| *fill_edges* | bool | | Indicates whether *missing_value_placeholder* at the start and end of the array should be replaced with nearest value. `true` by default. If set to `false`, then *missing_value_placeholder* at the start and end of the array will be preserved.|\\r\\n| *constant_value* | scalar | | Relevant only for arrays that entirely consist of *null* values. This parameter specifies a constant value with which to fill the series. Default value is 0. Setting this parameter it to `double(`*null*`)` will preserve the *null* values.|\\r\\n\\r\\n## Returns\\r\\n\\r\\nA series linear interpolation of *series* using the specified parameters. If *series* contains only `int` or `long` elements, then the linear interpolation will return rounded interpolated values rather than exact ones.\\r\\n\\r\\n> [!NOTE]\\r\\n>\\r\\n> * If you create *series* using the [make-series](make-seriesoperator.md) operator, specify *null* as the default value to use interpolation functions like `series_fill_linear()` afterwards. See [explanation](make-seriesoperator.md#list-of-series-interpolation-functions).\\r\\n> * If *missing_value_placeholder* is `double`(*null*), or omitted, then a result may contain *null* values. To fill these *null* values, use other interpolation functions. Only [series_outliers()](series-outliersfunction.md) supports *null* values in input arrays.\\r\\n> * `series_fill_linear()` preserves the original type of the array elements.\",'> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/kvc9rf7q4d68qcw5sk2d6f.northeurope/databases/MyDatabase?query=H4sIAAAAAAAAA5WRzWrDMAzH74G8g44JmHYmXWEbO/QZdiwhaImSeSh2sZ2NwB5+dpq1a2kP0cGy/5b46YPJQ4Me4XVyHt+ZMrT2GZpRY6/qPE0g2P7oZjHb64FZgJRy9SDg+Ci28b75p8xBk76d9KK4/C1zAes17KzFEUwLjRlCAZF0j3emRdY1KXIi5QbjTfWK0QL+sZT2NyHXZ5nDcjs19a38B/TKOaU7+EIeyIHRPKZJ+ZImceZp8gMHaz6pnusJFYq5/5htBl+h7VxYkSOryFWtYq5YaUIbd5WLc3BFTUf3Q8U84Sw2Fubi7UCndLMwuUV2dAGvjXZ+ETwsayU38vEp/wWjK5zoigIAAA==\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nlet data = datatable(arr: dynamic)\\r\\n    [\\r\\n    dynamic([null, 111.0, null, 36.0, 41.0, null, null, 16.0, 61.0, 33.0, null, null]), // Array of double    \\r\\n    dynamic([null, 111, null, 36, 41, null, null, 16, 61, 33, null, null]), // Similar array of int\\r\\n    dynamic([null, null, null, null])                                                   // Array with missing values only\\r\\n];\\r\\ndata\\r\\n| project\\r\\n    arr, \\r\\n    without_args = series_fill_linear(arr),\\r\\n    with_edges = series_fill_linear(arr, double(null), true),\\r\\n    wo_edges = series_fill_linear(arr, double(null), false),\\r\\n    with_const = series_fill_linear(arr, double(null), true, 3.14159)  \\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|`arr`|`without_args`|`with_edges`|`wo_edges`|`with_const`|\\r\\n|---|---|---|---|---|\\r\\n|[null,111.0,null,36.0,41.0,null,null,16.0,61.0,33.0,null,null]|[111.0,111.0,73.5,36.0,41.0,32.667,24.333,16.0,61.0,33.0,33.0,33.0]|[111.0,111.0,73.5,36.0,41.0,32.667,24.333,16.0,61.0,33.0,33.0,33.0]|[null,111.0,73.5,36.0,41.0,32.667,24.333,16.0,61.0,33.0,null,null]|[111.0,111.0,73.5,36.0,41.0,32.667,24.333,16.0,61.0,33.0,33.0,33.0]|\\r\\n|[null,111,null,36,41,null,null,16,61,33,null,null]|[111,111,73,36,41,32,24,16,61,33,33,33]|[111,111,73,36,41,32,24,16,61,33,33,33]|[null,111,73,36,41,32,24,16,61,33,null,null]|[111,111,74,38,  41,32,24,16,61,33,33,33]|\\r\\n|[null,null,null,null]|[0.0,0.0,0.0,0.0]|[0.0,0.0,0.0,0.0]|[0.0,0.0,0.0,0.0]|[3.14159,3.14159,3.14159,3.14159]|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/series-fill-linearfunction\",\"series-fill-linearfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"series_fir\",\"Applies a Finite Impulse Response (FIR) filter on a series.\",\"The function takes an expression containing a dynamic numerical array as input and applies a [Finite Impulse Response](https://en.wikipedia.org/wiki/Finite_impulse_response) filter. By specifying the `filter` coefficients, it can be used for calculating a moving average, smoothing, change-detection, and many more use cases. The function takes the column containing the dynamic array and a static dynamic array of the filter's coefficients as input, and applies the filter on the column. It outputs a new dynamic array column, containing the filtered output.  \\r\\n\\r\\n## Syntax\\r\\n\\r\\n`series_fir(`*series*`,` *filter* [`,` *normalize*[`,` *center*]]`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *series* | dynamic | &check; | An array of numeric values.|\\r\\n| *filter* | dynamic | &check; | An array of numeric values containing the coefficients of the filter.|\\r\\n| *normalize* | bool | | Indicates whether the filter should be normalized. That is, divided by the sum of the coefficients. If filter contains negative values, then *normalize* must be specified as `false`, otherwise result will be `null`. If not specified, then a default value of `true` is assumed, depending on the presence of negative values in the *filter*. If *filter* contains at least one negative value, then *normalize* is assumed to be `false`.|\\r\\n| *center* | bool | | Indicates whether the filter is applied symmetrically on a time window before and after the current point, or on a time window from the current point backwards. By default, center is `false`, which fits the scenario of streaming data so that we can only apply the filter on the current and older points. However, for ad-hoc processing you can set it to `true`, keeping it synchronized with the time series. See examples below. This parameter controls the filter\\u2019s [group delay](https://en.wikipedia.org/wiki/Group_delay_and_phase_delay).|\\r\\n\\r\\n> [!TIP]\\r\\n> Normalization is a convenient way to make sure that the sum of the coefficients is 1. When *normalized* is `true`, the filter doesn't amplify or attenuate the series. For example, the moving average of four bins could be specified by *filter*=[1,1,1,1] and *normalized*=`true`, which is simpler than typing [0.25,0.25.0.25,0.25].\\r\\n\\r\\n## Returns\\r\\n\\r\\nA new dynamic array column containing the filtered output.\",'* Calculate a moving average of five points by setting *filter*=[1,1,1,1,1] and *normalize*=`true` (default). Note the effect of *center*=`false` (default) vs. `true`:\\r\\n\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/kvc9rf7q4d68qcw5sk2d6f.northeurope/databases/MyDatabase?query=H4sIAAAAAAAAA41QwWrDMAy9F/IPutUGF5Z0O+awD+hpu40Q3ERN1NV2kdW0G/v4uU1Wxlih5kk8S+jpIba+QxDYcHCwJq98OCptIO81LKBY9iDhbz0K7hPJZl8QD85Zps8kUTr7jvWOoijR596ewxYbyWaQHrXl/PVlbsbfYHdl++Gto0a9PRi4hTxFkeLxwidSTI3/Uelph5w94EnQt2Phqa9XYSDfPQ9dGZEJY70hVsmMgaubPIlfUekftd/DdYNekLG9W8WA8AHHfLkNJ1fIIOSw6S3LN0kcwQiHAQAA\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nrange t from bin(now(), 1h) - 23h to bin(now(), 1h) step 1h\\r\\n| summarize t=make_list(t)\\r\\n| project\\r\\n    id=\\'TS\\',\\r\\n    val=dynamic([0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 20, 40, 100, 40, 20, 10, 0, 0, 0, 0, 0, 0, 0, 0]),\\r\\n    t\\r\\n| extend\\r\\n    5h_MovingAvg=series_fir(val, dynamic([1, 1, 1, 1, 1])),\\r\\n    5h_MovingAvg_centered=series_fir(val, dynamic([1, 1, 1, 1, 1]), true, true)\\r\\n| render timechart\\r\\n```\\r\\n\\r\\nThis query returns:  \\r\\n*5h_MovingAvg*: Five points moving average filter. The spike is smoothed and its peak shifted by (5-1)/2 = 2h.  \\r\\n*5h_MovingAvg_centered*: Same, but by setting `center=true`, the peak stays in its original location.\\r\\n\\r\\n![Series fir.](images/series-firfunction/series-fir.png)\\r\\n\\r\\n* To calculate the difference between a point and its preceding one, set *filter*=[1,-1].\\r\\n\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/kvc9rf7q4d68qcw5sk2d6f.northeurope/databases/MyDatabase?query=H4sIAAAAAAAAA12O3QrCMAxG7wXfIXd20IHV6z2F3skYdUtddG1HmvmHD+8cMkQ48IWE7xC24YQg4Dh6OFJQId5UpsG0GeRgTAsS//dJsB+H5eIFafDeMj1HReHtBauOkijJPree4xlrAWqK1X630iAarrYbsGgewXqq1WGtYWbzw3amnFR4FwwNNORckZAJU+WI1WTTMOuMhtyU45fOdgm/MQl4rCODkMe6tSxvKkW3gPcAAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nrange t from bin(now(), 1h) - 11h to bin(now(), 1h) step 1h\\r\\n| summarize t=make_list(t)\\r\\n| project id=\\'TS\\', t, value=dynamic([0, 0, 0, 0, 2, 2, 2, 2, 3, 3, 3, 3])\\r\\n| extend diff=series_fir(value, dynamic([1, -1]), false, false)\\r\\n| render timechart\\r\\n```\\r\\n\\r\\n![Series fir 2.](images/series-firfunction/series-fir2.png)',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/series-firfunction\",\"series-firfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"series_fit_2lines\",\"Applies a two segmented linear regression on a series, returning multiple columns.\",\"Takes an expression containing dynamic numerical array as input and applies a [two segmented linear regression](https://en.wikipedia.org/wiki/Segmented_regression) in order to identify and quantify a trend change in a series. The function iterates on the series indexes. In each iteration, the function splits the series to two parts, fits a separate line (using [series_fit_line()](series-fit-linefunction.md)) to each part, and calculates the total r-square. The best split is the one that maximized r-square; the function returns its parameters:\\r\\n\\r\\n|Parameter  |Description  |\\r\\n|---------|---------|\\r\\n|`rsquare`     | [R-square](https://en.wikipedia.org/wiki/Coefficient_of_determination) is standard measure of the fit quality. It's a number in the range [0-1], where 1 - is the best possible fit, and 0 means the data is unordered and don't fit any line.        |\\r\\n|`split_idx`     |   The index of breaking point to two segments (zero-based).      |\\r\\n|`variance`     | Variance of the input data.        |\\r\\n|`rvariance`     | Residual variance, which is the variance between the input data values the approximated ones (by the two line segments).        |\\r\\n|`line_fit`     | Numerical array holding a series of values of the best fitted line. The series length is equal to the length of the input array. It's mainly used for charting.        |\\r\\n|`right_rsquare`     | R-square of the line on the right side of the split, see [series_fit_line()](series-fit-linefunction.md).        |\\r\\n|`right_slope`     | Slope of the right approximated line (of the form y=ax+b).         |\\r\\n|`right_interception`     |  Interception of the approximated left line (b from y=ax+b).       |\\r\\n|`right_variance`    | Variance of the input data on the right side of the split.        |\\r\\n|`right_rvariance`     | Residual variance of the input data on the right side of the split.        |\\r\\n|`left_rsquare`     | R-square of the line on the left side of the split, see [series_fit_line()](series-fit-linefunction.md).        |\\r\\n|`left_slope`    | Slope of the left approximated line (of the form y=ax+b).        |\\r\\n|`left_interception`     |   Interception of the approximated left line (of the form y=ax+b).      |\\r\\n|`left_variance`     | Variance of the input data on the left side of the split.        |\\r\\n|`left_rvariance`     | Residual variance of the input data on the left side of the split.        |\\r\\n\\r\\n> [!NOTE]\\r\\n> This function returns multiple columns an so cannot be used as an argument for another function.\\r\\n\\r\\n## Syntax\\r\\n\\r\\nproject `series_fit_2lines(`*series*`)`\\r\\n\\r\\n* Will return all mentioned above columns with the following names: series_fit_2lines_x_rsquare, series_fit_2lines_x_split_idx etc.\\r\\n\\r\\nproject (rs, si, v)=`series_fit_2lines(`*series*`)`\\r\\n\\r\\n* Will return the following columns: rs (r-square), si (split index), v (variance) and the rest will look like series_fit_2lines_x_rvariance, series_fit_2lines_x_line_fit and etc.\\r\\n\\r\\nextend (rs, si, v)=`series_fit_2lines(`*series*`)`\\r\\n\\r\\n* Will return only: rs (r-square), si (split index) and v (variance).\\r\\n  \\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *series* | dynamic | &check; | An array of numeric values.|\\r\\n\\r\\n> [!TIP]\\r\\n> The most convenient way of using this function is applying it to the results of [make-series](make-seriesoperator.md) operator.\",'> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/kvc9rf7q4d68qcw5sk2d6f.northeurope/databases/MyDatabase?query=H4sIAAAAAAAAA1WQQUsDMRCF74X+h7k1CzE00VY97FUoeOqCF5ESs6M7ss3GbMRd8Mc7YW3X5vAyecz7mEmI5NNyAXyoLlewktNjKKP17yheyQvffYtCgm4KuAKtGwmX7iRTbizr0dsjOfGsJRhlsmwk3KhbCRu15l629Fpdn/Rewl2+t8q8FMvFD+CQ0NcTTlRtF1DCzieMDkOizkvYV59fNrL9ZCNZ77jaz+UjeXygVJQ9RsL+8Ebp0LInxtOQ4g/Ak1ShpbSrh5ll/sHMmWYucCbzegbmeUPsPtAl/j8JzBnPmTmc2yIvhRESHdE1NqZflsNPUXoBAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint\\r\\n    id=\\' \\',\\r\\n    x=range(bin(now(), 1h) - 11h, bin(now(), 1h), 1h),\\r\\n    y=dynamic([1, 2.2, 2.5, 4.7, 5.0, 12, 10.3, 10.3, 9, 8.3, 6.2])\\r\\n| extend\\r\\n    (Slope, Interception, RSquare, Variance, RVariance, LineFit)=series_fit_line(y),\\r\\n    (RSquare2, SplitIdx, Variance2, RVariance2, LineFit2)=series_fit_2lines(y)\\r\\n| project id, x, y, LineFit, LineFit2\\r\\n| render timechart\\r\\n```\\r\\n\\r\\n![Series fit 2 lines.](images/series-fit-2lines/series-fit-2lines.png)',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/series-fit-2linesfunction\",\"series-fit-2linesfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"series_fit_2lines_dynamic\",\"Applies two segments linear regression on a series, returning a dynamic object.\",\"Takes an expression containing dynamic numerical array as input and applies [two segments linear regression](https://en.wikipedia.org/wiki/Segmented_regression) in order to identify and quantify trend changes in a series. The function iterates on the series indexes. In each iteration, it splits the series to two parts, and fits a separate line using [series_fit_line()](series-fit-linefunction.md) or [series_fit_line_dynamic()](series-fit-line-dynamicfunction.md). The function fits the lines to each of the two parts, and calculates the total R-squared value. The best split is the one that maximizes R-squared. The function returns its parameters in dynamic value with the following content:\\r\\n\\r\\n* `rsquare`: [R-squared](https://en.wikipedia.org/wiki/Coefficient_of_determination) is a standard measure of the fit quality. It's a number in the range of [0-1], where 1 is the best possible fit, and 0 means the data is unordered and don't fit any line.\\r\\n* `split_idx`: the index of breaking point to two segments (zero-based).\\r\\n* `variance`: variance of the input data.\\r\\n* `rvariance`: residual variance that is the variance between the input data values the approximated ones (by the two line segments).\\r\\n* `line_fit`: numerical array holding a series of values of the best fitted line. The series length is equal to the length of the input array. It's used for charting.\\r\\n* `right.rsquare`: r-square of the line on the right side of the split, see [series_fit_line()](series-fit-linefunction.md) or [series_fit_line_dynamic()](series-fit-line-dynamicfunction.md).\\r\\n* `right.slope`: slope of the right approximated line (of the form y=ax+b).\\r\\n* `right.interception`: interception of the approximated left line (b from y=ax+b).\\r\\n* `right.variance`: variance of the input data on the right side of the split.\\r\\n* `right.rvariance`: residual variance of the input data on the right side of the split.\\r\\n* `left.rsquare`: r-square of the line on the left side of the split, see [series_fit_line()].(series-fit-linefunction.md) or [series_fit_line_dynamic()](series-fit-line-dynamicfunction.md).\\r\\n* `left.slope`: slope of the left approximated line (of the form y=ax+b).\\r\\n* `left.interception`: interception of the approximated left line (of the form y=ax+b).\\r\\n* `left.variance`: variance of the input data on the left side of the split.\\r\\n* `left.rvariance`: residual variance of the input data on the left side of the split.\\r\\n\\r\\nThis operator is similar to [series_fit_2lines](series-fit-2linesfunction.md). Unlike `series-fit-2lines`, it returns a dynamic bag.\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`series_fit_2lines_dynamic(`*series*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *series* | dynamic | &check; | An array of numeric values.|\\r\\n\\r\\n> [!TIP]\\r\\n> The most convenient way of using this function is applying it to the results of the [make-series](make-seriesoperator.md) operator.\",'> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/kvc9rf7q4d68qcw5sk2d6f.northeurope/databases/MyDatabase?query=H4sIAAAAAAAAA21PywrCMBC8F/oPe7OFNTTxfcjVk38gUmq72hWNkgZswY83sVQsmMMkOzszm31YNi6OwB+u9AQm2BettoU5U3Jkk5j7M0kRZJ3CFKSsEcZsD72v01VnihuXyV4iKKECLBDmYoWwEJnXekpmYjbgBmEd7qVQhzSOXkCtI1P1cTs2tGWnG7JMTX5il189lQ9DulR8at/AkUP9WlTQNP9MYd7D3i9UOr8/QovQ4ZDxfaggs/5TZMHxjcq6sO4NHF3PtzoBAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint\\r\\n    id=\\' \\',\\r\\n    x=range(bin(now(), 1h) - 11h, bin(now(), 1h), 1h),\\r\\n    y=dynamic([1, 2.2, 2.5, 4.7, 5.0, 12, 10.3, 10.3, 9, 8.3, 6.2])\\r\\n| extend\\r\\n    LineFit=series_fit_line_dynamic(y).line_fit,\\r\\n    LineFit2=series_fit_2lines_dynamic(y).line_fit\\r\\n| project id, x, y, LineFit, LineFit2\\r\\n| render timechart\\r\\n```\\r\\n\\r\\n![Series fit 2 lines.](images/series-fit-2lines/series-fit-2lines.png)',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/series-fit-2lines-dynamicfunction\",\"series-fit-2lines-dynamicfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"series_fit_line\",\"Applies linear regression on a series, returning multiple columns.\",'Takes an expression containing dynamic numerical array as input and does [linear regression](https://en.wikipedia.org/wiki/Line_fitting) to find the line that best fits it. This function should be used on time series arrays, fitting the output of make-series operator. The function generates the following columns:\\r\\n\\r\\n* `rsquare`: [r-square](https://en.wikipedia.org/wiki/Coefficient_of_determination) is a standard measure of the fit quality. The value\\'s a number in the range [0-1], where 1 - is the best possible fit, and 0 means the data is unordered and doesn\\'t fit any line.\\r\\n* `slope`: Slope of the approximated line (\"a\" from y=ax+b).\\r\\n* `variance`: Variance of the input data.\\r\\n* `rvariance`: Residual variance that is the variance between the input data values the approximated ones.\\r\\n* `interception`: Interception of the approximated line (\"b\" from y=ax+b).\\r\\n* `line_fit`: Numerical array holding a series of values of the best fitted line. The series length is equal to the length of the input array. The value\\'s used for charting.\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`series_fit_line(`*series*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *series* | dynamic | &check; | An array of numeric values.|\\r\\n\\r\\n> [!TIP]\\r\\n> The most convenient way of using this function is to apply it to the results of [make-series](make-seriesoperator.md) operator.','> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/kvc9rf7q4d68qcw5sk2d6f.northeurope/databases/MyDatabase?query=H4sIAAAAAAAAA1VMywrCQAy8C/2H3NzCCm7Fx6VXQfDUghcRWdtoAzWt6YoW/HijPYiBSWYmybRCHKIRaFGZjmFsB/FMxfMFzYnYcPMwsQVXxTAB5yoL/+7Qhr8+LXv2VyrMPrEwt7CwsNIDp1DllgrVifJEV7PpB4c4Gr0AnwG5BJPlt7sXtJDXTatj54U8F8qyH91wQCmwDdSwhS0xrinEaYdC2B3PFI61eqb/JovmokCgKxaVl/AGWOACk/UAAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint\\r\\n    id=\\' \\',\\r\\n    x=range(bin(now(), 1h) - 11h, bin(now(), 1h), 1h),\\r\\n    y=dynamic([2, 5, 6, 8, 11, 15, 17, 18, 25, 26, 30, 30])\\r\\n| extend (RSquare, Slope, Variance, RVariance, Interception, LineFit)=series_fit_line(y)\\r\\n| render timechart\\r\\n```\\r\\n\\r\\n![Series fit line.](images/series-fit-line/series-fit-line.png)\\r\\n| RSquare | Slope | Variance | RVariance | Interception | LineFit                                                                                     |\\r\\n|---------|-------|----------|-----------|--------------|---------------------------------------------------------------------------------------------|\\r\\n| 0.982   | 2.730 | 98.628   | 1.686     | -1.666       | 1.064, 3.7945, 6.526, 9.256, 11.987, 14.718, 17.449, 20.180, 22.910, 25.641, 28.371, 31.102 |',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/series-fit-linefunction\",\"series-fit-linefunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"series_fit_line_dynamic\",\"Applies linear regression on a series, returning dynamic object.\",\"Takes an expression containing dynamic numerical array as input, and does [linear regression](https://en.wikipedia.org/wiki/Line_fitting) to find the line that best fits it. This function should be used on time series arrays, fitting the output of make-series operator. It generates a dynamic value with the following content:\\r\\n\\r\\n* `rsquare`: [r-square](https://en.wikipedia.org/wiki/Coefficient_of_determination) is a standard measure of the fit quality. It's a number in the range [0-1], where 1 is the best possible fit, and 0 means the data is unordered and doesn't fit any line\\r\\n* `slope`: Slope of the approximated line (the *a*-value from *y=ax+b*)\\r\\n* `variance`: Variance of the input data\\r\\n* `rvariance`: Residual variance that is the variance between the input data values and the approximated ones.\\r\\n* `interception`: Interception of the approximated line (the *b*-value from *y=ax+b*)\\r\\n* `line_fit`: Numerical array containing a series of values of the best fit line. The series length is equal to the length of the input array. It's used mainly for charting.\\r\\n\\r\\nThis operator is similar to [series_fit_line](series-fit-linefunction.md), but unlike `series-fit-line` it returns a dynamic bag.\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`series_fit_line_dynamic(`*series*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *series* | dynamic | &check; | An array of numeric values.|\\r\\n\\r\\n> [!TIP]\\r\\n> The most convenient way of using this function is by applying it to the results of [make-series](make-seriesoperator.md) operator.\",'> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/kvc9rf7q4d68qcw5sk2d6f.northeurope/databases/MyDatabase?query=H4sIAAAAAAAAA11OTWvDMAy9F/ofdGsCXqkztu7ia2HQUwu7jBG8RG0ErZIp3tbAfvyU2IN2Bpn3Jft1QhzmM9BDtVvAwkRyceL5iNk7ccbtd5YbsE0Od2BtY+BWjVfcG1w9sD9Tlb0WBh4MPBp40oDVUWbXOsoLxYVa96tx3vL57AfwEpBrOFBwPQphXyosT8RY/r05XAXjf7v9x6cXdBpdSj/h1GR/aruo9yNK6osX8lxF4yuR5O1uTPnnPnNAqbAL1PIUoCshZbZadqP9R3sqrmBsLNoXBQKdsWq8hF+uDo0sdgEAAA==\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint\\r\\n    id=\\' \\',\\r\\n    x=range(bin(now(), 1h) - 11h, bin(now(), 1h), 1h),\\r\\n    y=dynamic([2, 5, 6, 8, 11, 15, 17, 18, 25, 26, 30, 30])\\r\\n| extend fit=series_fit_line_dynamic(y)\\r\\n| extend\\r\\n    RSquare=fit.rsquare,\\r\\n    Slope=fit.slope,\\r\\n    Variance=fit.variance,\\r\\n    RVariance=fit.rvariance,\\r\\n    Interception=fit.interception,\\r\\n    LineFit=fit.line_fit\\r\\n| render timechart\\r\\n```\\r\\n\\r\\n![Series fit line.](images/series-fit-line/series-fit-line.png)\\r\\n| RSquare | Slope | Variance | RVariance | Interception | LineFit                                                                                     |\\r\\n|---------|-------|----------|-----------|--------------|---------------------------------------------------------------------------------------------|\\r\\n| 0.982   | 2.730 | 98.628   | 1.686     | -1.666       | 1.064, 3.7945, 6.526, 9.256, 11.987, 14.718, 17.449, 20.180, 22.910, 25.641, 28.371, 31.102 |',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/series-fit-line-dynamicfunction\",\"series-fit-line-dynamicfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"series_fit_poly\",\"Applies a polynomial regression from an independent variable (x_series) to a dependent variable (y_series). This function takes a table containing multiple series (dynamic numerical arrays) and generates the best fit high-order polynomial for each series using [polynomial regression](https://en.wikipedia.org/wiki/Polynomial_regression).\",\"> [!TIP]\\r\\n>\\r\\n> * For linear regression of an evenly spaced series, as created by [make-series operator](make-seriesoperator.md), use the simpler function [series_fit_line()](series-fit-linefunction.md). See [Example 2](#example-2).\\r\\n> * If *x_series* is supplied, and the regression is done for a high degree, consider normalizing to the [0-1] range. See [Example 3](#example-3).\\r\\n> * If *x_series* is of datetime type, it must be converted to double and normalized. See [Example 3](#example-3).\\r\\n> * For reference implementation of polynomial regression using inline Python, see [series_fit_poly_fl()](../functions-library/series-fit-poly-fl.md).\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`T | extend  series_fit_poly(`*y_series* [`,` *x_series*`,` *degree* ]`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *y_series* | dynamic | &check; | An array of numeric values containing the [dependent variable](https://en.wikipedia.org/wiki/Dependent_and_independent_variables). |\\r\\n| *x_series* | dynamic | | An array of numeric values containing the [independent variable](https://en.wikipedia.org/wiki/Dependent_and_independent_variables). Required only for [unevenly spaced series](https://en.wikipedia.org/wiki/Unevenly_spaced_time_series). If not specified, it's set to a default value of [1, 2, ..., length(*y_series*)].|\\r\\n| *degree* | | | The required order of the polynomial to fit. For example, 1 for linear regression, 2 for quadratic regression, and so on. Defaults to 1, which indicates linear regression.|\\r\\n\\r\\n## Returns\\r\\n\\r\\nThe `series_fit_poly()` function returns the following columns:\\r\\n\\r\\n* `rsquare`: [r-square](https://en.wikipedia.org/wiki/Coefficient_of_determination) is a standard measure of the fit quality. The value's a number in the range [0-1], where 1 - is the best possible fit, and 0 means the data is unordered and doesn't fit any line.\\r\\n* `coefficients`:  Numerical array holding the coefficients of the best fitted polynomial with the given degree, ordered from the highest power coefficient to the lowest.\\r\\n* `variance`: Variance of the dependent variable (y_series).\\r\\n* `rvariance`: Residual variance that is the variance between the input data values the approximated ones.\\r\\n* `poly_fit`: Numerical array holding a series of values of the best fitted polynomial. The series length is equal to the length of the dependent variable (y_series). The value's used for charting.\",'### Example 1\\r\\n\\r\\nA fifth order polynomial with noise on x & y axes:\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA21QQW7DIBC89xVzhBZHdiJXvfgtFrKXlsaABVSBKI/vNo3ituqFZWZnZwei9q+EAhODQ4ccsG9bpEwruocL1hjeacosGBC1n4XEI3o02O8O3KaSyc+o3F3DSRSFXnLzhUU3fJB4QtcyUfjy/HumMiVutg3aXf/lzoXPysr04ZyO9sz5BqePNC42ZVGkQv2Bq9xME0VLaTQ2j2tYqqgK10zbS5pIXjuCqcMf8Vi/C2OFKZAx/yiuvJ0s+ZzY1IR4hLh/EgdT7CzvVKNPum48T/D6mSIW62l60zF/AmoATHWAAQAA\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nrange x from 1 to 200 step 1\\r\\n| project x = rand()*5 - 2.3\\r\\n| extend y = pow(x, 5)-8*pow(x, 3)+10*x+6\\r\\n| extend y = y + (rand() - 0.5)*0.5*y\\r\\n| summarize x=make_list(x), y=make_list(y)\\r\\n| extend series_fit_poly(y, x, 5)\\r\\n| project-rename fy=series_fit_poly_y_poly_fit, coeff=series_fit_poly_y_coefficients\\r\\n|fork (project x, y, fy) (project-away x, y, fy)\\r\\n| render linechart \\r\\n```\\r\\n\\r\\n![Graph showing fifth order polynomial fit to a series with noise.](images/series-fit-poly-function/fifth-order-noise-1.png)\\r\\n![Coefficients of fifth order polynomial fit to  a series with noise.](images/series-fit-poly-function/fifth-order-noise-table-1.png)\\r\\n\\r\\n### Example 2\\r\\n\\r\\nVerify that `series_fit_poly` with degree=1 matches `series_fit_line`:\\r\\n\\r\\n```\\r\\ndemo_series1\\r\\n| extend series_fit_line(y)\\r\\n| extend series_fit_poly(y)\\r\\n| project-rename y_line = series_fit_line_y_line_fit, y_poly = series_fit_poly_y_poly_fit\\r\\n| fork (project x, y, y_line, y_poly) (project-away id, x, y, y_line, y_poly) \\r\\n| render linechart with(xcolumn=x, ycolumns=y, y_line, y_poly)\\r\\n```\\r\\n\\r\\n![Graph showing linear regression.](images/series-fit-poly-function/fit-poly-line.png)\\r\\n![Coefficients of linear regression.](images/series-fit-poly-function/fit-poly-line-table.png)\\r\\n\\r\\n### Example 3\\r\\n\\r\\nIrregular (unevenly spaced) time series:\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA6WSy7LTMAyG9+cp/mU805B0wXCZKY/ABnYMk3FiJfXBl47sFJfh4ZHTHuhQdiRZyIp+6ZOsrnvqOqC0utgEv6aMkRAie+3sDzLIEflIYB0Wwpe+3X+FnUFWnAxDCxNBlExOZ3smd8FoFzQfDnitEFk+u9igHcothwRLxKutbIo1Wak+jWw9YcOw+V8kOmGK4UycbAyI8yZIWftThXQxLFgoEOtMOK5SKax+lGg0V6NK9n2PoENsE02in74lzBw99p287970SrA2so+3utJUDO9RhgqCA5qCFt6GpijVNV4XMf54qtoy07I6zUNOTz9BJVMwSMSW0iC4OTW3gzam+Sw9fKo97NArhf99KrpUZD3lytQJ4MukrqOVIZq4jo7u2Ir0dUMy9mwNvQCmddxS3VPeNzIMUkM9+HRpH6M2tt+3eUckd3ddq209HiY22zycorvUS9yh7PBWScyJ4zNNuWUKWhLN8vPwl2AQ39UQj0gk1MgS1MLTUXPGd9nh5jJFt/qQDlv6mkf9AtdLeagTAwAA\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\n//\\r\\n//  x-axis must be normalized to the range [0-1] if either degree is relatively big (>= 5) or original x range is big.\\r\\n//  so if x is a time axis it must be normalized as conversion of timestamp to long generate huge numbers (number of 100 nano-sec ticks from 1/1/1970)\\r\\n//\\r\\n//  Normalization: x_norm = (x - min(x))/(max(x) - min(x))\\r\\n//\\r\\nirregular_ts\\r\\n| extend series_stats(series_add(TimeStamp, 0))                                                                 //  extract min/max of time axis as doubles\\r\\n| extend x = series_divide(series_subtract(TimeStamp, series_stats__min), series_stats__max-series_stats__min)  // normalize time axis to [0-1] range\\r\\n| extend series_fit_poly(num, x, 8)\\r\\n| project-rename fnum=series_fit_poly_num_poly_fit\\r\\n| render timechart with(ycolumns=num, fnum)\\r\\n```\\r\\n\\r\\n![Graph showing eighth order polynomial fit to an irregular time series.](images/series-fit-poly-function/irregular-time-series-1.png)',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/series-fit-poly-function\",\"series-fit-poly-function.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"series_floor\",\"Calculates the element-wise floor function of the numeric series input.\",\"## Syntax\\r\\n\\r\\n`series_floor(`*series*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *series* | dynamic | &check; | An array of numeric values on which the floor function is applied.|\\r\\n\\r\\n## Returns\\r\\n\\r\\nDynamic array of the calculated floor function. Any non-numeric element yields a `null` element value.\",'> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAysoyswrUShWsFVIqcxLzM1M1ojWNdQz1THUMdIzjdXkqlFIrShJzUtRKI5Py8nPLwIqLE4tykyFcjWKNQFIrQOdQgAAAA==\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint s = dynamic([-1.5,1,2.5])\\r\\n| extend s_floor = series_floor(s)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|s|s_floor|\\r\\n|---|---|\\r\\n|[-1.5,1,2.5]|[-2.0,1.0,2.0]|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/series-floor-function\",\"series-floor-function.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"series_greater\",\"Calculates the element-wise greater (`>`) logic operation of two numeric series inputs.\",\"## Syntax\\r\\n\\r\\n`series_greater(`*series1*`,` *series2*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *series1*, *series2* | dynamic | &check; | The arrays of numeric values to be element-wise compared.|\\r\\n\\r\\n## Returns\\r\\n\\r\\nDynamic array of booleans containing the calculated element-wise greater logic operation between the two inputs. Any non-numeric element or non-existing element (arrays of different sizes) yields a `null` element value.\",'> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAysoyswrUSg2VLBVSKnMS8zNTNaINtQx0jGJ1dRRKDZCFjYBChvGanLVKKRWlKTmpQB1xacXpSaWpBbFg1UWpxZlphbDxDSKDUEmaAIAcWLMOWIAAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint s1 = dynamic([1,2,4]), s2 = dynamic([4,2,1])\\r\\n| extend s1_greater_s2 = series_greater(s1, s2)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|s1|s2|s1_greater_s2|\\r\\n|---|---|---|\\r\\n|[1,2,4]|[4,2,1]|[false,false,true]|\\r\\n\\r\\n## See also\\r\\n\\r\\nFor entire series statistics comparisons, see:\\r\\n\\r\\n* [series_stats()](series-statsfunction.md)\\r\\n* [series_stats_dynamic()](series-stats-dynamicfunction.md)',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/series-greaterfunction\",\"series-greaterfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"series_greater_equals\",\"Calculates the element-wise greater or equals (`>=`) logic operation of two numeric series inputs.\",\"## Syntax\\r\\n\\r\\n`series_greater_equals(`*series1*`,` *series2*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *series1*, *series2* | dynamic | &check; | The arrays of numeric values to be element-wise compared.|\\r\\n\\r\\n## Returns\\r\\n\\r\\nDynamic array of booleans containing the calculated element-wise greater or equal logic operation between the two inputs. Any non-numeric element or non-existing element (arrays of different sizes) yields a `null` element value.\",'> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAysoyswrUSg2VLBVSKnMS8zNTNaINtQx0jGJ1dRRKDZCFjYBChvGanLVKKRWlKTmpQB1xacXpSaWpBbFpxaWJuYUx4M1FKcWZaYWo0lpFBuCzNMEAIApX6lwAAAA\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint s1 = dynamic([1,2,4]), s2 = dynamic([4,2,1])\\r\\n| extend s1_greater_equals_s2 = series_greater_equals(s1, s2)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|s1|s2|s1_greater_equals_s2|\\r\\n|---|---|---|\\r\\n|[1,2,4]|[4,2,1]|[false,true,true]|\\r\\n\\r\\n## See also\\r\\n\\r\\nFor entire series statistics comparisons, see:\\r\\n\\r\\n* [series_stats()](series-statsfunction.md)\\r\\n* [series_stats_dynamic()](series-stats-dynamicfunction.md)',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/series-greater-equalsfunction\",\"series-greater-equalsfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"series_ifft\",\"Applies the Inverse Fast Fourier Transform (IFFT) on a series.\",\"The series_ifft() function takes a series of complex numbers in the frequency domain and transforms it back to the time/spatial domain using the [Fast Fourier Transform](https://en.wikipedia.org/wiki/Fast_Fourier_transform). This function is the complementary function of [series_fft](series-fft-function.md). Commonly the original series is transformed to the frequency domain for spectral processing and then back to the time/spatial domain.\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`series_ifft(`*fft_real* [`,` *fft_imaginary*]`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *fft_real* | dynamic | &check; | An array of numeric values representing the real component of the series to transform.|\\r\\n| *fft_imaginary* | dynamic | | An array of numeric values representing the imaginary component of the series. This parameter should be specified only if the input series contains complex numbers.|\\r\\n\\r\\n## Returns\\r\\n\\r\\nThe function returns the complex inverse fft in two series. The first series for the real component and the second one for the imaginary component.\",\"See [series_fft](series-fft-function.md#example)\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/series-ifft-function\",\"series-ifft-function.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"series_iir\",\"Applies an Infinite Impulse Response filter on a series.\",\"The function takes an expression containing dynamic numerical array as input, and applies an [Infinite Impulse Response](https://en.wikipedia.org/wiki/Infinite_impulse_response) filter. By specifying the filter coefficients, you can use the function to:\\r\\n\\r\\n* calculate the cumulative sum of the series\\r\\n* apply smoothing operations\\r\\n* apply various [high-pass](https://en.wikipedia.org/wiki/High-pass_filter), [band-pass](https://en.wikipedia.org/wiki/Band-pass_filter), and [low-pass](https://en.wikipedia.org/wiki/Low-pass_filter) filters\\r\\n\\r\\nThe function takes as input the column containing the dynamic array and two static dynamic arrays of the filter's *denominators* and *numerators* coefficients, and applies the filter on the column. It outputs a new dynamic array column, containing the filtered output.  \\r\\n\\r\\n## Syntax\\r\\n\\r\\n`series_iir(`*series*`,` *numerators* `,` *denominators*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *series* | dynamic | &check; | An array of numeric values, typically the resulting output of [make-series](make-seriesoperator.md) or [make_list](makelist-aggfunction.md) operators.|\\r\\n| *numerators* | dynamic | &check; | An array of numeric values, containing the numerator coefficients of the filter.|\\r\\n| *denominators* | dynamic | &check; | An array of numeric values, containing the denominator coefficients of the filter.|\\r\\n\\r\\n> [!IMPORTANT]\\r\\n> The first element of `a` (that is, `a[0]`) mustn't be zero, to avoid division by 0. See the [following formula](#the-filters-recursive-formula).\\r\\n\\r\\n## The filter's recursive formula\\r\\n\\r\\n* Consider an input array X, and coefficients arrays a and b of lengths n_a and n_b respectively. The transfer function of the filter that will generate the output array Y, is defined by:\\r\\n\\r\\n<div align=\\\"center\\\">\\r\\nY<sub>i<\\/sub> = a<sub>0<\\/sub><sup>-1<\\/sup>(b<sub>0<\\/sub>X<sub>i<\\/sub>\\r\\n + b<sub>1<\\/sub>X<sub>i-1<\\/sub> + ... + b<sub>n<sub>b<\\/sub>-1<\\/sub>X<sub>i-n<sub>b<\\/sub>-1<\\/sub>\\r\\n - a<sub>1<\\/sub>Y<sub>i-1<\\/sub>-a<sub>2<\\/sub>Y<sub>i-2<\\/sub> - ... - a<sub>n<sub>a<\\/sub>-1<\\/sub>Y<sub>i-n<sub>a<\\/sub>-1<\\/sub>)\\r\\n<\\/div>\",'Calculate a cumulative sum. \\r\\nUse the iir filter with coefficients *denominators*=[1,-1] and *numerators*=[1]:  \\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA8tJLVGoULBVKErMS0/VMNQz0FEwBGFNa66Cosw8oKRthY5CJVBFcWpRZmpxfGZmkQZQJKUyLzE3M1kj2jBWE5mnowsU0OSqUcgt002tKEjMS1EA6QcAEyBol2cAAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nlet x = range(1.0, 10, 1);\\r\\nprint x=x, y = series_iir(x, dynamic([1]), dynamic([1,-1]))\\r\\n| mv-expand x, y\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n| x | y |\\r\\n|:--|:--|\\r\\n|1.0|1.0|\\r\\n|2.0|3.0|\\r\\n|3.0|6.0|\\r\\n|4.0|10.0|\\r\\n\\r\\nHere\\'s how to wrap it in a function:\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA02OzQrCMBCE73mKOSaQglVPljxJKSE0iwbSKNsoCeq7GwR/5jY73ywTKeNGcz6zXa+LkeUAX5NbwqxwF2iKjajGMbtqI6VjPsmi0KEf3nFrkotyJQ602hBYFv15Icd+Uv9Oo2sXNdZJiecgLhxShjdfYKPRmK3GTmPfmAeoZEoe3pvfSunVC0CCVEu3AAAA\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nlet vector_sum=(x: dynamic) {\\r\\n    let y=array_length(x) - 1;\\r\\n    todouble(series_iir(x, dynamic([1]), dynamic([1, -1]))[y])\\r\\n};\\r\\nprint d=dynamic([0, 1, 2, 3, 4])\\r\\n| extend dd=vector_sum(d)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|d            |dd  |\\r\\n|-------------|----|\\r\\n|`[0,1,2,3,4]`|`10`|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/series-iirfunction\",\"series-iirfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"series_less\",\"Calculates the element-wise less (`<`) logic operation of two numeric series inputs.\",\"## Syntax\\r\\n\\r\\n`series_less(`*series1*`,` *series2*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *series1*, *series2* | dynamic | &check; | The arrays of numeric values to be element-wise compared.|\\r\\n\\r\\n## Returns\\r\\n\\r\\nDynamic array of booleans containing the calculated element-wise less logic operation between the two inputs. Any non-numeric element or non-existing element (arrays of different sizes) yields a `null` element value.\",'> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAysoyswrUSg2VLBVSKnMS8zNTNaINtQx0jGJ1dRRKDZCFjYBChvGanLVKKRWlKTmpQB1xeekFhfHg5UVpxZlphaDBTSKDUF6NQGAeKRCXAAAAA==\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint s1 = dynamic([1,2,4]), s2 = dynamic([4,2,1])\\r\\n| extend s1_less_s2 = series_less(s1, s2)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|s1|s2|s1_less_s2|\\r\\n|---|---|---|\\r\\n|[1,2,4]|[4,2,1]|[true,false,false]|\\r\\n\\r\\n## See also\\r\\n\\r\\nFor entire series statistics comparisons, see:\\r\\n\\r\\n* [series_stats()](series-statsfunction.md)\\r\\n* [series_stats_dynamic()](series-stats-dynamicfunction.md)',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/series-lessfunction\",\"series-lessfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"series_less_equals\",\"Calculates the element-wise less or equal (`<=`) logic operation of two numeric series inputs.\",\"## Syntax\\r\\n\\r\\n`series_less_equals(`*series1*`,` *series2*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *series1*, *series2* | dynamic | &check; | The arrays of numeric values to be element-wise compared.|\\r\\n\\r\\n## Returns\\r\\n\\r\\nDynamic array of booleans containing the calculated element-wise less or equal logic operation between the two inputs. Any non-numeric element or non-existing element (arrays of different sizes) yields a `null` element value.\",'> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAysoyswrUSg2VLBVSKnMS8zNTNaINtQx0jGJ1dRRKDZCFjYBChvGanLVKKRWlKTmpQB1xeekFhfHpxaWJuYUx4NVF6cWZaYWI4trFBuCTNIEAMTrdUpqAAAA\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint s1 = dynamic([1,2,4]), s2 = dynamic([4,2,1])\\r\\n| extend s1_less_equals_s2 = series_less_equals(s1, s2)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|s1|s2|s1_less_equals_s2|\\r\\n|---|---|---|\\r\\n|[1,2,4]|[4,2,1]|[true,true,false]|\\r\\n\\r\\n## See also\\r\\n\\r\\nFor entire series statistics comparisons, see:\\r\\n\\r\\n* [series_stats()](series-statsfunction.md)\\r\\n* [series_stats_dynamic()](series-stats-dynamicfunction.md)',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/series-less-equalsfunction\",\"series-less-equalsfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"series_log\",\"Calculates the element-wise natural logarithm function (base-e) of the numeric series input.\",\"## Syntax\\r\\n\\r\\n`series_log(`*series*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *series* | dynamic | &check; | An array of numeric values on which the natural logarithm function is applied.|\\r\\n\\r\\n## Returns\\r\\n\\r\\nDynamic array of the calculated natural logarithm function. Any non-numeric element yields a `null` element value.\",'> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAysoyswrUShWsFVIqcxLzM1M1og21DHSMY7V5KpRSK0oSc1LUSiOz8lPB6ooTi3KTAVzNIo1AcJsOMY5AAAA\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint s = dynamic([1,2,3])\\r\\n| extend s_log = series_log(s)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|s|s_log|\\r\\n|---|---|\\r\\n|[1,2,3]|[0.0,0.69314718055994529,1.0986122886681098]|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/series-log-function\",\"series-log-function.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"series_multiply\",\"Calculates the element-wise multiplication of two numeric series inputs.\",\"## Syntax\\r\\n\\r\\n`series_multiply(`*series1*`,` *series2*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *series1*, *series2* | dynamic | &check; | The arrays of numeric values to be element-wise multiplied.|\\r\\n\\r\\n## Returns\\r\\n\\r\\nDynamic array of calculated element-wise multiplication operation between the two inputs. Any non-numeric element or non-existing element (arrays of different sizes) yields a `null` element value.\",'> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA1XMQQrCMBBG4b2n+JeNZJO69iwh1FGqbRNmImRCD28sxeL24/E4LA9CwZ3jDIcccYFkSnCnFVQyLTcorq04oz+oNtKdEscnDRniGqYwvHxgDtoVq7YaC+n/vVqoRTHHTZyf31Me06R+q4V4JPlhJ+67MR/3UM9mrQAAAA==\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nrange x from 1 to 3 step 1\\r\\n| extend y = x * 2\\r\\n| extend z = y * 2\\r\\n| project s1 = pack_array(x,y,z), s2 = pack_array(z, y, x)\\r\\n| extend s1_multiply_s2 = series_multiply(s1, s2)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|s1 |s2 |s1_multiply_s2|\\r\\n|--|--|--|\\r\\n|[1,2,4] |[4,2,1]| [4,4,4]|\\r\\n|[2,4,8] |[8,4,2]| [16,16,16]|\\r\\n|[3,6,12] |[12,6,3]| [36,36,36]|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/series-multiplyfunction\",\"series-multiplyfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"series_not_equals\",\"Calculates the element-wise not equals (`!=`) logic operation of two numeric series inputs.\",\"## Syntax\\r\\n\\r\\n`series_not_equals(`*series1*`,` *series2*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *series1*, *series2* | dynamic | &check; | The arrays of numeric values to be element-wise compared.|\\r\\n\\r\\n## Returns\\r\\n\\r\\nDynamic array of booleans containing the calculated element-wise not equal logic operation between the two inputs. Any non-numeric element or non-existing element (arrays of different sizes) yields a `null` element value.\",'> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAysoyswrUSg2VLBVSKnMS8zNTNaINtQx0jGJ1dRRKDZCFjYBChvGanLVKKRWlKTmpQB1xefll8SnFpYm5hTHgxUXpxZlphYjCWsUG4LM0QQA1OZCDmgAAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint s1 = dynamic([1,2,4]), s2 = dynamic([4,2,1])\\r\\n| extend s1_not_equals_s2 = series_not_equals(s1, s2)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|s1|s2|s1_not_equals_s2|\\r\\n|---|---|---|\\r\\n|[1,2,4]|[4,2,1]|[true,false,true]|\\r\\n\\r\\n## See also\\r\\n\\r\\nFor entire series statistics comparisons, see:\\r\\n\\r\\n* [series_stats()](series-statsfunction.md)\\r\\n* [series_stats_dynamic()](series-stats-dynamicfunction.md)',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/series-not-equalsfunction\",\"series-not-equalsfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"series_outliers\",\"Scores anomaly points in a series.\",'The function takes an expression with a dynamic numerical array as input, and generates a dynamic numeric array of the same length. Each value of the array indicates a score of a possible anomaly, using [\"Tukey\\'s test\"](https://en.wikipedia.org/wiki/Outlier#Tukey\\'s_fences). A value greater than 1.5 in the same element of the input indicates a rise or decline anomaly. A value less than -1.5, indicates a decline anomaly.\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`series_outliers(`*series* [`,` *kind* ] [`,` *ignore_val* ] [`,` *min_percentile* ] [`,` *max_percentile* ]`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *series* | dynamic | &check; | An array of numeric values.|\\r\\n| *kind* | string | | The algorithm to use for outlier detection. The supported options are `\"tukey\"`, which is traditional \"Tukey\", and  `\"ctukey\"`, which is custom \"Tukey\". The default is `\"ctukey\"`.|\\r\\n| *ignore_val* | int, long, or real | | A numeric value indicating the missing values in the series. The default is `double(`*null*`)`. The score of nulls and ignore values is set to `0`.|\\r\\n| *min_percentile* | int, long, or real | | The minimum percentile to use to calculate the normal inter-quantile range. The default is 10. The value must be in the range `[2.0, 98.0]`. This parameter is only relevant for the `\"ctukey\"` *kind*.|\\r\\n| *max_percentile* | int, long, or real | | The maximum percentile to use to calculate the normal inter-quantile range. The default is 90. The value must be in the range `[2.0, 98.0]`. This parameter is only relevant for the `\"ctukey\"` *kind*.|\\r\\n\\r\\nThe following table describes differences between `\"tukey\"` and `\"ctukey\"`:\\r\\n\\r\\n| Algorithm | Default quantile range | Supports custom quantile range |\\r\\n|-----------|----------------------- |--------------------------------|\\r\\n| `\"tukey\"` | 25% / 75%              | No                             |\\r\\n| `\"ctukey\"`| 10% / 90%              | Yes                            |\\r\\n\\r\\n> [!TIP]\\r\\n> The best way to use this function is to apply it to the results of the [make-series](make-seriesoperator.md) operator.','A time series with some noise creates outliers. If you would like to replace those outliers (noise) with the average value, use series_outliers() to detect the outliers, and then replace them.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA2VR0XKCQAx89yv2ESpWdMYZH0p/hblKwGs5jslFenb68Y0gakdeyG6ySW7DpmsIETV7hw3EY5PnCEK9osUvKAp1Fc6FreskoiiwzeEZY7jPMy3HC9h0VZJieUFLJLscK8QUa2yfC5Reo6GO2AjBIBjXt4RAbCng28oR/iStJQ4wgljoQFVrsM91oXByzrD90aULZ76obG2QJKbZtcMDeU7vD5iSZRAjIZmASuZBxTU947lC9W5YUezHBS7uyLknXyet75rbyAe+8qePlh46P+e0Z8/+kw6ygH4xG39TpymetSWT8wNVo/e3hu/YvO4uJ7gxb1gplf17Y3kFZmjmxGg8U9+aA93Fo+Fy1EsMepGGdD1Ww4jR2o4OR8PyB1kERXkkAgAA\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nrange x from 1 to 100 step 1 \\r\\n| extend y=iff(x == 20 or x == 80, 10 * rand() + 10 + (50 - x) / 2, 10 * rand() + 10) // generate a sample series with outliers at x=20 and x=80\\r\\n| summarize x=make_list(x), series=make_list(y)\\r\\n| extend series_stats(series), outliers=series_outliers(series)\\r\\n| mv-expand x to typeof(long), series to typeof(double), outliers to typeof(double)\\r\\n| project\\r\\n    x,\\r\\n    series,\\r\\n    outliers_removed=iff(outliers > 1.5 or outliers < -1.5, series_stats_series_avg, series) // replace outliers with the average\\r\\n| render linechart\\r\\n```\\r\\n\\r\\n![Series outliers.](images/series-outliersfunction/series-outliers.png)',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/series-outliersfunction\",\"series-outliersfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"series_pearson_correlation\",\"Calculates the pearson correlation coefficient of two numeric series inputs.\",\"See: [Pearson correlation coefficient](https://en.wikipedia.org/wiki/Pearson_correlation_coefficient).\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`series_pearson_correlation(`*series1*`,` *series2*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *series1*, *series2* | dynamic | &check; | The arrays of numeric values for calculating the correlation coefficient.|\\r\\n\\r\\n## Returns\\r\\n\\r\\nThe calculated Pearson correlation coefficient between the two inputs. Any non-numeric element or non-existing element (arrays of different sizes) yields a `null` result.\",'> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA03MQQrCMBCF4b2neEsrQknBZe/gDUqILxJskjIzghQPb1tBu5353ye+3Al1iFIzHKziAjVOcIc3+DKWG7RDjw6ntWtbXCmRwRCqCEdvqZal1WfOXtK8aT2yf3AYk9pRXXP+Ertb1/z5nTOEyhhTSCy2DJSSqMNEL7o9f+GirmjzAZfhTjnAAAAA\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nrange s1 from 1 to 5 step 1\\r\\n| extend s2 = 2 * s1 // Perfect correlation\\r\\n| summarize s1 = make_list(s1), s2 = make_list(s2)\\r\\n| extend correlation_coefficient = series_pearson_correlation(s1, s2)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|s1|s2|correlation_coefficient|\\r\\n|---|---|---|\\r\\n|[1,2,3,4,5]|[2,4,6,8,10]|1|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/series-pearson-correlationfunction\",\"series-pearson-correlationfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"series_periods_detect\",\"Finds the most significant periods that exist in a time series.\",\"## Syntax\\r\\n\\r\\n`series_periods_detect(`*series*`,` *min_period*`,` *max_period*`,` *num_periods*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *series* | dynamic | &check; | An array of numeric values, typically the resulting output of the [make-series](make-seriesoperator.md) or [make_list](makelist-aggfunction.md) operators.|\\r\\n| *min_period* | real | &check; | The minimal period for which to search.|\\r\\n| *max_period* | real | &check; | The maximal period for which to search.|\\r\\n| *num_periods* | long | &check; | The maximum required number of periods. This number will be the length of the output dynamic arrays.|\\r\\n\\r\\n> [!IMPORTANT]\\r\\n>\\r\\n> * The algorithm can detect periods containing at least 4 points and at most half of the series length.\\r\\n> * Set the *min_period* a little below and *max_period* a little above the periods you expect to find in the time series. For example, if you have an hourly aggregated signal, and you look for both daily and weekly periods (24 and 168 hours respectively), you can set *min_period*=0.8\\\\*24, *max_period*=1.2\\\\*168, and leave 20% margins around these periods.\\r\\n> * The input time series must be regular. That is, aggregated in constant bins, which is always the case if it has been created using [make-series](make-seriesoperator.md). Otherwise, the output is meaningless.\\r\\n\\r\\n## Returns\\r\\n\\r\\nThe function outputs a table with two columns:\\r\\n\\r\\n* *periods*: A dynamic array containing the periods that have been found, in units of the bin size, ordered by their scores.\\r\\n* *scores*: A dynamic array containing values between 0 and 1. Each array measures the significance of a period in its respective position in the *periods* array.\",'The following query embeds a snapshot of a month of an application\\u2019s traffic, aggregated twice a day. The bin size is 12 hours.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAz2OvW7DMAyE9z4FRwfwINrW35AnKYJCcITEQaIGgocKyMP3LnY7kDiS95F81qWs0o7nVtJjmbvPYHrRMfYSPISicqEXOyGgrSJGOpCCg5jQibRaVHFiB3C0FAA8Rk53GNPJ77AfyAx/DG6oIeTYN0pltifcuN20dluhfEINvwiRimxgqUze/isMIn+An2vf8b7BZMgGrlKWgXcH3TFVHvLmdPh4ybN+3/K8ys+xpnLJHUyp1tS+7rlc1mvXDvAimgjcNZdzrnJfSp6vqa6/5GXgcmIBAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint y=dynamic([80, 139, 87, 110, 68, 54, 50, 51, 53, 133, 86, 141, 97, 156, 94, 149, 95, 140, 77, 61, 50, 54, 47, 133, 72, 152, 94, 148, 105, 162, 101, 160, 87, 63, 53, 55, 54, 151, 103, 189, 108, 183, 113, 175, 113, 178, 90, 71, 62, 62, 65, 165, 109, 181, 115, 182, 121, 178, 114, 170])\\r\\n| project x=range(1, array_length(y), 1), y  \\r\\n| render linechart\\r\\n```\\r\\n\\r\\n![Series periods.](images/series-periods/series-periods.png)\\r\\nRunning `series_periods_detect()` on this series, results in the weekly period, 14 points long.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA01Qy26DMBC89yt8BAlFXsCvQ76kihAKVkKUEmQ41FI+vjNAqx52Pbs7s7PynMZpVfk85Kn/Gq/Fp9eVkiZUyjsAQWV9pUyLADaCaMhA8hagRSeQalCFlh2IgyGAwGFk5RBj2rpD7Gpq6l8NPERTZNnXQqT3I2yzexqzrxAeIZpX+EBErWcpTM78IQwCbwCfa7fYPJg0tZ6rhKWnby2HTIRGTl/Kj7ea0+sRr6v6Pqd+usUCpD6lPnfPON3We5FLcBFZqX/sJaYxLt2M5zUs3RBXdItcKX3iX2y5Ln8A3Zvs/YABAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint y=dynamic([80, 139, 87, 110, 68, 54, 50, 51, 53, 133, 86, 141, 97, 156, 94, 149, 95, 140, 77, 61, 50, 54, 47, 133, 72, 152, 94, 148, 105, 162, 101, 160, 87, 63, 53, 55, 54, 151, 103, 189, 108, 183, 113, 175, 113, 178, 90, 71, 62, 62, 65, 165, 109, 181, 115, 182, 121, 178, 114, 170])\\r\\n| project x=range(1, array_length(y), 1), y  \\r\\n| project series_periods_detect(y, 0.0, 50.0, 2)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n| series\\\\_periods\\\\_detect\\\\_y\\\\_periods  | series\\\\_periods\\\\_detect\\\\_y\\\\_periods\\\\_scores |\\r\\n|-------------|-------------------|\\r\\n| [14.0, 0.0] | [0.84, 0.0]  |\\r\\n\\r\\n> [!NOTE]\\r\\n> The daily period that can be also seen in the chart wasn\\'t found because the sampling is too coarse (12h bin size), so a daily period of 2 bins is below the minimum period size of 4 points, required by the algorithm.',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/series-periods-detectfunction\",\"series-periods-detectfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"series_periods_validate\",\"Checks whether a time series contains periodic patterns of given lengths.\",\"Often a metric measuring the traffic of an application is characterized by a weekly or daily period. This period can be confirmed by running `series_periods_validate()` that checks for a weekly and daily period.\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`series_periods_validate(`*series*`,` *period1* [ `,` *period2* `,` . . . ] `)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *series* | dynamic | &check; | An array of numeric values, typically the resulting output of [make-series](make-seriesoperator.md) or [make_list](makelist-aggfunction.md) operators.|\\r\\n| *period1*, *period2*, etc.| real | &check; | The periods to validate in units of the bin size. For example, if the series is in 1h bins, a weekly period is 168 bins. At least one period is required.|\\r\\n\\r\\n> [!IMPORTANT]\\r\\n>\\r\\n> * The minimal value for each of the *period* parameters is **4** and the maximal is half of the length of the input series. For a *period* argument outside these bounds, the output score will be **0**.\\r\\n> * The input time series must be regular, that is, aggregated in constant bins, and is always the case if it has been created using [make-series](make-seriesoperator.md). Otherwise, the output is meaningless.\\r\\n> * The function accepts up to 16 periods to validate.\\r\\n> \\r\\n\\r\\n## Returns\\r\\n\\r\\nThe function outputs a table with two columns:\\r\\n\\r\\n* *periods*: A dynamic array that contains the periods to validate as supplied in the input.\\r\\n* *scores*: A dynamic array that contains a score between 0 and 1. The score shows the significance of a period in its respective position in the *periods* array.\",'The following query embeds a snapshot of a month of an application\\u2019s traffic, aggregated twice a day (the bin size is 12 hours).\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAz2OvW7DMAyE9z4FRwfwINrW35AnKYJCcITEQaIGgocKyMP3LnY7kDiS95F81qWs0o7nVtJjmbvPYHrRMfYSPISicqEXOyGgrSJGOpCCg5jQibRaVHFiB3C0FAA8Rk53GNPJ77AfyAx/DG6oIeTYN0pltifcuN20dluhfEINvwiRimxgqUze/isMIn+An2vf8b7BZMgGrlKWgXcH3TFVHvLmdPh4ybN+3/K8ys+xpnLJHUyp1tS+7rlc1mvXDvAimgjcNZdzrnJfSp6vqa6/5GXgcmIBAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint y=dynamic([80, 139, 87, 110, 68, 54, 50, 51, 53, 133, 86, 141, 97, 156, 94, 149, 95, 140, 77, 61, 50, 54, 47, 133, 72, 152, 94, 148, 105, 162, 101, 160, 87, 63, 53, 55, 54, 151, 103, 189, 108, 183, 113, 175, 113, 178, 90, 71, 62, 62, 65, 165, 109, 181, 115, 182, 121, 178, 114, 170])\\r\\n| project x=range(1, array_length(y), 1), y  \\r\\n| render linechart\\r\\n```\\r\\n\\r\\n![Series periods.](images/series-periods/series-periods.png)\\r\\nIf you run `series_periods_validate()` on this series to validate a weekly period (14 points long) it results in a high score, and with a **0** score when you validate a five-day period (10 points long).\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA01Qy26DMBC89yt8BAlFXsCvQ76kqpAVrJQqJcigqJb68Z0JtOphl9ndmZ01S57mTZXzWOb4OV2qV68bJV1olHcAgsr6RpkeAWwE0ZGB5C1Aj04g1aAKPTsQB0MAgcPIyiHGtHeH2LXUtL8aeIimyLKvhUjvR9hu9zRmXyE8QjSv8IGIWs9SmJz5QxgE3gA+1z7j6cGkqfVcJSw9fVs5ZCI0cvqtfvlWS75/pMumvs45ztdUgRRzjmW4pfm6vVelBhdRlPrHXlOe0jos+NzHdXjE2zTGLVWFzz3xL+uTrn8ATfvv2oABAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint y=dynamic([80, 139, 87, 110, 68, 54, 50, 51, 53, 133, 86, 141, 97, 156, 94, 149, 95, 140, 77, 61, 50, 54, 47, 133, 72, 152, 94, 148, 105, 162, 101, 160, 87, 63, 53, 55, 54, 151, 103, 189, 108, 183, 113, 175, 113, 178, 90, 71, 62, 62, 65, 165, 109, 181, 115, 182, 121, 178, 114, 170])\\r\\n| project x=range(1, array_length(y), 1), y  \\r\\n| project series_periods_validate(y, 14.0, 10.0)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n| series\\\\_periods\\\\_validate\\\\_y\\\\_periods  | series\\\\_periods\\\\_validate\\\\_y\\\\_scores |\\r\\n|-------------|-------------------|\\r\\n| [14.0, 10.0] | [0.84, 0.0]  |',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/series-periods-validatefunction\",\"series-periods-validatefunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"series_pow\",\"Calculates the element-wise power of two numeric series inputs.\",\"## Syntax\\r\\n\\r\\n`series_pow(`*series1*`,` *series2*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *series1*, *series2* | dynamic | &check; | Arrays of numeric values. The first array, or base, is element-wise raised to the power of the second array, or power, into a dynamic array result.|\\r\\n\\r\\n## Returns\\r\\n\\r\\nA dynamic array of calculated element-wise power operation between the two inputs. Any non-numeric element or non-existing element, such as in the case of arrays of different sizes, yields a `null` element value.\",'> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAysoyswrUahQsFVIqcxLzM1M1og21FEw0lEw1lEwidXUUai0xZQw0DON1eSqUUitKEnNS1GoiC/IL4+vBJpRnFqUmVoM4mpUALVqAgA61Qq1XgAAAA==\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint x = dynamic([1, 2, 3, 4]), y=dynamic([1, 2, 3, 0.5])\\r\\n| extend x_pow_y = series_pow(x, y) \\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|x|y|x_pow_y|\\r\\n|---|---|---|\\r\\n|[1,2,3,4]|[1,2,3,0.5]|[1.0,4.0,27.0,2.0]|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/series-powfunction\",\"series-powfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"series_seasonal\",\"Calculates the seasonal component of a series, according to the detected or given seasonal period.\",\"## Syntax\\r\\n\\r\\n`series_seasonal(`*series* [`,` *period* ]`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *series* | dynamic | &check; | An array of numeric values.|\\r\\n| *period* | int | | The number of bins for each seasonal period. This value can be any positive integer. By default, the value is set to -1, which automatically detects the period using the [series_periods_detect()](series-periods-detectfunction.md) with a threshold of *0.7*. If seasonality is not detected, the function returns zeros. If a different value is set, it ignores seasonality and returns a series of zeros.|\\r\\n\\r\\n## Returns\\r\\n\\r\\nA dynamic array of the same length as the *series* input that contains the calculated seasonal component of the series. The seasonal component is calculated as the *median* of all the values that correspond to the location of the bin, across the periods.\",'### Auto detect the period\\r\\n\\r\\nIn the following example, the series\\' period is automatically detected. The first series\\' period is detected to be six bins and the second five bins. The third series\\' period is too short to be detected and returns a series of zeroes.\\r\\nSee the next example on [how to force the period](#force-a-period).\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAysoyswrUSi2TanMS8zNTNaINtJRMNVRMNZRMAGTQK4hmCRZJFaTq0ahNC8zP09BowDdFgugApAiEyhtAMVkicVq4rPKEOwiU7CjgFrMwI5FEYHoT60oSc1LUSiOL05NLM7PS8xRsFUoTi3KTEWIaBRrAgCrZVUQMAEAAA==\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint s=dynamic([2, 5, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1])\\r\\n| union (print s=dynamic([8, 12, 14, 12, 10, 10, 12, 14, 12, 10, 10, 12, 14, 12, 10, 10, 12, 14, 12, 10]))\\r\\n| union (print s=dynamic([1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6]))\\r\\n| extend s_seasonal = series_seasonal(s)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|s|s_seasonal|\\r\\n|---|---|\\r\\n|[2,5,3,4,3,2,1,2,3,4,3,2,1,2,3,4,3,2,1,2,3,4,3,2,1]|[1.0,2.0,3.0,4.0,3.0,2.0,1.0,2.0,3.0,4.0,3.0,2.0,1.0,2.0,3.0,4.0,3.0,2.0,1.0,2.0,3.0,4.0,3.0,2.0,1.0]|\\r\\n|[8,12,14,12,10,10,12,14,12,10,10,12,14,12,10,10,12,14,12,10]|[10.0,12.0,14.0,12.0,10.0,10.0,12.0,14.0,12.0,10.0,10.0,12.0,14.0,12.0,10.0,10.0,12.0,14.0,12.0,10.0]|\\r\\n|[1,3,5,2,4,6,1,3,5,2,4,6]|[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0]|\\r\\n\\r\\n### Force a period\\r\\n\\r\\nIn this example, the series\\' period is too short to be detected by [series_periods_detect()](series-periods-detectfunction.md), so we explicitly force the period to get the seasonal pattern.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAysoyswrUSi2TanMS8zNTNaINtRRMNZRMNVRgDOMdBRMdBTMYjUVuGoUSvMy8/MUNApwaoOqxqZfE6g/taIkNS9FoTi+ODWxOD8vMUfBVqE4tSgzFSGiUQzUqQkAj46UZJkAAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint s=dynamic([1, 3, 5, 1, 3, 5, 2, 4, 6]) \\r\\n| union (print s=dynamic([1, 3, 5, 2, 4, 6, 1, 3, 5, 2, 4, 6]))\\r\\n| extend s_seasonal = series_seasonal(s, 3)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|s|s_seasonal|\\r\\n|---|---|\\r\\n|[1,3,5,1,3,5,2,4,6]|[1.0,3.0,5.0,1.0,3.0,5.0,1.0,3.0,5.0]|\\r\\n|[1,3,5,2,4,6,1,3,5,2,4,6]|[1.5,3.5,5.5,1.5,3.5,5.5,1.5,3.5,5.5,1.5,3.5,5.5]|\\r\\n\\r\\n## See also\\r\\n\\r\\n* [series_periods_detect()](series-periods-detectfunction.md)\\r\\n* [series_periods_validate()](series-periods-validatefunction.md)',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/series-seasonalfunction\",\"series-seasonalfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"series_sign\",\"Calculates the element-wise sign of the numeric series input.\",\"## Syntax\\r\\n\\r\\n`series_sign(`*series*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *series* | dynamic | &check; | An array of numeric values over which the sign function is applied.|\\r\\n\\r\\n## Returns\\r\\n\\r\\nA dynamic array of calculated sign function values. -1 for negative, 0 for 0, and 1 for positive. Any non-numeric element yields a `null` element value.\",'> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAysoyswrUUgsKlKwVUipzEvMzUzWiNY101Ew0FGwiNXkqlFIrShJzUsBKYkvzkzPA6orTi3KTC0G8zSAwpoAa5KS9UQAAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint arr = dynamic([-6, 0, 8])\\r\\n| extend arr_sign = series_sign(arr)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|arr|arr_sign|\\r\\n|---|---|\\r\\n|[-6,0,8]|[-1,0,1]|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/series-signfunction\",\"series-signfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"series_sin\",\"Calculates the element-wise sine of the numeric series input.\",\"## Syntax\\r\\n\\r\\n`series_sin(`*series*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *series* | dynamic | &check; | An array of numeric values over which the sine function is applied.|\\r\\n\\r\\n## Returns\\r\\n\\r\\nA dynamic array of calculated sine function values. Any non-numeric element yields a `null` element value.\",'> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAysoyswrUUgsKlKwVUipzEvMzUzWiNY11FEw0FEwjNXkqlFIrShJzUsBKYkvzswDKitOLcpMLQZxNICCmgAHnzJlQgAAAA==\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint arr = dynamic([-1, 0, 1])\\r\\n| extend arr_sin = series_sin(arr)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|arr|arr_sin|\\r\\n|---|---|\\r\\n|[-6.5,0,8.2]|[-0.8414709848078965,0.0,0.8414709848078965]|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/series-sinfunction\",\"series-sinfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"series_stats\",\"Returns statistics for a numerical series in a table with a column for each statistic.\",\"> [!NOTE]\\r\\n> This function returns multiple values. If you only need a single value, such as the average, consider using [series_stats_dynamic](./series-stats-dynamicfunction.md).\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`...` `|` `extend` `(` *Name*`,` ... `)` `=` `series_stats` `(` *series* [`,` *ignore_nonfinite*] `)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *Name* | string | | The column labels for the output table. If not provided, the system will generate them. If you provide a limited number of names, the table will show only those columns.|\\r\\n| *series* | dynamic | &check; | An array of numeric values.|\\r\\n| *ignore_nonfinite* | bool | | Determines if the calculation includes non-finite values like `null`, `NaN`, `inf`, and so on. The default is `false`, which will result in `null` if non-finite values are present.|\\r\\n\\r\\n## Returns\\r\\n\\r\\nA table with a column for each of the statistics displayed in the following table.\\r\\n\\r\\n|Statistic | Description|\\r\\n|--|--|\\r\\n| `min` | The minimum value in the input array.|\\r\\n| `min_idx`| The first position of the minimum value in the input array.|\\r\\n| `max` | The maximum value in the input array.|\\r\\n| `max_idx`| The first position of the maximum value in the input array.|\\r\\n| `avg`| The average value of the input array.|\\r\\n| `variance` | The sample variance of input array.|\\r\\n| `stdev`| The sample standard deviation of the input array.|\",'> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAysoyswrUaiwTanMS8zNTNaINjLWUTAx01EA0RbmQDaQ0lEAcsxNgYI6CqZAOUMo1xjINwSptYzVVOCqUSgoys9KTS5RKE4tykwtji8uSSwp1qjQBADbRN1SZAAAAA==\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint x=dynamic([23, 46, 23, 87, 4, 8, 3, 75, 2, 56, 13, 75, 32, 16, 29]) \\r\\n| project series_stats(x)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|series_stats_x_min|series_stats_x_min_idx|series_stats_x_max|series_stats_x_max_idx|series_stats_x_avg|series_stats_x_stdev|series_stats_x_variance|\\r\\n|---|---|---|---|---|---|---|\\r\\n|2|8|87|3|32.8|28.5036338535483|812.457142857143|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/series-statsfunction\",\"series-statsfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"series_stats_dynamic\",\"Returns statistics for a series in a dynamic object.\",\"## Syntax\\r\\n\\r\\n`series_stats_dynamic(`*series* [`,` *ignore_nonfinite* ]`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *series* | dynamic | &check; | An array of numeric values.|\\r\\n| *ignore_nonfinite* | bool | | Indicates whether to calculate the statistics while ignoring non-finite values, such as *null*, *NaN*, *inf*, and so on. The default is `false`, which returns `null` if non-finite values are present in the array.|\\r\\n\\r\\n## Returns\\r\\n\\r\\nA dynamic property bag object with the following content:\\r\\n\\r\\n* `min`: The minimum value in the input array.\\r\\n* `min_idx`: The first position of the minimum value in the input array.\\r\\n* `max`: The maximum value in the input array.\\r\\n* `max_idx`: The first position of the maximum value in the input array.\\r\\n* `avg`: The average value of the input array.\\r\\n* `variance`: The sample variance of input array.\\r\\n* `stdev`: The sample standard deviation of the input array.\\r\\n* `sum`: The sum of the values in the input array.\\r\\n* `len`: The length of the input array.\",'> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAysoyswrUaiwTanMS8zNTNaINjLWUTAx01EA0RbmQDaQ0lEAcsxNgYI6CqZAOUMo1xjINwSptYzVVOCqUSgoys9KTS5RKC5JLCm2LU4tykwtjgdz4mHmV2gCANNsjChyAAAA\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint x=dynamic([23, 46, 23, 87, 4, 8, 3, 75, 2, 56, 13, 75, 32, 16, 29]) \\r\\n| project stats=series_stats_dynamic(x)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|stats|\\r\\n|---|\\r\\n|{\"min\": 2.0, \"min_idx\": 8, \"max\": 87.0, \"max_idx\": 3, \"avg\": 32.8, \"stdev\": 28.503633853548269, \"variance\": 812.45714285714291, \"sum\": 492.0, \"len\": 15}|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/series-stats-dynamicfunction\",\"series-stats-dynamicfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"series_subtract\",\"Calculates the element-wise subtraction of two numeric series inputs.\",\"## Syntax\\r\\n\\r\\n`series_subtract(`*series1*`,` *series2*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *series1*, *series2* | dynamic | &check; | Arrays of numeric values, the second array to be element-wise subtracted from the first array.|\\r\\n\\r\\n## Returns\\r\\n\\r\\nA dynamic array of calculated element-wise subtract operation between the two inputs. Any non-numeric element or non-existing element, such as in the case of arrays of different sizes, yields a `null` element value.\",'> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA1XMMQoCMRBG4d5T/OVG0sxae5YQ4ygqbsLMCEnw8EYRF9uPx5O4nBkVJ8l3ECxjBzUuoM0TXI2XIxr2o9hiXqkPal8qkq+cDEoDS0y3EEVim6pvvjsPnf+9ezSP6tabUtDHwSQmC59aWS6sP5yU3hv3Ar+CKt2tAAAA\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nrange x from 1 to 3 step 1\\r\\n| extend y = x * 2\\r\\n| extend z = y * 2\\r\\n| project s1 = pack_array(x,y,z), s2 = pack_array(z, y, x)\\r\\n| extend s1_subtract_s2 = series_subtract(s1, s2)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|s1|s2|s1_subtract_s2|\\r\\n|---|---|---|\\r\\n|[1,2,4]|[4,2,1]|[-3,0,3]|\\r\\n|[2,4,8]|[8,4,2]|[-6,0,6]|\\r\\n|[3,6,12]|[12,6,3]|[-9,0,9]|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/series-subtractfunction\",\"series-subtractfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"series_tan\",\"Calculates the element-wise tangent of the numeric series input.\",\"## Syntax\\r\\n\\r\\n`series_tan(`*series*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *series* | dynamic | &check; | An array of numeric values on which the tangent function is applied.|\\r\\n\\r\\n## Returns\\r\\n\\r\\nA dynamic array of calculated tangent function values. Any non-numeric element yields a `null` element value.\",'> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAysoyswrUUgsKlKwVUipzEvMzUzWiNY11FEw0FEwjNXkqlFIrShJzUsBKYkvScwDKitOLcpMLQZxNICCmgCTiCSoQgAAAA==\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint arr = dynamic([-1, 0, 1])\\r\\n| extend arr_tan = series_tan(arr)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|arr|arr_tan|\\r\\n|---|---|\\r\\n|[-6.5,0,8.2]|[-1.5574077246549023,0.0,1.5574077246549023]|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/series-tanfunction\",\"series-tanfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"session_count\",\"Calculates the session count based on the ID column over a timeline. The plugin is invoked with the [`evaluate`](evaluateoperator.md) operator.\",\"## Syntax\\r\\n\\r\\n*TabularExpression* `| evaluate` `session_count(`*IdColumn*`,` *TimelineColumn*`,` *Start*`,` *End*`,` *Bin*`,` *LookBackWindow* [`,` *dim1*`,` *dim2*`,` ...]`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *TabularExpression* | string | &check; | The tabular expression that serves as input.|\\r\\n| *IdColumn* | string | &check; | The name of the column with ID values that represents user activity.|\\r\\n| *TimelineColumn* | string | &check; | The name of the column that represents the timeline.|\\r\\n| *Start* | scalar | &check; | The start of the analysis period.|\\r\\n| *End* | scalar | &check; | The end of the analysis period.|\\r\\n| *Bin* | scalar | &check; | The session's analysis step period.|\\r\\n| *LookBackWindow* | scalar | &check; | The session lookback period. If the ID from `IdColumn` appears in a time window within `LookBackWindow`, the session is considered to be an existing one. If the ID doesn't appear, then the session is considered to be new.|\\r\\n| *dim1*, *dim2*, ... | string | | A list of the dimensions columns that slice the session count calculation.|\\r\\n\\r\\n## Returns\\r\\n\\r\\nReturns a table that has the session count values for each timeline period and for each existing dimensions combination.\\r\\n\\r\\nOutput table schema is:\\r\\n\\r\\n|*TimelineColumn*|dim1|..|dim_n|count_sessions|\\r\\n|---|---|---|---|---|--|--|--|--|--|--|\\r\\n|type: as of *TimelineColumn*|..|..|..|long|\",'For this example, the data is deterministic, and we use a table with two columns:\\r\\n\\r\\n- `Timeline`: a running number from 1 to 10,000\\r\\n- `Id`: ID of the user from 1 to 50\\r\\n\\r\\n\\r\\n`Id` appears at the specific `Timeline` slot if it\\'s a divider of `Timeline` (Timeline % Id == 0).\\r\\n\\r\\nAn event with `Id==1` will appear at any `Timeline` slot, an event with `Id==2` at every second `Timeline` slot, and so on.\\r\\n\\r\\nHere are 20 lines of the data:\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA12PzwqDMAzG7z7FdxlsMFAHO40+wGDH3aWzcdY/jdSCE3z4tVM3WS4J+ZJfvjTkkCnpJASsNE/CXbfUaEMoLLdI4Rhp4gO9ow5pBB8T6OXIKGRZTaNfXdsVa4NaGyW0MWSxn5lXtaGdV9QfRqQHsJnrBTeUZDeOdgEkBJJF7ixXlLvvwNHrlyiOcWOuA6ugAUHowQVcSQifRp9/owlslbf4GH8HZJ8HRshed7ImnJI3eyONGCMBAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nlet _data = range Timeline from 1 to 10000 step 1\\r\\n    | extend __key = 1\\r\\n    | join kind=inner (range Id from 1 to 50 step 1 | extend __key=1) on __key\\r\\n    | where Timeline % Id == 0\\r\\n    | project Timeline, Id;\\r\\n// Look on few lines of the data\\r\\n_data\\r\\n| order by Timeline asc, Id asc\\r\\n| take 20\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|Timeline|Id|\\r\\n|---|---|\\r\\n|1|1|\\r\\n|2|1|\\r\\n|2|2|\\r\\n|3|1|\\r\\n|3|3|\\r\\n|4|1|\\r\\n|4|2|\\r\\n|4|4|\\r\\n|5|1|\\r\\n|5|5|\\r\\n|6|1|\\r\\n|6|2|\\r\\n|6|3|\\r\\n|6|6|\\r\\n|7|1|\\r\\n|7|7|\\r\\n|8|1|\\r\\n|8|2|\\r\\n|8|4|\\r\\n|8|8|\\r\\n\\r\\nLet\\'s define a session in next terms: session considered to be active as long as user (`Id`) appears at least once at a timeframe of 100 time slots, while session look-back window is 41 time slots.\\r\\n\\r\\nThe next query shows the count of active sessions according to the above definition.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA12PzQrCMBCE732KuQgKBRvQg0iOHrx7L6HZarRuSrr+gQ/vWqsUh0CWzO6XnYYEpXfiYJEc7wm7cKYmMKFO8QwDiVip0Am1MBlUT9BdiD3K8kQPnfw+H2NgnAJ7G5gpYfpBbv0ItiwG1B/Gmhkif+oBdztQGi00eYOsRTHYbYpHquTXkKu/zuZzbJQZa/SxPNWBg4TIWZ8z01+vrrk4IXTUdWqUVbywTLc+H6GMnkLVXzkWZqaTSbfVWO+O6uCSvADwRV6RPgEAAA==\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nlet _data = range Timeline from 1 to 9999 step 1\\r\\n    | extend __key = 1\\r\\n    | join kind=inner (range Id from 1 to 50 step 1 | extend __key=1) on __key\\r\\n    | where Timeline % Id == 0\\r\\n    | project Timeline, Id;\\r\\n// End of data definition\\r\\n_data\\r\\n| evaluate session_count(Id, Timeline, 1, 10000, 100, 41)\\r\\n| render linechart \\r\\n```\\r\\n\\r\\n![Example session count.](images/session-count-plugin/example-session-count.png)',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/session-count-plugin\",\"session-count-plugin.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"set_difference\",\"Returns a `dynamic` (JSON) array of the set of all distinct values that are in the first array but aren't in other arrays - (((arr1 \\\\ arr2) \\\\ arr3) \\\\ ...).\",\"## Syntax\\r\\n\\r\\n`set_difference(`*set1*`,` *set2* [`,`*set3*, ...]`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *set1...setN* | dynamic | &check; | Arrays used to create a difference set. A minimum of 2 arrays are required. See [pack_array](packarrayfunction.md).|\\r\\n\\r\\n## Returns\\r\\n\\r\\nReturns a dynamic array of the set of all distinct values that are in *set1* but aren't in other arrays.\",'> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA23MsQ7CMAwE0J2vuLFBWdLOfEtltQ4CRBK5kZpE/XicCVWweHi+O6FwZxR4iW845IgJW+YEdznAJXNYUXHTxBXjl5pSPdOu1M5ETi3R8ppJhOpQLKqF3mYsaPx9dp7+dXajq0nik5eMjfO8Prxn4bDwQK6P9ab5AIGKxtfOAAAA\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nrange x from 1 to 3 step 1\\r\\n| extend y = x * 2\\r\\n| extend z = y * 2\\r\\n| extend w = z * 2\\r\\n| extend a1 = pack_array(x,y,x,z), a2 = pack_array(x, y), a3 = pack_array(x,y,w)\\r\\n| project set_difference(a1, a2, a3)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|Column1|\\r\\n|---|\\r\\n|[4]|\\r\\n|[8]|\\r\\n|[12]|\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAysoyswrUUgsKlKwVShOLYlPyUxLSy1KzUtO1UipzEvMzUzWiDbUMdIxjtXUUUAX0QQAej8Kqz4AAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint arr = set_difference(dynamic([1,2,3]), dynamic([1,2,3]))\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|arr|\\r\\n|---|\\r\\n|[]|\\r\\n\\r\\n## See also\\r\\n\\r\\n* [`set_union()`](setunionfunction.md)\\r\\n* [`set_intersect()`](setintersectfunction.md)',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/setdifferencefunction\",\"setdifferencefunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"set_has_element\",\"Determines whether the specified set contains the specified element.\",\"## Syntax\\r\\n\\r\\n`set_has_element(`*set*`,` *value*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *set* | dynamic | &check; | The input array to search.|\\r\\n| *value* | | &check; | The value for which to search. The value should be of type `long`, `int`, `double`, `datetime`, `timespan`, `decimal`, `string`, `guid`, or `bool`.|\\r\\n\\r\\n## Returns\\r\\n\\r\\n`true` or `false` depending on if the value exists in the array.\",'> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAysoyswrUUgsKrJNqcxLzM1M1ohWKsnILFbSUVCCkIl5IDK1IjG3ICdVKVZTgatGoaAoPys1uUQhKLW4NKfEtji1JD4jsTg+NSc1NzWvRANoHJIWTQCSW+h8ZAAAAA==\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint arr=dynamic([\"this\", \"is\", \"an\", \"example\"]) \\r\\n| project Result=set_has_element(arr, \"example\")\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|Result|\\r\\n|---|\\r\\n|true|\\r\\n\\r\\n## See also\\r\\n\\r\\nUse [`array_index_of(arr, value)`](arrayindexoffunction.md) to find the position at which the value exists in the array. Both functions are equally performant.',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/sethaselementfunction\",\"sethaselementfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"set_intersect\",\"Returns a `dynamic` array of the set of all distinct values that are in all arrays - (arr1 \\u2229 arr2 \\u2229 ...).\",\"## Syntax\\r\\n\\r\\n`set_intersect(`*set1*`,` *set2* [`,` *set3*, ...]`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *set1...setN* | dynamic | &check; | Arrays used to create an intersect set. A minimum of 2 arrays are required. See [pack_array](packarrayfunction.md).|\\r\\n\\r\\n## Returns\\r\\n\\r\\nReturns a dynamic array of the set of all distinct values that are in all arrays.\",'> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA13MsQ7CMAwE0J2vuLFBWdLOfEtlFYMAkUSOpSYVH48zoTDeO/uE4p1RcZP0RoAmLCjKGeH0AVfleEXDxS7OmH90GLWRdqNjJApmmbbXSiLUpuqbr/5wHjT/N2idl5F3X53NZUlP3hSFdX1EZSmWJgp9pz+5L5hXyQHGAAAA\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nrange x from 1 to 3 step 1\\r\\n| extend y = x * 2\\r\\n| extend z = y * 2\\r\\n| extend w = z * 2\\r\\n| extend a1 = pack_array(x,y,x,z), a2 = pack_array(x, y), a3 = pack_array(w,x)\\r\\n| project set_intersect(a1, a2, a3)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|Column1|\\r\\n|---|\\r\\n|[1]|\\r\\n|[2]|\\r\\n|[3]|\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAysoyswrUUgsKlKwVShOLYkH8lKLilOTSzRSKvMSczOTNaINdRSMdBSMYzV1FOBiJjqmsZqaAI3W9uo9AAAA\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint arr = set_intersect(dynamic([1, 2, 3]), dynamic([4,5]))\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|arr|\\r\\n|---|\\r\\n|[]|\\r\\n\\r\\n## See also\\r\\n\\r\\n* [`set_union()`](setunionfunction.md)\\r\\n* [`set_difference()`](setdifferencefunction.md)',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/setintersectfunction\",\"setintersectfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"set_union\",\"Returns a `dynamic` array of the set of all distinct values that are in any of the arrays - (arr1 \\u222a arr2 \\u222a ...).\",\"## Syntax\\r\\n\\r\\n`set_union(`*set1*`,` *set2* [`,` *set3*, ...]`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *set1...setN* | dynamic | &check; | Arrays used to create a union set. A minimum of 2 arrays are required. See [pack_array](packarrayfunction.md).|\\r\\n\\r\\n## Returns\\r\\n\\r\\nReturns a dynamic array of the set of all distinct values that are in any of arrays.\",'### Set from multiple dynamic array\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA13MMQ7CMAyF4Z1TvLFBXprMPQNHqKwSECCSKHXVJOLwuBMK62e/P3O4exTccnxjhEQ4rOITxtMHvogPV1RM+nGG/VFTqj3tSq0nHtUSL6+Zc+Y6FKpUqBkC2/8L6sGu591oLOX49ItojdgSO7psMq1e5i08YhiUNXdszRcYE8jtzQAAAA==\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nrange x from 1 to 3 step 1\\r\\n| extend y = x * 2\\r\\n| extend z = y * 2\\r\\n| extend w = z * 2\\r\\n| extend a1 = pack_array(x,y,x,z), a2 = pack_array(x, y), a3 = pack_array(w)\\r\\n| project a1,a2,a3,Out=set_union(a1, a2, a3)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|a1|a2|a3|`Out`|\\r\\n|---|---|---|---|\\r\\n|[1,2,1,4]|[1,2]|[8]|[1,2,4,8]|\\r\\n|[2,4,2,8]|[2,4]|[16]|[2,4,8,16]|\\r\\n|[3,6,3,12]|[3,6]|[24]|[3,6,12,24]|\\r\\n\\r\\n### Set from one dynamic array\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA0tJLAHCpJxUBQ3HoiJDK4WUyrzE3MxkTa5oLgUggHI1otUdTdR1FNQdjcCkOZQdq6mjgKbOGazOGazC2RBMmgDVccUqcNUopFaUpOalKPiXltgWp5bEl+Zl5ueBLdZRAJGaAMqBZpGPAAAA\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\ndatatable (Arr1: dynamic)\\r\\n[\\r\\n    dynamic([\\'A4\\', \\'A2\\', \\'A7\\', \\'A2\\']), \\r\\n    dynamic([\\'C4\\', \\'C7\\', \\'C1\\', \\'C4\\'])\\r\\n] \\r\\n| extend Out=set_union(Arr1, Arr1)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|Arr1|`Out`|\\r\\n|---|---|\\r\\n|[\"A4\",\"A2\",\"A7\",\"A2\"]|[\"A4\",\"A2\",\"A7\"]|\\r\\n|[\"C4\",\"C7\",\"C1\",\"C4\"]|[\"C4\",\"C7\",\"C1\"]|\\r\\n\\r\\n## See also\\r\\n\\r\\n* [`set_intersect()`](setintersectfunction.md)\\r\\n* [`set_difference()`](setdifferencefunction.md)',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/setunionfunction\",\"setunionfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"sign\",\"Returns the sign of the numeric expression.\",\"## Syntax\\r\\n\\r\\n`sign(`*number*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *number* | real | &check; | The number for which to return the sign.|\\r\\n\\r\\n## Returns\\r\\n\\r\\nThe positive (+1), zero (0), or negative (-1) sign of the specified expression.\",'> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAysoyswrUSg2VLBVKM5Mz9PQNTHS1FEoNoLxDUA8YxjP0FDPSBMA4mpHrTMAAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint s1 = sign(-42), s2 = sign(0), s3 = sign(11.2)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|s1|s2|s3|\\r\\n|---|---|---|\\r\\n|-1|0|1|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/signfunction\",\"signfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"sin\",\"Returns the sine function value of the specified angle. The angle is specified in radians.\",\"## Syntax\\r\\n\\r\\n`sin(`*number*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *number* | real | &check; | The value in radians for which to calculate the sine.|\\r\\n\\r\\n## Returns\\r\\n\\r\\nThe sine of *number* of radians.\",\"```\\r\\nprint sin(1)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|result|\\r\\n|--|\\r\\n|0.841470984807897|\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/sinfunction\",\"sinfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"sliding_window_counts\",\"Calculates counts and distinct count of values in a sliding window over a lookback period, using the technique described [here](samples.md#perform-aggregations-over-a-sliding-window). The plugin is invoked with the [`evaluate`](evaluateoperator.md) operator.\",\"## Syntax\\r\\n\\r\\n*T* `| evaluate` `sliding_window_counts(`*IdColumn*`,` *TimelineColumn*`,` *Start*`,` *End*`,` *LookbackWindow*`,` *Bin* `,` [*dim1*`,` *dim2*`,` ...]`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *T* | string | &check; | The input tabular expression.|\\r\\n| *IdColumn* | string | &check; | The name of the column with ID values that represent user activity. |\\r\\n| *TimelineColumn* | string | &check; | The name of the column representing the timeline.|\\r\\n| *Start* | int, long, real, datetime, or timespan | &check; | The analysis start period.|\\r\\n| *End* | int, long, real, datetime, or timespan | &check; | The analysis end period.|\\r\\n| *LookbackWindow* | int, long, real, datetime, or timespan | &check; | The lookback period. This value should be a multiple of the *Bin* value, otherwise the *LookbackWindow* will be rounded down to a multiple of the *Bin* value. For example, for `dcount` users in past `7d`: *LookbackWindow* = `7d`.|\\r\\n| *Bin* | int, long, real, datetime, timespan, or string | &check; | The analysis step period. The possible string values are `week`, `month`, and `year` for which all periods will be [startofweek](startofweekfunction.md), [startofmonth](startofmonthfunction.md), [startofyear](startofyearfunction.md) respectively. |\\r\\n| *dim1*, *dim2*, ... | string | | A list of the dimensions columns that slice the activity metrics calculation.|\\r\\n\\r\\n## Returns\\r\\n\\r\\nReturns a table that has the count and distinct count values of Ids in the lookback period, for each timeline period (by bin) and for each existing dimensions combination.\\r\\n\\r\\nOutput table schema is:\\r\\n\\r\\n|*TimelineColumn*|`dim1`|..|`dim_n`|`count`|`dcount`|\\r\\n|---|---|---|---|---|---|\\r\\n|type: as of *TimelineColumn*|..|..|..|long|long|\",\"Calculate counts and `dcounts` for users in past week, for each day in the analysis period. \\r\\n\\r\\n> [!div class=\\\"nextstepaction\\\"]\\r\\n> <a href=\\\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA63TQWvCMBQH8Hs/xbtpIYJtNxTLDhu76LljhzEk7QsuGJPRpIrgh99rM50MWiLYQiD0R96f8o8SDqzjtYMnQO6EkzsxTqfJDCYwnbdLEueRIiU09ppZnEOHlDHbklfbd6nRHMhnmIP/VEpN+wT9aYU/i95SifGbFfUSF5SklnrDoKAJlGr3vbgMjCOg56NbRy+mHLHevAy8euV7iXd0K/OlA1hYuGfNNfJemBI8S9eoQReQLg2dm/3BobE3s8F0WdC/u1LC2WOvewg67bFVn3lURCcQe64aUmCVRCrg+tDVd12ZRjv7286rVjJ/ZVh7J9i/zrO26PEPos0Ri1cDAAA=\\\" target=\\\"_blank\\\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nlet start = datetime(2017 - 08 - 01);\\r\\nlet end = datetime(2017 - 08 - 07); \\r\\nlet lookbackWindow = 3d;  \\r\\nlet bin = 1d;\\r\\nlet T = datatable(UserId: string, Timestamp: datetime)\\r\\n    [\\r\\n    'Bob', datetime(2017 - 08 - 01), \\r\\n    'David', datetime(2017 - 08 - 01), \\r\\n    'David', datetime(2017 - 08 - 01), \\r\\n    'John', datetime(2017 - 08 - 01), \\r\\n    'Bob', datetime(2017 - 08 - 01), \\r\\n    'Ananda', datetime(2017 - 08 - 02),  \\r\\n    'Atul', datetime(2017 - 08 - 02), \\r\\n    'John', datetime(2017 - 08 - 02), \\r\\n    'Ananda', datetime(2017 - 08 - 03), \\r\\n    'Atul', datetime(2017 - 08 - 03), \\r\\n    'Atul', datetime(2017 - 08 - 03), \\r\\n    'John', datetime(2017 - 08 - 03), \\r\\n    'Bob', datetime(2017 - 08 - 03), \\r\\n    'Betsy', datetime(2017 - 08 - 04), \\r\\n    'Bob', datetime(2017 - 08 - 05), \\r\\n];\\r\\nT\\r\\n| evaluate sliding_window_counts(UserId, Timestamp, start, end, lookbackWindow, bin)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|Timestamp|Count|`dcount`|\\r\\n|---|---|---|\\r\\n|2017-08-01 00:00:00.0000000|5|3|\\r\\n|2017-08-02 00:00:00.0000000|8|5|\\r\\n|2017-08-03 00:00:00.0000000|13|5|\\r\\n|2017-08-04 00:00:00.0000000|9|5|\\r\\n|2017-08-05 00:00:00.0000000|7|5|\\r\\n|2017-08-06 00:00:00.0000000|2|2|\\r\\n|2017-08-07 00:00:00.0000000|1|1|\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/sliding-window-counts-plugin\",\"sliding-window-counts-plugin.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.OperatorToken,\"sort\",\"Sorts the rows of the input table into order by one or more columns.\",\"> The `sort` and `order` operators are equivalent\\r\\n\\r\\n## Syntax\\r\\n\\r\\n*T* `| sort by` *column* [`asc` | `desc`] [`nulls first` | `nulls last`] [`,` ...]\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *T* | string | &check; | The tabular input to sort. |\\r\\n| *column* | scalar | &check; | The column of *T* by which to sort. The type of the column values must be numeric, date, time or string.|\\r\\n| `asc` or `desc` | string | | `asc` sorts into ascending order, low to high. Default is `desc`, high to low. |\\r\\n| `nulls first` or `nulls last`  | string | | `nulls first` will place the null values at the beginning and `nulls last` will place the null values at the end. Default for `asc` is `nulls first`. Default for `desc` is `nulls last`.|\\r\\n\\r\\n## Returns\\r\\n\\r\\nA copy of the input table sorted in either ascending or descending order based on the provided column.\",'The following example shows storm events by state in alphabetical order with the most recent storms in each state appearing first.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAwsuyS/KdS1LzSsp5qpRyC9KSS1SSKpUCC5JLElVSCxO1gExi0pCMnNTFVJSi5MBfa8LRzAAAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nStormEvents\\r\\n| sort by State asc, StartTime desc\\r\\n```\\r\\n\\r\\nThis table only shows the top 10 query results.\\r\\n\\r\\n|StartTime|State|EventType|...|\\r\\n|--|--|--|--|\\r\\n|2007-12-28T12:10:00Z|ALABAMA|Hail|...|\\r\\n|2007-12-28T04:30:00Z|ALABAMA|Hail|...|\\r\\n|2007-12-28T04:16:00Z|ALABAMA|Hail|...|\\r\\n|2007-12-28T04:15:00Z|ALABAMA|Hail|...|\\r\\n|2007-12-28T04:13:00Z|ALABAMA|Hail|...|\\r\\n|2007-12-21T14:30:00Z|ALABAMA|Strong Wind|...|\\r\\n|2007-12-20T18:15:00Z|ALABAMA|Strong Wind|...|\\r\\n|2007-12-20T18:00:00Z|ALABAMA|Strong Wind|...|\\r\\n|2007-12-20T18:00:00Z|ALABAMA|Strong Wind|...|\\r\\n|2007-12-20T17:45:00Z|ALABAMA|Strong Wind|...|\\r\\n|2007-12-20T17:45:00Z|ALABAMA|Strong Wind|...|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/sort-operator\",\"sort-operator.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"split\",\"The `split()` function takes a string and splits it into substrings based on a specified delimiter, returning the substrings in an array. Optionally, you can retrieve a specific substring by specifying its index.\",\"## Syntax\\r\\n\\r\\n`split(`*source*`,` *delimiter* [`,` *requestedIndex*]`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *source* | string | &check; | The source string that will be split according to the given delimiter.|\\r\\n| *delimiter* | string | &check; | The delimiter that will be used in order to split the source string.|\\r\\n| *requestedIndex* | int | | A zero-based index. If provided, the returned string array will contain the requested substring at the index if it exists.|\\r\\n\\r\\n## Returns\\r\\n\\r\\nAn array of substrings obtained by separating the *source* string by the specified *delimiter*, or a single substring at the specified *requestedIndex*.\",'> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA22OQQrAIAwE731FyKlCQPqeIsF4EkqR1v/TWAvS4F43s5ly5bMuoLnLkeuKMbIIEiCjIxjxHnYtkVDr8CcaIpxS6hzB1tCXEHs9mR77Zph5ZvKpqEmTsS4iXUP/upm9tuEBNARoOvUAAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint\\r\\n    split(\"aa_bb\", \"_\"),           // [\"aa\",\"bb\"]\\r\\n    split(\"aaa_bbb_ccc\", \"_\", 1),  // [\"bbb\"]\\r\\n    split(\"\", \"_\"),                // [\"\"]\\r\\n    split(\"a__b\", \"_\"),            // [\"a\",\"\",\"b\"]\\r\\n    split(\"aabbcc\", \"bb\")          // [\"aa\",\"cc\"]\\r\\n```\\r\\n\\r\\n|print_0|print_1|print_2|print_3|print4|\\r\\n|--|--|--|--|--|\\r\\n|[\"aa\",\"bb\"] |[\"bbb\"] |[\"\"] |[\"a\",\"\",\"b\"] |[\"aa\",\"cc\"]',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/splitfunction\",\"splitfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"sql_request\",\"The `sql_request` plugin sends a SQL query to a SQL Server network endpoint and returns the results.\\r\\nIf more than one rowset is returned by SQL, only the first one is used.\\r\\nThe plugin is invoked with the [`evaluate`](evaluateoperator.md) operator.\",'## Syntax\\r\\n\\r\\n`evaluate` `sql_request` `(` *ConnectionString* `,` *SqlQuery* [`,` *SqlParameters* [`,` *Options*]] `)` [`:` *OutputSchema*]\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required| Description |\\r\\n|---|---|---|---|\\r\\n| *ConnectionString* | string | &check; | The connection string that points at the SQL Server network endpoint. See [valid methods of authentication](#authentication-and-authorization) and how to specify the [network endpoint](#specify-the-network-endpoint). |\\r\\n| *SqlQuery* | string | &check; | The query that is to be executed against the SQL endpoint. The query must return one or more row sets, but only the first one is made available for the rest of the Kusto query. |\\r\\n| *SqlParameters* | dynamic | | A property bag of key-value pairs to pass as parameters along with the query. |\\r\\n|*Options* | dynamic | | A property bag of key-value pairs to pass more advanced settings along with the query. Currently, only `token` can be set, to pass a caller-provided Azure AD access token that is forwarded to the SQL endpoint for authentication.|\\r\\n| *OutputSchema* | string | | The names and types for the expected columns of the `sql_request` plugin output. Use the following syntax: `(` *ColumnName* `:` *ColumnType* [`,` ...] `)`.|\\r\\n\\r\\n> [!NOTE]\\r\\n>\\r\\n> * Specifying the *OutputSchema* is highly recommended, as it allows the plugin to be used in scenarios that might otherwise not work without it, such as a cross-cluster query. The *OutputSchema* can also enable multiple query optimizations.\\r\\n> * An error is raised if the run-time schema of the first row set returned by the SQL network endpoint doesn\\'t match the *OutputSchema* schema.\\r\\n\\r\\n## Authentication and authorization\\r\\n\\r\\nThe sql_request plugin supports the following three methods of authentication to the\\r\\nSQL Server endpoint.\\r\\n\\r\\n|Authentication method|Syntax|How|Description|\\r\\n|--|--|--|\\r\\n|Azure AD-integrated|`Authentication=\"Active Directory Integrated\"`|Add to the *ConnectionString* parameter.|This is the preferred authentication method. The user or application authenticates via Azure AD to Azure Data Explorer, and the same token is used to access the SQL Server network endpoint.<br/>The principal must have the appropriate permissions on the SQL resource to perform the requested action. For example, to read from the database the principal needs table SELECT permissions, and to write to an existing table the principal needs UPDATE and INSERT permissions. To write to a new table, CREATE permissions are also required.|\\r\\n|Username and password|`User ID=...; Password=...;`|Add to the *ConnectionString* parameter.|When possible, avoid this method as secret information is sent through Azure Data Explorer.|\\r\\n|Azure AD access token|`dynamic({\\'token\\': h\"eyJ0...\"})`|Add in the *Options* parameter.|The access token is passed as `token` property in the *Options* argument of the plugin.|\\r\\n\\r\\n> [!NOTE]\\r\\n> Connection strings and queries that include confidential information or information that should be guarded should be obfuscated to be omitted from any Kusto tracing. For more information, see [obfuscated string literals](scalar-data-types/string.md#obfuscated-string-literals).',\"### Send a SQL query using Azure AD-integrated authentication\\r\\n\\r\\nThe following example sends a SQL query to an Azure SQL DB database. It\\r\\nretrieves all records from `[dbo].[Table]`, and then processes the results on the\\r\\n Kusto side. Authentication reuses the calling user's Azure AD token.\\r\\n\\r\\n> [!NOTE]\\r\\n> This example should not be taken as a recommendation to filter or project data in this manner. SQL queries should be constructed to return the smallest data set possible.\\r\\n\\r\\n```\\r\\nevaluate sql_request(\\r\\n  'Server=tcp:contoso.database.windows.net,1433;'\\r\\n    'Authentication=\\\"Active Directory Integrated\\\";'\\r\\n    'Initial Catalog=Fabrikam;',\\r\\n  'select * from [dbo].[Table]') : (Id:long, Name:string)\\r\\n| where Id > 0\\r\\n| project Name\\r\\n```\\r\\n\\r\\n### Send a SQL query using Username/Password authentication\\r\\n\\r\\nThe following example is identical to the previous one, except that SQL\\r\\nauthentication is done by username/password. For confidentiality,\\r\\nwe use obfuscated strings here.\\r\\n\\r\\n```\\r\\nevaluate sql_request(\\r\\n  'Server=tcp:contoso.database.windows.net,1433;'\\r\\n    'Initial Catalog=Fabrikam;'\\r\\n    h'User ID=USERNAME;'\\r\\n    h'Password=PASSWORD;',\\r\\n  'select * from [dbo].[Table]') : (Id:long, Name:string)\\r\\n| where Id > 0\\r\\n| project Name\\r\\n```\\r\\n\\r\\n### Send a SQL query using an Azure AD access token\\r\\n\\r\\nThe following example sends a SQL query to an Azure SQL database\\r\\nretrieving all records from `[dbo].[Table]`, while appending another `datetime` column,\\r\\nand then processes the results on the Kusto side.\\r\\nIt specifies a SQL parameter (`@param0`) to be used in the SQL query.\\r\\n\\r\\n```\\r\\nevaluate sql_request(\\r\\n  'Server=tcp:contoso.database.windows.net,1433;'\\r\\n    'Authentication=\\\"Active Directory Integrated\\\";'\\r\\n    'Initial Catalog=Fabrikam;',\\r\\n  'select *, @param0 as dt from [dbo].[Table]',\\r\\n  dynamic({'param0': datetime(2020-01-01 16:47:26.7423305)})) : (Id:long, Name:string, dt: datetime)\\r\\n| where Id > 0\\r\\n| project Name\\r\\n```\\r\\n\\r\\n### Send a SQL query without a query-defined output schema\\r\\n\\r\\nThe following example sends a SQL query to an Azure SQL database without an output schema. This is not recommended unless the schema is unknown, as it may impact the performance of the query\\r\\n\\r\\n```\\r\\nevaluate sql_request(\\r\\n  'Server=tcp:contoso.database.windows.net,1433;'\\r\\n    'Initial Catalog=Fabrikam;'\\r\\n    h'User ID=USERNAME;'\\r\\n    h'Password=PASSWORD;',\\r\\n  'select * from [dbo].[Table]')\\r\\n| where Id > 0\\r\\n| project Name\\r\\n```\\r\\n\\r\\n## Encryption and server validation\\r\\n\\r\\nThe following connection properties are forced when connecting to a SQL Server network\\r\\nendpoint, for security reasons.\\r\\n\\r\\n* `Encrypt` is set to `true` unconditionally.\\r\\n* `TrustServerCertificate` is set to `false` unconditionally.\\r\\n\\r\\n\\r\\nAs a result, the SQL Server must be configured with a valid SSL/TLS server certificate.\\r\\n\\r\\n## Specify the network endpoint\\r\\n\\r\\nSpecifying the SQL network endpoint as part of the connection string is mandatory.\\r\\nThe appropriate syntax is:\\r\\n\\r\\n`Server` `=` `tcp:` *FQDN* [`,` *Port*]\\r\\n\\r\\nWhere:\\r\\n\\r\\n* *FQDN* is the fully qualified domain name of the endpoint.\\r\\n* *Port* is the TCP port of the endpoint. By default, `1433` is assumed.\\r\\n\\r\\n\\r\\n> [!NOTE]\\r\\n> Other forms of specifying the network endpoint are not supported.\\r\\n> One cannot omit, for example, the prefix `tcp:` even though it is possible to\\r\\n> do so when using the SQL client libraries programmatically.\\r\\n\\r\\n---\\r\\n\\r\\n> [!IMPORTANT]\\r\\n> The content below is Microsoft confidential(not available in the [public site](https://docs.microsoft.com/en-us/azure/data-explorer/))\\r\\n\\r\\n# sql_request plugin - Internal\\r\\n\\r\\n**Restrictions**\\r\\n\\r\\nKusto service controls allow sql-request plugin destinations by [Callout policy](../management/calloutpolicy.md)\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/sqlrequestplugin\",\"sqlrequestplugin.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"sqrt\",\"Returns the square root of the input.\",\"## Syntax\\r\\n\\r\\n`sqrt(`*number*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *number* | int, long, or real | &check; | The number for which to calculate the square root.|\\r\\n\\r\\n## Returns\\r\\n\\r\\n* A positive number such that `sqrt(x) * sqrt(x) == x`\\r\\n* `null` if the argument is negative or can't be converted to a `real` value.\",\"\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/sqrtfunction\",\"\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"startofday\",\"Returns the start of the day containing the date, shifted by an offset, if provided.\",\"## Syntax\\r\\n\\r\\n`startofday(`*date* [`,` *offset* ]`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *date* | datetime | &check; | The date for which to find the start.|\\r\\n| *offset* | int | | The number of days to offset from the input date. The default is 0.|\\r\\n\\r\\n## Returns\\r\\n\\r\\nA datetime representing the start of the day for the given *date* value, with the offset, if specified.\",'> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAy2MQQqAMAwE775ijwoWGi+C4Ct8QdFEFGpKm4vg460gDCzMwuRw7QwVKWyQrBGOYApCMU6g5kHKevJq2MK9WMiGuX51Vappt2BsR+R28DQ6TxWQnz7Grv/L3Qu9LKDlZwAAAA==\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nrange offset from -1 to 1 step 1\\r\\n| project dayStart = startofday(datetime(2017-01-01 10:10:17), offset) \\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|dayStart|\\r\\n|---|\\r\\n|2016-12-31 00:00:00.0000000|\\r\\n|2017-01-01 00:00:00.0000000|\\r\\n|2017-01-02 00:00:00.0000000|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/startofdayfunction\",\"startofdayfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"startofmonth\",\"Returns the start of the month containing the date, shifted by an offset, if provided.\",\"## Syntax\\r\\n\\r\\n`startofmonth(`*date* [`,` *offset* ]`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *date* | datetime | &check; | The date for which to find the start of month.|\\r\\n| *offset* | int | | The number of months to offset from the input date. The default is 0.|\\r\\n\\r\\n## Returns\\r\\n\\r\\nA datetime representing the start of the month for the given *date* value, with the offset, if specified.\",'> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAy2MSQqAMBAE776ijwoKGS+C4Ct8QdCJC8SR2EcfbxShoKEaKvljUVgIlxIhWUQjoEFwUU9IceNMtutERDu4jvSJGPKb18LnytlTuUUtWydd4yQDcf1LV9V/vXoAr00vemsAAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nrange offset from -1 to 1 step 1\\r\\n| project monthStart = startofmonth(datetime(2017-01-01 10:10:17), offset) \\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|monthStart|\\r\\n|---|\\r\\n|2016-12-01 00:00:00.0000000|\\r\\n|2017-01-01 00:00:00.0000000|\\r\\n|2017-02-01 00:00:00.0000000|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/startofmonthfunction\",\"startofmonthfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"startofweek\",\"Returns the start of the week containing the date, shifted by an offset, if provided.\",\"Start of the week is considered to be a Sunday.\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`startofweek(`*date* [`,` *offset* ]`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *date* | datetime | &check; | The date for which to find the start of week.|\\r\\n| *offset* | int | | The number of weeks to offset from the input date. The default is 0.|\\r\\n\\r\\n## Returns\\r\\n\\r\\nA datetime representing the start of the week for the given *date* value, with the offset, if specified.\",'> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAy2MQQqAMAwE775ijxYUGi8FwVf4gqKpqNSUGvDi421BGFiYhcn+2hgSws2KkCWiJ6iAcCsnUPMiZTl4UTzM56w+K6ZylpVQVbt6Zd0jt4Ml11sqgOxYcab72+YDGdMCYmkAAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nrange offset from -1 to 1 step 1\\r\\n| project weekStart = startofweek(datetime(2017-01-01 10:10:17), offset) \\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|weekStart|\\r\\n|---|\\r\\n|2016-12-25 00:00:00.0000000|\\r\\n|2017-01-01 00:00:00.0000000|\\r\\n|2017-01-08 00:00:00.0000000|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/startofweekfunction\",\"startofweekfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"startofyear\",\"Returns the start of the year containing the date, shifted by an offset, if provided.\",\"## Syntax\\r\\n\\r\\n`startofyear(`*date* [`,` *offset* ]`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *date* | datetime | &check; | The date for which to find the start of the year.|\\r\\n| *offset* | int | | The number of years to offset from the input date. The default is 0.|\\r\\n\\r\\n## Returns\\r\\n\\r\\nA datetime representing the start of the year for the given *date* value, with the offset, if specified.\",'> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAy2MQQqAMAwE775ijxYsNF4Kgq/wBUVTUdBImovg460gDCzMwmg6V4bkXNiQVQ54ggkIxfgCNQ8ulZ1nw81JJ0tqGOtZV/Kn2iUZ23Zw2weKPlAFFIaP6Lq/7V7sDV7RaQAAAA==\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nrange offset from -1 to 1 step 1\\r\\n| project yearStart = startofyear(datetime(2017-01-01 10:10:17), offset) \\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|yearStart|\\r\\n|---|\\r\\n|2016-01-01 00:00:00.0000000|\\r\\n|2017-01-01 00:00:00.0000000|\\r\\n|2018-01-01 00:00:00.0000000|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/startofyearfunction\",\"startofyearfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.OperatorToken,\"startswith\",\"Filters a record set for data with a case-insensitive string starting sequence.\",\"[!INCLUDE [startswith-operator-comparison](../../includes/startswith-operator-comparison.md)]\\r\\n\\r\\n## Performance tips\\r\\n\\r\\n[!INCLUDE [performance-tip-note](../../includes/performance-tip-note.md)]\\r\\n\\r\\nWhen possible, use the case-sensitive [startswith_cs](startswith-cs-operator.md).\\r\\n\\r\\n## Syntax\\r\\n\\r\\n*T* `|` `where` *col* `startswith` `(`*expression*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *T* | string | &check; | The tabular input to filter.|\\r\\n| *col* | string | &check; | The column used to filter.|\\r\\n| *expression* | string | &check; | The expression by which to filter.|\\r\\n\\r\\n## Returns\\r\\n\\r\\nRows in *T* for which the predicate is `true`.\",'> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAwsuyS/KdS1LzSsp5qpRKC7NzU0syqxKVUgFCcUn55fmldiCSQ1NhaRKheCSxJJUoMLyjNSiVAhPobgksaikuDyzJENBySdfCS6LZISCnYKhAVCioCg/KzW5BKJRB1kFAIySNF2IAAAA\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nStormEvents\\r\\n| summarize event_count=count() by State\\r\\n| where State startswith \"Lo\"\\r\\n| where event_count > 10\\r\\n| project State, event_count\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|State|event_count|\\r\\n|-----|-----------|\\r\\n|LOUISIANA|463|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/startswith-operator\",\"startswith-operator.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.OperatorToken,\"startswith_cs\",\"Filters a record set for data with a case-sensitive string starting sequence.\",\"[!INCLUDE [startswith-operator-comparison](../../includes/startswith-operator-comparison.md)]\\r\\n\\r\\n## Performance tips\\r\\n\\r\\n[!INCLUDE [performance-tip-note](../../includes/performance-tip-note.md)]\\r\\n\\r\\n## Syntax\\r\\n\\r\\n*T* `|` `where` *col* `startswith_cs` `(`*expression*`)`  \\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *T* | string | &check; | The tabular input to filter.|\\r\\n| *col* | string | &check; | The column used to filter.|\\r\\n| *expression* | string | &check; | The expression by which to filter.|\\r\\n\\r\\n## Returns\\r\\n\\r\\nRows in *T* for which the predicate is `true`.\",'> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAwsuyS/KdS1LzSsp5qpRKC7NzU0syqxKVUgFCcUn55fmldiCSQ1NhaRKheCSxJJUoMLyjNSiVAhPobgksaikuDyzJCM+uVhByVMJLo9kiIKdgpGBgQFQqqAoPys1uQSiWQdZDQCj4hmWjAAAAA==\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nStormEvents\\r\\n| summarize event_count=count() by State\\r\\n| where State startswith_cs \"I\"\\r\\n| where event_count > 2000\\r\\n| project State, event_count\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|State|event_count|\\r\\n|-----|-----------|\\r\\n|IOWA|2337|\\r\\n|ILLINOIS|2022|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/startswith-cs-operator\",\"startswith-cs-operator.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"stdev\",\"Calculates the standard deviation of *expr* across the group, using [Bessel's correction](https://en.wikipedia.org/wiki/Bessel's_correction) for a small data set that is considered a [sample](https://en.wikipedia.org/wiki/Sample_%28statistics%29).\",\"For a large data set that is representative of the population, use [stdevp() (aggregation function)](stdevp-aggfunction.md).\\r\\n\\r\\n[!INCLUDE [data-explorer-agg-function-summarize-note](../../includes/data-explorer-agg-function-summarize-note.md)]\\r\\n\\r\\n## Formula\\r\\n\\r\\nThis function uses the following formula.\\r\\n\\r\\n![Image showing a Stdev sample formula.](images/stdev-aggfunction/stdev-sample.png)\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`stdev(`*expr*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *expr* | string | &check; | The expression used for the standard deviation aggregation calculation. |\\r\\n\\r\\n## Returns\\r\\n\\r\\nReturns the standard deviation value of *expr* across the group.\",'The following example shows the standard deviation for the group.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAytKzEtPVahQSCvKz1UwVCjJVzBVKC5JLVAw5KpRKC7NzU0syqxKVchNzE6Nz8ksLtGo0NQBKkhJLQOyAG3qbWE9AAAA\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nrange x from 1 to 5 step 1\\r\\n| summarize make_list(x), stdev(x)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|list_x|stdev_x|\\r\\n|---|---|\\r\\n|[ 1, 2, 3, 4, 5]|1.58113883008419|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/stdev-aggfunction\",\"stdev-aggfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"stdevif\",\"Calculates the [standard deviation](stdev-aggfunction.md) of *expr* in records for which *predicate* evaluates to `true`.\",\"[!INCLUDE [data-explorer-agg-function-summarize-note](../../includes/data-explorer-agg-function-summarize-note.md)]\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`stdevif(`*expr*`,`*predicate*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *expr* | string | &check; | The expression used for the standards deviation aggregation calculation. |\\r\\n| *predicate* | string | &check; | The predicate that has to evaluate to `true` in order for *expr* to be added to the result. |\\r\\n\\r\\n## Returns\\r\\n\\r\\nReturns the standard deviation value of *expr* in records for which *predicate* evaluates to `true`.\",'The following example shows the standard deviation in a range of 1 to 100.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAytKzEtPVahQSCvKz1UwVCjJVzA0MFAoLkktUDDkqlEoLs3NTSzKrEoFCqWklmWmaVToAFWrKhgp2NoqGGgCABZzSGU/AAAA\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nrange x from 1 to 100 step 1\\r\\n| summarize stdevif(x, x % 2 == 0)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|stdevif_x|\\r\\n|---|\\r\\n|29.1547594742265|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/stdevif-aggfunction\",\"stdevif-aggfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"stdevp\",\"Calculates the standard deviation of *expr* across the group, considering the group as a [population](https://en.wikipedia.org/wiki/Statistical_population) for a large data set that is representative of the population.\",\"For a small data set that is a [sample](https://en.wikipedia.org/wiki/Sample_%28statistics%29), use [stdev() (aggregation function)](stdev-aggfunction.md).\\r\\n\\r\\n[!INCLUDE [data-explorer-agg-function-summarize-note](../../includes/data-explorer-agg-function-summarize-note.md)]\\r\\n\\r\\n## Formula\\r\\n\\r\\nThis function uses the following formula.\\r\\n\\r\\n![Image showing a Stdev sample formula.](images/stdevp-aggfunction/stdev-population.png)\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`stdevp(`*expr*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n|*expr* | string | &check; | The expression used for the standards deviation aggregation calculation. |\\r\\n\\r\\n## Returns\\r\\n\\r\\nReturns the standard deviation value of *expr* across the group.\",'> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAytKzEtPVahQSCvKz1UwVCjJVzBVKC5JLVAw5KpRKC7NzU0syqxKVchNzE6Nz8ksLtGo0NQBKkhJLSsAMgEGYndiPgAAAA==\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nrange x from 1 to 5 step 1\\r\\n| summarize make_list(x), stdevp(x)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|list_x|stdevp_x|\\r\\n|---|---|\\r\\n|[ 1, 2, 3, 4, 5]|1.4142135623731|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/stdevp-aggfunction\",\"stdevp-aggfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"strcat\",\"Concatenates between 1 and 64 arguments.\",\"## Syntax\\r\\n\\r\\n`strcat(`*argument1*`,` *argument2* [`,` *argument3* ... ]`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *argument1* ... *argumentN* | scalar | &check; | The expressions to concatenate.|\\r\\n\\r\\n> [!NOTE]\\r\\n> If the arguments aren't of string type, they'll be forcibly converted to string.\\r\\n\\r\\n## Returns\\r\\n\\r\\nThe arguments concatenated to a single string.\",'> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAysoyswrUSguKVKwBZHJiSUaShmpOTn5SjoKSgogojy/KCdFSRMA4dg7JykAAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint str = strcat(\"hello\", \" \", \"world\")\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|str|\\r\\n|---|\\r\\n|hello world|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/strcatfunction\",\"strcatfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"strcat_array\",\"Creates a concatenated string of array values using a specified delimiter.\",\"## Syntax\\r\\n\\r\\n`strcat_array(`*array*, *delimiter*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *array* | dynamic | &check; | An array of values to be concatenated.|\\r\\n| *delimeter* | string | &check; | The value used to concatenate the values in *array*.|\\r\\n\\r\\n## Returns\\r\\n\\r\\nThe input *array* values concatenated to a single string with the specified *delimiter*.\",'> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAysoyswrUSguKVKwBZHJiSXxiUVFiZUaKZV5ibmZyRrRhjoKRjoKxrGaOgpKunZKmgBWe4fjMgAAAA==\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint str = strcat_array(dynamic([1, 2, 3]), \"->\")\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|str|\\r\\n|---|\\r\\n|1->2->3|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/strcat-arrayfunction\",\"strcat-arrayfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"strcat_delim\",\"Concatenates between 2 and 64 arguments, using a specified delimiter as the first argument.\",\"## Syntax\\r\\n\\r\\n`strcat_delim(`*delimiter*, *argument1*, *argument2*[ , *argumentN*]`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *delimiter* | string | &check; | The string to be used as separator in the concatenation.|\\r\\n| *argument1* ... *argumentN* | scalar | &check; | The expressions to concatenate.|\\r\\n\\r\\n> [!NOTE]\\r\\n> If the arguments aren't of string type, they'll be forcibly converted to string.\\r\\n\\r\\n## Returns\\r\\n\\r\\nThe arguments concatenated to a single string with *delimiter*.\",\"> [!div class=\\\"nextstepaction\\\"]\\r\\n> <a href=\\\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAysoyswrUSguUbAFEkXJiSXxKak5mbka6rrqOgqGOgrqRkBa3RHEKdYEAPL2A8YtAAAA\\\" target=\\\"_blank\\\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint st = strcat_delim('-', 1, '2', 'A', 1s)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|st|\\r\\n|---|\\r\\n|1-2-A-00:00:01|\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/strcat-delimfunction\",\"strcat-delimfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"strcmp\",\"Compares two strings.\",\"The function starts comparing the first character of each string. If they're equal to each other, it continues with the following pairs until the characters differ or until the end of shorter string is reached.\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`strcmp(`*string1*`,` *string2*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *string1* | string | &check; | The first input string for comparison.|\\r\\n| *string2* | string | &check; | The second input string for comparison.|\\r\\n\\r\\n## Returns\\r\\n\\r\\nReturns an integer value indicating the relationship between the strings:\\r\\n\\r\\n* *<0* - the first character that doesn't match has a lower value in *string1* than in *string2*\\r\\n* *0* - the contents of both strings are equal\\r\\n* *>0* - the first character that doesn't match has a greater value in *string1* than in *string2*\",'> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA0tJLAHCpJxUjeKSosy8dEMrCK2jAKGNoHxNhWguBSBQcnRyVtKBkBCBxKRkVAGICrAwXEVKKlSIK5arRiG1oiQ1L0WhKLW4NKdEwRZkVXJuAcwFOlCbNQEUhY2inAAAAA==\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\ndatatable(string1:string, string2:string) [\\r\\n    \"ABC\",\"ABC\",\\r\\n    \"abc\",\"ABC\",\\r\\n    \"ABC\",\"abc\",\\r\\n    \"abcde\",\"abc\"\\r\\n]\\r\\n| extend result = strcmp(string1,string2)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|string1|string2|result|\\r\\n|---|---|---|\\r\\n|ABC|ABC|0|\\r\\n|abc|ABC|1|\\r\\n|ABC|abc|-1|\\r\\n|abcde|abc|1|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/strcmpfunction\",\"strcmpfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"string_size\",\"Returns the size, in bytes, of the input string.\",\"## Syntax\\r\\n\\r\\n`string_size(`*source*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *source* | string | &check; | The string for which to return the byte size.|\\r\\n\\r\\n## Returns\\r\\n\\r\\nReturns the length, in bytes, of the input string.\",'### String of letters\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAysoyswrUSjOrEpVsFUoLgHy0uNBPA2ljNScnHwlTQB9vNZzIQAAAA==\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint size = string_size(\"hello\")\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|size|\\r\\n|---|\\r\\n|5|\\r\\n\\r\\n### String of letters and symbols\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAysoyswrUSjOrEpVsFUoLgHy0uNBPA2lR5OWPZq04dGkdY8mrX80aZWSJgDJzHqdKwAAAA==\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint size = string_size(\"\\u24a6\\u24b0\\u24ae\\u24af\\u24aa\")\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|size|\\r\\n|---|\\r\\n|15|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/stringsizefunction\",\"stringsizefunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"strlen\",\"Returns the length, in characters, of the input string.\",\"> [!NOTE]\\r\\n> This function counts Unicode [code points](https://en.wikipedia.org/wiki/Code_point).\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`strlen(`*source*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *source* | string | &check; | The string for which to return the length.|\\r\\n\\r\\n## Returns\\r\\n\\r\\nReturns the length, in characters, of the input string.\",'### String of letters\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAysoyswrUchJzUsvyVCwVSguKQKyNZQyUnNy8pU0ATlWTM8eAAAA\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint length = strlen(\"hello\")\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|length|\\r\\n|---|\\r\\n|5|\\r\\n\\r\\n### String of letters and symbols\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAysoyswrUchJzUsvyVCwVSguKQKyNZQeTVr2aNKGR5PWPZq0/tGkVUqaAIvtpvwoAAAA\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint length = strlen(\"\\u24a6\\u24b0\\u24ae\\u24af\\u24aa\")\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|length|\\r\\n|---|\\r\\n|5|\\r\\n\\r\\n### String with grapheme\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA3WNsQ3DMAwE+0zxnePKQFbwJIT8iQgokkzSM2UZD2Uhva+8A/67aQ14WGF9Tuv546alyDRjWRCZeKt5IGUxSUGDOgQfk575JVI5fNgHbviPSMC4H2p0vJDaRvQ2bh3RRunDs8YF+EPCH4oAAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint strlen(\\'C\\u0327edilla\\') // the first character is a grapheme cluster\\r\\n                        // that requires 2 code points to represent\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|length|\\r\\n|---|\\r\\n|8|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/strlenfunction\",\"strlenfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"strrep\",\"Replicates a [string](scalar-data-types/string.md) the number of times specified.\",\"## Syntax\\r\\n\\r\\n`strrep(`*value*`,` *multiplier*`,` [ *delimiter* ]`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *value* | string | &check; | The string to replicate. |\\r\\n| *multiplier* | int | &check; | The amount of times to replicate the string. Must be a value from 1 to 1024.|\\r\\n| *delimiter* | string | | The delimeter used to separate the string replications. The default delimiter is an empty string.|\\r\\n\\r\\n> [!NOTE]\\r\\n> If *value* or *delimiter* isn't a `string`, they'll be forcibly converted to string.\\r\\n\\r\\n## Returns\\r\\n\\r\\nThe *value* string repeated the number of times as specified by *multiplier*, concatenated with *delimiter*.\\r\\n\\r\\nIf *multiplier* is more than the maximal allowed value of 1024, the input string will be repeated 1024 times.\",\"> [!div class=\\\"nextstepaction\\\"]\\r\\n> <a href=\\\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAysoyswrUUgrys+NLy4pUrBVAJJFqQUa6o5Ozuo6CkaaOhBJkCq4pKGRsY6xjrqeOky2JDM3FSFtXKxjpKOuoK4JAHPzDvRdAAAA\\\" target=\\\"_blank\\\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint from_str = strrep('ABC', 2), from_int = strrep(123,3,'.'), from_time = strrep(3s,2,' ')\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|from_str|from_int|from_time|\\r\\n|---|---|---|\\r\\n|ABCABC|123.123.123|00:00:03 00:00:03|\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/strrepfunction\",\"strrepfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"substring\",\"Extracts a substring from the source string starting from some index to the end of the string.\",\"Optionally, the length of the requested substring can be specified.\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`substring(`*source*`,` *startingIndex* [`,` *length*]`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *source* | string | &check; | The string from which to take the substring.|\\r\\n| *startingIndex* | int | &check; | The zero-based starting character position of the requested substring. If a negative number, the substring will be retrieved from the end of the source string.|\\r\\n| *length* | int | | The requested number of characters in the substring. The default behavior is to take from *startingIndex* to the end of the *source* string.|\\r\\n\\r\\n## Returns\\r\\n\\r\\nA substring from the given string. The substring starts at startingIndex (zero-based) character position and continues to the end of the string or length characters if specified.\",'```\\r\\nsubstring(\"123456\", 1)        // 23456\\r\\nsubstring(\"123456\", 2, 2)     // 34\\r\\nsubstring(\"ABCD\", 0, 2)       // AB\\r\\nsubstring(\"123456\", -2, 2)    // 56\\r\\n```',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/substringfunction\",\"substringfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"sum\",\"Calculates the sum of *expr* across the group.\",\"[!INCLUDE [data-explorer-agg-function-summarize-note](../../includes/data-explorer-agg-function-summarize-note.md)]\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`sum(`*expr*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *expr*  string | &check; | The expression used for the aggregation calculation. |\\r\\n\\r\\n## Returns\\r\\n\\r\\nReturns the sum value of *expr* across the group.\",'This example returns the total number of deaths by state.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAwsuyS/KdS1LzSspVuCqUSguzc1NLMqsSlUAiznnl+aV2CaDSA1NHYWQ/JLEHJfUxJIM58Ti1GIFW5B6DbBAsUtmUWpyiaZCUqVCcEliSSrYtPyiEpAAmj4A7Xtp83QAAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nStormEvents \\r\\n| summarize EventCount=count(), TotalDeathCases = sum(DeathsDirect) by State \\r\\n| sort by TotalDeathCases\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\nThe results table shown includes only the first 10 rows.\\r\\n\\r\\n| State                | event_count | TotalDeathCases |\\r\\n| -------------------- | ----------- | --------------- |\\r\\n| TEXAS                | 4701        | 71              |\\r\\n| FLORIDA              | 1042        | 57              |\\r\\n| CALIFORNIA           | 898         | 48              |\\r\\n| ILLINOIS             | 2022        | 29              |\\r\\n| ALABAMA              | 1315        | 29              |\\r\\n| MISSOURI             | 2016        | 20              |\\r\\n| NEW YORK             | 1750        | 19              |\\r\\n| KANSAS               | 3166        | 17              |\\r\\n| GEORGIA              | 1983        | 17              |\\r\\n| TENNESSEE            | 1125        | 17              |\\r\\n| ...   | ... | ... |',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/sum-aggfunction\",\"sum-aggfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"sumif\",\"Calculates the sum of *expr* in records for which *predicate* evaluates to `true`.\",'[!INCLUDE [data-explorer-agg-function-summarize-note](../../includes/data-explorer-agg-function-summarize-note.md)]\\r\\n\\r\\nYou can also use the [sum()](sum-aggfunction.md) function, which sums rows without predicate expression.\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`sumif(`*expr*`,`*predicate*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *expr* | string | &check; | The expression used for the aggregation calculation. |\\r\\n| *predicate* | string | &check; | The expression used to filter rows. If the predicate evaluates to `true`, the row will be included in the result.|\\r\\n\\r\\n## Returns\\r\\n\\r\\nReturns the sum of *expr* for which *predicate* evaluates to `true`.\\r\\n\\r\\n## Example showing the sum of damages based on no casualty count\\r\\n\\r\\nThis example shows the sum total damage for storms without casualties.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAwsuyS/KdS1LzSsp5qpRKC7NzU0syqxKVXBJzE1MT/XLd04sLk3MKclMLbYFSmamaWhAZJyL8guKtSHsACA7taikUlNHwyU1sSSj2CWzKDW5RBvC8cxLAXM1bW0NNBWSKhWCSxJLUgF0hdWZeAAAAA==\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nStormEvents\\r\\n| summarize DamageNoCasualties=sumif((DamageCrops+DamageProperty),(DeathsDirect+DeathsIndirect)==0) by State\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\nThe results table shown includes only the first 10 rows.\\r\\n\\r\\n| State                | DamageNoCasualties |\\r\\n| -------------------- | ------------------ |\\r\\n| TEXAS                | 242638700          |\\r\\n| KANSAS               | 407360000          |\\r\\n| IOWA                 | 135353700          |\\r\\n| ILLINOIS             | 120394500          |\\r\\n| MISSOURI             | 1096077450         |\\r\\n| GEORGIA              | 1077448750         |\\r\\n| MINNESOTA            | 230407300          |\\r\\n| WISCONSIN            | 241550000          |\\r\\n| NEBRASKA             | 70356050           |\\r\\n| NEW YORK             | 58054000           |\\r\\n| ... | ... |\\r\\n\\r\\n## Example showing the sum of birth dates\\r\\n\\r\\nThis example shows the sum of the birth dates for all names that have more than 4 letters.\\r\\n\\r\\n```\\r\\nlet T = datatable(name:string, day_of_birth:long)\\r\\n[\\r\\n   \"John\", 9,\\r\\n   \"Paul\", 18,\\r\\n   \"George\", 25,\\r\\n   \"Ringo\", 7\\r\\n];\\r\\nT\\r\\n| summarize sumif(day_of_birth, strlen(name) > 4)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|sumif_day_of_birth|\\r\\n|----|\\r\\n|32|',\"\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/sumif-aggfunction\",\"\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.OperatorToken,\"summarize\",\"Produces a table that aggregates the content of the input table.\",\"## Syntax\\r\\n\\r\\n*T* `| summarize` [ *SummarizeParameters* ]\\r\\n      [[*Column* `=`] *Aggregation* [`,` ...]]\\r\\n    [`by`\\r\\n      [*Column* `=`] *GroupExpression* [`,` ...]]\\r\\n\\r\\n## Parameters\\r\\n\\r\\n|Name|Type|Required|Description|\\r\\n|--|--|--|--|\\r\\n|*Column*|string||The name for the result column. Defaults to a name derived from the expression.|\\r\\n|*Aggregation*|string|&check;|A call to an [aggregation function](aggregation-functions.md) such as `count()` or `avg()`, with column names as arguments.|\\r\\n|*GroupExpression*|scalar|&check;|A scalar expression that can reference the input data. The output will have as many records as there are distinct values of all the group expressions.|\\r\\n|*SummarizeParameters*|string||Zero or more space-separated parameters in the form of *Name* `=` *Value* that control the behavior. See [supported parameters](#supported-parameters).\\r\\n\\r\\n> [!NOTE]\\r\\n> When the input table is empty, the output depends on whether *GroupExpression*\\r\\n> is used:\\r\\n>\\r\\n> * If *GroupExpression* is not provided, the output will be a single (empty) row.\\r\\n> * If *GroupExpression* is provided, the output will have no rows.\\r\\n\\r\\n### Supported parameters\\r\\n\\r\\n|Name  |Description  |\\r\\n  |---|---|\\r\\n  |`hint.num_partitions` |Specifies the number of partitions used to share the query load on cluster nodes. See [shuffle query](shufflequery.md)  |\\r\\n  |`hint.shufflekey=<key>` |The `shufflekey` query shares the query load on cluster nodes, using a key to partition data. See [shuffle query](shufflequery.md) |\\r\\n  |`hint.strategy=shuffle` |The `shuffle` strategy query shares the query load on cluster nodes, where each node will process one partition of the data. See [shuffle query](shufflequery.md)  |\\r\\n\\r\\n## Returns\\r\\n\\r\\nThe input rows are arranged into groups having the same values of the `by` expressions. Then the specified aggregation functions are computed over each group, producing a row for each group. The result contains the `by` columns and also at least one column for each computed aggregate. (Some aggregation functions return multiple columns.)\\r\\n\\r\\nThe result has as many rows as there are distinct combinations of `by` values\\r\\n(which may be zero). If there are no group keys provided, the result has a single\\r\\nrecord.\\r\\n\\r\\nTo summarize over ranges of numeric values, use `bin()` to reduce ranges to discrete values.\\r\\n\\r\\n> [!NOTE]\\r\\n>\\r\\n> * Although you can provide arbitrary expressions for both the aggregation and grouping expressions, it's more efficient to use simple column names, or apply `bin()` to a numeric column.\\r\\n> * The automatic hourly bins for datetime columns is no longer supported. Use explicit binning instead. For example, `summarize by bin(timestamp, 1h)`.\\r\\n\\r\\n## Aggregates default values\\r\\n\\r\\nThe following table summarizes the default values of aggregations:\\r\\n\\r\\n| Operator | Default value |\\r\\n|--|--|\\r\\n| `count()`, `countif()`, `dcount()`, `dcountif()` | 0 |\\r\\n| `make_bag()`, `make_bag_if()`, `make_list()`, `make_list_if()`, `make_set()`, `make_set_if()` | empty dynamic array              ([]) |\\r\\n| All others | null |\\r\\n\\r\\nWhen using these aggregates over entities that includes null values, the null values will be ignored and won't participate in the calculation (see examples below).\",'![Summarize price by fruit and supplier.](images/summarizeoperator/summarize-price-by-supplier.png)\\r\\n\\r\\n### Unique combination\\r\\n\\r\\nThe following query determines what unique combinations of `State` and `EventType` there are for storms that resulted in direct injury. There are no aggregation functions, just group-by keys. The output will just show the columns for those results.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAwsuyS/KdS1LzSsp5uWqUSjPSC1KVfDMyyotykwtdsksSk0uUbBTMADJFZfm5iYWZValKiRVKgSXJJak6iiAdYZUFqQCAEZA2i9IAAAA\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nStormEvents\\r\\n| where InjuriesDirect > 0\\r\\n| summarize by State, EventType\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\nThe following table shows only the first 5 rows. To see the full output, run the query.\\r\\n\\r\\n| State | EventType |\\r\\n|---|---|\\r\\n| TEXAS | Thunderstorm Wind |\\r\\n| TEXAS | Flash Flood |\\r\\n| TEXAS | Winter Weather |\\r\\n| TEXAS | High Wind |\\r\\n| TEXAS | Flood |\\r\\n|...|...|\\r\\n\\r\\n### Minimum and maximum timestamp\\r\\n\\r\\nFinds the minimum and maximum heavy rain storms in Hawaii. There\\'s no group-by clause, so there\\'s just one row in the output.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA0WMsQrCQBBEe8F/GK5S0E+4ImDAFGmSgPViFjzh9sJlExPx42VFsRvevJlWU47lzKLjdvPC48aZ0Sopw3u4c3EpqsqBpMfH6tbh2zDNKxoK4mw45HTnq+I0ZdKQBB6l9F2IjKP9ZbVs5jjFSDk8GXUwLQbZ/Vb7A2paDNLyh28u8qFKpAAAAA==\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nStormEvents\\r\\n| where State == \"HAWAII\" and EventType == \"Heavy Rain\"\\r\\n| project Duration = EndTime - StartTime\\r\\n| summarize Min = min(Duration), Max = max(Duration)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n| Min | Max |\\r\\n|---|---|\\r\\n| 01:08:00 | 11:55:00 |\\r\\n\\r\\n### Distinct count\\r\\n\\r\\nCreate a row for each continent, showing a count of the cities in which activities occur. Because there are few values for \"continent\", no grouping function is needed in the \\'by\\' clause:\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAwsuyS/KdS1LzSsp5uWqUSguzc1NLMqsSlUIqSxILfZPCwbJF9umJOeX5pVogBWCZDQVkioVgksSS1LBuvKLSkACKHoALe01bFoAAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nStormEvents\\r\\n| summarize TypesOfStorms=dcount(EventType) by State\\r\\n| sort by TypesOfStorms\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\nThe following table shows only the first 5 rows. To see the full output, run the query.\\r\\n\\r\\n| State | TypesOfStorms |\\r\\n|---|---|\\r\\n| TEXAS | 27 |\\r\\n| CALIFORNIA | 26 |\\r\\n| PENNSYLVANIA | 25 |\\r\\n| GEORGIA | 24 |\\r\\n| ILLINOIS | 23 |\\r\\n|...|...|\\r\\n\\r\\n### Histogram\\r\\n\\r\\nThe following example calculates a histogram storm event types that had storms lasting longer than 1 day. Because `Duration` has many values, use `bin()` to group its values into 1-day intervals.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA02NQQ6CQAxF9ybeoUtIcOEBxo2ycwcXGKCRMZmWlA4GwuG1EKObn+bn9f1KWWI5Iel4PKwwCD+xVdiaeh6wgFsSr4EJHJTU1SEinKBSL2q3Pb16FPxxFzh3Vo8pRi9hwd125UTqWsssh2b+37gjPbR3TaDsqyk+lnzTsKjhO/MGpa0usbAAAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nStormEvents\\r\\n| project EventType, Duration = EndTime - StartTime\\r\\n| where Duration > 1d\\r\\n| summarize EventCount=count() by EventType, Length=bin(Duration, 1d)\\r\\n| sort by Length\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n| EventType | Length | EventCount |\\r\\n|---|---|---|\\r\\n| Drought | 30.00:00:00 | 1646 |\\r\\n| Wildfire | 30.00:00:00 | 11 |\\r\\n| Heat | 30.00:00:00 | 14 |\\r\\n| Flood | 30.00:00:00 | 20 |\\r\\n| Heavy Rain | 29.00:00:00 | 42 |\\r\\n| ... | ... | ... |\\r\\n\\r\\n### Aggregates default values\\r\\n\\r\\nWhen the input of `summarize` operator has at least one empty group-by key, its result is empty, too.\\r\\n\\r\\nWhen the input of `summarize` operator doesn\\'t have an empty group-by key, the result is the default values of the aggregates used in the `summarize`:\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAz2PwQ7CIBBE7yb+A0cwHLz0YqI/YkyzBaQbAU3ZNtT48S7EGg4zmTe7WSwQvyE4WU7hmby63va7j8hzjDDh2wlIa1/OBA/Xs5VFaQGT7yMUjn9OFi0OG8C0AUx/sPg2OcwYbDajiyDpadcEEQ27TBOmWlFcagur1nnWl5uMS4T1Ri26jqMxBEZCZ7JuaSU+eFO8114RF3HkgCx6l6nBhb8EyfAe9QXbqS6i+AAAAA==\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\ndatatable(x:long)[]\\r\\n| summarize any_x=take_any(x), arg_max_x=arg_max(x, *), arg_min_x=arg_min(x, *), avg(x), buildschema(todynamic(tostring(x))), max(x), min(x), percentile(x, 55), hll(x) ,stdev(x), sum(x), sumif(x, x > 0), tdigest(x), variance(x)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|any_x|arg_max_x|arg_min_x|avg_x|schema_x|max_x|min_x|percentile_x_55|hll_x|stdev_x|sum_x|sumif_x|tdigest_x|variance_x|\\r\\n|---|---|---|---|---|---|---|---|---|---|---|---|---|---|\\r\\n||||NaN||||||0|0|0||0|\\r\\n\\r\\nThe result of `avg_x(x)` is `NaN` due to dividing by 0.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA0tJLAHCpJxUjQqrnPy8dM3oWF6uGoXi0tzcxKLMqlQFheT80rwSjQpNHQgrM02jQsFOwUBTQUchBSGXApfUUYDIAwDGwdg7WgAAAA==\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\ndatatable(x:long)[]\\r\\n| summarize  count(x), countif(x > 0) , dcount(x), dcountif(x, x > 0)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|count_x|countif_|dcount_x|dcountif_x|\\r\\n|---|---|---|---|\\r\\n|0|0|0|0|\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA0tJLAHCpJxUjQqrnPy8dM3oWF6uGoXi0tzcxKLMqlQFhdzE7NT44tQSjQpNHQgnJ7MYxAMATGERsTsAAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\ndatatable(x:long)[]\\r\\n| summarize  make_set(x), make_list(x)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|set_x|list_x|\\r\\n|---|---|\\r\\n|[]|[]|\\r\\n\\r\\nThe aggregate avg sums all the non-nulls and counts only those which participated in the calculation (won\\'t take nulls into account).\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAy2KSwqAIBgG90F3+JYKbQxaehihXxF8hI/Q6PAptJqBmaSCITToFD0ESsSOXOiCWJcX1AqFEx0SVmvWICXEhkTKsVCd478fnM89V+9Vsg9NY31UdZvBD+MI2XFlAAAA\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nrange x from 1 to 2 step 1\\r\\n| extend y = iff(x == 1, real(null), real(5))\\r\\n| summarize sum(y), avg(y)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|sum_y|avg_y|\\r\\n|---|---|\\r\\n|5|5|\\r\\n\\r\\nThe regular count will count nulls:\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAy3KTQqAIBAG0H3QHb6lA20MWnoYqTEEf2JU0OjwEbR7iyc2nYwOJzlCo2asKJUv6Hl6wL1yOjBg4J1THcZALxC2QaUWAv3eiL5eWoxW/M3Yc0tVDXoBSiga018AAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nrange x from 1 to 2 step 1\\r\\n| extend y = iff(x == 1, real(null), real(5))\\r\\n| summarize count(y)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|count_y|\\r\\n|---|\\r\\n|2|\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA03KSwqAIBRG4XnQHv6hQhODhq4lhK4h+YirgkWLr6BBs3PgYxNXQoPlFKBQEkbkQjtU312gViguOKDhrBUNWkMNYDJexOq9/HqS8uW5hmDYnYRgNpozFXE85Dc305SXFm8AAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nrange x from 1 to 2 step 1\\r\\n| extend y = iff(x == 1, real(null), real(5))\\r\\n| summarize make_set(y), make_set(y)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|set_y|set_y1|\\r\\n|---|---|\\r\\n|[5.0]|[5.0]|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/summarizeoperator\",\"summarizeoperator.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"table\",\"The table() function references a table by providing its name as an expression of type `string`.\",\"## Syntax\\r\\n\\r\\n`table(` *TableName* [`,` *DataScope*] `)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n|*TableName* | string | &check; | The name of the table being referenced. The value of this expression must be constant at the point of call to the function, meaning it cannot vary by the data context.|\\r\\n| *DataScope* | string | | Used to restrict the table reference to data according to how this data falls under the table's effective [cache policy](../management/cachepolicy.md). If used, the actual argument must be one of the [Valid data scope values](#valid-data-scope-values).\\r\\n\\r\\n### Valid data scope values\\r\\n\\r\\n|Value|Description|\\r\\n|--|--|\\r\\n| `hotcache`| Only data that is categorized as hot cache will be referenced.|\\r\\n| `all`| All the data in the table will be referenced.|\\r\\n| `default`| The default is `all`, except if it has been set to `hotcache` by the cluster admin.|\\r\\n\\r\\n## Returns\\r\\n\\r\\n`table(T)` returns:\\r\\n\\r\\n* Data from table *T* if a table named *T* exists.\\r\\n* Data returned by function *T* if a table named *T* doesn't exist but a function named *T* exists. Function *T* must take no arguments and must return a tabular result.\\r\\n* A semantic error is raised if there's no table named *T* and no function named *T*.\",'### Use table() to access table of the current database\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAytJTMpJ1VAPLskvynUtS80rKVbXVKhRSM4vzSsBAIdoofIcAAAA\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\ntable(\\'StormEvents\\') | count\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|Count|\\r\\n|---|\\r\\n|59066|\\r\\n\\r\\n### Use table() inside let statements\\r\\n\\r\\nThe query above can be rewritten as a query-defined function (let statement) that receives a parameter `tableName` - which is passed into the table() function.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA8tJLVFIy89XsFXQKElMykn1S8xNtSouKcrMS9fkquZSAAKwOEJWU6FGITm/NK+Eq9aaC6hVQz24JL8o17UsNa+kWF0TAD3GJXVRAAAA\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nlet foo = (tableName:string)\\r\\n{\\r\\n    table(tableName) | count\\r\\n};\\r\\nfoo(\\'StormEvents\\')\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|Count|\\r\\n|---|\\r\\n|59066|\\r\\n\\r\\n### Use table() inside Functions\\r\\n\\r\\nThe same query as above can be rewritten to be used in a function that \\r\\nreceives a parameter `tableName` - which is passed into the table() function.\\r\\n\\r\\n```\\r\\n.create function foo(tableName:string)\\r\\n{\\r\\n    table(tableName) | count\\r\\n};\\r\\n```\\r\\n\\r\\n> [!NOTE]\\r\\n> Such functions can be used only locally and not in the cross-cluster query.\\r\\n\\r\\n### Use table() with non-constant parameter\\r\\n\\r\\nA parameter, which isn\\'t a scalar constant string, can\\'t be passed as a parameter to the `table()` function.\\r\\n\\r\\nBelow, given an example of workaround for such case.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA8tJLVEIMVSwVSgoyswrUaiwNbTmygGJGSGJGUHE4pMz8vOLU4ESGvHFqTmpySX5RVbFJUBF6Zpc1VwKQFCal5mfB2ZpAE2tUSjPSC1KVYCrVrC1VVAPMVTX1IGqMcKlxkhdk6vWmgtqpQZYAADWO8bZrAAAAA==\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nlet T1 = print x=1;\\r\\nlet T2 = print x=2;\\r\\nlet _choose = (_selector:string)\\r\\n{\\r\\n    union\\r\\n    (T1 | where _selector == \\'T1\\'),\\r\\n    (T2 | where _selector == \\'T2\\')\\r\\n};\\r\\n_choose(\\'T2\\')\\r\\n\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|x|\\r\\n|---|\\r\\n|2|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/tablefunction\",\"tablefunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.OperatorToken,\"take\",\"Return up to the specified number of rows.\",\"There is no guarantee which records are returned, unless\\r\\nthe source data is sorted.\\r\\n\\r\\n> The `take` and `limit` operators are equivalent\\r\\n\\r\\n> [!NOTE]\\r\\n> `take` is a simple, quick, and efficient way to view a small sample of records when browsing data interactively, but be aware that it doesn't guarantee any consistency in its results when executing multiple times, even if the data set hasn't changed.\\r\\n> Even if the number of rows returned by the query isn't explicitly limited by the query (no `take` operator is used), Kusto limits that number by default. For more details, see [Kusto query limits](../concepts/querylimits.md).\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`take` *NumberOfRows*\\r\\n\\r\\n## Parameters\\r\\n\\r\\n|Name|Type|Required|Description|\\r\\n|--|--|--|--|\\r\\n|*NumberOfRows*|int|&check;|The number of rows to return.|\\r\\n\\r\\n## Paging of query results\\r\\n\\r\\nMethods for implementing paging include:\\r\\n\\r\\n* Export the result of a query to an external storage and paging through the\\r\\n   generated data.\\r\\n* Write a middle-tier application that provides a stateful paging API by caching\\r\\n   the results of a Kusto query.\\r\\n* Use pagination in [Stored query results](../management/stored-query-results.md#pagination).\",'> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAwsuyS/KdS1LzSspVqhRKEnMTlUwBQDEz2b8FAAAAA==\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nStormEvents | take 5\\r\\n```\\r\\n\\r\\n## See also\\r\\n\\r\\n* [sort operator](sort-operator.md)\\r\\n* [top operator](topoperator.md)\\r\\n* [top-nested operator](topnestedoperator.md)',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/takeoperator\",\"takeoperator.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"take_any\",\"Arbitrarily chooses one record for each group in a [summarize operator](summarizeoperator.md),\\r\\nand returns the value of one or more expressions over each such record.\",\"> **Deprecated aliases:** any()\\r\\n\\r\\n> [!NOTE]\\r\\n> The deprecated version adds `any_` prefix to the columns returned by the `any()` aggregation.\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`take_any(`*expr_1* [`,` *expr_2* ...]`)`\\r\\n\\r\\n`take_any(`*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *expr_N* | string | &check; | The expression used for selecting a record. If the wildcard value (`*`) is given in place of an expression, all records will be selected.|\\r\\n\\r\\n## Returns\\r\\n\\r\\nThe `take_any` aggregation function returns the values of the expressions calculated\\r\\nfor each of the records selected Indeterministically from each group of the summarize operator.\\r\\n\\r\\nIf the `*` argument is provided, the function behaves as if the expressions are all columns\\r\\nof the input to the summarize operator barring the group-by columns, if any.\\r\\n\\r\\n## Remarks\\r\\n\\r\\nThis function is useful when you want to get a sample value of one or more columns\\r\\nper value of the compound group key.\\r\\n\\r\\nWhen the function is provided with a single column reference, it will attempt to\\r\\nreturn a non-null/non-empty value, if such value is present.\\r\\n\\r\\nAs a result of the indeterministic nature of this function, using this function multiple times in\\r\\na single application of the `summarize` operator isn't equivalent to using\\r\\nthis function a single time with multiple expressions. The former may have each application\\r\\nselect a different record, while the latter guarantees that all values are calculated\\r\\nover a single record (per distinct group).\",'Show indeterministic State:\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/kvc6bc487453a064d3c9de.northeurope/databases/NewDatabase1?query=H4sIAAAAAAAAAwsuyS/KdS1LzSsp5uWqUSguzc1NLMqsSlUoScxOjU/Mq9QILkksSdUEALgBS0YoAAAA\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nStormEvents\\r\\n| summarize take_any(State)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|State|\\r\\n|---|\\r\\n|ATLANTIC SOUTH|\\r\\n\\r\\nShow all the details for a random record:\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/kvc6bc487453a064d3c9de.northeurope/databases/NewDatabase1?query=H4sIAAAAAAAAAwsuyS/KdS1LzSsp5uWqUSgoys9KTS5RCC5JLCoJycxN1VFwLcgszk9J9UzRAYmWgERAykMqC1JBOopLc3MTizKrUhVKErNT4xPzKjW0NAGzMGIFVgAAAA==\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nStormEvents\\r\\n| project StartTime, EpisodeId, State, EventType\\r\\n| summarize take_any(*)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|StartTime|EpisodeId|State|EventType|\\r\\n|---|---|---|---|\\r\\n|2007-09-29 08:11:00.0000000|11091|ATLANTIC SOUTH|Waterspout|\\r\\n\\r\\nShow all the details of a random record for each State starting with \\'A\\':\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/kvc6bc487453a064d3c9de.northeurope/databases/NewDatabase1?query=H4sIAAAAAAAAAyWMMQ7CMBAEeyT+cEoFKJ+gSEGd9OggK8Ugx9bdQmTE4xMr7c7O9EwWuy9m+vHwl2WCQXoqIU41+hI4SXNtKs2WXniycuMQIlrpcvA04ja2u7UtNTaUjGr4J0a18INQ37jrXE6XszzKfl4BiZpjAH0AAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nStormEvents\\r\\n| where State startswith \"A\"\\r\\n| project StartTime, EpisodeId, State, EventType\\r\\n| summarize take_any(*) by State\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|State|StartTime|EpisodeId|EventType|\\r\\n|---|---|---|---|\\r\\n|ALASKA|2007-02-01 00:00:00.0000000|1733|Flood|\\r\\n|ATLANTIC SOUTH|2007-09-29 08:11:00.0000000|11091|Waterspout|\\r\\n|ATLANTIC NORTH|2007-11-27 00:00:00.0000000|11523|Marine Thunderstorm Wind|\\r\\n|ARIZONA|2007-12-01 10:40:00.0000000|11955|Flash Flood|\\r\\n|AMERICAN SAMOA|2007-12-07 14:00:00.0000000|13183|Flash Flood|\\r\\n|ARKANSAS|2007-12-09 16:00:00.0000000|11319|Lightning|\\r\\n|ALABAMA|2007-12-15 18:00:00.0000000|12580|Heavy Rain|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/take-any-aggfunction\",\"take-any-aggfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"take_anyif\",\"Arbitrarily selects one record for each group in a [summarize operator](summarizeoperator.md) in records for which the *predicate*\\r\\nis 'true'. The function returns the value of an expression over each such record.\",\"This function is useful when you want to get a sample value of one column per value of the compound group key, subject to some predicate that is *true*. If such a value is present, the function attempts to return a non-null/non-empty value.\\r\\n\\r\\n> **Deprecated aliases:** anyif()\\r\\n\\r\\n> [!NOTE]\\r\\n> The deprecated version adds `any_` prefix to the columns returned by the `any()` aggregation.\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`take_anyif(` *expr*`,` *predicate* `)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *expr* | string | &check; | The expression used for selecting a record. |\\r\\n| *predicate* | string | &check; | Indicates which records may be considered for evaluation. |\\r\\n\\r\\n## Returns\\r\\n\\r\\nThe `take_anyif` aggregation function returns the value of the expression calculated\\r\\nfor each of the records randomly selected from each group of the summarize operator. Only records for which *predicate* returns 'true' may be selected. If the predicate doesn't return 'true', a null value is produced.\",'Pick a random EventType from Storm events, where event description has a key phrase.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/kvc6bc487453a064d3c9de.northeurope/databases/NewDatabase1?query=H4sIAAAAAAAAAwsuyS/KdS1LzSsp5uWqUSguzc1NLMqsSlUoScxOjU/Mq8xM0wBLh1QWpOoogJl+iUVFiSWZZakKGYnFCurFJUX5eekK5Zl5KeqaABMQsZRQAAAA\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nStormEvents\\r\\n| summarize take_anyif(EventType, EventNarrative has \\'strong wind\\')\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|EventType|\\r\\n|---|\\r\\n|Strong Wind|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/take-anyif-aggfunction\",\"take-anyif-aggfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"tan\",\"Returns the tangent value of the specified number.\",\"## Syntax\\r\\n\\r\\n`tan(`*x*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *x* | real | &check; | The number for which to calculate the tangent. |\\r\\n\\r\\n## Returns\\r\\n\\r\\nThe result of `tan(`*x*`)`\",\"\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/tanfunction\",\"\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"tdigest\",\"Calculates the intermediate results of [`percentiles()`](percentiles-aggfunction.md) across the group.\",\"[!INCLUDE [data-explorer-agg-function-summarize-note](../../includes/data-explorer-agg-function-summarize-note.md)]\\r\\n\\r\\nFor more information, see the [underlying algorithm (T-Digest) and the estimated error](percentiles-aggfunction.md#estimation-error-in-percentiles).\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`tdigest(`*expr* [`,` *weight*]`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *expr* | string | &check; | The expression used for the aggregation calculation. |\\r\\n| *weight* | string | | The weights of the values for the aggregation calculation. |\\r\\n\\r\\n## Returns\\r\\n\\r\\nThe Intermediate results of weighted percentiles of `*expr*` across the group.\\r\\n\\r\\n> [!TIP]\\r\\n>\\r\\n>- Use the aggregation function [tdigest_merge()](tdigest-merge-aggfunction.md) to merge the output of `tdigest` again across another group.\\r\\n>- Use the function [percentile_tdigest()](percentile-tdigestfunction.md) to calculate the percentile/percentilew of the `tdigest` results.\",'This example shows the results of the tdigest percentiles sorted by state.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/kvc6bc487453a064d3c9de.northeurope/databases/NewDatabase1?query=H4sIAAAAAAAAAwsuyS/KdS1LzSsp5uWqUSguzc1NLMqsSlUoSclMTy0u0XBJzE1MTw0oyi9ILSqp1FRIqlQILkksSQUAy2eq1DkAAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nStormEvents\\r\\n| summarize tdigest(DamageProperty) by State\\r\\n```\\r\\n\\r\\nThe results table shown includes only the first 10 rows.\\r\\n\\r\\n| State | tdigest_DamageProperty |\\r\\n|--|--|\\r\\n| NEBRASKA | [[7],[800,250,300000,5000,240000,1500000,20000,550000,0,75000,100000,1000,10000,30000,13000,2000000,1000000,650000,125000,35000,7000,2500000,4000000,450000,85000,460000,500000,6000,150000,350000,4000,72500,1200000,180000,400000,25000,50000,2000,45000,8000,120000,200000,40000,1200,15000,55000,3000,250000],[5,1,3,72,1,1,44,1,1351,12,24,17,46,13,6,1,2,1,2,6,8,1,1,1,2,1,4,2,6,1,2,2,1,1,2,26,18,12,2,2,1,7,6,4,28,4,6,6]] |\\r\\n| MINNESOTA | [[7],[700,500,2000000,2500,1200000,12000000,16000,7000000,0,300000,425000,750,6000,30000,10000,22000000,10000000,9600000,600000,50000,4000,27000000,35000000,4000000,400000,5000000,6000000,3000,750000,2500000,2000,250000,11000000,38000000,3000000,20000,120000,1000,100000,5000,500000,1000000,60000,800,15000,200000,1500,1500000,900000],[1,3,1,3,1,2,1,1,1793,1,1,2,2,2,3,1,1,1,2,2,1,1,1,1,2,1,2,1,1,1,6,1,1,1,3,5,1,5,2,5,2,2,1,2,2,2,2,1,1]] |\\r\\n| KANSAS | [[7],[667,200,6000000,3400,80000,300000,18875,210000,0,45857,750000,37500000,10000,81150000,15000000,6400000,2570000,225000,59400,25000,5000,400000,7000000,4500000,2500000,6500000,200000,4500,70000,122500,2785,12000000,1900000,18200000,150000,1150000,27000000,2000,30000,2000000,250000000,75000,26000,1500,1500000,1000000,2500,100000,21600000,50000,335000,600000,175000,500000,160000,51000,40000,20000,15000,252500,7520,350000,250000,3400000,1000,338000,16000000,106000,4840000,305000,540000,337500,9800000,45000,12500,700000,4000000,71000,30000000,35000,3700000,22000,56000],[12,2,2,5,2,3,8,1,2751,7,2,1,37,1,1,1,1,2,5,12,33,8,1,1,1,2,10,1,5,2,7,1,4,1,5,1,1,9,11,4,1,5,2,6,4,8,2,23,1,44,2,3,2,3,1,1,1,18,5,2,5,1,7,1,25,1,1,3,1,1,1,2,6,1,1,2,1,1,1,3,1,1,1]] |\\r\\n| NEW MEXICO | [[7],[600,500,2500000,7000,1500,28000,40000,10000,0,500000,20000,1000,21000,70000,25000,3500000,200000,16500000,50000,100000,15000,4000,5000,2000],[1,3,1,1,1,1,1,7,466,1,7,4,1,1,2,1,1,1,1,2,1,4,10,8]] |\\r\\n| KENTUCKY | [[7],[600,200,700000,5000,400000,12000,15000,100000,0,60000,80000,1000,9000,20000,10000,50000,30000,300000,120000,25000,7000,3000,500000,11500000,75000,35000,8000,6000,150000,1500000,4000,56000,1911,250000,2500000,18000,45000,2000],[6,2,1,42,1,3,9,8,999,2,1,52,1,21,37,25,7,2,3,14,11,35,1,1,6,10,9,10,4,1,13,1,9,3,1,2,1,37]] |\\r\\n| VIRGINIA | [[7],[536,500,125000,3000,100000,7250,8000,60000,0,40000,50000,956,6000,11500,7000,25000,15000,98000,70000,12000,4000,2000,120000,1000000,45000,16000,5000,3500,75000,175000,2500,30000,1000,80000,300000,10000,20000,1500],[7,11,1,48,2,2,2,1,1025,2,6,9,2,2,1,5,16,1,3,5,12,122,1,1,1,1,64,2,2,1,1,7,209,3,2,42,19,6]] |\\r\\n| OREGON | [[7],[5000,1000,60000,434000,20000,50000,100000,500000,0,1500000,20400000,6000,62600000],[8,2,1,1,1,1,3,1,401,1,1,1,1]] |\\r\\n| ALASKA | [[7],[5000,1000,25000,700000,12060,15000,100000,1600000,0,10000],[5,1,1,1,1,2,1,2,242,1]] |\\r\\n| CONNECTICUT | [[7],[5000,1000,2000000,0,50000,750000,6000],[1,1,1,142,1,1,1]] |\\r\\n| NEVADA | [[7],[5000,1000,200000,1000000,30000,40000,297000,5000000,0,10000],[4,2,1,1,1,1,1,1,148,3]] |',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/tdigest-aggfunction\",\"tdigest-aggfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"tdigest_merge\",\"Merges tdigest results across the group.\",\"[!INCLUDE [data-explorer-agg-function-summarize-note](../../includes/data-explorer-agg-function-summarize-note.md)]\\r\\n\\r\\nFor more information about the underlying algorithm (T-Digest) and the estimated error, see [estimation error in percentiles](percentiles-aggfunction.md#estimation-error-in-percentiles).\\r\\n\\r\\n> The `tdigest_merge()` and `merge_tdigest()` functions are equivalent\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`tdigest_merge(`*expr*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n|*expr* | string | &check; | The expression used for the aggregation calculation.|\\r\\n\\r\\n## Returns\\r\\n\\r\\nReturns the merged tdigest values of *expr* across the group.\\r\\n\\r\\n> [!NOTE]\\r\\n>\\r\\n> * Use the function [percentile_tdigest()](percentile-tdigestfunction.md) to calculate the percentiles from the `tdigest_merge` results.\\r\\n> * All tdigests that are included in the same group must be of the same type.\",'> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAwsuyS/KdS1LzSsp5qpRKC7NzU0syqxKVQgoSnVMT3dJzE1MTw0oyi9ILSqptC1JyUxPLS7RQBXWVEiqVAguSSxJRTEhN7UoPTUeqqVYA5uBmgCTdTq/fgAAAA==\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nStormEvents\\r\\n| summarize PreAggDamageProperty=tdigest(DamageProperty) by State\\r\\n| summarize tdigest_merge(PreAggDamageProperty)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|merge_tdigests_PreAggDamageProperty|\\r\\n|---|\\r\\n|[[7],[91,30,73667,966,110000000,24428,2500,20000,16500000,6292,40000,123208,1000000,133091,90583,20000000,977000,20007,547000,19000000,1221,9600000,300000,70072,55940,75000,417500,1410000,20400000,331500,15000000,62000000,50222,121690000,160400,6200000,252500,450,11000000,2200000,5700000,11566,12000000,263,50000,200000,3700000,13286,171000,100000000,28200000,65000000,17709,30693,16000000,7938,5200,2875,1500000,3480000,151100000,9800000,18200000,21600000,199,2570000,30000000,38000000,72000,891250,500000000,26385,80092,27000000,35000000,754500,11500000,3262500,113945,5000,62429,175294,9071,6500000,3321,15159,21850000,300000000,22683,3000,10000000,60055,600000,52000000,496000,15000,50000000,10140000,11900000,2100000,62600000,77125,310667,70000000,101000000,2088,1608571,19182,400000,179833,775000,612000,150000000,13500000,2600000,1250000,65400,45000000,297000,2500000,40000000,24846,30000,59067,1893,15762,142571,220666,195000,2000000,355000,2275000,6000000,46000000,38264,50857,4002,97333,27750,1000,1111429,7043,272500,455200,503,37500000,10000,1489,0,1200000,110538,60000000,250000,10730,1901429,291000,698750,649000,2716667,137000000,6400000,29286,41051,6850000,102000,4602,80000000,250000000,371667,8000000,729,8120000,5000000,20830,152400,803300,349667,202000,207000,81150000,48000000,750000,26000000,8900000,239143,75000000,248000,14342,74857,5992,500000,150000,938000,10533333,45248,105000000,7000000,35030,4000000,2000,7692500,3000000,25000000,4500000,87222,12054,100000,25000,9771,4840000,28000000,1307143,32024],[19,1,3,32,1,14,45,572,1,51,126,41,101,11,12,8,2,14,4,1,27,1,58,42,20,177,6,4,1,12,10,2,9,1,5,1,2,28,3,6,1,23,4,30,610,145,1,21,4,2,1,1,24,13,1,153,5,4,26,5,1,6,1,1,28,1,5,1,11,4,1,13,44,2,4,2,1,4,9,1672,7,17,47,2,39,17,2,1,17,666,16,71,21,3,1,530,10,1,1,2,1,4,6,4,1,20,7,11,40,6,2,1,1,2,1,3,5,2,1,21,2,13,271,3,14,23,7,15,2,41,1,2,7,1,27,7,205,3,4,1403,7,69,4,10,215,1,1472,127,45756,10,13,1,198,17,7,1,12,7,6,1,1,14,7,2,2,17,1,2,3,2,48,5,21,10,5,10,21,4,5,1,2,39,2,2,7,1,1,22,7,60,175,119,3,3,40,1,8,101,15,1135,4,22,3,3,9,76,430,611,12,1,2,7,8]]|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/tdigest-merge-aggfunction\",\"tdigest-merge-aggfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.OperatorToken,\"the\",\"Returns the probability density beta function.\",\"The beta distribution is commonly used to study variation in the percentage of something across samples, such as the fraction of the day people spend watching television.\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`beta_pdf(`*x*`,` *alpha*`,` *beta*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n|Name|Type|Required|Description|\\r\\n|--|--|--|--|\\r\\n| *x* | int, long, or real | &check;| A value at which to evaluate the function.|\\r\\n| *alpha* | int, long, or real | &check;| A parameter of the distribution.|\\r\\n| *beta* | int, long, or real | &check;| A parameter of the distribution.|\\r\\n\\r\\n## Returns\\r\\n\\r\\nThe [probability beta density function](https://en.wikipedia.org/wiki/Beta_distribution#Probability_density_function).\\r\\n\\r\\n> [!NOTE]\\r\\n>\\r\\n> * If any argument is nonnumeric, the function returns `null`.\\r\\n> * If `x \\u2264 0` or `1 \\u2264 x`, the function returns `NaN`.\\r\\n> * If `alpha \\u2264 0` or `beta \\u2264 0`, the function returns `NaN`.\",'> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA22PwQrCMBBE7/mKoacWYkgEL0X9hB69iEhqogbStLQpRPDjjWmph7oLyw7M22WU9LFrq/NQqnaMC4W03VMuqtb+J25t02jny8H3xj0KciaIxdmOQnDGKbZpZidpjYJx3egzmjxi5Qk4QlC8jLZqQCWr2Tn9yjeCFytiD/6H4CzeWTD25WYiRYEZViC5kDd08Nop9DiklNdO3fMw55+CFx9P6bKEIAEAAA==\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\ndatatable(x:double, alpha:double, beta:double, comment:string)\\r\\n[\\r\\n    0.5, 10.0, 20.0, \"Valid input\",\\r\\n    1.5, 10.0, 20.0, \"x > 1, yields NaN\",\\r\\n    double(-10), 10.0, 20.0, \"x < 0, yields NaN\",\\r\\n    0.1, double(-1.0), 20.0, \"alpha is < 0, yields NaN\"\\r\\n]\\r\\n| extend r = beta_pdf(x, alpha, beta)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|x|alpha|beta|comment|r|\\r\\n|---|---|---|---|---|\\r\\n|0.5|10|20|Valid input|0.746176019310951|\\r\\n|1.5|10|20|x > 1, yields NaN|NaN|\\r\\n|-10|10|20|x < 0, yields NaN|NaN|\\r\\n|0.1|-1|20|alpha is < 0, yields NaN|NaN|\\r\\n\\r\\n## See also\\r\\n\\r\\n* For computing the inverse of the beta cumulative probability density function, see [beta-inv()](./beta-invfunction.md).\\r\\n* For the standard cumulative beta distribution function, see [beta-cdf()](./beta-cdffunction.md).',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/beta-pdffunction\",\"beta-pdffunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"tobool\",\"Convert inputs to boolean (signed 8-bit) representation.\",\"> The `tobool()` and `toboolean()` functions are equivalent\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`tobool(`*value*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *value* | string | &check; | The value to convert to boolean.|\\r\\n\\r\\n## Returns\\r\\n\\r\\nIf conversion is successful, result will be a boolean.\\r\\nIf conversion isn't successful, result will be `null`.\",'```\\r\\ntobool(\"true\") == true\\r\\ntobool(\"false\") == false\\r\\ntobool(1) == true\\r\\ntobool(123) == true\\r\\n```',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/toboolfunction\",\"toboolfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"todatetime\",\"Converts the input to a [datetime](./scalar-data-types/datetime.md) scalar value.\",\"> [!NOTE]\\r\\n> Prefer using [datetime()](./scalar-data-types/datetime.md) when possible.\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`todatetime(`*value*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *value* | scalar | &check; | The value to convert to [datetime](./scalar-data-types/datetime.md).|\\r\\n\\r\\n## Returns\\r\\n\\r\\nIf the conversion is successful, the result will be a [datetime](./scalar-data-types/datetime.md) value.\\r\\nElse, the result will be `null`.\",'> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAysoyswrUSjJT0ksSS3JzE3VUDc00jUw0jUyMDJS11SwtVXALgMAakZnYjgAAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint todatetime(\\'12-02-2022\\') == datetime(\\'12-02-2022\\')\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|print_0|\\r\\n|--|\\r\\n|true|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/todatetimefunction\",\"todatetimefunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"todecimal\",\"Converts the input to a decimal number representation.\",\"> [!NOTE]\\r\\n> Prefer using [real()](./scalar-data-types/real.md) when possible.\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`todecimal(`*value*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *value* | scalar | &check; | The value to convert to a decimal.|\\r\\n\\r\\n## Returns\\r\\n\\r\\nIf conversion is successful, result will be a decimal number.\\r\\nIf conversion isn't successful, result will be `null`.\",'> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAysoyswrUSjJT0lNzsxNzNFQMjQy1jMxNTO3UNJUsLVVgInDhTUBDVgx+TIAAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint todecimal(\"123.45678\") == decimal(123.45678)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|print_0|\\r\\n|--|\\r\\n|true|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/todecimalfunction\",\"todecimalfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"todouble\",\"Converts the input expression to a value of type `real`.\",\"> The `todouble()` and `toreal()` functions are equivalent\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`todouble(`*Expr*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *value* | scalar | &check; | The value to convert to [real](scalar-data-types/real.md).|\\r\\n\\r\\n## Returns\\r\\n\\r\\nIf conversion is successful, the result is a value of type `real`. Otherwise, the returned value will be `real(null)`.\",'```\\r\\ntodouble(\"123.4\") == 123.4\\r\\n```\\r\\n\\r\\n> [!NOTE]\\r\\n> Use [double() or real()](./scalar-data-types/real.md) when possible.',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/todoublefunction\",\"todoublefunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"toguid\",\"Converts a string to a [`guid`](./scalar-data-types/guid.md) scalar.\",\"> [!NOTE]\\r\\n> If you have a hard-coded guid, we recommend using [guid()](./scalar-data-types/guid.md).\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`toguid(`*value*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *value* | scalar | &check; | The value to convert to [guid](scalar-data-types/guid.md).|\\r\\n\\r\\n## Returns\\r\\n\\r\\nThe conversion process takes the first 32 characters of the input, ignoring properly located hyphens, validates that the characters are between 0-9 or a-f, and then converts the string into a [`guid`](./scalar-data-types/guid.md) scalar. The rest of the string is ignored.\\r\\n\\r\\nIf the conversion is successful, the result will be a [`guid`](./scalar-data-types/guid.md) scalar. Otherwise, the result will be `null`.\",'> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA0tJLAHCpJxUjeKSIisFIJGZl67JyxXNy6UABEoGhkbGJqZm5haWiUnJKalp6HwlHSwKdUEyuiARXaxqE6H2KJRkJJYoZBYr5OWXKCQqpJdmpijxcsXyctUopFaUpOalgIUUbBVK8kEMkBM1ATuW7RixAAAA\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\ndatatable(str: string)\\r\\n[\\r\\n    \"0123456789abcdef0123456789abcdef\",\\r\\n    \"0123456789ab-cdef-0123-456789abcdef\",\\r\\n    \"a string that is not a guid\"\\r\\n]\\r\\n| extend guid = toguid(str)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|str|guid|\\r\\n|---|---|\\r\\n|0123456789abcdef0123456789abcdef|01234567-89ab-cdef-0123-456789abcdef|\\r\\n|0123456789ab-cdef-0123-456789abcdef|01234567-89ab-cdef-0123-456789abcdef|\\r\\n|a string that isn\\'t a guid||',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/toguidfunction\",\"toguidfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"tohex\",\"Converts input to a hexadecimal string.\",\"## Syntax\\r\\n\\r\\n`tohex(`*value*`,` [`,` *minLength* ]`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *value* | int or long | &check; | The value that will be converted to a hex string.|\\r\\n| *minLength* | int | | The value representing the number of leading characters to include in the output.  Values between 1 and 16 are supported. Values greater than 16 will be truncated to 16. If the string is longer than *minLength* without leading characters, then *minLength* is effectively ignored. Negative numbers may only be represented at minimum by their underlying data size, so for an integer (32-bit) the *minLength* will be at minimum 8, for a long (64-bit) it will be at minimum 16.|\\r\\n\\r\\n## Returns\\r\\n\\r\\nIf conversion is successful, result will be a string value.\\r\\nIf conversion is not successful, result will be `null`.\",\"> [!div class=\\\"nextstepaction\\\"]\\r\\n> <a href=\\\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA42PsQ7CMAxEdyT+4baAlNIQoGLpyI/Qum2kJqkaD/18EhAliIXb7Ds/29NsHG83iGI/0LLTl2qPuoY4KiVk7hSr1X0p5VCWqM7F3TC0CGi8nUay5Bi+QxrMQezjzhdO4poj36iT/hMVyxWhkn6ufib056WEvy0NURtgjcNIruchsbVE8HnPBJje+ZnawwOAcjs/JwEAAA==\\\" target=\\\"_blank\\\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint\\r\\n    tohex(256) == '100',\\r\\n    tohex(-256) == 'ffffffffffffff00', // 64-bit 2's complement of -256\\r\\n    tohex(toint(-256), 8) == 'ffffff00', // 32-bit 2's complement of -256\\r\\n    tohex(256, 8) == '00000100',\\r\\n    tohex(256, 2) == '100' // Exceeds min length of 2, so min length is ignored.\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|print_0|print_1|print_2|print_3|print_04|\\r\\n|--|--|--|--|--|\\r\\n|true|true|true|true|true|\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/tohexfunction\",\"tohexfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"toint\",\"Converts the input to an integer value (signed 32-bit) number representation.\",\"> [!NOTE]\\r\\n> Prefer using [int()](./scalar-data-types/int.md) when possible.\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`toint(`*value*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *value* | scalar | &check; | The value to convert to an [integer](scalar-data-types/int.md).|\\r\\n\\r\\n## Returns\\r\\n\\r\\nIf the conversion is successful, the result will be an integer. Otherwise, the result will be `null`.\",'> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAysoyswrUSjJB5IaSoZGxkqaCra2CkAGAO190RQZAAAA\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint toint(\"123\") == 123\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|print_0|\\r\\n|--|\\r\\n|true|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/tointfunction\",\"tointfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"tolong\",\"Converts the input value to a long (signed 64-bit) number representation.\",\"> [!NOTE]\\r\\n> Prefer using [long()](./scalar-data-types/long.md) when possible.\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`tolong(`*value*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *value* | scalar | &check; | The value to convert to a [long](scalar-data-types/long.md).|\\r\\n\\r\\n## Returns\\r\\n\\r\\nIf conversion is successful, the result is a long number.\\r\\nIf conversion isn't successful, the result is `null`.\",'> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAysoyswrUSjJz8nPS9dQMjQyVtJUsLVVADIAlTTbCRoAAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\ntolong(\"123\") == 123\\r\\n```',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/tolongfunction\",\"tolongfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"tolower\",\"Converts the input string to lower case.\",\"## Syntax\\r\\n\\r\\n`tolower(`*value*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *value* | string | &check; | The value to convert to a lowercase string.|\\r\\n\\r\\n## Returns\\r\\n\\r\\nIf conversion is successful, result is a lowercase string.\\r\\nIf conversion isn't successful, result is `null`.\",'> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAysoyswrUSjJz8kvTy3SUPJIzcnJV9JUsLVVUMoAswH4X1SGIQAAAA==\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\ntolower(\"Hello\") == \"hello\"\\r\\n```',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/tolowerfunction\",\"tolowerfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.OperatorToken,\"top\",\"Returns the first *N* records sorted by the specified columns.\",'## Syntax\\r\\n\\r\\n*T* `| top` *NumberOfRows* `by` *Expression* [`asc` | `desc`] [`nulls first` | `nulls last`]\\r\\n\\r\\n## Parameters\\r\\n\\r\\n|Name|Type|Required|Description|\\r\\n|--|--|--|--|\\r\\n| *T* | string | &check; | The tabular input to sort. |\\r\\n| *NumberOfRows* | int | &check; | The number of rows of *T* to return.|\\r\\n| *Expression* | string | &check; | The scalar expression by which to sort.|\\r\\n| `asc` or `desc` | string | | Controls whether the selection is from the \"bottom\" or \"top\" of the range. Default `desc`.\\r\\n| `nulls first` or `nulls last`  | string | | Controls whether null values appear at the \"bottom\" or \"top\" of the range. Default for `asc` is `nulls first`. Default for `desc` is `nulls last`.|\\r\\n\\r\\n> [!TIP]\\r\\n> `top 5 by name` is equivalent to the expression `sort by name | take 5` both from semantic and performance perspectives.','Show top three storms with most direct injuries.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAwsuyS/KdS1LzSsp5uWqUSjJL1AwVkiqVPDMyyotykwtdsksSk0uAQCehD//JgAAAA==\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nStormEvents\\r\\n| top 3 by InjuriesDirect\\r\\n```\\r\\n\\r\\nThe below table shows only the relevant column. Run the query above to see more storm details for these events.\\r\\n\\r\\n|InjuriesDirect|...|\\r\\n|--|--|\\r\\n|519|...|\\r\\n|422|...|\\r\\n|200|...|\\r\\n\\r\\n## See also\\r\\n\\r\\n* Use [top-nested](topnestedoperator.md) operator to produce hierarchical (nested) top results.',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/topoperator\",\"topoperator.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.OperatorToken,\"top-hitters\",\"Returns an approximation for the most popular distinct values, or the values\\r\\nwith the largest sum, in the input.\",\"> [!NOTE]\\r\\n> `top-hitters` uses an approximation algorithm optimized for performance\\r\\n> when the input data is large.\\r\\n> The approximation is based on the [Count-Min-Sketch](https://en.wikipedia.org/wiki/Count%E2%80%93min_sketch) algorithm.  \\r\\n\\r\\n## Syntax\\r\\n\\r\\n*T* `|` `top-hitters` *NumberOfValues* `of` *ValueExpression* [ `by` *SummingExpression* ]\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *T* | string | &check; | The input tabular expression.|\\r\\n| *NumberOfValues* | int, long, or real | &check; | The number of distinct values of *ValueExpression*.|\\r\\n| *ValueExpression* | string | &check; | An expression over the input table *T* whose distinct values are returned.|\\r\\n| *SummingExpression* | string | | If specified, a numeric expression over the input table *T* whose sum per distinct value of *ValueExpression* establishes which values to emit. If not specified, the count of each distinct value of *ValueExpression*  is used instead.|\\r\\n\\r\\n## Remarks\\r\\n\\r\\nThe first syntax (no *SummingExpression*) is conceptually equivalent to:\\r\\n\\r\\n*T*\\r\\n`|` `summarize` `C``=``count()` `by` *ValueExpression*\\r\\n`|` `top` *NumberOfValues* by `C` `desc`\\r\\n\\r\\nThe second syntax (with *SummingExpression*) is conceptually equivalent to:\\r\\n\\r\\n*T*\\r\\n`|` `summarize` `S``=``sum(*SummingExpression*)` `by` *ValueExpression*\\r\\n`|` `top` *NumberOfValues* by `S` `desc`\",'### Get most frequent items\\r\\n\\r\\nThe next example shows how to find top-5 types of storms.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAwsuyS/KdS1LzSsp5qpRKMkv0M3ILClJLSpWMFXIT1MAy4RUFqQCAFP10SMoAAAA\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nStormEvents\\r\\n| top-hitters 5 of EventType \\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n| EventType | approximate_count_EventType |\\r\\n|---|---|\\r\\n| Thunderstorm Wind | 13015 |\\r\\n| Hail | 12711 |\\r\\n| Flash Flood | 3688 |\\r\\n| Drought | 3616 |\\r\\n| Winter Weather | 3349 |\\r\\n\\r\\n### Get top hitters based on column value\\r\\n\\r\\nThe next example shows how to find the States with the most \"Thunderstorm Wind\" events.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAwsuyS/KdS1LzSsp5qpRKM9ILUpVAHNDKgtSFWxtFZRCMkrzUlKLikEKFcIz81KUgApL8gt0MzJLSoDiCoYGCvlpCsEliSWpAPMxVM5OAAAA\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nStormEvents\\r\\n| where EventType == \"Thunderstorm Wind\"\\r\\n| top-hitters 10 of State \\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n| State | approximate_sum_State |\\r\\n|---|---|\\r\\n| TEXAS | 830 |\\r\\n| GEORGIA | 609 |\\r\\n| MICHIGAN | 602 |\\r\\n| IOWA | 585 |\\r\\n| PENNSYLVANIA | 549 |\\r\\n| ILLINOIS | 533 |\\r\\n| NEW YORK | 502 |\\r\\n| VIRGINIA | 482 |\\r\\n| KANSAS | 476 |\\r\\n| OHIO | 455 |',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/tophittersoperator\",\"tophittersoperator.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.OperatorToken,\"top-nested\",\"Produces a hierarchical aggregation and top values selection, where each level is a refinement of the previous one.\",'```\\r\\nT | top-nested 3 of Location with others=\"Others\" by sum(MachinesNumber), top-nested 4 of bin(Timestamp,5m) by sum(MachinesNumber)\\r\\n```\\r\\n\\r\\nThe `top-nested` operator accepts tabular data as input, and one or more aggregation clauses.\\r\\nThe first aggregation clause (left-most) subdivides the input records into partitions, according\\r\\nto the unique values of some expression over those records. The clause then keeps a certain number of records\\r\\nthat maximize or minimize this expression over the records. The next aggregation clause then\\r\\napplies a similar function, in a nested fashion. Each following clause is applied to the partition produced\\r\\nby the previous clause. This process continues for all aggregation clauses.\\r\\n\\r\\nFor example, the `top-nested` operator can be used to answer the following question: \"For a table containing sales\\r\\nfigures, such as country/region, salesperson, and amount sold: what are the top five countries/regions by sales? What are the top three salespeople in each of these countries/regions?\"\\r\\n\\r\\n## Syntax\\r\\n\\r\\n*T* `|` `top-nested` *TopNestedClause* [`,` `top-nested` *TopNestedClause2*]...\\r\\n\\r\\nWhere *TopNestedClause* has the following syntax:\\r\\n\\r\\n[ *N* ] `of` [*ExprName* `=`] *Expr* [`with` `others` `=` *ConstExpr*] `by` [*AggName* `=`] *Aggregation* [`asc` | `desc`]\\r\\n\\r\\n## Parameters\\r\\n\\r\\n|Name|Type|Required|Description|\\r\\n|--|--|--|--|\\r\\n|*T*|string|&check;|The input tabular expression.|\\r\\n|*N*|long||The number of top values to return for this hierarchy level. If omitted, all distinct values will be returned.|\\r\\n|*ExprName*|string||If specified, sets the name of the output column corresponding to the values of *Expr*.|\\r\\n|*Expr*|string|&check;|An expression over the input record indicating which value to return for this hierarchy level. Typically it\\'s a column reference from *T*, or some calculation, such as `bin()`, over such a column.\\r\\n|*ConstExpr*|string||If specified, for each hierarchy level, 1 record will be added with the value that is the aggregation over all records that didn\\'t \"make it to the top\".|\\r\\n|*AggName*|string||If specified, this identifier sets the column name in the output for the value of *Aggregation*.|\\r\\n|*Aggregation*|string||The aggregation function to apply to all records sharing the same value of *Expr*. The value of this aggregation determines which of the resulting records are \"top\". For the possible values, see [supported aggregation functions](#supported-aggregation-functions).|\\r\\n|`asc` or `desc`|string||Controls whether selection is actually from the \"bottom\" or \"top\" of the range of aggregated values. The default is `desc`.|\\r\\n\\r\\n### Supported aggregation functions\\r\\n\\r\\nThe following aggregation functions are supported:\\r\\n\\r\\n* [sum()](sum-aggfunction.md)\\r\\n* [count()](count-aggfunction.md)\\r\\n* [max()](max-aggfunction.md)\\r\\n* [min()](min-aggfunction.md)\\r\\n* [dcount()](dcountif-aggfunction.md)\\r\\n* [avg()](avg-aggfunction.md)\\r\\n* [percentile()](percentiles-aggfunction.md)\\r\\n* [percentilew()](percentiles-aggfunction.md)\\r\\n\\r\\n> [!NOTE]\\r\\n> Any algebraic combination of the aggregations is also supported.\\r\\n\\r\\n## Returns\\r\\n\\r\\nThis operator returns a table that has two columns for each aggregation clause:\\r\\n\\r\\n* One column holds the distinct values of the clause\\'s *`Expr`* calculation (having the\\r\\n  column name *ExprName* if specified)\\r\\n* One column holds the result of the *Aggregation*\\r\\n  calculation (having the column name *AggregationName* if specified)\\r\\n\\r\\n## Notes\\r\\n\\r\\nInput columns that aren\\'t specified as *`Expr`* values aren\\'t outputted.\\r\\nTo get all values at a certain level, add an aggregation count that:\\r\\n\\r\\n* Omits the value of *N*\\r\\n* Uses the column name as the value of *`Expr`*\\r\\n* Uses `Ignore=max(1)` as the aggregation, and then ignore (or project-away)\\r\\n   the column `Ignore`.\\r\\n\\r\\nThe number of records may grow exponentially with the number of aggregation clauses\\r\\n((N1+1) \\\\* (N2+1) \\\\* ...). Record growth is even faster if no *N* limit is specified. Take into account that this operator may consume a considerable amount of resources.\\r\\n\\r\\nIf the distribution of the aggregation is considerably non-uniform,\\r\\nlimit the number of distinct values to return (by using *N*) and use the\\r\\n`with others=` *ConstExpr* option to get an indication for the \"weight\" of all other\\r\\ncases.','> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAwsuyS/KdS1LzSsp5qpRKMkv0M1LLS5JTVEwUshPUwguSSxJVUiqVCguzdVwSk3PzPNJLNHU4UJSZwxWl19alExAoSFIoWteik9+cmJJZn4ehmoAdn/LsYsAAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nStormEvents\\r\\n| top-nested 2 of State       by sum(BeginLat),\\r\\n  top-nested 3 of Source      by sum(BeginLat),\\r\\n  top-nested 1 of EndLocation by sum(BeginLat)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|State|aggregated_State|Source|aggregated_Source|EndLocation|aggregated_EndLocation|\\r\\n|---|---|---|---|---|---|\\r\\n|KANSAS|87771.2355000001|Law Enforcement|18744.823|FT SCOTT|264.858|\\r\\n|KANSAS|87771.2355000001|Public|22855.6206|BUCKLIN|488.2457|\\r\\n|KANSAS|87771.2355000001|Trained Spotter|21279.7083|SHARON SPGS|388.7404|\\r\\n|TEXAS|123400.5101|Public|13650.9079|AMARILLO|246.2598|\\r\\n|TEXAS|123400.5101|Law Enforcement|37228.5966|PERRYTON|289.3178|\\r\\n|TEXAS|123400.5101|Trained Spotter|13997.7124|CLAUDE|421.44|\\r\\n\\r\\nUse the option \\'with others\\':\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAwsuyS/KdS1LzSsp5qpRKMkv0M1LLS5JTVEwUshPUwguSSxJVSjPLMlQyC/JSC0qVrBVUHLMyVHwB/Eg0sVKCkmVCsWluRpOqemZeT6JJZo6XArIRhmDjcovLUpOJaTUEKTUNS/FJz85sSQzPw+33UBFCjBVWJwAABtuhnPYAAAA\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nStormEvents\\r\\n| top-nested 2 of State with others = \"All Other States\" by sum(BeginLat),\\r\\n  top-nested 3 of Source by sum(BeginLat),\\r\\n  top-nested 1 of EndLocation with others = \"All Other End Locations\" by sum(BeginLat)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|State|aggregated_State|Source|aggregated_Source|EndLocation|aggregated_EndLocation|\\r\\n|---|---|---|---|---|---|\\r\\n|KANSAS|87771.2355000001|Law Enforcement|18744.823|FT SCOTT|264.858|\\r\\n|KANSAS|87771.2355000001|Public|22855.6206|BUCKLIN|488.2457|\\r\\n|KANSAS|87771.2355000001|Trained Spotter|21279.7083|SHARON SPGS|388.7404|\\r\\n|TEXAS|123400.5101|Public|13650.9079|AMARILLO|246.2598|\\r\\n|TEXAS|123400.5101|Law Enforcement|37228.5966|PERRYTON|289.3178|\\r\\n|TEXAS|123400.5101|Trained Spotter|13997.7124|CLAUDE|421.44|\\r\\n|KANSAS|87771.2355000001|Law Enforcement|18744.823|All Other End Locations|18479.965|\\r\\n|KANSAS|87771.2355000001|Public|22855.6206|All Other End Locations|22367.3749|\\r\\n|KANSAS|87771.2355000001|Trained Spotter|21279.7083|All Other End Locations|20890.9679|\\r\\n|TEXAS|123400.5101|Public|13650.9079|All Other End Locations|13404.6481|\\r\\n|TEXAS|123400.5101|Law Enforcement|37228.5966|All Other End Locations|36939.2788|\\r\\n|TEXAS|123400.5101|Trained Spotter|13997.7124|All Other End Locations|13576.2724|\\r\\n|KANSAS|87771.2355000001|||All Other End Locations|24891.0836|\\r\\n|TEXAS|123400.5101|||All Other End Locations|58523.2932000001|\\r\\n|All Other States|1149279.5923|||All Other End Locations|1149279.5923|\\r\\n\\r\\nThe following query shows the same results for the first level used in the example above.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAwsuyS/KdS1LzSsp5qpRKM9ILUpVCC5JLElVUMzMU9BQD3GNcAxW11FQ93b0CwayNIGqiktzcxOLMqtSQSwNp9T0zDyfxBJNAPC7f85LAAAA\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nStormEvents\\r\\n| where State !in (\\'TEXAS\\', \\'KANSAS\\')\\r\\n| summarize sum(BeginLat)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|sum_BeginLat|\\r\\n|---|\\r\\n|1149279.5923|\\r\\n\\r\\nRequest another column (EventType) to the top-nested result.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA43OMQ6CQBQE0J5TTAmJFNjbmNDR4QW+y9dgsvs3u4NK4uEVKC102nmZTE9Lvr1rYC5eoMU6aKYO2MMu6ClUbDnPyJMvj3odQyesdgW+vU3J6V++WXwbhs6ccLTwy2P1y9HTHHXbp484wMuzbKrP+5jspo61PGTt3mt/gc7cAAAA\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nStormEvents\\r\\n| top-nested 2 of State       by sum(BeginLat),\\r\\n  top-nested 2 of Source      by sum(BeginLat),\\r\\n  top-nested 1 of EndLocation by sum(BeginLat),\\r\\n  top-nested   of EventType   by tmp = max(1)\\r\\n| project-away tmp\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|State|aggregated_State|Source|aggregated_Source|EndLocation|aggregated_EndLocation|EventType|\\r\\n|---|---|---|---|---|---|---|\\r\\n|KANSAS|87771.2355000001|Trained Spotter|21279.7083|SHARON SPGS|388.7404|Thunderstorm Wind|\\r\\n|KANSAS|87771.2355000001|Trained Spotter|21279.7083|SHARON SPGS|388.7404|Hail|\\r\\n|KANSAS|87771.2355000001|Trained Spotter|21279.7083|SHARON SPGS|388.7404|Tornado|\\r\\n|KANSAS|87771.2355000001|Public|22855.6206|BUCKLIN|488.2457|Hail|\\r\\n|KANSAS|87771.2355000001|Public|22855.6206|BUCKLIN|488.2457|Thunderstorm Wind|\\r\\n|KANSAS|87771.2355000001|Public|22855.6206|BUCKLIN|488.2457|Flood|\\r\\n|TEXAS|123400.5101|Trained Spotter|13997.7124|CLAUDE|421.44|Hail|\\r\\n|TEXAS|123400.5101|Law Enforcement|37228.5966|PERRYTON|289.3178|Hail|\\r\\n|TEXAS|123400.5101|Law Enforcement|37228.5966|PERRYTON|289.3178|Flood|\\r\\n|TEXAS|123400.5101|Law Enforcement|37228.5966|PERRYTON|289.3178|Flash Flood|\\r\\n\\r\\nGive an index sort order for each value in this level (per group) to sort the result by the last nested level (in this example by EndLocation):\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA4WPwYoCMQyG7z5FjjPQAV326kXw5m0eYIjTbC3aVtKM6OLDm7KrVlzYHNP///K1l8RhfaIoeXYFSccuUhay8AHpC3pBIYDtBfIUmhU5HzcorQGdt2yaeKR/s58lu452k0YUn2IpvDbUI7ElLi8/AuYXbgCdY3K6s0PF0IYSArL/ppqdYQkB9zQcfJamejCwmOu0Sqbntp/Ca+Pva4/y3e+upxp0FgWCj9aPngqNMTpq5qrOjJfhQNHJrnbJLXSwUGj5eDh1dD6iIurEm6V5XLgB1CPS3MABAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nStormEvents\\r\\n| top-nested 2 of State  by sum(BeginLat),    top-nested 2 of Source by sum(BeginLat),    top-nested 4 of EndLocation by  sum(BeginLat)\\r\\n| order by State , Source, aggregated_EndLocation\\r\\n| summarize EndLocations = make_list(EndLocation, 10000) , endLocationSums = make_list(aggregated_EndLocation, 10000) by State, Source\\r\\n| extend indicies = range(0, array_length(EndLocations) - 1, 1)\\r\\n| mv-expand EndLocations, endLocationSums, indicies\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|State|Source|EndLocations|endLocationSums|indices|\\r\\n|---|---|---|---|---|\\r\\n|TEXAS|Trained Spotter|CLAUDE|421.44|0|\\r\\n|TEXAS|Trained Spotter|AMARILLO|316.8892|1|\\r\\n|TEXAS|Trained Spotter|DALHART|252.6186|2|\\r\\n|TEXAS|Trained Spotter|PERRYTON|216.7826|3|\\r\\n|TEXAS|Law Enforcement|PERRYTON|289.3178|0|\\r\\n|TEXAS|Law Enforcement|LEAKEY|267.9825|1|\\r\\n|TEXAS|Law Enforcement|BRACKETTVILLE|264.3483|2|\\r\\n|TEXAS|Law Enforcement|GILMER|261.9068|3|\\r\\n|KANSAS|Trained Spotter|SHARON SPGS|388.7404|0|\\r\\n|KANSAS|Trained Spotter|ATWOOD|358.6136|1|\\r\\n|KANSAS|Trained Spotter|LENORA|317.0718|2|\\r\\n|KANSAS|Trained Spotter|SCOTT CITY|307.84|3|\\r\\n|KANSAS|Public|BUCKLIN|488.2457|0|\\r\\n|KANSAS|Public|ASHLAND|446.4218|1|\\r\\n|KANSAS|Public|PROTECTION|446.11|2|\\r\\n|KANSAS|Public|MEADE STATE PARK|371.1|3|\\r\\n\\r\\nThe following example returns the two most-recent events\\r\\nfor each US state, with some information per event.\\r\\nNote the use of the `max(1)` (which is then projected away)\\r\\nfor columns which just require propagation through the operator\\r\\nwithout any selection logic.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA22PMQ7CMAxF957CI6BWomVm7NC5XCDEBhUpceRYBSQOTwoFAmL1f0//u1cW147kNRY3UA6Vp6iEwAfo1SjB/grd0bPQeuvMZVEvywJysJlR0d3gMrx+4O/gV0tS6/Fbaf43TGgYIiN1+IE3M5xmB+ETWa3M2bzSVTqzIMkkPB8x0ZbZUKRo7wy+F8H+AAAA\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nStormEvents\\r\\n| top-nested of State by Ignore0=max(1),\\r\\n  top-nested 2 of StartTime by Ignore1=max(StartTime),\\r\\n  top-nested of EndTime by Ignore2=max(1),\\r\\n  top-nested of EpisodeId by Ignore3=max(1)\\r\\n| project-away Ignore*\\r\\n| order by State asc, StartTime desc\\r\\n```\\r\\n\\r\\n### Retrieve the latest records per identity\\r\\n\\r\\nIf you have a table with an ID column and a timestamp column, you can use the top-nested operator to query the latest two records for each unique value of ID. The latest records are defined by the highest value of timestamp.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA43QzW4CIRAH8DtPMeG0JmyyYLVq4sV48RlMD2PBigpscIya+PCFZpc2JrYNBAL5/fkYjZTa5mgqq2dwomj9hwCyzpwIXTsDjWTyUkCgnYkrvw3RIdngez4AALZmaQS+wIgHLkqqUo0c1Y1MfSCASy6eu/G3U7+51+xUk92wd8vg8aifw5e/oZxkOPoHnGY45uyN3YFCW/tUK6MhbMFq2NxAn527NXOH1yr/BtgPpDIr5S1afumy/5hKmcfql6jqLkqPaWPYm3eq8YL9K0R3fjerT8+D6uvwAQAA\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\ndatatable(id: string, timestamp: datetime, otherInformation: string)   \\r\\n[\\r\\n    \"Barak\", datetime(2015-01-01), \"1\",\\r\\n    \"Barak\", datetime(2016-01-01), \"2\",\\r\\n    \"Barak\", datetime(2017-01-20), \"3\",\\r\\n    \"Donald\", datetime(2017-01-20), \"4\",\\r\\n    \"Donald\", datetime(2017-01-18), \"5\",\\r\\n    \"Donald\", datetime(2017-01-19), \"6\"\\r\\n]\\r\\n| top-nested of id by dummy0=max(1),  \\r\\ntop-nested 2 of timestamp by dummy1=max(timestamp),  \\r\\ntop-nested of otherInformation by dummy2=max(1)\\r\\n| project-away dummy0, dummy1, dummy2 \\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n| id | timestamp | otherInformation |\\r\\n|---|---|---|\\r\\n| Barak | 2016-01-01T00:00:00Z | 2 |\\r\\n| Donald | 2017-01-19T00:00:00Z | 6 |\\r\\n| Barak | 2017-01-20T00:00:00Z | 3 |\\r\\n| Donald | 2017-01-20T00:00:00Z | 4 |\\r\\n\\r\\nHere\\'s a step-by-step explanation of the query:\\r\\n\\r\\n1. The `datatable` creates a test dataset.\\r\\n1. The first `top-nested` clause returns all distinct values of `id`.\\r\\n1. The second `top-nested` clause selects the top two records with the highest `timestamp` for each id.\\r\\n1. The third `top-nested` clause adds the `otherInformation` column for each record.\\r\\n1. The `project-away` operator removes the dummy columns introduced by the top-nested operator.',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/topnestedoperator\",\"topnestedoperator.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"toscalar\",\"Returns a scalar constant value of the evaluated expression.\",\"This function is useful for queries that require staged calculations. For example,\\r\\ncalculate a total count of events, and then use the result to filter groups\\r\\nthat exceed a certain percent of all events.\\r\\n\\r\\nAny two statements must be separated by a semicolon.\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`toscalar(`*expression*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n|Name|Type|Required|Description|\\r\\n|--|--|--|--|\\r\\n| *expression* | string | &check; | The value to convert to a scalar value.|\\r\\n\\r\\n## Returns\\r\\n\\r\\nA scalar constant value of the evaluated expression.\\r\\nIf the result is a tabular, then the first column and first row will be taken for conversion.\\r\\n\\r\\n> [!TIP]\\r\\n> You can use a [let statement](letstatement.md) for readability of the query when using `toscalar()`.\\r\\n\\r\\n## Limitations\\r\\n\\r\\n`toscalar()` can't be applied on a scenario that applies the function on each row. This is because the function can only be calculated a constant number of times during the query execution.\\r\\nUsually, when this limitation is hit, the following error will be returned: `can't use '<column name>' as it is defined outside its row-context scope.`\\r\\n\\r\\nIn the following example, the query fails with the error:\\r\\n\\r\\n> `'toscalar': can't use 'x' as it is defined outside its row-context scope.` \\r\\n\\r\\n```\\r\\nlet _dataset1 = datatable(x:long)[1,2,3,4,5];\\r\\nlet _dataset2 = datatable(x:long, y:long) [ 1, 2, 3, 4, 5, 6];\\r\\nlet tg = (x_: long)\\r\\n{\\r\\n    toscalar(_dataset2| where x == x_ | project y);\\r\\n};\\r\\n_dataset1\\r\\n| extend y = tg(x)\\r\\n```\\r\\n\\r\\nThis failure can be mitigated by using the `join` operator, as in the following example:\\r\\n\\r\\n> [!div class=\\\"nextstepaction\\\"]\\r\\n> <a href=\\\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA8tJLVGIT0ksSSxOLTFUsFUAMUsSk3JSNSqsFHLy89I1ow11FIx0FIx1FEx0FExjrblykLQYYdOio1AJ1auAqllHwQyoH24dV41CVn5mnoIG3DRNhfw8hQoFoERBUX5WanKJQgXQMAB+d0ZipAAAAA==\\\" target=\\\"_blank\\\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nlet _dataset1 = datatable(x: long)[1, 2, 3, 4, 5];\\r\\nlet _dataset2 = datatable(x: long, y: long) [1, 2, 3, 4, 5, 6];\\r\\n_dataset1\\r\\n| join (_dataset2) on x \\r\\n| project x, y\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|x|y|\\r\\n|---|---|\\r\\n|1|2|\\r\\n|3|4|\\r\\n|5|6|\",'Evaluate `Start`, `End`, and `Step` as scalar constants, and use the result for `range` evaluation.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA02NQQrCQAxF94J3+EuFbupOJEtP0BMMNS3COFPSCIP08M1kELoL/7/3E1kxaBAFQfM6hhjkssg7KQr118f5FI14ptexl5BmRsEk+YPectyxKi92bxjzN+lfHGp6MG+1aPqv6e25TdQfPuLOBi7KHllPTnWwgIzrHKQK7lv8zY7AAAAA\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nlet Start = toscalar(print x=1);\\r\\nlet End = toscalar(range x from 1 to 9 step 1 | count);\\r\\nlet Step = toscalar(2);\\r\\nrange z from Start to End step Step | extend start=Start, end=End, step=Step\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|z|start|end|step|\\r\\n|---|---|---|---|\\r\\n|1|1|9|2|\\r\\n|3|1|9|2|\\r\\n|5|1|9|2|\\r\\n|7|1|9|2|\\r\\n|9|1|9|2|\\r\\n\\r\\nThe following example shows how `toscalar` can be used to \"fix\" an expression\\r\\nso that it will be calculated precisely once. In this case, the expression being\\r\\ncalculated returns a different value per evaluation.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA0XLsQqAIBRG4T3wHf5RoUXX8FlC8nYJTEONDHr4bGo9HydQBWtY1FQWF1yWka6Zz81LpSYxhM9N9z/3ml1kQsOa0w7dXxiUSge0GB5QqxQ9mmU94rZsXqEZQWVlAAAA\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nlet g1 = toscalar(new_guid());\\r\\nlet g2 = new_guid();\\r\\nrange x from 1 to 2 step 1\\r\\n| extend x=g1, y=g2\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|x|y|\\r\\n|---|---|\\r\\n|e6a15e72-756d-4c93-93d3-fe85c18d19a3|c2937642-0d30-4b98-a157-a6706e217620|\\r\\n|e6a15e72-756d-4c93-93d3-fe85c18d19a3|c6a48cb3-9f98-4670-bf5b-589d0e0dcaf5|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/toscalarfunction\",\"toscalarfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"tostring\",\"Converts the input to a string representation.\",\"## Syntax\\r\\n\\r\\n`tostring(`*value*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n|Name|Type|Required|Description|\\r\\n|--|--|--|--|\\r\\n| *value* | scalar | &check; | The value to convert to a string.|\\r\\n\\r\\n## Returns\\r\\n\\r\\nIf *value* is non-null, the result is a string representation of *value*.\\r\\nIf *value* is null, the result is an empty string.\",'> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAysoyswrUSjJLy4BMtI1DI2MNRVsbRWUgAwlAFmZlSocAAAA\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\ntostring(123) == \"123\"\\r\\n```',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/tostringfunction\",\"tostringfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"totimespan\",\"Converts the input to a [timespan](./scalar-data-types/timespan.md) scalar value.\",\"> **Deprecated aliases:** totime()\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`totimespan(`*value*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n|Name|Type|Required|Description|\\r\\n|--|--|--|--|\\r\\n| *value* | string | &check; | The value to convert to a [timespan](./scalar-data-types/timespan.md).|\\r\\n\\r\\n## Returns\\r\\n\\r\\nIf conversion is successful, result will be a [timespan](./scalar-data-types/timespan.md) value.\\r\\nElse, result will be null.\",'> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAysoyswrUSjJL8nMTS0uSMzTUDLQMzCwMjC0MjBQ0lSwtVUAyWgY5mbmaQIAkicpMSwAAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\ntotimespan(\"0.00:01:00\") == time(1min)\\r\\n```',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/totimespanfunction\",\"totimespanfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"toupper\",\"Converts a string to upper case.\",\"## Syntax\\r\\n\\r\\n`toupper(`*value*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *value* | string | &check; | The value to convert to an uppercase string.|\\r\\n\\r\\n## Returns\\r\\n\\r\\nIf conversion is successful, result is an uppercase string.\\r\\nIf conversion isn't successful, result is `null`.\",'> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAysoyswrUSjJLy0oSC3SUMpIzcnJV9JUsLVVUPJw9fHxVwIAC8jUKyEAAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\ntoupper(\"hello\") == \"HELLO\"\\r\\n```',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/toupperfunction\",\"toupperfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"translate\",\"Replaces a set of characters ('searchList') with another set of characters ('replacementList') in a given a string.\\r\\nThe function searches for characters in the 'searchList' and replaces them with the corresponding characters in 'replacementList'\",\"## Syntax\\r\\n\\r\\n`translate(`*searchList*`,` *replacementList*`,` *source*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *searchList* | string | &check; | The list of characters that should be replaced.|\\r\\n| *replacementList* | string | &check; | The list of characters that should replace the characters in *searchList*.|\\r\\n| *source* | string | &check; | A string to search.|\\r\\n\\r\\n## Returns\\r\\n\\r\\n*source* after replacing all occurrences of characters in 'replacementList' with the corresponding characters in 'searchList'\",'|Input                                 |Output   |\\r\\n|--------------------------------------|---------|\\r\\n|`translate(\"abc\", \"x\", \"abc\")`        |`\"xxx\"`  |\\r\\n|`translate(\"abc\", \"\", \"ab\")`          |`\"\"`     |\\r\\n|`translate(\"krasp\", \"otsku\", \"spark\")`|`\"kusto\"`|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/translatefunction\",\"translatefunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"treepath\",\"Enumerates all the path expressions that identify leaves in a dynamic object.\",\"## Syntax\\r\\n\\r\\n`treepath(`*object*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *object* | dynamic | &check;| A dynamic property bag object for which to enumerate the path expressions.|\\r\\n\\r\\n## Returns\\r\\n\\r\\nAn array of path expressions.\",'|Expression|Evaluates to|\\r\\n|---|---|\\r\\n|`treepath(parse_json(\\'{\"a\":\"b\", \"c\":123}\\'))` | `[\"[\\'a\\']\",\"[\\'c\\']\"]`|\\r\\n|`treepath(parse_json(\\'{\"prop1\":[1,2,3,4], \"prop2\":\"value2\"}\\'))`|`[\"[\\'prop1\\']\",\"[\\'prop1\\'][0]\",\"[\\'prop2\\']\"]`|\\r\\n|`treepath(parse_json(\\'{\"listProperty\":[100,200,300,\"abcde\",{\"x\":\"y\"}]}\\'))`|`[\"[\\'listProperty\\']\",\"[\\'listProperty\\'][0]\",\"[\\'listProperty\\'][0][\\'x\\']\"]`|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/treepathfunction\",\"treepathfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"trim\",\"Removes all leading and trailing matches of the specified regular expression.\",\"## Syntax\\r\\n\\r\\n`trim(`*regex*`,` *source*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *regex* | string | &check; | The string or [regular expression](re2.md) to be trimmed from *source*.|\\r\\n| *source* | string | &check; | The source string from which to trim *regex*.|\\r\\n\\r\\n## Returns\\r\\n\\r\\n*source* after trimming matches of *regex* found in the beginning and/or the end of *source*.\",'The following statement trims *substring* from the start and the end of the *string_to_trim*.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA8tJLVEoLinKzEuPL8mPBzJyFWwVHJR0dTNKSgqKrfT1k4BSesn5ubq6Sta8XDkg5aVJEB1AlUoQ4QIgF4s5qAI6CiAyNzUlHq4dJKABN08HVb0mAHnS2GacAAAA\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nlet string_to_trim = @\"--https://bing.com--\";\\r\\nlet substring = \"--\";\\r\\nprint string_to_trim = string_to_trim, trimmed_string = trim(substring,string_to_trim)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|string_to_trim|trimmed_string|\\r\\n|---|---|\\r\\n|--https://bing.com--|https://bing.com|\\r\\n\\r\\nThe next statement trims all non-word characters from start and end of the string.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAytKzEtPVahQSCvKz1UwVCjJVzBVKC5JLVAw5OWqUSgoys9KTS4BihQp2ILI5MQSDSVdBQUlHaWQVKCAkk6FjoOSvr6CipImSENqRUlqXopCSVFmbm5qSjxEH4in4aAUHRdTHqutpAMU1AQAsu/uCXcAAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nrange x from 1 to 5 step 1\\r\\n| project str = strcat(\"-  \",\"Te st\",x,@\"// $\")\\r\\n| extend trimmed_str = trim(@\"[^\\\\w]+\",str)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|str|trimmed_str|\\r\\n|---|---|\\r\\n|-  Te st1// $|Te st1|\\r\\n|-  Te st2// $|Te st2|\\r\\n|-  Te st3// $|Te st3|\\r\\n|-  Te st4// $|Te st4|\\r\\n|-  Te st5// $|Te st5|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/trimfunction\",\"trimfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"trim_end\",\"Removes trailing match of the specified regular expression.\",\"## Syntax\\r\\n\\r\\n`trim_end(`*regex*`,` *source*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *regex* | string | &check; | The string or [regular expression](re2.md) to be trimmed from the end of *source*.|\\r\\n| *source* | string | &check; | The source string from which to trim *regex*.|\\r\\n\\r\\n## Returns\\r\\n\\r\\n*source* after trimming matches of *regex* found in the end of *source*.\",'The following statement trims *substring*  from the end of *string_to_trim*.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA8tJLVEoLinKzEuPL8mPBzJyFWwVHJSSgAJ6yfm5Sta8XDkgJaVJEFVAWSWYRAFQAItuVAEdEJGbmhIP1w8SiE/NS9GAG6qDqkUTAKQH9A2VAAAA\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nlet string_to_trim = @\"bing.com\";\\r\\nlet substring = \".com\";\\r\\nprint string_to_trim = string_to_trim,trimmed_string = trim_end(substring,string_to_trim)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|string_to_trim|trimmed_string|\\r\\n|--------------|--------------|\\r\\n|bing.com      |bing          |\\r\\n\\r\\nThe next statement trims all non-word characters from the end of the string.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAysoyswrUSguKVKwBZHJiSUaSroKCko6SiGpQAElHQclfX0FFSVNXq4ahdSKktS8FIWSoszc3NSUeIguEC8eKKzhoBQdF1Meq62kA5TQBADbLZbMWQAAAA==\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint str = strcat(\"-  \",\"Te st\",x,@\"// $\")\\r\\n| extend trimmed_str = trim_end(@\"[^\\\\w]+\",str)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|str          |trimmed_str|\\r\\n|-------------|-----------|\\r\\n|-  Te st1// $|-  Te st1  |\\r\\n|-  Te st2// $|-  Te st2  |\\r\\n|-  Te st3// $|-  Te st3  |\\r\\n|-  Te st4// $|-  Te st4  |\\r\\n|-  Te st5// $|-  Te st5  |',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/trimendfunction\",\"trimendfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"trim_start\",\"Removes leading match of the specified regular expression.\",\"## Syntax\\r\\n\\r\\n`trim_start(`*regex*`,` *source*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *regex* | string | &check; | The string or [regular expression](re2.md) to be trimmed from the beginning of *source*.|\\r\\n| *source* | string | &check; | The source string from which to trim *regex*.|\\r\\n\\r\\n## Returns\\r\\n\\r\\n*source* after trimming match of *regex* found in the beginning of *source*.\",'The following statement trims *substring*  from the start of *string_to_trim*.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA8tJLVEoLinKzEuPL8mPBzJyFWwVHJQySkoKiq309ZOAEnrJ+blK1rxcOSClpUkQ1UBVcEUgyQKgIBaTUAV0QERuako83AyQAJCXWFSiATdaB1WTJgD3gw1dowAAAA==\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nlet string_to_trim = @\"https://bing.com\";\\r\\nlet substring = \"https://\";\\r\\nprint string_to_trim = string_to_trim,trimmed_string = trim_start(substring,string_to_trim)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|string_to_trim|trimmed_string|\\r\\n|---|---|\\r\\n|https://bing.com|bing.com|\\r\\n\\r\\nThe next statement trims all non-word characters from the beginning of the string.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAytKzEtPVahQSCvKz1UwVCjJVzBVKC5JLVAw5OWqUSgoys9KTS4BihQp2ILI5MQSDSVdBQUlHaWQVKCAkk6FjoOSvr6CipImSENqRUlqXopCSVFmbm5qSjxEH4gHZCYWlWg4KEXHxZTHaivpAKU0AZNZAoR9AAAA\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nrange x from 1 to 5 step 1\\r\\n| project str = strcat(\"-  \",\"Te st\",x,@\"// $\")\\r\\n| extend trimmed_str = trim_start(@\"[^\\\\w]+\",str)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|str|trimmed_str|\\r\\n|---|---|\\r\\n|-  Te st1// $|Te st1// $|\\r\\n|-  Te st2// $|Te st2// $|\\r\\n|-  Te st3// $|Te st3// $|\\r\\n|-  Te st4// $|Te st4// $|\\r\\n|-  Te st5// $|Te st5// $|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/trimstartfunction\",\"trimstartfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"unicode_codepoints_from_string\",\"Returns a dynamic array of the Unicode codepoints of the input string. This function is the inverse operation of [`unicode_codepoints_to_string()`](unicode-codepoints-to-string-function.md) function.\",\"> **Deprecated aliases:** to_utf8()\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`unicode_codepoints_from_string(`*value*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *value* | string | &check; | The source string to convert. |\\r\\n\\r\\n## Returns\\r\\n\\r\\nReturns a dynamic array of the Unicode codepoints of the characters that make up the string provided to this function.\\r\\nSee [`unicode_codepoints_to_string()`](unicode-codepoints-to-string-function.md))\",'> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/kvce69202ceceed490b88d.northeurope/databases/Other?query=H4sIAAAAAAAAAysoyswrUUgsKlKwVSjNy0zOT0mNBxEF+UDx4vi0ovzc+OISoKJ0DaVHk5Y9mrTh0aR1jyatfzRplZImADy1iJs9AAAA\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint arr = unicode_codepoints_from_string(\"\\u24a6\\u24b0\\u24ae\\u24af\\u24aa\")\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|arr|\\r\\n|---|\\r\\n|[9382, 9392, 9390, 9391, 9386]|\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/kvce69202ceceed490b88d.northeurope/databases/Other?query=H4sIAAAAAAAAAysoyswrUUgsKlKwVSjNy0zOT0mNBxEF+UDx4vi0ovzc+OISoKJ0DaXry69Pvb7w+ozrUxV0FbxLi0vylTQBiYjgf0AAAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint arr = unicode_codepoints_from_string(\"\\u05e7\\u05d5\\u05e1\\u05d8\\u05d5 - Kusto\")\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|arr|\\r\\n|---|\\r\\n|[1511, 1493, 1505, 1496, 1493, 32, 45, 32, 75, 117, 115, 116, 111]|\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/kvce69202ceceed490b88d.northeurope/databases/Other?query=H4sIAAAAAAAAAysoyswrUSguKVKwVSjNy0zOT0mNBxEF+UDx4viS/HigXGZeugYWybSi/FyYtJJ3aXFJvpKmJgA5JJpZUQAAAA==\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint str = unicode_codepoints_to_string(unicode_codepoints_from_string(\"Kusto\"))\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|str|\\r\\n|---|\\r\\n|Kusto|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/unicode-codepoints-from-string-function\",\"unicode-codepoints-from-string-function.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"unicode_codepoints_to_string\",\"Returns the string represented by the Unicode codepoints. This function is the inverse operation of [`unicode_codepoints_from_string()`](unicode-codepoints-from-string-function.md) function.\",\"> **Deprecated aliases:** make_string()\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`unicode_codepoints_to_string (`*values*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *values* | int, long, or dynamic | &check; | One or more comma-separated values to convert. The values may also be a [dynamic array](scalar-data-types/dynamic.md).|\\r\\n\\r\\n> [!NOTE]\\r\\n> This function receives up to 64 arguments.\\r\\n\\r\\n## Returns\\r\\n\\r\\nReturns the string made of the UTF characters whose Unicode codepoint value is provided by the arguments to this function. The input must consist of valid Unicode codepoints.\\r\\nIf any argument isn't a valid Unicode codepoint, the function returns `null`.\",'> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/kvce69202ceceed490b88d.northeurope/databases/Other?query=H4sIAAAAAAAAAysoyswrUSguKVKwVSjNy0zOT0mNBxEF+UDx4viS/HigXGZeuoa5qY6CoaE5iACzzECEoSYA+KAQ+EAAAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint str = unicode_codepoints_to_string(75, 117, 115, 116, 111)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|str|\\r\\n|---|\\r\\n|Kusto|\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/kvce69202ceceed490b88d.northeurope/databases/Other?query=H4sIAAAAAAAAAysoyswrUSguKVKwVSjNy0zOT0mNBxEF+UDx4viS/HigXGZeukZKZV5ibmayRrS5qY6CoaE5iACzzECEYaymJgBfBO+kSwAAAA==\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint str = unicode_codepoints_to_string(dynamic([75, 117, 115, 116, 111]))\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|str|\\r\\n|---|\\r\\n|Kusto|\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/kvce69202ceceed490b88d.northeurope/databases/Other?query=H4sIAAAAAAAAAysoyswrUSguKVKwVSjNy0zOT0mNBxEF+UDx4viS/HigXGZeukZKZV5ibmayRrS5qY6CoaE5iDCN1QRRZiDCUBMAeB3lVUsAAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint str = unicode_codepoints_to_string(dynamic([75, 117, 115]), 116, 111)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|str|\\r\\n|---|\\r\\n|Kusto|\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/kvce69202ceceed490b88d.northeurope/databases/Other?query=H4sIAAAAAAAAAysoyswrUSguKVKwVSjNy0zOT0mNBxEF+UDx4viS/HigXGZeuoa5qY6CoQEQG5rDGHARMxjDUBMACrIR/1AAAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint str = unicode_codepoints_to_string(75, 10, 117, 10, 115, 10, 116, 10, 111)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|str|\\r\\n|---|\\r\\n|K<br>u<br>s<br>t<br>o|\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/kvce69202ceceed490b88d.northeurope/databases/Other?query=H4sIAAAAAAAAAysoyswrUSguKVKwVSjNy0zOT0mNBxEF+UDx4viS/HigXGZeukZRYl56qoaJhY6puaaOAoRnZqpjaQDnWZrrGBoZaWoCAIEH/7dTAAAA\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint str = unicode_codepoints_to_string(range(48,57), range(65,90), range(97,122))\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|str|\\r\\n|---|\\r\\n0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/unicode-codepoints-to-string-function\",\"unicode-codepoints-to-string-function.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.OperatorToken,\"union\",\"Takes two or more tables and returns the rows of all of them.\",\"## Syntax\\r\\n\\r\\n[ *T* `|` ] `union` [ *UnionParameters* ] [`kind=` `inner`|`outer`] [`withsource=` *ColumnName*] [`isfuzzy=` `true`|`false`] *Tables*\\r\\n\\r\\n> [!NOTE]\\r\\n> The operation of the `union` operator can be altered by setting the `best_effort` request property to `true`, using either a [set statement](./setstatement.md) or through [client request properties](../api/netfx/request-properties.md). When this property is set to `true`, the `union` operator will disregard fuzzy resolution and connectivity failures to execute any of the sub-expressions being \\u201cunioned\\u201d and yield a warning in the query status results.\\r\\n\\r\\n## Parameters\\r\\n\\r\\n|Name|Type|Required|Description|\\r\\n|--|--|--|--|\\r\\n|*T*|string||The input tabular expression.|\\r\\n|*UnionParameters*|string||Zero or more space-separated parameters in the form of *Name* `=` *Value* that control the behavior of the row-match operation and execution plan. See [supported union parameters](#supported-union-parameters).|\\r\\n|`kind`|string||Either `inner` or `outer`. `inner` causes the result to have the subset of columns that are common to all of the input tables. `outer` causes the result to have all the columns that occur in any of the inputs. Cells that aren't defined by an input row are set to `null`. The default is `outer`.<br/><br/>With `outer`, the result has all the columns that occur in any of the inputs, one column for each name and type occurrences. This means that if a column appears in multiple tables and has multiple types, it has a corresponding column for each type in the union's result. This column name is suffixed with a '_' followed by the origin column [type](./scalar-data-types/index.md).|\\r\\n|`withsource=`*ColumnName*|string||If specified, the output includes a column called *ColumnName* whose value indicates which source table has contributed each row. If the query effectively references tables from more than one database including the default database, then the value of this column has a table name qualified with the database. __cluster and database__ qualifications are present in the value if more than one cluster is referenced.|\\r\\n|`isfuzzy`|bool||If set to `true`, allows fuzzy resolution of union legs. The set of union sources is reduced to the set of table references that exist and are accessible at the time while analyzing the query and preparing for execution. If at least one such table was found, any resolution failure yields a warning in the query status results, but won't prevent the query execution. If no resolutions were successful, the query returns an error. The default is `false`.<br/><br/>`isfuzzy=true` only applies to the `union` sources resolution phase. Once the set of source tables is determined, possible additional query failures won't be suppressed.|\\r\\n|*Tables*|string||One or more comma-separated table references, a query expression enclosed with parenthesis, or a set of tables specified with a wildcard. For example, `E*` would form the union of all the tables in the database whose names begin `E`.|\\r\\n\\r\\n### Supported union parameters\\r\\n\\r\\n|Name|Type|Required|Description|\\r\\n|--|--|--|--|\\r\\n|`hint.concurrency`|int||Hints the system how many concurrent subqueries of the `union` operator should be executed in parallel. The default is the number of CPU cores on the single node of the cluster (2 to 16).|\\r\\n|`hint.spread`|int||Hints the system how many nodes should be used by the concurrent `union` subqueries execution. The default is 1.|\\r\\n\\r\\n> [!NOTE]\\r\\n>\\r\\n> * The `union` scope can include [let statements](./letstatement.md) if attributed with the `view` keyword.\\r\\n> * The `union` scope will not include [functions](../management/functions.md). To include a function, define a [let statement](./letstatement.md) with the `view` keyword.\\r\\n> * There's no guarantee of the order in which the union legs will appear, but if each leg has an `order by` operator, then each leg will be sorted.\\r\\n\\r\\n## Performance considerations\\r\\n\\r\\nIf the `union` input is [tables](../management/tables.md) as opposed to [tabular expressions](./tabularexpressionstatements.md), and the `union` is followed by a [where operator](./whereoperator.md), consider replacing both with [find](./findoperator.md).\\r\\n\\r\\n## Returns\\r\\n\\r\\nA table with as many rows as there are in all the input tables.\",\"### Tables with string in name or column\\r\\n\\r\\n```\\r\\nunion K* | where * has \\\"Kusto\\\"\\r\\n```\\r\\n\\r\\nRows from all tables in the database whose name starts with `K`, and in which any column includes the word `Kusto`.\\r\\n\\r\\n### Distinct count\\r\\n\\r\\n```\\r\\nunion withsource=SourceTable kind=outer Query, Command\\r\\n| where Timestamp > ago(1d)\\r\\n| summarize dcount(UserId)\\r\\n```\\r\\n\\r\\nThe number of distinct users that have produced\\r\\neither a `Query` event or a `Command` event over the past day. In the result, the 'SourceTable' column will indicate either \\\"Query\\\" or \\\"Command\\\".\\r\\n\\r\\n```\\r\\nQuery\\r\\n| where Timestamp > ago(1d)\\r\\n| union withsource=SourceTable kind=outer \\r\\n   (Command | where Timestamp > ago(1d))\\r\\n| summarize dcount(UserId)\\r\\n```\\r\\n\\r\\nThis more efficient version produces the same result. It filters each table before creating the union.\\r\\n\\r\\n### Using `isfuzzy=true`\\r\\n\\r\\n```\\r\\n// Using union isfuzzy=true to access non-existing view:                                     \\r\\nlet View_1 = view () { print x=1 };\\r\\nlet View_2 = view () { print x=1 };\\r\\nlet OtherView_1 = view () { print x=1 };\\r\\nunion isfuzzy=true\\r\\n(View_1 | where x > 0), \\r\\n(View_2 | where x > 0),\\r\\n(View_3 | where x > 0)\\r\\n| count \\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|Count|\\r\\n|---|\\r\\n|2|\\r\\n\\r\\nObserving Query Status - the following warning returned:\\r\\n`Failed to resolve entity 'View_3'`\\r\\n\\r\\n```\\r\\n// Using union isfuzzy=true and wildcard access:\\r\\nlet View_1 = view () { print x=1 };\\r\\nlet View_2 = view () { print x=1 };\\r\\nlet OtherView_1 = view () { print x=1 };\\r\\nunion isfuzzy=true View*, SomeView*, OtherView*\\r\\n| count \\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|Count|\\r\\n|---|\\r\\n|3|\\r\\n\\r\\nObserving Query Status - the following warning returned:\\r\\n`Failed to resolve entity 'SomeView*'`\\r\\n\\r\\n### Source columns types mismatch\\r\\n\\r\\n```\\r\\nlet View_1 = view () { print x=1 };\\r\\nlet View_2 = view () { print x=toint(2) };\\r\\nunion withsource=TableName View_1, View_2\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|TableName|x_long|x_int|\\r\\n|---------|------|-----|\\r\\n|View_1   |1     |     |\\r\\n|View_2   |      |2    |\\r\\n\\r\\n```\\r\\nlet View_1 = view () { print x=1 };\\r\\nlet View_2 = view () { print x=toint(2) };\\r\\nlet View_3 = view () { print x_long=3 };\\r\\nunion withsource=TableName View_1, View_2, View_3 \\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|TableName|x_long1|x_int |x_long|\\r\\n|---------|-------|------|------|\\r\\n|View_1   |1      |      |      |\\r\\n|View_2   |       |2     |      |\\r\\n|View_3   |       |      |3     |\\r\\n\\r\\nColumn `x` from `View_1` received the suffix `_long`, and as a column named `x_long` already exists in the result schema, the column names were de-duplicated, producing a new column- `x_long1`\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/unionoperator\",\"unionoperator.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"unixtime_microseconds_todatetime\",\"Converts unix-epoch microseconds to UTC datetime.\",\"## Syntax\\r\\n\\r\\n`unixtime_microseconds_todatetime(`*microseconds*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *microseconds* | real | &check; | The epoch timestamp in microseconds. A `datetime` value that occurs before the epoch time (1970-01-01 00:00:00) has a negative timestamp value.|\\r\\n\\r\\n## Returns\\r\\n\\r\\nIf the conversion is successful, the result is a [datetime](./scalar-data-types/datetime.md) value. Otherwise, the result is null.\",'> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAysoyswrUUhJLEmNL8nMTVWwVSjNy6wAMeNzM5OL8otTk/PzUorjS/JBakDiGoamJmbGBgYWBlCgCQC7i8BNRAAAAA==\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint date_time = unixtime_microseconds_todatetime(1546300800000000)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|date_time|\\r\\n|---|\\r\\n|2019-01-01 00:00:00.0000000|\\r\\n\\r\\n## See also\\r\\n\\r\\n* Convert unix-epoch seconds to UTC datetime using [unixtime_seconds_todatetime()](unixtime-seconds-todatetimefunction.md).\\r\\n* Convert unix-epoch milliseconds to UTC datetime using [unixtime_milliseconds_todatetime()](unixtime-milliseconds-todatetimefunction.md).\\r\\n* Convert unix-epoch nanoseconds to UTC datetime using [unixtime_nanoseconds_todatetime()](unixtime-nanoseconds-todatetimefunction.md).',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/unixtime-microseconds-todatetimefunction\",\"unixtime-microseconds-todatetimefunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"unixtime_milliseconds_todatetime\",\"Converts unix-epoch milliseconds to UTC datetime.\",\"## Syntax\\r\\n\\r\\n`unixtime_milliseconds_todatetime(`*milliseconds*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *milliseconds* | real | &check; | The epoch timestamp in microseconds. A `datetime` value that occurs before the epoch time (1970-01-01 00:00:00) has a negative timestamp value.|\\r\\n\\r\\n## Returns\\r\\n\\r\\nIf the conversion is successful, the result is a [datetime](./scalar-data-types/datetime.md) value. Otherwise, the result is null.\",'> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAysoyswrUUhJLEmNL8nMTVWwVSjNy6wAMeNzM3NyMotTk/PzUorjS/JBakDiGoamJmbGBgYWBiCgCQDATIC6QQAAAA==\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint date_time = unixtime_milliseconds_todatetime(1546300800000)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|date_time|\\r\\n|---|\\r\\n|2019-01-01 00:00:00.0000000|\\r\\n\\r\\n## See also\\r\\n\\r\\n* Convert unix-epoch seconds to UTC datetime using [unixtime_seconds_todatetime()](unixtime-seconds-todatetimefunction.md).\\r\\n* Convert unix-epoch microseconds to UTC datetime using [unixtime_microseconds_todatetime()](unixtime-microseconds-todatetimefunction.md).\\r\\n* Convert unix-epoch nanoseconds to UTC datetime using [unixtime_nanoseconds_todatetime()](unixtime-nanoseconds-todatetimefunction.md).',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/unixtime-milliseconds-todatetimefunction\",\"unixtime-milliseconds-todatetimefunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"unixtime_nanoseconds_todatetime\",\"Converts unix-epoch nanoseconds to UTC datetime.\",\"## Syntax\\r\\n\\r\\n`unixtime_nanoseconds_todatetime(`*nanoseconds*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *nanoseconds* | real | &check; | The epoch timestamp in nanoseconds. A `datetime` value that occurs before the epoch time (1970-01-01 00:00:00) has a negative timestamp value.|\\r\\n\\r\\n## Returns\\r\\n\\r\\nIf the conversion is successful, the result is a [datetime](./scalar-data-types/datetime.md) value. Otherwise, the result is null.\",'> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAysoyswrUUhJLEmNL8nMTVWwVSjNy6wAMePzEvPyi1OT8/NSiuNL8kFKQMIahqYmZsYGBhYGCKAJAOcnRh5GAAAA\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint date_time = unixtime_nanoseconds_todatetime(1546300800000000000)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|date_time|\\r\\n|---|\\r\\n|2019-01-01 00:00:00.0000000|\\r\\n\\r\\n## See also\\r\\n\\r\\n* Convert unix-epoch seconds to UTC datetime using [unixtime_seconds_todatetime()](unixtime-seconds-todatetimefunction.md).\\r\\n* Convert unix-epoch milliseconds to UTC datetime using [unixtime_milliseconds_todatetime()](unixtime-milliseconds-todatetimefunction.md).\\r\\n* Convert unix-epoch microseconds to UTC datetime using [unixtime_microseconds_todatetime()](unixtime-microseconds-todatetimefunction.md).',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/unixtime-nanoseconds-todatetimefunction\",\"unixtime-nanoseconds-todatetimefunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"unixtime_seconds_todatetime\",\"Converts unix-epoch seconds to UTC datetime.\",\"## Syntax\\r\\n\\r\\n`unixtime_seconds_todatetime(`*seconds*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *seconds* | real | &check; | The epoch timestamp in seconds. A `datetime` value that occurs before the epoch time (1970-01-01 00:00:00) has a negative timestamp value.|\\r\\n\\r\\n## Returns\\r\\n\\r\\nIf the conversion is successful, the result is a [datetime](./scalar-data-types/datetime.md) value. Otherwise, the result is null.\",'> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAysoyswrUUhJLEmNL8nMTVWwVSjNy6wAMeOLU5Pz81KK40vyQdIgIQ1DUxMzYwMDCwMDTQDkH54GOQAAAA==\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint date_time = unixtime_seconds_todatetime(1546300800)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|date_time|\\r\\n|---|\\r\\n|2019-01-01 00:00:00.0000000|\\r\\n\\r\\n## See also\\r\\n\\r\\n* Convert unix-epoch milliseconds to UTC datetime using [unixtime_milliseconds_todatetime()](unixtime-milliseconds-todatetimefunction.md).\\r\\n* Convert unix-epoch microseconds to UTC datetime using [unixtime_microseconds_todatetime()](unixtime-microseconds-todatetimefunction.md).\\r\\n* Convert unix-epoch nanoseconds to UTC datetime using [unixtime_nanoseconds_todatetime()](unixtime-nanoseconds-todatetimefunction.md).',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/unixtime-seconds-todatetimefunction\",\"unixtime-seconds-todatetimefunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"url_decode\",\"The function converts an encoded URL into a regular URL representation.\",\"For more information about URL encoding and decoding, see [Percent-encoding](https://en.wikipedia.org/wiki/Percent-encoding).\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`url_decode(`*encoded_url*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *encoded_url* | string | &check; | The encoded URL to decode.|\\r\\n\\r\\n## Returns\\r\\n\\r\\nURL (string) in a regular representation.\",'> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA8tJLVEoLcpRsFVwUM8oKSkoVjVOVDVKA6Ly8nK9pMy8dL3k/FwgV92al6ugKDOvRCG/KDM9My8RpAeoU0chJTU5PyU1BcKNh/A0gExNAHjpCSdcAAAA\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nlet url = @\\'https%3a%2f%2fwww.bing.com%2f\\';\\r\\nprint original = url, decoded = url_decode(url)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|original|decoded|\\r\\n|---|---|\\r\\n|https%3a%2f%2fwww.bing.com%2f|https://www.bing.com/|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/urldecodefunction\",\"urldecodefunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"url_encode\",\"The function converts characters of the input URL into a format that can be transmitted over the internet.\\r\\nDiffers from [url_encode_component](./urlencodecomponentfunction.md) by encoding spaces as '+' and not as '%20' (see application/x-www-form-urlencoded [here](https://en.wikipedia.org/wiki/Percent-encoding)).\",\"For more information about URL encoding and decoding, see [Percent-encoding](https://en.wikipedia.org/wiki/Percent-encoding).\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`url_encode(`*url*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n|Name|Type|Required|Parameters|\\r\\n|--|--|--|--|\\r\\n|*url*|string|&check;|The URL to encode.|\\r\\n\\r\\n## Returns\\r\\n\\r\\nURL (string) converted into a format that can be transmitted over the Internet.\",'> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA8tJLVEoLcpRsFVwUM8oKSkottLXLy8v10vKzEvXS87P1c9IzcnJVyjPL8pJUbfmKijKzCtRyC/KTM/MSwTpAurVUUjNS85PSU2BcOMhPA0gUxMAGwCJQ14AAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nlet url = @\\'https://www.bing.com/hello world\\';\\r\\nprint original = url, encoded = url_encode(url)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|original|encoded|\\r\\n|---|---|\\r\\n|https://www.bing.com/hello world/|https%3a%2f%2fwww.bing.com%2fhello+world|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/urlencodefunction\",\"urlencodefunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"url_encode_component\",\"The function converts characters of the input URL into a format that can be transmitted over the internet. Differs from [url_encode](./urlencodefunction.md) by encoding spaces as '%20' and not as '+'.\",\"For more information about URL encoding and decoding, see [Percent-encoding](https://en.wikipedia.org/wiki/Percent-encoding).\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`url_encode_component(`*url*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *url* | string | &check; | The URL to encode.|\\r\\n\\r\\n## Returns\\r\\n\\r\\nURL (string) converted into a format that can be transmitted over the Internet.\",'> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAyXLMQqAMAxA0V3wDtmqIO2uCN5E1AZbiEmpkV7fiuP/8AgVnkwww2KCarpH50opdo982kMuF5BIoEgm78zUNilHVpAcz8jb56oeAPkQj/7P9a+18iSMrF2d/QtxbpMUagAAAA==\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nlet url = @\\'https://www.bing.com/hello world/\\';\\r\\nprint original = url, encoded = url_encode_component(url)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|original|encoded|\\r\\n|---|---|\\r\\n|https://www.bing.com/hello world/|https%3a%2f%2fwww.bing.com%2fhello%20world|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/urlencodecomponentfunction\",\"urlencodecomponentfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"variance\",\"Calculates the variance of *expr* across the group, considering the group as a [sample](https://en.wikipedia.org/wiki/Sample_%28statistics%29).\",\"The following formula is used:\\r\\n\\r\\n![Image showing a variance sample formula.](images/variance-aggfunction/variance-sample.png)\\r\\n[!INCLUDE [data-explorer-agg-function-summarize-note](../../includes/data-explorer-agg-function-summarize-note.md)]\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`variance(`*expr*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n|*expr* | real | &check; | The expression used for the variance calculation.|\\r\\n\\r\\n## Returns\\r\\n\\r\\nReturns the variance value of *expr* across the group.\",'> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAytKzEtPVahQSCvKz1UwVCjJVzBVKC5JLVAw5KpRKC7NzU0syqxKVchNzE6Nz8ksLtGo0NRRKAMKJuYlpwI5ADQ5+T5AAAAA\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nrange x from 1 to 5 step 1\\r\\n| summarize make_list(x), variance(x) \\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|list_x|variance_x|\\r\\n|---|---|\\r\\n|[ 1, 2, 3, 4, 5]|2.5|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/variance-aggfunction\",\"variance-aggfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"varianceif\",\"Calculates the [variance](variance-aggfunction.md) of *expr* in records for which *predicate* evaluates to `true`.\",\"[!INCLUDE [data-explorer-agg-function-summarize-note](../../includes/data-explorer-agg-function-summarize-note.md)]\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`varianceif(`*expr*`,` *predicate*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n|*expr* | string | &check; | The expression to use for the variance calculation.|\\r\\n|*predicate*| string | &check; | If *predicate* evaluates to `true`, the *expr* calculated value will be added to the variance.|\\r\\n\\r\\n## Returns\\r\\n\\r\\nReturns the variance value of *expr* in records for which *predicate* evaluates to `true`.\",'> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAytKzEtPVahQSCvKz1UwVCjJVzA0MFAoLkktUDDkqlEoLs3NTSzKrEpVKANSiXnJqZlpGhU6ChWqRgq2tgoGmgA5lfgVQAAAAA==\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nrange x from 1 to 100 step 1\\r\\n| summarize varianceif(x, x%2 == 0)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|varianceif_x|\\r\\n|---|\\r\\n|850|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/varianceif-aggfunction\",\"varianceif-aggfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"variancep\",\"Calculates the variance of *expr* across the group, considering the group as a [population](https://en.wikipedia.org/wiki/Statistical_population).\",\"The following formula is used:\\r\\n\\r\\n![Image showing a variance sample formula.](images/variancep-aggfunction/variance-population.png)\\r\\n[!INCLUDE [data-explorer-agg-function-summarize-note](../../includes/data-explorer-agg-function-summarize-note.md)]\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`variancep(`*expr*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n|*expr* | string | &check; | The expression to use for the variance calculation.|\\r\\n\\r\\n## Returns\\r\\n\\r\\nReturns the variance value of *expr* across the group.\",'> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAytKzEtPVahQSCvKz1UwVCjJVzBVKC5JLVAw5KpRKC7NzU0syqxKVchNzE6Nz8ksLtGo0NRRKAMKJuYlpxYAeQCFH59wQQAAAA==\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nrange x from 1 to 5 step 1\\r\\n| summarize make_list(x), variancep(x) \\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|list_x|variance_x|\\r\\n|---|---|\\r\\n|[ 1, 2, 3, 4, 5]|2|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/variancep-aggfunction\",\"variancep-aggfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"week_of_year\",\"Returns an integer that represents the week number. The week number is calculated from the first week of a year, which is the one that includes the first Thursday, according to [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601#Week_dates).\",\"**Deprecated aliases:** weekofyear()\\r\\n\\r\\n> [!NOTE]\\r\\n> `weekofyear()` wasn't ISO 8601 compliant; the first week of a year was defined as the week with the year's first Wednesday in it.\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`week_of_year(`*date*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *date* | datetime | &check; | The date for which to return the week of the year.|\\r\\n\\r\\n## Returns\\r\\n\\r\\n`week number` - The week number that contains the given date.\",\"|Input                                    |Output|\\r\\n|-----------------------------------------|------|\\r\\n|`week_of_year(datetime(2020-12-31))`     |`53`  |\\r\\n|`week_of_year(datetime(2020-06-15))`     |`25`  |\\r\\n|`week_of_year(datetime(1970-01-01))`     |`1`   |\\r\\n|`week_of_year(datetime(2000-01-01))`     |`52`  |\\r\\n\\r\\n> [!NOTE]\\r\\n> `weekofyear()` is an obsolete variant of this function. `weekofyear()` was not ISO 8601 compliant; the first week of a year was defined as the week with the year's first Wednesday in it.\\r\\nThe current version of this function, `week_of_year()`, is ISO 8601 compliant; the first week of a year is defined as the week with the year's first Thursday in it.\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/weekofyearfunction\",\"weekofyearfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"welch_test\",\"Computes the p_value of the [Welch-test function](https://en.wikipedia.org/wiki/Welch%27s_t-test)\",'## Syntax\\r\\n\\r\\n`welch_test(`*mean1*`,` *variance1*`,` *count1*`,` *mean2*`,` *variance2*`,` *count2*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *mean1* | real or long | &check; | The mean (average) value of the first series.|\\r\\n| *variance1* | real or long | &check; | The variance value of the first series.|\\r\\n| *count1* | real or long | &check; | The count of values in the first series.|\\r\\n| *mean2* | real or long | &check; | The mean (average) value of the second series.|\\r\\n| *variance2* | real or long | &check; | The variance value of the second series.|\\r\\n| *count2* | real or long | &check; | The count of values in the second series.|\\r\\n\\r\\n## Returns\\r\\n\\r\\nFrom [Wikipedia](https://en.wikipedia.org/wiki/Welch%27s_t-test):\\r\\n\\r\\nIn statistics, Welch\\'s t-test is a two-sample location test that\\'s used to test the hypothesis that two populations have equal means.\\r\\nWelch\\'s t-test is an adaptation of Student\\'s t-test, and is more reliable when the two samples have unequal variances and unequal sample sizes. These tests are often referred to as \"unpaired\" or \"independent samples\" t-tests.\\r\\nThe tests are typically applied when the statistical units underlying the two samples being compared are non-overlapping.\\r\\nWelch\\'s t-test is less popular than Student\\'s t-test, and may be less familiar to readers. The test is also called \"Welch\\'s unequal variances t-test\", or \"unequal variances t-test\".','> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA2WP3UrEMBCF7xf2HXKZQgydsT/uRV7DGxGJadRCk5ZtGnfFhzeTqBTNxWE4fOfMZDmPPhwPLL0VmGLD1Ws3Gv6AvWwFQ5C1YHAixVvZpbnPTi9PSTtSrCVkkmYkJpGQU91vFmSftXmsxPc6/LMOcrzOhXe5pNkpHdNmvzBNnmuJu9WloZzUZiatOx4+mYs39rJoP9Anw8zCdbHzCx/m7XmylaBb/rmUWzfn9Hn8sMyB0vGVr5DoCComV3tji2FAmXnzgafZYQGRQNyBZBj8AandXoJNJy33etqsereTeXsKdg3cgYggDAiHIqIwWH0B4CiCU6cBAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\n// s1, s2 values are from https://en.wikipedia.org/wiki/Welch%27s_t-test\\r\\nprint\\r\\n    s1 = dynamic([27.5, 21.0, 19.0, 23.6, 17.0, 17.9, 16.9, 20.1, 21.9, 22.6, 23.1, 19.6, 19.0, 21.7, 21.4]),\\r\\n    s2 = dynamic([27.1, 22.0, 20.8, 23.4, 23.4, 23.5, 25.8, 22.0, 24.8, 20.2, 21.9, 22.1, 22.9, 20.5, 24.4])\\r\\n| mv-expand s1 to typeof(double), s2 to typeof(double)\\r\\n| summarize m1=avg(s1), v1=variance(s1), c1=count(), m2=avg(s2), v2=variance(s2), c2=count()\\r\\n| extend pValue=welch_test(m1,v1,c1,m2,v2,c2)\\r\\n// pValue = 0.021\\r\\n```',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/welch-testfunction\",\"welch-testfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.OperatorToken,\"where\",\"Filters a table to the subset of rows that satisfy a predicate.\",\"> The `where` and `filter` operators are equivalent\\r\\n\\r\\n## Syntax\\r\\n\\r\\n*T* `| where` *Predicate*\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n| -- | -- | -- | -- |\\r\\n| *T* | string | &check; | Tabular input whose records are to be filtered. |\\r\\n| *Predicate* | string | &check; | Expression that evaluates to a bool for each row in *T*.\\r\\n\\r\\n## Returns\\r\\n\\r\\nRows in *T* for which *Predicate* is `true`.\\r\\n\\r\\n> [!NOTE]\\r\\n> All filtering functions return false when compared with null values. Use special null-aware functions to write queries that handle null values.\\r\\n>\\r\\n> * [isnull()](./isnullfunction.md)\\r\\n> * [isnotnull()](./isnotnullfunction.md)\\r\\n> * [isempty()](./isemptyfunction.md)\\r\\n> * [isnotempty()](./isnotemptyfunction.md)\\r\\n\\r\\n## Performance tips\\r\\n\\r\\n* **Use simple comparisons** between column names and constants. ('Constant' means constant over the table - so `now()` and `ago()` are OK, and so are scalar values assigned using a [`let` statement](./letstatement.md).)\\r\\n    For example, prefer `where Timestamp >= ago(1d)` to `where bin(Timestamp, 1d) == ago(1d)`.\\r\\n* **Simplest terms first**: If you have multiple clauses conjoined with `and`, put first the clauses that involve just one column. So `Timestamp > ago(1d) and OpId == EventId` is better than the other way around.\\r\\n\\r\\nFor more information, see the summary of [available String operators](./datatypes-string-operators.md) and the summary of [available Numerical operators](./numoperators.md).\",'### Order comparisons by complexity\\r\\n\\r\\nThe following query returns storm records that report damaged property, are floods, and start and end in different places.\\r\\n\\r\\nNotice that we put the comparison between two columns last, as the where operator can\\'t use the index and forces a scan.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAwsuyS/KdS1LzSsp5qpRKCjKz0pNLlFwScxNTE8NKMovSC0qqdRRACsIqSxI1VFwSk3PzPPJT04syczPA8rkpcA4QP3lGalFqWi6FewUDLgUgCAxLwVhkIKtrYKSW05+fooSXBLFaAVFW2TDAe7+E2GoAAAA\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nStormEvents\\r\\n| project DamageProperty, EventType, BeginLocation, EndLocation\\r\\n| where DamageProperty > 0\\r\\n    and EventType == \"Flood\"\\r\\n    and BeginLocation != EndLocation \\r\\n```\\r\\n\\r\\nThe following table only shows the top 10 results. To see the full output, run the query.\\r\\n\\r\\n|DamageProperty|EventType|BeginLocation|EndLocation|\\r\\n|--|--|--|--|\\r\\n|5000 |Flood|FAYETTE CITY LOWBER|\\r\\n|5000 |Flood|MORRISVILLE WEST WAYNESBURG|\\r\\n|10000|Flood|COPELAND HARRIS GROVE|\\r\\n|5000 |Flood|GLENFORD MT PERRY|\\r\\n|25000|Flood|EAST SENECA BUFFALO AIRPARK ARPT|\\r\\n|20000|Flood|EBENEZER SLOAN|\\r\\n|10000|Flood|BUEL CALHOUN|\\r\\n|10000|Flood|GOODHOPE WEST MILFORD|\\r\\n|5000 |Flood|DUNKIRK FOREST|\\r\\n|20000|Flood|FARMINGTON MANNINGTON|\\r\\n\\r\\n### Check if column contains string\\r\\n\\r\\nThe following query returns the rows in which the word \"cow\" appears in any column.\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAwsuyS/KdS1LzSsp5uWqUSjPSC1KVdBSyEgsVlBKzi9XAgC3DyzDIAAAAA==\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nStormEvents\\r\\n| where * has \"cow\"\\r\\n```',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/whereoperator\",\"whereoperator.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"zip\",\"The `zip` function accepts any number of `dynamic` arrays, and returns an\\r\\narray whose elements are each an array holding the elements of the input\\r\\narrays of the same index.\",\"## Syntax\\r\\n\\r\\n`zip(`*arrays*`)`\\r\\n\\r\\n## Parameters\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *arrays* | dynamic | &check; | The dynamic array values to zip. The function accepts between 2-16 arrays.|\",'> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAysoyswrUajKLNBIqcxLzM1M1og21DHWMY3V1FGAixjpmOiYxWpqAgB4H4QJLQAAAA==\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint zip(dynamic([1,3,5]), dynamic([2,4,6]))\\r\\n```\\r\\n\\r\\n**Output** \\r\\n\\r\\n|print_0|\\r\\n|--|\\r\\n|`[[1,2],[3,4],[5,6]]`|\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAysoyswrUajKLNBIqcxLzM1M1ohWclTSUTAEIj3TWE0dBbh4da2OgpKTUqymJgDjejoyNQAAAA==\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\nprint zip(dynamic([\"A\", 1, 1.5]), dynamic([{}, \"B\"]))\\r\\n```\\r\\n\\r\\n**Output** \\r\\n\\r\\n|print_0|\\r\\n|--|\\r\\n|`[[\"A\",{}], [1,\"B\"], [1.5, null]]`|\\r\\n\\r\\n> [!div class=\"nextstepaction\"]\\r\\n> <a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA0tJLAHCpJxUjUSrzLwSHYUkq+KSosy8dE2FaEMdpfy8VCUdIx2lkvJ8JR1jIJ1RlJqqFMvLVaNQXJqbm1iUWZWqkKhgq5CbmJ0an5NZXKKRqAk0BEUkSROkvqAoPys1uUShKrNAIxGoRBMADfxJ3HsAAAA=\" target=\"_blank\">Run the query<\\/a>\\r\\n\\r\\n```\\r\\ndatatable(a:int, b:string) [1,\"one\",2,\"two\",3,\"three\"]\\r\\n| summarize a = make_list(a), b = make_list(b)\\r\\n| project zip(a, b)\\r\\n```\\r\\n\\r\\n**Output** \\r\\n\\r\\n|print_0|\\r\\n|--|\\r\\n|`[[1,\"one\"],[2,\"two\"],[3,\"three\"]]`|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/zipfunction\",\"zipfunction.md\")))}}});Bridge.ns(\"Kusto.Data.IntelliSense.CslDocumentation\",$asm.$);Bridge.apply($asm.$.Kusto.Data.IntelliSense.CslDocumentation,{f1:function(kvp){return kvp.value}});Bridge.define(\"Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.ResolveResult\",{$kind:\"nested enum\",statics:{fields:{None:0,AppendEntities:1,ReplaceEntities:2}}});Bridge.define(\"Kusto.Data.IntelliSense.CslTopicDocumentation\",{props:{TokenKind:0,Name:null,ShortDescription:null,LongDescription:null,Examples:null,Url:null,MarkdownSource:null},ctors:{ctor:function(tokenKind,name,shortDescription,longDescription,examples,url,markdownSource){url===void 0&&(url=null);markdownSource===void 0&&(markdownSource=null);this.$initialize();this.TokenKind=tokenKind;this.Name=name;this.ShortDescription=shortDescription;this.LongDescription=longDescription;this.Examples=examples;this.Url=url;this.MarkdownSource=markdownSource}},methods:{GetMarkDownText:function(){var $t,sb=new System.Text.StringBuilder,part;sb.appendFormat(System.String.format(\"## {0} [web]({1})\",this.Name,this.Url));sb.appendLine();sb.appendLine();$t=Bridge.getEnumerator(System.Array.init([this.ShortDescription,this.LongDescription,this.Examples],System.String));try{while($t.moveNext())part=$t.Current,System.String.isNullOrEmpty(part)||(sb.appendLine(part),sb.appendLine())}finally{Bridge.is($t,System.IDisposable)&&$t.System$IDisposable$Dispose()}return sb.toString()},equals:function(obj){if(obj==null)return!1;var other=Bridge.as(obj,Kusto.Data.IntelliSense.CslTopicDocumentation);return other==null?!1:this.TokenKind===other.TokenKind&&Bridge.referenceEquals(this.Name,other.Name)&&Bridge.referenceEquals(this.ShortDescription,other.ShortDescription)&&Bridge.referenceEquals(this.Examples,other.Examples)},getHashCode:function(){var $t,$t1,$t2,$t3;return Bridge.getHashCode(this.TokenKind)^Bridge.getHashCode(this.Name)^($t=($t1=this.ShortDescription)!=null?Bridge.getHashCode($t1):null,$t!=null?$t:0)^($t2=($t3=this.Examples)!=null?Bridge.getHashCode($t3):null,$t2!=null?$t2:0)}}});Bridge.define(\"Kusto.Data.IntelliSense.DMRuleKind\",{$kind:\"enum\",statics:{fields:{None:0,Start:0,YieldAdminCommandsOptions:0,YieldShowCommandOptions:1,YieldShowClustersKeywordOptions:2,YieldShowClustersSettingsKeywordOptions:3,YieldShowClustersSettingsVersionKeywordOptions:4,YieldShowClustersSettingsWithEncryptedSecretsKeywordOptions:5,YieldShowPrincipalRolesCommandOptions:6,YieldAlterCommandOptions:7,YieldAlterMergeCommandOptions:8,YieldAlterClustersSettingsKeywordOptions:9,YieldCreateCommandOptions:10,YieldDropCommandOptions:11,YieldAddCommandOptions:12,YieldAddOrAlterCommandOptions:13,YieldAddDataObtainerKeyworkOptions:14,YieldAddDataObtainerInitializeKeyworkOptions:15,YieldAddDataObtainerInitializeWithKeyworkOptions:16,YieldGetCommandOptions:17,YieldGetIngestionQueuesCommandOptions:18,YieldGetIngestionQueuesTypeCommandOptions:19,YieldFlushCommandOptions:20,YieldInitializeCommandOptions:21,YieldInitializeClusterConfigCommandOptions:22,YieldInitializeClusterConfigEncryptionCommandOptions:23,YieldResetCommandOptions:24,YieldSetCommandOptions:25,YieldAlterClustersSettingsFromKeywordOptions:26,YieldAlterObtainerQueuesOptions:27,YieldAddOrAlterEventHubIngestionSourceSettingsOptions:28,YieldPurgeShowCommandOptions:29,YieldPurgeShowCommandFromKeywordOptions:30,YieldPurgeShowCommandToKeywordOptions:31,YieldPurgeTableCommandOptions:32,YieldPurgeMaterializedViewTableCommandOptions:33,YieldPurgeTableInDatabaseCommandOptions:34,YieldPurgeTableRecordsInDatabaseCommandOptions:35,YieldPurgeRetryCommandOptions:36,YieldPurgeRetryCommandFromKeywordOptions:37,YieldPurgeRetryCommandToKeywordOptions:38,YieldPurgeCancelCommandOptions:39,YieldPurgeCancelAllCommandsOptions:40,YieldClearCommandOptions:41,YieldClearIngestionQueuesCommandOptions:42,RefreshPolicyCacheCommandOptions:43},ctors:{init:function(){this.None=Kusto.Data.IntelliSense.RuleKind.None;this.Start=Kusto.Data.IntelliSense.RuleKind.Last}}}});Bridge.define(\"Kusto.Data.IntelliSense.EntityDataType\",{$kind:\"enum\",statics:{fields:{Empty:0,Object:1,DBNull:2,Boolean:3,Char:4,SByte:5,Byte:6,Int16:7,UInt16:8,Int32:9,UInt32:10,Int64:11,UInt64:12,Single:13,Double:14,Decimal:15,DateTime:16,String:18,Dynamic:19,TimeSpan:20}}});Bridge.define(\"Kusto.Data.IntelliSense.EntityDataTypeConverter\",{statics:{methods:{FromType:function(typeName){var typeCode={v:Kusto.Data.IntelliSense.EntityDataType.String};return System.Enum.tryParse(Kusto.Data.IntelliSense.EntityDataType,typeName,typeCode)||Bridge.referenceEquals(typeName,\"Guid\")&&(typeCode.v=Kusto.Data.IntelliSense.EntityDataType.String),typeCode.v}}}});Bridge.define(\"Kusto.Data.IntelliSense.ExpressionEntity\",{fields:{Operator:null,Name:null,Arguments:null,IsGenerated:!1},ctors:{init:function(){this.IsGenerated=!1}},methods:{FirstArgument:function(){return Kusto.Cloud.Platform.Utils.ExtendedEnumerable.SafeFastAny$2(System.String,this.Arguments)?System.Linq.Enumerable.from(this.Arguments,System.String).first():\"\"}}});Bridge.define(\"Kusto.Data.IntelliSense.ExpressionEntityParser\",{statics:{methods:{ParseEntities:function(input){return Kusto.Data.IntelliSense.ExpressionEntityParser.ParseEntitiesList(Kusto.Data.IntelliSense.ExpressionEntity,input,Kusto.Data.IntelliSense.ExpressionEntityParser.ParseEntityExpression)},ParseEntities$1:function(input,generateImplicitEntities){return Kusto.Data.IntelliSense.ExpressionEntityParser.ParseEntitiesList(Kusto.Data.IntelliSense.ExpressionEntity,input,Kusto.Data.IntelliSense.ExpressionEntityParser.ParseEntityExpression,generateImplicitEntities)},ParseEntitiesList:function(T,entities,parse,generateImplicitEntities){var result,i,ch,closingBracket,closingBracket1;if(generateImplicitEntities===void 0&&(generateImplicitEntities=null),result=new(System.Collections.Generic.List$1(T).ctor),System.String.isNullOrWhiteSpace(entities))return result;var state=0,chars=System.String.toCharArray(entities,0,entities.length),startToken=0,multipleColumnsResultsCount={v:0},startFunctionName=-1;for(i=0;i<chars.length;i=i+1|0)if(ch=chars[System.Array.index(i,chars)],state===0){if(startToken=i,ch===61)state=2,startFunctionName=i+1|0;else if(System.Char.isDigit(ch)||System.Char.isLetter(ch)||ch===42)multipleColumnsResultsCount.v=0,state=1,startFunctionName=i;else if(ch===91)i=Kusto.Data.IntelliSense.ExpressionEntityParser.IndexOfClosingBracket(chars,93,i+1|0),multipleColumnsResultsCount.v=result.Count,Kusto.Data.IntelliSense.ExpressionEntityParser.AddEntity(T,entities,result,startToken,i,parse),multipleColumnsResultsCount.v=result.Count-multipleColumnsResultsCount.v|0;else if(ch===40)i=Kusto.Data.IntelliSense.ExpressionEntityParser.IndexOfClosingBracket(chars,41,i+1|0),multipleColumnsResultsCount.v=result.Count,Kusto.Data.IntelliSense.ExpressionEntityParser.AddEntity(T,entities,result,startToken,i,parse),multipleColumnsResultsCount.v=result.Count-multipleColumnsResultsCount.v|0;else if(ch===41){Kusto.Data.IntelliSense.ExpressionEntityParser.AddEntity(T,entities,result,startToken,i,parse);break}i===(chars.length-1|0)&&(i=i-1|0,state===0&&(state=1))}else if(state===1){if(multipleColumnsResultsCount.v=0,ch===61)Kusto.Data.IntelliSense.ExpressionEntityParser.AddEntity(T,entities,result,startToken,i-1|0,parse),state=2;else if(ch===44)Kusto.Data.IntelliSense.ExpressionEntityParser.AddEntity(T,entities,result,startToken,i-1|0,parse),state=0;else if(ch===40){if(closingBracket=Kusto.Data.IntelliSense.ExpressionEntityParser.IndexOfClosingBracket(chars,41,i+1|0),Kusto.Data.IntelliSense.ExpressionEntityParser.GenerateMultipleColumnOutput(T,entities,i,startFunctionName,closingBracket,multipleColumnsResultsCount,result,parse,generateImplicitEntities)){i=closingBracket+1|0;state=0;continue}i=closingBracket}i===(chars.length-1|0)&&Kusto.Data.IntelliSense.ExpressionEntityParser.AddEntity(T,entities,result,startToken,i,parse)}else if(state===2)if(ch===44)multipleColumnsResultsCount.v=0,state=0;else if(ch===40)closingBracket1=Kusto.Data.IntelliSense.ExpressionEntityParser.IndexOfClosingBracket(chars,41,i+1|0),Kusto.Data.IntelliSense.ExpressionEntityParser.GenerateMultipleColumnOutput(T,entities,i,startFunctionName,closingBracket1,multipleColumnsResultsCount,result,parse,generateImplicitEntities),i=closingBracket1;else if(ch===41)break;return result},GenerateMultipleColumnOutput:function(T,entities,currentChar,startFunctionName,closingBracket,multipleColumnsResultsCount,result,parse,generateImplicitEntities){var added=!1,args,funcName;return Bridge.staticEquals(generateImplicitEntities,null)||startFunctionName===-1||(args=new(System.Collections.Generic.List$1(T).ctor),Kusto.Data.IntelliSense.ExpressionEntityParser.AddEntity(T,entities,args,currentChar,closingBracket,parse),funcName=entities.substr(startFunctionName,currentChar-startFunctionName|0).trim(),added=generateImplicitEntities(funcName,args,multipleColumnsResultsCount.v,result),multipleColumnsResultsCount.v=0,startFunctionName=-1),added},AddEntity:function(T,entities,result,startIndex,endIndex,parse){var tokenLen=(endIndex-startIndex|0)+1|0,token,entity;tokenLen<=0||(token=(startIndex+tokenLen|0)>=entities.length?entities.substr(startIndex):entities.substr(startIndex,tokenLen),token=Kusto.Data.IntelliSense.ExpressionEntityParser.UnescapeEntityName(token),entity=parse(token),result.AddRange(entity))},UnescapeEntityName:function(token){return token=token.trim(),token=Kusto.Cloud.Platform.Utils.ExtendedString.TrimBalancedSquareBrackets(token),Kusto.Cloud.Platform.Utils.ExtendedString.TrimBalancedSingleAndDoubleQuotes(token)},NormalizeEntityName:function(entityName){var i,ch;if(System.String.isNullOrEmpty(entityName))return\"\";if(!System.Linq.Enumerable.from(entityName,System.Char).contains(46)&&!System.Linq.Enumerable.from(entityName,System.Char).contains(91))return entityName;var sb=new System.Text.StringBuilder,chars=System.String.toCharArray(entityName,0,entityName.length),state=0;for(i=0;i<chars.length;i=i+1|0){ch=chars[System.Array.index(i,chars)];switch(state){case 0:ch===46?(sb.append(\"_\"),state=1):ch===91?(sb.append(\"_\"),state=2):sb.append(String.fromCharCode(ch));break;case 1:ch!==91&&sb.append(String.fromCharCode(ch));state=2;break;case 2:if(ch===39||ch===34){var start=i+1|0,end=Kusto.Data.IntelliSense.ExpressionEntityParser.ConsumeTill(chars,start,ch),entity_part=entityName.substr(start,end-start|0);entity_part=System.String.replaceAll(entity_part,String.fromCharCode(32),String.fromCharCode(95));sb.append(entity_part);i=end}else ch===93?state=0:sb.append(String.fromCharCode(ch));break}}return sb.toString()},ConsumeTill:function(chars,start,ch){for(var i=start;i<chars.length;i=i+1|0)if(chars[System.Array.index(i,chars)]===ch)return i;return chars.length},ParseEntityExpression:function(token){var $t,indexOfAssignment=System.String.indexOf(token,String.fromCharCode(61)),indexOfStartingBracket=System.String.indexOf(token,String.fromCharCode(40)),entityName,indexOfEndingBracket,entityName1,entitiesList,entities;if(indexOfAssignment>0&&(indexOfStartingBracket<0||indexOfAssignment<indexOfStartingBracket))return entityName=Kusto.Data.IntelliSense.ExpressionEntityParser.NormalizeEntityName(token.substr(0,indexOfAssignment).trim()),System.Array.init([($t=new Kusto.Data.IntelliSense.ExpressionEntity,$t.Name=entityName,$t)],Kusto.Data.IntelliSense.ExpressionEntity);if(indexOfStartingBracket<0)return indexOfEndingBracket=System.String.indexOf(token,String.fromCharCode(41)),indexOfEndingBracket>=0&&(token=token.substr(0,indexOfEndingBracket)),entityName1=Kusto.Data.IntelliSense.ExpressionEntityParser.NormalizeEntityName(token.trim()),System.Array.init([($t=new Kusto.Data.IntelliSense.ExpressionEntity,$t.Name=entityName1,$t)],Kusto.Data.IntelliSense.ExpressionEntity);else if(indexOfStartingBracket===0)return entitiesList=Kusto.Cloud.Platform.Utils.ExtendedString.TrimBalancedRoundBrackets(token),entities=Kusto.Data.IntelliSense.ExpressionEntityParser.ParseEntitiesList(System.String,entitiesList,$asm.$.Kusto.Data.IntelliSense.ExpressionEntityParser.f1),System.Linq.Enumerable.from(entities,System.String).select($asm.$.Kusto.Data.IntelliSense.ExpressionEntityParser.f2);var op=token.substr(0,indexOfStartingBracket).trim(),argList=Kusto.Cloud.Platform.Utils.ExtendedString.TrimBalancedRoundBrackets(token.substr(indexOfStartingBracket)),$arguments=Kusto.Data.IntelliSense.ExpressionEntityParser.ParseEntitiesList(System.String,argList,$asm.$.Kusto.Data.IntelliSense.ExpressionEntityParser.f1),result=($t=new Kusto.Data.IntelliSense.ExpressionEntity,$t.Operator=op,$t);return System.Linq.Enumerable.from($arguments,System.String).any()&&(result.Name=Kusto.Cloud.Platform.Utils.ExtendedString.TrimBalancedRoundBrackets($arguments.getItem(0)),result.Arguments=System.Linq.Enumerable.from($arguments,System.String).skip(1).ToArray(System.String)),System.Array.init([result],Kusto.Data.IntelliSense.ExpressionEntity)},IndexOfClosingBracket:function(chars,closingBracket,startIndex){for(var ch,i=startIndex;i<chars.length;i=i+1|0)if(ch=chars[System.Array.index(i,chars)],ch===40)i=Kusto.Data.IntelliSense.ExpressionEntityParser.IndexOfClosingBracket(chars,41,i+1|0);else if(ch===91)i=Kusto.Data.IntelliSense.ExpressionEntityParser.IndexOfClosingBracket(chars,93,i+1|0);else if(ch===closingBracket)return i;return chars.length}}}});Bridge.ns(\"Kusto.Data.IntelliSense.ExpressionEntityParser\",$asm.$);Bridge.apply($asm.$.Kusto.Data.IntelliSense.ExpressionEntityParser,{f1:function(s){return System.Array.init([s.trim()],System.String)},f2:function(e){var $t1;return $t1=new Kusto.Data.IntelliSense.ExpressionEntity,$t1.Name=Kusto.Data.IntelliSense.ExpressionEntityParser.NormalizeEntityName(e),$t1}});Bridge.define(\"Kusto.Data.IntelliSense.IKustoIntelliSenseSchemaResolver\",{$kind:\"interface\"});Bridge.define(\"Kusto.Data.IntelliSense.IntelliSenseCommandTip\",{fields:{m_signature:null},props:{Name:null,Signature:{get:function(){if(System.String.isNullOrEmpty(this.m_signature))if(this.NameSuffix!=null)this.m_signature=(this.Name||\"\")+(this.NameSuffix||\"\");else if(this.Parameters!=null&&System.Linq.Enumerable.from(this.Parameters,Kusto.Data.IntelliSense.IntelliSenseCommandTipParameter).any()){var parameters=Bridge.toArray(System.Linq.Enumerable.from(this.Parameters,Kusto.Data.IntelliSense.IntelliSenseCommandTipParameter).select($asm.$.Kusto.Data.IntelliSense.IntelliSenseCommandTip.f1)).join(\", \");this.m_signature=System.String.format(\"<b>{0}(<\\/b>{1}<b>)<\\/b>\",this.Name,parameters)}else this.m_signature=(this.Name||\"\")+\"()\";return this.m_signature}},Summary:null,Usage:null,NameSuffix:null,Parameters:null},methods:{GetSignatureWithBoldParameter:function(i){var $t,$t1,signature,boldElement,parameters,parameters1;return this.Parameters!=null&&System.Linq.Enumerable.from(this.Parameters,Kusto.Data.IntelliSense.IntelliSenseCommandTipParameter).any()?System.Linq.Enumerable.from(this.Parameters,Kusto.Data.IntelliSense.IntelliSenseCommandTipParameter).count()>i?(boldElement=System.Array.init([System.String.format(\"<b>{0}<\\/b>\",[($t=($t1=Kusto.Data.IntelliSense.IntelliSenseCommandTipParameter,System.Linq.Enumerable.from(this.Parameters,$t1).ToArray($t1)))[System.Array.index(i,$t)].PlainSignature])],System.String),parameters=Bridge.toArray(System.Linq.Enumerable.from(this.Parameters,Kusto.Data.IntelliSense.IntelliSenseCommandTipParameter).take(i).select($asm.$.Kusto.Data.IntelliSense.IntelliSenseCommandTip.f2).concat(boldElement).concat(System.Linq.Enumerable.from(this.Parameters,Kusto.Data.IntelliSense.IntelliSenseCommandTipParameter).skip(i+1|0).select($asm.$.Kusto.Data.IntelliSense.IntelliSenseCommandTip.f2))).join(\", \"),signature=System.String.format('<font color=\"blue\"><b>{0}<\\/font>(<\\/b>{1}<b>)<\\/b>',this.Name,parameters)):(parameters1=Bridge.toArray(System.Linq.Enumerable.from(this.Parameters,Kusto.Data.IntelliSense.IntelliSenseCommandTipParameter).select($asm.$.Kusto.Data.IntelliSense.IntelliSenseCommandTip.f2)).join(\", \"),signature=System.String.format('<font color=\"blue\"><b>{0}<\\/font>(<\\/b>{1}<b>)<\\/b>',this.Name,parameters1)):signature=this.NameSuffix!=null?(this.Name||\"\")+(this.NameSuffix||\"\"):(this.Name||\"\")+\"()\",signature},Clone:function(){var $t,parameters=this.Parameters!=null&&System.Linq.Enumerable.from(this.Parameters,Kusto.Data.IntelliSense.IntelliSenseCommandTipParameter).any()?System.Linq.Enumerable.from(this.Parameters,Kusto.Data.IntelliSense.IntelliSenseCommandTipParameter).select($asm.$.Kusto.Data.IntelliSense.IntelliSenseCommandTip.f3).ToArray(Kusto.Data.IntelliSense.IntelliSenseCommandTipParameter):null;return $t=new Kusto.Data.IntelliSense.IntelliSenseCommandTip,$t.Name=this.Name,$t.NameSuffix=this.NameSuffix,$t.Parameters=parameters,$t.Summary=this.Summary,$t.Usage=this.Usage,$t}}});Bridge.ns(\"Kusto.Data.IntelliSense.IntelliSenseCommandTip\",$asm.$);Bridge.apply($asm.$.Kusto.Data.IntelliSense.IntelliSenseCommandTip,{f1:function(p){return p.Singature},f2:function(p){return p.PlainSignature},f3:function(p){return p.Clone()}});Bridge.define(\"Kusto.Data.IntelliSense.IntelliSenseCommandTipParameter\",{props:{Name:null,Description:null,DataType:null,Optional:!1,IsArgsArray:!1,Singature:{get:function(){return this.IsArgsArray?\"...\":System.String.format(\"<b>{0}{1}<\\/b> <i>{2}<\\/i>\",this.Optional?\"[?] \":\"\",this.DataType,this.Name)}},PlainSignature:{get:function(){return this.IsArgsArray?\"...\":System.String.format('{0}<font color=\"blue\">{1}<\\/font> <i>{2}<\\/i>',this.Optional?\"[?] \":\"\",this.DataType,this.Name)}}},methods:{Clone:function(){var $t;return $t=new Kusto.Data.IntelliSense.IntelliSenseCommandTipParameter,$t.DataType=this.DataType,$t.Description=this.Description,$t.IsArgsArray=this.IsArgsArray,$t.Name=this.Name,$t.Optional=this.Optional,$t}}});Bridge.define(\"Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.PrivateTracer\",{$kind:\"nested class\",statics:{fields:{Tracer:null},ctors:{init:function(){this.Tracer=new Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.PrivateTracer}}},methods:{TraceVerbose:function(format,list){list===void 0&&(list=[])}}});Bridge.define(\"Kusto.Data.IntelliSense.KustoCommandContext\",{inherits:function(){return[System.IEquatable$1(Kusto.Data.IntelliSense.KustoCommandContext)]},statics:{fields:{Empty:null},ctors:{init:function(){this.Empty=new Kusto.Data.IntelliSense.KustoCommandContext(\"\")}}},props:{Context:null,Operation:0},alias:[\"equalsT\",\"System$IEquatable$1$Kusto$Data$IntelliSense$KustoCommandContext$equalsT\"],ctors:{ctor:function(context,operation){operation===void 0&&(operation=0);this.$initialize();this.Context=context;this.Operation=operation}},methods:{equalsT:function(other){return other!=null&&System.String.equals(other.Context,this.Context)&&other.Operation===this.Operation},getHashCode:function(){return Bridge.getHashCode(this.Context)^Bridge.getHashCode(this.Operation)},Flatten:function(){return System.Linq.Enumerable.from(System.String.split(this.Context,System.Array.init([44],System.Char).map(function(i){return String.fromCharCode(i)}),null,1),System.String).select(Bridge.fn.bind(this,$asm.$.Kusto.Data.IntelliSense.KustoCommandContext.f1)).ToArray(Kusto.Data.IntelliSense.KustoCommandContext)},IsEmpty:function(){return System.String.isNullOrEmpty(this.Context)}}});Bridge.ns(\"Kusto.Data.IntelliSense.KustoCommandContext\",$asm.$);Bridge.apply($asm.$.Kusto.Data.IntelliSense.KustoCommandContext,{f1:function(t){return new Kusto.Data.IntelliSense.KustoCommandContext(t.trim(),this.Operation)}});Bridge.define(\"Kusto.Data.IntelliSense.KustoIntelliSenseAccountEntity\",{props:{Name:null}});Bridge.define(\"Kusto.Data.IntelliSense.KustoIntelliSenseClusterEntity\",{props:{ConnectionString:null,Alias:null,Databases:null,Plugins:null},methods:{Clone:function(){var $t,$t1,$t2;return $t=new Kusto.Data.IntelliSense.KustoIntelliSenseClusterEntity,$t.ConnectionString=this.ConnectionString,$t.Alias=this.Alias,$t.Databases=($t1=this.Databases)!=null?System.Linq.Enumerable.from($t1,Kusto.Data.IntelliSense.KustoIntelliSenseDatabaseEntity).select($asm.$.Kusto.Data.IntelliSense.KustoIntelliSenseClusterEntity.f1).ToArray(Kusto.Data.IntelliSense.KustoIntelliSenseDatabaseEntity):null,$t.Plugins=($t2=this.Plugins)!=null?System.Linq.Enumerable.from($t2,Kusto.Data.IntelliSense.KustoIntelliSensePluginEntity).select($asm.$.Kusto.Data.IntelliSense.KustoIntelliSenseClusterEntity.f2).ToArray(Kusto.Data.IntelliSense.KustoIntelliSensePluginEntity):null,$t}}});Bridge.ns(\"Kusto.Data.IntelliSense.KustoIntelliSenseClusterEntity\",$asm.$);Bridge.apply($asm.$.Kusto.Data.IntelliSense.KustoIntelliSenseClusterEntity,{f1:function(db){return db.Clone()},f2:function(p){return p.Clone()}});Bridge.define(\"Kusto.Data.IntelliSense.KustoIntelliSenseColumnEntity\",{props:{Name:null,TypeCode:0},methods:{Clone:function(){var $t;return $t=new Kusto.Data.IntelliSense.KustoIntelliSenseColumnEntity,$t.Name=this.Name,$t.TypeCode=this.TypeCode,$t}}});Bridge.define(\"Kusto.Data.IntelliSense.KustoIntelliSenseDatabaseEntity\",{props:{Name:null,Alias:null,Tables:null,Functions:null,IsInitialized:!1},methods:{Clone:function(){var $t,$t1,$t2;return $t=new Kusto.Data.IntelliSense.KustoIntelliSenseDatabaseEntity,$t.Name=this.Name,$t.Alias=this.Alias,$t.Tables=($t1=this.Tables)!=null?System.Linq.Enumerable.from($t1,Kusto.Data.IntelliSense.KustoIntelliSenseTableEntity).select($asm.$.Kusto.Data.IntelliSense.KustoIntelliSenseDatabaseEntity.f1).ToArray(Kusto.Data.IntelliSense.KustoIntelliSenseTableEntity):null,$t.Functions=($t2=this.Functions)!=null?System.Linq.Enumerable.from($t2,Kusto.Data.IntelliSense.KustoIntelliSenseFunctionEntity).select($asm.$.Kusto.Data.IntelliSense.KustoIntelliSenseDatabaseEntity.f2).ToArray(Kusto.Data.IntelliSense.KustoIntelliSenseFunctionEntity):null,$t.IsInitialized=this.IsInitialized,$t}}});Bridge.ns(\"Kusto.Data.IntelliSense.KustoIntelliSenseDatabaseEntity\",$asm.$);Bridge.apply($asm.$.Kusto.Data.IntelliSense.KustoIntelliSenseDatabaseEntity,{f1:function(t){return t.Clone()},f2:function(f){return f.Clone()}});Bridge.define(\"Kusto.Data.IntelliSense.KustoIntelliSenseFunctionEntity\",{props:{Name:null,CallName:null,Expression:null},methods:{Clone:function(){var $t;return $t=new Kusto.Data.IntelliSense.KustoIntelliSenseFunctionEntity,$t.Name=this.Name,$t.CallName=this.CallName,$t.Expression=this.Expression,$t}}});Bridge.define(\"Kusto.Data.IntelliSense.KustoIntelliSensePluginEntity\",{props:{Name:null},methods:{Clone:function(){var $t;return $t=new Kusto.Data.IntelliSense.KustoIntelliSensePluginEntity,$t.Name=this.Name,$t}}});Bridge.define(\"Kusto.Data.IntelliSense.KustoIntelliSenseQuerySchema\",{props:{Cluster:null,Database:null},ctors:{ctor:function(cluster,database){this.$initialize();this.Cluster=cluster;this.Database=database}},methods:{Clone:function(){return new Kusto.Data.IntelliSense.KustoIntelliSenseQuerySchema(this.Cluster!=null?this.Cluster.Clone():null,this.Database!=null?this.Database.Clone():null)}}});Bridge.define(\"Kusto.Data.IntelliSense.KustoIntelliSenseServiceEntity\",{props:{Name:null}});Bridge.define(\"Kusto.Data.IntelliSense.KustoIntelliSenseTableEntity\",{props:{Name:null,IsInvisible:!1,Columns:null},methods:{Clone:function(){var $t,$t1;return $t=new Kusto.Data.IntelliSense.KustoIntelliSenseTableEntity,$t.Name=this.Name,$t.Columns=($t1=this.Columns)!=null?System.Linq.Enumerable.from($t1,Kusto.Data.IntelliSense.KustoIntelliSenseColumnEntity).select($asm.$.Kusto.Data.IntelliSense.KustoIntelliSenseTableEntity.f1).ToArray(Kusto.Data.IntelliSense.KustoIntelliSenseColumnEntity):null,$t.IsInvisible=this.IsInvisible,$t}}});Bridge.ns(\"Kusto.Data.IntelliSense.KustoIntelliSenseTableEntity\",$asm.$);Bridge.apply($asm.$.Kusto.Data.IntelliSense.KustoIntelliSenseTableEntity,{f1:function(c){return c.Clone()}});Bridge.define(\"Kusto.Data.IntelliSense.OptionKind\",{$kind:\"enum\",statics:{fields:{None:0,Operator:1,Command:2,Service:3,Policy:4,Database:5,Table:6,DataType:7,Literal:8,Parameter:9,IngestionMapping:10,ExpressionFunction:11,Option:12,OptionKind:13,OptionRender:14,Column:15,ColumnString:16,ColumnNumeric:17,ColumnDateTime:18,ColumnTimespan:19,FunctionLocal:20,FunctionServerSide:21,FunctionAggregation:22,FunctionFilter:23,FunctionScalar:24,ClientDirective:25,MaterializedView:26,Graph:27}}});Bridge.define(\"Kusto.Data.IntelliSense.ParseMode\",{$kind:\"enum\",statics:{fields:{CommandTokensOnly:0,TokenizeAllText:1}}});Bridge.define(\"Kusto.Data.IntelliSense.RuleKind\",{$kind:\"enum\",statics:{fields:{None:0,YieldColumnNamesForFilter:1,YieldColumnNamesForProject:2,YieldColumnNamesForProjectAway:3,YieldColumnNamesForProjectRename:4,YieldColumnNamesForJoin:5,YieldKindFlavorsForJoin:6,YieldKindFlavorsForReduceBy:7,YieldColumnNamesForOrdering:8,YieldColumnNamesForTwoParamFunctions:9,YieldColumnNamesForThreeParamFunctions:10,YieldColumnNamesForManyParamFunctions:11,YieldColumnNamesAndFunctionsForExtend:12,YieldColumnNamesForMakeSeries:13,YieldTableNames:14,YieldTableNamesForFindIn:15,YieldRenderOptions:16,YieldRenderKindKeywordOption:17,YieldRenderKindOptions:18,YieldOperatorsAfterPipe:19,YieldStringComparisonOptions:20,YieldNumericComparisonOptions:21,YieldDateTimeOperatorsOptions:22,YieldSummarizeOperatorOptions:23,YieldAscendingDescendingOptions:24,YieldNumericScalarOptions:25,YieldByKeywordOptions:26,YieldWithKeywordOptions:27,YieldStarOption:28,YieldParseTypesKeywordOptions:29,YieldColumnNamesForParse:30,YieldColumnNamesForDiffPatternsPluginSplitParameter:31,YieldParseKeywordKindsOptions:32,YieldRangeFromOptions:33,YieldRangeFromToOptions:34,YieldRangeFromToStepOptions:35,YieldQueryParameters:36,YieldEvaluateOperatorOptions:37,YieldPostJoinOptions:38,YieldPostFindInOptions:39,YieldPostFindOptions:40,YieldTopNestedOfKeywordOption:41,YieldTopNestedOthersOption:42,YieldTopNestedKeywordOption:43,YieldTopHittersKeywordOption:44,YieldTimespanOptions:45,YieldDatabaseNamesOptions:46,YieldClusterNamesOptions:47,YieldDatabaseFunctionOption:48,YieldNullsFirstNullsLastOptions:49,YieldTableNamesForRemoteQueryOptions:50,YieldColumnNamesForRender:51,YieldColumnNamesForFilterInFind:52,YieldColumnNamesForProjectInFind:53,YieldEndOrContinueFindInOptions:54,YieldPostFindInListOptions:55,YieldFindProjectSmartOptions:56,YieldMakeSeriesOperatorOptions:57,YieldMakeSeriesOperatorForDefaultOrOn:58,YieldMakeSeriesOperatorForOn:59,YieldMakeSeriesOperatorForRange:60,YieldMakeSeriesOperatorForBy:61,YieldPostSearchOptions:62,YieldPostSearchKindOptions:63,YieldSearchKindOptions:64,YieldInsideSearchOptions:65,YieldClientDirectivesOptions:66,YieldClientDirective_ConnectOptions:67,Last:68}}});Bridge.define(\"Kusto.Data.Net.Common.ExtendedKustoDataStreamFormat\",{statics:{methods:{FastToString:function(that){switch(that){case Kusto.Data.Net.Common.KustoDataStreamFormat.KustoJsonDataStream:return\"KustoJsonDataStream\";case Kusto.Data.Net.Common.KustoDataStreamFormat.KustoDataStream:return\"KustoDataStream\";default:break}return System.String.format(\"[unknown: {0}]\",[Bridge.box(that,System.Int32)])},FastIsDefined$1:function(value){var dummy={v:new Kusto.Data.Net.Common.KustoDataStreamFormat};return Kusto.Data.Net.Common.ExtendedKustoDataStreamFormat.FastTryParse(value,dummy,!1,!0)},FastIsDefined:function(value){switch(value){case Kusto.Data.Net.Common.KustoDataStreamFormat.KustoJsonDataStream:return!0;case Kusto.Data.Net.Common.KustoDataStreamFormat.KustoDataStream:return!0;default:return!1}},FastHasFlag$1:function(that,flag){return(that&flag)===flag},FastHasFlag:function(that,flag){return(that&flag)===flag},FastParse:function(value,ignoreCase,ignoreInts){ignoreCase===void 0&&(ignoreCase=!1);ignoreInts===void 0&&(ignoreInts=!1);var ret={v:new Kusto.Data.Net.Common.KustoDataStreamFormat};if(Kusto.Data.Net.Common.ExtendedKustoDataStreamFormat.FastTryParse(value,ret,ignoreCase,ignoreInts))return ret.v;throw new System.Exception(\"Invalid enum value: \"+(value||\"\"));},FastTryParse:function(value,ret,ignoreCase,ignoreInts){ignoreCase===void 0&&(ignoreCase=!1);ignoreInts===void 0&&(ignoreInts=!1);switch(value){case\"0\":case\"KustoJsonDataStream\":return ret.v=Kusto.Data.Net.Common.KustoDataStreamFormat.KustoJsonDataStream,!0;case\"1\":case\"KustoDataStream\":return ret.v=Kusto.Data.Net.Common.KustoDataStreamFormat.KustoDataStream,!0;default:break}if(ignoreCase&&!System.String.isNullOrEmpty(value))switch(value.toLowerCase()){case\"kustojsondatastream\":return ret.v=Kusto.Data.Net.Common.KustoDataStreamFormat.KustoJsonDataStream,!0;case\"kustodatastream\":return ret.v=Kusto.Data.Net.Common.KustoDataStreamFormat.KustoDataStream,!0;default:break}if(!ignoreInts){var reti={v:0};if(System.Int32.tryParse(value,reti))return ret.v=reti.v,!0}return ret.v=0,!1},FastGetHashCode:function(that){return that},FastGetDescription:function(that){switch(that){case Kusto.Data.Net.Common.KustoDataStreamFormat.KustoJsonDataStream:return\"JSON representation of the Kusto Data Stream (stable).\";case Kusto.Data.Net.Common.KustoDataStreamFormat.KustoDataStream:return\"Binary data stream emitted by the Kusto engine. For internal use only (may change with no notice).\";default:return null}}}}});Bridge.define(\"Kusto.Data.Net.Common.ExtendedRemoteServiceType\",{statics:{methods:{FastToString:function(that){switch(that){case Kusto.Data.Net.Common.RemoteServiceType.Admin:return\"Admin\";case Kusto.Data.Net.Common.RemoteServiceType.Query:return\"Query\";case Kusto.Data.Net.Common.RemoteServiceType.UIRedirect:return\"UIRedirect\";case Kusto.Data.Net.Common.RemoteServiceType.DataManagement:return\"DataManagement\";case Kusto.Data.Net.Common.RemoteServiceType.ClusterManagement:return\"ClusterManagement\";case Kusto.Data.Net.Common.RemoteServiceType.Bridge:return\"Bridge\";case Kusto.Data.Net.Common.RemoteServiceType.Ping:return\"Ping\";case Kusto.Data.Net.Common.RemoteServiceType.CustomType:return\"CustomType\";case Kusto.Data.Net.Common.RemoteServiceType.StreamIngest:return\"StreamIngest\";case Kusto.Data.Net.Common.RemoteServiceType.PassiveLogin:return\"PassiveLogin\";case Kusto.Data.Net.Common.RemoteServiceType.ArmResourceProvider:return\"ArmResourceProvider\";case Kusto.Data.Net.Common.RemoteServiceType.AuthMetadata:return\"AuthMetadata\";case Kusto.Data.Net.Common.RemoteServiceType.Flighting:return\"Flighting\";case Kusto.Data.Net.Common.RemoteServiceType.HealthSuite:return\"HealthSuite\";case Kusto.Data.Net.Common.RemoteServiceType.Gaia:return\"Gaia\";case Kusto.Data.Net.Common.RemoteServiceType.Proxy:return\"Proxy\";case Kusto.Data.Net.Common.RemoteServiceType.SaasResourceProvider:return\"SaasResourceProvider\";case Kusto.Data.Net.Common.RemoteServiceType.Dashboard:return\"Dashboard\";case Kusto.Data.Net.Common.RemoteServiceType.AllControlCommands:return\"AllControlCommands\";default:break}var allFlags=Kusto.Data.Net.Common.ExtendedRemoteServiceType.FastGetFlags(that);return Bridge.toArray(allFlags).join(\"|\")},FastIsDefined$1:function(value){var dummy={v:new Kusto.Data.Net.Common.RemoteServiceType};return Kusto.Data.Net.Common.ExtendedRemoteServiceType.FastTryParse(value,dummy,!1,!0)},FastIsDefined:function(value){switch(value){case Kusto.Data.Net.Common.RemoteServiceType.Admin:return!0;case Kusto.Data.Net.Common.RemoteServiceType.Query:return!0;case Kusto.Data.Net.Common.RemoteServiceType.UIRedirect:return!0;case Kusto.Data.Net.Common.RemoteServiceType.DataManagement:return!0;case Kusto.Data.Net.Common.RemoteServiceType.ClusterManagement:return!0;case Kusto.Data.Net.Common.RemoteServiceType.Bridge:return!0;case Kusto.Data.Net.Common.RemoteServiceType.Ping:return!0;case Kusto.Data.Net.Common.RemoteServiceType.CustomType:return!0;case Kusto.Data.Net.Common.RemoteServiceType.StreamIngest:return!0;case Kusto.Data.Net.Common.RemoteServiceType.PassiveLogin:return!0;case Kusto.Data.Net.Common.RemoteServiceType.ArmResourceProvider:return!0;case Kusto.Data.Net.Common.RemoteServiceType.AuthMetadata:return!0;case Kusto.Data.Net.Common.RemoteServiceType.Flighting:return!0;case Kusto.Data.Net.Common.RemoteServiceType.HealthSuite:return!0;case Kusto.Data.Net.Common.RemoteServiceType.Gaia:return!0;case Kusto.Data.Net.Common.RemoteServiceType.Proxy:return!0;case Kusto.Data.Net.Common.RemoteServiceType.SaasResourceProvider:return!0;case Kusto.Data.Net.Common.RemoteServiceType.Dashboard:return!0;case Kusto.Data.Net.Common.RemoteServiceType.AllControlCommands:return!0;default:return!1}},FastHasFlag$1:function(that,flag){return(that&flag)===flag},FastHasFlag:function(that,flag){return(that&flag)===flag},FastHasAllFlags:function(that,flags){return(that&flags)===flags},FastHasAnyFlags:function(that,flags){return(that&flags)!=0},FastCountIntersectionsWith:function(that,flags){var intersections=that&flags;return Kusto.Cloud.Platform.Utils.BitTwiddling.CountBits(intersections)},FastParse:function(value,ignoreCase,ignoreInts){ignoreCase===void 0&&(ignoreCase=!1);ignoreInts===void 0&&(ignoreInts=!1);var ret={v:new Kusto.Data.Net.Common.RemoteServiceType};if(Kusto.Data.Net.Common.ExtendedRemoteServiceType.FastTryParse(value,ret,ignoreCase,ignoreInts))return ret.v;throw new System.Exception(\"Invalid enum value: \"+(value||\"\"));},FastTryParse:function(value,ret,ignoreCase,ignoreInts){var $t,reti,parts,part,partResult;ignoreCase===void 0&&(ignoreCase=!1);ignoreInts===void 0&&(ignoreInts=!1);switch(value){case\"1\":case\"Admin\":return ret.v=Kusto.Data.Net.Common.RemoteServiceType.Admin,!0;case\"2\":case\"Query\":return ret.v=Kusto.Data.Net.Common.RemoteServiceType.Query,!0;case\"4\":case\"UIRedirect\":return ret.v=Kusto.Data.Net.Common.RemoteServiceType.UIRedirect,!0;case\"8\":case\"DataManagement\":return ret.v=Kusto.Data.Net.Common.RemoteServiceType.DataManagement,!0;case\"16\":case\"ClusterManagement\":return ret.v=Kusto.Data.Net.Common.RemoteServiceType.ClusterManagement,!0;case\"32\":case\"Bridge\":return ret.v=Kusto.Data.Net.Common.RemoteServiceType.Bridge,!0;case\"64\":case\"Ping\":return ret.v=Kusto.Data.Net.Common.RemoteServiceType.Ping,!0;case\"1024\":case\"CustomType\":return ret.v=Kusto.Data.Net.Common.RemoteServiceType.CustomType,!0;case\"2048\":case\"StreamIngest\":return ret.v=Kusto.Data.Net.Common.RemoteServiceType.StreamIngest,!0;case\"4096\":case\"PassiveLogin\":return ret.v=Kusto.Data.Net.Common.RemoteServiceType.PassiveLogin,!0;case\"8192\":case\"ArmResourceProvider\":return ret.v=Kusto.Data.Net.Common.RemoteServiceType.ArmResourceProvider,!0;case\"16384\":case\"AuthMetadata\":return ret.v=Kusto.Data.Net.Common.RemoteServiceType.AuthMetadata,!0;case\"32768\":case\"Flighting\":return ret.v=Kusto.Data.Net.Common.RemoteServiceType.Flighting,!0;case\"65536\":case\"HealthSuite\":return ret.v=Kusto.Data.Net.Common.RemoteServiceType.HealthSuite,!0;case\"131072\":case\"Gaia\":return ret.v=Kusto.Data.Net.Common.RemoteServiceType.Gaia,!0;case\"262144\":case\"Proxy\":return ret.v=Kusto.Data.Net.Common.RemoteServiceType.Proxy,!0;case\"524288\":case\"SaasResourceProvider\":return ret.v=Kusto.Data.Net.Common.RemoteServiceType.SaasResourceProvider,!0;case\"1048576\":case\"Dashboard\":return ret.v=Kusto.Data.Net.Common.RemoteServiceType.Dashboard,!0;case\"Admin | DataManagement | ClusterManagement | Bridge\":case\"AllControlCommands\":return ret.v=Kusto.Data.Net.Common.RemoteServiceType.AllControlCommands,!0;default:break}if(ignoreCase&&!System.String.isNullOrEmpty(value))switch(value.toLowerCase()){case\"admin\":return ret.v=Kusto.Data.Net.Common.RemoteServiceType.Admin,!0;case\"query\":return ret.v=Kusto.Data.Net.Common.RemoteServiceType.Query,!0;case\"uiredirect\":return ret.v=Kusto.Data.Net.Common.RemoteServiceType.UIRedirect,!0;case\"datamanagement\":return ret.v=Kusto.Data.Net.Common.RemoteServiceType.DataManagement,!0;case\"clustermanagement\":return ret.v=Kusto.Data.Net.Common.RemoteServiceType.ClusterManagement,!0;case\"bridge\":return ret.v=Kusto.Data.Net.Common.RemoteServiceType.Bridge,!0;case\"ping\":return ret.v=Kusto.Data.Net.Common.RemoteServiceType.Ping,!0;case\"customtype\":return ret.v=Kusto.Data.Net.Common.RemoteServiceType.CustomType,!0;case\"streamingest\":return ret.v=Kusto.Data.Net.Common.RemoteServiceType.StreamIngest,!0;case\"passivelogin\":return ret.v=Kusto.Data.Net.Common.RemoteServiceType.PassiveLogin,!0;case\"armresourceprovider\":return ret.v=Kusto.Data.Net.Common.RemoteServiceType.ArmResourceProvider,!0;case\"authmetadata\":return ret.v=Kusto.Data.Net.Common.RemoteServiceType.AuthMetadata,!0;case\"flighting\":return ret.v=Kusto.Data.Net.Common.RemoteServiceType.Flighting,!0;case\"healthsuite\":return ret.v=Kusto.Data.Net.Common.RemoteServiceType.HealthSuite,!0;case\"gaia\":return ret.v=Kusto.Data.Net.Common.RemoteServiceType.Gaia,!0;case\"proxy\":return ret.v=Kusto.Data.Net.Common.RemoteServiceType.Proxy,!0;case\"saasresourceprovider\":return ret.v=Kusto.Data.Net.Common.RemoteServiceType.SaasResourceProvider,!0;case\"dashboard\":return ret.v=Kusto.Data.Net.Common.RemoteServiceType.Dashboard,!0;case\"allcontrolcommands\":return ret.v=Kusto.Data.Net.Common.RemoteServiceType.AllControlCommands,!0;default:break}if(!ignoreInts&&(reti={v:0},System.Int32.tryParse(value,reti)))return ret.v=reti.v,!0;if(ret.v=0,!System.String.isNullOrEmpty(value)&&System.String.contains(value,\"|\")){parts=System.String.split(value,System.Array.init([124],System.Char).map(function(i){return String.fromCharCode(i)}),null,1);$t=Bridge.getEnumerator(parts);try{while($t.moveNext())if(part=$t.Current,partResult={v:new Kusto.Data.Net.Common.RemoteServiceType},Kusto.Data.Net.Common.ExtendedRemoteServiceType.FastTryParse(part,partResult,ignoreCase,ignoreInts))ret.v|=partResult.v;else return ret.v=0,!1}finally{Bridge.is($t,System.IDisposable)&&$t.System$IDisposable$Dispose()}return!0}return!1},FastGetHashCode:function(that){return that},FastGetDescription:function(that){switch(that){case Kusto.Data.Net.Common.RemoteServiceType.Admin:return\"Controls Kusto Engine.\";case Kusto.Data.Net.Common.RemoteServiceType.Query:return\"Queries Kusto Engine.\";case Kusto.Data.Net.Common.RemoteServiceType.UIRedirect:return\"Redirects to Kusto.Explorer or similar client.\";case Kusto.Data.Net.Common.RemoteServiceType.DataManagement:return\"Controls Kusto DM.\";case Kusto.Data.Net.Common.RemoteServiceType.ClusterManagement:return\"Controls Kusto CM.\";case Kusto.Data.Net.Common.RemoteServiceType.Bridge:return\"Controls Kusto Bridge to Geneva/Aria pipelines.\";case Kusto.Data.Net.Common.RemoteServiceType.Ping:return\"Load-balancer ping responder.\";case Kusto.Data.Net.Common.RemoteServiceType.CustomType:return\"Custom.\";case Kusto.Data.Net.Common.RemoteServiceType.StreamIngest:return\"Streaming ingestion into Kusto Engine.\";case Kusto.Data.Net.Common.RemoteServiceType.PassiveLogin:return\"Manages passive authentication flows.\";case Kusto.Data.Net.Common.RemoteServiceType.ArmResourceProvider:return\"Controls Kusto RP.\";case Kusto.Data.Net.Common.RemoteServiceType.AuthMetadata:return\"Authentication metadata information.\";case Kusto.Data.Net.Common.RemoteServiceType.Flighting:return\"Controls Kusto Flighting.\";case Kusto.Data.Net.Common.RemoteServiceType.HealthSuite:return\"Controls Kusto HealthSuite.\";case Kusto.Data.Net.Common.RemoteServiceType.Gaia:return\"Controls Kusto Gaia.\";case Kusto.Data.Net.Common.RemoteServiceType.Proxy:return\"Proxy to other services/endpoints.\";case Kusto.Data.Net.Common.RemoteServiceType.SaasResourceProvider:return\"Controls Kusto SaaS Resource Provider.\";case Kusto.Data.Net.Common.RemoteServiceType.Dashboard:return\"Controls Kusto Dashboard.\";case Kusto.Data.Net.Common.RemoteServiceType.AllControlCommands:return\"A bitwise OR of all service types that provide control commands.\";default:return null}},FastGetFlags:function(that){return new(Bridge.GeneratorEnumerable$1(Kusto.Data.Net.Common.RemoteServiceType))(Bridge.fn.bind(this,function(that){var $step=0,$jumpFromFinally,$returnValue,$async_e,$enumerator=new(Bridge.GeneratorEnumerator$1(Kusto.Data.Net.Common.RemoteServiceType))(Bridge.fn.bind(this,function(){try{for(;;)switch($step){case 0:if((that&Kusto.Data.Net.Common.RemoteServiceType.Admin)===Kusto.Data.Net.Common.RemoteServiceType.Admin){$step=1;continue}$step=3;continue;case 1:return $enumerator.current=Kusto.Data.Net.Common.RemoteServiceType.Admin,$step=2,!0;case 2:$step=3;continue;case 3:if((that&Kusto.Data.Net.Common.RemoteServiceType.Query)===Kusto.Data.Net.Common.RemoteServiceType.Query){$step=4;continue}$step=6;continue;case 4:return $enumerator.current=Kusto.Data.Net.Common.RemoteServiceType.Query,$step=5,!0;case 5:$step=6;continue;case 6:if((that&Kusto.Data.Net.Common.RemoteServiceType.UIRedirect)===Kusto.Data.Net.Common.RemoteServiceType.UIRedirect){$step=7;continue}$step=9;continue;case 7:return $enumerator.current=Kusto.Data.Net.Common.RemoteServiceType.UIRedirect,$step=8,!0;case 8:$step=9;continue;case 9:if((that&Kusto.Data.Net.Common.RemoteServiceType.DataManagement)===Kusto.Data.Net.Common.RemoteServiceType.DataManagement){$step=10;continue}$step=12;continue;case 10:return $enumerator.current=Kusto.Data.Net.Common.RemoteServiceType.DataManagement,$step=11,!0;case 11:$step=12;continue;case 12:if((that&Kusto.Data.Net.Common.RemoteServiceType.ClusterManagement)===Kusto.Data.Net.Common.RemoteServiceType.ClusterManagement){$step=13;continue}$step=15;continue;case 13:return $enumerator.current=Kusto.Data.Net.Common.RemoteServiceType.ClusterManagement,$step=14,!0;case 14:$step=15;continue;case 15:if((that&Kusto.Data.Net.Common.RemoteServiceType.Bridge)===Kusto.Data.Net.Common.RemoteServiceType.Bridge){$step=16;continue}$step=18;continue;case 16:return $enumerator.current=Kusto.Data.Net.Common.RemoteServiceType.Bridge,$step=17,!0;case 17:$step=18;continue;case 18:if((that&Kusto.Data.Net.Common.RemoteServiceType.Ping)===Kusto.Data.Net.Common.RemoteServiceType.Ping){$step=19;continue}$step=21;continue;case 19:return $enumerator.current=Kusto.Data.Net.Common.RemoteServiceType.Ping,$step=20,!0;case 20:$step=21;continue;case 21:if((that&Kusto.Data.Net.Common.RemoteServiceType.CustomType)===Kusto.Data.Net.Common.RemoteServiceType.CustomType){$step=22;continue}$step=24;continue;case 22:return $enumerator.current=Kusto.Data.Net.Common.RemoteServiceType.CustomType,$step=23,!0;case 23:$step=24;continue;case 24:if((that&Kusto.Data.Net.Common.RemoteServiceType.StreamIngest)===Kusto.Data.Net.Common.RemoteServiceType.StreamIngest){$step=25;continue}$step=27;continue;case 25:return $enumerator.current=Kusto.Data.Net.Common.RemoteServiceType.StreamIngest,$step=26,!0;case 26:$step=27;continue;case 27:if((that&Kusto.Data.Net.Common.RemoteServiceType.PassiveLogin)===Kusto.Data.Net.Common.RemoteServiceType.PassiveLogin){$step=28;continue}$step=30;continue;case 28:return $enumerator.current=Kusto.Data.Net.Common.RemoteServiceType.PassiveLogin,$step=29,!0;case 29:$step=30;continue;case 30:if((that&Kusto.Data.Net.Common.RemoteServiceType.ArmResourceProvider)===Kusto.Data.Net.Common.RemoteServiceType.ArmResourceProvider){$step=31;continue}$step=33;continue;case 31:return $enumerator.current=Kusto.Data.Net.Common.RemoteServiceType.ArmResourceProvider,$step=32,!0;case 32:$step=33;continue;case 33:if((that&Kusto.Data.Net.Common.RemoteServiceType.AuthMetadata)===Kusto.Data.Net.Common.RemoteServiceType.AuthMetadata){$step=34;continue}$step=36;continue;case 34:return $enumerator.current=Kusto.Data.Net.Common.RemoteServiceType.AuthMetadata,$step=35,!0;case 35:$step=36;continue;case 36:if((that&Kusto.Data.Net.Common.RemoteServiceType.Flighting)===Kusto.Data.Net.Common.RemoteServiceType.Flighting){$step=37;continue}$step=39;continue;case 37:return $enumerator.current=Kusto.Data.Net.Common.RemoteServiceType.Flighting,$step=38,!0;case 38:$step=39;continue;case 39:if((that&Kusto.Data.Net.Common.RemoteServiceType.HealthSuite)===Kusto.Data.Net.Common.RemoteServiceType.HealthSuite){$step=40;continue}$step=42;continue;case 40:return $enumerator.current=Kusto.Data.Net.Common.RemoteServiceType.HealthSuite,$step=41,!0;case 41:$step=42;continue;case 42:if((that&Kusto.Data.Net.Common.RemoteServiceType.Gaia)===Kusto.Data.Net.Common.RemoteServiceType.Gaia){$step=43;continue}$step=45;continue;case 43:return $enumerator.current=Kusto.Data.Net.Common.RemoteServiceType.Gaia,$step=44,!0;case 44:$step=45;continue;case 45:if((that&Kusto.Data.Net.Common.RemoteServiceType.Proxy)===Kusto.Data.Net.Common.RemoteServiceType.Proxy){$step=46;continue}$step=48;continue;case 46:return $enumerator.current=Kusto.Data.Net.Common.RemoteServiceType.Proxy,$step=47,!0;case 47:$step=48;continue;case 48:if((that&Kusto.Data.Net.Common.RemoteServiceType.SaasResourceProvider)===Kusto.Data.Net.Common.RemoteServiceType.SaasResourceProvider){$step=49;continue}$step=51;continue;case 49:return $enumerator.current=Kusto.Data.Net.Common.RemoteServiceType.SaasResourceProvider,$step=50,!0;case 50:$step=51;continue;case 51:if((that&Kusto.Data.Net.Common.RemoteServiceType.Dashboard)===Kusto.Data.Net.Common.RemoteServiceType.Dashboard){$step=52;continue}$step=54;continue;case 52:return $enumerator.current=Kusto.Data.Net.Common.RemoteServiceType.Dashboard,$step=53,!0;case 53:$step=54;continue;case 54:if((that&Kusto.Data.Net.Common.RemoteServiceType.AllControlCommands)===Kusto.Data.Net.Common.RemoteServiceType.AllControlCommands){$step=55;continue}$step=57;continue;case 55:return $enumerator.current=Kusto.Data.Net.Common.RemoteServiceType.AllControlCommands,$step=56,!0;case 56:$step=57;continue;case 57:default:return!1}}catch($async_e1){$async_e=System.Exception.create($async_e1);throw $async_e;}}));return $enumerator},arguments))}}}});Bridge.define(\"Kusto.Data.Net.Common.KustoDataStreamFormat\",{$kind:\"enum\",statics:{fields:{KustoJsonDataStream:0,KustoDataStream:1}}});Bridge.define(\"Kusto.Data.Net.Common.RemoteServiceType\",{$kind:\"enum\",statics:{fields:{Admin:1,Query:2,UIRedirect:4,DataManagement:8,ClusterManagement:16,Bridge:32,Ping:64,CustomType:1024,StreamIngest:2048,PassiveLogin:4096,ArmResourceProvider:8192,AuthMetadata:16384,Flighting:32768,HealthSuite:65536,Gaia:131072,Proxy:262144,SaasResourceProvider:524288,Dashboard:1048576,AllControlCommands:57}},$flags:!0});Bridge.define(\"Kusto.Data.Utils.AxisVisualizationMode\",{$kind:\"enum\",statics:{fields:{Linear:0,Log:1}}});Bridge.define(\"Kusto.Data.Utils.ChartVisualizationOptions\",{statics:{fields:{Default:null},ctors:{init:function(){this.Default=new Kusto.Data.Utils.ChartVisualizationOptions}},methods:{ResolveVisualizationKindFromDirection:function(visualizationResult){switch(visualizationResult){case\"piechart\":return Kusto.Data.Utils.VisualizationKind.PieChart;case\"barchart\":return Kusto.Data.Utils.VisualizationKind.BarChart;case\"card\":return Kusto.Data.Utils.VisualizationKind.Card;case\"columnchart\":return Kusto.Data.Utils.VisualizationKind.ColumnChart;case\"scatterchart\":return Kusto.Data.Utils.VisualizationKind.ScatterChart;case\"areachart\":return Kusto.Data.Utils.VisualizationKind.AreaChart;case\"stackedareachart\":return Kusto.Data.Utils.VisualizationKind.StackedAreaChart;case\"ladderchart\":return Kusto.Data.Utils.VisualizationKind.TimeLadderChart;case\"timechart\":return Kusto.Data.Utils.VisualizationKind.TimeLineChart;case\"linechart\":return Kusto.Data.Utils.VisualizationKind.LineChart;case\"anomalychart\":return Kusto.Data.Utils.VisualizationKind.TimeLineWithAnomalyChart;case\"pivotchart\":return Kusto.Data.Utils.VisualizationKind.PivotChart;case\"timeline\":case\"timepivot\":return Kusto.Data.Utils.VisualizationKind.TimePivot;case\"3Dchart\":return Kusto.Data.Utils.VisualizationKind.ThreeDChart;case\"treemap\":return Kusto.Data.Utils.VisualizationKind.TreeMap;case\"plotly\":return Kusto.Data.Utils.VisualizationKind.Plotly;default:return Kusto.Data.Utils.VisualizationKind.None}},ResolveModeFromString:function(value,visualizationKind){if(visualizationKind===Kusto.Data.Utils.VisualizationKind.StackedAreaChart)return Kusto.Data.Utils.VisualizationMode.Stacked;switch(value){case\"default\":return Kusto.Data.Utils.VisualizationMode.Default;case\"stacked\":return Kusto.Data.Utils.VisualizationMode.Stacked;case\"stacked100\":return Kusto.Data.Utils.VisualizationMode.Stacked100;case\"unstacked\":return Kusto.Data.Utils.VisualizationMode.Unstacked;case\"map\":return Kusto.Data.Utils.VisualizationMode.Map;default:return Kusto.Data.Utils.VisualizationMode.Default}},ResolveYSplitFromString:function(ysplit){switch(ysplit){case\"axes\":return Kusto.Data.Utils.SplitVisualizationMode.Axes;case\"panels\":return Kusto.Data.Utils.SplitVisualizationMode.Panels;case\"none\":return Kusto.Data.Utils.SplitVisualizationMode.None;default:return Kusto.Data.Utils.SplitVisualizationMode.None}},ResolveLegendModeFromString:function(mode){switch(mode){case\"hidden\":return Kusto.Data.Utils.LegendVisualizationMode.Hidden;case\"visible\":return Kusto.Data.Utils.LegendVisualizationMode.Visible;default:return Kusto.Data.Utils.LegendVisualizationMode.Visible}},ResolveAxisModeFromString:function(mode){switch(mode){case\"log\":return Kusto.Data.Utils.AxisVisualizationMode.Log;case\"linear\":return Kusto.Data.Utils.AxisVisualizationMode.Linear;default:return Kusto.Data.Utils.AxisVisualizationMode.Linear}}}},fields:{m_visualizationDirection:null,m_mode:null,m_ysplit:null,m_legend:null,m_xaxis:null,m_yaxis:null},props:{VisualizationKindString:{get:function(){return this.m_visualizationDirection},set:function(value){this.m_visualizationDirection=value;this.Visualization=Kusto.Data.Utils.ChartVisualizationOptions.ResolveVisualizationKindFromDirection(this.m_visualizationDirection)}},KindString:{get:function(){return this.m_mode},set:function(value){this.m_mode=value;this.Mode=Kusto.Data.Utils.ChartVisualizationOptions.ResolveModeFromString(this.m_mode,this.Visualization)}},YSplitString:{get:function(){return this.m_ysplit},set:function(value){this.m_ysplit=value;this.YSplit=Kusto.Data.Utils.ChartVisualizationOptions.ResolveYSplitFromString(this.m_ysplit)}},LegendString:{get:function(){return this.m_legend},set:function(value){this.m_legend=value;this.Legend=Kusto.Data.Utils.ChartVisualizationOptions.ResolveLegendModeFromString(this.m_legend)}},XAxisString:{get:function(){return this.m_xaxis},set:function(value){this.m_xaxis=value;this.XAxis=Kusto.Data.Utils.ChartVisualizationOptions.ResolveAxisModeFromString(this.m_xaxis)}},YAxisString:{get:function(){return this.m_yaxis},set:function(value){this.m_yaxis=value;this.YAxis=Kusto.Data.Utils.ChartVisualizationOptions.ResolveAxisModeFromString(this.m_yaxis)}},Title:null,XColumn:null,Series:null,YColumns:null,AnomalyColumns:null,XTitle:null,YTitle:null,Accumulate:!1,IsQuerySorted:!1,Ymin:0,Ymax:0,Xmin:null,Xmax:null,Mode:0,Visualization:0,XAxis:0,YAxis:0,YSplit:0,Legend:0,TableIndex:0},ctors:{init:function(){this.Ymin=Number.NaN;this.Ymax=Number.NaN},ctor:function(tableIndex){tableIndex===void 0&&(tableIndex=-1);this.$initialize();this.TableIndex=tableIndex}}});Bridge.define(\"Kusto.Data.Utils.LegendVisualizationMode\",{$kind:\"enum\",statics:{fields:{Visible:0,Hidden:1}}});Bridge.define(\"Kusto.Data.Utils.SplitVisualizationMode\",{$kind:\"enum\",statics:{fields:{None:0,Axes:1,Panels:2}}});Bridge.define(\"Kusto.Data.Utils.VisualizationKind\",{$kind:\"enum\",statics:{fields:{None:0,PieChart:1,BarChart:2,Card:3,ColumnChart:4,TimeLineChart:5,TimeLineWithAnomalyChart:6,LineChart:7,TimeLadderChart:8,PivotChart:9,Plotly:10,ScatterChart:11,AreaChart:12,StackedAreaChart:13,TimePivot:14,ThreeDChart:15,TreeMap:16,GraphChart:17}}});Bridge.define(\"Kusto.Data.Utils.VisualizationMode\",{$kind:\"enum\",statics:{fields:{Default:0,Unstacked:1,Stacked:2,Stacked100:3,Map:4}}});Bridge.define(\"Kusto.JavaScript.Client.App\",{statics:{methods:{Test:function(){var intellisenseTests,parserTests;Kusto.UT.IntelliSenseRulesTests.InitializeTestClass();intellisenseTests=new Kusto.UT.IntelliSenseRulesTests;intellisenseTests.IntelliSenseCommandEntitiesTest();intellisenseTests.IntelliSenseCommandEntitiesForTablesTest();intellisenseTests.IntelliSenseCommandEntitiesUsingFunctionsTest();intellisenseTests.IntelliSenseCommandEntities_FindTest();intellisenseTests.IntelliSenseCommandEntities_SearchTest();intellisenseTests.IntelliSenseExtendTest();intellisenseTests.IntelliSenseFilterTest();intellisenseTests.IntelliSenseGetCommandContextTest();intellisenseTests.IntelliSenseJoinTest();intellisenseTests.IntelliSenseLimitTest();intellisenseTests.IntelliSenseParseOperator();intellisenseTests.IntelliSenseProjectAwayTest();intellisenseTests.IntelliSenseProjectRenameTest();intellisenseTests.IntelliSenseProjectTest();intellisenseTests.IntelliSenseQueryParametersTest();intellisenseTests.IntelliSenseRangeTest();intellisenseTests.IntelliSenseReduceTest();intellisenseTests.IntelliSenseRenderTest();intellisenseTests.IntelliSenseSummarizeTest();intellisenseTests.IntelliSenseTopTest();intellisenseTests.IntelliSenseTopNestedTest();intellisenseTests.IntelliSenseToScalarTest();intellisenseTests.IntelliSenseTimeKeywordsTest();intellisenseTests.IntelliSenseEvaluateTest();intellisenseTests.IntelliSenseClusterTest();intellisenseTests.IntelliSenseDatabaseTest();intellisenseTests.IntelliSenseFindTest();intellisenseTests.IntelliSenseSearchTest();intellisenseTests.IntelliSenseSampleTest();intellisenseTests.IntelliSenseSampleDistinctTest();intellisenseTests.IntelliSenseMakeSeriesTest();parserTests=new Kusto.UT.IntelliSenseCslCommandParserTests;Kusto.UT.IntelliSenseCslCommandParserTests.InitializeTestClass();parserTests.TestCslCommandParserEntities();Bridge.global.alert(\"Success\")}}}});Bridge.define(\"Kusto.UT.AssertStub\",{methods:{AreEqual:function(expected,actual){var $t,$t1;if(!Bridge.referenceEquals(expected,actual))throw new System.Exception(System.String.format(\"Values do not match: expected='{0}', actual='{1}'\",($t=expected,$t!=null?$t:\"null\"),($t1=actual,$t1!=null?$t1:\"null\")));},AreEqual$1:function(expected,actual,errorMessage){var $t,$t1;if(!Bridge.referenceEquals(expected,actual))throw new System.Exception(System.String.format(\"Values do not match: expected='{0}', actual='{1}'\\n{2}\",($t=expected,$t!=null?$t:\"null\"),($t1=actual,$t1!=null?$t1:\"null\"),errorMessage));},Fail:function(message){throw new System.Exception(message);},IsTrue:function(condition,message){if(!condition)throw new System.Exception(message);}}});Bridge.define(\"Kusto.UT.IntelliSenseCslCommandParserTests\",{statics:{fields:{s_intelliSenseProvider:null},methods:{InitializeTestClass:function(){var queryParameters=new(System.Collections.Generic.List$1(System.String).ctor),availableClusters=new(System.Collections.Generic.List$1(System.String).ctor),clusterSchema=Kusto.UT.IntelliSenseRulesTests.GenerateKustoEntities(queryParameters,availableClusters),schema=new Kusto.Data.IntelliSense.KustoIntelliSenseQuerySchema(clusterSchema,System.Linq.Enumerable.from(clusterSchema.Databases,Kusto.Data.IntelliSense.KustoIntelliSenseDatabaseEntity).first());Kusto.UT.IntelliSenseCslCommandParserTests.s_intelliSenseProvider=new Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.$ctor1(clusterSchema,schema,queryParameters,availableClusters,void 0,!0,!0)}}},fields:{Assert:null},ctors:{init:function(){this.Assert=new Kusto.UT.AssertStub}},methods:{TestClsCommandsPerttifier:function(){var $t,queriesAndResults=System.Array.init([{Item1:'let ErrorCounts = (message:string) {\\r\\nErrorCountsByBin(message, 1d)\\r\\n};\\r\\nErrorCounts(\"Can not perform requested operation on nested resource. Parent resource\") | extend error = \"parent not found\"',Item2:'let ErrorCounts = (message:string)\\r\\n{\\r\\n    ErrorCountsByBin(message, 1d)\\r\\n};\\r\\nErrorCounts(\"Can not perform requested operation on nested resource. Parent resource\")\\r\\n| extend error = \"parent not found\"'},{Item1:\"Table\\r\\n//| project ProjectKind, UserId, ProjectType\\r\\n//| join (activeTable) on UserId\\r\\n//| summarize dcount(UserId) by ProjectType\\r\\n//| sort by dcount_UserId asc\\r\\n| count\",Item2:\"Table\\r\\n//| project ProjectKind, UserId, ProjectType\\r\\n//| join (activeTable) on UserId\\r\\n//| summarize dcount(UserId) by ProjectType\\r\\n//| sort by dcount_UserId asc\\r\\n| count\"},{Item1:\"Table\\r\\n| join (Table) on Key\",Item2:\"Table\\r\\n| join\\r\\n(\\r\\n    Table\\r\\n)\\r\\non Key\"},{Item1:'PerRequestTable | where MSODS contains \"}\" | take 1',Item2:'PerRequestTable\\r\\n| where MSODS contains \"}\"\\r\\n| take 1'},{Item1:\"let variable=1;Table | count\",Item2:\"let variable=1;\\r\\nTable\\r\\n| count\"},{Item1:\"// comment\\r\\nKustoLogs | where Timestamp > ago(1d) and EventText contains \\\"[0]Kusto.DataNode.Exceptions.SemanticErrorException: Semantic error: Query 'Temp_MonRgLoad | project TIMESTAMP | consume' has the following semantic error: \\\" | summarize cnt() by Source\",Item2:\"// comment\\r\\nKustoLogs\\r\\n| where Timestamp > ago(1d) and EventText contains \\\"[0]Kusto.DataNode.Exceptions.SemanticErrorException: Semantic error: Query 'Temp_MonRgLoad | project TIMESTAMP | consume' has the following semantic error: \\\"\\r\\n| summarize cnt() by Source\"},{Item1:\"Table |   join (Table | project x ) on x | count\",Item2:\"Table\\r\\n| join\\r\\n(\\r\\n    Table\\r\\n    | project x\\r\\n)\\r\\non x\\r\\n| count\"},{Item1:\"Table | join kind=inner (Table | project x ) on x | count\",Item2:\"Table\\r\\n| join kind=inner\\r\\n(\\r\\n    Table\\r\\n    | project x\\r\\n)\\r\\non x\\r\\n| count\"},{Item1:\"let foo = (i: long) { range x from 1 to 1 step 1 }; foo()\",Item2:\"let foo = (i: long)\\r\\n{\\r\\n    range x from 1 to 1 step 1\\r\\n};\\r\\nfoo()\"},{Item1:\"let foo = (i: long) {range x from 1 to 1 step 1 | count }; foo()\",Item2:\"let foo = (i: long)\\r\\n{\\r\\n    range x from 1 to 1 step 1\\r\\n    | count\\r\\n};\\r\\nfoo()\"},{Item1:'.alter function with (docstring = @\\'List of UserIds that are WebSites only\\', folder =@\\'Filters\\') UsersWithWebSiteAppsOnly() { DimAppUsage() | join kind=leftouter DimApplications() on ApplicationId | where RequestSource in (\"unknown\", \"ibiza\",\"ibizaaiextensionauto\") | summarize by UserId = UserId }',Item2:'.alter function with (docstring = @\\'List of UserIds that are WebSites only\\', folder =@\\'Filters\\') UsersWithWebSiteAppsOnly()\\r\\n{\\r\\n    DimAppUsage()\\r\\n    | join kind=leftouter\\r\\n        DimApplications()\\r\\n    on ApplicationId\\r\\n    | where RequestSource in (\"unknown\", \"ibiza\",\"ibizaaiextensionauto\")\\r\\n    | summarize by UserId = UserId\\r\\n}'},{Item1:'.alter function with (docstring = @\\'List of UserIds that are WebSites only\\', folder =@\\'Filters\\') UsersWithWebSiteAppsOnly()\\r\\n{\\r\\n    DimAppUsage()\\r\\n    | join kind=leftouter DimApplications() on ApplicationId\\r\\n    | where RequestSource in (\"unknown\", \"ibiza\",\"ibizaaiextensionauto\")\\r\\n    | summarize by UserId = UserId\\r\\n}',Item2:'.alter function with (docstring = @\\'List of UserIds that are WebSites only\\', folder =@\\'Filters\\') UsersWithWebSiteAppsOnly()\\r\\n{\\r\\n    DimAppUsage()\\r\\n    | join kind=leftouter\\r\\n        DimApplications()\\r\\n    on ApplicationId\\r\\n    | where RequestSource in (\"unknown\", \"ibiza\",\"ibizaaiextensionauto\")\\r\\n    | summarize by UserId = UserId\\r\\n}'},{Item1:\"KustoLogs | where Timestamp > ago(6d) | where ClientActivityId=='KE.RunQuery;e0944367-3fd6-4f83-b2e9-ff0724d55053'\",Item2:\"KustoLogs\\r\\n| where Timestamp > ago(6d)\\r\\n| where ClientActivityId=='KE.RunQuery;e0944367-3fd6-4f83-b2e9-ff0724d55053'\"},{Item1:\"KustoLogs | make-series dusers=dcount(RequestSource) default=0 on Timestamp in range(ago(6d), now(), 1d) by userid | where stat(dusers).max>1000\",Item2:\"KustoLogs\\r\\n| make-series dusers=dcount(RequestSource) default=0 on Timestamp in range(ago(6d), now(), 1d) by userid\\r\\n| where stat(dusers).max>1000\"},{Item1:\"let a = 1;//comment\\r\\nprint x = a * b * c//one more comment\",Item2:\"let a = 1;\\r\\n//comment\\r\\nprint x = a * b * c\\r\\n//one more comment\"},{Item1:\"let a = 1;\\r\\n//comment\\r\\nprint x = a * b * c\\r\\n//one more comment\",Item2:\"let a = 1;\\r\\n//comment\\r\\nprint x = a * b * c\\r\\n//one more comment\"},{Item1:\"Table | join kind = leftouter ( Table | join (Table //comment1\\r\\n)    on $left.i == $right.i//comment2\\r\\n) on i\",Item2:\"Table\\r\\n| join kind = leftouter\\r\\n(\\r\\n    Table\\r\\n    | join\\r\\n    (\\r\\n        Table\\r\\n        //comment1\\r\\n    )\\r\\n    on $left.i == $right.i\\r\\n    //comment2\\r\\n)\\r\\non i\"},{Item1:\"Table | join kind = leftouter ( Table | join Table //comment1\\r\\non $left.i == $right.i//comment2\\r\\n) on i\",Item2:\"Table\\r\\n| join kind = leftouter\\r\\n(\\r\\n    Table\\r\\n    | join\\r\\n        Table\\r\\n        //comment1\\r\\n    on $left.i == $right.i\\r\\n    //comment2\\r\\n)\\r\\non i\"},{Item1:\"Table| join\\r\\n(    Table\\r\\n    //cmt\\r\\n    | extend a\\r\\n)\\r\\non a\",Item2:\"Table\\r\\n| join\\r\\n(\\r\\n    Table\\r\\n    //cmt\\r\\n    | extend a\\r\\n)\\r\\non a\"}],System.Tuple$2(System.String,System.String)),testCase,input,actualResult,expectedResult;$t=Bridge.getEnumerator(queriesAndResults);try{while($t.moveNext())testCase=$t.Current,input=testCase.Item1,input=System.String.replaceAll(input,\"\\n\",\"\"),actualResult=Kusto.Data.Common.CslQueryParser.PrettifyQuery(input,\"\"),expectedResult=testCase.Item2,expectedResult=System.String.replaceAll(expectedResult,\"\\r\",\"\"),this.Assert.AreEqual(expectedResult,actualResult)}finally{Bridge.is($t,System.IDisposable)&&$t.System$IDisposable$Dispose()}},TestCslCommandParserEntities:function(){var parser=new Kusto.Data.IntelliSense.CslCommandParser;this.ValidateTokens(parser,\"Table1 \\r\\n                | parse Field1 with * Column1:string * Column2:int\\r\\n                | project\",Kusto.Data.IntelliSense.CslCommandToken.Kind.CalculatedColumnToken,System.Array.init([\"Column1\",\"Column2\"],System.String));this.ValidateTokens(parser,\"let s = now();\\r\\n                Table1 \\r\\n                | extend x = Field1 \\r\\n                | project\",Kusto.Data.IntelliSense.CslCommandToken.Kind.TableColumnToken,System.Array.init([\"Field1\"],System.String));this.ValidateTokens(parser,\"Table1 \\r\\n                | extend x = Field1 \\r\\n                | project\",Kusto.Data.IntelliSense.CslCommandToken.Kind.TableColumnToken,System.Array.init([\"Field1\"],System.String))},ValidateTokens:function(parser,query,kind,expectedTokens){var $t,commands=($t=Kusto.Data.IntelliSense.CslCommand,System.Linq.Enumerable.from(parser.Parse(Kusto.UT.IntelliSenseCslCommandParserTests.s_intelliSenseProvider,query,Kusto.Data.IntelliSense.ParseMode.TokenizeAllText),$t).toList($t)),columns=System.Linq.Enumerable.from(commands,Kusto.Data.IntelliSense.CslCommand).selectMany($asm.$.Kusto.UT.IntelliSenseCslCommandParserTests.f1).where(function(t){return t.TokenKind===kind}).select($asm.$.Kusto.UT.IntelliSenseCslCommandParserTests.f2).toList(System.String);Kusto.UT.IntelliSenseRulesTests.ValidateEntities(query,expectedTokens,columns)},TestCslCommandParserReuse:function(){var $t,parser=new Kusto.Data.IntelliSense.CslCommandParser,query;$t=Bridge.getEnumerator(System.Array.init([\"let s = 1;\\r\\n                  let r = range x from s to 1 step 1;\\r\\n                  r | \",\"Table1 | where Field1 == 'rrr' \"],System.String));try{while($t.moveNext())query=$t.Current,this.ValidateParserReuse(parser,query)}finally{Bridge.is($t,System.IDisposable)&&$t.System$IDisposable$Dispose()}},ValidateParserReuse:function(parser,query){var $t,tokens=System.Linq.Enumerable.from(parser.Parse(Kusto.UT.IntelliSenseCslCommandParserTests.s_intelliSenseProvider,query,Kusto.Data.IntelliSense.ParseMode.TokenizeAllText),Kusto.Data.IntelliSense.CslCommand).selectMany($asm.$.Kusto.UT.IntelliSenseCslCommandParserTests.f1).where($asm.$.Kusto.UT.IntelliSenseCslCommandParserTests.f3).ToArray(Kusto.Data.IntelliSense.CslCommandToken),tokens_2=System.Linq.Enumerable.from(parser.Parse(Kusto.UT.IntelliSenseCslCommandParserTests.s_intelliSenseProvider,(query||\"\")+\" \",Kusto.Data.IntelliSense.ParseMode.TokenizeAllText),Kusto.Data.IntelliSense.CslCommand).selectMany($asm.$.Kusto.UT.IntelliSenseCslCommandParserTests.f1).where($asm.$.Kusto.UT.IntelliSenseCslCommandParserTests.f3).ToArray(Kusto.Data.IntelliSense.CslCommandToken),tokens_21,i,tokens_3;for(this.ComapreParseResultTokens(tokens,($t=Kusto.Data.IntelliSense.CslCommandToken,System.Linq.Enumerable.from(tokens_2,$t).ToArray($t)),0,!1),tokens_21=System.Linq.Enumerable.from(parser.Parse(Kusto.UT.IntelliSenseCslCommandParserTests.s_intelliSenseProvider,\"// comment\\n\"+(query||\"\"),Kusto.Data.IntelliSense.ParseMode.TokenizeAllText),Kusto.Data.IntelliSense.CslCommand).selectMany($asm.$.Kusto.UT.IntelliSenseCslCommandParserTests.f1).where($asm.$.Kusto.UT.IntelliSenseCslCommandParserTests.f3).ToArray(Kusto.Data.IntelliSense.CslCommandToken),this.Assert.AreEqual(Bridge.box(tokens.length,System.Int32),Bridge.box(tokens_21.length-1|0,System.Int32)),i=0;i<tokens.length;i=i+1|0)i<(tokens.length-1|0)&&(this.Assert.AreEqual(tokens[System.Array.index(i,tokens)].Value,tokens_21[System.Array.index(i+1|0,tokens_21)].Value),this.Assert.AreEqual(Bridge.box(tokens[System.Array.index(i,tokens)].TokenKind,Kusto.Data.IntelliSense.CslCommandToken.Kind,System.Enum.toStringFn(Kusto.Data.IntelliSense.CslCommandToken.Kind)),Bridge.box(tokens_21[System.Array.index(i+1|0,tokens_21)].TokenKind,Kusto.Data.IntelliSense.CslCommandToken.Kind,System.Enum.toStringFn(Kusto.Data.IntelliSense.CslCommandToken.Kind))));tokens_3=System.Linq.Enumerable.from(parser.Parse(Kusto.UT.IntelliSenseCslCommandParserTests.s_intelliSenseProvider,\"// comment \\n\"+(query||\"\"),Kusto.Data.IntelliSense.ParseMode.TokenizeAllText),Kusto.Data.IntelliSense.CslCommand).selectMany($asm.$.Kusto.UT.IntelliSenseCslCommandParserTests.f1).where($asm.$.Kusto.UT.IntelliSenseCslCommandParserTests.f3).ToArray(Kusto.Data.IntelliSense.CslCommandToken);this.ComapreParseResultTokens(tokens_21,tokens_3,1,!1)},ComapreParseResultTokens:function(tokens,other,startIndex,fullValidation){for(var i=startIndex;i<tokens.length;i=i+1|0)i<(tokens.length-1|0)&&(fullValidation?this.Assert.AreEqual(tokens[System.Array.index(i,tokens)],other[System.Array.index(i,other)]):(this.Assert.AreEqual(tokens[System.Array.index(i,tokens)].Value,other[System.Array.index(i,other)].Value),this.Assert.AreEqual(Bridge.box(tokens[System.Array.index(i,tokens)].TokenKind,Kusto.Data.IntelliSense.CslCommandToken.Kind,System.Enum.toStringFn(Kusto.Data.IntelliSense.CslCommandToken.Kind)),Bridge.box(other[System.Array.index(i,other)].TokenKind,Kusto.Data.IntelliSense.CslCommandToken.Kind,System.Enum.toStringFn(Kusto.Data.IntelliSense.CslCommandToken.Kind)))));this.Assert.AreEqual(Bridge.box(tokens.length,System.Int32),Bridge.box(other.length,System.Int32))},TestCslCommandParserBrackets:function(){var parser=new Kusto.Data.IntelliSense.CslCommandParser;this.ValidateBracketTokens(parser,\"Table1 | extend x = floor(t, 1)\",System.Array.init([\"(t, 1)\"],System.String));this.ValidateBracketTokens(parser,\"Table1 | extend x = floor(t, bin(1, 1))\",System.Array.init([\"(t, bin(1, 1))\",\"(1, 1)\"],System.String));this.ValidateBracketTokens(parser,\"Table1 | extend x = floor(t[1], bin(1, 1))\",System.Array.init([\"(t[1], bin(1, 1))\",\"(1, 1)\",\"[1]\"],System.String));this.ValidateBracketTokens(parser,\"Table1 | extend x = floor(t[floor(100, 100)], bin(1, 1))\",System.Array.init([\"(t[floor(100, 100)], bin(1, 1))\",\"(1, 1)\",\"[floor(100, 100)]\",\"(100, 100)\"],System.String));this.ValidateBracketTokens(parser,\"Table1 | extend x = { floor(t[1], bin(1, 1)) }\",System.Array.init([\"(t[1], bin(1, 1))\",\"(1, 1)\",\"[1]\",\"{ floor(t[1], bin(1, 1)) }\"],System.String))},ValidateBracketTokens:function(parser,query,expectedTokens){var $t,commands=($t=Kusto.Data.IntelliSense.CslCommand,System.Linq.Enumerable.from(parser.Parse(Kusto.UT.IntelliSenseCslCommandParserTests.s_intelliSenseProvider,query,Kusto.Data.IntelliSense.ParseMode.TokenizeAllText),$t).toList($t)),columns=System.Linq.Enumerable.from(commands,Kusto.Data.IntelliSense.CslCommand).selectMany($asm.$.Kusto.UT.IntelliSenseCslCommandParserTests.f4).select($asm.$.Kusto.UT.IntelliSenseCslCommandParserTests.f2).toList(System.String);Kusto.UT.IntelliSenseRulesTests.ValidateEntities(query,expectedTokens,columns)},TestCslCommandParserApiKind:function(){var $t,requestsAndExpectedApiKinds=$asm.$.Kusto.UT.IntelliSenseCslCommandParserTests.f5(new(System.Collections.Generic.List$1(System.Tuple$2(System.String,Kusto.Data.IntelliSense.ApiKind)).ctor)),request;$t=Bridge.getEnumerator(requestsAndExpectedApiKinds);try{while($t.moveNext())request=$t.Current,this.Assert.AreEqual(Bridge.box(Kusto.Data.IntelliSense.CslCommandParser.ResolveRequestApiKind(request.Item1),Kusto.Data.IntelliSense.ApiKind,System.Enum.toStringFn(Kusto.Data.IntelliSense.ApiKind)),Bridge.box(request.Item2,Kusto.Data.IntelliSense.ApiKind,System.Enum.toStringFn(Kusto.Data.IntelliSense.ApiKind)))}finally{Bridge.is($t,System.IDisposable)&&$t.System$IDisposable$Dispose()}}}});Bridge.ns(\"Kusto.UT.IntelliSenseCslCommandParserTests\",$asm.$);Bridge.apply($asm.$.Kusto.UT.IntelliSenseCslCommandParserTests,{f1:function(c){return c.Tokens},f2:function(t){return t.Value},f3:function(t){return t.TokenKind!==Kusto.Data.IntelliSense.CslCommandToken.Kind.UnknownToken},f4:function(c){return c.BracketParts},f5:function(_o1){return _o1.add({Item1:\".show version\",Item2:Kusto.Data.IntelliSense.ApiKind.AdminSyncCommand}),_o1.add({Item1:\".ingest async into table\",Item2:Kusto.Data.IntelliSense.ApiKind.AdminAsyncCommand}),_o1.add({Item1:\"T\",Item2:Kusto.Data.IntelliSense.ApiKind.Query}),_o1.add({Item1:\"T async\",Item2:Kusto.Data.IntelliSense.ApiKind.Query}),_o1.add({Item1:\".long-name-command async\",Item2:Kusto.Data.IntelliSense.ApiKind.AdminAsyncCommand}),_o1.add({Item1:\".some command async\",Item2:Kusto.Data.IntelliSense.ApiKind.AdminSyncCommand}),_o1.add({Item1:\".ingest             async into table\",Item2:Kusto.Data.IntelliSense.ApiKind.AdminAsyncCommand}),_o1.add({Item1:\"//comment\\r\\n.ingest       \\r\\nasync into table\",Item2:Kusto.Data.IntelliSense.ApiKind.AdminAsyncCommand}),_o1.add({Item1:\"//comment\\r\\n.ingest       \\r\\n\\r\\n\\r\\nasync into table\",Item2:Kusto.Data.IntelliSense.ApiKind.AdminAsyncCommand}),_o1.add({Item1:\"//comment async\\r\\n.ingest into table\",Item2:Kusto.Data.IntelliSense.ApiKind.AdminSyncCommand}),_o1}});Bridge.define(\"Kusto.UT.IntelliSenseRulesTests\",{statics:{fields:{Assert:null,s_intelliSenseProvider:null,s_columnMappings:null},ctors:{init:function(){this.Assert=new Kusto.UT.AssertStub;this.s_columnMappings=new(System.Collections.Generic.Dictionary$2(System.String,System.Array.type(System.String)).ctor)}},methods:{ValidateEntities:function(command,expectedFields,entititesList){var $t,$t1,entity,entity1;Kusto.UT.IntelliSenseRulesTests.Assert.IsTrue(System.Linq.Enumerable.from(expectedFields,System.String).count()===entititesList.Count,System.String.format(\"Counts of expected entities ('{0}') and actual command entities ('{1}') do not match.\\nExpected entities: {2}\\nActual entities:   {3}\\nCommand: {4}\",Bridge.box(System.Linq.Enumerable.from(expectedFields,System.String).count(),System.Int32),Bridge.box(entititesList.Count,System.Int32),expectedFields.join(\",\"),Bridge.toArray(entititesList).join(\",\"),command));$t=Bridge.getEnumerator(entititesList);try{while($t.moveNext())entity=$t.Current,System.Linq.Enumerable.from(expectedFields,System.String).contains(entity)||Kusto.UT.IntelliSenseRulesTests.Assert.Fail(System.String.format(\"Entity '{0}' is not appearing on the expected list. Command: {1}\",entity,command))}finally{Bridge.is($t,System.IDisposable)&&$t.System$IDisposable$Dispose()}$t1=Bridge.getEnumerator(expectedFields);try{while($t1.moveNext())entity1=$t1.Current,entititesList.contains(entity1)||Kusto.UT.IntelliSenseRulesTests.Assert.Fail(System.String.format(\"Entity '{0}' is not appearing on the resolved list. Command: {1}\",entity1,command))}finally{Bridge.is($t1,System.IDisposable)&&$t1.System$IDisposable$Dispose()}},InitializeTestClass:function(){var queryParameters=new(System.Collections.Generic.List$1(System.String).ctor),availableClusters=new(System.Collections.Generic.List$1(System.String).ctor),clusterSchema=Kusto.UT.IntelliSenseRulesTests.GenerateKustoEntities(queryParameters,availableClusters),schema=new Kusto.Data.IntelliSense.KustoIntelliSenseQuerySchema(clusterSchema,System.Linq.Enumerable.from(clusterSchema.Databases,Kusto.Data.IntelliSense.KustoIntelliSenseDatabaseEntity).first());Kusto.UT.IntelliSenseRulesTests.s_intelliSenseProvider=new Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.$ctor1(clusterSchema,schema,queryParameters,availableClusters,new Kusto.UT.IntelliSenseRulesTests.RemoteSchemaResolverMock,!0,!0)},TestIntelliSensePatterns:function(intelliSenseProvider,testPatterns){var $t,$t1,patternsWithLet=new(System.Collections.Generic.List$1(Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern).ctor),testPattern,failMessage,expectedRule,failMessage1;$t=Bridge.getEnumerator(testPatterns);try{while($t.moveNext())testPattern=$t.Current,System.String.startsWith(System.String.trimStart(testPattern.Input),\".\")||patternsWithLet.add(($t1=new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.ctor(\"let variable = 1;\\n\"+(testPattern.Input||\"\")),$t1.ExpectedMatch=testPattern.ExpectedMatch,$t1.ExpectedRuleKind=testPattern.ExpectedRuleKind,$t1))}finally{Bridge.is($t,System.IDisposable)&&$t.System$IDisposable$Dispose()}testPatterns.AddRange(patternsWithLet);$t1=Bridge.getEnumerator(testPatterns);try{while($t1.moveNext()){var testPattern1=$t1.Current,rule={v:null},matchingSuccess=intelliSenseProvider.TryMatchAnyRule(testPattern1.Input,rule);matchingSuccess!==testPattern1.ExpectedMatch&&(failMessage=System.String.format(\"Input '{0}' was incorrectly intelli-sensed. Expected: {1} ({2}), actual: {3} ({4})\",testPattern1.Input,testPattern1.ExpectedMatch?\"MATCH\":\"NO-MATCH\",Bridge.box(testPattern1.ExpectedRuleKind,System.Int32),matchingSuccess?\"MATCH\":\"NO-MATCH\",Bridge.box(rule.v!=null?rule.v.Kind:0,System.Int32)),Kusto.UT.IntelliSenseRulesTests.Assert.Fail(failMessage));expectedRule=Bridge.toString(testPattern1.ExpectedRuleKind);testPattern1.ExpectedMatch&&testPattern1.ExpectedRuleKind!==rule.v.Kind&&(failMessage1=System.String.format(\"Input '{0}' was incorrectly intelli-sensed. Expected rule: {1}, actual rule: {2}\",testPattern1.Input,expectedRule,Bridge.box(rule.v.Kind,System.Int32)),Kusto.UT.IntelliSenseRulesTests.Assert.Fail(failMessage1))}}finally{Bridge.is($t1,System.IDisposable)&&$t1.System$IDisposable$Dispose()}},GetColumnsOfTable:function(tableName){return Kusto.UT.IntelliSenseRulesTests.s_columnMappings.containsKey(tableName)?Kusto.UT.IntelliSenseRulesTests.s_columnMappings.getItem(tableName):null},GenerateKustoEntities:function(queryParameters,availableClusters){var $t,$t1,result,databases,i,i1,i2,i3,table1,columns1,i4;availableClusters!=null&&availableClusters.add(\"other\");result=new Kusto.Data.IntelliSense.KustoIntelliSenseClusterEntity;result.Plugins=System.Array.init([($t=new Kusto.Data.IntelliSense.KustoIntelliSensePluginEntity,$t.Name=\"test_plugin\",$t)],Kusto.Data.IntelliSense.KustoIntelliSensePluginEntity);databases=new(System.Collections.Generic.List$1(Kusto.Data.IntelliSense.KustoIntelliSenseDatabaseEntity).ctor);result.Databases=databases;var db=($t=new Kusto.Data.IntelliSense.KustoIntelliSenseDatabaseEntity,$t.Name=\"Database1\",$t),tables=new(System.Collections.Generic.List$1(Kusto.Data.IntelliSense.KustoIntelliSenseTableEntity).ctor),functions=new(System.Collections.Generic.List$1(Kusto.Data.IntelliSense.KustoIntelliSenseFunctionEntity).ctor);db.Tables=tables;db.Functions=functions;databases.add(db);$t=Bridge.getEnumerator(System.Array.init([\"Table1\",\"['Table.2']\"],System.String));try{while($t.moveNext()){var tableName=$t.Current,table=($t1=new Kusto.Data.IntelliSense.KustoIntelliSenseTableEntity,$t1.Name=tableName,$t1.Columns=new(System.Collections.Generic.List$1(Kusto.Data.IntelliSense.KustoIntelliSenseColumnEntity).ctor),$t1),columns=new(System.Collections.Generic.List$1(Kusto.Data.IntelliSense.KustoIntelliSenseColumnEntity).ctor);for(table.Columns=columns,tables.add(table),i=0;i<10;i=i+1|0)columns.add(($t1=new Kusto.Data.IntelliSense.KustoIntelliSenseColumnEntity,$t1.Name=\"Field\"+(Bridge.toString(i)||\"\"),$t1.TypeCode=Kusto.Data.IntelliSense.EntityDataType.String,$t1));for(i1=0;i1<10;i1=i1+1|0)columns.add(($t1=new Kusto.Data.IntelliSense.KustoIntelliSenseColumnEntity,$t1.Name=\"NumField\"+(Bridge.toString(i1)||\"\"),$t1.TypeCode=Kusto.Data.IntelliSense.EntityDataType.Int32,$t1));for(i2=0;i2<5;i2=i2+1|0)columns.add(($t1=new Kusto.Data.IntelliSense.KustoIntelliSenseColumnEntity,$t1.Name=\"DateTimeField\"+(Bridge.toString(i2)||\"\"),$t1.TypeCode=Kusto.Data.IntelliSense.EntityDataType.DateTime,$t1));for(i3=0;i3<5;i3=i3+1|0)columns.add(($t1=new Kusto.Data.IntelliSense.KustoIntelliSenseColumnEntity,$t1.Name=\"TimeSpanField\"+(Bridge.toString(i3)||\"\"),$t1.TypeCode=Kusto.Data.IntelliSense.EntityDataType.TimeSpan,$t1));Kusto.UT.IntelliSenseRulesTests.RegisterTableEntitiesForTest(table,columns)}}finally{Bridge.is($t,System.IDisposable)&&$t.System$IDisposable$Dispose()}for(table1=($t1=new Kusto.Data.IntelliSense.KustoIntelliSenseTableEntity,$t1.Name=\"Table3\",$t1.Columns=new(System.Collections.Generic.List$1(Kusto.Data.IntelliSense.KustoIntelliSenseColumnEntity).ctor),$t1),columns1=new(System.Collections.Generic.List$1(Kusto.Data.IntelliSense.KustoIntelliSenseColumnEntity).ctor),table1.Columns=columns1,tables.add(table1),i4=0;i4<2;i4=i4+1|0)columns1.add(($t1=new Kusto.Data.IntelliSense.KustoIntelliSenseColumnEntity,$t1.Name=\"Field\"+(Bridge.toString(i4)||\"\"),$t1.TypeCode=Kusto.Data.IntelliSense.EntityDataType.String,$t1));return Kusto.UT.IntelliSenseRulesTests.RegisterTableEntitiesForTest(table1,columns1),queryParameters!=null&&(queryParameters.add(\"Parameter1\"),queryParameters.add(\"Parameter2\")),functions.add(($t1=new Kusto.Data.IntelliSense.KustoIntelliSenseFunctionEntity,$t1.Name=\"func\",$t1.Expression=\"let func = () { Table1 | project NumField1 };\",$t1.CallName=\"func\",$t1)),functions.add(($t1=new Kusto.Data.IntelliSense.KustoIntelliSenseFunctionEntity,$t1.Name=\"func1\",$t1.Expression=\"let func1 = () { Table1 | project NumField1 };\",$t1.CallName=\"func1\",$t1)),functions.add(($t1=new Kusto.Data.IntelliSense.KustoIntelliSenseFunctionEntity,$t1.Name=\"func2\",$t1.Expression=\"let func2 = () { func1 };\",$t1.CallName=\"func2\",$t1)),functions.add(($t1=new Kusto.Data.IntelliSense.KustoIntelliSenseFunctionEntity,$t1.Name=\"func3\",$t1.Expression=\"let func3 = () { func1 | summarize count() by NumField2};\",$t1.CallName=\"func3\",$t1)),functions.add(($t1=new Kusto.Data.IntelliSense.KustoIntelliSenseFunctionEntity,$t1.Name=\"func4\",$t1.Expression=\"let func4 = () { func | extend NumField3 = 1};\",$t1.CallName=\"func4\",$t1)),functions.add(($t1=new Kusto.Data.IntelliSense.KustoIntelliSenseFunctionEntity,$t1.Name=\"func5\",$t1.Expression=\"let func5 = (x:datetime) { func | extend NumField3 = 1};\",$t1.CallName=\"func5\",$t1)),functions.add(($t1=new Kusto.Data.IntelliSense.KustoIntelliSenseFunctionEntity,$t1.Name=\"func6\",$t1.Expression=\"let func6 = () { func5(1h) };\",$t1.CallName=\"func6\",$t1)),result},RegisterTableEntitiesForTest:function(table,columns){Kusto.UT.IntelliSenseRulesTests.s_columnMappings.setItem(table.Name,System.Linq.Enumerable.from(columns,Kusto.Data.IntelliSense.KustoIntelliSenseColumnEntity).select($asm.$.Kusto.UT.IntelliSenseRulesTests.f1).ToArray(System.String));Kusto.UT.IntelliSenseRulesTests.s_columnMappings.setItem(\"database('db1').\"+(table.Name||\"\"),System.Linq.Enumerable.from(columns,Kusto.Data.IntelliSense.KustoIntelliSenseColumnEntity).select($asm.$.Kusto.UT.IntelliSenseRulesTests.f1).ToArray(System.String));Kusto.UT.IntelliSenseRulesTests.s_columnMappings.setItem(\"cluster('other').database('db2').\"+(table.Name||\"\"),System.Linq.Enumerable.from(columns,Kusto.Data.IntelliSense.KustoIntelliSenseColumnEntity).select($asm.$.Kusto.UT.IntelliSenseRulesTests.f1).ToArray(System.String))}}},methods:{IntelliSenseCommandEntitiesTest:function(){this.CheckProjectedAndExtendedProperties(\"Table1 | project X, Y, Z | project-away X |\",System.Array.init([\"Y\",\"Z\"],System.String));this.CheckProjectedAndExtendedProperties(\"Table1 | project X, Y, Z | project-rename A=X |\",System.Array.init([\"A\",\"Y\",\"Z\"],System.String));this.TestPrintOperatorEntities();this.TestParseOperatorEntities();this.CheckProjectedAndExtendedProperties(\"range x from 1 to 1 step 1 | \\r\\n            extend y = 1\\r\\n            | \",System.Array.init([\"x\",\"y\"],System.String));this.CheckProjectedAndExtendedProperties(\"\\r\\n\\r\\n            // comment\\r\\n            Table3\\r\\n            | where Field1 == 'value { value'\\r\\n            | \",System.Array.init([\"Field0\",\"Field1\"],System.String));this.CheckProjectedAndExtendedProperties(\"Table3\\r\\n            | where Field1 == 'value { value'\\r\\n            | \",System.Array.init([\"Field0\",\"Field1\"],System.String));this.CheckProjectedAndExtendedProperties(\"Table3\\r\\n            | \",System.Array.init([\"Field0\",\"Field1\"],System.String));this.CheckProjectedAndExtendedProperties(\"Table3\\r\\n            | where Field1 == 'value{value'\\r\\n            | \",System.Array.init([\"Field0\",\"Field1\"],System.String));this.CheckProjectedAndExtendedProperties(\"T1 \\r\\n            | summarize by key1, key2\\r\\n            | \",System.Array.init([\"key1\",\"key2\"],System.String));this.TestSummarizeOperationsOverFunctions();this.CheckProjectedAndExtendedProperties(\"T1 \\r\\n            | project x1, x2, key\\r\\n            | join \\r\\n              (T2 | project y1, y2, key) on key \\r\\n            | extend e1 = 1\\r\\n            | \",System.Array.init([\"x1\",\"x2\",\"y1\",\"y2\",\"key\",\"e1\"],System.String));this.CheckProjectedAndExtendedProperties(\"KustoSources | project Source, Data | join (KustoLogs | summarize max(ActivityID) by Source, Timestamp ) on Source |\",System.Array.init([\"Source\",\"Data\",\"max_ActivityID\",\"Timestamp\"],System.String));this.CheckProjectedAndExtendedProperties(\"range x from 1 to 1 step 1\\r\\n            | extend y = x + 1, z = x + 2\\r\\n            | summarize val1 = sum(x)/sum(z), sumOfY=sum(y), sumOfZ =sum(z) |\",System.Array.init([\"val1\",\"sumOfY\",\"sumOfZ\"],System.String));this.CheckProjectedAndExtendedProperties(\"range x from 1 to 1 step 1 | \",System.Array.init([\"x\"],System.String));this.CheckProjectedAndExtendedProperties(\"| project Field1, Field2, Field3 \\r\\n            | extend Duration=Field2 - Field3, Field4=xxxx |\",System.Array.init([\"Field1\",\"Field2\",\"Field3\",\"Duration\",\"Field4\"],System.String));this.TestArgMinMaxEntities();this.TestProjectAssignmentEntities();this.TestProjectedAwayEntities();this.TestProjectedRenameEntities();this.CheckProjectedAndExtendedProperties(\"Table1 | project X, Y, Z | reduce by X |\",System.Array.init([\"Pattern\",\"Count\"],System.String));this.CheckProjectedAndExtendedProperties(\"Table1 | project X, Y, Z | mvexpand myCount=range(1, 2, 3) |\",System.Array.init([\"myCount\",\"X\",\"Y\",\"Z\"],System.String));this.CheckProjectedAndExtendedProperties(\"Table1 | project X, Y, Z | summarize myCount=count(X), mySum= sum(Y), myCount2 = count() by bin(Z, 10min), X |\",System.Array.init([\"myCount\",\"mySum\",\"myCount2\",\"Z\",\"X\"],System.String));this.CheckProjectedAndExtendedProperties(\"Table1 | summarize count(), makelist(ClusterName), makeset(SubscriptionId) by LogicalServerName | \",System.Array.init([\"count_\",\"list_ClusterName\",\"set_SubscriptionId\",\"LogicalServerName\"],System.String));this.CheckProjectedAndExtendedProperties(\"Table1 | summarize count(), any(ClusterName), any(SubscriptionId) by LogicalServerName, AppName, database_id, bin(TIMESTAMP, time(10m)) | \",System.Array.init([\"count_\",\"any_ClusterName\",\"any_SubscriptionId\",\"LogicalServerName\",\"AppName\",\"database_id\",\"TIMESTAMP\"],System.String));this.CheckProjectedAndExtendedProperties(\"Table1 | project X, Y, Z | summarize count(X), sum(Y) by bin(Z, 10min), X |\",System.Array.init([\"count_X\",\"sum_Y\",\"Z\",\"X\"],System.String));this.CheckProjectedAndExtendedProperties(\"Table1 | project X, Y, Z | summarize count(X), sum(Y) by bin (Z, 10min), X |\",System.Array.init([\"count_X\",\"sum_Y\",\"Z\",\"X\"],System.String));this.CheckProjectedAndExtendedProperties(\"Table1 | project X, Y, Z | summarize A=countif(X), countif(Y) by bin (Z, 10min), X |\",System.Array.init([\"A\",\"countif_Y\",\"Z\",\"X\"],System.String));this.CheckProjectedAndExtendedProperties(\"Table1 | project X, Y, Z | summarize A=sumif(X, pred1), sumif(Y, pred2) by bin (Z, 10min), X |\",System.Array.init([\"A\",\"sumif_Y\",\"Z\",\"X\"],System.String));this.CheckProjectedAndExtendedProperties(\"Table1 | summarize percentile(X, 10), percentiles(Y, 10, 20, 99.9, 1E-8) |\",System.Array.init([\"percentile_X_10\",\"percentile_Y_10\",\"percentile_Y_20\",\"percentile_Y_99_9\",\"percentile_Y_1E_8\"],System.String));this.CheckProjectedAndExtendedProperties(\"Table1 | summarize percentile(X / 99, 10), percentiles(Y * 1000, 10, 20, 99.9, 1E-8) |\",System.Array.init([\"percentile_X_10\",\"percentile_Y_10\",\"percentile_Y_20\",\"percentile_Y_99_9\",\"percentile_Y_1E_8\"],System.String));this.CheckProjectedAndExtendedProperties(\"Table1 | project Field1, Field2, Field3 \\r\\n            | extend Duration=Field2 - Field3, Field4=xxxx \\r\\n            | join (Table2 | extend FieldA=1, FieldB=22 |\",System.Array.init([\"FieldA\",\"FieldB\"],System.String));this.CheckProjectedAndExtendedProperties(\"Table1 | project Field1, Field2, Field3 \\r\\n            | extend Duration=Field2 - Field3, Field4=xxxx \\r\\n            | join (Table2 | extend FieldA=1, FieldB=22 | project FieldA | filter X\",System.Array.init([\"FieldA\"],System.String));this.CheckProjectedAndExtendedProperties(\"Table1 | project Field1, Field2, Field3\\r\\n            | join (\\r\\n            Table2 | project Field1, Field2, Field3 ) on \",System.Array.init([\"Field1\",\"Field2\",\"Field3\"],System.String));this.CheckProjectedAndExtendedProperties(\"Table1 | extend Y=5 | project Field1, Field2, Field3, Y\\r\\n            | join (\\r\\n            Table2 | extend Y=4 | project Field1, Field2, Field3, Y  ) on \",System.Array.init([\"Field1\",\"Field2\",\"Field3\",\"Y\"],System.String));this.CheckProjectedAndExtendedProperties(\"Table1 | extend X=5 | project X, timestamp, Field1\\r\\n                        | join (\\r\\n                        Table2 | make-series X=sum(Y) on timestamp in range(datetime(3000-01-01),datetime(3000-01-02),1h) by Field1) on \",System.Array.init([\"X\",\"timestamp\",\"Field1\"],System.String));this.CheckProjectedAndExtendedProperties(\"Table1 | make-series X=sum(Y) on timestamp in range(datetime(3000-01-01),datetime(3000-01-02),1h) by Field1\\r\\n                        | join (\\r\\n                        Table2 | extend X=5 | project X, timestamp, Field1) on \",System.Array.init([\"X\",\"timestamp\",\"Field1\"],System.String));this.CheckProjectedAndExtendedProperties(\"Table1 | project X, Y | summarize count(X), sum(Y)\",System.Array.init([\"X\",\"Y\"],System.String));this.CheckProjectedAndExtendedProperties(\"Table1 | summarize count(X), sum(Y) |\",System.Array.init([\"count_X\",\"sum_Y\"],System.String));this.CheckProjectedAndExtendedProperties(\"Table1 | summarize count(X), sum(Y) | project count_Z\",System.Array.init([\"count_X\",\"sum_Y\"],System.String));this.CheckProjectedAndExtendedProperties(\"Table1 | summarize count(X), sum(Y) | project count_Z |\",System.Array.init([\"count_Z\"],System.String));this.CheckProjectedAndExtendedProperties(\"Table1 | top-nested 5 of P by count(X) asc, top-nested 6 of Q by sum(Y) desc, top-nested 6 of W by avg(I)|\",System.Array.init([\"aggregated_P\",\"aggregated_Q\",\"aggregated_W\",\"P\",\"Q\",\"W\"],System.String));this.CheckProjectedAndExtendedProperties(\"Table1 | top-nested 5 of P by count(X) asc, top-nested 6 of Q by AggregatedSumY = sum(Y) desc, top-nested 6 of W by AggregatedAvgI = avg(I)|\",System.Array.init([\"aggregated_P\",\"AggregatedSumY\",\"AggregatedAvgI\",\"P\",\"Q\",\"W\"],System.String));this.CheckProjectedAndExtendedProperties(\"Table1 | top-nested 5 of P by count(X) asc, top-nested 6 of Q by AggregatedSumY = sum(Y) desc, top-nested 6 of W by AggregatedAvgI = avg(I) asc, top-nested 5 of M by count(C)|\",System.Array.init([\"aggregated_P\",\"AggregatedSumY\",\"AggregatedAvgI\",\"aggregated_M\",\"P\",\"Q\",\"W\",\"M\"],System.String));this.CheckProjectedAndExtendedProperties(\"Table1 | top-nested 5 of A by count() | \",System.Array.init([\"aggregated_A\",\"A\"],System.String));this.CheckProjectedAndExtendedProperties(\"Table1 | project X, Y, Z | summarize count(X), sum(Y) | \",System.Array.init([\"count_X\",\"sum_Y\"],System.String));this.CheckProjectedAndExtendedProperties(\"Table1 | project X, Y, Z | summarize count(X), sum(Y) by Z | \",System.Array.init([\"count_X\",\"sum_Y\",\"Z\"],System.String));this.CheckProjectedAndExtendedProperties(\"Table1 | project X, Y, Z | summarize count(X), sum(Y) by Z, X | \",System.Array.init([\"count_X\",\"sum_Y\",\"Z\",\"X\"],System.String));this.CheckProjectedAndExtendedProperties(\"Table1 | project X, Y, Z | summarize count(), sum(Y) by Z, X | \",System.Array.init([\"count_\",\"sum_Y\",\"Z\",\"X\"],System.String));this.CheckProjectedAndExtendedProperties(\"Table1 | project X, Y, Z | summarize count(X), sum(Y) | extend FieldA = x | \",System.Array.init([\"count_X\",\"sum_Y\",\"FieldA\"],System.String));this.CheckProjectedAndExtendedProperties(\"Table1 | summarize count(X), dcount(Y) | project dcount_Y |\",System.Array.init([\"dcount_Y\"],System.String));this.CheckProjectedAndExtendedProperties(\"Table1 | project X, Y | summarize countif(X), sum(Y)\",System.Array.init([\"X\",\"Y\"],System.String));this.CheckProjectedAndExtendedProperties(\"Table1 | summarize countif(X), sum(Y) |\",System.Array.init([\"countif_X\",\"sum_Y\"],System.String));this.CheckProjectedAndExtendedProperties(\"Table1 | summarize countif(X), sum(Y) | project count_Z\",System.Array.init([\"countif_X\",\"sum_Y\"],System.String));this.CheckProjectedAndExtendedProperties(\"Table1 | summarize sumif(X,Y), sum(Y) | project count_Z\",System.Array.init([\"sumif_X\",\"sum_Y\"],System.String));this.CheckProjectedAndExtendedProperties(\"Table1 | summarize countif(X), sum(Y) | project count_Z |\",System.Array.init([\"count_Z\"],System.String));this.CheckProjectedAndExtendedProperties(\"Table1 | project X, Y, Z | summarize countif(X), sum(Y) | \",System.Array.init([\"countif_X\",\"sum_Y\"],System.String));this.CheckProjectedAndExtendedProperties(\"Table1 | project X, Y, Z | summarize sumif(X,Y), sum(Y) | \",System.Array.init([\"sumif_X\",\"sum_Y\"],System.String));this.CheckProjectedAndExtendedProperties(\"Table1 | project X, Y, Z | summarize countif(X), sum(Y) by Z | \",System.Array.init([\"countif_X\",\"sum_Y\",\"Z\"],System.String));this.CheckProjectedAndExtendedProperties(\"Table1 | project X, Y, Z | summarize sumif(X, Y), sum(Y) by Z | \",System.Array.init([\"sumif_X\",\"sum_Y\",\"Z\"],System.String));this.CheckProjectedAndExtendedProperties(\"Table1 | project X, Y, Z | summarize countif(X), sum(Y) by Z, X | \",System.Array.init([\"countif_X\",\"sum_Y\",\"Z\",\"X\"],System.String));this.CheckProjectedAndExtendedProperties(\"Table1 | project X, Y, Z | summarize sumif(X, Y), sum(Y) by Z, X | \",System.Array.init([\"sumif_X\",\"sum_Y\",\"Z\",\"X\"],System.String));this.CheckProjectedAndExtendedProperties(\"Table1 | project X, Y, Z | summarize countif(X), sum(Y) | extend FieldA = x | \",System.Array.init([\"countif_X\",\"sum_Y\",\"FieldA\"],System.String));this.CheckProjectedAndExtendedProperties(\"Table1 | project X, Y, Z | summarize sumif(X, Y), sum(Y) | extend FieldA = x | \",System.Array.init([\"sumif_X\",\"sum_Y\",\"FieldA\"],System.String));this.CheckProjectedAndExtendedProperties(\"Table1 | summarize countif(X), dcount(Y) | project dcount_Y |\",System.Array.init([\"dcount_Y\"],System.String));this.CheckProjectedAndExtendedProperties(\"Table1 | summarize any(X), any(Y) | project any_Y |\",System.Array.init([\"any_Y\"],System.String));this.CheckProjectedAndExtendedProperties(\"| project Field1, Field2, Field3 \\r\\n            | extend Duration=Field2 - Field3, Field4=xxxx \",System.Array.init([\"Field1\",\"Field2\",\"Field3\"],System.String));this.CheckProjectedAndExtendedProperties(\"| project Field1, Field2, Field3 \\r\\n            | extend Duration=Field2 - Field3, Field4=xxxx \\r\\n            | project Duration, Field4  \",System.Array.init([\"Field1\",\"Field2\",\"Field3\",\"Duration\",\"Field4\"],System.String));this.CheckProjectedAndExtendedProperties(\"| project Field1, Field2, Field3 \\r\\n            | extend Duration=Field2 - Field3, Field4=xxxx \\r\\n            | project Duration, Field4 | \",System.Array.init([\"Duration\",\"Field4\"],System.String));this.CheckProjectedAndExtendedProperties(\"| project Field1, Field2, Field3 | extend Duration=Field2 - Field3, Field1=xxxx | \\r\\n            join ( xxxx | project X | extend Y=X, Z=X) on XXX \\r\\n            join ( yyyy | project Field1, Field2, Field3 | extend Duration=Field2 - Field3, FieldX=xxxx |\",System.Array.init([\"Field1\",\"Field2\",\"Field3\",\"Duration\",\"FieldX\"],System.String));this.CheckProjectedAndExtendedProperties(\"| project Field1, Field2, Field3 | extend Duration=Field2 - Field3, Field1=xxxx | \\r\\n            join ( xxxx | project X | extend Y=X, Z=X) on XXX \\r\\n            join ( yyyy | project Field1, Field2, Field3 | extend Duration=Field2 - Field3, FieldX=xxxx \",System.Array.init([\"Field1\",\"Field2\",\"Field3\"],System.String));this.CheckProjectedAndExtendedProperties(\"KustoLogs \\r\\n            | filter EventText like 'Gateway.ExecuteQuery'\\r\\n            | filter Source like 'KUSKUS' or Source like 'ONESI-PROD' or Source like 'IPEPROD'\\r\\n            | extend op=extract('Gateway.ExecuteQuery:.*(join|summarize|filter)', 1, EventText) , is_Join=extract('Gateway.ExecuteQuery:.*(join)', 1, EventText) \\r\\n            | extend is_Filter=extract('Gateway.ExecuteQuery:.*(filter)', 1, EventText) \\r\\n            | filter \",System.Array.init([\"op\",\"is_Join\",\"is_Filter\"],System.String));this.CheckProjectedAndExtendedProperties(\"KustoLogs \\r\\n            | project Field1, Field2, Field3\\r\\n            | extend op=\",System.Array.init([\"Field1\",\"Field2\",\"Field3\"],System.String));this.CheckProjectedAndExtendedProperties(\"KustoLogs \\r\\n            | project Field1, Field2, Field3\\r\\n            | extend op=Field1 - \",System.Array.init([\"Field1\",\"Field2\",\"Field3\"],System.String));this.CheckProjectedAndExtendedProperties(\"KustoLogs \\r\\n            | project Field1, Field2, Field3\\r\\n            | extend op=Field1 + \",System.Array.init([\"Field1\",\"Field2\",\"Field3\"],System.String));this.CheckProjectedAndExtendedProperties(\"KustoLogs \\r\\n            | project Field1, Field2, Field3\\r\\n            | extend op=Field1 / \",System.Array.init([\"Field1\",\"Field2\",\"Field3\"],System.String));this.CheckProjectedAndExtendedProperties(\"KustoLogs \\r\\n            | project Field1, Field2, Field3\\r\\n            | extend op=Field1 * \",System.Array.init([\"Field1\",\"Field2\",\"Field3\"],System.String));this.CheckProjectedAndExtendedProperties(\"KustoLogs \\r\\n            | project Field1, Field2, Field3\\r\\n            | extend op=Field1 + Field2, op2=\",System.Array.init([\"Field1\",\"Field2\",\"Field3\"],System.String));this.CheckProjectedAndExtendedProperties(\"KustoLogs \\r\\n            | filter EventText like 'Gateway.ExecuteQuery'\\r\\n\\r\\n            | extend op=extract('Gateway.ExecuteQuery:.*(join|summarize|filter)', 1, EventText) \\r\\n            | extend is_Join=extract('Gateway.ExecuteQuery:.*(join)', 1, EventText) \\r\\n            | extend is_Filter=extract('Gateway.ExecuteQuery:.*(filter)', 1, EventText) \\r\\n            | filter \",System.Array.init([\"op\",\"is_Join\",\"is_Filter\"],System.String));this.CheckProjectedAndExtendedProperties(\"KustoLogs \\r\\n            | filter EventText like 'Gateway.ExecuteQuery'\\r\\n\\r\\n            | extend op=extract('Gateway.ExecuteQuery:.*(join|summarize|filter)', 1, EventText) \\r\\n            | extend is_Join=extract('Gateway.ExecuteQuery:.*(join)', 1, EventText) \\r\\n            | extend is_Filter=extract('Gateway.ExecuteQuery:.*(filter)', 1, EventText) \\r\\n            | filter \",System.Array.init([\"op\",\"is_Join\",\"is_Filter\"],System.String));this.CheckProjectedAndExtendedProperties(\"Table1 | make-series sum(Y) default=0 on Z in range(datetime(3000-01-01),datetime(3000-01-02),1h) by X |\",System.Array.init([\"sum_Y\",\"Z\",\"X\"],System.String));this.CheckProjectedAndExtendedProperties(\"Table1 | make-series sum_of_y=sum(Y) default= 0 on Z in range(datetime(3000-01-01),datetime(3000-01-02),1h) by X |\",System.Array.init([\"sum_of_y\",\"Z\",\"X\"],System.String));this.CheckProjectedAndExtendedProperties(\"Table1 | make-series sum_of_y=sum(Y) on Z in range(datetime(3000-01-01),datetime(3000-01-02),1h) |\",System.Array.init([\"sum_of_y\",\"Z\"],System.String));this.CheckProjectedAndExtendedProperties(\"Table1 | make-series sum(Y) on Z in range(datetime(3000-01-01),datetime(3000-01-02),1h) by X |\",System.Array.init([\"sum_Y\",\"Z\",\"X\"],System.String));this.CheckProjectedAndExtendedProperties(\" Table1\\r\\n                | sample-distinct 10 of Field1 |\\r\\n                \",System.Array.init([\"Field1\"],System.String));this.CheckProjectedAndExtendedProperties(\" Table1\\r\\n                | sample-distinct 10 of log2(Field1) |\\r\\n                \",System.Array.init([\"Field1\"],System.String));this.CheckProjectedAndExtendedProperties(\"KustoLogs \\r\\n            | project Field1, series_stats(Field2), (rs, s)=series_fit_line(Field3) |\\r\\n                \",System.Array.init([\"Field1\",\"series_stats_Field2_min\",\"series_stats_Field2_min_idx\",\"series_stats_Field2_max\",\"series_stats_Field2_max_idx\",\"series_stats_Field2_avg\",\"series_stats_Field2_stdev\",\"series_stats_Field2_variance\",\"rs\",\"s\"],System.String));this.CheckProjectedAndExtendedProperties(\"KustoLogs \\r\\n            | project Field1, series_stats(Field2), (a,b,c)=series_fit_line(Field3) |\\r\\n                \",System.Array.init([\"Field1\",\"series_stats_Field2_min\",\"series_stats_Field2_min_idx\",\"series_stats_Field2_max\",\"series_stats_Field2_max_idx\",\"series_stats_Field2_avg\",\"series_stats_Field2_stdev\",\"series_stats_Field2_variance\",\"a\",\"b\",\"c\"],System.String));this.CheckProjectedAndExtendedProperties(\"KustoLogs \\r\\n            | extend Field1, (min, min_idx)=series_stats(Field2), (rs, s)=series_fit_line(Field3), mundane=sqrt(Field3) |\\r\\n                \",System.Array.init([\"Field1\",\"min\",\"min_idx\",\"rs\",\"s\",\"mundane\"],System.String));this.CheckProjectedAndExtendedProperties(\"KustoLogs \\r\\n            | extend Field1, series_stats(Field2), series_fit_line(Field3), mundane=sqrt(Field3) |\\r\\n            \",System.Array.init([\"Field1\",\"series_stats_Field2_min\",\"series_stats_Field2_min_idx\",\"series_stats_Field2_max\",\"series_stats_Field2_max_idx\",\"series_stats_Field2_avg\",\"series_stats_Field2_stdev\",\"series_stats_Field2_variance\",\"series_fit_line_Field3_rsquare\",\"series_fit_line_Field3_slope\",\"series_fit_line_Field3_variance\",\"series_fit_line_Field3_rvariance\",\"series_fit_line_Field3_interception\",\"series_fit_line_Field3_line_fit\",\"mundane\"],System.String));this.CheckProjectedAndExtendedProperties(\"KustoLogs \\r\\n            | project Field1, series_fit_2lines(Field2), mundane=sqrt(Field3) |\\r\\n                \",System.Array.init([\"Field1\",\"series_fit_2lines_Field2_rsquare\",\"series_fit_2lines_Field2_split_idx\",\"series_fit_2lines_Field2_variance\",\"series_fit_2lines_Field2_rvariance\",\"series_fit_2lines_Field2_line_fit\",\"series_fit_2lines_Field2_right_rsquare\",\"series_fit_2lines_Field2_right_slope\",\"series_fit_2lines_Field2_right_interception\",\"series_fit_2lines_Field2_right_variance\",\"series_fit_2lines_Field2_right_rvariance\",\"series_fit_2lines_Field2_left_rsquare\",\"series_fit_2lines_Field2_left_slope\",\"series_fit_2lines_Field2_left_interception\",\"series_fit_2lines_Field2_left_variance\",\"series_fit_2lines_Field2_left_rvariance\",\"mundane\"],System.String));this.CheckProjectedAndExtendedProperties(\"KustoLogs \\r\\n            | project Field1, series_stats(Field2), (min, min_idx)=series_stats(Field2) |\\r\\n                \",System.Array.init([\"Field1\",\"series_stats_Field2_min\",\"series_stats_Field2_min_idx\",\"series_stats_Field2_max\",\"series_stats_Field2_max_idx\",\"series_stats_Field2_avg\",\"series_stats_Field2_stdev\",\"series_stats_Field2_variance\",\"min\",\"min_idx\"],System.String))},IntelliSenseCommandEntities_EscapedNamesTest:function(){this.CheckProjectedAndExtendedProperties(\"range x from 1 to 1 step 1 \\r\\n| project a.b, a.[c], a.[c][d], a.[c].[e] |\",System.Array.init([\"a_b\",\"a_c\",\"a_c_d\",\"a_c_e\"],System.String));this.CheckProjectedAndExtendedProperties(\"range x from 1 to 1 step 1 \\r\\n| project a.['b'], a.['c'], a.[\\\"c\\\"][d], a.['c'].[\\\"e\\\"] |\",System.Array.init([\"a_b\",\"a_c\",\"a_c_d\",\"a_c_e\"],System.String));this.CheckProjectedAndExtendedProperties(\"range x from 1 to 1 step 1 \\r\\n| project a.['[b]'], a.['[c]'], a.[\\\"[c]\\\"][d], a.['[c]'].[\\\"[e]\\\"] |\",System.Array.init([\"['a_[b]']\",\"['a_[c]']\",\"['a_[c]_d']\",\"['a_[c]_[e]']\"],System.String));this.CheckProjectedAndExtendedProperties(\"range x from 1 to 1 step 1 \\r\\n| project a.['b c'] |\",System.Array.init([\"a_b_c\"],System.String));this.CheckProjectedAndExtendedProperties(\"Table1 | summarize percentile(X / 99, 10), percentiles(Y * 1000, 10, 20, 99.9, 1E-8) |\",System.Array.init([\"percentile_X_10\",\"percentile_Y_10\",\"percentile_Y_20\",\"percentile_Y_99_9\",\"percentile_Y_1E_8\"],System.String));this.CheckProjectedAndExtendedProperties(\"range x from 1 to 1 step 1 \\r\\n| extend ['abc def'] = 1\\r\\n| summarize min(['abc def']), max(['abc def']), avg(['abc def']) |\",System.Array.init([\"['min_abc def']\",\"['max_abc def']\",\"['avg_abc def']\"],System.String));this.CheckProjectedAndExtendedProperties(\"range x from 1 to 1 step 1 | extend ['abc def'] = 1 | \",System.Array.init([\"x\",\"['abc def']\"],System.String));this.CheckProjectedAndExtendedProperties(\"range x from 1 to 1 step 1 | project ['abc def'] = 1 | \",System.Array.init([\"['abc def']\"],System.String))},IntelliSenseCommandEntities_FindTest:function(){this.TestEntitiesForFindFilterAndProjection(\"find where \",System.Array.init([\"Field0\",\"Field1\",\"*\"],System.String));this.TestEntitiesForFindFilterAndProjection(\"find in (*) where \",System.Array.init([\"Field0\",\"Field1\",\"*\"],System.String));this.TestEntitiesForFindFilterAndProjection(\"find in (Table1) where \",System.Array.init([\"*\"],System.String),!0);this.TestEntitiesForFindFilterAndProjection(\"find in (['Table.2']) where \",System.Array.init([\"*\"],System.String),!0);this.TestEntitiesForFindFilterAndProjection(\"find in (Table1, ['Table.2']) where \",System.Linq.Enumerable.from(Kusto.UT.IntelliSenseRulesTests.GetColumnsOfTable(\"Table1\"),System.String).intersect(Kusto.UT.IntelliSenseRulesTests.GetColumnsOfTable(\"['Table.2']\")).concat(System.Array.init([\"*\"],System.String)).ToArray(System.String));this.TestEntitiesForFindFilterAndProjection(\"find in (database('*').Table1) where \",System.Linq.Enumerable.from(Kusto.UT.IntelliSenseRulesTests.GetColumnsOfTable(\"Table1\"),System.String).concat(System.Array.init([\"*\"],System.String)).ToArray(System.String));this.TestEntitiesForFindFilterAndProjection(\"find in (database('*').*1, *1) where \",System.Linq.Enumerable.from(Kusto.UT.IntelliSenseRulesTests.GetColumnsOfTable(\"Table1\"),System.String).concat(System.Array.init([\"*\"],System.String)).ToArray(System.String));this.TestEntitiesForFindFilterAndProjection(\"find in (Table1, Table2) where \",System.Array.init([\"*\"],System.String));this.TestEntitiesForFindFilterAndProjection(\"find where 'abc' project \",System.Array.init([\"Field0\",\"Field1\",\"pack(*)\"],System.String));this.TestEntitiesForFindFilterAndProjection('find in (*) where Field0 == \"abc\" project ',System.Array.init([\"Field0\",\"Field1\",\"pack(*)\"],System.String));this.TestEntitiesForFindFilterAndProjection('find in (Table1) where Field0 == \"abc\" project ',System.Array.init([\"pack(*)\"],System.String),!0);this.TestEntitiesForFindFilterAndProjection(\"find in (['Table.2']) where Field0 == \\\"abc\\\" project \",System.Array.init([\"pack(*)\"],System.String),!0);this.TestEntitiesForFindFilterAndProjection(\"find in (Table1, ['Table.2']) where Field0 == \\\"abc\\\" project \",System.Linq.Enumerable.from(Kusto.UT.IntelliSenseRulesTests.GetColumnsOfTable(\"Table1\"),System.String).intersect(Kusto.UT.IntelliSenseRulesTests.GetColumnsOfTable(\"['Table.2']\")).concat(System.Array.init([\"pack(*)\"],System.String)).ToArray(System.String));this.TestEntitiesForFindFilterAndProjection(\"find in (database('*').Table1) where Field0 == \\\"abc\\\" project \",System.Linq.Enumerable.from(Kusto.UT.IntelliSenseRulesTests.GetColumnsOfTable(\"Table1\"),System.String).concat(System.Array.init([\"pack(*)\"],System.String)).ToArray(System.String));this.TestEntitiesForFindFilterAndProjection('find in (Table1, Table2) where Field0 == \"abc\" project ',System.Array.init([\"pack(*)\"],System.String));this.TestEntitiesForFindFilterAndProjection(\"find 'abc' project Field0, Field1\\r\\n            | \",System.Array.init([\"source_\",\"Field0\",\"Field1\"],System.String));this.TestEntitiesForFindFilterAndProjection(\"find 'abc' project Field0, Field1, pack(*)\\r\\n            | \",System.Array.init([\"source_\",\"Field0\",\"Field1\",\"pack_\"],System.String));this.TestEntitiesForFindFilterAndProjection(\"find 'abc' project Field0, pack(*)\\r\\n            | \",System.Array.init([\"source_\",\"Field0\",\"pack_\"],System.String));this.TestEntitiesForFindFilterAndProjection(\"find 'abc' project pack(*)\\r\\n            | \",System.Array.init([\"source_\",\"pack_\"],System.String));this.TestEntitiesForFindFilterAndProjection(\"find where 'abc' project Field0, Field1\\r\\n            | \",System.Array.init([\"source_\",\"Field0\",\"Field1\"],System.String));this.TestEntitiesForFindFilterAndProjection(\"find where 'abc' project Field0, Field1, pack(*)\\r\\n            | \",System.Array.init([\"source_\",\"Field0\",\"Field1\",\"pack_\"],System.String));this.TestEntitiesForFindFilterAndProjection(\"find where 'abc' project pack(*)\\r\\n            | \",System.Array.init([\"source_\",\"pack_\"],System.String));this.TestEntitiesForFindFilterAndProjection(\"find withsource=Source where 'abc' project Field0, Field1\\r\\n            | \",System.Array.init([\"Source\",\"Field0\",\"Field1\"],System.String));this.TestEntitiesForFindFilterAndProjection(\"find withsource=SourceName in (*) where 'abc' \\r\\n| \",System.Array.init([\"SourceName\",\"Field0\",\"Field1\",\"pack_\"],System.String));this.TestEntitiesForFindFilterAndProjection(\"find withsource=SourceName in (database('db1').*, *) where 'abc'\\r\\n| \",System.Array.init([\"SourceName\",\"Field0\",\"Field1\",\"pack_\"],System.String));this.TestEntitiesForFindFilterAndProjection(\"find withsource=SourceName in (database('db1').*) where 'abc'\\r\\n| \",System.Array.init([\"SourceName\",\"Field0\",\"Field1\",\"pack_\"],System.String));this.TestEntitiesForFindFilterAndProjection(\"find withsource=SourceName in (Table1) where 'abc'\\r\\n| \",System.Linq.Enumerable.from(System.Array.init([\"SourceName\",\"pack_\"],System.String),System.String).union(Kusto.UT.IntelliSenseRulesTests.GetColumnsOfTable(\"Table1\")).ToArray(System.String));this.TestEntitiesForFindFilterAndProjection(\"find 'abc'\\r\\n| \",System.Array.init([\"source_\",\"Field0\",\"Field1\",\"pack_\"],System.String));this.TestEntitiesForFindFilterAndProjection(\"find in (Table1) where 'abc'\\r\\n| \",System.Linq.Enumerable.from(System.Array.init([\"source_\",\"pack_\"],System.String),System.String).union(Kusto.UT.IntelliSenseRulesTests.GetColumnsOfTable(\"Table1\")).ToArray(System.String));this.TestEntitiesForFindFilterAndProjection(\"find in (Table1, ['Table.2']) where 'abc'\\r\\n| \",System.Linq.Enumerable.from(System.Array.init([\"source_\",\"pack_\"],System.String),System.String).union(System.Linq.Enumerable.from(Kusto.UT.IntelliSenseRulesTests.GetColumnsOfTable(\"Table1\"),System.String).intersect(Kusto.UT.IntelliSenseRulesTests.GetColumnsOfTable(\"['Table.2']\"))).ToArray(System.String));this.TestEntitiesForFindFilterAndProjection(\"find withsource=SourceName where 'abc'\\r\\n| \",System.Array.init([\"SourceName\",\"Field0\",\"Field1\",\"pack_\"],System.String));this.TestEntitiesForFindFilterAndProjection(\"find in (Table1, database('db1').Table1) where 'abc'\\r\\n| \",System.Linq.Enumerable.from(System.Array.init([\"source_\",\"pack_\"],System.String),System.String).union(Kusto.UT.IntelliSenseRulesTests.GetColumnsOfTable(\"Table1\")).ToArray(System.String))},IntelliSenseCommandEntities_SearchTest:function(){var expectedOptions,unionOfAllColumns=System.Linq.Enumerable.from(Kusto.UT.IntelliSenseRulesTests.GetColumnsOfTable(\"Table1\"),System.String).union(Kusto.UT.IntelliSenseRulesTests.GetColumnsOfTable(\"['Table.2']\")).union(Kusto.UT.IntelliSenseRulesTests.GetColumnsOfTable(\"Table3\")),additionalOptions=System.Linq.Enumerable.from(System.Array.init(['\"\"',\"*\"],System.String),System.String).union(Kusto.Data.IntelliSense.CslCommandParser.SortedExtendFunctions),additionalOptionsIncludingIn=additionalOptions.concat(System.Array.init([\"in\"],System.String)),additionalOptionsIncludingKind=additionalOptionsIncludingIn.concat(System.Array.init([\"kind=\"],System.String));expectedOptions=unionOfAllColumns.union(additionalOptionsIncludingKind).ToArray(System.String);this.TestOptionsForSearch(\"search \",expectedOptions);expectedOptions=unionOfAllColumns.union(additionalOptionsIncludingIn).ToArray(System.String);this.TestOptionsForSearch(\"search kind=case_sensitive \",expectedOptions);expectedOptions=unionOfAllColumns.union(additionalOptions).ToArray(System.String);this.TestOptionsForSearch(\"search 'abc' and \",expectedOptions);expectedOptions=System.Linq.Enumerable.from(Kusto.UT.IntelliSenseRulesTests.GetColumnsOfTable(\"Table3\"),System.String).union(additionalOptions).ToArray(System.String);this.TestOptionsForSearch(\"Table3 | search 'abc' and \",expectedOptions);expectedOptions=System.Linq.Enumerable.from(Kusto.UT.IntelliSenseRulesTests.GetColumnsOfTable(\"Table3\"),System.String).union(additionalOptions).ToArray(System.String);this.TestOptionsForSearch(\"search in (Table3) 'abc' and \",expectedOptions);expectedOptions=System.Linq.Enumerable.from(Kusto.UT.IntelliSenseRulesTests.GetColumnsOfTable(\"Table3\"),System.String).union(Kusto.UT.IntelliSenseRulesTests.GetColumnsOfTable(\"['Table.2']\")).union(additionalOptions).ToArray(System.String);this.TestOptionsForSearch(\"search in (Table3,['Table.2']) 'abc' and \",expectedOptions);expectedOptions=System.Linq.Enumerable.from(Kusto.UT.IntelliSenseRulesTests.GetColumnsOfTable(\"Table3\"),System.String).union(Kusto.UT.IntelliSenseRulesTests.GetColumnsOfTable(\"Table1\")).union(additionalOptions).ToArray(System.String);this.TestOptionsForSearch(\"search in (T*) 'abc' and \",expectedOptions);expectedOptions=unionOfAllColumns.union(additionalOptions).ToArray(System.String);this.TestOptionsForSearch(\"search in (*) 'abc' and \",expectedOptions);expectedOptions=System.Linq.Enumerable.from(Kusto.UT.IntelliSenseRulesTests.GetColumnsOfTable(\"Table3\"),System.String).union(additionalOptions).ToArray(System.String);this.TestOptionsForSearch(\"search in (database('db1').Table3) 'abc' and \",expectedOptions);expectedOptions=System.Linq.Enumerable.from(Kusto.UT.IntelliSenseRulesTests.GetColumnsOfTable(\"Table3\"),System.String).union(additionalOptions).ToArray(System.String);this.TestOptionsForSearch(\"search in (database('db1').T*3) 'abc' and \",expectedOptions);expectedOptions=unionOfAllColumns.union(additionalOptions).ToArray(System.String);this.TestOptionsForSearch(\"search in (database('db1').T*) 'abc' and \",expectedOptions)},TestOptionsForSearch:function(command,expectedOptions){var context=this.GetQueryContext(command);this.ValidateSearchRules(command,context,expectedOptions)},ValidateSearchRules:function(command,tableContext,expectedOptions){var $t,rule={},actualOptions;Kusto.UT.IntelliSenseRulesTests.s_intelliSenseProvider.TryMatchSpecificRule(command,tableContext,Kusto.Data.IntelliSense.RuleKind.YieldPostSearchOptions,rule)||Kusto.UT.IntelliSenseRulesTests.s_intelliSenseProvider.TryMatchSpecificRule(command,tableContext,Kusto.Data.IntelliSense.RuleKind.YieldInsideSearchOptions,rule)||Kusto.UT.IntelliSenseRulesTests.s_intelliSenseProvider.TryMatchSpecificRule(command,tableContext,Kusto.Data.IntelliSense.RuleKind.YieldPostSearchKindOptions,rule)||Kusto.UT.IntelliSenseRulesTests.Assert.Fail(System.String.format(\"No matching search rule for query '{0}'\",[command]));actualOptions=($t=System.String,System.Linq.Enumerable.from(rule.v.GetOptions(tableContext),$t).toList($t));Kusto.UT.IntelliSenseRulesTests.ValidateEntities(command,expectedOptions,actualOptions)},TestProjectAssignmentEntities:function(){this.CheckProjectedAndExtendedProperties(\"Table1\\r\\n                | project x=1 |\\r\\n                \",System.Array.init([\"x\"],System.String));this.CheckProjectedAndExtendedProperties(\"Table1\\r\\n                | project y=xxxx+1, z= 33, x=xxxx/2 |\\r\\n                \",System.Array.init([\"x\",\"y\",\"z\"],System.String))},TestProjectedAwayEntities:function(){this.CheckProjectedAndExtendedProperties(\"Table1 | project X, Y, Z | project-away X |\",System.Array.init([\"Y\",\"Z\"],System.String));this.CheckProjectedAndExtendedProperties(\"Table1 | project X, Y, Z | mvexpand myCount=range(1, 2, 3) | project-away Y |\",System.Array.init([\"myCount\",\"X\",\"Z\"],System.String));this.CheckProjectedAndExtendedProperties(\"Table1 | project X, Y, Z | summarize myCount=count(X), mySum= sum(Y), myCount2 = count() by bin(Z, 10min), X | project-away Z |\",System.Array.init([\"myCount\",\"mySum\",\"myCount2\",\"X\"],System.String));this.CheckProjectedAndExtendedProperties(\"Table1 | project-away ClusterName |summarize count(), any(SubscriptionId) by LogicalServerName, AppName, database_id, bin(TIMESTAMP, time(10m)) | \",System.Array.init([\"count_\",\"any_SubscriptionId\",\"LogicalServerName\",\"AppName\",\"database_id\",\"TIMESTAMP\"],System.String));this.CheckProjectedAndExtendedProperties(\"Table1 | project-away X | summarize sum(Y) by bin(Z, 10min)|\",System.Array.init([\"sum_Y\",\"Z\"],System.String));this.CheckProjectedAndExtendedProperties(\"Table1 | project Field1, Field2, Field3 \\r\\n            | extend Duration=Field2 - Field3, Field4=xxxx \\r\\n            | join (Table2 | extend FieldA=1, FieldB=22 | project-away FieldB | filter X\",System.Array.init([\"FieldA\"],System.String));this.CheckProjectedAndExtendedProperties(\"Table1 | summarize count(X), dcount(Y) | project-away count_X |\",System.Array.init([\"dcount_Y\"],System.String));this.CheckProjectedAndExtendedProperties(\"Table1 | summarize any(X), any(Y) | project-away any_Y |\",System.Array.init([\"any_X\"],System.String));this.CheckProjectedAndExtendedProperties(\"| project Field1, Field2, Field3 \\r\\n            | extend Duration=Field2 - Field3, Field4=xxxx \\r\\n            | project-away Duration, Field4 | \",System.Array.init([\"Field1\",\"Field2\",\"Field3\"],System.String));this.CheckProjectedAndExtendedProperties(\"KustoLogs \\r\\n            | filter EventText like 'Gateway.ExecuteQuery'\\r\\n            | extend fake=1\\r\\n            | extend op=extract('Gateway.ExecuteQuery:.*(join|summarize|filter)', 1, EventText) \\r\\n            | extend is_Join=extract('Gateway.ExecuteQuery:.*(join)', 1, EventText) \\r\\n            | extend is_Filter=extract('Gateway.ExecuteQuery:.*(filter)', 1, EventText) \\r\\n            | project-away fake |\",System.Array.init([\"op\",\"is_Join\",\"is_Filter\"],System.String))},TestProjectedRenameEntities:function(){this.CheckProjectedAndExtendedProperties(\"Table1 \\r\\n| project X, Y, Z \\r\\n| project-rename A=X \\r\\n| \",System.Array.init([\"A\",\"Y\",\"Z\"],System.String));this.CheckProjectedAndExtendedProperties(\"Table1 \\r\\n| project X, Y, Z \\r\\n| project-rename B=Z, A=X \\r\\n| \",System.Array.init([\"A\",\"Y\",\"B\"],System.String))},TestPrintOperatorEntities:function(){this.CheckProjectedAndExtendedProperties(\"print Message = 'xyz' |\",System.Array.init([\"Message\"],System.String))},TestParseOperatorEntities:function(){this.CheckProjectedAndExtendedProperties(\"range x from 1 to 1 step 1\\r\\n                | extend str = ''string''\\r\\n                | parse str with * \\\"s\\\" substr * |\",System.Array.init([\"x\",\"str\",\"substr\"],System.String));this.CheckProjectedAndExtendedProperties(\"range x from 1 to 1 step 1\\r\\n                | extend str = ''string''\\r\\n                | parse str with * \\\"s\\\" substr 'abdc' substr2:string * |\",System.Array.init([\"x\",\"str\",\"substr\",\"substr2\"],System.String));this.CheckProjectedAndExtendedProperties(\"range x from 1 to 1 step 1\\r\\n                | extend str = ''string''\\r\\n                | parse str with * \\\"s\\\" substr 'abdc' substr2:string * num1:int |\",System.Array.init([\"x\",\"str\",\"substr\",\"substr2\",\"num1\"],System.String))},TestArgMinMaxEntities:function(){this.CheckProjectedAndExtendedProperties(\"Table1\\r\\n                | summarize argmin(c0, c1, c2) |\\r\\n                \",System.Array.init([\"min_c0\",\"min_c0_c1\",\"min_c0_c2\"],System.String));this.CheckProjectedAndExtendedProperties(\"Table1\\r\\n                | summarize argmin(c0+1d, c1/c2, c2+c3) |\\r\\n                \",System.Array.init([\"min_\",\"min__arg1\",\"min__arg2\"],System.String));this.CheckProjectedAndExtendedProperties(\"Table1\\r\\n                | summarize argmax(c0, c1, c2) by group1, group2 |\\r\\n                \",System.Array.init([\"max_c0\",\"max_c0_c1\",\"max_c0_c2\",\"group1\",\"group2\"],System.String));this.CheckProjectedAndExtendedProperties(\"Table1\\r\\n                | summarize argmax(c0+1d, c1/c2, c2+c3) |\\r\\n                \",System.Array.init([\"max_\",\"max__arg1\",\"max__arg2\"],System.String));this.CheckProjectedAndExtendedProperties(\"Table1\\r\\n                | project column1, column2, column3, xyz\\r\\n                | summarize argmin(column1, *) by column3, column2 |\\r\\n                \",System.Array.init([\"min_column1\",\"min_column1_xyz\",\"column3\",\"column2\"],System.String),System.Array.init([\"column1\",\"column2\",\"column3\",\"xyz\"],System.String));this.CheckProjectedAndExtendedProperties(\"Table1 \\r\\n                | project column1, column2, column3, xyz\\r\\n                | summarize argmin(column1, [*col*]) by column3 |\\r\\n                \",System.Array.init([\"min_column1\",\"min_column1_column2\",\"column3\"],System.String),System.Array.init([\"column1\",\"column2\",\"column3\",\"xyz\"],System.String));this.CheckProjectedAndExtendedProperties(\"Table1\\r\\n                | summarize arg_min(c0, c1, c2) |\\r\\n                \",System.Array.init([\"c0\",\"c1\",\"c2\"],System.String));this.CheckProjectedAndExtendedProperties(\"Table1\\r\\n                | summarize arg_min(c0+1d, c1/c2, c2+c3) |\\r\\n                \",System.Array.init([\"min_\",\"min__arg1\",\"min__arg2\"],System.String));this.CheckProjectedAndExtendedProperties(\"Table1\\r\\n                | summarize arg_min(c0+1d, c1/c2, c2) |\\r\\n                \",System.Array.init([\"min_\",\"min__arg1\",\"c2\"],System.String));this.CheckProjectedAndExtendedProperties(\"Table1\\r\\n                | summarize arg_max(c0, c1, c2) by group1, group2 |\\r\\n                \",System.Array.init([\"c0\",\"c1\",\"c2\",\"group1\",\"group2\"],System.String));this.CheckProjectedAndExtendedProperties(\"Table1\\r\\n                | summarize arg_max(c0+1d, c1/c2, c2+c3) |\\r\\n                \",System.Array.init([\"max_\",\"max__arg1\",\"max__arg2\"],System.String));this.CheckProjectedAndExtendedProperties(\"Table1\\r\\n                | summarize arg_max(c0, c1/c2, c2+c3, c2) |\\r\\n                \",System.Array.init([\"c0\",\"max_c0_arg1\",\"max_c0_arg2\",\"c2\"],System.String));this.CheckProjectedAndExtendedProperties(\"Table1\\r\\n                | project column1, column2, column3, xyz\\r\\n                | summarize arg_min(column1, *) by column3, column2 |\\r\\n                \",System.Array.init([\"column1\",\"xyz\",\"column3\",\"column2\"],System.String),System.Array.init([\"column1\",\"column2\",\"column3\",\"xyz\"],System.String));this.CheckProjectedAndExtendedProperties(\"Table1 \\r\\n                | project column1, column2, column3, xyz\\r\\n                | summarize arg_min(column1, [*col*]) by column3 |\\r\\n                \",System.Array.init([\"column1\",\"column2\",\"column3\"],System.String),System.Array.init([\"column1\",\"column2\",\"column3\",\"xyz\"],System.String))},TestSummarizeOperationsOverFunctions:function(){this.CheckProjectedAndExtendedProperties(\"range x from 1 to 1 step 1\\r\\n| extend y = x + 1, z = x + 2\\r\\n| summarize val1 = sum(x)/sum(z), sumOfY=sum(y), sumOfZ =sum(z) |\",System.Array.init([\"val1\",\"sumOfY\",\"sumOfZ\"],System.String));this.CheckProjectedAndExtendedProperties(\"Table1\\r\\n                | project column1, column2, column3, xyz\\r\\n                | summarize argmin(column1, *) by column3, column2 |\\r\\n                \",System.Array.init([\"min_column1\",\"min_column1_xyz\",\"column3\",\"column2\"],System.String),System.Array.init([\"column1\",\"column2\",\"column3\",\"xyz\"],System.String));this.CheckProjectedAndExtendedProperties(\"Table1\\r\\n                | summarize argmax(c0, c1, c2) by group1, group2 |\\r\\n                \",System.Array.init([\"max_c0\",\"max_c0_c1\",\"max_c0_c2\",\"group1\",\"group2\"],System.String));this.CheckProjectedAndExtendedProperties(\"KustoSources | project Source, Data | join (KustoLogs | summarize max(ActivityID) by Source, Timestamp ) on Source |\",System.Array.init([\"Source\",\"Data\",\"max_ActivityID\",\"Timestamp\"],System.String));this.CheckProjectedAndExtendedProperties(\"KustoSources | project Source, Data | join (KustoLogs | summarize max(strlen(ActivityID)) by Source, Timestamp ) on Source |\",System.Array.init([\"Source\",\"Data\",\"max_\",\"Timestamp\"],System.String));this.CheckProjectedAndExtendedProperties(\"Table1\\r\\n                | summarize argmin(c0, c1, c2) |\\r\\n                \",System.Array.init([\"min_c0\",\"min_c0_c1\",\"min_c0_c2\"],System.String));this.CheckProjectedAndExtendedProperties(\"Table1\\r\\n                | summarize argmin(strlen(c0), c1, c2) |\\r\\n                \",System.Array.init([\"min_\",\"min__c1\",\"min__c2\"],System.String));this.CheckProjectedAndExtendedProperties(\"Table1\\r\\n                | summarize argmax(strlen(c0), c1, c2) |\\r\\n                \",System.Array.init([\"max_\",\"max__c1\",\"max__c2\"],System.String))},IntelliSenseCommandEntitiesForTablesTest:function(){this.TestTableEntities(\"Table1\");this.TestTableEntities(\"['Table.2']\");this.TestTableEntities(\"database('db1').Table1\");this.TestTableEntities(\"database('db1').['Table.2']\");this.TestTableEntities(\"cluster('other').database('db2').Table1\");this.TestTableEntities(\"cluster('other').database('db2').['Table.2']\")},TestTableEntities:function(tableName){var tableContext=Kusto.UT.IntelliSenseRulesTests.s_intelliSenseProvider.AnalyzeCommand$1(tableName,null).Context;this.CheckQueryProperties(tableName,tableContext,Kusto.UT.IntelliSenseRulesTests.GetColumnsOfTable(tableName))},IntelliSenseCommandEntitiesForClusters:function(){this.CheckDatabases(\"cluster('other').database(\",System.Array.init([\"'db2'\"],System.String));this.CheckDatabases(\"find in (cluster('other').database(\",System.Array.init([\"'db2'\"],System.String));this.CheckDatabases(\"find in (cluster('other').database('db2').Table1, cluster('other').database(\",System.Array.init([\"'db2'\"],System.String));this.CheckDatabases(\"#connect cluster('other').database(\",System.Array.init([\"'db2'\"],System.String))},IntelliSenseCommandEntitiesForGetSchemaOperator:function(){var expected=System.Array.init([\"ColumnName\",\"ColumnOrdinal\",\"DataType\",\"ColumnType\"],System.String);this.CheckProjectedAndExtendedProperties(\"Table1 | summarize count() by Source | getschema | project \",expected);this.CheckProjectedAndExtendedProperties(\"Table1 | union (Table2) | getschema | sort by \",expected);this.CheckProjectedAndExtendedProperties(\"Table1 | join (Table2) on ActivityId | getschema | project \",expected)},CheckDatabases:function(command,expectedFields){var $t,tableContext=this.GetQueryContext(command),rule={},existingFields;Kusto.UT.IntelliSenseRulesTests.s_intelliSenseProvider.TryMatchSpecificRule(command,tableContext,Kusto.Data.IntelliSense.RuleKind.YieldDatabaseNamesOptions,rule)||Kusto.UT.IntelliSenseRulesTests.Assert.Fail(System.String.format(\"Couldn't derive 'databases' rule for the query '{0}'\",[command]));existingFields=($t=System.String,System.Linq.Enumerable.from(rule.v.GetOptions(tableContext),$t).toList($t));Kusto.UT.IntelliSenseRulesTests.ValidateEntities(command,expectedFields,existingFields)},IntelliSenseCommandEntitiesUsingFunctionsTest:function(){this.CheckProjectedAndExtendedProperties(\"func6 | \",System.Array.init([\"NumField1\",\"NumField3\"],System.String));this.CheckProjectedAndExtendedProperties(\"func4 | \",System.Array.init([\"NumField1\",\"NumField3\"],System.String));this.CheckProjectedAndExtendedProperties(\"func2 | \",System.Array.init([\"NumField1\"],System.String));this.CheckProjectedAndExtendedProperties(\"func1 | \",System.Array.init([\"NumField1\"],System.String));this.CheckProjectedAndExtendedProperties(\"func3 | extend y = 111 | \",System.Array.init([\"count_\",\"NumField2\",\"y\"],System.String))},IntelliSenseEntityParserTest:function(){var command='argmax(PreciseTimeStamp, IsHealthy), max(iff(IsHealthy == 1, PreciseTimeStamp, datetime(\"2000-01\")))',entities=System.Array.init([\"argmax:PreciseTimeStamp\",'max:iff(IsHealthy == 1, PreciseTimeStamp, datetime(\"2000-01\"))'],System.String),resolvedEntities=Kusto.Data.IntelliSense.ExpressionEntityParser.ParseEntities(command),result=System.Linq.Enumerable.from(resolvedEntities,Kusto.Data.IntelliSense.ExpressionEntity).select($asm.$.Kusto.UT.IntelliSenseRulesTests.f2).toList(System.String);Kusto.UT.IntelliSenseRulesTests.ValidateEntities(command,entities,result);var command1=\"(Timestamp, EventText)= argmin(Timestamp, EventText), RootActivityId\",entities1=System.Array.init([\":Timestamp\",\":EventText\",\":RootActivityId\"],System.String),resolvedEntities1=Kusto.Data.IntelliSense.ExpressionEntityParser.ParseEntities(command1),result1=System.Linq.Enumerable.from(resolvedEntities1,Kusto.Data.IntelliSense.ExpressionEntity).select($asm.$.Kusto.UT.IntelliSenseRulesTests.f2).toList(System.String);Kusto.UT.IntelliSenseRulesTests.ValidateEntities(command1,entities1,result1);var command2=\"makeset(ReportIndex), makeset(AlertId), File_Sha256)\",entities2=System.Array.init([\"makeset:ReportIndex\",\"makeset:AlertId\",\":File_Sha256\"],System.String),resolvedEntities2=Kusto.Data.IntelliSense.ExpressionEntityParser.ParseEntities(command2),result2=System.Linq.Enumerable.from(resolvedEntities2,Kusto.Data.IntelliSense.ExpressionEntity).select($asm.$.Kusto.UT.IntelliSenseRulesTests.f2).toList(System.String);Kusto.UT.IntelliSenseRulesTests.ValidateEntities(command2,entities2,result2)},GetQueryContext:function(command){return Kusto.UT.IntelliSenseRulesTests.s_intelliSenseProvider.AnalyzeCommand$1(command,null).Context},CheckQueryProperties:function(command,tableContext,expectedFields){var $t,rule={},existingFields;Kusto.UT.IntelliSenseRulesTests.s_intelliSenseProvider.TryMatchSpecificRule(command,tableContext,Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForFilterInFind,rule)||Kusto.UT.IntelliSenseRulesTests.s_intelliSenseProvider.TryMatchSpecificRule((command||\"\")+\" project \",tableContext,Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForProjectInFind,rule)||Kusto.UT.IntelliSenseRulesTests.s_intelliSenseProvider.TryMatchSpecificRule((command||\"\")+\" | project \",tableContext,Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForProject,rule)||Kusto.UT.IntelliSenseRulesTests.Assert.Fail(System.String.format(\"Couldn't derive 'find .. where', 'find .. where .. project' and 'project' rules for the query '{0}'\",[command]));existingFields=($t=System.String,System.Linq.Enumerable.from(rule.v.GetOptions(tableContext),$t).toList($t));Kusto.UT.IntelliSenseRulesTests.ValidateEntities(command,expectedFields,existingFields)},CheckProjectedAndExtendedProperties:function(command,expectedFields,existingFields){var $t,flatten,analyzedCommand;existingFields===void 0&&(existingFields=null);$t=Bridge.getEnumerator(System.Array.init([!0,!1],System.Boolean));try{while($t.moveNext()){flatten=$t.Current;System.String.contains(command,\"//\")||(command=flatten?System.String.replaceAll(System.String.replaceAll(command,String.fromCharCode(13),String.fromCharCode(32)),String.fromCharCode(10),String.fromCharCode(32)):System.String.replaceAll(System.String.replaceAll(command,String.fromCharCode(13),String.fromCharCode(32)),String.fromCharCode(10),String.fromCharCode(32)));existingFields==null&&(analyzedCommand=Kusto.UT.IntelliSenseRulesTests.s_intelliSenseProvider.AnalyzeCommand$1(command,null),existingFields=Kusto.UT.IntelliSenseRulesTests.GetColumnsOfTable(analyzedCommand.Context.Context));var entititesList=new(System.Collections.Generic.List$1(System.String).ctor),finalEntitiesList=new(System.Collections.Generic.List$1(System.String).ctor),entitiesResolveResult=Kusto.UT.IntelliSenseRulesTests.s_intelliSenseProvider.ResolveEntitiesFromCommand(command,entititesList,existingFields);switch(entitiesResolveResult){case Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.ResolveResult.ReplaceEntities:finalEntitiesList.AddRange(entititesList);break;case Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.ResolveResult.None:existingFields!=null&&finalEntitiesList.AddRange(existingFields);break;case Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.ResolveResult.AppendEntities:existingFields!=null&&finalEntitiesList.AddRange(existingFields);finalEntitiesList.AddRange(entititesList);break}Kusto.UT.IntelliSenseRulesTests.ValidateEntities(command,expectedFields,finalEntitiesList)}}finally{Bridge.is($t,System.IDisposable)&&$t.System$IDisposable$Dispose()}},TestEntitiesForFindFilterAndProjection:function(command,columns,isAdditionalColumns){columns===void 0&&(columns=null);isAdditionalColumns===void 0&&(isAdditionalColumns=!1);var tableContext=this.GetQueryContext(command);this.CheckQueryProperties(command,tableContext,isAdditionalColumns?columns==null?Kusto.UT.IntelliSenseRulesTests.GetColumnsOfTable(tableContext.Context):System.Linq.Enumerable.from(Kusto.UT.IntelliSenseRulesTests.GetColumnsOfTable(tableContext.Context),System.String).concat(columns).ToArray(System.String):columns)},IntelliSenseFilterTest:function(){this.TestFilter(\"filter\",\"like\");this.TestFilter(\"filter\",\"contains\");this.TestFilter(\"filter\",\"notcontains\");this.TestFilter(\"where\",\"like\");this.TestFilter(\"where\",\"contains\");this.TestFilter(\"where\",\"notcontains\");this.TestFilter(\"where\",\"==\");this.TestFilter(\"where\",\"!=\")},TestFilter:function(filterKeyword,containsKeyword){var testPatterns=new(System.Collections.Generic.List$1(Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern).ctor);testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(Kusto.Cloud.Platform.Utils.ExtendedString.FormatWithInvariantCulture(\"Table1 | {0}\",[filterKeyword,containsKeyword]),Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(Kusto.Cloud.Platform.Utils.ExtendedString.FormatWithInvariantCulture(\"Table1 | {0} \",[filterKeyword,containsKeyword]),Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForFilter));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(Kusto.Cloud.Platform.Utils.ExtendedString.FormatWithInvariantCulture(\"Table1 | {0}    \",[filterKeyword,containsKeyword]),Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForFilter));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(Kusto.Cloud.Platform.Utils.ExtendedString.FormatWithInvariantCulture(\"Table1 | {0} Field1\",[filterKeyword,containsKeyword]),Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(Kusto.Cloud.Platform.Utils.ExtendedString.FormatWithInvariantCulture(\"Table1 | {0} Field1 \",[filterKeyword,containsKeyword]),Kusto.Data.IntelliSense.RuleKind.YieldStringComparisonOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(Kusto.Cloud.Platform.Utils.ExtendedString.FormatWithInvariantCulture(\"Table1 | {0} FieldX \",[filterKeyword,containsKeyword]),Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(Kusto.Cloud.Platform.Utils.ExtendedString.FormatWithInvariantCulture(\"Table1 | {0} Field1 {1}\",[filterKeyword,containsKeyword]),Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(Kusto.Cloud.Platform.Utils.ExtendedString.FormatWithInvariantCulture(\"Table1 | {0} Field1 {1} \",[filterKeyword,containsKeyword]),Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(Kusto.Cloud.Platform.Utils.ExtendedString.FormatWithInvariantCulture(\"Table1 | {0} Field1 {1} 'xxx' and \",[filterKeyword,containsKeyword]),Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForFilter));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(Kusto.Cloud.Platform.Utils.ExtendedString.FormatWithInvariantCulture(\"Table1 | {0} Field1 {1} 'xxx' and Field2 \",[filterKeyword,containsKeyword]),Kusto.Data.IntelliSense.RuleKind.YieldStringComparisonOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(Kusto.Cloud.Platform.Utils.ExtendedString.FormatWithInvariantCulture(\"Table1 | {0} Field1 {1} 'xxx' or \",[filterKeyword,containsKeyword]),Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForFilter));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(Kusto.Cloud.Platform.Utils.ExtendedString.FormatWithInvariantCulture(\"Table1 | {0} Field1 {1} 'xxx' or Field2 \",[filterKeyword,containsKeyword]),Kusto.Data.IntelliSense.RuleKind.YieldStringComparisonOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(Kusto.Cloud.Platform.Utils.ExtendedString.FormatWithInvariantCulture(\"Table1 | {0} Field1 {1} 'xxx' |\",[filterKeyword,containsKeyword]),Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(Kusto.Cloud.Platform.Utils.ExtendedString.FormatWithInvariantCulture(\"Table1 | {0} Field1 {1} 'xxx' | \",[filterKeyword,containsKeyword]),Kusto.Data.IntelliSense.RuleKind.YieldOperatorsAfterPipe));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(Kusto.Cloud.Platform.Utils.ExtendedString.FormatWithInvariantCulture(\"Table1 | {0} NumField1\",[filterKeyword]),Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(Kusto.Cloud.Platform.Utils.ExtendedString.FormatWithInvariantCulture(\"Table1 | {0} NumField1 \",[filterKeyword]),Kusto.Data.IntelliSense.RuleKind.YieldNumericComparisonOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(Kusto.Cloud.Platform.Utils.ExtendedString.FormatWithInvariantCulture(\"Table1 | {0} NumField1 ==\",[filterKeyword]),Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(Kusto.Cloud.Platform.Utils.ExtendedString.FormatWithInvariantCulture(\"Table1 | {0} NumField1 == 10 and \",[filterKeyword]),Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForFilter));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(Kusto.Cloud.Platform.Utils.ExtendedString.FormatWithInvariantCulture(\"Table1 | {0} NumField1 == 10 and NumField1 \",[filterKeyword]),Kusto.Data.IntelliSense.RuleKind.YieldNumericComparisonOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(Kusto.Cloud.Platform.Utils.ExtendedString.FormatWithInvariantCulture(\"Table1 | {0} NumField1 == 10 or \",[filterKeyword]),Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForFilter));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(Kusto.Cloud.Platform.Utils.ExtendedString.FormatWithInvariantCulture(\"Table1 | {0} NumField1 == 10 or NumField1 \",[filterKeyword]),Kusto.Data.IntelliSense.RuleKind.YieldNumericComparisonOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(Kusto.Cloud.Platform.Utils.ExtendedString.FormatWithInvariantCulture(\"Table1 | xxx Field1, Field2 | {0} \",[filterKeyword]),Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForFilter));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(Kusto.Cloud.Platform.Utils.ExtendedString.FormatWithInvariantCulture(\"Table1 | xxx Field1, Field2 {0} \",[filterKeyword]),Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(Kusto.Cloud.Platform.Utils.ExtendedString.FormatWithInvariantCulture(\"Table1 | {0} Field1\\r\\n    {1}               \\r\\n    'dddd'  \",[filterKeyword,containsKeyword]),Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(Kusto.Cloud.Platform.Utils.ExtendedString.FormatWithInvariantCulture(\"Table1 | filter {0}\\r\\n    {1}               \\r\\n    'dddd'  \\r\\n    \",[filterKeyword,containsKeyword]),Kusto.Data.IntelliSense.RuleKind.None));Kusto.UT.IntelliSenseRulesTests.TestIntelliSensePatterns(Kusto.UT.IntelliSenseRulesTests.s_intelliSenseProvider,testPatterns)},IntelliSenseRangeTest:function(){var testPatterns=new(System.Collections.Generic.List$1(Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern).ctor);testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"range\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"range ziv\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"range ziv \",Kusto.Data.IntelliSense.RuleKind.YieldRangeFromOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"range ziv from\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"range ziv from \",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"range ziv from datetime(\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"range ziv from datetime(2012-01-01)\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"range ziv from datetime(2012-01-01) \",Kusto.Data.IntelliSense.RuleKind.YieldRangeFromToOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"range ziv from datetime(2012-01-01) to\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"range ziv from datetime(2012-01-01) to \",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"range ziv from datetime(2012-01-01) to datetime(2013-01-01)\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"range ziv from datetime(2012-01-01) to datetime(2013-01-01) \",Kusto.Data.IntelliSense.RuleKind.YieldRangeFromToStepOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"range ziv from datetime(2012-01-01) to datetime(2013-01-01) st\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"range ziv from datetime(2012-01-01) to datetime(2013-01-01) step 123\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"range ziv from datetime(2012-01-01) to datetime(2013-01-01) step 123 \",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"range ziv from 123.4\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"range ziv from 123.4 \",Kusto.Data.IntelliSense.RuleKind.YieldRangeFromToOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"range ziv from 123.4 to\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"range ziv from 123.4 to \",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"range ziv from 123.4 to 456\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"range ziv from 123.4 to 456 \",Kusto.Data.IntelliSense.RuleKind.YieldRangeFromToStepOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"range ziv from 123.4 to 456 st\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"range ziv from 123.4 to 456 step 123\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"range ziv from 123.4 to 456 step 123 \",Kusto.Data.IntelliSense.RuleKind.None));Kusto.UT.IntelliSenseRulesTests.TestIntelliSensePatterns(Kusto.UT.IntelliSenseRulesTests.s_intelliSenseProvider,testPatterns)},IntelliSenseDatabaseTest:function(){var testPatterns=new(System.Collections.Generic.List$1(Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern).ctor);testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"database\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"database(\",Kusto.Data.IntelliSense.RuleKind.YieldDatabaseNamesOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\" database(\",Kusto.Data.IntelliSense.RuleKind.YieldDatabaseNamesOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"database('xyz').\",Kusto.Data.IntelliSense.RuleKind.YieldTableNamesForRemoteQueryOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"cluster('foo').database\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"cluster('foo').database(\",Kusto.Data.IntelliSense.RuleKind.YieldDatabaseNamesOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"cluster('foo').database('xyz').\",Kusto.Data.IntelliSense.RuleKind.YieldTableNamesForRemoteQueryOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"cluster('foo').database('xyz').xx\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"find in (database(\",Kusto.Data.IntelliSense.RuleKind.YieldDatabaseNamesOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"find in (cluster('foo').database(\",Kusto.Data.IntelliSense.RuleKind.YieldDatabaseNamesOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"find in (cluster('foo').database('db1').Table1, database(\",Kusto.Data.IntelliSense.RuleKind.YieldDatabaseNamesOptions));Kusto.UT.IntelliSenseRulesTests.TestIntelliSensePatterns(Kusto.UT.IntelliSenseRulesTests.s_intelliSenseProvider,testPatterns)},IntelliSenseClusterTest:function(){var testPatterns=new(System.Collections.Generic.List$1(Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern).ctor);testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"cluster\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"cluster(\",Kusto.Data.IntelliSense.RuleKind.YieldClusterNamesOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\" cluster(\",Kusto.Data.IntelliSense.RuleKind.YieldClusterNamesOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"cluster('foo').cluster\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"cluster('foo').cluster(\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"cluster('foo').database('some')\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"cluster('foo').\",Kusto.Data.IntelliSense.RuleKind.YieldDatabaseFunctionOption));Kusto.UT.IntelliSenseRulesTests.TestIntelliSensePatterns(Kusto.UT.IntelliSenseRulesTests.s_intelliSenseProvider,testPatterns)},IntelliSenseSummarizeTest:function(){var testPatterns=new(System.Collections.Generic.List$1(Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern).ctor);testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | summarize\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | summarize \",Kusto.Data.IntelliSense.RuleKind.YieldSummarizeOperatorOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | summarize res\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | summarize res=\",Kusto.Data.IntelliSense.RuleKind.YieldSummarizeOperatorOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | summarize res =\",Kusto.Data.IntelliSense.RuleKind.YieldSummarizeOperatorOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | summarize res= \",Kusto.Data.IntelliSense.RuleKind.YieldSummarizeOperatorOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | summarize res=count(\",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesAndFunctionsForExtend));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | summarize count(\",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesAndFunctionsForExtend));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | summarize countif(\",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesAndFunctionsForExtend));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | summarize dcount(\",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesAndFunctionsForExtend));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | summarize dcountif(\",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesAndFunctionsForExtend));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | summarize max(\",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesAndFunctionsForExtend));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | summarize min(\",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesAndFunctionsForExtend));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | summarize avg(\",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesAndFunctionsForExtend));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | summarize stdev(\",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesAndFunctionsForExtend));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | summarize variance(\",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesAndFunctionsForExtend));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | summarize sum(\",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesAndFunctionsForExtend));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | summarize sum( \",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesAndFunctionsForExtend));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | summarize sumif(\",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForTwoParamFunctions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | summarize sum(Filed1)\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | summarize sum(Filed1) \",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | summarize sum(Filed1)+\",Kusto.Data.IntelliSense.RuleKind.YieldSummarizeOperatorOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | summarize sum(Filed1) +\",Kusto.Data.IntelliSense.RuleKind.YieldSummarizeOperatorOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | summarize sum(Filed1) + \",Kusto.Data.IntelliSense.RuleKind.YieldSummarizeOperatorOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | summarize sum(Filed1) / \",Kusto.Data.IntelliSense.RuleKind.YieldSummarizeOperatorOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | summarize sum(Filed1) - \",Kusto.Data.IntelliSense.RuleKind.YieldSummarizeOperatorOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | summarize sum(Filed1) * \",Kusto.Data.IntelliSense.RuleKind.YieldSummarizeOperatorOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | summarize sum(Filed1)+count(\",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesAndFunctionsForExtend));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | summarize sum(Filed1)+max(\",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesAndFunctionsForExtend));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | summarize sum(Filed1)+min(\",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesAndFunctionsForExtend));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | summarize sum(Filed1)+avg(\",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesAndFunctionsForExtend));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | summarize sum(Filed1)+any(\",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesAndFunctionsForExtend));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | summarize sum(Filed1)+sum(\",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesAndFunctionsForExtend));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | summarize sum(Filed1)+sum( \",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesAndFunctionsForExtend));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | summarize sum(Filed1)+sum(Filed1)\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | summarize sum(Filed1)+sum(Filed1) \",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | summarize sum(Filed1) \",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | summarize sum(Filed1), \",Kusto.Data.IntelliSense.RuleKind.YieldSummarizeOperatorOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | summarize sum(Filed1), count(\",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesAndFunctionsForExtend));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | summarize sum(Filed1), count(Filed2)\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | summarize sum(Filed1), count(Filed2) \",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | summarize sum(Filed1)+\",Kusto.Data.IntelliSense.RuleKind.YieldSummarizeOperatorOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | summarize sum(Filed1) +\",Kusto.Data.IntelliSense.RuleKind.YieldSummarizeOperatorOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | summarize sum(Filed1) + \",Kusto.Data.IntelliSense.RuleKind.YieldSummarizeOperatorOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | summarize sum(Filed1) / \",Kusto.Data.IntelliSense.RuleKind.YieldSummarizeOperatorOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | summarize sum(Filed1) - \",Kusto.Data.IntelliSense.RuleKind.YieldSummarizeOperatorOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | summarize sum(Filed1) * \",Kusto.Data.IntelliSense.RuleKind.YieldSummarizeOperatorOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | summarize sum(Filed1) - \",Kusto.Data.IntelliSense.RuleKind.YieldSummarizeOperatorOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | summarize sum(Filed1) \",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | summarize sum(Filed1), \",Kusto.Data.IntelliSense.RuleKind.YieldSummarizeOperatorOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | summarize sum(Filed1), count(\",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesAndFunctionsForExtend));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | summarize sum(Filed1), count(Filed2)\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | summarize sum(Filed1), count(Filed2) \",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | summarize sum(Filed1), count(Filed2) by\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | summarize sum(Filed1), count(Filed2) by \",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesAndFunctionsForExtend));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | summarize sum(Filed1), count(Filed2) by Field1\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | summarize sum(Filed1), count(Filed2) by Field1 \",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | summarize sum(Filed1), count(Filed2) by Field1 ,\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | summarize sum(Filed1), count(Filed2) by Field1 , \",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesAndFunctionsForExtend));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | summarize sum(Filed1), count(Filed2) by Field1, \",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesAndFunctionsForExtend));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | summarize sum(Filed1), count(Filed2) by Field1, Filed2\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | summarize sum(Filed1), count(Filed2) by Field1, Filed2 \",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | summarize sum(Filed1), count(Filed2) by Field1, Filed2, \",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesAndFunctionsForExtend));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | summarize sum(Filed1), count(Filed2) by Field1, Filed2 | count by \",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | summarize sum(Filed1), count(Filed2) by Field1, Filed2 | summarize by \",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesAndFunctionsForExtend));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | summarize sum(Filed1), count(Filed2) by Field1, Filed2 | summarize by Feild1\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | summarize sum(Filed1), count(Filed2) by Field1, Filed2 | summarize by Feild1,\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | summarize sum(Filed1), count(Filed2) by Field1, Filed2 | summarize by Feild1, \",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesAndFunctionsForExtend));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | summarize sum(Filed1), count(Filed2) by Field1, Filed2 | summarize by iff(1==0, Feild1, Field2),\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | summarize sum(Filed1), count(Filed2) by Field1, Filed2 | summarize by iff(1==0, Feild1, Field2), \",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesAndFunctionsForExtend));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | summarize sum(Filed1), count(Filed2) by Field1, Filed2 | summarize count() by bin(\",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForTwoParamFunctions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | summarize sum(Filed1), count(Filed2) by Field1, Filed2 | summarize count() by bin( \",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForTwoParamFunctions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | summarize sum(Filed1), count(Filed2) by Field1, Filed2 | summarize count() by bin(Field1,\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | summarize sum(Filed1), count(Filed2) by Field1, Filed2 | summarize count() by bin(Field1, \",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | summarize sum(Filed1), count(Filed2) by Field1, Filed2 | summarize count() by bin(Field1, 1), \",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesAndFunctionsForExtend));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | summarize percentile(\",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForTwoParamFunctions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | summarize percentile(Field1,\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | summarize percentiles(\",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForManyParamFunctions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | summarize percentiles(Field1,\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | summarize percentilew(\",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForThreeParamFunctions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | summarize percentilew(Field1,\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | summarize percentilesw(\",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForManyParamFunctions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | summarize percentilesw(Field1,\",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForManyParamFunctions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | summarize arg_min(\",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForManyParamFunctions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | summarize arg_max(\",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForManyParamFunctions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | summarize arg_min(Field1,\",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForManyParamFunctions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | summarize arg_max(Field1,\",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForManyParamFunctions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | xxx Field1, Field2 | summarize \",Kusto.Data.IntelliSense.RuleKind.YieldSummarizeOperatorOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | xxx Field1, Field2 summarize \",Kusto.Data.IntelliSense.RuleKind.None));Kusto.UT.IntelliSenseRulesTests.TestIntelliSensePatterns(Kusto.UT.IntelliSenseRulesTests.s_intelliSenseProvider,testPatterns)},IntelliSenseMakeSeriesTest:function(){var testPatterns=new(System.Collections.Generic.List$1(Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern).ctor);testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | make-series\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | make-series \",Kusto.Data.IntelliSense.RuleKind.YieldMakeSeriesOperatorOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | make-series res\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | make-series res=\",Kusto.Data.IntelliSense.RuleKind.YieldMakeSeriesOperatorOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | make-series res =\",Kusto.Data.IntelliSense.RuleKind.YieldMakeSeriesOperatorOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | make-series res= \",Kusto.Data.IntelliSense.RuleKind.YieldMakeSeriesOperatorOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | make-series 100*\",Kusto.Data.IntelliSense.RuleKind.YieldMakeSeriesOperatorOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | make-series x= 100*\",Kusto.Data.IntelliSense.RuleKind.YieldMakeSeriesOperatorOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | make-series res=count(\",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesAndFunctionsForExtend));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | make-series count(\",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesAndFunctionsForExtend));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | make-series countif(\",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesAndFunctionsForExtend));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | make-series dcount(\",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesAndFunctionsForExtend));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | make-series dcountif(\",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesAndFunctionsForExtend));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | make-series max(\",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesAndFunctionsForExtend));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | make-series min(\",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesAndFunctionsForExtend));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | make-series avg(\",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesAndFunctionsForExtend));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | make-series stdev(\",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesAndFunctionsForExtend));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | make-series variance(\",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesAndFunctionsForExtend));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | make-series sum(\",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesAndFunctionsForExtend));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | make-series sum( \",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesAndFunctionsForExtend));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | make-series sumif(\",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForTwoParamFunctions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | make-series sum(Filed1)\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | make-series sum(Filed1) \",Kusto.Data.IntelliSense.RuleKind.YieldMakeSeriesOperatorForDefaultOrOn));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | make-series x=sum(Filed1) \",Kusto.Data.IntelliSense.RuleKind.YieldMakeSeriesOperatorForDefaultOrOn));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | make-series x = sum(Filed1) \",Kusto.Data.IntelliSense.RuleKind.YieldMakeSeriesOperatorForDefaultOrOn));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | make-series x=100*sum(Filed1) \",Kusto.Data.IntelliSense.RuleKind.YieldMakeSeriesOperatorForDefaultOrOn));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | make-series x= sum(Filed1) \",Kusto.Data.IntelliSense.RuleKind.YieldMakeSeriesOperatorForDefaultOrOn));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | make-series x=sum(Filed1), avg(field2) \",Kusto.Data.IntelliSense.RuleKind.YieldMakeSeriesOperatorForDefaultOrOn));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | make-series sum(Filed1), x=avg(field2) \",Kusto.Data.IntelliSense.RuleKind.YieldMakeSeriesOperatorForDefaultOrOn));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | make-series sum(Filed1), avg(field2) \",Kusto.Data.IntelliSense.RuleKind.YieldMakeSeriesOperatorForDefaultOrOn));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | make-series x= sum(Filed1)\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | make-series x=sum(Filed1), avg(field2)\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | make-series sum(Filed1) default=10 \",Kusto.Data.IntelliSense.RuleKind.YieldMakeSeriesOperatorForOn));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | make-series x=sum(Filed1) default=10 \",Kusto.Data.IntelliSense.RuleKind.YieldMakeSeriesOperatorForOn));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | make-series x = sum(Filed1) default=10 \",Kusto.Data.IntelliSense.RuleKind.YieldMakeSeriesOperatorForOn));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | make-series x = sum(Filed1) default=10,y=sum(field2) default=10 \",Kusto.Data.IntelliSense.RuleKind.YieldMakeSeriesOperatorForOn));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | make-series x = sum(Filed1), y=sum(field2) default=10 \",Kusto.Data.IntelliSense.RuleKind.YieldMakeSeriesOperatorForOn));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | make-series x = sum(Filed1) default=10,y=sum(field2) default=10\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | make-series sum(Filed1) default=10\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | make-series x=sum(Filed1) default=\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | make-series x=sum(Filed1) default= \",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | make-series sum(Filed1) default=0 on \",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForMakeSeries));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | make-series sum(Filed1) on \",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForMakeSeries));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | make-series x=sum(Filed1) default=0, y=count() on \",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForMakeSeries));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | make-series x=sum(Filed1) default=0, y=count() default=0 on \",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForMakeSeries));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | make-series sum(Filed1) default=0 on\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | make-series x=sum(Filed1) default= 0 on timestamp \",Kusto.Data.IntelliSense.RuleKind.YieldMakeSeriesOperatorForRange));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | make-series x= sum(Filed1) default=0 on timestamp \",Kusto.Data.IntelliSense.RuleKind.YieldMakeSeriesOperatorForRange));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | make-series x= sum(Filed1) on timestamp \",Kusto.Data.IntelliSense.RuleKind.YieldMakeSeriesOperatorForRange));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | make-series x= sum(Filed1),y=avg(duration) default=0 on timestamp \",Kusto.Data.IntelliSense.RuleKind.YieldMakeSeriesOperatorForRange));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | make-series sum(Filed1),y=avg(duration) default=0 on timestamp \",Kusto.Data.IntelliSense.RuleKind.YieldMakeSeriesOperatorForRange));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | make-series sum(Filed1) default=0, y=count() on timestamp \",Kusto.Data.IntelliSense.RuleKind.YieldMakeSeriesOperatorForRange));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | make-series sum(Filed1) default=0 on timestamp \",Kusto.Data.IntelliSense.RuleKind.YieldMakeSeriesOperatorForRange));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | make-series x=sum(Filed1) default=0 on timestamp\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | make-series sum(Filed1) default=0 on timestamp in range(\",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForThreeParamFunctions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | make-series sum(Filed1) on timestamp in range(\",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForThreeParamFunctions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | make-series x=sum(Filed1) on timestamp in range(\",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForThreeParamFunctions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | make-series sum(Filed1) default=0 on timestamp in range(ago(1d), now(),1h) \",Kusto.Data.IntelliSense.RuleKind.YieldMakeSeriesOperatorForBy));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | make-series sum(Filed1) on timestamp in range(ago(1d), now(),1h) \",Kusto.Data.IntelliSense.RuleKind.YieldMakeSeriesOperatorForBy));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | make-series x=sum(Filed1) on timestamp in range(ago(1d), now(),1h) \",Kusto.Data.IntelliSense.RuleKind.YieldMakeSeriesOperatorForBy));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | make-series x=sum(Filed1) on timestamp in range(ago(1d), now(),1h)\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | make-series sum(Filed1) default=0 on timestamp in range(ago(1d), now(),1h) by \",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForMakeSeries));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | make-series sum(Filed1) default=0 on timestamp in range(ago(1d), now(),1h) by field1, \",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForMakeSeries));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | make-series sum(Filed1) default=0 on timestamp in range(ago(1d), now(),1h) by \",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForMakeSeries));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | make-series sum(Filed1) default=0, y=count() on timestamp in range(ago(1d), now(),1h) by \",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForMakeSeries));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | make-series sum(Filed1), y=count() default=0 on timestamp in range(ago(1d), now(),1h) by field1, \",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForMakeSeries));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | make-series sum(Filed1) default=0 on timestamp in range(ago(1d), now(),1h) by\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | make-series sum(Filed1) default=0 on timestamp in range(ago(1d), now(),1h) by field1,\",Kusto.Data.IntelliSense.RuleKind.None));Kusto.UT.IntelliSenseRulesTests.TestIntelliSensePatterns(Kusto.UT.IntelliSenseRulesTests.s_intelliSenseProvider,testPatterns)},IntelliSenseDistinctTest:function(){var testPatterns=new(System.Collections.Generic.List$1(Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern).ctor);testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | distinct\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | distinct \",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesAndFunctionsForExtend));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | distinct Field1\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | distinct Field1 \",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | distinct Field1 ,\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | distinct Field1, \",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesAndFunctionsForExtend));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | distinct Field1 , \",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesAndFunctionsForExtend));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | distinct Field1, Field2\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | distinct Field1, Field2 \",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | distinct Field1, Field2, \",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesAndFunctionsForExtend));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | distinct Field1, Field2 \",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | distinct sum(\",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesAndFunctionsForExtend));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | distinct sum(Filed1), count(Field2)\",Kusto.Data.IntelliSense.RuleKind.None));Kusto.UT.IntelliSenseRulesTests.TestIntelliSensePatterns(Kusto.UT.IntelliSenseRulesTests.s_intelliSenseProvider,testPatterns)},IntelliSenseTopNestedTest:function(){var testPatterns=new(System.Collections.Generic.List$1(Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern).ctor);testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | top-nested\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | top-nested \",Kusto.Data.IntelliSense.RuleKind.YieldNumericScalarOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | top-nested 1\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | top-nested 1 \",Kusto.Data.IntelliSense.RuleKind.YieldTopNestedOfKeywordOption));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | top-nested 1 of\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | top-nested 1 of \",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForOrdering));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | top-nested 1 of A\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | top-nested 1 of A \",Kusto.Data.IntelliSense.RuleKind.YieldTopNestedOthersOption));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | top-nested 1 of A by\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | top-nested 1 of A by \",Kusto.Data.IntelliSense.RuleKind.YieldSummarizeOperatorOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | top-nested 1 of A by 1\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | top-nested 1 of A by 1 + \",Kusto.Data.IntelliSense.RuleKind.YieldSummarizeOperatorOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | top-nested 1 of A by 1+ \",Kusto.Data.IntelliSense.RuleKind.YieldSummarizeOperatorOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | top-nested 1 of A by 1+\",Kusto.Data.IntelliSense.RuleKind.YieldSummarizeOperatorOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | top-nested 1 of A by 1 * \",Kusto.Data.IntelliSense.RuleKind.YieldSummarizeOperatorOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | top-nested 1 of A by 1 - \",Kusto.Data.IntelliSense.RuleKind.YieldSummarizeOperatorOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | top-nested 1 of A by avg(A)\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | top-nested 1 of A by avg(A) \",Kusto.Data.IntelliSense.RuleKind.YieldAscendingDescendingOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | top-nested 1 of A by avg(\",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesAndFunctionsForExtend));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | top-nested 1 of A by avg(A), \",Kusto.Data.IntelliSense.RuleKind.YieldTopNestedKeywordOption));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | top-nested 1 of A by avg(A), top-nested\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | top-nested 1 of A by avg(A), top-nested \",Kusto.Data.IntelliSense.RuleKind.YieldNumericScalarOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | top-nested 1 of A by avg(A), top-nested 1\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | top-nested 1 of A by avg(A), top-nested 1 \",Kusto.Data.IntelliSense.RuleKind.YieldTopNestedOfKeywordOption));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | top-nested 1 of A by avg(A) asc, top-nested 1 of\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | top-nested 1 of A by avg(A), top-nested 1 of \",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForOrdering));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | top-nested 1 of A by avg(A) desc, top-nested 1 of A\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | top-nested 1 of A by avg(A), top-nested 1 of A \",Kusto.Data.IntelliSense.RuleKind.YieldTopNestedOthersOption));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | top-nested 1 of A by avg(A), top-nested 1 of A by\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | top-nested 1 of A by avg(A), top-nested 1 of A by \",Kusto.Data.IntelliSense.RuleKind.YieldSummarizeOperatorOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | top-nested 1 of bin(\",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForTwoParamFunctions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | top-nested 1 of bin(A,1m)\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | top-nested 1 of bin(A,1m) \",Kusto.Data.IntelliSense.RuleKind.YieldByKeywordOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | top-nested 1 of bin(A,1m) by\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | top-nested 1 of bin(A,1m) by \",Kusto.Data.IntelliSense.RuleKind.YieldSummarizeOperatorOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | top-nested 1 of bin(A,1m) with others = 12 by \",Kusto.Data.IntelliSense.RuleKind.YieldSummarizeOperatorOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | top-nested 1 of bin(A,1m) by avg(A) \",Kusto.Data.IntelliSense.RuleKind.YieldAscendingDescendingOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | top-nested 1 of bin(A,1m) with others = 15 by avg(A) \",Kusto.Data.IntelliSense.RuleKind.YieldAscendingDescendingOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | top-nested 1 of bin(A,1m) by avg(A) asc\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | top-nested 1 of bin(A,1m) by avg(A), \",Kusto.Data.IntelliSense.RuleKind.YieldTopNestedKeywordOption));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | top-nested 1 of bin(A,1m) with others = 12 \",Kusto.Data.IntelliSense.RuleKind.YieldByKeywordOptions));Kusto.UT.IntelliSenseRulesTests.TestIntelliSensePatterns(Kusto.UT.IntelliSenseRulesTests.s_intelliSenseProvider,testPatterns)},IntelliSenseTopHittersTest:function(){var testPatterns=new(System.Collections.Generic.List$1(Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern).ctor);testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | top-hitters\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | top-hitters \",Kusto.Data.IntelliSense.RuleKind.YieldNumericScalarOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | top-hitters 1\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | top-hitters 1 \",Kusto.Data.IntelliSense.RuleKind.YieldTopNestedOfKeywordOption));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | top-hitters 1 of\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | top-hitters 1 of \",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForOrdering));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | top-hitters 1 of A\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | top-hitters 1 of A \",Kusto.Data.IntelliSense.RuleKind.YieldByKeywordOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | top-hitters 1 of A by\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | top-hitters 1 of A by \",Kusto.Data.IntelliSense.RuleKind.YieldSummarizeOperatorOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | top-hitters 1 of A by 1\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | top-hitters 1 of A by 1 + \",Kusto.Data.IntelliSense.RuleKind.YieldSummarizeOperatorOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | top-hitters 1 of A by 1+ \",Kusto.Data.IntelliSense.RuleKind.YieldSummarizeOperatorOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | top-hitters 1 of A by 1+\",Kusto.Data.IntelliSense.RuleKind.YieldSummarizeOperatorOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | top-hitters 1 of A by 1 * \",Kusto.Data.IntelliSense.RuleKind.YieldSummarizeOperatorOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | top-hitters 1 of A by 1 - \",Kusto.Data.IntelliSense.RuleKind.YieldSummarizeOperatorOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | top-hitters 1 of A by avg(A)\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | top-hitters 1 of A by avg(\",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesAndFunctionsForExtend));Kusto.UT.IntelliSenseRulesTests.TestIntelliSensePatterns(Kusto.UT.IntelliSenseRulesTests.s_intelliSenseProvider,testPatterns)},IntelliSenseProjectTest:function(){var testPatterns=new(System.Collections.Generic.List$1(Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern).ctor);testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | project\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | project \",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForProject));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | project Fiel\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | project Field1\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | project Field1,\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | project Field1, \",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForProject));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | project Field1, Field2\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | project Field1, Field2 \",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | project Field1, Field2,\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | project Field1, Field2, \",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForProject));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | project Field1, Field2 | , \",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | xxx Field1, Field2 | project \",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForProject));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | xxx Field1, Field2 project \",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | project x=\",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesAndFunctionsForExtend));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | project x= \",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesAndFunctionsForExtend));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | project x= Fiel\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | project x= Field1,\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | project x= Field1, \",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForProject));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | project x= Field1, y\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | project x= Field1, y=\",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesAndFunctionsForExtend));Kusto.UT.IntelliSenseRulesTests.TestIntelliSensePatterns(Kusto.UT.IntelliSenseRulesTests.s_intelliSenseProvider,testPatterns)},IntelliSenseProjectAwayTest:function(){var testPatterns=new(System.Collections.Generic.List$1(Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern).ctor);testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | project-away\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | project-away \",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForProjectAway));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | project-away Fiel\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | project-away Field1\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | project-away Field1,\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | project-away Field1, \",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForProjectAway));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | project-away Field1, Field2\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | project-away Field1, Field2 \",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | project-away Field1, Field2,\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | project-away Field1, Field2, \",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForProjectAway));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | project-away Field1, Field2 | , \",Kusto.Data.IntelliSense.RuleKind.None));Kusto.UT.IntelliSenseRulesTests.TestIntelliSensePatterns(Kusto.UT.IntelliSenseRulesTests.s_intelliSenseProvider,testPatterns)},IntelliSenseProjectRenameTest:function(){var testPatterns=new(System.Collections.Generic.List$1(Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern).ctor);testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | project-rename\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | project-rename \",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | project-rename Fiel\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | project-rename Field1\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | project-rename Field1 =\",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForProjectRename));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | project-rename Field1 = \",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForProjectRename));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | project-rename Field1 = z,\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | project-rename Field1 = z, \",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | project-rename Field1 = z, Feild2=\",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForProjectRename));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | project-rename Field1 = z, Feild2= \",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForProjectRename));Kusto.UT.IntelliSenseRulesTests.TestIntelliSensePatterns(Kusto.UT.IntelliSenseRulesTests.s_intelliSenseProvider,testPatterns)},IntelliSenseLimitTest:function(){var testPatterns=new(System.Collections.Generic.List$1(Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern).ctor);testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | limit\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | limit \",Kusto.Data.IntelliSense.RuleKind.YieldNumericScalarOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | limit 1\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | limit 2\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | limit 1 \",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | take\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | take \",Kusto.Data.IntelliSense.RuleKind.YieldNumericScalarOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | take 1\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | take 2\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | take 1 \",Kusto.Data.IntelliSense.RuleKind.None));Kusto.UT.IntelliSenseRulesTests.TestIntelliSensePatterns(Kusto.UT.IntelliSenseRulesTests.s_intelliSenseProvider,testPatterns)},IntelliSenseSampleTest:function(){var testPatterns=new(System.Collections.Generic.List$1(Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern).ctor);testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | sample\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | sample \",Kusto.Data.IntelliSense.RuleKind.YieldNumericScalarOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | sample 1\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | sample 2\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | sample 1 \",Kusto.Data.IntelliSense.RuleKind.None));Kusto.UT.IntelliSenseRulesTests.TestIntelliSensePatterns(Kusto.UT.IntelliSenseRulesTests.s_intelliSenseProvider,testPatterns)},IntelliSenseSampleDistinctTest:function(){var testPatterns=new(System.Collections.Generic.List$1(Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern).ctor);testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | sample-distinct\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | sample-distinct \",Kusto.Data.IntelliSense.RuleKind.YieldNumericScalarOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | sample-distinct 1\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | sample-distinct 1 \",Kusto.Data.IntelliSense.RuleKind.YieldTopNestedOfKeywordOption));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | sample-distinct 1 of\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | sample-distinct 1 of \",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesAndFunctionsForExtend));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | sample-distinct 1 of A\",Kusto.Data.IntelliSense.RuleKind.None));Kusto.UT.IntelliSenseRulesTests.TestIntelliSensePatterns(Kusto.UT.IntelliSenseRulesTests.s_intelliSenseProvider,testPatterns)},IntelliSenseShowCommandTest:function(){var testPatterns=new(System.Collections.Generic.List$1(Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern).ctor);testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".show\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".show \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldShowCommandOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\"\\n.show \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldShowCommandOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\" .show \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldShowCommandOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".show xxx | .show \",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".show principal \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldShowPrincipalCommandOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".alter policies \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldMultiplePoliciesOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".delete policies \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldDeleteMultiplePoliciesOptions));Kusto.UT.IntelliSenseRulesTests.TestIntelliSensePatterns(Kusto.UT.IntelliSenseRulesTests.s_intelliSenseProvider,testPatterns)},IntelliSenseClientDirectivesTest:function(){var testPatterns=new(System.Collections.Generic.List$1(Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern).ctor);testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"#\",Kusto.Data.IntelliSense.RuleKind.YieldClientDirectivesOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"#connect\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"#connect \",Kusto.Data.IntelliSense.RuleKind.YieldClientDirective_ConnectOptions));Kusto.UT.IntelliSenseRulesTests.TestIntelliSensePatterns(Kusto.UT.IntelliSenseRulesTests.s_intelliSenseProvider,testPatterns)},IntelliSenseAppendCommandTest:function(){var testPatterns=new(System.Collections.Generic.List$1(Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern).ctor);testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".append\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".append \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldTableNamesForAdminOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".set-or-append\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".set-or-append \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldTableNamesForAdminOptions));Kusto.UT.IntelliSenseRulesTests.TestIntelliSensePatterns(Kusto.UT.IntelliSenseRulesTests.s_intelliSenseProvider,testPatterns)},IntelliSenseReplaceCommandTest:function(){var testPatterns=new(System.Collections.Generic.List$1(Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern).ctor);testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".set-or-replace\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".set-or-replace \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldTableNamesForAdminOptions));Kusto.UT.IntelliSenseRulesTests.TestIntelliSensePatterns(Kusto.UT.IntelliSenseRulesTests.s_intelliSenseProvider,testPatterns)},IntelliSenseExtendTest:function(){var testPatterns=new(System.Collections.Generic.List$1(Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern).ctor);testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | extend\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | extend \",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | extend newop\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | extend newop=\",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesAndFunctionsForExtend));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | extend newop=xx\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | extend newop=xx \",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | extend newop=xx ,\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | extend newop=xx+\",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesAndFunctionsForExtend));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | extend newop=xx-\",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesAndFunctionsForExtend));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | extend newop=xx/\",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesAndFunctionsForExtend));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | extend newop=xx*\",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesAndFunctionsForExtend));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | extend newop=xx +\",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesAndFunctionsForExtend));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | extend newop=xx -\",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesAndFunctionsForExtend));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | extend newop=xx /\",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesAndFunctionsForExtend));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | extend newop=xx *\",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesAndFunctionsForExtend));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | extend newop=xx+ \",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesAndFunctionsForExtend));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | extend newop=xx- \",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesAndFunctionsForExtend));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | extend newop=xx/ \",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesAndFunctionsForExtend));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | extend newop=xx* \",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesAndFunctionsForExtend));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | extend newop=xx + \",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesAndFunctionsForExtend));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | extend newop=xx / \",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesAndFunctionsForExtend));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | extend newop=xx * \",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesAndFunctionsForExtend));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | extend newop=xx+yy\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | extend newop=xx+yy,\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | extend newop=xx+yy,newop1=\",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesAndFunctionsForExtend));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | extend newop=xx+yy,newop1=strlen(\",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesAndFunctionsForExtend));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | extend newop=xx+yy,newop1=tostring(\",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesAndFunctionsForExtend));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | extend newop=xx+yy,newop1=strcat(\",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForManyParamFunctions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | extend newop=xx+yy,newop1=toupper(\",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesAndFunctionsForExtend));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | extend newop=xx+yy,newop1=iff(\",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForThreeParamFunctions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | extend newop=xx+yy | summarize count(newop) by newop bin=\",Kusto.Data.IntelliSense.RuleKind.None));Kusto.UT.IntelliSenseRulesTests.TestIntelliSensePatterns(Kusto.UT.IntelliSenseRulesTests.s_intelliSenseProvider,testPatterns)},IntelliSenseParseOperator:function(){var testPatterns=new(System.Collections.Generic.List$1(Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern).ctor);testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | parse \",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForParse));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | parse kind\",Kusto.Data.IntelliSense.RuleKind.YieldParseKeywordKindsOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | parse kind = simple \",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForParse));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | parse kind = regex \",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForParse));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | parse kind = relaxed \",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForParse));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | parse kind = relaxed flags = iU \",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForParse));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | parse kind = simple column \",Kusto.Data.IntelliSense.RuleKind.YieldWithKeywordOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | parse kind = simple flags = iU column \",Kusto.Data.IntelliSense.RuleKind.YieldWithKeywordOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | parse kind = regex column \",Kusto.Data.IntelliSense.RuleKind.YieldWithKeywordOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | parse kind = relaxed column \",Kusto.Data.IntelliSense.RuleKind.YieldWithKeywordOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | parse kind = simple column with \",Kusto.Data.IntelliSense.RuleKind.YieldStarOption));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | parse kind = regex column with \",Kusto.Data.IntelliSense.RuleKind.YieldStarOption));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | parse kind = relaxed column with \",Kusto.Data.IntelliSense.RuleKind.YieldStarOption));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | parse kind = simple column with extendedCol1:\",Kusto.Data.IntelliSense.RuleKind.YieldParseTypesKeywordOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | parse kind = regex column with extendedCol1:\",Kusto.Data.IntelliSense.RuleKind.YieldParseTypesKeywordOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | parse kind = relaxed column with extendedCol1:\",Kusto.Data.IntelliSense.RuleKind.YieldParseTypesKeywordOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | parse  column with extendedCol1:long \",Kusto.Data.IntelliSense.RuleKind.YieldStarOption));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2('Table1 | parse kind = simple column with extendedCol1:long \"someDelemiter\" ',Kusto.Data.IntelliSense.RuleKind.YieldStarOption));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | parse kind = relaxed column with extendedCol1:long | \",Kusto.Data.IntelliSense.RuleKind.YieldOperatorsAfterPipe));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | parse kind = regex column with extendedCol1:long | \",Kusto.Data.IntelliSense.RuleKind.YieldOperatorsAfterPipe));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | parse column with extendedCol1:long | \",Kusto.Data.IntelliSense.RuleKind.YieldOperatorsAfterPipe));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | parse column with * 'someDelemiter' * 'someDelemiter2' * 'SomeDelemiter3' SomeStringColumn | \",Kusto.Data.IntelliSense.RuleKind.YieldOperatorsAfterPipe));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | parse column with \",Kusto.Data.IntelliSense.RuleKind.YieldStarOption));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | parse column with * s:\",Kusto.Data.IntelliSense.RuleKind.YieldParseTypesKeywordOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | parse column with * s:int \",Kusto.Data.IntelliSense.RuleKind.YieldStarOption));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | parse column with * s:int 'someDelimiter' \",Kusto.Data.IntelliSense.RuleKind.YieldStarOption));Kusto.UT.IntelliSenseRulesTests.TestIntelliSensePatterns(Kusto.UT.IntelliSenseRulesTests.s_intelliSenseProvider,testPatterns)},IntelliSenseShowTableCommandTest:function(){var testPatterns=new(System.Collections.Generic.List$1(Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern).ctor);testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".show table\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".show table \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldTableNamesForAdminOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".show table xxx\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".show table xxx \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldShowTableEntitiesOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".show table xxx extents\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".show table xxx extents \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldShowExtentsByEntityOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".show table xxx extents where\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".show table xxx extents where tags\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".show table xxx extents where tags \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldShowExtentsByEntityWithTagsFiltersOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".show table xxx extents hot\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".show table xxx extents hot \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldShowExtentsByEntityOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".show table xxx principals\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".show table xxx policy\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".show table xxx policy \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldTablePoliciesOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\".show table xxx | \",Kusto.Data.IntelliSense.RuleKind.YieldOperatorsAfterPipe));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".show tables (xxx,yyy) extents\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".show tables (xxx,yyy) extents \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldShowExtentsByEntityOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".show tables (xxx,yyy) extents where\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".show tables (xxx,yyy) extents where tags\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".show tables (xxx,yyy) extents where tags \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldShowExtentsByEntityWithTagsFiltersOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".show tables (xxx,yyy) extents hot\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".show tables (xxx,yyy) extents hot \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldShowExtentsByEntityOptions));Kusto.UT.IntelliSenseRulesTests.TestIntelliSensePatterns(Kusto.UT.IntelliSenseRulesTests.s_intelliSenseProvider,testPatterns)},IntelliSenseAlterTableCommandTest:function(){var testPatterns=new(System.Collections.Generic.List$1(Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern).ctor);testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".alter table\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".alter table \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldTableNamesForAdminOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".alter table xxx\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".alter table xxx \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldAlterTableEntitiesOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".alter-merge table\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".alter-merge table \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldTableNamesForAdminOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".alter-merge table xxx\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".alter-merge table xxx \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldAlterTableEntitiesOptions));Kusto.UT.IntelliSenseRulesTests.TestIntelliSensePatterns(Kusto.UT.IntelliSenseRulesTests.s_intelliSenseProvider,testPatterns)},IntelliSenseDeleteTableCommandTest:function(){var testPatterns=new(System.Collections.Generic.List$1(Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern).ctor);testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".delete table\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".delete table \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldTableNamesForAdminOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".delete table xxx\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".delete table xxx \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldDeleteTableEntitiesOptions));Kusto.UT.IntelliSenseRulesTests.TestIntelliSensePatterns(Kusto.UT.IntelliSenseRulesTests.s_intelliSenseProvider,testPatterns)},IntelliSenseDropTableCommandTest:function(){var testPatterns=new(System.Collections.Generic.List$1(Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern).ctor);testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".drop table\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".drop table \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldTableNamesForAdminOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".drop table xxx\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".drop table xxx \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldDropTableEntitiesOptions));Kusto.UT.IntelliSenseRulesTests.TestIntelliSensePatterns(Kusto.UT.IntelliSenseRulesTests.s_intelliSenseProvider,testPatterns)},IntelliSenseAlterFunctionCommandTest:function(){var testPatterns=new(System.Collections.Generic.List$1(Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern).ctor);testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".alter function\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".alter function xxx\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".alter function \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldFunctionNamesForAdminOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".alter function xxx \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldAlterFunctionEntitiesOptions));Kusto.UT.IntelliSenseRulesTests.TestIntelliSensePatterns(Kusto.UT.IntelliSenseRulesTests.s_intelliSenseProvider,testPatterns)},IntelliSenseShowDatabaseCommandTest:function(){var testPatterns=new(System.Collections.Generic.List$1(Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern).ctor);testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".show database\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".show database \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldDatabaseNames));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".show database xxx\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".show database xxx \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldShowDatabasePrincipalsPoliciesAndSchemaOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".show database xxx extents\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".show database xxx extents \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldShowExtentsByEntityOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".show database xxx extents hot\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".show database xxx extents hot \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldShowExtentsByEntityOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".show database xxx principals\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".show database xxx policy \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldDatabasePoliciesOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".show database xxx policy\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\".show database xxx principals | \",Kusto.Data.IntelliSense.RuleKind.YieldOperatorsAfterPipe));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".show database xxx schema\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\".show database xxx schema | \",Kusto.Data.IntelliSense.RuleKind.YieldOperatorsAfterPipe));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".show database xxx extents where\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".show database xxx extents where tags\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".show database xxx extents where tags \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldShowExtentsByEntityWithTagsFiltersOptions));Kusto.UT.IntelliSenseRulesTests.TestIntelliSensePatterns(Kusto.UT.IntelliSenseRulesTests.s_intelliSenseProvider,testPatterns)},IntelliSenseShowDatabasesCommandTest:function(){var testPatterns=new(System.Collections.Generic.List$1(Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern).ctor);testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".show databases\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".show databases \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldShowDatabasesOptions));Kusto.UT.IntelliSenseRulesTests.TestIntelliSensePatterns(Kusto.UT.IntelliSenseRulesTests.s_intelliSenseProvider,testPatterns)},IntelliSenseShowClusterCommandTest:function(){var testPatterns=new(System.Collections.Generic.List$1(Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern).ctor);testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".show cluster\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".show cluster \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldShowClusterPrincipalsOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".show cluster extents\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".show cluster extents \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldShowExtentsByEntityOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".show cluster extents hot\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".show cluster extents hot \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldShowExtentsByEntityOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".show cluster principals\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".show cluster policy \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldClusterPoliciesOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".show cluster policy\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\".show cluster principals | \",Kusto.Data.IntelliSense.RuleKind.YieldOperatorsAfterPipe));Kusto.UT.IntelliSenseRulesTests.TestIntelliSensePatterns(Kusto.UT.IntelliSenseRulesTests.s_intelliSenseProvider,testPatterns)},IntelliSenseShowBasicAuthUsersCommandTest:function(){var testPatterns=new(System.Collections.Generic.List$1(Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern).ctor);testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".show basicauth\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".show basicauth \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldShowBasicAuthOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".show basicauth users\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));Kusto.UT.IntelliSenseRulesTests.TestIntelliSensePatterns(Kusto.UT.IntelliSenseRulesTests.s_intelliSenseProvider,testPatterns)},IntelliSenseIngestionDuplicateCommandTest:function(){var testPatterns=new(System.Collections.Generic.List$1(Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern).ctor);testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".dup-next-ingest\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".dup-next-ingest \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldIngestionDuplicationOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".dup-next-ingest into\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".dup-next-ingest into \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldTableNamesForAdminOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".dup-next-ingest into ttt\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".dup-next-ingest into ttt to h@'container'\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".dup-next-failed-ingest\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".dup-next-failed-ingest \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldIngestionDuplicationOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".dup-next-failed-ingest into\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".dup-next-failed-ingest into \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldTableNamesForAdminOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".dup-next-failed-ingest into ttt\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".dup-next-failed-ingest into ttt to h@'container'\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));Kusto.UT.IntelliSenseRulesTests.TestIntelliSensePatterns(Kusto.UT.IntelliSenseRulesTests.s_intelliSenseProvider,testPatterns)},IntelliSenseColumnCommandTest:function(){var $t,policiesCommands=System.Array.init([\"show\",\"alter\",\"alter-merge\",\"delete\"],System.String),testPatterns=new(System.Collections.Generic.List$1(Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern).ctor),policyCommand;$t=Bridge.getEnumerator(policiesCommands);try{while($t.moveNext())policyCommand=$t.Current,testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(System.String.format(\".{0} column\",[policyCommand]),Kusto.Data.IntelliSense.AdminEngineRuleKind.None)),testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(System.String.format(\".{0} column xxx\",[policyCommand]),Kusto.Data.IntelliSense.AdminEngineRuleKind.None)),testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(System.String.format(\".{0} column xxx \",[policyCommand]),Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldPoliciesOptions)),testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(System.String.format(\".{0} column xxx policy\",[policyCommand]),Kusto.Data.IntelliSense.AdminEngineRuleKind.None)),testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(System.String.format(\".{0} column xxx policy \",[policyCommand]),Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldColumnPoliciesOptions))}finally{Bridge.is($t,System.IDisposable)&&$t.System$IDisposable$Dispose()}Kusto.UT.IntelliSenseRulesTests.TestIntelliSensePatterns(Kusto.UT.IntelliSenseRulesTests.s_intelliSenseProvider,testPatterns)},IntelliSenseDatabasePoliciesCommandTest:function(){var $t,policiesCommands=System.Array.init([\"alter\",\"alter-merge\",\"delete\"],System.String),testPatterns=new(System.Collections.Generic.List$1(Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern).ctor),policyCommand,expectedMatchingRule;$t=Bridge.getEnumerator(policiesCommands);try{while($t.moveNext())policyCommand=$t.Current,testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(System.String.format(\".{0} database\",[policyCommand]),Kusto.Data.IntelliSense.AdminEngineRuleKind.None)),testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(System.String.format(\".{0} database xxx\",[policyCommand]),Kusto.Data.IntelliSense.AdminEngineRuleKind.None)),expectedMatchingRule=System.String.equals(policyCommand,\"alter\")?Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldAlterDatabaseCommandOptions:Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldPoliciesOptions,testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(System.String.format(\".{0} database xxx \",[policyCommand]),expectedMatchingRule)),testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(System.String.format(\".{0} database xxx policy\",[policyCommand]),Kusto.Data.IntelliSense.AdminEngineRuleKind.None)),testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(System.String.format(\".{0} database xxx policy \",[policyCommand]),Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldDatabasePoliciesOptions)),System.String.equals(policyCommand,\"alter-merge\")&&(testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(System.String.format(\".{0} database xxx policy retention \",[policyCommand]),Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldAlterMergePolicyRetentionOptions)),testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(System.String.format(\".{0} database xxx policy retention softdelete = \",[policyCommand]),Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldAlterTimeSpanPolicyOptions)),testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(System.String.format(\".{0} database xxx policy retention harddelete = \",[policyCommand]),Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldAlterTimeSpanPolicyOptions)),testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(System.String.format(\".{0} database xxx policy retention softdelete = xxx\",[policyCommand]),Kusto.Data.IntelliSense.AdminEngineRuleKind.None)),testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(System.String.format(\".{0} database xxx policy retention softdelete = xxx \",[policyCommand]),Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldAlterMergePolicyRetentionSoftDeleteDefinedOptions)),testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(System.String.format(\".{0} database xxx policy retention harddelete = xxx\",[policyCommand]),Kusto.Data.IntelliSense.AdminEngineRuleKind.None)),testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(System.String.format(\".{0} database xxx policy retention harddelete = xxx \",[policyCommand]),Kusto.Data.IntelliSense.AdminEngineRuleKind.None)),testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(System.String.format(\".{0} database xxx policy retention softdelete = xxx harddelete = xxx\",[policyCommand]),Kusto.Data.IntelliSense.AdminEngineRuleKind.None)),testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(System.String.format(\".{0} database xxx policy retention softdelete = xxx harddelete = xxx \",[policyCommand]),Kusto.Data.IntelliSense.AdminEngineRuleKind.None)))}finally{Bridge.is($t,System.IDisposable)&&$t.System$IDisposable$Dispose()}Kusto.UT.IntelliSenseRulesTests.TestIntelliSensePatterns(Kusto.UT.IntelliSenseRulesTests.s_intelliSenseProvider,testPatterns)},IntelliSenseTablePoliciesCommandTest:function(){var $t,policiesCommands=System.Array.init([\"alter\",\"alter-merge\",\"delete\"],System.String),testPatterns=new(System.Collections.Generic.List$1(Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern).ctor),policyCommand;$t=Bridge.getEnumerator(policiesCommands);try{while($t.moveNext())policyCommand=$t.Current,testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(System.String.format(\".{0} table xxx policy\",[policyCommand]),Kusto.Data.IntelliSense.AdminEngineRuleKind.None)),testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(System.String.format(\".{0} table xxx policy \",[policyCommand]),Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldTablePoliciesOptions)),System.String.equals(policyCommand,\"alter-merge\")&&(testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(System.String.format(\".{0} table xxx policy retention \",[policyCommand]),Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldAlterMergePolicyRetentionOptions)),testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(System.String.format(\".{0} table xxx policy retention softdelete = \",[policyCommand]),Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldAlterTimeSpanPolicyOptions)),testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(System.String.format(\".{0} table xxx policy retention harddelete = \",[policyCommand]),Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldAlterTimeSpanPolicyOptions)),testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(System.String.format(\".{0} table xxx policy retention softdelete = xxx\",[policyCommand]),Kusto.Data.IntelliSense.AdminEngineRuleKind.None)),testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(System.String.format(\".{0} table xxx policy retention softdelete = xxx \",[policyCommand]),Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldAlterMergePolicyRetentionSoftDeleteDefinedOptions)),testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(System.String.format(\".{0} table xxx policy retention harddelete = xxx\",[policyCommand]),Kusto.Data.IntelliSense.AdminEngineRuleKind.None)),testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(System.String.format(\".{0} table xxx policy retention harddelete = xxx \",[policyCommand]),Kusto.Data.IntelliSense.AdminEngineRuleKind.None)),testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(System.String.format(\".{0} table xxx policy retention softdelete = xxx harddelete = xxx\",[policyCommand]),Kusto.Data.IntelliSense.AdminEngineRuleKind.None)),testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(System.String.format(\".{0} table xxx policy retention softdelete = xxx harddelete = xxx \",[policyCommand]),Kusto.Data.IntelliSense.AdminEngineRuleKind.None)))}finally{Bridge.is($t,System.IDisposable)&&$t.System$IDisposable$Dispose()}Kusto.UT.IntelliSenseRulesTests.TestIntelliSensePatterns(Kusto.UT.IntelliSenseRulesTests.s_intelliSenseProvider,testPatterns)},IntelliSenseClusterPoliciesCommandTest:function(){var $t,policiesCommands=System.Array.init([\"alter\",\"alter-merge\",\"delete\"],System.String),testPatterns=new(System.Collections.Generic.List$1(Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern).ctor),policyCommand;$t=Bridge.getEnumerator(policiesCommands);try{while($t.moveNext())policyCommand=$t.Current,testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(System.String.format(\".{0} cluster\",[policyCommand]),Kusto.Data.IntelliSense.AdminEngineRuleKind.None)),testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(System.String.format(\".{0} cluster \",[policyCommand]),Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldPoliciesOptions)),testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(System.String.format(\".{0} cluster policy\",[policyCommand]),Kusto.Data.IntelliSense.AdminEngineRuleKind.None)),testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(System.String.format(\".{0} cluster policy \",[policyCommand]),Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldClusterPoliciesOptions))}finally{Bridge.is($t,System.IDisposable)&&$t.System$IDisposable$Dispose()}Kusto.UT.IntelliSenseRulesTests.TestIntelliSensePatterns(Kusto.UT.IntelliSenseRulesTests.s_intelliSenseProvider,testPatterns)},IntelliSenseSetDatabaseUsersAdminsViewersPrettyNameCommandTest:function(){var testPatterns=new(System.Collections.Generic.List$1(Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern).ctor);testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".set\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".set \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldSetCommandOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".set database\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".set database \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldDatabaseNames));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".set database xxx\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".set database xxx \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldSetDatabaseAdminsUsersViewersPrettyNameOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".set database xxx users\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".set database xxx admins\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".set database xxx viewers\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".set database xxx ingestors\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".set database xxx prettyname\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".set database xxx users \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldSetDatabaseUsersNoneOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".set database xxx admins \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldSetDatabaseAdminsNoneOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".set database xxx viewers \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldSetDatabaseViewersNoneOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".set database xxx ingestors \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldSetDatabaseIngestorsNoneOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".set database xxx prettyname\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\".set database xxx users | \",Kusto.Data.IntelliSense.RuleKind.YieldOperatorsAfterPipe));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\".set database xxx admins | \",Kusto.Data.IntelliSense.RuleKind.YieldOperatorsAfterPipe));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\".set database xxx viewers| \",Kusto.Data.IntelliSense.RuleKind.YieldOperatorsAfterPipe));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\".set database xxx ingestors | \",Kusto.Data.IntelliSense.RuleKind.YieldOperatorsAfterPipe));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\".set database xxx prettyname | \",Kusto.Data.IntelliSense.RuleKind.YieldOperatorsAfterPipe));Kusto.UT.IntelliSenseRulesTests.TestIntelliSensePatterns(Kusto.UT.IntelliSenseRulesTests.s_intelliSenseProvider,testPatterns)},IntelliSenseSetClusterUsersAdminsViewersCommandTest:function(){var testPatterns=new(System.Collections.Generic.List$1(Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern).ctor);testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".set\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".set \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldSetCommandOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".set cluster\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".set cluster \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldSetClusterAdminsUsersViewersDatabaseCreatorsOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".set cluster users\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".set cluster admins\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".set cluster viewers\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".set cluster databasecreators\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".set cluster users \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldSetClusterUsersNoneOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".set cluster admins \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldSetClusterAdminsNoneOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".set cluster viewers \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldSetClusterViewersNoneOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".set cluster databasecreators \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldSetClusterDatabaseCreatorsNoneOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\".set cluster users | \",Kusto.Data.IntelliSense.RuleKind.YieldOperatorsAfterPipe));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\".set cluster admins | \",Kusto.Data.IntelliSense.RuleKind.YieldOperatorsAfterPipe));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\".set cluster viewers| \",Kusto.Data.IntelliSense.RuleKind.YieldOperatorsAfterPipe));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\".set cluster databasecreators| \",Kusto.Data.IntelliSense.RuleKind.YieldOperatorsAfterPipe));Kusto.UT.IntelliSenseRulesTests.TestIntelliSensePatterns(Kusto.UT.IntelliSenseRulesTests.s_intelliSenseProvider,testPatterns)},IntelliSenseSetTableAdminsCommandTest:function(){var testPatterns=new(System.Collections.Generic.List$1(Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern).ctor);testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".set\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".set \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldSetCommandOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".set table\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".set table \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldTableNamesForAdminOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".set table xxx\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".set table xxx \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldSetTableAdminsOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".set table xxx admins\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".set table xxx ingestors\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".set table xxx admins \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldSetTableAdminsNoneOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".set table xxx ingestors \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldSetTableIngestorsNoneOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\".set table xxx admins | \",Kusto.Data.IntelliSense.RuleKind.YieldOperatorsAfterPipe));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\".set table xxx ingestors | \",Kusto.Data.IntelliSense.RuleKind.YieldOperatorsAfterPipe));Kusto.UT.IntelliSenseRulesTests.TestIntelliSensePatterns(Kusto.UT.IntelliSenseRulesTests.s_intelliSenseProvider,testPatterns)},IntelliSenseAddDatabaseUsersAdminsViewersCommandTest:function(){var testPatterns=new(System.Collections.Generic.List$1(Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern).ctor);testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".add\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".add \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldAddCommandOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".add database\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".add database \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldDatabaseNames));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".add database xxx\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".add database xxx \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldAddDatabaseAdminsUsersViewersOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".add database xxx users\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".add database xxx admins\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".add database xxx viewers\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".add database xxx ingestors\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\".add database xxx users | \",Kusto.Data.IntelliSense.RuleKind.YieldOperatorsAfterPipe));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\".add database xxx admins | \",Kusto.Data.IntelliSense.RuleKind.YieldOperatorsAfterPipe));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\".add database xxx viewers | \",Kusto.Data.IntelliSense.RuleKind.YieldOperatorsAfterPipe));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\".add database xxx ingestors | \",Kusto.Data.IntelliSense.RuleKind.YieldOperatorsAfterPipe));Kusto.UT.IntelliSenseRulesTests.TestIntelliSensePatterns(Kusto.UT.IntelliSenseRulesTests.s_intelliSenseProvider,testPatterns)},IntelliSenseAddClusterUsersAdminsViewersCommandTest:function(){var testPatterns=new(System.Collections.Generic.List$1(Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern).ctor);testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".add\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".add \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldAddCommandOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".add cluster\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".add cluster \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldAddClusterAdminsUsersViewersDatabaseCreatorsBlockedPrincipalsOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".add cluster users\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".add cluster admins\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".add cluster viewers\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".add cluster databasecreators\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\".add cluster users | \",Kusto.Data.IntelliSense.RuleKind.YieldOperatorsAfterPipe));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\".add cluster admins | \",Kusto.Data.IntelliSense.RuleKind.YieldOperatorsAfterPipe));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\".add cluster viewers | \",Kusto.Data.IntelliSense.RuleKind.YieldOperatorsAfterPipe));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\".add cluster databasecreators | \",Kusto.Data.IntelliSense.RuleKind.YieldOperatorsAfterPipe));Kusto.UT.IntelliSenseRulesTests.TestIntelliSensePatterns(Kusto.UT.IntelliSenseRulesTests.s_intelliSenseProvider,testPatterns)},IntelliSenseAddTableAdminsCommandTest:function(){var testPatterns=new(System.Collections.Generic.List$1(Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern).ctor);testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".add\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".add \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldAddCommandOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".add table\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".add table \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldTableNamesForAdminOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".add table xxx\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".add table xxx \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldAddTableAdminsOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\".add table xxx admins\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\".add table xxx ingestors\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\".add table xxx admins | \",Kusto.Data.IntelliSense.RuleKind.YieldOperatorsAfterPipe));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\".add table xxx ingestors | \",Kusto.Data.IntelliSense.RuleKind.YieldOperatorsAfterPipe));Kusto.UT.IntelliSenseRulesTests.TestIntelliSensePatterns(Kusto.UT.IntelliSenseRulesTests.s_intelliSenseProvider,testPatterns)},IntelliSenseDropDatabaseUsersAdminsViewersCommandTest:function(){var testPatterns=new(System.Collections.Generic.List$1(Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern).ctor);testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".drop\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".drop \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldDropCommandOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".drop database\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".drop database \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldDatabaseNames));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".drop database xxx\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".drop database xxx \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldDropDatabaseOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".drop database xxx users\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".drop database xxx admins\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".drop database xxx viewers\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".drop database xxx ingestors\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".drop database xxx prettyname\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\".drop database xxx users | \",Kusto.Data.IntelliSense.RuleKind.YieldOperatorsAfterPipe));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\".drop database xxx admins | \",Kusto.Data.IntelliSense.RuleKind.YieldOperatorsAfterPipe));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\".drop database xxx viewers | \",Kusto.Data.IntelliSense.RuleKind.YieldOperatorsAfterPipe));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\".drop database xxx ingestors | \",Kusto.Data.IntelliSense.RuleKind.YieldOperatorsAfterPipe));Kusto.UT.IntelliSenseRulesTests.TestIntelliSensePatterns(Kusto.UT.IntelliSenseRulesTests.s_intelliSenseProvider,testPatterns)},IntelliSenseDropTableAdminsColumnsCommandTest:function(){var testPatterns=new(System.Collections.Generic.List$1(Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern).ctor);testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".drop\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".drop \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldDropCommandOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".drop table\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".drop table \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldTableNamesForAdminOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".drop table xxx\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".drop table xxx \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldDropTableEntitiesOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\".drop table xxx admins\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\".drop table xxx ingestors\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\".drop table xxx admins | \",Kusto.Data.IntelliSense.RuleKind.YieldOperatorsAfterPipe));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\".drop table xxx ingestors | \",Kusto.Data.IntelliSense.RuleKind.YieldOperatorsAfterPipe));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".drop table xxx columns \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldDropTableColumnsSyntaxOptions));Kusto.UT.IntelliSenseRulesTests.TestIntelliSensePatterns(Kusto.UT.IntelliSenseRulesTests.s_intelliSenseProvider,testPatterns)},IntelliSenseDropExtentTagsCommandTest:function(){var testPatterns=new(System.Collections.Generic.List$1(Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern).ctor);testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".drop\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".drop \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldDropCommandOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".drop extent\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".drop extent \",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".drop extent tags \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldDropExtentTagsOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".drop extent tags from \",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".drop extent tags from table \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldTableNamesForAdminOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".drop extent tags from table ttt\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".drop extent tags from table ttt \",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));Kusto.UT.IntelliSenseRulesTests.TestIntelliSensePatterns(Kusto.UT.IntelliSenseRulesTests.s_intelliSenseProvider,testPatterns)},IntelliSenseAlterExtentTagsCommandTest:function(){var testPatterns=new(System.Collections.Generic.List$1(Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern).ctor);testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".alter\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".alter \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldAlterCommandOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".alter extent\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".alter extent \",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".alter extent tags \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldAlterExtentTagsOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".alter extent tags xxx \",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));Kusto.UT.IntelliSenseRulesTests.TestIntelliSensePatterns(Kusto.UT.IntelliSenseRulesTests.s_intelliSenseProvider,testPatterns)},IntelliSenseExtentsAttachCommandTest:function(){var testPatterns=new(System.Collections.Generic.List$1(Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern).ctor);testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".attach\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".attach \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldAttachCommandOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".attach extents\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".attach extents \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldAttachExtentsOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".attach extents into table\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".attach extents into table \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldTableNamesForAdminOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".attach extents into table ttt\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".attach extents into table ttt \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldAttachExtentsIntoTableOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".attach extents into table ttt by\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".attach extents into table ttt by \",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".attach extents into table ttt by metadata\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".attach extents into table ttt by metadata \",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".attach extents into table ttt by metadata <|\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".attach async\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".attach async \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldAttachCommandOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".attach async extents\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".attach async extents \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldAttachExtentsOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".attach async extents into table\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".attach async extents into table \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldTableNamesForAdminOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".attach async extents into table ttt\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".attach async extents into table ttt \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldAttachExtentsIntoTableOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".attach async extents into table ttt by\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".attach async extents into table ttt by \",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".attach async extents into table ttt by metadata\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".attach async extents into table ttt by metadata \",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".attach async extents into table ttt by metadata <|\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));Kusto.UT.IntelliSenseRulesTests.TestIntelliSensePatterns(Kusto.UT.IntelliSenseRulesTests.s_intelliSenseProvider,testPatterns)},IntelliSenseExtentsMoveCommandTest:function(){var testPatterns=new(System.Collections.Generic.List$1(Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern).ctor);testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".move\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".move \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldMoveCommandOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".move extents\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".move extents \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldMoveExtentsOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".move extents (00000000-0000-0000-0000-000000000000,00000000-0000-0000-0000-000000000000)\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".move extents (00000000-0000-0000-0000-000000000000,00000000-0000-0000-0000-000000000000) \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldMoveSpecifiedExtentsOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".move extents to table\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".move extents to table \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldTableNamesForAdminOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".move extents to table ttt\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".move extents to table ttt \",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".move extents all\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".move extents all \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldMoveSpecifiedExtentsOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".move extents all from\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".move extents all from \",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".move extents all from table\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".move extents all from table \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldTableNamesForAdminOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".move extents all from table ttt\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".move extents all from table ttt \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldMoveExtentsToTableOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".move extents all from table ttt to\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".move extents all from table ttt to \",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".move extents all from table ttt to table\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".move extents all from table ttt to table \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldTableNamesForAdminOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".move extents all from table ttt to table abc\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".move extents all from table ttt to table abc \",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".move async\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".move async \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldMoveCommandOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".move async extents\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".move async extents \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldMoveExtentsOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".move async extents (00000000-0000-0000-0000-000000000000,00000000-0000-0000-0000-000000000000)\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".move async extents (00000000-0000-0000-0000-000000000000,00000000-0000-0000-0000-000000000000) \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldMoveSpecifiedExtentsOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".move async extents to table\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".move async extents to table \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldTableNamesForAdminOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".move async extents to table ttt\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".move async extents to table ttt \",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".move async extents all\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".move async extents all \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldMoveSpecifiedExtentsOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".move async extents all from\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".move async extents all from \",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".move async extents all from table\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".move async extents all from table \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldTableNamesForAdminOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".move async extents all from table ttt\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".move async extents all from table ttt \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldMoveExtentsToTableOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".move async extents all from table ttt to\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".move async extents all from table ttt to \",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".move async extents all from table ttt to table\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".move async extents all from table ttt to table \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldTableNamesForAdminOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".move async extents all from table ttt to table abc\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".move async extents all from table ttt to table abc \",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));Kusto.UT.IntelliSenseRulesTests.TestIntelliSensePatterns(Kusto.UT.IntelliSenseRulesTests.s_intelliSenseProvider,testPatterns)},IntelliSenseExtentsReplaceCommandTest:function(){var testPatterns=new(System.Collections.Generic.List$1(Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern).ctor);testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".replace\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".replace \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldReplaceCommandOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".replace extents\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".replace extents \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldReplaceExtentsOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".replace extents in table\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".replace extents in table \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldTableNamesForAdminOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".replace extents in table ttt\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".replace extents in table ttt \",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".replace async\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".replace async \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldReplaceCommandOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".replace async extents\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".replace async extents \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldReplaceExtentsOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".replace async extents in table\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".replace async extents in table \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldTableNamesForAdminOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".replace async extents in table ttt\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".replace async extents in table ttt \",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));Kusto.UT.IntelliSenseRulesTests.TestIntelliSensePatterns(Kusto.UT.IntelliSenseRulesTests.s_intelliSenseProvider,testPatterns)},IntelliSenseCreateDatabaseAdminCommandTest:function(){var testPatterns=new(System.Collections.Generic.List$1(Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern).ctor);testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".create database\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".create database \",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".create database SomeName\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".create database SomeName \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldDatabaseCreatePersistencyOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".create database SomeName volatile\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".create database SomeName volatile \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldCreateIfNotExistsOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".create database SomeName volatile  \",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".create database SomeName persist\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".create database SomeName persist \",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".create database SomeName persist (h@'', h@'')\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".create database SomeName persist (h@'', h@'') \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldCreateIfNotExistsOptions));Kusto.UT.IntelliSenseRulesTests.TestIntelliSensePatterns(Kusto.UT.IntelliSenseRulesTests.s_intelliSenseProvider,testPatterns)},IntelliSenseAlterDatabaseMetadataAdminCommandTest:function(){var testPatterns=new(System.Collections.Generic.List$1(Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern).ctor);testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".alter database\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".alter database \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldDatabaseNames));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".alter database xxx\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".alter database xxx \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldAlterDatabaseCommandOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".alter database xxx persist\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".alter database xxx persist \",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".alter database xxx persist metadata\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".alter database xxx persist metadata \",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".alter database xxx persist metadata h@''\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));Kusto.UT.IntelliSenseRulesTests.TestIntelliSensePatterns(Kusto.UT.IntelliSenseRulesTests.s_intelliSenseProvider,testPatterns)},IntelliSenseCreateAddAlterDropAdminsCommandTest:function(){var testPatterns=new(System.Collections.Generic.List$1(Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern).ctor);testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".drop\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".drop \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldDropCommandOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".create\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".create \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldCreateCommandOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".alter\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".alter \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldAlterCommandOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".alter-merge\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".alter-merge \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldAlterMergeCommandOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".add\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".add \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldAddCommandOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".delete\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".delete \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldDeleteCommandOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".create-or-alter \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldCreateOrAlterOptions));Kusto.UT.IntelliSenseRulesTests.TestIntelliSensePatterns(Kusto.UT.IntelliSenseRulesTests.s_intelliSenseProvider,testPatterns)},IntelliSenseDropClusterUsersAdminsViewersCommandTest:function(){var testPatterns=new(System.Collections.Generic.List$1(Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern).ctor);testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".drop\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".drop \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldDropCommandOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".drop cluster\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".drop cluster \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldDropClusterAdminsUsersViewersDatabaseCreatorsBlockedPrincipalsOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".drop cluster users\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".drop cluster admins\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".drop cluster viewers\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".drop cluster databasecreators\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\".drop cluster users | \",Kusto.Data.IntelliSense.RuleKind.YieldOperatorsAfterPipe));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\".drop cluster admins | \",Kusto.Data.IntelliSense.RuleKind.YieldOperatorsAfterPipe));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\".drop cluster viewers| \",Kusto.Data.IntelliSense.RuleKind.YieldOperatorsAfterPipe));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\".drop cluster databasecreators| \",Kusto.Data.IntelliSense.RuleKind.YieldOperatorsAfterPipe));Kusto.UT.IntelliSenseRulesTests.TestIntelliSensePatterns(Kusto.UT.IntelliSenseRulesTests.s_intelliSenseProvider,testPatterns)},IntelliSenseQueryParametersTest:function(){var testPatterns=new(System.Collections.Generic.List$1(Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern).ctor);testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"[\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"{\",Kusto.Data.IntelliSense.RuleKind.YieldQueryParameters));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2('\"{',Kusto.Data.IntelliSense.RuleKind.YieldQueryParameters));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2('\"{q',Kusto.Data.IntelliSense.RuleKind.YieldQueryParameters));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2('\"{q}',Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2('\"{q}{',Kusto.Data.IntelliSense.RuleKind.YieldQueryParameters));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2('\"{q}{ ',Kusto.Data.IntelliSense.RuleKind.None));Kusto.UT.IntelliSenseRulesTests.TestIntelliSensePatterns(Kusto.UT.IntelliSenseRulesTests.s_intelliSenseProvider,testPatterns)},IntelliSenseJoinTest:function(){var testPatterns=new(System.Collections.Generic.List$1(Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern).ctor);testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1| join\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1| join \",Kusto.Data.IntelliSense.RuleKind.YieldPostJoinOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1| join Table2 \",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1| join Table2 on \",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1| join (\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1| join ( \",Kusto.Data.IntelliSense.RuleKind.YieldTableNames));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1| join (Table2) on\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1| join (Table2) on \",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForJoin));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1| join (Table2 | limit 10 ) on \",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForJoin));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1| join (Table2) on  \",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForJoin));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1| join kind\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1| join kind=\",Kusto.Data.IntelliSense.RuleKind.YieldKindFlavorsForJoin));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1| join kind= \",Kusto.Data.IntelliSense.RuleKind.YieldKindFlavorsForJoin));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1| join kind=xxx\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1| join kind=xxx \",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1| join kind=xxx kind=\",Kusto.Data.IntelliSense.RuleKind.None));Kusto.UT.IntelliSenseRulesTests.TestIntelliSensePatterns(Kusto.UT.IntelliSenseRulesTests.s_intelliSenseProvider,testPatterns)},IntelliSenseRenderTest:function(){var testPatterns=new(System.Collections.Generic.List$1(Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern).ctor);testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"render\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"|render\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"|render \",Kusto.Data.IntelliSense.RuleKind.YieldRenderOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"| render \",Kusto.Data.IntelliSense.RuleKind.YieldRenderOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"| render timechart\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"| render timechart \",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"| render areachart\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"| render areachart \",Kusto.Data.IntelliSense.RuleKind.YieldRenderKindKeywordOption));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"| render barchart \",Kusto.Data.IntelliSense.RuleKind.YieldRenderKindKeywordOption));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"| render columnchart \",Kusto.Data.IntelliSense.RuleKind.YieldRenderKindKeywordOption));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"| render areachart kind\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"| render areachart kind=\",Kusto.Data.IntelliSense.RuleKind.YieldRenderKindOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"| render barchart kind=\",Kusto.Data.IntelliSense.RuleKind.YieldRenderKindOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"| render columnchart kind=\",Kusto.Data.IntelliSense.RuleKind.YieldRenderKindOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"| render timepivot\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"| render timepivot \",Kusto.Data.IntelliSense.RuleKind.YieldByKeywordOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"| render timepivot by\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"| render timepivot by \",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForRender));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"| render timepivot by Column1\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"| render timepivot by Column1,\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"| render timepivot by Column1, \",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForRender));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"| render timepivot by Column1, Column2\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"| render timepivot by Column1, Column2,\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"| render timepivot by Column1, Column2, \",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForRender));Kusto.UT.IntelliSenseRulesTests.TestIntelliSensePatterns(Kusto.UT.IntelliSenseRulesTests.s_intelliSenseProvider,testPatterns)},IntelliSenseTopTest:function(){var testPatterns=new(System.Collections.Generic.List$1(Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern).ctor);testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | top\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | top \",Kusto.Data.IntelliSense.RuleKind.YieldNumericScalarOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | top by\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | top by \",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | top x by \",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | top 10\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | top 10 \",Kusto.Data.IntelliSense.RuleKind.YieldByKeywordOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | top 10 by\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | top 10 by \",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForOrdering));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | top 10 by Column1\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | top 10 by Column1 \",Kusto.Data.IntelliSense.RuleKind.YieldAscendingDescendingOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | top 10 by Column1 asc\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | top 10 by Column1 asc \",Kusto.Data.IntelliSense.RuleKind.YieldNullsFirstNullsLastOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | top 10 by Column1 asc\\r\\n\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | top 10 by Column1 asc nulls first\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | top 10 by Column1 ,\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | sort\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | sort \",Kusto.Data.IntelliSense.RuleKind.YieldByKeywordOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | sort by\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | sort by \",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForOrdering));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | sort by Column1\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | sort by Column1 \",Kusto.Data.IntelliSense.RuleKind.YieldAscendingDescendingOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | sort by Column1 asc\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | sort by Column1 asc \",Kusto.Data.IntelliSense.RuleKind.YieldNullsFirstNullsLastOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | sort by Column1 asc\\r\\n\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | sort by Column1 asc nulls first\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | sort by Column1 ,\",Kusto.Data.IntelliSense.RuleKind.None));Kusto.UT.IntelliSenseRulesTests.TestIntelliSensePatterns(Kusto.UT.IntelliSenseRulesTests.s_intelliSenseProvider,testPatterns)},IntelliSenseReduceTest:function(){var testPatterns=new(System.Collections.Generic.List$1(Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern).ctor);testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | reduce\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | reduce by \",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForOrdering));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | reduce by (Table2)\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | reduce kind\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | reduce kind=\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | reduce by Column kind=\",Kusto.Data.IntelliSense.RuleKind.YieldKindFlavorsForReduceBy));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | reduce by Column kind =\",Kusto.Data.IntelliSense.RuleKind.YieldKindFlavorsForReduceBy));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | reduce by Column kind = \",Kusto.Data.IntelliSense.RuleKind.YieldKindFlavorsForReduceBy));Kusto.UT.IntelliSenseRulesTests.TestIntelliSensePatterns(Kusto.UT.IntelliSenseRulesTests.s_intelliSenseProvider,testPatterns)},IntelliSenseToScalarTest:function(){var testPatterns=new(System.Collections.Generic.List$1(Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern).ctor);testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"toscalar\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"toscalar(\",Kusto.Data.IntelliSense.RuleKind.YieldTableNames));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"toscalar( \",Kusto.Data.IntelliSense.RuleKind.YieldTableNames));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"toscalar(Table\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"toscalar(Table \",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"toscalar(Table | \",Kusto.Data.IntelliSense.RuleKind.YieldOperatorsAfterPipe));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"toscalar(Table | count)\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"rand x from 1 to toscalar(\",Kusto.Data.IntelliSense.RuleKind.YieldTableNames));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"rand x from 1 to toscalar(1) step toscalar(\",Kusto.Data.IntelliSense.RuleKind.YieldTableNames));Kusto.UT.IntelliSenseRulesTests.TestIntelliSensePatterns(Kusto.UT.IntelliSenseRulesTests.s_intelliSenseProvider,testPatterns)},IntelliSenseTimeKeywordsTest:function(){var testPatterns=new(System.Collections.Generic.List$1(Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern).ctor);testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | where DateTimeField1 >\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | where DateTimeField1 > \",Kusto.Data.IntelliSense.RuleKind.YieldDateTimeOperatorsOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | where DateTimeField1 < \",Kusto.Data.IntelliSense.RuleKind.YieldDateTimeOperatorsOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | where DateTimeField1 == \",Kusto.Data.IntelliSense.RuleKind.YieldDateTimeOperatorsOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | where DateTimeField1 != \",Kusto.Data.IntelliSense.RuleKind.YieldDateTimeOperatorsOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | where DateTimeField1 >= \",Kusto.Data.IntelliSense.RuleKind.YieldDateTimeOperatorsOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | where DateTimeField1 <= \",Kusto.Data.IntelliSense.RuleKind.YieldDateTimeOperatorsOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | where Field1 == 'ff' and DateTimeField1 > \",Kusto.Data.IntelliSense.RuleKind.YieldDateTimeOperatorsOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | where Field1 == 'ff' or DateTimeField1 > \",Kusto.Data.IntelliSense.RuleKind.YieldDateTimeOperatorsOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"aago(\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"ago(\",Kusto.Data.IntelliSense.RuleKind.YieldTimespanOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"ago( \",Kusto.Data.IntelliSense.RuleKind.YieldTimespanOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\" ago(\",Kusto.Data.IntelliSense.RuleKind.YieldTimespanOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"nnow(\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"now(\",Kusto.Data.IntelliSense.RuleKind.YieldTimespanOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"now( \",Kusto.Data.IntelliSense.RuleKind.YieldTimespanOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\" now( \",Kusto.Data.IntelliSense.RuleKind.YieldTimespanOptions));Kusto.UT.IntelliSenseRulesTests.TestIntelliSensePatterns(Kusto.UT.IntelliSenseRulesTests.s_intelliSenseProvider,testPatterns)},IntelliSenseEvaluateTest:function(){var testPatterns=new(System.Collections.Generic.List$1(Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern).ctor);testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | evaluate \",Kusto.Data.IntelliSense.RuleKind.YieldEvaluateOperatorOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2('Table1 | evaluate diffpatterns(\"split= ',Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForDiffPatternsPluginSplitParameter));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2('Table1 | evaluate diffpatterns(\"bsplit= ',Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | extend split=\",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesAndFunctionsForExtend));Kusto.UT.IntelliSenseRulesTests.TestIntelliSensePatterns(Kusto.UT.IntelliSenseRulesTests.s_intelliSenseProvider,testPatterns)},IntelliSenseExportCommandTest:function(){var testPatterns=new(System.Collections.Generic.List$1(Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern).ctor);testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".export\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".export \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldExportCommandOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".export  \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldExportCommandOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".export async\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".export compressed\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".export async compressed\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".export compressed async\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".export async \",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".export compressed \",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".export async compressed \",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".export compressed async \",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".export to \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldExportCommandNoModifiersAndOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".export async to \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldExportCommandWithModifiersAndOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".export compressed to \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldExportCommandWithModifiersAndOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".export async compressed to \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldExportCommandWithModifiersAndOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".export async to \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldExportCommandWithModifiersAndOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".export to\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".export async compressed to\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));Kusto.UT.IntelliSenseRulesTests.TestIntelliSensePatterns(Kusto.UT.IntelliSenseRulesTests.s_intelliSenseProvider,testPatterns)},IntelliSensePurgeCommandTest:function(){var testPatterns=new(System.Collections.Generic.List$1(Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern).ctor);testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".purge\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".purge \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldPurgeOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".purge whatif = \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldPurgeWhatIfOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".purge whatif = info\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".purge whatif = info \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldPurgeWithPropertiesOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".purge whatif = info table\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".purge whatif = info table \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldTableNamesForAdminOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".purge whatif = info table TTT\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".purge whatif = info table TTT \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldPurgeTableOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".purge whatif = info table TTT records\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".purge whatif = info table TTT records \",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".purge maxRecords = \",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".purge maxRecords = 111\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".purge maxRecords = 111 \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldPurgeWithPropertiesOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".purge maxRecords = 111 table\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".purge maxRecords = 111 table \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldTableNamesForAdminOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".purge maxRecords = 111 table TTT\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".purge maxRecords = 111 table TTT \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldPurgeTableOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".purge maxRecords = 111 table TTT records\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".purge maxRecords = 111 table TTT records \",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".purge whatif = info maxRecords = 111\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".purge whatif = info maxRecords = 111 \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldPurgeWithPropertiesOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".purge whatif = info maxRecords = 111 table \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldTableNamesForAdminOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".purge whatif = info maxRecords = 111 table TTT\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".purge whatif = info maxRecords = 111 table TTT \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldPurgeTableOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".purge whatif = info maxRecords = 111 table TTT records\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".purge whatif = info maxRecords = 111 table TTT records \",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".purge async\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".purge async \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldPurgeOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".purge async whatif = \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldPurgeWhatIfOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".purge async whatif = info\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".purge async whatif = info \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldPurgeWithPropertiesOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".purge async whatif = info table\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".purge async whatif = info table \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldTableNamesForAdminOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".purge async whatif = info table TTT\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".purge async whatif = info table TTT \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldPurgeTableOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".purge async whatif = info table TTT records\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".purge async whatif = info table TTT records \",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".purge async maxRecords = \",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".purge async maxRecords = 111\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".purge async maxRecords = 111 \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldPurgeWithPropertiesOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".purge async maxRecords = 111 table\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".purge async maxRecords = 111 table \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldTableNamesForAdminOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".purge async maxRecords = 111 table TTT\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".purge async maxRecords = 111 table TTT \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldPurgeTableOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".purge async maxRecords = 111 table TTT records\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".purge async maxRecords = 111 table TTT records \",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".purge async whatif = info maxRecords = 111\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".purge async whatif = info maxRecords = 111 \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldPurgeWithPropertiesOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".purge async whatif = info maxRecords = 111 table \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldTableNamesForAdminOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".purge async whatif = info maxRecords = 111 table TTT\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".purge async whatif = info maxRecords = 111 table TTT \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldPurgeTableOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".purge async whatif = info maxRecords = 111 table TTT records\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".purge async whatif = info maxRecords = 111 table TTT records \",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));Kusto.UT.IntelliSenseRulesTests.TestIntelliSensePatterns(Kusto.UT.IntelliSenseRulesTests.s_intelliSenseProvider,testPatterns)},IntelliSensePurgeCleanupCommandTest:function(){var testPatterns=new(System.Collections.Generic.List$1(Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern).ctor);testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".purge-cleanup\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".purge-cleanup \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldPurgeCleanupOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".purge-cleanup async\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".purge-cleanup async \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldPurgeCleanupOptions));Kusto.UT.IntelliSenseRulesTests.TestIntelliSensePatterns(Kusto.UT.IntelliSenseRulesTests.s_intelliSenseProvider,testPatterns)},IntelliSenseCreateRowstoreAdminCommandTest:function(){var testPatterns=new(System.Collections.Generic.List$1(Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern).ctor);testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".create rowstore\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".create rowstore \",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));Kusto.UT.IntelliSenseRulesTests.TestIntelliSensePatterns(Kusto.UT.IntelliSenseRulesTests.s_intelliSenseProvider,testPatterns)},IntelliSenseSearchTest:function(){var testPatterns=new(System.Collections.Generic.List$1(Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern).ctor);testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"search\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"search \",Kusto.Data.IntelliSense.RuleKind.YieldPostSearchOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"search kind\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"search kind=\",Kusto.Data.IntelliSense.RuleKind.YieldSearchKindOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"search kind= \",Kusto.Data.IntelliSense.RuleKind.YieldSearchKindOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"search kind = \",Kusto.Data.IntelliSense.RuleKind.YieldSearchKindOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"search kind=case_sensitive\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"search kind=case_sensitive \",Kusto.Data.IntelliSense.RuleKind.YieldPostSearchKindOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"search kind=case_insensitive \",Kusto.Data.IntelliSense.RuleKind.YieldPostSearchKindOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2('search \"ff\" or',Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2('search \"ff\" or ',Kusto.Data.IntelliSense.RuleKind.YieldInsideSearchOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2('search \"ff\" and ',Kusto.Data.IntelliSense.RuleKind.YieldInsideSearchOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2('search in (Table1) \"ff\" and ',Kusto.Data.IntelliSense.RuleKind.YieldInsideSearchOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"search in (Table1, ['Table.2']) \\\"ff\\\" or \",Kusto.Data.IntelliSense.RuleKind.YieldInsideSearchOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2('search kind=case_sensitive  \"ff\" and ',Kusto.Data.IntelliSense.RuleKind.YieldInsideSearchOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"search in (Table1)\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"search in (Table1) \",Kusto.Data.IntelliSense.RuleKind.YieldInsideSearchOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"search kind=case_sensitive in (Table1) \",Kusto.Data.IntelliSense.RuleKind.YieldInsideSearchOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"search in (Table1, ['Table.2'])\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"search in (Table1, ['Table.2']) \",Kusto.Data.IntelliSense.RuleKind.YieldInsideSearchOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"search in (Table1, database('*').*)\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"search in (Table1, database('*').*) \",Kusto.Data.IntelliSense.RuleKind.YieldInsideSearchOptions));Kusto.UT.IntelliSenseRulesTests.TestIntelliSensePatterns(Kusto.UT.IntelliSenseRulesTests.s_intelliSenseProvider,testPatterns)},IntelliSenseFindTest:function(){var testPatterns=new(System.Collections.Generic.List$1(Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern).ctor);testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"find\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"find \",Kusto.Data.IntelliSense.RuleKind.YieldPostFindOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"find withsource=SourceTable\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"find withsource=SourceTable \",Kusto.Data.IntelliSense.RuleKind.YieldPostFindOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"find withsource = SourceTable \",Kusto.Data.IntelliSense.RuleKind.YieldPostFindOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"find in\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"find in \",Kusto.Data.IntelliSense.RuleKind.YieldPostFindInOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"find withsource=SourceTable in\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"find withsource=SourceTable in \",Kusto.Data.IntelliSense.RuleKind.YieldPostFindInOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"find in (\",Kusto.Data.IntelliSense.RuleKind.YieldTableNamesForFindIn));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"find withsource=SourceTable in (\",Kusto.Data.IntelliSense.RuleKind.YieldTableNamesForFindIn));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"find in (Table1, Table2,\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"find in (Table1, Table2, \",Kusto.Data.IntelliSense.RuleKind.YieldTableNamesForFindIn));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"find withsource=SourceTable in (Table1, Table2,\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"find withsource=SourceTable in (Table1, Table2, \",Kusto.Data.IntelliSense.RuleKind.YieldTableNamesForFindIn));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"find in (Table1, ['Table.2']\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"find in (Table1, ['Table.2'] \",Kusto.Data.IntelliSense.RuleKind.YieldEndOrContinueFindInOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"find withsource=SourceTable in (Table1, Table2\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"find withsource=SourceTable in (Table1, Table2 \",Kusto.Data.IntelliSense.RuleKind.YieldEndOrContinueFindInOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"find in (Table1, ['Table.2'])\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"find in (Table1, ['Table.2']) \",Kusto.Data.IntelliSense.RuleKind.YieldPostFindInListOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"find withsource=SourceTable in (Table1, Table2)\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"find withsource=SourceTable in (Table1, Table2) \",Kusto.Data.IntelliSense.RuleKind.YieldPostFindInListOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"find in (Table1, database('*').*)\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"find in (Table1, database('*').*) \",Kusto.Data.IntelliSense.RuleKind.YieldPostFindInListOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"find withsource=SourceTable in (Table1, database('*').*)\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"find withsource=SourceTable in (Table1, database('*').*) \",Kusto.Data.IntelliSense.RuleKind.YieldPostFindInListOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"find in (Table1, ['Table.2']) where\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"find in (Table1, ['Table.2']) where \",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForFilterInFind));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"find withsource=SourceTable in (Table1, ['Table.2']) where\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"find withsource=SourceTable in (Table1, ['Table.2']) where \",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForFilterInFind));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"find in (Table1, ['Table.2']) where Field1 == 'abc' and\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"find in (Table1, ['Table.2']) where Field1 == 'abc' and \",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForFilterInFind));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"find in (*, database('*').*) where * has 'abc' and\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"find in (*, database('*').*) where * has 'abc' and \",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForFilterInFind));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"find in (*, database('*').*) where 'abc' and\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"find in (*, database('*').*) where 'abc' and \",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForFilterInFind));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"find withsource=SourceTable in (Table1, ['Table.2']) where Field1 == 'abc' and\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"find withsource=SourceTable in (Table1, ['Table.2']) where Field1 == 'abc' and \",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForFilterInFind));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"find in (Table1, ['Table.2']) where Field3 == 'abc' project\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"find in (Table1, ['Table.2']) where Field3 == 'abc' project \",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForProjectInFind));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"find withsource=SourceTable in (Table1, ['Table.2']) where Field0 == 'abc' and DateTimeField1 > ago(1h) project\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"find withsource=SourceTable in (Table1, ['Table.2']) where Field0 == 'abc' and DateTimeField1 > ago(1h) project \",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForProjectInFind));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"find in (Table1, ['Table.2']) where Field0 == 'abc' project DateTimeField1\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"find withsource=SourceTable in (Table1, ['Table.2']) where Field0 == 'abc' and DateTimeField1 > ago(1h) project NumField1\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"find in (Table1, ['Table.2']) where Field8 == 'abc' project NumField2,\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"find in (Table1, ['Table.2']) where Field8 == 'abc' project NumField2, \",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForProjectInFind));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"find withsource=SourceTable in (Table1, ['Table.2']) where Field3 == 'abc' and DateTimeField0 > ago(1h) project Field0,\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"find withsource=SourceTable in (Table1, ['Table.2']) where Field3 == 'abc' and DateTimeField0 > ago(1h) project Field0, \",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForProjectInFind));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"find in (Table1, ['Table.2']) where Field8 == 'abc' project-smart\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"find in (Table1, ['Table.2']) where Field8 == 'abc' project-smart \",Kusto.Data.IntelliSense.RuleKind.YieldFindProjectSmartOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"find in (Table1, ['Table.2']) where Field8 == 'abc' project NumField2 | where\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"find in (Table1, ['Table.2']) where Field8 == 'abc' project NumField2 | where \",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForFilter));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"find in (Table1, ['Table.2']) where Field8 == 'abc' project NumField2 | project \",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForProject));Kusto.UT.IntelliSenseRulesTests.TestIntelliSensePatterns(Kusto.UT.IntelliSenseRulesTests.s_intelliSenseProvider,testPatterns)},IntelliSenseGetCommandContextTest:function(){var $t,$t1,commands=$asm.$.Kusto.UT.IntelliSenseRulesTests.f3(new(System.Collections.Generic.Dictionary$2(System.String,System.String).ctor)),flatten,kvp,command,context;$t=Bridge.getEnumerator(System.Array.init([!1,!0],System.Boolean));try{while($t.moveNext()){flatten=$t.Current;$t1=Bridge.getEnumerator(commands);try{while($t1.moveNext())kvp=$t1.Current,command=kvp.key,command=flatten?System.String.replaceAll(System.String.replaceAll(command,String.fromCharCode(10),String.fromCharCode(32)),String.fromCharCode(13),String.fromCharCode(32)):System.String.replaceAll(System.String.replaceAll(command,String.fromCharCode(10),String.fromCharCode(32)),String.fromCharCode(13),String.fromCharCode(32)),context=Kusto.UT.IntelliSenseRulesTests.s_intelliSenseProvider.AnalyzeCommand$1(command,null).Context,Kusto.UT.IntelliSenseRulesTests.Assert.AreEqual$1(kvp.value,context.Context,Kusto.Cloud.Platform.Utils.ExtendedString.FormatWithInvariantCulture(\"Command context was not resolved correctly for command '{0}'\",[command]))}finally{Bridge.is($t1,System.IDisposable)&&$t1.System$IDisposable$Dispose()}}}finally{Bridge.is($t,System.IDisposable)&&$t.System$IDisposable$Dispose()}}}});Bridge.ns(\"Kusto.UT.IntelliSenseRulesTests\",$asm.$);Bridge.apply($asm.$.Kusto.UT.IntelliSenseRulesTests,{f1:function(c){return c.Name},f2:function(e){return(e.Operator||\"\")+\":\"+(e.Name||\"\")},f3:function(_o1){return _o1.add(\"database('\",\"database('\"),_o1.add(\"database('someDB')\",\"database('someDB')\"),_o1.add(\"database('someDB').\",\"database('someDB').\"),_o1.add(\"database('someDB').Table\",\"database('someDB').Table\"),_o1.add(\"database('someDB with space')\",\"database('someDB with space')\"),_o1.add(\"database('someDB with space').\",\"database('someDB with space').\"),_o1.add(\"database('someDB with space').Table\",\"database('someDB with space').Table\"),_o1.add('database(\"someDB with space\")','database(\"someDB with space\")'),_o1.add('database(\"someDB with space\").','database(\"someDB with space\").'),_o1.add('database(\"someDB with space\").Table','database(\"someDB with space\").Table'),_o1.add(\"cluster('abc').database('\",\"cluster('abc').database('\"),_o1.add(\"cluster('abc').database('someDB')\",\"cluster('abc').database('someDB')\"),_o1.add(\"cluster('abc').database('someDB').\",\"cluster('abc').database('someDB').\"),_o1.add(\"cluster('abc').database('someDB').Table\",\"cluster('abc').database('someDB').Table\"),_o1.add(\"cluster('https://abc.kusto.windows.net').database('\",\"cluster('https://abc.kusto.windows.net').database('\"),_o1.add(\"cluster('https://abc.kusto.windows.net').database('someDB')\",\"cluster('https://abc.kusto.windows.net').database('someDB')\"),_o1.add(\"cluster('https://abc.kusto.windows.net').database('someDB').\",\"cluster('https://abc.kusto.windows.net').database('someDB').\"),_o1.add(\"cluster('https://abc.kusto.windows.net').database('someDB').Table\",\"cluster('https://abc.kusto.windows.net').database('someDB').Table\"),_o1.add('cluster(\"https://abc.kusto.windows.net\").database(\\'','cluster(\"https://abc.kusto.windows.net\").database(\\''),_o1.add(\"cluster(\\\"https://abc.kusto.windows.net\\\").database('someDB')\",\"cluster(\\\"https://abc.kusto.windows.net\\\").database('someDB')\"),_o1.add(\"cluster(\\\"https://abc.kusto.windows.net\\\").database('someDB').\",\"cluster(\\\"https://abc.kusto.windows.net\\\").database('someDB').\"),_o1.add(\"cluster(\\\"https://abc.kusto.windows.net\\\").database('someDB').Table\",\"cluster(\\\"https://abc.kusto.windows.net\\\").database('someDB').Table\"),_o1.add(\"let x = toscalar(Table1 | \",\"Table1\"),_o1.add(\"range x from toscalar(Table1 | count) to toscalar(Table2 | \",\"Table2\"),_o1.add(\"set querytrace;\\r\\n Table2 | \",\"Table2\"),_o1.add('union\\r\\n(Table1 | where body has keyword and body has \"Google\" | summarize posts=dcount(link_id) | extend context = \"Google\"),\\r\\n(Table2 | where  ',\"Table2\"),_o1.add(\"union (Table1), (Table2  \",\"Table2\"),_o1.add(\"union\\n (Table \",\"Table\"),_o1.add(\"union (Table \",\"Table\"),_o1.add(\"let x = () {request};\\n let y = x;\\n y \",\"request\"),_o1.add(\"let x = request;\\n x \",\"request\"),_o1.add(\"let x = request | count;\\n x \",\"request\"),_o1.add(\"let x = request;\\n x | count \",\"request\"),_o1.add(\"let x = request;\\n let y = x;\\n y \",\"request\"),_o1.add(\"let x = () {request | limit 100};\\n let y = x;\\n y \",\"request\"),_o1.add(\".show database XYZ \",\".show database XYZ\"),_o1.add(\"Table1 | count\",\"Table1\"),_o1.add(\"Table1 | join (Table2 | \",\"Table2\"),_o1.add(\"let x = 1;\\n Table2 | \",\"Table2\"),_o1.add(\"range xyz from 1 to 1 step 1| \",\"range\"),_o1.add(\"let x = () { request | where \",\"request\"),_o1.add(\"let x = request | where \",\"request\"),_o1.add(\"cluster('lxprdscu02').database('Analytics Billing').ApplicationHourlyEntryCount\\r\\n| where StartTime >= ago(rangeInDaysForBililngData)\\r\\n| where DataSource == 'AI'\\r\\n| where Database in (longtailDatabases)\\r\\n| summarize totalGB=1.0*sum(SizeInBytes)/1024/1024/1024 by bin(StartTime, 1d), ApplicationName , InstrumentationKey , ClusterName, DatabasePrettyName, Database, ProfileId\\r\\n| top-nested  of ClusterName by count(), top-nested  of DatabasePrettyName by count(), top-nested  of Database by count(),top-nested topAppCountByData of ProfileId by avg_totalGB = avg(totalGB) desc, top-nested of ApplicationName by count(), top-nested of InstrumentationKey by count()\\r\\n| project ClusterName, DatabasePrettyName , Database, ProfileId , ApplicationName ,InstrumentationKey, avg_totalGB\\r\\n| order by ClusterName , avg_totalGB desc \",\"cluster('lxprdscu02').database('Analytics Billing').ApplicationHourlyEntryCount\"),_o1.add(\"database('Analytics Billing').ApplicationHourlyEntryCount\\r\\n| where StartTime >= ago(rangeInDaysForBililngData)\\r\\n| where DataSource == 'AI'\\r\\n| where Database in (longtailDatabases)\\r\\n| summarize totalGB=1.0*sum(SizeInBytes)/1024/1024/1024 by bin(StartTime, 1d), ApplicationName , InstrumentationKey , ClusterName, DatabasePrettyName, Database, ProfileId\\r\\n| top-nested  of ClusterName by count(), top-nested  of DatabasePrettyName by count(), top-nested  of Database by count(),top-nested topAppCountByData of ProfileId by avg_totalGB = avg(totalGB) desc, top-nested of ApplicationName by count(), top-nested of InstrumentationKey by count()\\r\\n| project ClusterName, DatabasePrettyName , Database, ProfileId , ApplicationName ,InstrumentationKey, avg_totalGB\\r\\n| order by ClusterName , avg_totalGB desc \",\"database('Analytics Billing').ApplicationHourlyEntryCount\"),_o1.add(\"find 'abc'\",\"*\"),_o1.add(\"find in (database('*').*) 'abc'\",\"database('*').*\"),_o1.add(\"find in (database(\\\"*\\\").*) 'abc'\",'database(\"*\").*'),_o1.add(\"find in (Table) where\",\"Table\"),_o1.add(\"find in (['Table']) where\",\"['Table']\"),_o1.add(\"find in (database('Office*').*, T*, cluster('somecluster').database('x').T*) 'abc'\",\"database('Office*').*, T*, cluster('somecluster').database('x').T*\"),_o1.add(\"find withsource=X 'abc'\",\"*\"),_o1.add(\"find withsource=X in (database('*').*) 'abc'\",\"database('*').*\"),_o1.add(\"find withsource=X in (database(\\\"*\\\").*) 'abc'\",'database(\"*\").*'),_o1.add(\"find withsource=X in (Table) where\",\"Table\"),_o1.add(\"find withsource=X in (['Table']) where\",\"['Table']\"),_o1.add(\"find withsource=X in (database('Office*').*, T*, cluster('somecluster').database('x').T*) 'abc'\",\"database('Office*').*, T*, cluster('somecluster').database('x').T*\"),_o1.add(\"search 'abc'\",\"*\"),_o1.add(\"Table1 | search 'abc'\",\"Table1\"),_o1.add(\"search in (database('*').*) 'abc'\",\"database('*').*\"),_o1.add(\"search in (database(\\\"*\\\").*) 'abc'\",'database(\"*\").*'),_o1.add(\"search in (Table) where\",\"Table\"),_o1.add(\"search in (Table1, Table2) where\",\"Table1, Table2\"),_o1.add(\"search in (['Table']) where\",\"['Table']\"),_o1.add(\"search in (database('Office*').*, T*, cluster('somecluster').database('x').T*) 'abc'\",\"database('Office*').*, T*, cluster('somecluster').database('x').T*\"),_o1}});Bridge.define(\"Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern\",{$kind:\"nested class\",props:{Input:null,ExpectedMatch:!1,ExpectedRuleKind:0},ctors:{ctor:function(input){this.$initialize();this.Input=input;this.ExpectedRuleKind=Kusto.Data.IntelliSense.RuleKind.None;this.ExpectedMatch=!1},$ctor2:function(input,matchingRule){this.$initialize();this.Input=input;this.ExpectedRuleKind=matchingRule;this.ExpectedMatch=matchingRule!==Kusto.Data.IntelliSense.RuleKind.None},$ctor1:function(input,matchingRule){this.$initialize();this.Input=input;this.ExpectedRuleKind=matchingRule;this.ExpectedMatch=matchingRule!==Kusto.Data.IntelliSense.AdminEngineRuleKind.None}}});Bridge.define(\"Kusto.Charting.DataChartsHelper.ChartMetaData\",{inherits:[Kusto.Charting.IChartMetaData],$kind:\"nested class\",props:{ArgumentColumnType:0,ArgumentDataColumnIndex:0,GeospatialColumnIndexes:{get:function(){return this.GeospatiaColumnlIndexesList}},SeriesIndexes:{get:function(){return this.SeriesIndexesList}},DataIndexes:{get:function(){return this.DataIndexesList}},IsDataFormedAsSeries:!1,SeriesIndexesList:null,DataIndexesList:null,GeospatiaColumnlIndexesList:null,UnusedIndexes:null},alias:[\"ArgumentColumnType\",\"Kusto$Charting$IChartMetaData$ArgumentColumnType\",\"ArgumentDataColumnIndex\",\"Kusto$Charting$IChartMetaData$ArgumentDataColumnIndex\",\"GeospatialColumnIndexes\",\"Kusto$Charting$IChartMetaData$GeospatialColumnIndexes\",\"SeriesIndexes\",\"Kusto$Charting$IChartMetaData$SeriesIndexes\",\"DataIndexes\",\"Kusto$Charting$IChartMetaData$DataIndexes\",\"IsDataFormedAsSeries\",\"Kusto$Charting$IChartMetaData$IsDataFormedAsSeries\",\"UnusedIndexes\",\"Kusto$Charting$IChartMetaData$UnusedIndexes\"],ctors:{init:function(){this.ArgumentDataColumnIndex=-1;this.IsDataFormedAsSeries=!1;this.SeriesIndexesList=new(System.Collections.Generic.List$1(System.Int32).ctor);this.DataIndexesList=new(System.Collections.Generic.List$1(System.Int32).ctor);this.GeospatiaColumnlIndexesList=new(System.Collections.Generic.List$1(System.Int32).ctor);this.UnusedIndexes=new(System.Collections.Generic.List$1(System.Int32).ctor)},ctor:function(argumentColumnType){this.$initialize();this.ArgumentColumnType=argumentColumnType}}});Bridge.define(\"Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider\",{inherits:[Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase],statics:{fields:{s_lineWithDotBeginningRegex:null,s_allocateVirtualClusterCommandRegex:null,s_showCommandRegex:null,s_suspendCommandRegex:null,s_showFabricCommandRegex:null,s_rotateCommandRegex:null,s_generateCommandRegex:null,s_publishCommandRegex:null,s_unPublishCommandRegex:null,s_afterPipeRegex:null,s_alterCommandRegex:null,s_removeCommandRegex:null,s_setCommandRegex:null,s_createCommandRegex:null,s_deleteCommandRegex:null,s_detachCommandRegex:null,s_checkCommandRegex:null,s_addCommandRegex:null,s_dropCommandRegex:null,s_moveCommandRegex:null,s_migrateCommandRegex:null,s_uninstallCommandRegex:null,s_registerCommandRegex:null,s_putCommandRegex:null,s_listCommandRegex:null,s_listKustoPoolsServicesCommandPropertiesSuffixRegex:null,s_syncCommandRegex:null,s_exportCommandRegex:null,s_exportPackageForOptionsRegex:null,s_exportPackageForProductVersionOptionsRegex:null,s_executeCommandRegex:null,s_executeJobCommandRegex:null,s_activationCommandRegex:null,s_serviceCommandRegex:null,s_ingestLogsIntoCommandRegex:null,s_showClusterOptionsCommandRegex:null,s_operationsCommandRegex:null,s_resultsCommandRegex:null,s_orchestrationCommandRegex:null,s_orchestrationTaskHubCommandRegex:null,s_showAccountCommandRegex:null,s_moveAccountCommandRegex:null,s_fromServiceKeywordRegex:null,s_moveDatabaseFromServiceCommandRegex:null,s_moveAccountSubscriptionCommandRegex:null,s_moveServiceConfigurationCommandRegex:null,s_suspendTargetServiceCommandRegex:null,s_showTargetServiceCommandRegex:null,s_keysCommandRegex:null,s_alterServiceStorageAccountsCommandRegex:null,s_toKeywordCommandRegex:null,s_storageAccountsKeywordRegex:null,s_regenerateServiceKeywordRegex:null,s_keyTypesKeywordRegex:null,s_alterServicePackagesConfigurationCommandRegex:null,s_fromAccountKeywordRegex:null,s_showCmServiceCommandRegex:null,s_showClusterClientRegex:null,s_showClusterClientSubscriptionCommandRegex:null,s_showClusterClusterNamePrincipalCommandRegex:null,s_showAuditLogCommandRegex:null,s_showAuditLogFromCommandRegex:null,s_configurationKeywordRegex:null,s_showRegionsByHostersKeywordRegex:null,s_showTridentCmServicesKeywordRegex:null,s_showPrincipalRolesCommandRegex:null,s_showAccountsKeywordRegex:null,s_dmServiceAddKeywordRegex:null,s_dmServiceAlterKeywordRegex:null,s_dmServiceAlterSettingsRegex:null,s_dmServiceDropKeywordRegex:null,s_dmServiceShowKeywordRegex:null,s_configurationPropertySetKeywordRegex:null,s_toStringKeywordRegex:null,s_configurationPropertyWithConsentKeywordRegex:null,s_addKeywordRegex:null,s_configurationPropertyDropKeywordRegex:null,s_accountRenameOperationsKeywordRegex:null,s_accountAlterOperationsKeywordRegex:null,s_accountSubscriptionAlterKeywordRegex:null,s_accountAddOperationsKeywordRegex:null,s_accountRemoveOperationsKeywordRegex:null,s_accountSetOperationsKeywordRegex:null,s_serviceAlterOperationsKeywordRegex:null,s_serviceRotateOperationsKeywordRegex:null,s_servicePublishOperationsKeywordRegex:null,s_serviceUnPublishOperationsKeywordRegex:null,s_serviceUnPublishFromRegistryOperationsKeywordRegex:null,s_inServiceKeywordRegex:null,s_databaseKeywordRegex:null,s_createDatabaseCommandRegex:null,s_createServiceCommandRegex:null,s_createExternalCommandRegex:null,s_accountNamesCommandRegex:null,s_servicesNamesToAppendOptionsCommandRegex:null,s_rotateServicesNamesToAppendOptionsCommandRegex:null,s_moveServicesNamesToAppendOptionsCommandRegex:null,s_alterServicesNamesToAppendOptionsCommandRegex:null,s_publishServicesNamesToAppendOptionsCommandRegex:null,s_unPublishServicesNamesToAppendOptionsCommandRegex:null,s_removeServicesNamesToAppendOptionsCommandRegex:null,s_syncKustoPoolServicesNamesToAppendOptionsCommandRegex:null,s_servicesNamesCommandRegex:null,s_withPropertiesSuffixRegex:null,s_withEventHubPropertiesSuffixRegex:null,s_withCosmosDbDataConnectionPropertiesSuffixRegex:null,s_addServiceServiceNameRegex:null,s_databaseOrAccountNameMetadataKeywordRegex:null,s_metadataKeywordRegex:null,s_summaryOrMetadataKeywordRegex:null,s_summaryKeywordRegex:null,s_versionKeywordRegex:null,s_cloudCreateCommandRegex:null,s_regionCreateCommandRegex:null,s_serviceInstallCommandRegex:null,s_serviceDeployCommandRegex:null,s_serviceReinstallCommandRegex:null,s_serviceUninstallCommandRegex:null,s_updateCommandRegex:null,s_updateServiceCommandRegex:null,s_checkinCommandRegex:null,s_serviceMigrateCommandRegex:null,s_clusterMigrateCommandRegex:null,s_addClusterPrincipalsCommandRegex:null,s_addClusterJitPrincipalCommandRegex:null,s_dropClusterJitPrincipalCommandRegex:null,s_setClusterPrincipalsCommandRegex:null,s_dropClusterPrincipalsCommandRegex:null,s_setClusterPrincipalsNoneCommandRegex:null,s_dropAccountPrincipalsCommandRegex:null,s_alterServiceConfigurationDetailsKeywordRegex:null,s_alterServiceConfigurationPropertiesKeywordRegex:null,s_loadBalancerKeywordRegex:null,s_yieldPipeOptionRegex:null,s_cancelServiceOperationRegex:null,s_showSubscriptionCommandRegex:null,s_showServiceSecurityRulesOperationRegex:null,s_notifyCommandRegex:null,s_setSkuAvailabilityRegex:null,s_setSynapseMockedSettingsRegex:null,s_setSkuAvailabilityValuesRegex:null,s_setSkuAvailabilityWithOptionsRegex:null,s_sharedIdentityRegex:null,s_setRegionVisibilityWithOptionsRegex:null,s_registerFeatureRegex:null,s_createResourcesForBillingServiceRegex:null,s_putClientSubscriptionsNotificationRegex:null,s_setSynapseMockedRbacRegex:null,s_syncKustoPoolCommandRegex:null,s_tridentServiceShowByResourceIdCommandRegex:null,s_showResourceCommandRegex:null,s_showResourceMetricsCommandPropertiesSuffixRegex:null,s_showResourceMetricsCommandRegex:null,s_publishAzureMonitorManifestCommandRegex:null,s_checkinAzureMonitorManifestCommandRegex:null,s_migrateVirtualClusterCommandRegex:null,s_migrateVirtualClusterEventHubStorageCommandRegex:null,s_scaleTridentClusterCommandRegex:null,s_alterVirtualClusterLimitsLevelCommandRegex:null,s_commandColumnNamesAfterPipeRegex:null,s_commandContext_Show:null,s_twoOrMoreSpacesRegex:null,s_removeStringLiteralsRegex:null,s_removeEntityNamesLiteralsRegex:null,s_removeServiceNameRegex:null,s_reservedServiceSuffixesRegex:null,s_removeAccountNameRegex:null,s_removeDatabaseNameRegex:null,s_moveServiceToMaintenanceModeRegex:null,s_cancelServiceMaintenanceModeRegex:null,s_syncKeyVaultCertificateRegex:null,s_KeyVaultRotateCertificateRegex:null,s_scaleUnallocatedVirtuaClustersPoolRegex:null,s_allocateVirtualClusterCommandOptions:null,s_adminOperationOptions:null,s_operatorOptions:null,s_showCommandOptions:null,s_updateCommandOptions:null,s_updateServiceCommandOptions:null,s_suspendServiceCommandOptions:null,s_showFabricCommandOptions:null,s_rotateCommandOptions:null,s_registerCommandOptions:null,s_putCommandOptions:null,s_listCommandOptions:null,s_listKustoPoolsServicesPropertiesSuffixOptions:null,s_syncCommandOptions:null,s_checkinCommandOptions:null,s_showRegionsByHostersOptions:null,s_scaleCommandOptions:null,s_showTridentCmServicesOptions:null,s_moveServiceToMaintenanceModeOptions:null,s_cancelServiceMaintenanceModeOptions:null,s_generateCommandOptions:null,s_publishCommandOptions:null,s_unPublishCommandOptions:null,s_uninstallCommandOptions:null,s_alterCommandOptions:null,s_addCommandOptions:null,s_removeCommandOptions:null,s_dropCommandOptions:null,s_setCommandOptions:null,s_createCommandOptions:null,s_createExternalCommandOptions:null,s_createDatabsaeScriptInServiceCommandOption:null,s_deleteCommandOptions:null,s_moveCommandOptions:null,s_migrateCommandOptions:null,s_exportCommandOptions:null,s_detachCommandOptions:null,s_pccodeKeywordOptions:null,s_checkCommandOptions:null,s_serviceKeywordOptions:null,s_activationKeywordOptions:null,s_ingestLogsIntoCommandOptions:null,s_showClusterKeywordOptions:null,s_operationsKeywordOptions:null,s_orchestrationKeywordOptions:null,s_showPrincipalRolesKeywordOptions:null,s_showServiceCommandOptions:null,s_alterServiceCommandOptions:null,s_removeServiceCommandOptions:null,s_showCmServiceCommandOptions:null,s_showClusterClusterNameOptions:null,s_showClusterClientSubscriptionOptions:null,s_showAccountCommandOptions:null,s_moveAccountCommandOptions:null,s_moveAccountSubscriptionCommandOptions:null,s_showTargetServiceCommandOptions:null,s_fromKeywordOptions:null,s_alterServiceConfigurationKeywordOptions:null,s_toKeywordOptions:null,s_moveServiceOptions:null,s_suspendServiceAdminNodeOptions:null,s_addSetDropPrincipalsKeywordOptions:null,s_addDropJitPrincipalsKeywordOptions:null,s_dropAccountPrincipalsKeywordOptions:null,s_setNoneKeywordOptions:null,s_showServicesCompletionKeywordsOptions:null,s_showAccountsKeywordOptions:null,s_dmServiceAddKeywordOptions:null,s_dmServiceShowKeywordOptions:null,s_dmServiceAlterKeywordOptions:null,s_dmServiceDropKeywordOptions:null,s_keysKeywordOptions:null,s_keyTypesKeywordOptions:null,s_notifyKeywordOptions:null,s_executeCommandOptions:null,s_executeJobCommandOptions:null,s_serviceConfigurationPropertyDropKeywordOptions:null,s_serviceConfigurationPropertySetKeywordOptions:null,s_withConsentKeywordOptions:null,s_storageAccountsKeywordOptions:null,s_serviceRegenerateKeywordOptions:null,s_accountAlterOperationsOptions:null,s_accountRenameOperationsOptions:null,s_accountAddOperationsOptions:null,s_accountRemoveOperationsOptions:null,s_accountSetOperationsOptions:null,s_serviceAlterOperationsOptions:null,s_serviceRotateOperationsOptions:null,s_servicePublishOperationsOptions:null,s_serviceUnPublishOperationsOptions:null,s_inServiceKeywordOptions:null,s_addServiceServiceNameOptions:null,s_metadataKeywordOptions:null,s_summaryKeywordOptions:null,s_summaryOrMetadataKeywordOptions:null,s_versionKeywordOptions:null,s_withPropertiesSuffixOptions:null,s_alterServiceStorageAccountsSuffixOptions:null,s_withEventHubProperties:null,s_withCosmosDbDataConnectionProperties:null,s_withSkuAvailabilityProperties:null,s_withAlterVirtualClusterLimitsLevelProperties:null,s_regionVisibilityProperties:null,s_installCommandOptions:null,s_uninstallRunnersSyntheticsCommandOptions:null,s_migrateServiceCommandOptions:null,s_migrateClusterCommandOptions:null,s_fromServiceKeywordOptions:null,s_byResourceIdKeywordOptions:null,s_toServiceKeywordOptions:null,s_createDatabaseCommandOptions:null,s_createServiceCommandOptions:null,s_addKeywordOptions:null,s_alterServiceConfigurationPropertiesOptions:null,s_alterServiceConfigurationCommandOptions:null,s_loadBalancerKeywordOptions:null,s_operationKeywordOptions:null,s_showSubscriptionCommandOptions:null,s_showServiceSecurityRulesCommandOptions:null,s_trueFalseKeywordOptions:null,s_skuAvailabilityKeywordOptions:null,s_exportPackageForOptions:null,s_exportPackageForServiceTypeOptions:null,s_sharedIdentityOptions:null,s_registerFeatureCommandOptions:null,s_putClientSubscriptionsNotficationCommandOptions:null,s_syncKustoPoolCommandOptions:null,s_showResourceSuffixOptions:null,s_showResourceMetricsCommandPropertiesSuffixOptions:null,s_showAzureMonitorManifestCommandPropertiesSuffixOptions:null,s_publishAzureMonitorManifestCommandPropertiesSuffixOptions:null,s_checkinAzureMonitorManifestCommandPropertiesSuffixOptions:null,s_migrateVirtualClusterCommandSuffixOptions:null,s_scaleTridentClusterCommandSuffix:null,s_singleParamFunctions:null,s_twoParamFunctions:null,s_threeParamFunctions:null,s_manyParamFunctions:null},ctors:{init:function(){this.s_lineWithDotBeginningRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_allocateVirtualClusterCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.allocate\\\\s+(trident\\\\s+)?virtual\\\\s+cluster\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_showCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.show\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_suspendCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.suspend\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_showFabricCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.show\\\\s+fabric\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_rotateCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.rotate\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_generateCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.generate\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_publishCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.publish\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_unPublishCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.unpublish\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_afterPipeRegex=new System.Text.RegularExpressions.Regex.ctor(\"\\\\|\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_alterCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.alter\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_removeCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.remove\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_setCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.set\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_createCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.create\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_deleteCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.delete\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_detachCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.detach\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_checkCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.check\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_addCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.add\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_dropCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.drop\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_moveCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.move\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_migrateCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.migrate\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_uninstallCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.uninstall\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_registerCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.register\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_putCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.put\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_listCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.list\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_listKustoPoolsServicesCommandPropertiesSuffixRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.list\\\\s+kustopools\\\\s+services\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_syncCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.sync\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_exportCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.export\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_exportPackageForOptionsRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.export\\\\s+package\\\\s+for\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_exportPackageForProductVersionOptionsRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.export\\\\s+package\\\\s+for\\\\s+\\\\S+\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_executeCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.execute\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_executeJobCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.execute\\\\s+job\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_activationCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.(resume|suspend)(\\\\s+trident)?\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_serviceCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.(reallocate|restart|reimage|rebuild|stop|install|deploy|reinstall|recycle|ingest|migrate|cancel|regenerate)\\\\s+$|^\\\\s*\\\\.ingest\\\\s+service\\\\s+\\\\S+\\\\s+storage\\\\s+logs\\\\s+into\\\\s$|^\\\\s*\\\\.show\\\\s+cm\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_ingestLogsIntoCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.ingest\\\\s+service\\\\s+\\\\S+\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_showClusterOptionsCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.show\\\\s+cluster\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_operationsCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.show\\\\s+(running|completed|failed)\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_resultsCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.show\\\\s+(trident\\\\s+)?operations\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_orchestrationCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.show\\\\s+orchestration\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_orchestrationTaskHubCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.show\\\\s+orchestration\\\\s+\\\\S+\\\\s+\\\\S+\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_showAccountCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.show\\\\s+account\\\\s+\\\\[.*?\\\\]\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_moveAccountCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.move\\\\s+account\\\\s+\\\\[[^\\\\]]*?\\\\]\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_fromServiceKeywordRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.move\\\\s+database\\\\s+\\\\S+\\\\s+$|^\\\\s*\\\\.create\\\\s+(trident\\\\s+)?follower\\\\s+database\\\\s+\\\\S+\\\\s+in\\\\s+service\\\\s+\\\\S+\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_moveDatabaseFromServiceCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.move\\\\s+database\\\\s+\\\\S+\\\\s+from\\\\s+service\\\\s+\\\\S+\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_moveAccountSubscriptionCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.move\\\\s+account\\\\s+(\\\\S+|\\\\[.*?\\\\])\\\\s+subscription\\\\s+\\\\S+\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_moveServiceConfigurationCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.move\\\\s+service\\\\s+\\\\S+\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_suspendTargetServiceCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.suspend\\\\s+service\\\\s+\\\\S+\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_showTargetServiceCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.show\\\\s+service\\\\s(?!versions|model|(packages configuration)\\\\b)\\\\S+\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_keysCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.show\\\\s+service\\\\s+\\\\S+\\\\s+storage\\\\s+accounts\\\\s+$|^\\\\s*\\\\.regenerate\\\\s+service\\\\s+\\\\S+\\\\s+storage\\\\s+accounts\\\\s+(primary|secondary)\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_alterServiceStorageAccountsCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.alter\\\\s+service\\\\s+\\\\S+\\\\s+storage\\\\s+accounts\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_toKeywordCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.alter\\\\s+service\\\\s+\\\\S+\\\\s+storage\\\\s+accounts\\\\s+keys\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_storageAccountsKeywordRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.recycle\\\\s+service\\\\s+\\\\S+\\\\s+$|^\\\\s*\\\\.add\\\\s+service\\\\s+\\\\S+\\\\s+database\\\\s+\\\\S+\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_regenerateServiceKeywordRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.regenerate\\\\s+service\\\\s+\\\\S+\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_keyTypesKeywordRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.regenerate\\\\s+service\\\\s+\\\\S+\\\\s+storage\\\\s+accounts\\\\s+$|^\\\\s*\\\\.alter\\\\s+service\\\\s+\\\\S+\\\\s+storage\\\\s+accounts\\\\s+keys\\\\s+to\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_alterServicePackagesConfigurationCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.alter\\\\s+service\\\\s+((?!packages)\\\\S+|\\\\[.*?\\\\])\\\\s+configuration\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_fromAccountKeywordRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.alter\\\\s+account\\\\s+(\\\\S+|\\\\[.*?\\\\])\\\\s+configuration\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_showCmServiceCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.show\\\\s+cm\\\\s+service\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_showClusterClientRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.show\\\\s+cluster\\\\s+((?!monitoring\\\\b)(?!principals\\\\b)\\\\S+|\\\\[.*?\\\\])\\\\s$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_showClusterClientSubscriptionCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.show\\\\s+cluster\\\\s+(\\\\S+|\\\\[.*?\\\\])\\\\s+client\\\\s$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_showClusterClusterNamePrincipalCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.show\\\\s+cluster\\\\s+(\\\\S+|\\\\[.*?\\\\])\\\\s+principal\\\\s+(\\\\S+|\\\\[.*?\\\\])\\\\s$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_showAuditLogCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.show\\\\s+(service|account)\\\\s+\\\\S+\\\\s+audit\\\\s+log\\\\s+$|^\\\\s*\\\\.show\\\\s+audit\\\\s+log\\\\s+by\\\\s+clientactivityid\\\\s+\\\\S+\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_showAuditLogFromCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.show\\\\s+(service|account)\\\\s+\\\\S+\\\\s+audit\\\\s+log\\\\s+from\\\\s+\\\\S+\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_configurationKeywordRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.show\\\\s+(trident\\\\s+)?services\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_showRegionsByHostersKeywordRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.show\\\\s+regions\\\\s+by\\\\s+hosters\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_showTridentCmServicesKeywordRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.show\\\\s+trident\\\\s+cm\\\\s+services+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_showPrincipalRolesCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.show\\\\s+principal\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_showAccountsKeywordRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.show\\\\s+accounts\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_dmServiceAddKeywordRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.add\\\\s+((trident\\\\s+)?virtual\\\\s+)?dm\\\\s+service\\\\s+\\\\S+\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_dmServiceAlterKeywordRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.alter\\\\s+dm\\\\s+service\\\\s+\\\\S+\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_dmServiceAlterSettingsRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.alter\\\\s+dm\\\\s+service\\\\s+\\\\S+\\\\s+settings\\\\s+\\\\S+\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_dmServiceDropKeywordRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.drop\\\\s+(trident\\\\s+virtual\\\\s+)?dm\\\\s+service\\\\s+\\\\S+\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_dmServiceShowKeywordRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.show\\\\s+(trident\\\\s+virtual\\\\s+|virtual\\\\s+)?dm\\\\s+service\\\\s+\\\\S+\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_configurationPropertySetKeywordRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.set\\\\s+service\\\\s+\\\\S+\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_toStringKeywordRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.set\\\\s+service\\\\s+\\\\S+\\\\s+\\\\S+\\\\s+$|^\\\\s*\\\\.set\\\\s+account\\\\s+\\\\[.*?\\\\]\\\\s+(division|servicetree)\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_configurationPropertyWithConsentKeywordRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.set\\\\s+service\\\\s+\\\\S+\\\\s+(?i)InstancesCount\\\\s+(auto|to\\\\s+\\\\S+)\\\\s+$|^\\\\s*\\\\.set\\\\s+service\\\\s+\\\\S+\\\\s+(?i)VmSize\\\\s+to\\\\s+\\\\S+\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_addKeywordRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.set\\\\s+service\\\\s+\\\\S+\\\\s+NumberOfDatabaseStorageAccounts\\\\s+to\\\\s+\\\\S+\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_configurationPropertyDropKeywordRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.drop\\\\s+service\\\\s+\\\\S+\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_accountRenameOperationsKeywordRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.rename\\\\s+account\\\\s+(\\\\S+|\\\\[.*?\\\\])\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_accountAlterOperationsKeywordRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.alter\\\\s+account\\\\s+\\\\[.*?\\\\]\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_accountSubscriptionAlterKeywordRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.alter\\\\s+account\\\\s+\\\\[.*?\\\\]\\\\s+subscription\\\\s+\\\\S+\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_accountAddOperationsKeywordRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.add\\\\s+account\\\\s+\\\\[.*?\\\\]\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_accountRemoveOperationsKeywordRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.remove\\\\s+account\\\\s+\\\\[.*?\\\\]\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_accountSetOperationsKeywordRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.set\\\\s+account\\\\s+\\\\[.*?\\\\]\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_serviceAlterOperationsKeywordRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.alter\\\\s+service\\\\s+\\\\S+\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_serviceRotateOperationsKeywordRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.rotate\\\\s+service\\\\s+\\\\S+\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_servicePublishOperationsKeywordRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.publish\\\\s+service\\\\s+\\\\S+\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_serviceUnPublishOperationsKeywordRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.unpublish\\\\s+service\\\\s+\\\\S+\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_serviceUnPublishFromRegistryOperationsKeywordRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.unpublish\\\\s+service\\\\s+\\\\S+\\\\s+from\\\\s+registry\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_inServiceKeywordRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.delete\\\\s+(trident\\\\s+)?database\\\\s+\\\\S+\\\\s+$|^\\\\s*\\\\.create\\\\s+(trident\\\\s+)?database\\\\s+\\\\S+\\\\s+ifNotExists\\\\s+$|^\\\\s*\\\\.detach\\\\s+(trident\\\\s+)?follower\\\\s+database\\\\s+\\\\S+\\\\s+$|^\\\\s*\\\\.create\\\\s+(trident\\\\s+)?follower\\\\s+database\\\\s+\\\\S+\\\\s+$|^\\\\s*\\\\.create\\\\s+database\\\\s+script\\\\s+\\\\S+\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_databaseKeywordRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.create\\\\s+database\\\\s+script\\\\s+\\\\S+\\\\s+in\\\\s+service\\\\s+\\\\S+\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_createDatabaseCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.create\\\\s+(trident\\\\s+)?database\\\\s+\\\\S+\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_createServiceCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.create\\\\s+service\\\\s+\\\\S+\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_createExternalCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.create\\\\s+external\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_accountNamesCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.(add|remove|alter|rename|show|detach|move|set|drop)\\\\s+account\\\\s+$|^\\\\s*\\\\.move\\\\s+account\\\\s+(\\\\S+|\\\\[.*?\\\\])\\\\s+subscription\\\\s+\\\\S+\\\\s+to\\\\s+account\\\\s+$|^\\\\s*\\\\.rename\\\\s+account\\\\s+(\\\\S+|\\\\[.*?\\\\])\\\\s+to\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_servicesNamesToAppendOptionsCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.show\\\\s+service\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_rotateServicesNamesToAppendOptionsCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.rotate\\\\s+service\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_moveServicesNamesToAppendOptionsCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.move\\\\s+service\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_alterServicesNamesToAppendOptionsCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.alter\\\\s+service\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_publishServicesNamesToAppendOptionsCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.publish\\\\s+service\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_unPublishServicesNamesToAppendOptionsCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.unpublish\\\\s+service\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_removeServicesNamesToAppendOptionsCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.remove\\\\s+service\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_syncKustoPoolServicesNamesToAppendOptionsCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.sync\\\\s+kustopool\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_servicesNamesCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.delete\\\\s+(trident\\\\s+)?database\\\\s+\\\\S+\\\\s+in\\\\s+service\\\\s+$|^\\\\s*\\\\.create\\\\s+(trident\\\\s+)?database\\\\s+\\\\S+\\\\s+(ifNotExists\\\\s+)?in\\\\s+service\\\\s+$|^\\\\s*\\\\.drop\\\\s+trident\\\\s+database\\\\s+\\\\S+\\\\s+policy\\\\s+in\\\\s+service\\\\s+$|^\\\\s*\\\\.update\\\\s+trident\\\\s+database\\\\s+\\\\S+\\\\s+policy\\\\s+in\\\\s+service\\\\s+$|^\\\\s*\\\\.create\\\\s+(trident\\\\s+)?follower\\\\s+database\\\\s+\\\\S+\\\\s+in\\\\s+service\\\\s+$|^\\\\s*\\\\.create\\\\s+(trident\\\\s+)?follower\\\\s+database\\\\s+\\\\S+\\\\s+in\\\\s+service\\\\s+\\\\S+\\\\s+from\\\\s+service\\\\s+$|^\\\\s*\\\\.detach\\\\s+(trident\\\\s+)?follower\\\\s+database\\\\s+\\\\S+\\\\s+in\\\\s+service\\\\s+$|^\\\\s*\\\\.(reallocate|restart|reimage|rebuild|stop|uninstall|install|deploy|reinstall|recycle|set|add|ingest|drop|migrate|cancel|regenerate|update)\\\\s+service\\\\s+$|^\\\\s*\\\\.((resume|suspend)(\\\\s+trident)?|migrate)\\\\s+cluster\\\\s+$|^\\\\s*\\\\.delete\\\\s+(service|cluster|virtual\\\\s+cluster|trident\\\\s+(virtual|physical)\\\\s+cluster)\\\\s+$|^\\\\s*\\\\.(add|drop|alter|show)\\\\s+dm\\\\s+service\\\\s+$|^\\\\s*\\\\.(add|drop|show)\\\\s+trident\\\\s+service\\\\s+$|^\\\\s*\\\\.ingest\\\\s+service\\\\s+\\\\S+\\\\s+storage\\\\s+logs\\\\s+into\\\\s+service\\\\s+$|^\\\\s*\\\\.move\\\\s+database\\\\s+\\\\S+\\\\s+from\\\\s+service\\\\s+$|^\\\\s*\\\\.move\\\\s+database\\\\s+\\\\S+\\\\s+from\\\\s+service\\\\s+\\\\S+\\\\s+to\\\\s+service\\\\s+$|^\\\\s*\\\\.create\\\\s+database\\\\s+script\\\\s+\\\\S+\\\\s+in\\\\s+service\\\\s+$|^\\\\s*\\\\.move\\\\s+service\\\\s+$|^\\\\s*\\\\.sync\\\\s+kustopool\\\\s+$|^\\\\s*\\\\.migrate\\\\s+cluster\\\\s+(to\\\\s+)?$|^\\\\s*\\\\.scale\\\\s+trident\\\\s+cluster\\\\s+$|^\\\\s*\\\\.update\\\\s+trident\\\\s+cluster\\\\s+$|^\\\\s*\\\\.alter\\\\s+virtual\\\\s+cluster\\\\s+\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_withPropertiesSuffixRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.delete\\\\s+(trident\\\\s+)?database\\\\s+\\\\S+\\\\s+in\\\\s+service\\\\s+\\\\S+\\\\s+$|^\\\\s*\\\\.show\\\\s+trident\\\\s+cm\\\\s+services\\\\s+$|^\\\\s*\\\\.create\\\\s+(trident\\\\s+)?database\\\\s+\\\\S+\\\\s+(ifNotExists\\\\s+)?in\\\\s+service\\\\s+\\\\S+\\\\s+$|^\\\\s*\\\\.drop\\\\s+trident\\\\s+database\\\\s+\\\\S+\\\\s+policy\\\\s+in\\\\s+service\\\\s+\\\\S+\\\\s+$|^\\\\s*\\\\.update\\\\s+trident\\\\s+database\\\\s+\\\\S+\\\\s+policy\\\\s+in\\\\s+service\\\\s+\\\\S+\\\\s+$|^\\\\s*\\\\.detach\\\\s+(trident\\\\s+)?follower\\\\s+database\\\\s+\\\\S+\\\\s+in\\\\s+service\\\\s+\\\\S+\\\\s+$|^\\\\s*\\\\.(delete|reallocate|restart|rebuild|reimage|reinstall)\\\\s+service\\\\s+\\\\S+\\\\s+$|^\\\\s*\\\\.create\\\\s+service\\\\s+\\\\S+\\\\s+ifNotExists\\\\s+$|^\\\\s*\\\\.create\\\\s+external\\\\s+cluster\\\\s+\\\\S+\\\\s+$|^\\\\s*\\\\.create\\\\s+synapse\\\\s+cluster\\\\s+\\\\S+\\\\s+$|^\\\\s*\\\\.delete\\\\s+cluster\\\\s+\\\\S+\\\\s+$|^\\\\s*\\\\.delete\\\\s+virtual\\\\s+cluster\\\\s+\\\\S+\\\\s+$|^\\\\s*\\\\.delete\\\\s+trident\\\\s+(virtual|physical)\\\\s+cluster\\\\s+\\\\S+\\\\s+$|^\\\\s*\\\\.(add|drop)\\\\s+((trident\\\\s+)?virtual\\\\s+)?dm\\\\s+service\\\\s+\\\\S+\\\\s+(data obtainer|storage accounts)\\\\s+$|^\\\\s*\\\\.alter\\\\s+dm\\\\s+service\\\\s+\\\\S+\\\\s+storage\\\\s+account\\\\s+\\\\S+\\\\s+$|^\\\\s*\\\\.alter\\\\s+dm\\\\s+service\\\\s+\\\\S+\\\\s+eventhub\\\\s+ingestion\\\\s+source\\\\s+\\\\S+\\\\s+$|^\\\\s*\\\\.alter\\\\s+service\\\\s+packages\\\\s+configuration\\\\s+$|^\\\\s*\\\\.remove\\\\s+service\\\\s+package\\\\s+configuration\\\\s+$|^\\\\s*\\\\.alter\\\\s+sandbox\\\\s+packages\\\\s+configuration\\\\s+$|^\\\\s*\\\\.add\\\\s+account\\\\s\\\\[.*?\\\\]\\\\s+contact\\\\s+$|^\\\\s*\\\\.add\\\\s+service\\\\s+\\\\S+\\\\s+database\\\\s+\\\\S+\\\\s+storage\\\\s+accounts\\\\s+$|^\\\\s*\\\\.alter\\\\s+service\\\\s+\\\\S+\\\\s+storage\\\\s+accounts\\\\s+$|^\\\\s*\\\\.ingest\\\\s+service\\\\s+\\\\S+\\\\s+storage\\\\s+logs\\\\s+into\\\\s+service\\\\s+\\\\S+\\\\s+$|^\\\\s*\\\\.ingest\\\\s+service\\\\s+\\\\S+\\\\s+dsc\\\\s+logs\\\\s+$|^\\\\s*\\\\.install\\\\s+service\\\\s+\\\\S+\\\\s+runners\\\\s+$|^\\\\s*\\\\.install\\\\s+service\\\\s+\\\\S+\\\\s+synthetics\\\\s+$|^\\\\s*\\\\.uninstall\\\\s+service\\\\s+\\\\S+\\\\s+synthetics\\\\s+$|^\\\\s*\\\\.update\\\\s+synthetics\\\\s+packages\\\\s+$|^\\\\s*\\\\.show\\\\s+synthetics\\\\s+information\\\\s+$|^\\\\s*\\\\.alter\\\\s+synthetics\\\\s+information\\\\s+$|^\\\\s*\\\\.migrate\\\\s+service\\\\s+\\\\S+\\\\s+to\\\\s+(AzurePaas1|AzureVMSS)\\\\s+$|^\\\\s*\\\\.move\\\\s+database\\\\s+\\\\S+\\\\s+from\\\\s+service\\\\s+\\\\S+\\\\s+to\\\\s+service\\\\s+\\\\S+\\\\s+$|^\\\\s*\\\\.add\\\\s+cluster\\\\s+((?!admins\\\\b)(?!ops\\\\b)(?!users\\\\b)(?!viewers\\\\b)(?!jitmanagers\\\\b)\\\\S+|\\\\S)\\\\s+principal\\\\s+\\\\S+\\\\s$|^\\\\s*\\\\.drop\\\\s+cluster\\\\s+((?!admins\\\\b)(?!ops\\\\b)(?!users\\\\b)(?!viewers\\\\b)(?!jitmanagers\\\\b)\\\\S+|\\\\S)\\\\s+principal\\\\s+\\\\S+\\\\s$|^\\\\s*\\\\.execute\\\\s+job\\\\s+\\\\S+\\\\s+$|^\\\\s*\\\\.add\\\\s+region\\\\s+(\\\\S+|\\\\[.*?\\\\])\\\\s$|^\\\\s*\\\\.remove\\\\s+region\\\\s+(\\\\S+|\\\\[.*?\\\\])\\\\s$|^\\\\s*\\\\.add\\\\s+service\\\\s+\\\\S+\\\\s+storage\\\\s+accounts\\\\s+$|^\\\\s*\\\\.add\\\\s+subscriptions\\\\s+AutomaticOSUpgradePolicy\\\\s+$|^\\\\s*\\\\.create\\\\s+(trident\\\\s+)?follower\\\\s+database\\\\s+\\\\S+\\\\s+in\\\\s+service\\\\s+\\\\S+\\\\s+from\\\\s+service\\\\s+\\\\S+\\\\s$|^\\\\s*\\\\.alter\\\\s+region\\\\s+(\\\\S+|\\\\[.*?\\\\])\\\\s$|^\\\\s*\\\\.alter\\\\s+keyvault\\\\s+(\\\\S+|\\\\[.*?\\\\])\\\\s$|^\\\\s*\\\\.add\\\\s+client\\\\s+subscriptions\\\\s+(\\\\S+|\\\\[.*?\\\\])\\\\s$|^\\\\s*\\\\.alter\\\\s+client\\\\s+subscriptions\\\\s+(\\\\S+|\\\\[.*?\\\\])\\\\s$|^\\\\s*\\\\.remove\\\\s+client\\\\s+subscriptions\\\\s+(\\\\S+|\\\\[.*?\\\\])\\\\s$|^\\\\s*\\\\.create\\\\s+database\\\\s+script\\\\s+\\\\S+\\\\s+in\\\\s+service\\\\s+\\\\S+\\\\s+database\\\\s+\\\\S+\\\\s+$|^\\\\s*\\\\.scale\\\\s+unallocated\\\\s+virtual\\\\s+clusters\\\\s+pool\\\\s+to\\\\s+\\\\S+\\\\s+$|^\\\\s*\\\\.migrate\\\\s+cluster\\\\s+\\\\S+\\\\s+$|^\\\\s*\\\\.update\\\\s+trident\\\\s+cluster\\\\s+\\\\S+\\\\s+$|^\\\\s*\\\\.allocate\\\\s+virtual\\\\s+cluster\\\\s+$|^\\\\s*\\\\.alter\\\\s+virtual\\\\s+cluster\\\\s+\\\\S+\\\\s+limits\\\\s+level\\\\s+$|^\\\\s*\\\\.create\\\\s+database\\\\s+\\\\S+\\\\s+follower\\\\s+invitation\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_withEventHubPropertiesSuffixRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.add\\\\s+((trident\\\\s+)?virtual\\\\s+)?dm\\\\s+service\\\\s+\\\\S+\\\\s+eventhub\\\\s+(obtainer|ingestion source)\\\\s+\\\\S+\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_withCosmosDbDataConnectionPropertiesSuffixRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.add\\\\s+dm\\\\s+service\\\\s+\\\\S+\\\\s+cosmosdb\\\\s+data connection\\\\s+\\\\S+\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_addServiceServiceNameRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.add\\\\s+service\\\\s+\\\\S+\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_databaseOrAccountNameMetadataKeywordRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.show\\\\s+(trident\\\\s+)?service\\\\s+\\\\S+\\\\s+(database|account)\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_metadataKeywordRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.show\\\\s+service\\\\s+\\\\S+\\\\s+account\\\\s+\\\\S+\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_summaryOrMetadataKeywordRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.show\\\\s+(trident\\\\s+)?service\\\\s+\\\\S+\\\\s+database\\\\s+\\\\S+\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_summaryKeywordRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.show\\\\s+(trident\\\\s+)?service\\\\s+\\\\S+\\\\s+databases\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_versionKeywordRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.show\\\\s+service\\\\s+\\\\S+\\\\s+(database|account)\\\\s+\\\\S+\\\\s+metadata\\\\s+$|^\\\\s*\\\\.show\\\\s+service\\\\s+\\\\S+\\\\s+metadata\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_cloudCreateCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.create\\\\s+cloud\\\\s+\\\\S+\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_regionCreateCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.create\\\\s+region\\\\s+\\\\S+\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_serviceInstallCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.install\\\\s+service\\\\s+\\\\S+\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_serviceDeployCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.deploy\\\\s+service\\\\s+\\\\S+\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_serviceReinstallCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.reinstall\\\\s+service\\\\s+\\\\S+\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_serviceUninstallCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.uninstall\\\\s+service\\\\s+\\\\S+\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_updateCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.update\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_updateServiceCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.update\\\\s+service\\\\s+\\\\S+\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_checkinCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.check in\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_serviceMigrateCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.migrate\\\\s+service\\\\s+\\\\S+\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_clusterMigrateCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.migrate\\\\s+cluster\\\\s+\\\\S+\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_addClusterPrincipalsCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.add\\\\s+cluster\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_addClusterJitPrincipalCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.add\\\\s+cluster\\\\s+((?!admins\\\\b)(?!ops\\\\b)(?!users\\\\b)(?!viewers\\\\b)(?!jitmanagers\\\\b)\\\\S+|\\\\S)\\\\s$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_dropClusterJitPrincipalCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.drop\\\\s+cluster\\\\s+((?!admins\\\\b)(?!ops\\\\b)(?!users\\\\b)(?!viewers\\\\b)(?!jitmanagers\\\\b)\\\\S+|\\\\S)\\\\s$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_setClusterPrincipalsCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.set\\\\s+cluster\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_dropClusterPrincipalsCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.drop\\\\s+cluster\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_setClusterPrincipalsNoneCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.set\\\\s+cluster\\\\s+(admins|ops|users|viewers)\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_dropAccountPrincipalsCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.drop\\\\s+account\\\\s+\\\\S+\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_alterServiceConfigurationDetailsKeywordRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.alter\\\\s+service\\\\s+((?!packages)\\\\S+|\\\\[.*?\\\\])\\\\s+configuration\\\\s+(details\\\\s+)?$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_alterServiceConfigurationPropertiesKeywordRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.alter\\\\s+service\\\\s+(\\\\S+|\\\\[.*?\\\\])\\\\s+configuration\\\\s+(details\\\\s+)?\\\\((\\\\s*\\\\S+\\\\s*=\\\\s*['\\\"].*?['\\\"]\\\\s*)?\\\\s*(,(\\\\s*\\\\S+\\\\s*=\\\\s*['\\\"].*?['\\\"]\\\\s*))*\\\\)\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_loadBalancerKeywordRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.add\\\\s+service\\\\s+\\\\S+\\\\s+to\\\\s+$|^\\\\s*\\\\.drop\\\\s+service\\\\s+\\\\S+\\\\s+from\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_yieldPipeOptionRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.show\\\\s+((ame|corp)\\\\s+)?resources\\\\s+$|^\\\\s*\\\\.show\\\\s+(account|subscription|service|tenant)\\\\s+\\\\S+\\\\s+((ame|corp)\\\\s+)?resources\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_cancelServiceOperationRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.cancel\\\\s+service\\\\s+\\\\S+\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_showSubscriptionCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.show\\\\s+subscription\\\\s+\\\\S+\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_showServiceSecurityRulesOperationRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.show\\\\s+service\\\\s+\\\\S+\\\\s+securityrules\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_notifyCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.notify\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_setSkuAvailabilityRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.set\\\\s+sku\\\\s+\\\\S+\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_setSynapseMockedSettingsRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.set\\\\s+synapse\\\\s+mock\\\\s+settings\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_setSkuAvailabilityValuesRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.set\\\\s+sku\\\\s+\\\\S+\\\\s+availability\\\\s+to\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_setSkuAvailabilityWithOptionsRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.set\\\\s+sku\\\\s+\\\\S+\\\\s+availability\\\\s+to\\\\s+'(true|false)'\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_sharedIdentityRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*(\\\\.assign|\\\\.remove)\\\\s+service\\\\s+\\\\S+\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_setRegionVisibilityWithOptionsRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.set\\\\s+region\\\\s+\\\\S+\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_registerFeatureRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.register\\\\s+feature\\\\s+\\\\S+\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_createResourcesForBillingServiceRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.create\\\\s+resources\\\\s+for\\\\s+billing\\\\s+service\\\\s+\\\\S+\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_putClientSubscriptionsNotificationRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.put\\\\s+client\\\\s+subscriptions\\\\s+\\\\S+\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_setSynapseMockedRbacRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.set\\\\s+synapse\\\\s+mock\\\\s+rbac\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_syncKustoPoolCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.sync\\\\s+kustopool\\\\s+\\\\S+\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_tridentServiceShowByResourceIdCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.show\\\\s+trident\\\\s+services\\\\s+configuration\\\\s+by\\\\s+tenantId\\\\s+\\\\S+\\\\s+(by\\\\s+capacityId\\\\s+\\\\S+\\\\s+)?$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_showResourceCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.show\\\\s+resource\\\\s+(\\\\S+|\\\\[.*?\\\\])\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_showResourceMetricsCommandPropertiesSuffixRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.show\\\\s+resource\\\\s+\\\\S+\\\\s+metrics\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_showResourceMetricsCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.show\\\\s+azure\\\\s+monitor\\\\s+manifest\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_publishAzureMonitorManifestCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.publish\\\\s+azure\\\\s+monitor\\\\s+manifest\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_checkinAzureMonitorManifestCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.check in\\\\s+azure\\\\s+monitor\\\\s+manifest\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_migrateVirtualClusterCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.migrate\\\\s+virtual\\\\s+cluster\\\\s+\\\\S+\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_migrateVirtualClusterEventHubStorageCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.migrate\\\\s+virtual\\\\s+dm\\\\s+service\\\\s+\\\\S+\\\\s+eventhub\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_scaleTridentClusterCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.scale\\\\s+trident\\\\s+cluster\\\\s+\\\\S+\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_alterVirtualClusterLimitsLevelCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.alter\\\\s+virtual\\\\s+cluster\\\\s+\\\\S+\\\\s+limits\\\\s+level\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_commandColumnNamesAfterPipeRegex=new System.Text.RegularExpressions.Regex.ctor(\"(^|\\\\|\\\\s*?)(where)\\\\s+$|(^|\\\\|\\\\s*?)(where)\\\\s+[^\\\\|]+(and|or)\\\\s+$|(^|\\\\|\\\\s*?)project\\\\s+$|(^|\\\\|\\\\s*?)project\\\\s+[^\\\\|]*,\\\\s+$|(^|\\\\|\\\\s*?)project-away\\\\s+$|(^|\\\\|\\\\s*?)project-away\\\\s+[^\\\\|]*,\\\\s+$|(^|\\\\|\\\\s*?)project-rename\\\\s+[^\\\\|]*?\\\\=\\\\s*$|(^|\\\\|\\\\s*?)project-rename\\\\s+[^\\\\|]*,\\\\s+[^\\\\|]*?\\\\=\\\\s*$|(^|\\\\|\\\\s*?)scale\\\\s+[^\\\\|]*?[\\\\=\\\\-\\\\+\\\\/\\\\*]\\\\s*$|(^|\\\\|\\\\s*?)project\\\\s+[^\\\\|]*?\\\\=\\\\s*$|\\\\b(\"+(Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_singleParamFunctions||\"\")+\"\\\\()\\\\s*$|(^|\\\\|\\\\s*?)summarize\\\\s+[^\\\\|]*?by\\\\s+$|(^|\\\\|\\\\s*?)summarize\\\\s+[^\\\\|]*\\\\)\\\\s*,\\\\s+$|(^|\\\\|\\\\s*?)summarize\\\\s+[^\\\\|]*?by\\\\s+(?!bin)[^\\\\|]+,\\\\s+$|(^|\\\\|\\\\s*?)distinct\\\\s+([^\\\\|]+,\\\\s+)?$|(\"+(Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_twoParamFunctions||\"\")+\"\\\\()\\\\s*$|(\"+(Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_threeParamFunctions||\"\")+\"\\\\()\\\\s*$|(\"+(Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_manyParamFunctions||\"\")+\"\\\\()\\\\s*$|(^|\\\\|\\\\s*?)(top\\\\s+\\\\d+|sort|order|reduce)\\\\s+by\\\\s+$|(^|\\\\|\\\\s*?)((top\\\\s+\\\\d+|sort|order).*?by.*?(asc|desc))[ ]+$|(^|\\\\|\\\\s*?)parse\\\\s+(kind\\\\s*=\\\\s*\\\\w+\\\\s*(flags\\\\s*=\\\\s*\\\\w+\\\\s*)?\\\\s*)?\\\\s*$|(^|\\\\|\\\\s*?)render\\\\s+timepivot\\\\s+by(.*,)?\\\\s+$|(^|\\\\|\\\\s*?).*top-hitters.*of\\\\s+$|(^|\\\\|\\\\s*?).*sample-distinct.*of\\\\s+$|(^|\\\\|\\\\s*?)(make-series\\\\s+[^\\\\|]*\\\\bon\\\\s+[^\\\\|]+\\\\s+in\\\\s+range\\\\b\\\\([^\\\\|]+,[^\\\\|]+\\\\,[^\\\\|]+\\\\))\\\\s+by\\\\s+$|(^|\\\\|\\\\s*?)(make-series\\\\s+[^\\\\|]*\\\\bon\\\\s+[^\\\\|]+\\\\s+in\\\\s+range\\\\b\\\\([^\\\\|]+,[^\\\\|]+\\\\,[^\\\\|]+\\\\))\\\\s+by\\\\s+[^\\\\|]+?,\\\\s+$|(^|\\\\|\\\\s*?)(make-series\\\\s+[^\\\\|]*\\\\bon\\\\b)\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_commandContext_Show=new System.Text.RegularExpressions.Regex.ctor(\"^(?<Context>\\\\.show\\\\s+(\\\\w|\\\\[|\\\\]|\\\\-)+(\\\\s+(\\\\w|\\\\[|\\\\]|\\\\-)+)*)\\\\b\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_twoOrMoreSpacesRegex=new System.Text.RegularExpressions.Regex.ctor(\"\\\\s\\\\s+\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_removeStringLiteralsRegex=new System.Text.RegularExpressions.Regex.ctor(\"('.*?'|\\\".*?\\\")\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_removeEntityNamesLiteralsRegex=new System.Text.RegularExpressions.Regex.ctor(\"(\\\\[.*?\\\\])\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_removeServiceNameRegex=new System.Text.RegularExpressions.Regex.ctor(\"service\\\\s+\\\\S+\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_reservedServiceSuffixesRegex=new System.Text.RegularExpressions.Regex.ctor(\"service\\\\s+(versions|model|(packages\\\\s+configuration))\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_removeAccountNameRegex=new System.Text.RegularExpressions.Regex.ctor(\"account\\\\s+\\\\S+\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_removeDatabaseNameRegex=new System.Text.RegularExpressions.Regex.ctor(\"database\\\\s+\\\\S+\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_moveServiceToMaintenanceModeRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.move\\\\s+service\\\\s+\\\\S+\\\\s+to\\\\s+maintenance\\\\s+$|^\\\\s*\\\\.move\\\\s+service\\\\s+\\\\S+\\\\s+database\\\\s+\\\\S+\\\\s+to\\\\s+maintenance\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_cancelServiceMaintenanceModeRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.cancel\\\\s+service\\\\s+\\\\S+\\\\s+maintenance\\\\s+$|^\\\\s*\\\\.cancel\\\\s+service\\\\s+\\\\S+\\\\s+database\\\\s+\\\\S+\\\\s+maintenance\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_syncKeyVaultCertificateRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.sync\\\\s+keyvault\\\\s+certificate\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_KeyVaultRotateCertificateRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.rotate\\\\s+keyvault\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_scaleUnallocatedVirtuaClustersPoolRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.scale\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_allocateVirtualClusterCommandOptions=System.Array.init([],System.String);this.s_adminOperationOptions=System.Array.init([\"show\",\"set\",\"reallocate\",\"restart\",\"reimage\",\"rebuild\",\"create\",\"alter\",\"install\",\"reinstall\",\"add\",\"remove\",\"check\",\"recycle\",\"stop\",\"uninstall\",\"detach\",\"delete\",\"ingest\",\"drop\",\"move\",\"migrate\",\"suspend\",\"resume\",\"cancel\",\"regenerate\",\"notify\",\"execute\",\"generate\",\"publish\",\"unpublish\",\"export\",\"rotate\",\"register\",\"put\",\"list\",\"update\",\"sync\",\"check in\"],System.String);this.s_operatorOptions=System.Array.init([\"where\",\"count\",\"scale\",\"limit\",\"order\",\"project\",\"project-away\",\"project-rename\",\"sort\",\"summarize\",\"take\",\"top\",\"mv-expand\"],System.String);this.s_showCommandOptions=System.Array.init([\"service\",\"services\",\"account\",\"accounts\",\"operations\",\"results\",\"running\",\"completed\",\"failed\",\"version\",\"diagnostics\",\"cluster\",\"unallocated subscriptions\",\"subscription\",\"tenant\",\"principal\",\"resources\",\"ame resources\",\"corp resources\",\"sandbox packages configuration\",\"cm\",\"skus availability\",\"dm service\",\"audit log by clientactivityid\",\"regions\",\"client subscriptions\",\"sharedidentity\",\"arm manifest\",\"arm manifest publish\",\"ephemeral registry\",\"fabric\",\"feature flags\",\"clustermanagementsettings\",\"cloud settings\",\"synthetics information\",\"synthetics pods\",\"synthetics jobGroup\",\"disk encryption set\",\"orchestration\",\"resource\",\"leftover virtual services\",\"trident services configuration by tenantId\",\"azure monitor manifest\",\"trident services\",\"trident service\",\"trident operations\"],System.String);this.s_updateCommandOptions=System.Array.init([\"synthetics packages\",\"service\",\"trident cluster\"],System.String);this.s_updateServiceCommandOptions=System.Array.init([\"in azure\"],System.String);this.s_suspendServiceCommandOptions=System.Array.init([\"service\",\"cluster\"],System.String);this.s_showFabricCommandOptions=System.Array.init([\"locks\",\"clocks\",\"services\",\"nodes\"],System.String);this.s_rotateCommandOptions=System.Array.init([\"service\",\"keyvault\"],System.String);this.s_registerCommandOptions=System.Array.init([\"feature\"],System.String);this.s_putCommandOptions=System.Array.init([\"client subscriptions\"],System.String);this.s_listCommandOptions=System.Array.init([\"kustopools by workspace name\",\"kustopools by workspace id\",\"kustopools services\"],System.String);this.s_listKustoPoolsServicesPropertiesSuffixOptions=System.Array.init([\"with(AccountName='VALUE')\",\"with(ServiceName='VALUE')\",\"with(WorkspaceId='VALUE')\",\"with(AccountName='VALUE', ServiceName='VALUE', WorkspaceId='VALUE')\"],System.String);this.s_syncCommandOptions=System.Array.init([\"kustopool\",\"keyvault policy\"],System.String);this.s_checkinCommandOptions=System.Array.init([\"azure monitor manifest\"],System.String);this.s_showRegionsByHostersOptions=System.Array.init([\"regions\",\"by\",\"hosters\"],System.String);this.s_scaleCommandOptions=System.Array.init([\"unallocated virtual clusters pool to\"],System.String);this.s_showTridentCmServicesOptions=System.Array.init([\"trident\",\"cm\",\"services\"],System.String);this.s_moveServiceToMaintenanceModeOptions=System.Array.init([\"database\"],System.String);this.s_cancelServiceMaintenanceModeOptions=System.Array.init([\"database\"],System.String);this.s_generateCommandOptions=System.Array.init([\"arm manifest\"],System.String);this.s_publishCommandOptions=System.Array.init([\"arm manifest\",\"service\",\"azure monitor manifest\"],System.String);this.s_unPublishCommandOptions=System.Array.init([\"service\"],System.String);this.s_uninstallCommandOptions=System.Array.init([\"service\",\"runners\"],System.String);this.s_alterCommandOptions=System.Array.init([\"service\",\"dm service\",\"account\",\"client subscriptions\",\"region\",\"synthetics information\",\"keyvault\",\"virtual cluster\"],System.String);this.s_addCommandOptions=System.Array.init([\"account\",\"service\",\"trident service\",\"dm service\",\"unallocated subscription\",\"cluster\",\"region\",\"client subscriptions\",\"subscriptions AutomaticOSUpgradePolicy\"],System.String);this.s_removeCommandOptions=System.Array.init([\"account\",\"unallocated subscription\",\"region\",\"service\"],System.String);this.s_dropCommandOptions=System.Array.init([\"dm service\",\"service\",\"cluster\",\"account\",\"trident service\"],System.String);this.s_setCommandOptions=System.Array.init([\"service\",\"account\",\"cluster\",\"sku\",\"region\",\"synapse mock settings\",\"synapse mock rbac\"],System.String);this.s_createCommandOptions=System.Array.init([\"database\",\"trident database\",\"service\",\"account\",\"external\",\"synapse cluster\",\"trident virtual cluster\",\"trident physical cluster\",\"resources for billing service\",\"follower database\",\"trident follower database\",\"database script\"],System.String);this.s_createExternalCommandOptions=System.Array.init([\"cluster\"],System.String);this.s_createDatabsaeScriptInServiceCommandOption=System.Array.init([\"database\"],System.String);this.s_deleteCommandOptions=System.Array.init([\"virtual cluster\",\"trident virtual cluster\",\"trident physical cluster\",\"cluster\",\"database\",\"service\"],System.String);this.s_moveCommandOptions=System.Array.init([\"account\",\"database\",\"service\"],System.String);this.s_migrateCommandOptions=System.Array.init([\"cluster\",\"service\",\"virtual dm service\"],System.String);this.s_exportCommandOptions=System.Array.init([\"service\",\"package for\"],System.String);this.s_detachCommandOptions=System.Array.init([\"account\",\"follower database\",\"trident follower database\"],System.String);this.s_pccodeKeywordOptions=System.Array.init([\"pccode\"],System.String);this.s_checkCommandOptions=System.Array.init([\"service name availability\",\"armaccess (KEY='VALUE')\"],System.String);this.s_serviceKeywordOptions=System.Array.init([\"service\"],System.String);this.s_activationKeywordOptions=System.Array.init([\"cluster\"],System.String);this.s_ingestLogsIntoCommandOptions=System.Array.init([\"storage logs into\",\"dsc logs\"],System.String);this.s_showClusterKeywordOptions=System.Array.init([\"principals\",\"monitoring\"],System.String);this.s_operationsKeywordOptions=System.Array.init([\"operations\"],System.String);this.s_orchestrationKeywordOptions=System.Array.init([\"settings\",\"services\",\"storageaccounts\",\"synapse\"],System.String);this.s_showPrincipalRolesKeywordOptions=System.Array.init([\"roles\",\"@'principal' roles\"],System.String);this.s_showServiceCommandOptions=System.Array.init([\"versions\",\"model\",\"packages configuration\"],System.String);this.s_alterServiceCommandOptions=System.Array.init([\"packages configuration\"],System.String);this.s_removeServiceCommandOptions=System.Array.init([\"package configuration\",\"custom-image\"],System.String);this.s_showCmServiceCommandOptions=System.Array.init([\"in region\"],System.String);this.s_showClusterClusterNameOptions=System.Array.init([\"client\",\"principal\"],System.String);this.s_showClusterClientSubscriptionOptions=System.Array.init([\"subscription\"],System.String);this.s_showAccountCommandOptions=System.Array.init([\"configuration\",\"services\",\"service configurations\",\"subscriptions\",\"principals\",\"contacts\",\"audit log\",\"resources\",\"ame resources\",\"corp resources\"],System.String);this.s_moveAccountCommandOptions=System.Array.init([\"subscription\"],System.String);this.s_moveAccountSubscriptionCommandOptions=System.Array.init([\"to account\"],System.String);this.s_showTargetServiceCommandOptions=System.Array.init([\"configuration\",\"fabriclocks\",\"storage objects\",\"storage account\",\"storage accounts\",\"database\",\"databases\",\"account\",\"metadata\",\"audit log\",\"resources\",\"ame resources\",\"corp resources\",\"securityrules\",\"routetable\",\"virtualnetwork\",\"deployments\",\"deployment\",\"group ids\",\"group id\",\"diagnostic settings\"],System.String);this.s_fromKeywordOptions=System.Array.init([\"from\"],System.String);this.s_alterServiceConfigurationKeywordOptions=System.Array.init([\"details\",\"(KEY='VALUE')\"],System.String);this.s_toKeywordOptions=System.Array.init([\"to\"],System.String);this.s_moveServiceOptions=System.Array.init([\"to cm\",\"engine to v3\",\"to account\",\"to maintenance\"],System.String);this.s_suspendServiceAdminNodeOptions=System.Array.init([\"admin node for\"],System.String);this.s_addSetDropPrincipalsKeywordOptions=System.Array.init([\"admins\",\"ops\",\"users\",\"viewers\",\"jitmanagers\"],System.String);this.s_addDropJitPrincipalsKeywordOptions=System.Array.init([\"principal\"],System.String);this.s_dropAccountPrincipalsKeywordOptions=System.Array.init([\"admins\"],System.String);this.s_setNoneKeywordOptions=System.Array.init([\"none\"],System.String);this.s_showServicesCompletionKeywordsOptions=System.Array.init([\"configuration\",\"in nonregistered subscriptions\",\"excludeVirtualClusters\"],System.String);this.s_showAccountsKeywordOptions=System.Array.init([\"configuration\",\"subscriptions\"],System.String);this.s_dmServiceAddKeywordOptions=System.Array.init([\"data obtainer\",\"storage accounts\",\"eventhub ingestion source\",\"cosmosdb data connection\"],System.String);this.s_dmServiceShowKeywordOptions=System.Array.init([\"cosmosdb data connections\",\"data connections\",\"eventhub ingestion sources\",\"geneva ingestion sources\",\"eventgrid ingestion sources\"],System.String);this.s_dmServiceAlterKeywordOptions=System.Array.init([\"storage account\",\"eventhub ingestion source\"],System.String);this.s_dmServiceDropKeywordOptions=System.Array.init([\"data obtainer\"],System.String);this.s_keysKeywordOptions=System.Array.init([\"keys\"],System.String);this.s_keyTypesKeywordOptions=System.Array.init([\"primary\",\"secondary\"],System.String);this.s_notifyKeywordOptions=System.Array.init([\"cm\",\"synapse pubsub mock\"],System.String);this.s_executeCommandOptions=System.Array.init([\"job\"],System.String);this.s_executeJobCommandOptions=System.Array.init([\"runAll\",\"addMissingZonesInClientSubscriptions\",\"addResourceGroupToSAs\",\"certificateRotationForSuspendedClusters\",\"commitNames\",\"fixEngineUri\",\"forceSkuAvailabilityRefresh\",\"migrateSAsToArm\",\"populateAdditionalResourceSettings\",\"regenerateArmDetails\",\"resetRunCommand\",\"setServicePrincipals\",\"updateSAs\",\"updateStorageAccountsSettings\",\"servicePurgeAllDeletedSecrets\",\"changeAdditionalResourceSettingsForAllKvc\",\"alignedLimitsForAllKvc\",\"cleanupClientSubscriptions\"],System.String);this.s_serviceConfigurationPropertyDropKeywordOptions=System.Array.init([\"AutoscaleSetting\",\"FeatureFlags\",\"from\",\"TableFreshnessTestSettings\",\"uncommitted changes\"],System.String);this.s_serviceConfigurationPropertySetKeywordOptions=System.Array.init([\"InstancesCount\",\"InstancesCount auto\",\"VmSize\",\"AutoscaleSetting\",\"DeploymentRing\",\"DeploymentFreezeEnabled\",\"DeploymentFreezeExpiresOn\",\"FeatureFlags\",\"MonitoringAccount\",\"TableFreshnessTestSettings\",\"Environment\",\"CustomerType\",\"Certificates\",\"DoNotCreateIcmIncidents\",\"DoNotDeploy\",\"DoNotDeployRunners\",\"AdditionalSubscriptions\",\"AriaBridgeConfiguration\",\"AutomaticallyDetachCorruptDatabases\",\"CmSettings\",\"DmSettings\",\"EnableTracePush\",\"SecuritySettings.EnableUnauthenticatedAccess\",\"SecuritySettings.RequireMfa\",\"JitStorageAccountName\",\"KustoExplorerDownloadUri\",\"KustoServiceSettings\",\"ManagementCertificate\",\"ScaleChangesRequireCustomerConsent\",\"EnableSSE\",\"NumberOfDatabaseStorageAccounts\"],System.String);this.s_withConsentKeywordOptions=System.Array.init([\"with consent\"],System.String);this.s_storageAccountsKeywordOptions=System.Array.init([\"storage accounts\"],System.String);this.s_serviceRegenerateKeywordOptions=System.Array.init([\"storage accounts\",\"clusteridmap\",\"arm details\",\"storage accounts keys\",\"storage accounts keys emergency\"],System.String);this.s_accountAlterOperationsOptions=System.Array.init([\"configuration\",\"subscription\",\"tenantId\"],System.String);this.s_accountRenameOperationsOptions=System.Array.init([\"to\"],System.String);this.s_accountAddOperationsOptions=System.Array.init([\"contact\",\"admins\"],System.String);this.s_accountRemoveOperationsOptions=System.Array.init([\"contact\"],System.String);this.s_accountSetOperationsOptions=System.Array.init([\"division\",\"admins\",\"servicetree\"],System.String);this.s_serviceAlterOperationsOptions=System.Array.init([\"configuration\",\"storage account\",\"storage accounts\",\"configuration details\"],System.String);this.s_serviceRotateOperationsOptions=System.Array.init([\"certificate\"],System.String);this.s_servicePublishOperationsOptions=System.Array.init([\"to registry\"],System.String);this.s_serviceUnPublishOperationsOptions=System.Array.init([\"from registry\"],System.String);this.s_inServiceKeywordOptions=System.Array.init([\"in service\"],System.String);this.s_addServiceServiceNameOptions=System.Array.init([\"database\",\"to\",\"storage accounts\",\"custom-image\"],System.String);this.s_metadataKeywordOptions=System.Array.init([\"metadata\"],System.String);this.s_summaryKeywordOptions=System.Array.init([\"summary\"],System.String);this.s_summaryOrMetadataKeywordOptions=System.Array.init([\"summary\",\"metadata\"],System.String);this.s_versionKeywordOptions=System.Array.init([\"version\"],System.String);this.s_withPropertiesSuffixOptions=System.Array.init([\"with(KEY='VALUE')\"],System.String);this.s_alterServiceStorageAccountsSuffixOptions=System.Array.init([\"with(KEY='VALUE')\",\"keys\"],System.String);this.s_withEventHubProperties=System.Array.init([\"with(CreateEventHub='true', PartitionCount='VALUE', TargetDatabase='VALUE')\",\"with(EventHubName='VALUE', EventHubNamespaceConnectionString='VALUE', EventHubConsumerGroupName='VALUE', TargetDatabase='VALUE')\",\"with(IngestionSourceType='IotHub', EventHubName='VALUE', EventHubNamespaceConnectionString='VALUE', EventHubConsumerGroupName='VALUE', PartitionCount='VALUE', TargetDatabase='VALUE')\"],System.String);this.s_withCosmosDbDataConnectionProperties=System.Array.init([\"with(KustoTargetDatabase='VALUE', KustoTargetTable='VALUE', IngestionMappingReference='VALUE', ManagedIdentityResourceId='VALUE', CosmosDbAccountResourceId='VALUE', CosmosDbDatabase='VALUE', CosmosDbContainer='VALUE', RetrievalStartDate='VALUE')\"],System.String);this.s_withSkuAvailabilityProperties=System.Array.init([\"with(location='VALUE')\"],System.String);this.s_withAlterVirtualClusterLimitsLevelProperties=System.Array.init([\"with (limitsLevel='VALUE')\"],System.String);this.s_regionVisibilityProperties=System.Array.init([\"visibility true\",\"visibility false except subscription\"],System.String);this.s_installCommandOptions=System.Array.init([\"with(KEY='VALUE')\",\"runners\",\"synthetics\"],System.String);this.s_uninstallRunnersSyntheticsCommandOptions=System.Array.init([\"with(KEY='VALUE')\",\"runners\",\"synthetics\"],System.String);this.s_migrateServiceCommandOptions=System.Array.init([\"to AzurePaas1\",\"to AzureVMSS\"],System.String);this.s_migrateClusterCommandOptions=System.Array.init([\"to\",\"to zonal\"],System.String);this.s_fromServiceKeywordOptions=System.Array.init([\"from service\"],System.String);this.s_byResourceIdKeywordOptions=System.Array.init([\"by capacityId\"],System.String);this.s_toServiceKeywordOptions=System.Array.init([\"to service\"],System.String);this.s_createDatabaseCommandOptions=System.Array.init([\"in service\",\"ifNotExists\"],System.String);this.s_createServiceCommandOptions=System.Array.init([\"with(KEY='VALUE')\",\"ifNotExists\"],System.String);this.s_addKeywordOptions=System.Array.init([\"add\"],System.String);this.s_alterServiceConfigurationPropertiesOptions=System.Array.init([\"(PropertyPath='PropertyValue')\"],System.String);this.s_alterServiceConfigurationCommandOptions=System.Array.init([\"with(KEY='VALUE')\",\"applynow\"],System.String);this.s_loadBalancerKeywordOptions=System.Array.init([\"load balancer\"],System.String);this.s_operationKeywordOptions=System.Array.init([\"operation\",\"maintenance\"],System.String);this.s_showSubscriptionCommandOptions=System.Array.init([\"resources\",\"ame resources\",\"corp resources\"],System.String);this.s_showServiceSecurityRulesCommandOptions=System.Array.init([\"inbound\",\"outbound\"],System.String);this.s_trueFalseKeywordOptions=System.Array.init([\"'true'\",\"'false'\"],System.String);this.s_skuAvailabilityKeywordOptions=System.Array.init([\"availability to\"],System.String);this.s_exportPackageForOptions=System.Array.init([\"Engine\",\"DataManagement\",\"ClusterManagement\",\"Bridge\",\"ResourceProvider\",\"Billing\",\"Gaia\",\"HealthSuite\",\"Flighting\",\"SaasResourceProvider\",\"Dashboard\",\"ServiceProbe\"],System.String);this.s_exportPackageForServiceTypeOptions=System.Array.init([\"ProductVersion=''\"],System.String);this.s_sharedIdentityOptions=System.Array.init([\"sharedidentity\"],System.String);this.s_registerFeatureCommandOptions=System.Array.init([\"subscriptions\"],System.String);this.s_putClientSubscriptionsNotficationCommandOptions=System.Array.init([\"notification\"],System.String);this.s_syncKustoPoolCommandOptions=System.Array.init([\"rbac\"],System.String);this.s_showResourceSuffixOptions=System.Array.init([\"metrics definitions\",\"metrics\"],System.String);this.s_showResourceMetricsCommandPropertiesSuffixOptions=System.Array.init([\"definitions\",\"with(aggregation='VALUE', metricnames='VALUE')\"],System.String);this.s_showAzureMonitorManifestCommandPropertiesSuffixOptions=System.Array.init([\"with(resourceTypeName='VALUE', environment='VALUE')\"],System.String);this.s_publishAzureMonitorManifestCommandPropertiesSuffixOptions=System.Array.init([\"with(resourceTypeName='VALUE', environment='VALUE', deploymentPhase='VALUE')\"],System.String);this.s_checkinAzureMonitorManifestCommandPropertiesSuffixOptions=System.Array.init([\"with(resourceTypeName='VALUE', environment='VALUE')\"],System.String);this.s_migrateVirtualClusterCommandSuffixOptions=System.Array.init([\"to dedicated storage accounts\"],System.String);this.s_scaleTridentClusterCommandSuffix=System.Array.init([\"to virtual\",\"to physical\"],System.String);this.s_singleParamFunctions=Bridge.toArray(System.Linq.Enumerable.from(Kusto.Data.IntelliSense.CslCommandParser.SingleParameterFunctionsTokens,System.String).union(Kusto.Data.IntelliSense.CslCommandParser.SummarizeAggregationSingleParameterTokens)).join(\"\\\\(|\");this.s_twoParamFunctions=Bridge.toArray(System.Linq.Enumerable.from(Kusto.Data.IntelliSense.CslCommandParser.TwoParameterFunctionsTokens,System.String).union(Kusto.Data.IntelliSense.CslCommandParser.SummarizeAggregationTwoParametersTokens)).join(\"\\\\(|\");this.s_threeParamFunctions=Bridge.toArray(System.Linq.Enumerable.from(Kusto.Data.IntelliSense.CslCommandParser.ThreeParameterFunctionsTokens,System.String).union(Kusto.Data.IntelliSense.CslCommandParser.SummarizeAggregationThreeParametersTokens)).join(\"\\\\(|\");this.s_manyParamFunctions=Bridge.toArray(System.Linq.Enumerable.from(Kusto.Data.IntelliSense.CslCommandParser.ManyParametersFunctionsTokens,System.String).union(Kusto.Data.IntelliSense.CslCommandParser.SummarizeAggregationManyParametersTokens)).join(\"(\\\\(|[^\\\\)]+,)|\")}},methods:{ResolveContextUsingRegex:function(command){if(System.String.startsWith(System.String.trimStart(command),\"|\",4))return null;var context=null,contextMatch=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_commandContext_Show.match(command);return contextMatch.getSuccess()&&(context=contextMatch.getGroups().getByName(\"Context\").toString(),context=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_removeStringLiteralsRegex.replace(context,\"\"),context=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_removeEntityNamesLiteralsRegex.replace(context,\"\"),Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_reservedServiceSuffixesRegex.isMatch(context)||(context=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_removeServiceNameRegex.replace(context,\"service\")),context=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_removeAccountNameRegex.replace(context,\"account\"),context=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_removeDatabaseNameRegex.replace(context,\"database\"),context=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_twoOrMoreSpacesRegex.replace(context,\" \")),context}}},props:{ColumnMappingsToTables:null,OverridingColumnMapping:null},ctors:{$ctor1:function(accounts,services,connectionContext){connectionContext===void 0&&(connectionContext=null);var $t;this.$initialize();Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.ctor.call(this);this.Locker;(this.CommandRules==null||this.GeneralRules==null)&&this.LoadRulesUnderLock(accounts,services);this.CommandToolTips==null&&this.LoadCommandToolTips();this.ContextConnection=($t=connectionContext,$t!=null?$t:\"\")},ctor:function(other){var $t;this.$initialize();Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.ctor.call(this);this.ContextConnection=other.ContextConnection;this.Initialize();other.Locker;Kusto.Cloud.Platform.Utils.ExtendedEnumerable.SafeFastAny$4(Kusto.Data.IntelliSense.IntelliSenseRule,other.CommandRules)&&this.CommandRules.AddRange(other.CommandRules);Kusto.Cloud.Platform.Utils.ExtendedEnumerable.SafeFastAny$4(Kusto.Data.IntelliSense.IntelliSenseRule,other.GeneralRules)&&this.GeneralRules.AddRange(other.GeneralRules);Kusto.Cloud.Platform.Utils.ExtendedEnumerable.SafeFastAny$2(Kusto.Data.IntelliSense.IntelliSenseCommandTip,other.CommandToolTips)&&(this.CommandToolTips=($t=Kusto.Data.IntelliSense.IntelliSenseCommandTip,System.Linq.Enumerable.from(other.CommandToolTips,$t).toList($t)));Kusto.Cloud.Platform.Utils.ExtendedEnumerable.SafeFastAny$4(Kusto.Data.IntelliSense.IntelliSenseRule,other.QueryParametersRules)&&this.QueryParametersRules.AddRange(other.QueryParametersRules)}},methods:{Initialize:function(){Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.prototype.Initialize.call(this);this.OverridingColumnMapping=new(System.Collections.Generic.Dictionary$2(Kusto.Data.IntelliSense.KustoCommandContext,System.Collections.Generic.List$1(System.String)).ctor)},ResetState:function(){Kusto.Cloud.Platform.Utils.ExtendedEnumerable.SafeFastAny$1(System.Collections.Generic.KeyValuePair$2(Kusto.Data.IntelliSense.KustoCommandContext,System.Collections.Generic.List$1(System.String)),this.OverridingColumnMapping)&&this.OverridingColumnMapping.clear()},AnalyzeCommand$1:function(statement,cachedReference){var result=new Kusto.Data.IntelliSense.AnalyzedCommand;return result.Command=statement,result.Context=this.ResolveContextFromCommand(statement),result},AnalyzeCommand:function(command,appendingPart){var $t;return $t=new Kusto.Data.IntelliSense.AnalyzedCommand,$t.Command=(command.Command||\"\")+(appendingPart||\"\"),$t.Context=Kusto.Data.IntelliSense.KustoCommandContext.Empty,$t},UpdateProviderAvailableEntities:function(command,commandContext){var entities=new(System.Collections.Generic.List$1(System.String).ctor),context=new Kusto.Data.IntelliSense.KustoCommandContext(commandContext.Context);this.ColumnMappingsToTables.containsKey(context)&&(entities=this.ColumnMappingsToTables.getItem(context));this.OverridingColumnMapping.setItem(context,entities)},Clone:function(){return new Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.ctor(this)},ResolveContextFromCommand:function(command){if(System.String.isNullOrWhiteSpace(command))return Kusto.Data.IntelliSense.KustoCommandContext.Empty;var context=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.ResolveContextUsingRegex(command);return System.String.isNullOrEmpty(context)?Kusto.Data.IntelliSense.KustoCommandContext.Empty:new Kusto.Data.IntelliSense.KustoCommandContext(context)},LoadRulesUnderLock:function(accounts,services){var $t,$t1,accountNames,servicesNames,servicesAndOptionsTokens,alterServicesAndOptionsTokens,removeServicesAndOptionsTokens;this.CommandRules=new(System.Collections.Generic.List$1(Kusto.Data.IntelliSense.IntelliSenseRule).ctor);this.GeneralRules=new(System.Collections.Generic.List$1(Kusto.Data.IntelliSense.IntelliSenseRule).ctor);this.QueryParametersRules=new(System.Collections.Generic.List$1(Kusto.Data.IntelliSense.IntelliSenseRule).ctor);this.OverridingColumnMapping=new(System.Collections.Generic.Dictionary$2(Kusto.Data.IntelliSense.KustoCommandContext,System.Collections.Generic.List$1(System.String)).ctor);this.InitializeCommandColumnMappings();accountNames=System.Linq.Enumerable.from(accounts,Kusto.Data.IntelliSense.KustoIntelliSenseAccountEntity).select($asm.$.Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.f1).toList(System.String);accountNames.Sort();servicesNames=System.Linq.Enumerable.from(services,Kusto.Data.IntelliSense.KustoIntelliSenseServiceEntity).select($asm.$.Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.f2).toList(System.String);servicesNames.Sort();this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldServiceMoveToMaintenance,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_moveServiceToMaintenanceModeRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_moveServiceToMaintenanceModeOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldServiceCancelMaintenance,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_cancelServiceMaintenanceModeRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_cancelServiceMaintenanceModeOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldSyncKeyVaultCertificate,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_syncKeyVaultCertificateRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_withPropertiesSuffixOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldRegionKeyVaultRotateCertificate,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_KeyVaultRotateCertificateRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_withPropertiesSuffixOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldWithUnallocatedVirtualClustersPoolScaleSuffix,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_scaleUnallocatedVirtuaClustersPoolRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_scaleCommandOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldShowRegionsByHosters,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_showRegionsByHostersKeywordRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_showRegionsByHostersOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldWithPropertiesSuffix,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_showTridentCmServicesKeywordRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_withPropertiesSuffixOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldAdminCommandsOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_lineWithDotBeginningRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Command,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_adminOperationOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldOperatorsAfterPipe,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_afterPipeRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Operator,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_operatorOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldShowCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_showCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_showCommandOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldServiceOrClusterKeywordOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_suspendCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_suspendServiceCommandOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldsAllocateVirtualClusterOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_allocateVirtualClusterCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_withPropertiesSuffixOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldShowFabricCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_showFabricCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_showFabricCommandOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldRotateCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_rotateCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_rotateCommandOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldServicesNames,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_rotateServicesNamesToAppendOptionsCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,servicesNames),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldRotateServiceCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_serviceRotateOperationsKeywordRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_serviceRotateOperationsOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldServicesNames,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_moveServicesNamesToAppendOptionsCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,servicesNames),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldGenerateCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_generateCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_generateCommandOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldPublishCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_publishCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_publishCommandOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldServicesNames,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_publishServicesNamesToAppendOptionsCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,servicesNames),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldPublishServiceCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_servicePublishOperationsKeywordRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_servicePublishOperationsOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldUnPublishCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_unPublishCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_unPublishCommandOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldServicesNames,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_unPublishServicesNamesToAppendOptionsCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,servicesNames),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldUnPublishServiceCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_serviceUnPublishOperationsKeywordRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_serviceUnPublishOperationsOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.GeneralRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldWithPropertiesSuffix,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_serviceUnPublishFromRegistryOperationsKeywordRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_withPropertiesSuffixOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldAlterCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_alterCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_alterCommandOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldSetCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_setCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_setCommandOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldRemoveCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_removeCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_removeCommandOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldAddServiceServiceNameOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_addServiceServiceNameRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_addServiceServiceNameOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldMetadataKeywordOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_metadataKeywordRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_metadataKeywordOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldSummaryOrMetadataKeywordOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_summaryOrMetadataKeywordRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_summaryOrMetadataKeywordOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldSummaryKeywordOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_summaryKeywordRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_summaryKeywordOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldDatabaseOrAccountMetadataKeywordOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_databaseOrAccountNameMetadataKeywordRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_metadataKeywordOptions),$t.DefaultBeforeApplyPolicy=($t1=new Kusto.Data.IntelliSense.ApplyPolicy,$t1.Text=\"[] \",$t1),$t.DefaultAfterApplyPolicy=($t1=new Kusto.Data.IntelliSense.ApplyPolicy,$t1.Text=\" \",$t1.OffsetPosition=-11,$t1),$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldVersionKeywordOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_versionKeywordRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_versionKeywordOptions),$t.DefaultAfterApplyPolicy=($t1=new Kusto.Data.IntelliSense.ApplyPolicy,$t1.Text=\" ''\",$t1.OffsetPosition=-1,$t1),$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldFromServiceKeywordOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_fromServiceKeywordRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_fromServiceKeywordOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldDatabaseMoveFromServiceCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_moveDatabaseFromServiceCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_toServiceKeywordOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldDatabaseCreateCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_createDatabaseCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_createDatabaseCommandOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldServiceCreateCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_createServiceCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_createServiceCommandOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldAddCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_addCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_addCommandOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldDropCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_dropCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_dropCommandOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldMoveCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_moveCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_moveCommandOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldMigrateCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_migrateCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_migrateCommandOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldExportCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_exportCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_exportCommandOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldExportPackageForOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_exportPackageForOptionsRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_exportPackageForOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldExportPackageForServiceTypeOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_exportPackageForProductVersionOptionsRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_exportPackageForServiceTypeOptions),$t.DefaultAfterApplyPolicy=($t1=new Kusto.Data.IntelliSense.ApplyPolicy,$t1.Text=\"\",$t1.OffsetPosition=-1,$t1),$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldOperationKeywordOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_cancelServiceOperationRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_operationKeywordOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldIngestLogsIntoKeywordsOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_ingestLogsIntoCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_ingestLogsIntoCommandOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldCreateCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_createCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_createCommandOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldCreateExternalCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_createExternalCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_createExternalCommandOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldExecuteCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_executeCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_executeCommandOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldExecuteJobCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_executeJobCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_executeJobCommandOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldDeleteCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_deleteCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_deleteCommandOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldDetachCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_detachCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_detachCommandOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldRegisterCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_registerCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_registerCommandOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldPutCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_putCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_putCommandOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldListCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_listCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_listCommandOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldListKustoPoolsServicesCommandPropertiesSuffix,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_listKustoPoolsServicesCommandPropertiesSuffixRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_listKustoPoolsServicesPropertiesSuffixOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldSyncCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_syncCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_syncCommandOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldCheckinCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_checkinCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_checkinCommandOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldServicesNames,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_syncKustoPoolServicesNamesToAppendOptionsCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,servicesNames),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldSyncKustoPoolRbacCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_syncKustoPoolCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_syncKustoPoolCommandOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldTridentServiceShowByResourceId,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_tridentServiceShowByResourceIdCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_byResourceIdKeywordOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldCheckCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_checkCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_checkCommandOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldServiceKeywordOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_serviceCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_serviceKeywordOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldServiceOrClusterKeywordOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_activationCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_activationKeywordOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldShowClusterKeywordOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_showClusterOptionsCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_showClusterKeywordOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldOperationsKeywordOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_operationsCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_operationsKeywordOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldResultsKeywordOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_resultsCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_operationsKeywordOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldOrchestrationKeywordOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_orchestrationCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_orchestrationKeywordOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldOrchestrationTaskHubKeywordOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_orchestrationTaskHubCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_withPropertiesSuffixOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldShowAccountCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_showAccountCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_showAccountCommandOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldMoveAccountCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_moveAccountCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_moveAccountCommandOptions),$t.DefaultAfterApplyPolicy=($t1=new Kusto.Data.IntelliSense.ApplyPolicy,$t1.Text=\" @''\",$t1.OffsetPosition=-1,$t1),$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldMoveAccountSubscriptionCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_moveAccountSubscriptionCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_moveAccountSubscriptionCommandOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldMoveServiceConfigurationCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_moveServiceConfigurationCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_moveServiceOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldMoveServiceConfigurationCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_suspendTargetServiceCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_suspendServiceAdminNodeOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldsAlterServiceConfigurationKeywordOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_alterServicePackagesConfigurationCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_alterServiceConfigurationKeywordOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldAlterServiceConfigurationPropertiesOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_alterServiceConfigurationDetailsKeywordRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_alterServiceConfigurationPropertiesOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldAlterServiceConfigurationCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_alterServiceConfigurationPropertiesKeywordRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_alterServiceConfigurationCommandOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldFromAccountKeywordOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_fromAccountKeywordRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_fromKeywordOptions),$t.DefaultAfterApplyPolicy=($t1=new Kusto.Data.IntelliSense.ApplyPolicy,$t1.Text=\" @''\",$t1),$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldShowAuditLogCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_showAuditLogCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_fromKeywordOptions),$t.DefaultAfterApplyPolicy=($t1=new Kusto.Data.IntelliSense.ApplyPolicy,$t1.Text=System.String.format(\" @'{0:yyyy-MM-dd}'\",[Bridge.box(System.DateTime.getUtcNow(),System.DateTime,System.DateTime.format)]),$t1),$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldShowAuditLogFromCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_showAuditLogFromCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_toKeywordOptions),$t.DefaultAfterApplyPolicy=($t1=new Kusto.Data.IntelliSense.ApplyPolicy,$t1.Text=System.String.format(\" @'{0:yyyy-MM-dd}'\",[Bridge.box(System.DateTime.getUtcNow(),System.DateTime,System.DateTime.format)]),$t1),$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldShowServicesCompletionKeywordsOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_configurationKeywordRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_showServicesCompletionKeywordsOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldShowAccountsKeywordOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_showAccountsKeywordRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_showAccountsKeywordOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldDmServiceAddKeywordOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_dmServiceAddKeywordRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_dmServiceAddKeywordOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldDmServiceShowKeywordOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_dmServiceShowKeywordRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_dmServiceShowKeywordOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldDmServiceDropKeywordOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_dmServiceDropKeywordRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_dmServiceDropKeywordOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldDmServiceAlterKeywordOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_dmServiceAlterKeywordRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_dmServiceAlterKeywordOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldDmServiceAlterSettingsOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_dmServiceAlterSettingsRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_toKeywordOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldConfigurationPropertySetKeywordOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_configurationPropertySetKeywordRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_serviceConfigurationPropertySetKeywordOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldToStringKeywordOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_toStringKeywordRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_toKeywordOptions),$t.DefaultAfterApplyPolicy=($t1=new Kusto.Data.IntelliSense.ApplyPolicy,$t1.Text=\" @''\",$t1.OffsetPosition=-1,$t1),$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldConfigurationPropertyWithConsentKeywordOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_configurationPropertyWithConsentKeywordRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_withConsentKeywordOptions),$t.DefaultAfterApplyPolicy=($t1=new Kusto.Data.IntelliSense.ApplyPolicy,$t1.Text=\" @''\",$t1.OffsetPosition=-1,$t1),$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldAddKeywordOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_addKeywordRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_addKeywordOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldConfigurationPropertyDropKeywordOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_configurationPropertyDropKeywordRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_serviceConfigurationPropertyDropKeywordOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldAccountAlterOperationsKeywordOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_accountAlterOperationsKeywordRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_accountAlterOperationsOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldAccountRenameOperationsKeywordOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_accountRenameOperationsKeywordRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_accountRenameOperationsOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldAccountAddOperationsKeywordOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_accountAddOperationsKeywordRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_accountAddOperationsOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldAccountRemoveOperationsKeywordOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_accountRemoveOperationsKeywordRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_accountRemoveOperationsOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldAccountSetOperationsKeywordOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_accountSetOperationsKeywordRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_accountSetOperationsOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldPcCodeKeywordOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_accountSubscriptionAlterKeywordRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_pccodeKeywordOptions),$t.DefaultAfterApplyPolicy=($t1=new Kusto.Data.IntelliSense.ApplyPolicy,$t1.Text=\" @''\",$t1.OffsetPosition=-1,$t1),$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldServiceAlterOperationsKeywordOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_serviceAlterOperationsKeywordRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_serviceAlterOperationsOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldInServiceKeywordOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_inServiceKeywordRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_inServiceKeywordOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldDatabaseKeywordOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_databaseKeywordRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_createDatabsaeScriptInServiceCommandOption),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldStorageAccountsKeywordOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_storageAccountsKeywordRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_storageAccountsKeywordOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldServiceRegenerateSuffix,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_regenerateServiceKeywordRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_serviceRegenerateKeywordOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.GeneralRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldAccountNames,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_accountNamesCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,accountNames),$t.DefaultBeforeApplyPolicy=($t1=new Kusto.Data.IntelliSense.ApplyPolicy,$t1.Text=\"[\",$t1),$t.DefaultAfterApplyPolicy=($t1=new Kusto.Data.IntelliSense.ApplyPolicy,$t1.Text=\"] \",$t1),$t));this.GeneralRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldServicesNames,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_servicesNamesCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Service,servicesNames),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.GeneralRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldWithPropertiesSuffix,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_withPropertiesSuffixRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_withPropertiesSuffixOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.GeneralRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldWithEventHubPropertiesSuffix,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_withEventHubPropertiesSuffixRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_withEventHubProperties),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.GeneralRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldWithCosmosDbDataConnectionPropertiesSuffix,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_withCosmosDbDataConnectionPropertiesSuffixRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_withCosmosDbDataConnectionProperties),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldShowPrincipalRolesCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_showPrincipalRolesCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_showPrincipalRolesKeywordOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));servicesAndOptionsTokens=System.Linq.Enumerable.from(Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_showServiceCommandOptions,System.String).union(servicesNames);this.GeneralRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldServicesNamesCombinedWithOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_servicesNamesToAppendOptionsCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,servicesAndOptionsTokens),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));alterServicesAndOptionsTokens=System.Linq.Enumerable.from(Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_alterServiceCommandOptions,System.String).union(servicesNames);this.GeneralRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldServicesNamesCombinedWithOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_alterServicesNamesToAppendOptionsCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,alterServicesAndOptionsTokens),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));removeServicesAndOptionsTokens=System.Linq.Enumerable.from(Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_removeServiceCommandOptions,System.String).union(servicesNames);this.GeneralRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldServicesNamesCombinedWithOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_removeServicesNamesToAppendOptionsCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,removeServicesAndOptionsTokens),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldSharedIdentity,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_sharedIdentityRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_sharedIdentityOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldTargetServiceOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_showTargetServiceCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_showTargetServiceCommandOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldShowCmServiceCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_showCmServiceCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_showCmServiceCommandOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldShowClusterClusterNamePrincipalCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_showClusterClusterNamePrincipalCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_withPropertiesSuffixOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldShowClusterClientOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_showClusterClientRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_showClusterClusterNameOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldShowClusterClientSubscriptionCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_showClusterClientSubscriptionCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_showClusterClientSubscriptionOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldWithPropertiesSuffix,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_cloudCreateCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_withPropertiesSuffixOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldWithPropertiesSuffix,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_regionCreateCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_withPropertiesSuffixOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldInstallCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_serviceInstallCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_installCommandOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldWithPropertiesSuffix,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_serviceDeployCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_withPropertiesSuffixOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldReinstallCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_serviceReinstallCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_withPropertiesSuffixOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldUninstallServiceCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_serviceUninstallCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_uninstallRunnersSyntheticsCommandOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldUninstallCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_uninstallCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_uninstallCommandOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldUpdateCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_updateCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_updateCommandOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldServiceUpdateCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_updateServiceCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_updateServiceCommandOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldMigrateServiceCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_serviceMigrateCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_migrateServiceCommandOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldMigrateClusterCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_clusterMigrateCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_migrateClusterCommandOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldSetClusterPrincipalsNoneOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_setClusterPrincipalsNoneCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_setNoneKeywordOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldSetClusterPrincipalsCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_setClusterPrincipalsCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_addSetDropPrincipalsKeywordOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldAddClusterPrincipalsCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_addClusterPrincipalsCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_addSetDropPrincipalsKeywordOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldDropClusterPrincipalsCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_dropClusterPrincipalsCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_addSetDropPrincipalsKeywordOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldDropAccountPrincipalsCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_dropAccountPrincipalsCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_dropAccountPrincipalsKeywordOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldAddClusterJitPrincipalsCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_addClusterJitPrincipalCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_addDropJitPrincipalsKeywordOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldDropClusterJitPrincipalsCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_dropClusterJitPrincipalCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_addDropJitPrincipalsKeywordOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldLoadBalancerKeywordOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_loadBalancerKeywordRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_loadBalancerKeywordOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldPipeOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_yieldPipeOptionRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,System.Array.init([\"|\"],System.String)),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldShowSubscriptionCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_showSubscriptionCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_showSubscriptionCommandOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldShowServiceSecurityRulesCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_showServiceSecurityRulesOperationRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_showServiceSecurityRulesCommandOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldKeysCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_keysCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_keysKeywordOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldKeyTypesCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_keyTypesKeywordRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_keyTypesKeywordOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldAlterServiceStorageAccountsCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_alterServiceStorageAccountsCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_alterServiceStorageAccountsSuffixOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldToKeywordOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_toKeywordCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_toKeywordOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldCmNotifyCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_notifyCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_notifyKeywordOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.GeneralRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldSkuAvailabilityPrefix,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_setSkuAvailabilityRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_skuAvailabilityKeywordOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.GeneralRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldSetCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_setSynapseMockedSettingsRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_withPropertiesSuffixOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.GeneralRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldSetCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_setSynapseMockedRbacRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_withPropertiesSuffixOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldSkuAvailabilityCommandValues,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_setSkuAvailabilityValuesRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_trueFalseKeywordOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.GeneralRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldSkuAvailabilityPropertiesSuffix,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_setSkuAvailabilityWithOptionsRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_withSkuAvailabilityProperties),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.GeneralRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldSetRegionVisibility,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_setRegionVisibilityWithOptionsRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_regionVisibilityProperties),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldRegisterFeature,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_registerFeatureRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_registerFeatureCommandOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldBillingServiceCreateResources,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_createResourcesForBillingServiceRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_withPropertiesSuffixOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.GeneralRules.add(($t=new Kusto.Data.IntelliSense.ContextualRegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldColumnNamesAfterPipeCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_commandColumnNamesAfterPipeRegex,$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t.OptionsKind=Kusto.Data.IntelliSense.OptionKind.Column,$t.OverrideOptions=this.OverridingColumnMapping,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldPutClientSubscriptionsNotification,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_putClientSubscriptionsNotificationRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_putClientSubscriptionsNotficationCommandOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldAlterVirtualClusterLimitsLevelCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_alterVirtualClusterLimitsLevelCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_withAlterVirtualClusterLimitsLevelProperties),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldShowResourceCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_showResourceCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_showResourceSuffixOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldShowResourceMetricsCommandPropertiesSuffix,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_showResourceMetricsCommandPropertiesSuffixRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_showResourceMetricsCommandPropertiesSuffixOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldShowAzureMonitorManifestCommandPropertiesSuffix,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_showResourceMetricsCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_showAzureMonitorManifestCommandPropertiesSuffixOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldPublishAzureMonitorManifestCommandPropertiesSuffix,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_publishAzureMonitorManifestCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_publishAzureMonitorManifestCommandPropertiesSuffixOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldCheckinAzureMonitorManifestCommandPropertiesSuffix,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_checkinAzureMonitorManifestCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_checkinAzureMonitorManifestCommandPropertiesSuffixOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldMigrateVirtualClusterCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_migrateVirtualClusterCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_migrateVirtualClusterCommandSuffixOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldMigrateVirtualClusterEventHubStorageAccountCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_migrateVirtualClusterEventHubStorageCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_migrateVirtualClusterCommandSuffixOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldScaleTridentClusterCommandSuffix,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_scaleTridentClusterCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_scaleTridentClusterCommandSuffix),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t))},InitializeCommandColumnMappings:function(){},LoadCommandToolTips:function(){var $t,toolTipCommands=new(System.Collections.Generic.List$1(Kusto.Data.IntelliSense.IntelliSenseCommandTip).ctor),command1,command2,command3,command4,command5,command6,command7,command8,command9,command10,command11,command12,command13,command14,command15,command16,command17,command18,command19,command20,command21,command22,command23,command24,command25;this.CommandToolTips=toolTipCommands;var internalCmDocumentationRoot=\"https://kusto.azurewebsites.net/internaldocs/controlCommands/controlcommands_CM_internal.html\",externalCmDocumentationRoot=\"https://kusto.azurewebsites.net/docs/controlCommands/cm.html\",command=($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTip,$t.Name=\".restart\",$t.NameSuffix=\" service\",$t.Summary=\"<a href=https://kusto.azurewebsites.net/docs/controlCommands/cm.html#restart-service>Click to see documentation<\\/a>\",$t.Usage=\"<i>.restart service<\\/i> Engine-KustoDev\\n<i>.restart service<\\/i> Engine-KustoDev with(instancename='Kusto.Azure.Svc_IN_11')\",$t);toolTipCommands.add(command);command1=($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTip,$t.Name=\".reimage\",$t.NameSuffix=\" service\",$t.Summary=\"<a href=https://kusto.azurewebsites.net/docs/controlCommands/cm.html#reimage-service>Click to see documentation<\\/a>\",$t.Usage=\"<i>.reimage service<\\/i> Engine-KustoDev\\n<i>.reimage service<\\/i> Engine-KustoDev with(instancename='Kusto.Azure.Svc_IN_11')\",$t);toolTipCommands.add(command1);command2=($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTip,$t.Name=\".rebuild\",$t.NameSuffix=\" service\",$t.Summary=\"<a href=https://kusto.azurewebsites.net/docs/controlCommands/cm.html#rebuild-service>Click to see documentation<\\/a>\",$t.Usage=\"<i>.rebuild service<\\/i> Engine-KustoDev\\n<i>.rebuild service<\\/i> Engine-KustoDev with(instancename='Kusto.Azure.Svc_IN_11')\",$t);toolTipCommands.add(command2);command3=($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTip,$t.Name=\".reallocate\",$t.NameSuffix=\" service\",$t.Summary=\"<a href=https://kusto.azurewebsites.net/docs/controlCommands/cm.html#reallocate-service>Click to see documentation<\\/a>\",$t.Usage=\"<i>.reallocate service<\\/i> Engine-KustoDev\\n<i>.reallocate service<\\/i> Engine-KustoDev with(instancename='Kusto.Azure.Svc_IN_11')\",$t);toolTipCommands.add(command3);command4=($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTip,$t.Name=\".uninstall\",$t.NameSuffix=\" service | service runners\",$t.Summary=\"Click to see documentation for:\\n<a href=\"+(externalCmDocumentationRoot||\"\")+\"#uninstall-service>.uninstall service<\\/a>\\n<a href=\"+(internalCmDocumentationRoot||\"\")+\"#uninstall-service-runners>.uninstall service runners<\\/a>\",$t);toolTipCommands.add(command4);command5=($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTip,$t.Name=\".stop\",$t.NameSuffix=\" service\",$t.Summary=\"<a href=https://kusto.azurewebsites.net/docs/controlCommands/cm.html#stop-service>Click to see documentation<\\/a>\",$t.Usage=\"<i>.stop service<\\/i> Engine-KustoDev\",$t);toolTipCommands.add(command5);command6=($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTip,$t.Name=\".install\",$t.NameSuffix=\" service | service runners\",$t.Summary=\"Click to see documentation for:\\n<a href=\"+(externalCmDocumentationRoot||\"\")+\"#install-service>.install service<\\/a>\\n<a href=\"+(internalCmDocumentationRoot||\"\")+\"#install-service-runners>.install service runners<\\/a>\",$t);toolTipCommands.add(command6);command7=($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTip,$t.Name=\".delete\",$t.NameSuffix=\" cluster | service | database\",$t.Summary=\"Click to see documentation for:\\n<a href=\"+(internalCmDocumentationRoot||\"\")+\"#delete-cluster>Click to see documentation<\\/a>\\n<a href=\"+(internalCmDocumentationRoot||\"\")+\"#delete-service>Click to see documentation<\\/a>\\n<a href=\"+(externalCmDocumentationRoot||\"\")+\"#delete-database>.delete database<\\/a>\",$t);toolTipCommands.add(command7);command8=($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTip,$t.Name=\".check\",$t.NameSuffix=\" service name availability\",$t.Summary=\"<a href=https://kusto.azurewebsites.net/docs/controlCommands/cm.html#check-service-name-availability>Click to see documentation<\\/a>\",$t.Usage=\"<i>.check service name availability<\\/i> MyCoolName\",$t);toolTipCommands.add(command8);command9=($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTip,$t.Name=\".create\",$t.NameSuffix=\" service | database | account\",$t.Summary=\"Click to see documentation for:\\n<a href=\"+(externalCmDocumentationRoot||\"\")+\"#create-database>.create database<\\/a>\\n<a href=\"+(externalCmDocumentationRoot||\"\")+\"#create-service>.create service<\\/a>\\n<a href=\"+(internalCmDocumentationRoot||\"\")+\"#create-account>.create account<\\/a>\",$t);toolTipCommands.add(command9);command10=($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTip,$t.Name=\".detach\",$t.NameSuffix=\" account\",$t.Summary=\"<a href=https://kusto.azurewebsites.net/internaldocs/controlCommands/controlcommands_CM_internal.html#detach-account>Click to see documentation<\\/a>\",$t.Usage=\"<i>.detach account<\\/i> [Kusto Test]\",$t);toolTipCommands.add(command10);command11=($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTip,$t.Name=\".alter\",$t.NameSuffix=\" service | account\",$t.Summary=\"Click to see documentation for:\\n<a href=\"+(externalCmDocumentationRoot||\"\")+\"#alter-service-configuration>.alter service configuration<\\/a>\\n<a href=\"+(internalCmDocumentationRoot||\"\")+\"#alter-account-configuration>.alter account configuration<\\/a>\\n<a href=\"+(internalCmDocumentationRoot||\"\")+\"#alter-account-admins>.alter account admins<\\/a>\\n<a href=\"+(internalCmDocumentationRoot||\"\")+\"#alter-account-subscription-pccode>.alter account subscription pccode<\\/a>\",$t);toolTipCommands.add(command11);command12=($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTip,$t.Name=\".add\",$t.NameSuffix=\" account | service | database storage accounts | unallocated subscription\",$t.Summary=\"Click to see documentation for:\\n<a href=\"+(internalCmDocumentationRoot||\"\")+\"#add-account-contact>.add account contact<\\/a>\\n<a href=\"+(internalCmDocumentationRoot||\"\")+\"#add-dm-service-storage-accounts>.add dm service storage accounts<\\/a>\\n<a href=\"+(externalCmDocumentationRoot||\"\")+\"#add-database-storage-accounts>.add database storage accounts<\\/a>\\n<a href=\"+(internalCmDocumentationRoot||\"\")+\"#add-unallocated-subscription>.add unallocated subscription<\\/a>\",$t);toolTipCommands.add(command12);command13=($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTip,$t.Name=\".remove\",$t.NameSuffix=\" account contact | unallocated subscription\",$t.Summary=\"Click to see documentation for:\\n<a href=\"+(internalCmDocumentationRoot||\"\")+\"#remove-account-contact>.remove account contact<\\/a>\\n<a href=\"+(internalCmDocumentationRoot||\"\")+\"#remove-unallocated-subscription>.remove unallocated subscription<\\/a>\",$t);toolTipCommands.add(command13);command14=($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTip,$t.Name=\".set service\",$t.NameSuffix=\" property to value\",$t.Summary=\"<a href=https://kusto.azurewebsites.net/docs/controlCommands/cm.html#set-service-configuration-property>Click to see documentation<\\/href>\",$t.Usage=\"<i>.set<\\/i> service Engine-KustoDev InstancesCount to '10'\",$t);toolTipCommands.add(command14);command15=($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTip,$t.Name=\".recycle\",$t.NameSuffix=\" service storage accounts\",$t.Summary=\"<a href=https://kusto.azurewebsites.net/internaldocs/controlCommands/controlcommands_CM_internal.html#recycle-service-storage-accounts>Click to see documentation<\\/href>\",$t.Usage=\"<i>.recycle<\\/i> service Engine-Aria storage accounts (kuariadb0,kuariadb1) with(storageaccountbasename='kuariadbnew')\\n\\n<i>.recycle<\\/i> service Engine-Aria storage accounts (kuariadb0,kuariadb1) with(storageaccountbasename='kuariadbnew',startindex='1')\",$t);toolTipCommands.add(command15);command16=($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTip,$t.Name=\".ingest\",$t.NameSuffix=\" service storage logs\",$t.Summary=\"<a href=https://kusto.azurewebsites.net/internaldocs/controlCommands/controlcommands_CM_internal.html#ingest-service-storage-logs>Click to see documentation<\\/href>\",$t.Usage=\"<i>.ingest service<\\/i> Engine-Aria storage logs into service Engine-KustoDev with(starttime='2016-02-02', storageservice='queue')\\n\\n<i>.ingest service<\\/i> Mgmt-Aria storage logs into service Engine-KustoDev with(starttime='2016-1-1 11:05:00.0', endtime='2016-1-1 23:59:59.9', storageservice='blob')\",$t);toolTipCommands.add(command16);command17=($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTip,$t.Name=\".show\",$t.NameSuffix=\" service [ServiceName] (configuration | fabriclocks | storage objects | database [DatabaseName] metadata | audit log)\",$t.Summary=\"Click to see documentation for:\\n<a href=\"+(externalCmDocumentationRoot||\"\")+\"#show-service>.show service [ServiceName] configuration<\\/a>\\n<a href=\"+(internalCmDocumentationRoot||\"\")+\"#show-service-fabricklocks>.show service [ServiceName] fabriclocks<\\/a>\\n<a href=\"+(externalCmDocumentationRoot||\"\")+\"#show-service-storage-objects>.show service [ServiceName] storage objects<\\/a>\\n<a href=\"+(externalCmDocumentationRoot||\"\")+\"#show-service-metadata>.show service [ServiceName] database [DatabaseName] metadata<\\/a>\\n<a href=\"+(externalCmDocumentationRoot||\"\")+\"#show-service-audit-log>.show service [ServiceName] audit log from '<StartDate>' to '<EndDate>'<\\/a>\\n<a href=\"+(internalCmDocumentationRoot||\"\")+\"#show-unallocated-subscriptions>.show unallocated subscriptions<\\/a>\",$t.Usage=\"<i>.show<\\/i> service Engine-Aria configuration\\n<i>.show<\\/i> service Engine-Aria fabriclocks\\n<i>.show<\\/i> service Engine-Aria storage objects\\n<i>.show<\\/i> service Engine-Aria database aria metadata\\n<i>.show<\\/i> service Engine-Aria audit log from '2017-01-15T12:00' to '2017-01-30T12:30'\",$t);toolTipCommands.add(command17);command18=($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTip,$t.Name=\".drop\",$t.NameSuffix=\" dm service [ServiceName] data obtainer [DataObtainerName]\",$t.Summary=\"<a href=https://kusto.azurewebsites.net/internaldocs/controlCommands/controlcommands_CM_internal.html#drop-dm-service-data-obtainer>Click to see documentation<\\/href>\",$t.Usage=\"<i>.drop<\\/i> dm service Ingest-Playground data obtainer SomeObtainerName\",$t);toolTipCommands.add(command18);command19=($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTip,$t.Name=\".register\",$t.NameSuffix=\" feature [FeatureName] subscriptions ([SubscriptionIDs])\",$t.Summary=\"Click to see documentation for:\\n<a href=\"+(internalCmDocumentationRoot||\"\")+\"#register-feature-subscriptions>.register feature<\\/a>\",$t);toolTipCommands.add(command19);command20=($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTip,$t.Name=\".alter\",$t.NameSuffix=\" dm service [ServiceName] settings [SettingsJsonPath] to [NewSettingsValue]\",$t.Summary=\"Click to see documentation for:\\n<a href=\"+(internalCmDocumentationRoot||\"\")+\"#alter-dm-service-settings>.alter dm service settings<\\/a>\",$t);toolTipCommands.add(command20);command21=($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTip,$t.Name=\".create\",$t.NameSuffix=\" resources for billing service [BillingServiceName]\",$t.Summary=\"Click to see documentation for:\\n<a href=\"+(internalCmDocumentationRoot||\"\")+\"#create-resources-for-billing-service>.create resources for billing service<\\/a>\",$t);toolTipCommands.add(command21);command22=($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTip,$t.Name=\".sync\",$t.NameSuffix=\" kustopool [KustoPoolName] rbac\",$t.Summary=\"Click to see documentation for:\\n<a href=\"+(internalCmDocumentationRoot||\"\")+\"#sync-kustopool-rbac>.sync kustopool rbac<\\/a>\",$t);toolTipCommands.add(command22);command23=($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTip,$t.Name=\".show\",$t.NameSuffix=\" regions by hosters\",$t.Summary=\"Click to see documentation for:\\n<a href=\"+(internalCmDocumentationRoot||\"\")+\"#show-regions-by-hosters>.show regions by hosters<\\/a>\",$t);toolTipCommands.add(command23);command24=($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTip,$t.Name=\".move\",$t.NameSuffix=\" service to maintenance mode\",$t.Summary=\"Click to see documentation for:\\n<a href=\"+(internalCmDocumentationRoot||\"\")+\"#move-service-to-maintenance>.move service to maintenance<\\/a>\",$t);toolTipCommands.add(command24);command25=($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTip,$t.Name=\".cancel\",$t.NameSuffix=\" cancel service maintenance mode\",$t.Summary=\"Click to see documentation for:\\n<a href=\"+(internalCmDocumentationRoot||\"\")+\"#cancel-service-maintenance>.cancel service maintenance<\\/a>\",$t);toolTipCommands.add(command25)}}});Bridge.ns(\"Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider\",$asm.$);Bridge.apply($asm.$.Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider,{f1:function(account){return account.Name},f2:function(service){return service.Name}});Bridge.define(\"Kusto.Data.IntelliSense.ContextualRegexIntelliSenseRule\",{inherits:[Kusto.Data.IntelliSense.IntelliSenseRule],props:{MatchingRegex:null,AdditionalOptions:null,ContextualOptions:null,OverrideOptions:null,OptionsKind:0,RequiresFullCommand:{get:function(){return!0}},IsContextual:{get:function(){return!0}}},methods:{IsMatch:function(context,input){return this.MatchingRegex.isMatch(input)},GetOptions:function(context){if(this.AdditionalOptions==null||Kusto.Cloud.Platform.Utils.ExtendedEnumerable.SafeFastNone$2(Kusto.Data.IntelliSense.CompletionOptionCollection,this.AdditionalOptions))return this.GetContextOptions(context);var result=new(System.Collections.Generic.List$1(System.String).$ctor1)(this.GetContextOptions(context));return System.Linq.Enumerable.from(result,System.String).union(System.Linq.Enumerable.from(this.AdditionalOptions,Kusto.Data.IntelliSense.CompletionOptionCollection).selectMany($asm.$.Kusto.Data.IntelliSense.ContextualRegexIntelliSenseRule.f1))},GetContextOptions:function(context){if(Kusto.Cloud.Platform.Utils.ExtendedEnumerable.SafeFastAny$1(System.Collections.Generic.KeyValuePair$2(Kusto.Data.IntelliSense.KustoCommandContext,System.Collections.Generic.List$1(System.String)),this.OverrideOptions)&&this.OverrideOptions.containsKey(context))return this.OverrideOptions.getItem(context);else{var contextWithoutOpertaion=new Kusto.Data.IntelliSense.KustoCommandContext(context.Context);if(Kusto.Cloud.Platform.Utils.ExtendedEnumerable.SafeFastAny$1(System.Collections.Generic.KeyValuePair$2(Kusto.Data.IntelliSense.KustoCommandContext,System.Collections.Generic.List$1(System.String)),this.ContextualOptions)&&this.ContextualOptions.containsKey(contextWithoutOpertaion))return this.ContextualOptions.getItem(contextWithoutOpertaion)}return System.Array.init([],System.String)},GetCompletionOptions:function(context){var contextualOptionsCollection,sortedCollections;return this.AdditionalOptions==null||Kusto.Cloud.Platform.Utils.ExtendedEnumerable.SafeFastNone$2(Kusto.Data.IntelliSense.CompletionOptionCollection,this.AdditionalOptions)?System.Linq.Enumerable.from(this.GetContextOptions(context),System.String).select(Bridge.fn.bind(this,$asm.$.Kusto.Data.IntelliSense.ContextualRegexIntelliSenseRule.f2)).ToArray(Kusto.Data.IntelliSense.CompletionOption):(contextualOptionsCollection=new Kusto.Data.IntelliSense.CompletionOptionCollection(this.OptionsKind,this.GetContextOptions(context)),sortedCollections=System.Linq.Enumerable.from(function(_o1){return _o1.add(contextualOptionsCollection),_o1}(new(System.Collections.Generic.List$1(Kusto.Data.IntelliSense.CompletionOptionCollection).ctor)),Kusto.Data.IntelliSense.CompletionOptionCollection).concat(this.AdditionalOptions).orderByDescending($asm.$.Kusto.Data.IntelliSense.ContextualRegexIntelliSenseRule.f3),sortedCollections.selectMany($asm.$.Kusto.Data.IntelliSense.ContextualRegexIntelliSenseRule.f4))}}});Bridge.ns(\"Kusto.Data.IntelliSense.ContextualRegexIntelliSenseRule\",$asm.$);Bridge.apply($asm.$.Kusto.Data.IntelliSense.ContextualRegexIntelliSenseRule,{f1:function(o){return o.Values},f2:function(o){return new Kusto.Data.IntelliSense.CompletionOption(this.OptionsKind,o)},f3:function(o){return o.Priority},f4:function(c){return c.GetCompletionOptions()}});Bridge.define(\"Kusto.Data.IntelliSense.ContextualTokensWithRegexIntelliSenseRule\",{inherits:[Kusto.Data.IntelliSense.IntelliSenseRule],statics:{methods:{GetHashStringForContextAndToken:function(context,token){return(context||\"\")+\";\"+(token||\"\")}}},props:{MatchingRegex:null,MatchingTokens:null,GroupNameToUseAfterMatch:null,Options:null,RequiresFullCommand:{get:function(){return!0}},IsContextual:{get:function(){return!0}}},methods:{IsMatch:function(context,input){var m,matchedString;return this.MatchingTokens==null||!System.Linq.Enumerable.from(this.MatchingTokens,System.String).any()||System.String.isNullOrEmpty(this.GroupNameToUseAfterMatch)?!1:(m=this.MatchingRegex.match(input),!m.getSuccess()||m.getGroups().getCount()<1)?!1:(matchedString=Kusto.Data.IntelliSense.ContextualTokensWithRegexIntelliSenseRule.GetHashStringForContextAndToken(context.Context,m.getGroups().getByName(this.GroupNameToUseAfterMatch).toString()),this.MatchingTokens.contains(matchedString))},GetOptions:function(context){return this.Options.Values},GetCompletionOptions:function(context){return this.Options.GetCompletionOptions()}}});Bridge.define(\"Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider\",{inherits:[Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase],statics:{fields:{s_afterPipeRegex:null,s_renderRegex:null,s_renderMultiChartsRegex:null,s_renderKindOptionsRegex:null,s_evaluateRegex:null,s_makeSeriesRequestingAggregatorsRegex:null,s_makeSeriesBeforeDefaultOrOnRegex:null,s_makeSeriesBeforeOnRegex:null,s_makeSeriesBeforeRangeRegex:null,s_makeSeriesBeforeByRegex:null,s_joinRegex:null,s_diffPatternsPluginSplitParameterRegex:null,s_startOfLineWithSpaceOrAfterJoinRegex:null,s_startOfCommandWithClusterRegex:null,s_tablesScopeRegex:null,s_startOfCommandWithDatabaseRegex:null,s_clusterFunctionRegex:null,s_databaseFunctionInFindRegex:null,s_databaseFunctionRegex:null,s_operatorContextForFilterColumnRegex:null,s_operatorContextForProject:null,s_operatorContextForProjectAway:null,s_operatorContextForProjectRename:null,s_operatorContextForFilterColumnInFindRegex:null,s_operatorContextForFindProject:null,s_singleParamFunctions:null,s_singleParamFunctionsColumnContextRegex:null,s_twoParamFunctions:null,s_twoParamFunctionsColumnContextRegex:null,s_threeParamFunctions:null,s_threeParamFunctionsColumnContextRegex:null,s_manyParamFunctions:null,s_manyParamFunctionsColumnContextRegex:null,s_operatorContextForExtend_ColumnAndFunctionRegex:null,s_entitiesForJoin_ColumnsRegex:null,s_joinFlavorsForJoin_Regex:null,s_parseKindChoose_Regex:null,s_parseWith_Regex:null,s_parseTypesSuggest_Regex:null,s_parseStarOption_Regex:null,m_commandsRequestingAggregators:null,s_lineWithDotBeginningRegex:null,s_topOrLimitOrTakeOrSampleRegex:null,s_agoContextRegex:null,s_nowContextRegex:null,s_operatorContextForTopNestedAndTopHitters:null,s_operatorContextForSampleDistinct:null,s_topNestedKeywordPrefixRegex:null,s_topNestedWithOthersOption:null,s_topHittersKeywordPrefixRegex:null,s_yieldByKeywordRegex:null,s_parseColumnContextRegex:null,s_renderTimePivotColumnContextRegex:null,s_topSortOrderReduceByRegex:null,s_topTopNestedSortOrderByAscDescRegex:null,s_findContextRegex:null,s_findInRegex:null,s_findInStartOrContinueListRegex:null,s_FindInEndOrContinueListRegex:null,s_findWhereRegex:null,s_findProjectSmartRegex:null,s_reduceByColumnContextRegex:null,s_topNestedSuggestingColumnsRegex:null,s_topHittersSuggestingColumnsRegex:null,s_sampleDistinctSuggestingColumnsRegex:null,s_topOrOrderAscendingDescendingRegex:null,s_topNestedAscendingDescendingRegex:null,s_rangeFromRegex:null,s_rangeFromToRegex:null,s_rangeFromToStepRegex:null,s_filteredColumnString:null,s_filteredColumnRegex:null,s_filterPredicateRightValueRegex:null,s_makeSeriesByRegex:null,s_searchPrefixRegex:null,s_searchContextRegex:null,s_searchKindRegex:null,s_searchAfterKindContextRegex:null,s_searchMoreContextRegex:null,s_searchKind_Regex:null,s_clientDirective_Regex:null,s_clientDirectiveConnect_Regex:null,s_operatorOptions:null,s_renderOptions:null,s_renderKindOptions:null,s_aggregateOperationOptions:null,s_makeSeriesAggregateOperationOptions:null,s_extendOperationOptions:null,s_databaseFunctionOptions:null,s_stringOperatorOptions:null,s_numericOperatorOptions:null,s_numericScalarsOptions:null,s_byKeywordOptions:null,s_kindChooseKeywordOptions:null,s_withOthersKeywordOptions:null,s_ofKeywordOptions:null,s_withKeywordOptions:null,s_parseSuggestedTypesKeywordOptions:null,s_parseStarOption:null,s_ascDescKeywordOptions:null,s_nullsLastFirstKeywordOptions:null,s_ascDescOrNullsLastNullsFirstKeywordOptions:null,s_rangeFromOptions:null,s_rangeFromToOptions:null,s_rangeFromToStepOptions:null,s_joinFlavorsOptions:null,s_postJoinOptions:null,s_kindKeywordOptions:null,s_searchInKeywordOptions:null,s_searchLiteralsOptions:null,s_reduceByFlavorsOptions:null,s_datetimeOptions:null,s_timespanOptions:null,s_negativeTimespanOptions:null,s_postFindInOptions:null,s_findInEndOrContinueOptions:null,s_findWhereInOptions:null,s_findInPostListOptions:null,s_makeSeriesDefaultOrOnOptions:null,s_makeSeriesOnOptions:null,s_makeSeriesInRangeOptions:null,s_searchKindOptions:null,s_clientDirectivesOptions:null,MultiColumnFunctionResultSuffixes:null,s_afterFunctionsApplyPolicies:null,s_filterKeywords:null,s_projectKeywords:null,s_projectAwayKeywords:null,s_projectRenameKeywords:null,s_projectExtendKeywords:null,s_joinKeywords:null,s_topSortOrderReduceKeywords:null,s_operatorsUsingByKeywordKeywords:null,s_topSortOrderKeywords:null,s_topTopNestedSortOrderKeywords:null,s_reduceKeywords:null,s_parseKeywords:null,s_renderKeywords:null,s_topLimitTakeSampleKeywords:null,s_evaluateKeywords:null,s_summarizeKeywords:null,s_distinctKeywords:null,s_topNestedKeywords:null,s_topHittersKeywords:null,s_sampleDistinctKeywords:null,s_operatorsRequestingAggregators:null,s_databaseKeywords:null,s_findKeywords:null,s_searchKeywords:null,s_makeSeriesKeywords:null,s_remoteContextRegex:null,s_queryParametersRegex:null,s_joinClosureRegex:null,s_joinWithMakeSeriesClosureRegex:null,s_makeSeriesStartRegex:null,s_findSubClausesRegex:null,s_searchSubClausesRegex:null,s_rangeEntitiesRegex:null,s_parsedEntitiesRegex:null,s_removeStringLiteralsRegex:null,s_removeStringLiteralsSurroundedBySpacesRegex:null,s_removeCommentsRegex:null,s_fieldInvalidCharacters:null,s_fieldQuotableCharacters:null,s_aggregateOperatorToColumnPrefixMapping:null,s_lastCommandSegmentRegex:null,s_incompleteJoinRegex:null,s_commandClausesRegex:null,s_operatorsReplacingEntities:null,s_withsourceExtractRegex:null,s_findProjectionRegex:null,s_packRgx:null,s_topNestedLevelExtractRegex:null,s_sampleDistinctEntityExtractRegex:null,s_aggregateOperatorsHash:null,s_byKeywordRegex:null,s_byAndOnKeywordRegex:null,s_makeSeriesDropNonFieldsRegex:null,s_fieldMatchingRegex:null,s_numericSuffixRegex:null,s_defaultContextPattern:null,s_commandContext_Join:null,s_commandContext_Union:null,s_commandContext_ToScalar:null,s_commandContext_Show:null,s_commandContext_Range:null,s_commandContext_Callable:null,s_commandContext_Let:null,s_commandContext_ConnectDirective:null,s_commandContext_Find:null,s_commandContext_Search:null,s_commandDefaultContext:null,s_twoOrMoreSpacesRegex:null,s_showCommandFixRegex:null,s_commandContextRegexes:null,s_nonDefaultContextKeywordsRegex:null,s_letVariableRegex:null,s_letStatementRegexList:null},props:{Operators:{get:function(){return Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_operatorOptions}}},ctors:{init:function(){this.s_afterPipeRegex=new System.Text.RegularExpressions.Regex.ctor(\"\\\\|\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_renderRegex=new System.Text.RegularExpressions.Regex.ctor(\"(^|\\\\|\\\\s*?)render\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_renderMultiChartsRegex=new System.Text.RegularExpressions.Regex.ctor(\"(^|\\\\|\\\\s*?)render\\\\s+(areachart|barchart|columnchart)\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_renderKindOptionsRegex=new System.Text.RegularExpressions.Regex.ctor(\"(^|\\\\|\\\\s*?)render\\\\s+(areachart|barchart|columnchart)\\\\s+kind\\\\s*=\\\\s*$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_evaluateRegex=new System.Text.RegularExpressions.Regex.ctor(\"(^|\\\\|\\\\s*?)evaluate\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_makeSeriesRequestingAggregatorsRegex=new System.Text.RegularExpressions.Regex.ctor(\"(^|\\\\|\\\\s*?)make-series\\\\s+(\\\\w+\\\\s*?=\\\\s*?)?$|(^|\\\\|\\\\s*?)make-series\\\\s+(?!.*\\\\b(by|on|range|in)\\\\b).*?,\\\\s+(\\\\w+\\\\s*?=\\\\s*?)?$|(^|\\\\|\\\\s*?)make-series\\\\s+(?!.*\\\\b(by|on|range|in)\\\\b).*[+*/\\\\-]\\\\s*$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_makeSeriesBeforeDefaultOrOnRegex=new System.Text.RegularExpressions.Regex.ctor(\"(^|\\\\|\\\\s*?)make-series(?!.*\\\\b(by|on|range|in).*)(.*\\\\))\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_makeSeriesBeforeOnRegex=new System.Text.RegularExpressions.Regex.ctor(\"(^|\\\\|\\\\s*?)make-series\\\\s+(?!.*\\\\b(range|on).*)(.*\\\\bdefault\\\\b\\\\s*\\\\=\\\\s*\\\\w+)\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_makeSeriesBeforeRangeRegex=new System.Text.RegularExpressions.Regex.ctor(\"(^|\\\\|\\\\s*?)make-series(?!.*\\\\b(range).*)(.*\\\\bon\\\\b\\\\s+.*)\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_makeSeriesBeforeByRegex=new System.Text.RegularExpressions.Regex.ctor(\"(^|\\\\|\\\\s*?)make-series(?!.*\\\\b(by).*)(.*\\\\bin\\\\s+range\\\\b\\\\s*\\\\(.*,.*,.*\\\\))\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_joinRegex=new System.Text.RegularExpressions.Regex.ctor(\"(^|\\\\|\\\\s*?)join\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_diffPatternsPluginSplitParameterRegex=new System.Text.RegularExpressions.Regex.ctor('diffpatterns\\\\(\"split=\\\\s*$',Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_startOfLineWithSpaceOrAfterJoinRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*$|join\\\\s+.*?\\\\(\\\\s+$|^\\\\s*let\\\\s+\\\\w+\\\\s*=\\\\s+$|toscalar\\\\(\\\\s*$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_startOfCommandWithClusterRegex=new System.Text.RegularExpressions.Regex.ctor(\"(^\\\\s*|join\\\\s+.*?\\\\(\\\\s+|^\\\\s*let\\\\s+\\\\w+\\\\s*=\\\\s+|toscalar\\\\(\\\\s*|;\\\\s+)cluster\\\\($\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_tablesScopeRegex=\"(((cluster\\\\([^\\\\)]+\\\\)\\\\.)?(database\\\\([^\\\\)]+\\\\)\\\\.)?(\\\\[.+?\\\\]|[\\\\w\\\\d\\\\*]+),\\\\s*)*((cluster\\\\([^\\\\)]+\\\\)\\\\.)?(database\\\\([^\\\\)]+\\\\)\\\\.)?(\\\\[.+?\\\\]|[\\\\w\\\\d\\\\*]+)))\";this.s_startOfCommandWithDatabaseRegex=new System.Text.RegularExpressions.Regex.ctor(\"(^\\\\s*|join\\\\s+.*?\\\\(\\\\s+|find\\\\s+in\\\\s*\\\\(|find\\\\s+in\\\\s*\\\\(\"+(Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_tablesScopeRegex||\"\")+\",\\\\s*|^\\\\s*let\\\\s+\\\\w+\\\\s*=\\\\s+|toscalar\\\\(\\\\s*|;\\\\s+|cluster\\\\([^\\\\)]+?\\\\)\\\\.)database\\\\($\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_clusterFunctionRegex=new System.Text.RegularExpressions.Regex.ctor(\"cluster\\\\([^\\\\)]+\\\\)\\\\.$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_databaseFunctionInFindRegex=new System.Text.RegularExpressions.Regex.ctor(\"find\\\\s+in\\\\s*\\\\([^\\\\|]*database\\\\([^\\\\)]+\\\\)\\\\.$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_databaseFunctionRegex=new System.Text.RegularExpressions.Regex.ctor(\"database\\\\([^\\\\)]+\\\\)\\\\.$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_operatorContextForFilterColumnRegex=new System.Text.RegularExpressions.Regex.ctor(\"(^|\\\\|\\\\s*?)(filter|where)\\\\s+$|(^|\\\\|\\\\s*?)(filter|where)\\\\s+[^\\\\|]+(and|or)\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_operatorContextForProject=new System.Text.RegularExpressions.Regex.ctor(\"(^|\\\\|\\\\s*?)project\\\\s+$|(^|\\\\|\\\\s*?)project\\\\s+[^\\\\|]*,\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_operatorContextForProjectAway=new System.Text.RegularExpressions.Regex.ctor(\"(^|\\\\|\\\\s*?)project-away\\\\s+$|(^|\\\\|\\\\s*?)project-away\\\\s+[^\\\\|]*,\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_operatorContextForProjectRename=new System.Text.RegularExpressions.Regex.ctor(\"(^|\\\\|\\\\s*?)project-rename\\\\s+[^\\\\|]*?\\\\=\\\\s*$|(^|\\\\|\\\\s*?)project-rename\\\\s+[^\\\\|]*,\\\\s+[^\\\\|]*?\\\\=\\\\s*$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_operatorContextForFilterColumnInFindRegex=new System.Text.RegularExpressions.Regex.ctor(\"(^|\\\\s*)find\\\\s+[^\\\\|]*where\\\\s+$|(^|\\\\s*)find\\\\s+[^\\\\|]+(and|or)\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_operatorContextForFindProject=new System.Text.RegularExpressions.Regex.ctor(\"(^|\\\\s*)find\\\\s+[^\\\\|]+project\\\\s+$|(^|\\\\s*)find\\\\s+[^\\\\|]+project\\\\s+[^\\\\|]*,\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_singleParamFunctions=Bridge.toArray(System.Linq.Enumerable.from(Kusto.Data.IntelliSense.CslCommandParser.SingleParameterFunctionsTokens,System.String).union(Kusto.Data.IntelliSense.CslCommandParser.SummarizeAggregationSingleParameterTokens)).join(\"\\\\(|\");this.s_singleParamFunctionsColumnContextRegex=new System.Text.RegularExpressions.Regex.ctor(\"\\\\b(\"+(Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_singleParamFunctions||\"\")+\"\\\\()\\\\s*$|(^|\\\\|\\\\s*?)summarize\\\\s+[^\\\\|]*?by\\\\s+$|(^|\\\\|\\\\s*?)summarize\\\\s+[^\\\\|]*\\\\)\\\\s*,\\\\s+$|(^|\\\\|\\\\s*?)summarize\\\\s+[^\\\\|]*?by\\\\s+(?!bin)[^\\\\|]+,\\\\s+$|(^|\\\\|\\\\s*?)distinct\\\\s+([^\\\\|]+,\\\\s+)?$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_twoParamFunctions=Bridge.toArray(System.Linq.Enumerable.from(Kusto.Data.IntelliSense.CslCommandParser.TwoParameterFunctionsTokens,System.String).union(Kusto.Data.IntelliSense.CslCommandParser.SummarizeAggregationTwoParametersTokens)).join(\"\\\\(|\");this.s_twoParamFunctionsColumnContextRegex=new System.Text.RegularExpressions.Regex.ctor(\"(\"+(Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_twoParamFunctions||\"\")+\"\\\\()\\\\s*$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_threeParamFunctions=Bridge.toArray(System.Linq.Enumerable.from(Kusto.Data.IntelliSense.CslCommandParser.ThreeParameterFunctionsTokens,System.String).union(Kusto.Data.IntelliSense.CslCommandParser.SummarizeAggregationThreeParametersTokens)).join(\"\\\\(|\");this.s_threeParamFunctionsColumnContextRegex=new System.Text.RegularExpressions.Regex.ctor(\"(\"+(Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_threeParamFunctions||\"\")+\"\\\\()\\\\s*$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_manyParamFunctions=Bridge.toArray(System.Linq.Enumerable.from(Kusto.Data.IntelliSense.CslCommandParser.ManyParametersFunctionsTokens,System.String).union(Kusto.Data.IntelliSense.CslCommandParser.SummarizeAggregationManyParametersTokens)).join(\"(\\\\(|[^\\\\)]+,)|\");this.s_manyParamFunctionsColumnContextRegex=new System.Text.RegularExpressions.Regex.ctor(\"(\"+(Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_manyParamFunctions||\"\")+\"\\\\()\\\\s*$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_operatorContextForExtend_ColumnAndFunctionRegex=new System.Text.RegularExpressions.Regex.ctor(\"(^|\\\\|\\\\s*?)extend\\\\s+[^\\\\|]*?[\\\\=\\\\-\\\\+\\\\/\\\\*]\\\\s*$|(^|\\\\|\\\\s*?)project\\\\s+[^\\\\|]*?\\\\=\\\\s*$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_entitiesForJoin_ColumnsRegex=new System.Text.RegularExpressions.Regex.ctor(\"(^|\\\\|\\\\s*?)join\\\\s+.*\\\\(.+\\\\)\\\\s+on\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_joinFlavorsForJoin_Regex=new System.Text.RegularExpressions.Regex.ctor(\"(^|\\\\|\\\\s*?)join\\\\s+kind\\\\s*=\\\\s*$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_parseKindChoose_Regex=new System.Text.RegularExpressions.Regex.ctor(\"(^|\\\\|\\\\s*?)parse\\\\s+kind\\\\s*$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_parseWith_Regex=new System.Text.RegularExpressions.Regex.ctor('(^|\\\\|\\\\s*?)parse\\\\s*(kind\\\\s*=\\\\s*\\\\w+(\\\\s*flags\\\\s*=\\\\s*\\\\w+)?\\\\s*)?\\\\s*(\\\\w+|\".*?\")\\\\s*$',Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_parseTypesSuggest_Regex=new System.Text.RegularExpressions.Regex.ctor(\"(^|\\\\|\\\\s*?)parse\\\\s+.*\\\\swith\\\\s+.*\\\\s*:\\\\s*$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_parseStarOption_Regex=new System.Text.RegularExpressions.Regex.ctor(\"(^|\\\\|\\\\s*?)parse(.+?)with(.+?[^\\\\*\\\\s])?\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.m_commandsRequestingAggregators=new System.Text.RegularExpressions.Regex.ctor(\"(^|\\\\|\\\\s*?)summarize\\\\s+(\\\\w+\\\\s*?=\\\\s*?)?$|(^|\\\\|\\\\s*?)summarize\\\\s+(?!.*\\\\bby\\\\b).*,\\\\s+(\\\\w+\\\\s*?=\\\\s*?)?$|(^|\\\\|\\\\s*?)summarize\\\\s+(?!.*\\\\bby\\\\b).*[+*/\\\\-]\\\\s*$|(^|\\\\|\\\\s*?).*top-(nested|hitters).*\\\\s+by\\\\s+(\\\\w+\\\\s*?=\\\\s*\\\\s*?)?$|(^|\\\\|\\\\s*?).*top-(nested|hitters).*\\\\s+by\\\\s+.*?[+*/\\\\-]\\\\s*$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_lineWithDotBeginningRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_topOrLimitOrTakeOrSampleRegex=new System.Text.RegularExpressions.Regex.ctor(\"(^|\\\\|\\\\s*?)(top|.*top-hitters|limit|take|.*top-nested|sample|sample-distinct)\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_agoContextRegex=new System.Text.RegularExpressions.Regex.ctor(\"\\\\bago\\\\(\\\\s*$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_nowContextRegex=new System.Text.RegularExpressions.Regex.ctor(\"\\\\bnow\\\\(\\\\s*$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_operatorContextForTopNestedAndTopHitters=new System.Text.RegularExpressions.Regex.ctor(\"(^|\\\\|\\\\s*?).*top-(nested|hitters)\\\\s+\\\\d+\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_operatorContextForSampleDistinct=new System.Text.RegularExpressions.Regex.ctor(\"(^|\\\\|\\\\s*?).*sample-distinct\\\\s+\\\\d+\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_topNestedKeywordPrefixRegex=new System.Text.RegularExpressions.Regex.ctor(\"(^|\\\\|\\\\s*?)top-nested.*by.*(\\\\d|\\\\)|asc|desc)\\\\s*,\\\\s*$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_topNestedWithOthersOption=new System.Text.RegularExpressions.Regex.ctor(\"(^|\\\\|\\\\s*?)top-nested.*?of\\\\s+\\\\w+\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_topHittersKeywordPrefixRegex=new System.Text.RegularExpressions.Regex.ctor(\"(^|\\\\|\\\\s*?)top-hitters.*by.*(\\\\d|\\\\))\\\\s*,\\\\s*$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_yieldByKeywordRegex=new System.Text.RegularExpressions.Regex.ctor(\"(^|\\\\|\\\\s*?)(top\\\\s+\\\\d+|.*top-hitters.*of\\\\s+\\\\w+|.*top-nested.*of\\\\s+[\\\\w,\\\\(\\\\)]+\\\\s*(with others\\\\s*=\\\\s*\\\\w+\\\\s*)?|distinct|sort|order|reduce|render\\\\s+timepivot)\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_parseColumnContextRegex=new System.Text.RegularExpressions.Regex.ctor(\"(^|\\\\|\\\\s*?)parse\\\\s+(kind\\\\s*=\\\\s*\\\\w+\\\\s*(flags\\\\s*=\\\\s*\\\\w+\\\\s*)?\\\\s*)?\\\\s*$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_renderTimePivotColumnContextRegex=new System.Text.RegularExpressions.Regex.ctor(\"(^|\\\\|\\\\s*?)render\\\\s+timepivot\\\\s+by(.*,)?\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_topSortOrderReduceByRegex=new System.Text.RegularExpressions.Regex.ctor(\"(^|\\\\|\\\\s*?)(top\\\\s+\\\\d+|sort|order|reduce)\\\\s+by\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_topTopNestedSortOrderByAscDescRegex=new System.Text.RegularExpressions.Regex.ctor(\"(^|\\\\|\\\\s*?)((top\\\\s+\\\\d+|sort|order).*?by.*?(asc|desc))[ ]+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_findContextRegex=new System.Text.RegularExpressions.Regex.ctor(\"(^|\\\\s*)find\\\\s+(withsource\\\\s*\\\\=\\\\s*\\\\w+\\\\s+)?$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_findInRegex=new System.Text.RegularExpressions.Regex.ctor(\"(^|\\\\s*)find\\\\s+(withsource\\\\s*\\\\=\\\\s*[^\\\\|\\\\(\\\\)]*\\\\s+)?in\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_findInStartOrContinueListRegex=new System.Text.RegularExpressions.Regex.ctor(\"(^|\\\\s*)find\\\\s+[^\\\\|\\\\(\\\\)]*in\\\\s*\\\\(\\\\s*(\"+(Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_tablesScopeRegex||\"\")+\",\\\\s+)?\\\\s*$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_FindInEndOrContinueListRegex=new System.Text.RegularExpressions.Regex.ctor(\"(^|\\\\s*)find\\\\s+(withsource\\\\s*\\\\=\\\\s*\\\\w+\\\\s+)?in\\\\s*\\\\(\"+(Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_tablesScopeRegex||\"\")+\"\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_findWhereRegex=new System.Text.RegularExpressions.Regex.ctor(\"(^|\\\\s*)find\\\\s+[^\\\\|\\\\(\\\\)]*in\\\\s*\\\\(\"+(Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_tablesScopeRegex||\"\")+\"\\\\)\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_findProjectSmartRegex=new System.Text.RegularExpressions.Regex.ctor(\"(^|\\\\s*)find\\\\s+[^\\\\|]*\\\\s+project\\\\-smart\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_reduceByColumnContextRegex=new System.Text.RegularExpressions.Regex.ctor(\"(^|\\\\|\\\\s*?)reduce\\\\s+by\\\\s+\\\\w+\\\\s+kind\\\\s*=\\\\s*$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_topNestedSuggestingColumnsRegex=new System.Text.RegularExpressions.Regex.ctor(\"(^|\\\\|\\\\s*?).*top-nested.*of\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_topHittersSuggestingColumnsRegex=new System.Text.RegularExpressions.Regex.ctor(\"(^|\\\\|\\\\s*?).*top-hitters.*of\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_sampleDistinctSuggestingColumnsRegex=new System.Text.RegularExpressions.Regex.ctor(\"(^|\\\\|\\\\s*?).*sample-distinct.*of\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_topOrOrderAscendingDescendingRegex=new System.Text.RegularExpressions.Regex.ctor(\"(^|\\\\|\\\\s*?)(top\\\\s+\\\\d+|sort|order)\\\\s+by\\\\s+\\\\w+\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_topNestedAscendingDescendingRegex=new System.Text.RegularExpressions.Regex.ctor(\"(^|\\\\|\\\\s*?).*top-nested.*by\\\\s+.*(\\\\)|\\\\d)\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_rangeFromRegex=new System.Text.RegularExpressions.Regex.ctor(\"(^\\\\s*|join\\\\s+\\\\(\\\\s+|;\\\\s*)range\\\\s+\\\\w+\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_rangeFromToRegex=new System.Text.RegularExpressions.Regex.ctor(\"(^\\\\s*|join\\\\s+\\\\(\\\\s+|;\\\\s*)range\\\\s+\\\\w+\\\\s+from(?!.*\\\\bto)\\\\s+[^|]*[\\\\w\\\\)]+\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_rangeFromToStepRegex=new System.Text.RegularExpressions.Regex.ctor(\"(^\\\\s*|join\\\\s+\\\\(\\\\s+|;\\\\s*)range(?!.*step)\\\\s+\\\\w+\\\\s+from\\\\s+[^|]+to\\\\s+[^|]+\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_filteredColumnString=\"((^|\\\\|\\\\s*?)(filter|where)|\\\\b(and|or))\\\\s+(?<MatchingString>\\\\S+?)\\\\s+\";this.s_filteredColumnRegex=new System.Text.RegularExpressions.Regex.ctor((Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_filteredColumnString||\"\")+\"$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_filterPredicateRightValueRegex=new System.Text.RegularExpressions.Regex.ctor((Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_filteredColumnString||\"\")+\"(\\\\=\\\\=|\\\\!\\\\=|\\\\>|\\\\<|\\\\<\\\\=|\\\\>\\\\=)\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_makeSeriesByRegex=new System.Text.RegularExpressions.Regex.ctor(\"(^|\\\\|\\\\s*?)(make-series\\\\s+[^\\\\|]*\\\\bon\\\\s+[^\\\\|]+\\\\s+in\\\\s+range\\\\b\\\\([^\\\\|]+,[^\\\\|]+\\\\,[^\\\\|]+\\\\))\\\\s+by\\\\s+$|(^|\\\\|\\\\s*?)(make-series\\\\s+[^\\\\|]*\\\\bon\\\\s+[^\\\\|]+\\\\s+in\\\\s+range\\\\b\\\\([^\\\\|]+,[^\\\\|]+\\\\,[^\\\\|]+\\\\))\\\\s+by\\\\s+[^\\\\|]+?,\\\\s+$|(^|\\\\|\\\\s*?)(make-series\\\\s+[^\\\\|]*\\\\bon\\\\b)\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_searchPrefixRegex=\"(^|;|\\\\|)\\\\s*search\\\\s+\";this.s_searchContextRegex=new System.Text.RegularExpressions.Regex.ctor((Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_searchPrefixRegex||\"\")+\"$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_searchKindRegex=\"(kind\\\\s*=\\\\s*(case_sensitive|case_insensitive)\\\\s+)\";this.s_searchAfterKindContextRegex=new System.Text.RegularExpressions.Regex.ctor((Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_searchPrefixRegex||\"\")+(Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_searchKindRegex||\"\")+\"$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_searchMoreContextRegex=new System.Text.RegularExpressions.Regex.ctor((Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_searchPrefixRegex||\"\")+\"[^\\\\|]+(and|or)\\\\s+$|\"+(Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_searchPrefixRegex||\"\")+\"[^\\\\|\\\\(\\\\)]*in\\\\s*\\\\(\"+(Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_tablesScopeRegex||\"\")+\"\\\\)\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_searchKind_Regex=new System.Text.RegularExpressions.Regex.ctor((Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_searchPrefixRegex||\"\")+\"kind\\\\s*=\\\\s*$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_clientDirective_Regex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*#$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_clientDirectiveConnect_Regex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*#connect\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_operatorOptions=Kusto.Data.IntelliSense.CslCommandParser.PromotedOperatorCommandTokens;this.s_renderOptions=Kusto.Data.IntelliSense.CslCommandParser.ChartRenderTypesTokens;this.s_renderKindOptions=Kusto.Data.IntelliSense.CslCommandParser.ChartRenderKindTokens;this.s_aggregateOperationOptions=Kusto.Data.IntelliSense.CslCommandParser.SortedSummarizeAggregators;this.s_makeSeriesAggregateOperationOptions=Kusto.Data.IntelliSense.CslCommandParser.SortedMakeSeriesAggregationTokens;this.s_extendOperationOptions=Kusto.Data.IntelliSense.CslCommandParser.SortedExtendFunctions;this.s_databaseFunctionOptions=System.Array.init([\"database()\"],System.String);this.s_stringOperatorOptions=System.Array.init([\"==\",\"!=\",\"has\",\"contains\",\"startswith\",\"matches regex\",\"endswith\",\"!has\",\"!contains\",\"=~\",\"!~\",\"in\",\"!in\",\"has_cs\",\"!has_cs\",\"contains_cs\",\"!contains_cs\",\"!startswith\",\"!endswith\",\"hasprefix\",\"!hasprefix\",\"hassuffix\",\"!hassuffix\"],System.String);this.s_numericOperatorOptions=System.Array.init([\"==\",\"!=\",\">\",\"<\",\"<=\",\">=\"],System.String);this.s_numericScalarsOptions=System.Array.init([\"1\",\"10\",\"100\",\"1000\"],System.String);this.s_byKeywordOptions=System.Array.init([\"by\"],System.String);this.s_kindChooseKeywordOptions=System.Array.init([\"= simple\",\"= regex\",\"= relaxed\"],System.String);this.s_withOthersKeywordOptions=System.Array.init([\"with others = \"],System.String);this.s_ofKeywordOptions=System.Array.init([\"of\"],System.String);this.s_withKeywordOptions=System.Array.init([\"with\"],System.String);this.s_parseSuggestedTypesKeywordOptions=System.Array.init([\"long\",\"int64\",\"real\",\"double\",\"string\",\"time\",\"timespan\",\"date\",\"datetime\",\"int\"],System.String);this.s_parseStarOption=System.Array.init([\"*\"],System.String);this.s_ascDescKeywordOptions=System.Array.init([\"asc\",\"desc\"],System.String);this.s_nullsLastFirstKeywordOptions=System.Array.init([\"nulls last\",\"nulls first\"],System.String);this.s_ascDescOrNullsLastNullsFirstKeywordOptions=System.Array.init([\"asc\",\"desc\",\"nulls last\",\"nulls first\"],System.String);this.s_rangeFromOptions=System.Array.init([\"from\"],System.String);this.s_rangeFromToOptions=System.Array.init([\"to\"],System.String);this.s_rangeFromToStepOptions=System.Array.init([\"step\"],System.String);this.s_joinFlavorsOptions=Kusto.Data.IntelliSense.CslCommandParser.JoinKindTokens;this.s_postJoinOptions=System.Array.init([\"(\",\"kind=\"],System.String);this.s_kindKeywordOptions=System.Array.init([\"kind=\"],System.String);this.s_searchInKeywordOptions=System.Array.init([\"in\"],System.String);this.s_searchLiteralsOptions=System.Array.init(['\"\"',\"*\"],System.String);this.s_reduceByFlavorsOptions=Kusto.Data.IntelliSense.CslCommandParser.ReduceByKindTokens;this.s_datetimeOptions=Kusto.Data.IntelliSense.CslCommandParser.SortedDatetimeFunctions;this.s_timespanOptions=System.Array.init([\"30m\",\"1h\",\"12h\",\"1d\",\"3d\",\"7d\"],System.String);this.s_negativeTimespanOptions=System.Linq.Enumerable.from(Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_timespanOptions,System.String).select($asm.$.Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.f1).ToArray(System.String);this.s_postFindInOptions=System.Array.init([\"(\"],System.String);this.s_findInEndOrContinueOptions=System.Array.init([\")\",\",\"],System.String);this.s_findWhereInOptions=System.Array.init([\"where\",\"in\"],System.String);this.s_findInPostListOptions=System.Array.init([\"where\"],System.String);this.s_makeSeriesDefaultOrOnOptions=System.Array.init([\"on\",\"default=\"],System.String);this.s_makeSeriesOnOptions=System.Array.init([\"on\"],System.String);this.s_makeSeriesInRangeOptions=System.Array.init([\"in range()\"],System.String);this.s_searchKindOptions=System.Array.init([\"case_sensitive\",\"case_insensitive\"],System.String);this.s_clientDirectivesOptions=System.Array.init([\"connect\"],System.String);this.MultiColumnFunctionResultSuffixes=$asm.$.Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.f2(new(System.Collections.Generic.Dictionary$2(System.String,System.Array.type(System.String)).ctor));this.s_afterFunctionsApplyPolicies=System.Linq.Enumerable.from(Kusto.Data.IntelliSense.CslCommandParser.SortedExtendFunctions,System.String).toDictionary($asm.$.Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.f3,$asm.$.Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.f4,System.String,Kusto.Data.IntelliSense.ApplyPolicy);this.s_filterKeywords=$asm.$.Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.f5(new(System.Collections.Generic.HashSet$1(System.String).ctor));this.s_projectKeywords=$asm.$.Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.f6(new(System.Collections.Generic.HashSet$1(System.String).ctor));this.s_projectAwayKeywords=$asm.$.Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.f7(new(System.Collections.Generic.HashSet$1(System.String).ctor));this.s_projectRenameKeywords=$asm.$.Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.f8(new(System.Collections.Generic.HashSet$1(System.String).ctor));this.s_projectExtendKeywords=$asm.$.Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.f9(new(System.Collections.Generic.HashSet$1(System.String).ctor));this.s_joinKeywords=$asm.$.Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.f10(new(System.Collections.Generic.HashSet$1(System.String).ctor));this.s_topSortOrderReduceKeywords=$asm.$.Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.f11(new(System.Collections.Generic.HashSet$1(System.String).ctor));this.s_operatorsUsingByKeywordKeywords=$asm.$.Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.f12(new(System.Collections.Generic.HashSet$1(System.String).ctor));this.s_topSortOrderKeywords=$asm.$.Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.f13(new(System.Collections.Generic.HashSet$1(System.String).ctor));this.s_topTopNestedSortOrderKeywords=$asm.$.Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.f14(new(System.Collections.Generic.HashSet$1(System.String).ctor));this.s_reduceKeywords=$asm.$.Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.f15(new(System.Collections.Generic.HashSet$1(System.String).ctor));this.s_parseKeywords=$asm.$.Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.f16(new(System.Collections.Generic.HashSet$1(System.String).ctor));this.s_renderKeywords=$asm.$.Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.f17(new(System.Collections.Generic.HashSet$1(System.String).ctor));this.s_topLimitTakeSampleKeywords=$asm.$.Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.f18(new(System.Collections.Generic.HashSet$1(System.String).ctor));this.s_evaluateKeywords=$asm.$.Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.f19(new(System.Collections.Generic.HashSet$1(System.String).ctor));this.s_summarizeKeywords=$asm.$.Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.f20(new(System.Collections.Generic.HashSet$1(System.String).ctor));this.s_distinctKeywords=$asm.$.Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.f21(new(System.Collections.Generic.HashSet$1(System.String).ctor));this.s_topNestedKeywords=$asm.$.Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.f22(new(System.Collections.Generic.HashSet$1(System.String).ctor));this.s_topHittersKeywords=$asm.$.Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.f23(new(System.Collections.Generic.HashSet$1(System.String).ctor));this.s_sampleDistinctKeywords=$asm.$.Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.f24(new(System.Collections.Generic.HashSet$1(System.String).ctor));this.s_operatorsRequestingAggregators=$asm.$.Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.f25(new(System.Collections.Generic.HashSet$1(System.String).ctor));this.s_databaseKeywords=$asm.$.Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.f26(new(System.Collections.Generic.HashSet$1(System.String).ctor));this.s_findKeywords=$asm.$.Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.f27(new(System.Collections.Generic.HashSet$1(System.String).ctor));this.s_searchKeywords=$asm.$.Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.f28(new(System.Collections.Generic.HashSet$1(System.String).ctor));this.s_makeSeriesKeywords=$asm.$.Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.f29(new(System.Collections.Generic.HashSet$1(System.String).ctor));this.s_remoteContextRegex=new System.Text.RegularExpressions.Regex.ctor(\"^(?<HasClusterReference>cluster\\\\((?<Cluster>[^\\\\)]+?)\\\\)\\\\.?)?((?<HasDatabaseReference>database)\\\\((?<Database>[^\\\\)]*)\\\\))?(\\\\.(?<Context>(\\\\[.+?\\\\]|[\\\\w\\\\*]+))?)?\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.DefaultRegexOptions);this.s_queryParametersRegex=new System.Text.RegularExpressions.Regex.ctor(\"{\\\\w*$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_joinClosureRegex=new System.Text.RegularExpressions.Regex.ctor(\"\\\\)\\\\s*on\\\\b\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_joinWithMakeSeriesClosureRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*make-series\\\\s+.*?\\\\b(on)\\\\b.*?\\\\)\\\\s*on\\\\b\");this.s_makeSeriesStartRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*make-series\");this.s_findSubClausesRegex=new System.Text.RegularExpressions.Regex.ctor(\"(^|\\\\s*?|;)find\\\\s+[^\\\\|]*(where|project)\\\\s+[^\\\\|]*$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_searchSubClausesRegex=new System.Text.RegularExpressions.Regex.ctor(\"(^|\\\\s*?|;\\\\s*)search\\\\s+[^\\\\|]*$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_rangeEntitiesRegex=new System.Text.RegularExpressions.Regex.ctor(\"^(?<Field>[\\\\w_]+)\\\\s+\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_parsedEntitiesRegex=new System.Text.RegularExpressions.Regex.ctor(\".*?with\\\\s+(?<Entities>.+)\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_removeStringLiteralsRegex=new System.Text.RegularExpressions.Regex.ctor(\"('.*?'|\\\".*?\\\")\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_removeStringLiteralsSurroundedBySpacesRegex=new System.Text.RegularExpressions.Regex.ctor(\"\\\\s('.*?'|\\\".*?\\\")\\\\s\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_removeCommentsRegex=new System.Text.RegularExpressions.Regex.ctor(\"//.+[\\\\r\\\\n]+\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.DefaultRegexOptions);this.s_fieldInvalidCharacters=new System.Text.RegularExpressions.Regex.ctor(\"[^\\\\w \\\\-\\\\.]\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.DefaultRegexOptions);this.s_fieldQuotableCharacters=new System.Text.RegularExpressions.Regex.ctor(\"[ \\\\-\\\\.\\\\[\\\\]]\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.DefaultRegexOptions);this.s_aggregateOperatorToColumnPrefixMapping=$asm.$.Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.f30(new(System.Collections.Generic.Dictionary$2(System.String,System.String).ctor));this.s_lastCommandSegmentRegex=new System.Text.RegularExpressions.Regex.ctor(\"union(\\\\s*\\\\(.*?\\\\)\\\\s*,)+\\\\s*\\\\((?<LastSegment>.*$)\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_incompleteJoinRegex=new System.Text.RegularExpressions.Regex.ctor(\"join(?!.+\\\\bon\\\\b)\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_commandClausesRegex=new System.Text.RegularExpressions.Regex.ctor(\"(^\\\\s*(?<Clause>.*?)join|\\\\s*\\\\((?<Clause>.+?)\\\\)\\\\s+on\\\\s+\\\\w+)\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_operatorsReplacingEntities=$asm.$.Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.f31(new(System.Collections.Generic.HashSet$1(System.String).ctor));this.s_withsourceExtractRegex=new System.Text.RegularExpressions.Regex.ctor(\"withsource\\\\s*=\\\\s*(?<tableNameColumn>\\\\w+)\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_findProjectionRegex=new System.Text.RegularExpressions.Regex.ctor(\"project\\\\s+(?<projectedList>[^\\\\|]+)\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_packRgx=new System.Text.RegularExpressions.Regex.ctor(\"(,)?\\\\s*pack\\\\s*\\\\(\\\\s*\\\\*\\\\s*\\\\)\\\\s*\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_topNestedLevelExtractRegex=new System.Text.RegularExpressions.Regex.ctor(\"(top-nested)?\\\\s*\\\\d+\\\\s+of\\\\s+(?<InputColumn>[\\\\w_]+)\\\\s+by\\\\s+((?<ReanmingColumn>[\\\\w_]+)\\\\s*=\\\\s*)?(?<Aggregator>.+?(,)?)\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_sampleDistinctEntityExtractRegex=new System.Text.RegularExpressions.Regex.ctor(\"(sample-distinct)?\\\\s*\\\\d+\\\\s+of\\\\s+(?<InputColumn>[\\\\w_\\\\(\\\\), ]+)\\\\s\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_aggregateOperatorsHash=new(System.Collections.Generic.HashSet$1(System.String).$ctor1)(System.Linq.Enumerable.from(Kusto.Data.IntelliSense.CslCommandParser.SummarizeAggregationTokens,System.String).union(Kusto.Data.IntelliSense.CslCommandParser.SummarizeAggregationAliasesTokens));this.s_byKeywordRegex=new System.Text.RegularExpressions.Regex.ctor(\"\\\\bby\\\\b\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.DefaultRegexOptions);this.s_byAndOnKeywordRegex=new System.Text.RegularExpressions.Regex.ctor(\"\\\\b(by|on)\\\\b\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.DefaultRegexOptions);this.s_makeSeriesDropNonFieldsRegex=new System.Text.RegularExpressions.Regex.ctor(\"(\\\\b(default\\\\s*\\\\=\\\\s*\\\\S+)\\\\b)|(\\\\bin\\\\s+range\\\\s*\\\\(\\\\s*\\\\S+\\\\s*,\\\\s*\\\\S+\\\\s*,\\\\s*\\\\S+\\\\s*\\\\))\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.DefaultRegexOptions);this.s_fieldMatchingRegex=new System.Text.RegularExpressions.Regex.ctor(\"(?<Field>[\\\\w_]+)\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.DefaultRegexOptions);this.s_numericSuffixRegex=new System.Text.RegularExpressions.Regex.ctor(\"(?<suffix>\\\\d+)$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.DefaultRegexOptions);this.s_defaultContextPattern=\"(?<Context>(((cluster.+?)?database\\\\([^\\\\)]*\\\\)?\\\\.?(\\\\[.+?\\\\]|[\\\\w|\\\\d|*]+)?|\\\\[.+?\\\\])|[\\\\w\\\\d\\\\*]+))\";this.s_commandContext_Join=new System.Text.RegularExpressions.Regex.ctor(\".*join\\\\s.*?\\\\(\\\\s*\"+(Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_defaultContextPattern||\"\")+\"\\\\b\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_commandContext_Union=new System.Text.RegularExpressions.Regex.ctor(\"union\\\\s.*\\\\(\\\\s*\"+(Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_defaultContextPattern||\"\")+\"\\\\b\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_commandContext_ToScalar=new System.Text.RegularExpressions.Regex.ctor(\"toscalar\\\\s*\\\\(\\\\s*\"+(Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_defaultContextPattern||\"\")+\"\\\\b\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_commandContext_Show=new System.Text.RegularExpressions.Regex.ctor(\"^(?<Context>\\\\.show\\\\s+\\\\w+(\\\\s+\\\\w+)*)\\\\b\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_commandContext_Range=new System.Text.RegularExpressions.Regex.ctor(\"^(?<Context>range)\\\\b\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_commandContext_Callable=new System.Text.RegularExpressions.Regex.ctor(\"\\\\{\\\\s+\"+(Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_defaultContextPattern||\"\")+\"\\\\b\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_commandContext_Let=new System.Text.RegularExpressions.Regex.ctor(\"^let\\\\s.*?=\\\\s*(\\\\(.*?\\\\)\\\\s*\\\\{\\\\s*)?\"+(Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_defaultContextPattern||\"\")+\"\\\\b\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_commandContext_ConnectDirective=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*#connect\\\\s+(?<Context>cluster\\\\(.+?\\\\)(.database\\\\(.+\\\\))?)\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_commandContext_Find=new System.Text.RegularExpressions.Regex.ctor(\"(^|.*;)((find\\\\s+[^\\\\|]*in\\\\s*\\\\((?<Context>(\"+(Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_tablesScopeRegex||\"\")+\"))\\\\))|(find\\\\s+[^\\\\|]*in\\\\s*\\\\((\"+(Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_tablesScopeRegex||\"\")+\"\\\\s*,\\\\s*)?(((?<Context>((cluster.+\\\\.)?database\\\\([^\\\\)]*\\\\)))\\\\.)|(database\\\\((?<Context>))|((?<Context>(cluster.+\\\\.database\\\\())))))\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_commandContext_Search=new System.Text.RegularExpressions.Regex.ctor(\"(^|.*;)((search\\\\s+[^\\\\|]*in\\\\s*\\\\((?<Context>(\"+(Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_tablesScopeRegex||\"\")+\"))\\\\))|(search\\\\s+[^\\\\|]*in\\\\s*\\\\((\"+(Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_tablesScopeRegex||\"\")+\"\\\\s*,\\\\s*)?(((?<Context>((cluster.+\\\\.)?database\\\\([^\\\\)]*\\\\)))\\\\.)|(database\\\\((?<Context>))|((?<Context>(cluster.+\\\\.database\\\\())))))\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_commandDefaultContext=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\"+(Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_defaultContextPattern||\"\"),Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_twoOrMoreSpacesRegex=new System.Text.RegularExpressions.Regex.ctor(\"\\\\s\\\\s+\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_showCommandFixRegex=new System.Text.RegularExpressions.Regex.ctor(\"(.show)(.*)(extents)\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_commandContextRegexes=$asm.$.Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.f32(new(System.Collections.Generic.Dictionary$2(System.String,System.Tuple$2(System.Text.RegularExpressions.Regex,System.Text.RegularExpressions.Regex)).ctor));this.s_nonDefaultContextKeywordsRegex=new System.Text.RegularExpressions.Regex.ctor(Bridge.toArray(System.Linq.Enumerable.from(Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_commandContextRegexes.Keys,System.String).orderByDescending($asm.$.Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.f33).select($asm.$.Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.f34)).join(\"|\"),Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.DefaultRegexOptions);this.s_letVariableRegex=new System.Text.RegularExpressions.Regex.ctor(\"(^|;)\\\\s*let\\\\s+(?<LetExpressionName>\\\\w+)\\\\s*=\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_letStatementRegexList=$asm.$.Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.f35(new(System.Collections.Generic.List$1(System.Text.RegularExpressions.Regex).ctor))}},methods:{MapColumnsToTables:function(tables){var $t,$t1,result=new(System.Collections.Generic.Dictionary$2(Kusto.Data.IntelliSense.KustoCommandContext,System.Collections.Generic.List$1(System.String)).ctor),resultsUnordered,t,key,kvp;if(Kusto.Cloud.Platform.Utils.ExtendedEnumerable.SafeFastNone$2(Kusto.Data.IntelliSense.KustoIntelliSenseTableEntity,tables))return result;resultsUnordered=new(System.Collections.Generic.Dictionary$2(Kusto.Data.IntelliSense.KustoCommandContext,System.Collections.Generic.IEnumerable$1(System.String)).ctor);$t=Bridge.getEnumerator(tables,Kusto.Data.IntelliSense.KustoIntelliSenseTableEntity);try{while($t.moveNext())t=$t.Current,key=new Kusto.Data.IntelliSense.KustoCommandContext(t.Name),resultsUnordered.containsKey(key)||resultsUnordered.add(key,System.Linq.Enumerable.from(t.Columns,Kusto.Data.IntelliSense.KustoIntelliSenseColumnEntity).select($asm.$.Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.f36))}finally{Bridge.is($t,System.IDisposable)&&$t.System$IDisposable$Dispose()}$t1=Bridge.getEnumerator(resultsUnordered);try{while($t1.moveNext())kvp=$t1.Current,result.setItem(kvp.key,System.Linq.Enumerable.from(kvp.value,System.String).orderBy($asm.$.Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.f37).toList(System.String))}finally{Bridge.is($t1,System.IDisposable)&&$t1.System$IDisposable$Dispose()}return result},ParseCommandClauses:function(command){var $t,matches,clauses,m,clause;if(Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_incompleteJoinRegex.isMatch(command))return System.Array.init([command],System.String);if(matches=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_commandClausesRegex.matches(command),matches.getCount()===0)return System.Array.init([command],System.String);clauses=new(System.Collections.Generic.List$1(System.String).ctor);$t=Bridge.getEnumerator(matches);try{while($t.moveNext())m=Bridge.cast($t.Current,System.Text.RegularExpressions.Match),clause=(m.getGroups().getByName(\"Clause\").toString()||\"\")+\" | \",System.String.isNullOrWhiteSpace(clause)||clauses.add(clause)}finally{Bridge.is($t,System.IDisposable)&&$t.System$IDisposable$Dispose()}return clauses.add(command),clauses},BuildOpEntitiesMap:function(command){var $t,operatorEntitiesMap=new(System.Collections.Generic.Dictionary$2(System.String,System.String).ctor),pipeParts=System.Linq.Enumerable.from(Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.ParseAsStatements(command,124,!1),System.String).reverse(),part,opAnRest,op,entities;$t=Bridge.getEnumerator(pipeParts);try{while($t.moveNext())if(part=$t.Current,!System.String.isNullOrWhiteSpace(part)){if(Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_joinClosureRegex.isMatch(part))if(Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_makeSeriesStartRegex.isMatch(part)){if(Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_joinWithMakeSeriesClosureRegex.isMatch(part))continue}else continue;if(Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_searchSubClausesRegex.isMatch(part)){operatorEntitiesMap.containsKey(\"search\")||operatorEntitiesMap.add(\"search\",\"\");continue}if((System.String.endsWith(part,\"|\")||Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_findSubClausesRegex.isMatch(part))&&(opAnRest=System.String.split(part,System.Array.init([32,13,10],System.Char).map(function(i){return String.fromCharCode(i)}),2,1),opAnRest.length===2)&&(op=opAnRest[System.Array.index(0,opAnRest)],entities=Bridge.referenceEquals(op,\"find\")?opAnRest[System.Array.index(1,opAnRest)]:Kusto.Cloud.Platform.Utils.ExtendedString.TrimEnd(opAnRest[System.Array.index(1,opAnRest)],\"|\"),operatorEntitiesMap.containsKey(op)?operatorEntitiesMap.setItem(op,(operatorEntitiesMap.getItem(op)||\"\")+\",\"+(entities||\"\")):operatorEntitiesMap.add(op,entities),Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_operatorsReplacingEntities.contains(op)))break}}finally{Bridge.is($t,System.IDisposable)&&$t.System$IDisposable$Dispose()}return operatorEntitiesMap},HandleParseEntities:function(entitiesList,result,opEntitiesMap,knownEntities){var $t,list={v:null},wasAdded,match,parsedColumnsString,parsedColumns,columnCandidate,col;if(!opEntitiesMap.tryGetValue(\"parse\",list))return result;if(wasAdded=!1,match=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_parsedEntitiesRegex.match(list.v),match.getSuccess()){parsedColumnsString=match.getGroups().getByName(\"Entities\").toString();parsedColumns=System.String.split(parsedColumnsString,System.Array.init([42,32],System.Char).map(function(i){return String.fromCharCode(i)}),null,1);$t=Bridge.getEnumerator(parsedColumns);try{while($t.moveNext())(columnCandidate=$t.Current,col=columnCandidate.trim(),!System.String.isNullOrEmpty(col)&&System.Char.isLetter(col.charCodeAt(0)))&&(col=Kusto.Cloud.Platform.Utils.ExtendedString.SplitFirst(col,58),wasAdded=!!(wasAdded|Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.AddEscapedEntityName(entitiesList,col)))}finally{Bridge.is($t,System.IDisposable)&&$t.System$IDisposable$Dispose()}}return wasAdded?Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.ResolveResult.AppendEntities:result},HandleReduceByEntities:function(entitiesList,result,opEntitiesMap,knownEntities){var lastPipePart={v:null};return opEntitiesMap.tryGetValue(\"reduce\",lastPipePart)?(entitiesList.AddRange(System.Array.init([\"Pattern\",\"Count\"],System.String)),Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.ResolveResult.ReplaceEntities):result},HandleGetSchemaEntities:function(entitiesList,result,opEntitiesMap,knownEntities){var lastPipePart={v:null};return opEntitiesMap.tryGetValue(\"getschema\",lastPipePart)?(entitiesList.AddRange(System.Array.init([\"ColumnName\",\"ColumnOrdinal\",\"DataType\",\"ColumnType\"],System.String)),Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.ResolveResult.ReplaceEntities):result},HandleRangeEntities:function(entitiesList,result,opEntitiesMap,knownEntities){var entitites={v:null},match,field;return opEntitiesMap.tryGetValue(\"range\",entitites)?(match=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_rangeEntitiesRegex.match(entitites.v),match.getSuccess()&&(field=match.getGroups().getByName(\"Field\").toString(),entitiesList.contains(field)||(entitiesList.add(field),result=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.ResolveResult.AppendEntities)),result):result},HandlePrintEntities:function(entitiesList,result,opEntitiesMap,knownEntities){var entitites={v:null},match,field;return opEntitiesMap.tryGetValue(\"print\",entitites)?(match=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_rangeEntitiesRegex.match(entitites.v),match.getSuccess()&&(field=match.getGroups().getByName(\"Field\").toString(),entitiesList.contains(field)||(entitiesList.add(field),result=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.ResolveResult.AppendEntities)),result):result},HandleProjectEntities:function(entitiesList,result,opEntitiesMap,knownEntities){var list={v:null},wasAdded;return opEntitiesMap.tryGetValue(\"project\",list)?(wasAdded=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.ResolveEntitiesFromListWithImplicitColumns(entitiesList,list.v),wasAdded&&(result=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.ResolveResult.ReplaceEntities),result):result},HandleProjectAwayEntities:function(entitiesList,result,opEntitiesMap,knownEntities){var $t,$t1,list={v:null},entities,fields,entity,field,safeKnownEntities,field1;if(!opEntitiesMap.tryGetValue(\"project-away\",list))return result;entities=Kusto.Data.IntelliSense.ExpressionEntityParser.ParseEntities(list.v);fields=new(System.Collections.Generic.List$1(System.String).ctor);$t=Bridge.getEnumerator(entities);try{while($t.moveNext())entity=$t.Current,field=entity.Name,entitiesList.contains(field)?entitiesList.remove(field):fields.add(field)}finally{Bridge.is($t,System.IDisposable)&&$t.System$IDisposable$Dispose()}if(System.Linq.Enumerable.from(fields,System.String).any()&&Kusto.Cloud.Platform.Utils.ExtendedEnumerable.SafeFastNone$1(System.String,entitiesList)){safeKnownEntities=knownEntities!=null?knownEntities:new(System.Collections.Generic.List$1(System.String).ctor);$t1=Bridge.getEnumerator(System.Linq.Enumerable.from(safeKnownEntities,System.String).except(fields).ToArray(System.String));try{while($t1.moveNext())field1=$t1.Current,Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.AddEscapedEntityName(entitiesList,field1)}finally{Bridge.is($t1,System.IDisposable)&&$t1.System$IDisposable$Dispose()}}return Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.ResolveResult.ReplaceEntities},HandleMvexpandEntities:function(entitiesList,result,opEntitiesMap,knownEntities){var list={v:null},wasAdded;return!opEntitiesMap.tryGetValue(\"mvexpand\",list)&&!opEntitiesMap.tryGetValue(\"mv-expand\",list)?result:(wasAdded=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.ResolveEntitiesFromList(entitiesList,list.v),result===Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.ResolveResult.None&&wasAdded&&(result=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.ResolveResult.AppendEntities),result)},HandleTopNestedEntities:function(entitiesList,result,opEntitiesMap,knownEntities){var $t,list={v:null},changed=!1,matches,extendedColumnName;if(!opEntitiesMap.tryGetValue(\"top-nested\",list))return result;matches=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_topNestedLevelExtractRegex.matches(list.v);matches.getCount()>0&&(changed=!0);$t=Bridge.getEnumerator(matches);try{while($t.moveNext()){var match=$t.Current,convertedMatch=Bridge.as(match,System.Text.RegularExpressions.Match),columnName=convertedMatch.getGroups().getByName(\"InputColumn\").toString();Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.AddEscapedEntityName(entitiesList,columnName);extendedColumnName=convertedMatch.getGroups().getByName(\"ReanmingColumn\").toString();System.String.isNullOrEmpty(extendedColumnName)&&(extendedColumnName=\"aggregated_\"+(columnName||\"\"));Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.AddEscapedEntityName(entitiesList,extendedColumnName)}}finally{Bridge.is($t,System.IDisposable)&&$t.System$IDisposable$Dispose()}return changed&&(result=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.ResolveResult.ReplaceEntities),result},HandleExtendEntities:function(entitiesList,result,opEntitiesMap,knownEntities){var list={v:null},wasAdded;return opEntitiesMap.tryGetValue(\"extend\",list)?(wasAdded=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.ResolveEntitiesFromListWithImplicitColumns(entitiesList,list.v),result===Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.ResolveResult.None&&wasAdded&&(result=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.ResolveResult.AppendEntities),result):result},HandleSampleDistinctEntities:function(entitiesList,result,opEntitiesMap,knownEntities){var list={v:null},match,inputColumn;return opEntitiesMap.tryGetValue(\"sample-distinct\",list)?(match=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_sampleDistinctEntityExtractRegex.match(list.v),!match.getSuccess())?Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.ResolveResult.None:(inputColumn=match.getGroups().getByName(\"InputColumn\").toString(),Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.HandleAggregationEntities(entitiesList,inputColumn,knownEntities)):result},GenerateImplicitEntitiesForFunction:function(funcName,$arguments,explicitlySpecifiedResultColumnCount,resultEntities){var $t,$t1,resultSuffixes,argName,added,suffix,generatedName;if(explicitlySpecifiedResultColumnCount!==0||Kusto.Cloud.Platform.Utils.ExtendedEnumerable.SafeFastNone$2(Kusto.Data.IntelliSense.ExpressionEntity,$arguments)||!Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.MultiColumnFunctionResultSuffixes.containsKey(funcName)||(resultSuffixes=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.MultiColumnFunctionResultSuffixes.getItem(funcName),resultSuffixes.length<explicitlySpecifiedResultColumnCount))return!1;argName=System.Linq.Enumerable.from($arguments,Kusto.Data.IntelliSense.ExpressionEntity).first().Name;added=!1;$t=Bridge.getEnumerator(System.Linq.Enumerable.from(resultSuffixes,System.String).skip(explicitlySpecifiedResultColumnCount));try{while($t.moveNext())suffix=$t.Current,generatedName=Kusto.Cloud.Platform.Utils.ExtendedString.FormatWithInvariantCulture(\"{0}_{1}_{2}\",[funcName,argName,suffix]),resultEntities.add(($t1=new Kusto.Data.IntelliSense.ExpressionEntity,$t1.Name=generatedName,$t1.IsGenerated=!0,$t1)),added=!0}finally{Bridge.is($t,System.IDisposable)&&$t.System$IDisposable$Dispose()}return added},ResolveEntitiesFromListWithImplicitColumns:function(entitiesList,input){var $t,wasAdded=!1,entities=Kusto.Data.IntelliSense.ExpressionEntityParser.ParseEntities$1(input,Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.GenerateImplicitEntitiesForFunction),entity;$t=Bridge.getEnumerator(entities);try{while($t.moveNext())entity=$t.Current,wasAdded=!!(wasAdded|entity.IsGenerated?Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.AddFieldRenameIfPresent(entitiesList,entity.Name):Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.AddFieldIfNotPresent(entitiesList,entity.Name))}finally{Bridge.is($t,System.IDisposable)&&$t.System$IDisposable$Dispose()}return wasAdded},ResolveEntitiesFromList:function(entitiesList,input,generateImplicitColumnNames){var $t,wasAdded,entities,entity;generateImplicitColumnNames===void 0&&(generateImplicitColumnNames=!1);wasAdded=!1;entities=Kusto.Data.IntelliSense.ExpressionEntityParser.ParseEntities(input);$t=Bridge.getEnumerator(entities);try{while($t.moveNext())entity=$t.Current,wasAdded=!!(wasAdded|Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.AddFieldIfNotPresent(entitiesList,entity.Name))}finally{Bridge.is($t,System.IDisposable)&&$t.System$IDisposable$Dispose()}return wasAdded},HandleSummarizeEntities:function(entitiesList,result,opEntitiesMap,knownEntities){var list={v:null},entities;return opEntitiesMap.tryGetValue(\"summarize\",list)?(entities=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_byKeywordRegex.replace(list.v,\", \"),Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.HandleAggregationEntities(entitiesList,entities,knownEntities)):result},HandleMakeSeriesEntities:function(entitiesList,result,opEntitiesMap,knownEntities){var list={v:null},entities;return opEntitiesMap.tryGetValue(\"make-series\",list)?(entities=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_byAndOnKeywordRegex.replace(list.v,\", \"),entities=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_makeSeriesDropNonFieldsRegex.replace(entities,\"\"),Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.HandleAggregationEntities(entitiesList,entities,knownEntities)):result},HandleAggregationEntities:function(entitiesList,entities,knownEntities){var $t,$t1,argMinMaxEntities=null,parsedEntities=Kusto.Data.IntelliSense.ExpressionEntityParser.ParseEntities(entities),entity,correctedOp,preserveNames;$t=Bridge.getEnumerator(parsedEntities);try{while($t.moveNext()){var parsedEntity=$t.Current,op=parsedEntity.Operator,field=($t1=parsedEntity.Name,$t1!=null?$t1:\"\"),arg0=field,wasAdded=!1;!System.String.isNullOrEmpty(op)&&Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_aggregateOperatorsHash.contains(op)&&(Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_aggregateOperatorToColumnPrefixMapping.containsKey(op)&&(op=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_aggregateOperatorToColumnPrefixMapping.getItem(op)),entity=(op||\"\")+\"_\"+(field||\"\"),System.String.equals(op,\"percentile\",4)?wasAdded=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.HandlePercentileAggregateEntities(entitiesList,parsedEntity,entity,knownEntities):System.String.equals(op,\"argmin\",4)||System.String.equals(op,\"argmax\",4)||System.String.equals(op,\"arg_min\",4)||System.String.equals(op,\"arg_max\",4)?(argMinMaxEntities==null&&(argMinMaxEntities=new(System.Collections.Generic.List$1(System.String).ctor)),correctedOp=op.substr(op.length-3|0,3),preserveNames=System.String.equals(op,\"arg_max\",4)||System.String.equals(op,\"arg_min\",4),entity=preserveNames?field:(correctedOp||\"\")+\"_\"+(field||\"\"),wasAdded=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.HandleArgMinMaxAggregateEntities(argMinMaxEntities,parsedEntity,correctedOp,arg0,entity,preserveNames,knownEntities)):Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_fieldInvalidCharacters.isMatch(entity)&&(entity=(op||\"\")+\"_\"),field=entity);wasAdded||Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.AddEscapedEntityName(entitiesList,field)}}finally{Bridge.is($t,System.IDisposable)&&$t.System$IDisposable$Dispose()}return Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.FinalizeSummarizeEntitiesList(argMinMaxEntities,entitiesList),Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.ResolveResult.ReplaceEntities},AddEscapedEntityName:function(entitiesList,entity){return(entity=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.EscapeEntityNameIfNeeded(entity),!entitiesList.contains(entity))?(entitiesList.add(entity),!0):!1},EscapeEntityNameIfNeeded:function(entity){return Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_fieldQuotableCharacters.isMatch(entity)&&(entity=\"['\"+(entity||\"\")+\"']\"),entity},FinalizeSummarizeEntitiesList:function(argMinMaxEntities,entitiesList){var regexExpression,regex;if(argMinMaxEntities!=null&&argMinMaxEntities.Count!==0){if(entitiesList.Count===0){entitiesList.AddRange(argMinMaxEntities);return}regexExpression=System.String.format(\"^(min|max)_.+?_({0})$\",[Bridge.toArray(entitiesList).join(\"|\")]);try{regex=new System.Text.RegularExpressions.Regex.ctor(regexExpression,Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.DefaultRegexOptions);System.Linq.Enumerable.from(argMinMaxEntities,System.String).where(function(en){return!regex.isMatch(en)}).forEach(function(field){return Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.AddFieldIfNotPresent(entitiesList,field)})}catch($e1){if($e1=System.Exception.create($e1),Bridge.is($e1,System.ArgumentException))return;else throw $e1;}}},HandlePercentileAggregateEntities:function(entitiesList,parsedEntity,field,knownEntities){var $t,wasAdded=!1,correctedField=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_fieldMatchingRegex.match(field).getGroups().getByName(\"Field\").toString(),$arguments=parsedEntity.Arguments,arg,fieldname;if(Kusto.Cloud.Platform.Utils.ExtendedEnumerable.SafeFastNone$2(System.String,$arguments))return wasAdded;$t=Bridge.getEnumerator($arguments,System.String);try{while($t.moveNext())arg=$t.Current,fieldname=(correctedField||\"\")+\"_\"+(Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_fieldQuotableCharacters.replace(arg,\"_\")||\"\"),wasAdded=!!(wasAdded|Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.AddFieldIfNotPresent(entitiesList,fieldname))}finally{Bridge.is($t,System.IDisposable)&&$t.System$IDisposable$Dispose()}return wasAdded},HandleArgMinMaxAggregateEntities:function(entitiesList,parsedEntity,op,arg0,field,preserveNames,knownEntities){var $t,$t1,wasAdded=!1,fieldReplaced=!1,$arguments,argCount,arg,fieldname,wildCardMatch,matchingEntities,en,fieldname1,fieldname2;if(Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_fieldInvalidCharacters.isMatch(field)&&(field=(op||\"\")+\"_\",fieldReplaced=!0),wasAdded=!!(wasAdded|Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.AddFieldIfNotPresent(entitiesList,field)),$arguments=parsedEntity.Arguments,Kusto.Cloud.Platform.Utils.ExtendedEnumerable.SafeFastNone$2(System.String,$arguments))return wasAdded;argCount=1;$t=Bridge.getEnumerator(parsedEntity.Arguments,System.String);try{while($t.moveNext()){if(arg=$t.Current,Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_fieldInvalidCharacters.isMatch(arg))if(Kusto.Cloud.Platform.Utils.ExtendedRegex.IsWildCardPattern(arg)){if(knownEntities!=null&&System.Linq.Enumerable.from(knownEntities,System.String).any()&&(wildCardMatch={v:Kusto.Cloud.Platform.Utils.ExtendedRegex.TryTransformWildCardPatternToRegex(arg)},wildCardMatch.v!=null&&(matchingEntities=System.Linq.Enumerable.from(knownEntities,System.String).where(function($me,wildCardMatch){return function(en){return!Bridge.referenceEquals(en,arg0)&&wildCardMatch.v.isMatch(en)}}(this,wildCardMatch)).toList(System.String),System.Linq.Enumerable.from(matchingEntities,System.String).any()))){$t1=Bridge.getEnumerator(matchingEntities);try{while($t1.moveNext())en=$t1.Current,fieldname1=preserveNames?en:(field||\"\")+\"_\"+(en||\"\"),wasAdded=!!(wasAdded|Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.AddFieldIfNotPresent(entitiesList,fieldname1))}finally{Bridge.is($t1,System.IDisposable)&&$t1.System$IDisposable$Dispose()}}}else fieldname2=System.String.format(\"{0}_{1}_arg{2}\",op,preserveNames&&!fieldReplaced&&!System.String.isNullOrWhiteSpace(field)?field:\"\",Bridge.box(argCount,System.Int32)),wasAdded=!!(wasAdded|Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.AddFieldIfNotPresent(entitiesList,fieldname2));else fieldname=preserveNames?arg:(field||\"\")+\"_\"+(arg||\"\"),wasAdded=!!(wasAdded|Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.AddFieldIfNotPresent(entitiesList,fieldname));argCount=argCount+1|0}}finally{Bridge.is($t,System.IDisposable)&&$t.System$IDisposable$Dispose()}return wasAdded},AddFieldIfNotPresent:function(entitiesList,field){return System.String.isNullOrEmpty(field)?!1:Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.AddEscapedEntityName(entitiesList,field)},AddFieldRenameIfPresent:function(entitiesList,field){var escapedField,match,suffix;if(System.String.isNullOrEmpty(field))return!1;for(escapedField=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.EscapeEntityNameIfNeeded(field),entitiesList.contains(escapedField)&&(field=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_numericSuffixRegex.replace(field,\"\"),escapedField=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.EscapeEntityNameIfNeeded(field)),entitiesList.contains(escapedField)&&(field=(field||\"\")+\"1\",escapedField=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.EscapeEntityNameIfNeeded(field));entitiesList.contains(escapedField);)if(match=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_numericSuffixRegex.match(field),match.getSuccess())suffix=System.Int32.parse(match.getGroups().getByName(\"suffix\").getValue()),suffix=suffix+1|0,field=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_numericSuffixRegex.replace(field,Bridge.toString(suffix)),escapedField=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.EscapeEntityNameIfNeeded(field);else return!1;return entitiesList.add(escapedField),!0},GetLatestMatch:function(matchesKeywords){var $t,lastMatch=null,m;$t=Bridge.getEnumerator(matchesKeywords);try{while($t.moveNext())(m=Bridge.cast($t.Current,System.Text.RegularExpressions.Match),m.getSuccess())&&(lastMatch==null?lastMatch=m:lastMatch.getIndex()<m.getIndex()&&(lastMatch=m))}finally{Bridge.is($t,System.IDisposable)&&$t.System$IDisposable$Dispose()}return lastMatch},ResolveContextUsingRegex:function(command,contextMatchRegex,startat){if(System.String.startsWith(System.String.trimStart(command.substr(startat)),\"|\",4))return null;var matchingRegex=contextMatchRegex.Item1,transformationRegex=contextMatchRegex.Item2,tableContext=null,contextMatch=matchingRegex.match(command,startat);return contextMatch.getSuccess()&&(tableContext=contextMatch.getGroups().getByName(\"Context\").toString(),transformationRegex!=null&&(tableContext=transformationRegex.replace(tableContext,$asm.$.Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.f38)),tableContext=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_twoOrMoreSpacesRegex.replace(tableContext,\" \")),tableContext},ResolveLetVariable:function(letStatement){if(System.String.isNullOrEmpty(letStatement))return\"\";var letMatch=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_letVariableRegex.match(letStatement);return letMatch.getSuccess()?letMatch.getGroups().getByName(\"LetExpressionName\").toString():\"\"},ResolveLetExpressions:function(statements){var $t,$t1,result=new(System.Collections.Generic.Dictionary$2(System.String,System.String).ctor),regex,letMatches;$t=Bridge.getEnumerator(Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_letStatementRegexList);try{while($t.moveNext()){regex=$t.Current;letMatches=regex.matches(statements);$t1=Bridge.getEnumerator(letMatches);try{while($t1.moveNext()){var m=Bridge.cast($t1.Current,System.Text.RegularExpressions.Match),variable=m.getGroups().getByName(\"LetExpressionName\").toString(),statement=m.getGroups().getByName(\"Expression\").toString();result.containsKey(variable)||result.add(variable,statement)}}finally{Bridge.is($t1,System.IDisposable)&&$t1.System$IDisposable$Dispose()}}}finally{Bridge.is($t,System.IDisposable)&&$t.System$IDisposable$Dispose()}return result}}},fields:{s_afterjoinOperatorApplyPolicies:null,s_afterRenderApplyPolicies:null,s_afterEvaluatePluginPolicies:null,s_afterFindApplyPolicies:null,s_afterFindInApplyPolicies:null,s_afterFindInEndOrContinuePolicies:null,s_afterSearchApplyPolicies:null,m_queryParameters:null,m_remoteSchemaResolver:null,m_remoteColumnMappingsToTables:null,m_remoteDatabaseMappingToClusters:null,m_availableClusters:null,m_allowClientDirectives:!1,m_contextCache:null},props:{TableNames:null,FunctionMappings:null,ColumnMappingsToTables:null,ColumnMappingsToWildcardedTables:null,OverridingColumnMapping:null,OverridingDatabaseMapping:null,OverridingTablesMapping:null,RemoteTableNames:{get:function(){return this.OverridingTablesMapping!=null?System.Linq.Enumerable.from(this.OverridingTablesMapping,System.Collections.Generic.KeyValuePair$2(Kusto.Data.IntelliSense.KustoCommandContext,System.Collections.Generic.List$1(System.String))).selectMany($asm.$.Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.f46):null}},FunctionNames:{get:function(){return this.FunctionMappings!=null?System.Linq.Enumerable.from(this.FunctionMappings.Keys,System.String).orderBy($asm.$.Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.f47):System.Linq.Enumerable.empty()}},AllowQueryParameters:!1,Cluster:null,DatabaseSchema:null,Database:{get:function(){return this.DatabaseSchema!=null?this.DatabaseSchema.Database:null}},Databases:{get:function(){return this.Cluster!=null?this.Cluster.Databases:null}},Tables:{get:function(){return this.DatabaseSchema!=null&&this.DatabaseSchema.Database!=null?this.DatabaseSchema.Database.Tables:null}},Functions:{get:function(){return this.DatabaseSchema!=null&&this.DatabaseSchema.Database!=null?this.DatabaseSchema.Database.Functions:null}},ContextCache:{get:function(){return this.m_contextCache},set:function(value){this.m_contextCache=value}}},ctors:{init:function(){this.s_afterjoinOperatorApplyPolicies=$asm.$.Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.f39(new(System.Collections.Generic.Dictionary$2(System.String,Kusto.Data.IntelliSense.ApplyPolicy).ctor));this.s_afterRenderApplyPolicies=$asm.$.Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.f40(new(System.Collections.Generic.Dictionary$2(System.String,Kusto.Data.IntelliSense.ApplyPolicy).ctor));this.s_afterEvaluatePluginPolicies=$asm.$.Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.f41(new(System.Collections.Generic.Dictionary$2(System.String,Kusto.Data.IntelliSense.ApplyPolicy).ctor));this.s_afterFindApplyPolicies=$asm.$.Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.f42(new(System.Collections.Generic.Dictionary$2(System.String,Kusto.Data.IntelliSense.ApplyPolicy).ctor));this.s_afterFindInApplyPolicies=$asm.$.Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.f43(new(System.Collections.Generic.Dictionary$2(System.String,Kusto.Data.IntelliSense.ApplyPolicy).ctor));this.s_afterFindInEndOrContinuePolicies=$asm.$.Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.f44(new(System.Collections.Generic.Dictionary$2(System.String,Kusto.Data.IntelliSense.ApplyPolicy).ctor));this.s_afterSearchApplyPolicies=$asm.$.Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.f45(new(System.Collections.Generic.Dictionary$2(System.String,Kusto.Data.IntelliSense.ApplyPolicy).$ctor1)(Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_afterFunctionsApplyPolicies));this.m_remoteColumnMappingsToTables=new(System.Collections.Generic.Dictionary$2(Kusto.Data.IntelliSense.KustoCommandContext,System.Collections.Generic.Dictionary$2(Kusto.Data.IntelliSense.KustoCommandContext,System.Collections.Generic.List$1(System.String))).ctor);this.m_remoteDatabaseMappingToClusters=new(System.Collections.Generic.Dictionary$2(System.String,System.Collections.Generic.List$1(System.String)).ctor);this.m_contextCache=new(System.Collections.Generic.Dictionary$2(System.Int32,Kusto.Data.IntelliSense.KustoCommandContext).ctor)},$ctor1:function(cluster,databaseSchema,queryParameters,availableClusters,schemaResolver,allowQueryParameters,allowClientDirectives){this.$initialize();Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.ctor.call(this);this.Cluster=cluster;this.DatabaseSchema=databaseSchema;this.m_queryParameters=queryParameters;this.m_remoteSchemaResolver=schemaResolver;this.m_availableClusters=availableClusters;this.m_allowClientDirectives=allowClientDirectives;this.AllowQueryParameters=allowQueryParameters;this.Initialize();this.LoadRules()},ctor:function(other){var $t;this.$initialize();Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.ctor.call(this);this.Cluster=other.Cluster.Clone();this.DatabaseSchema=other.DatabaseSchema.Clone();this.m_queryParameters=Kusto.Cloud.Platform.Utils.ExtendedEnumerable.SafeFastAny$2(System.String,other.m_queryParameters)?($t=System.String,System.Linq.Enumerable.from(other.m_queryParameters,$t).ToArray($t)):null;this.m_remoteSchemaResolver=other.m_remoteSchemaResolver;this.m_availableClusters=other.m_availableClusters;this.m_allowClientDirectives=other.m_allowClientDirectives;this.AllowQueryParameters=other.AllowQueryParameters;this.Initialize();this.LoadRules()}},methods:{ResetState:function(){Kusto.Cloud.Platform.Utils.ExtendedEnumerable.SafeFastAny$1(System.Collections.Generic.KeyValuePair$2(Kusto.Data.IntelliSense.KustoCommandContext,System.Collections.Generic.List$1(System.String)),this.OverridingColumnMapping)&&this.OverridingColumnMapping.clear();Kusto.Cloud.Platform.Utils.ExtendedEnumerable.SafeFastAny$1(System.Collections.Generic.KeyValuePair$2(Kusto.Data.IntelliSense.KustoCommandContext,System.Collections.Generic.List$1(System.String)),this.OverridingDatabaseMapping)&&this.OverridingDatabaseMapping.clear();Kusto.Cloud.Platform.Utils.ExtendedEnumerable.SafeFastAny$1(System.Collections.Generic.KeyValuePair$2(Kusto.Data.IntelliSense.KustoCommandContext,System.Collections.Generic.List$1(System.String)),this.OverridingTablesMapping)&&this.OverridingTablesMapping.clear()},Clone:function(){return new Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.ctor(this)},UpdateProviderAvailableEntities:function(command,commandContext){var knownEntities=this.ResolveKnownEntitiesFromContext(commandContext),commandEntities=new(System.Collections.Generic.List$1(System.String).ctor),entitiesResolveResult=this.ResolveEntitiesFromCommand(command,commandEntities,knownEntities);switch(entitiesResolveResult){case Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.ResolveResult.ReplaceEntities:this.RegisterCommandEntities(commandContext,commandEntities,!0);break;case Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.ResolveResult.None:case Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.ResolveResult.AppendEntities:this.RegisterCommandEntities(commandContext,commandEntities,!1);break}},ResolveKnownEntitiesFromContext:function(commandContext){var $t,$t1,$t2,outputColumns={v:null},remoteColumnMappingsToTables=new(System.Collections.Generic.Dictionary$2(Kusto.Data.IntelliSense.KustoCommandContext,System.Collections.Generic.List$1(System.String)).ctor),dbNames=new(System.Collections.Generic.List$1(System.String).ctor),localWildcardedTablesColumns={v:null},performUnion=commandContext.Operation===Kusto.Data.IntelliSense.ContextOperation.Union,contextParts=commandContext.Flatten(),columnMappingsToTables,mapping,columns,partDbs,wildCardMatch,intersection,contextWithNoOperation;$t=Bridge.getEnumerator(contextParts,Kusto.Data.IntelliSense.KustoCommandContext);try{while($t.moveNext()){var kustoCommandContextPart=$t.Current,clusterUriOrAlias={},databaseNameOrAlias={},remoteContext={},matchingEntities={v:null};if(this.ResolveRemoteContext(kustoCommandContextPart.Context,clusterUriOrAlias,databaseNameOrAlias,remoteContext)){if(columnMappingsToTables=this.UpdateColumnsList(kustoCommandContextPart,clusterUriOrAlias.v,databaseNameOrAlias.v,remoteContext.v),Kusto.Cloud.Platform.Utils.ExtendedEnumerable.SafeFastAny$1(System.Collections.Generic.KeyValuePair$2(Kusto.Data.IntelliSense.KustoCommandContext,System.Collections.Generic.List$1(System.String)),columnMappingsToTables)){$t1=Bridge.getEnumerator(columnMappingsToTables);try{while($t1.moveNext())mapping=$t1.Current,columns={},remoteColumnMappingsToTables.tryGetValue(mapping.key,columns)||(columns.v=new(System.Collections.Generic.List$1(System.String).ctor)),remoteColumnMappingsToTables.setItem(mapping.key,System.Linq.Enumerable.from(columns.v,System.String).union(mapping.value).toList(System.String))}finally{Bridge.is($t1,System.IDisposable)&&$t1.System$IDisposable$Dispose()}matchingEntities.v=System.Linq.Enumerable.from(columnMappingsToTables.Values,System.Collections.Generic.List$1(System.String)).selectMany($asm.$.Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.f48).toList(System.String)}this.UpdateDatabaseList(kustoCommandContextPart,clusterUriOrAlias.v,databaseNameOrAlias.v);partDbs={};this.OverridingDatabaseMapping.tryGetValue(kustoCommandContextPart,partDbs)&&(dbNames=System.Linq.Enumerable.from(dbNames,System.String).union(partDbs.v).toList(System.String))}else if(Kusto.Cloud.Platform.Utils.ExtendedRegex.IsWildCardPattern(kustoCommandContextPart.Context)){if(this.ColumnMappingsToWildcardedTables.tryGetValue(kustoCommandContextPart,matchingEntities),Kusto.Cloud.Platform.Utils.ExtendedEnumerable.SafeFastNone$1(System.String,matchingEntities.v)&&(wildCardMatch={v:Kusto.Cloud.Platform.Utils.ExtendedRegex.TryTransformWildCardPatternToRegex(kustoCommandContextPart.Context)},wildCardMatch.v!=null)){if(Kusto.Cloud.Platform.Utils.ExtendedEnumerable.SafeFastAny$2(Kusto.Data.IntelliSense.KustoIntelliSenseTableEntity,this.Tables)){var matchedTables=System.Linq.Enumerable.from(this.Tables,Kusto.Data.IntelliSense.KustoIntelliSenseTableEntity).where(function($me,wildCardMatch){return function(t){return!t.IsInvisible&&wildCardMatch.v.isMatch(t.Name)}}(this,wildCardMatch)),matchedTableNames={v:new(System.Collections.Generic.HashSet$1(System.String).$ctor1)(matchedTables.select($asm.$.Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.f49))},entitiesTables=System.Linq.Enumerable.from(this.ColumnMappingsToTables,System.Collections.Generic.KeyValuePair$2(Kusto.Data.IntelliSense.KustoCommandContext,System.Collections.Generic.List$1(System.String))).where(function($me,matchedTableNames){return function(t){return matchedTableNames.v.contains(t.key.Context)}}(this,matchedTableNames));performUnion?matchingEntities.v=entitiesTables.selectMany($asm.$.Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.f50).distinct().toList(System.String):(intersection=Kusto.Cloud.Platform.Utils.ExtendedEnumerable.Intersect(System.String,entitiesTables.select($asm.$.Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.f50)),matchingEntities.v=intersection!=null?($t2=System.String,System.Linq.Enumerable.from(intersection,$t2).toList($t2)):new(System.Collections.Generic.List$1(System.String).ctor))}else matchingEntities.v=new(System.Collections.Generic.List$1(System.String).ctor);this.ColumnMappingsToWildcardedTables.setItem(kustoCommandContextPart,System.Linq.Enumerable.from(matchingEntities.v,System.String).orderBy($asm.$.Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.f37).toList(System.String));this.PerformGroupActionOrInit(localWildcardedTablesColumns,this.ColumnMappingsToWildcardedTables.getItem(kustoCommandContextPart),performUnion)}}else contextWithNoOperation=new Kusto.Data.IntelliSense.KustoCommandContext(kustoCommandContextPart.Context),this.ColumnMappingsToTables.tryGetValue(contextWithNoOperation,matchingEntities);this.PerformGroupActionOrInit(outputColumns,matchingEntities.v,performUnion)}}finally{Bridge.is($t,System.IDisposable)&&$t.System$IDisposable$Dispose()}return!this.m_remoteColumnMappingsToTables.containsKey(commandContext)&&Kusto.Cloud.Platform.Utils.ExtendedEnumerable.SafeFastAny$1(System.Collections.Generic.KeyValuePair$2(Kusto.Data.IntelliSense.KustoCommandContext,System.Collections.Generic.List$1(System.String)),remoteColumnMappingsToTables)&&this.m_remoteColumnMappingsToTables.setItem(commandContext,remoteColumnMappingsToTables),!this.OverridingDatabaseMapping.containsKey(commandContext)&&Kusto.Cloud.Platform.Utils.ExtendedEnumerable.SafeFastAny$4(System.String,dbNames)&&this.OverridingDatabaseMapping.setItem(commandContext,dbNames),this.ColumnMappingsToWildcardedTables.containsKey(commandContext)||this.ColumnMappingsToWildcardedTables.setItem(commandContext,(localWildcardedTablesColumns.v!=null?System.Linq.Enumerable.from(localWildcardedTablesColumns.v,System.String).orderBy($asm.$.Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.f37).toList(System.String):null)||new(System.Collections.Generic.List$1(System.String).ctor)),outputColumns.v!=null?System.Linq.Enumerable.from(outputColumns.v,System.String).orderBy($asm.$.Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.f37).toList(System.String):null},PerformGroupActionOrInit:function(target,source,performUnion){if(Kusto.Cloud.Platform.Utils.ExtendedEnumerable.SafeFastNone$1(System.String,source)&&(source=new(System.Collections.Generic.List$1(System.String).ctor)),target.v==null){target.v=new(System.Collections.Generic.HashSet$1(System.String).$ctor1)(source);return}performUnion?target.v.unionWith(source):target.v.intersectWith(source)},UpdateColumnsList:function(commandContext,clusterUriOrAlias,databaseNameOrAlias,tableName){var dbSchemas,allTables,columnMappingsToTables;return System.String.isNullOrEmpty(databaseNameOrAlias)||this.m_remoteColumnMappingsToTables.containsKey(commandContext)||this.m_remoteSchemaResolver!=null&&(dbSchemas=this.m_remoteSchemaResolver.Kusto$Data$IntelliSense$IKustoIntelliSenseSchemaResolver$ResolveDatabaseSchema$1(clusterUriOrAlias,databaseNameOrAlias,tableName),Kusto.Cloud.Platform.Utils.ExtendedEnumerable.SafeFastAny$2(Kusto.Data.IntelliSense.KustoIntelliSenseDatabaseEntity,dbSchemas)?(allTables=System.Linq.Enumerable.from(dbSchemas,Kusto.Data.IntelliSense.KustoIntelliSenseDatabaseEntity).selectMany($asm.$.Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.f51).toList(Kusto.Data.IntelliSense.KustoIntelliSenseTableEntity),this.UpdateRemoteColumnMappingToTables(commandContext,tableName,allTables),this.OverridingTablesMapping.setItem(commandContext,System.Linq.Enumerable.from(allTables,Kusto.Data.IntelliSense.KustoIntelliSenseTableEntity).select($asm.$.Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.f49).toList(System.String))):(this.OverridingTablesMapping.setItem(commandContext,new(System.Collections.Generic.List$1(System.String).ctor)),this.m_remoteColumnMappingsToTables.setItem(commandContext,new(System.Collections.Generic.Dictionary$2(Kusto.Data.IntelliSense.KustoCommandContext,System.Collections.Generic.List$1(System.String)).ctor)))),columnMappingsToTables={},this.m_remoteColumnMappingsToTables.tryGetValue(commandContext,columnMappingsToTables),columnMappingsToTables.v||new(System.Collections.Generic.Dictionary$2(Kusto.Data.IntelliSense.KustoCommandContext,System.Collections.Generic.List$1(System.String)).ctor)},UpdateRemoteColumnMappingToTables:function(commandContext,tableName,allTables){var columnsToTablesMapping,performUnion,outputColumns,orderedColumns;allTables.Count===1?columnsToTablesMapping=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.MapColumnsToTables(allTables):(performUnion=commandContext.Operation===Kusto.Data.IntelliSense.ContextOperation.Union,outputColumns=null,outputColumns=performUnion?System.Linq.Enumerable.from(allTables,Kusto.Data.IntelliSense.KustoIntelliSenseTableEntity).selectMany($asm.$.Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.f52).distinct().toList(System.String):Kusto.Cloud.Platform.Utils.ExtendedEnumerable.Intersect(System.String,System.Linq.Enumerable.from(allTables,Kusto.Data.IntelliSense.KustoIntelliSenseTableEntity).select($asm.$.Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.f52)),orderedColumns=outputColumns!=null?System.Linq.Enumerable.from(outputColumns,System.String).orderBy($asm.$.Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.f37).toList(System.String):new(System.Collections.Generic.List$1(System.String).ctor),columnsToTablesMapping=function(_o1){return _o1.add(new Kusto.Data.IntelliSense.KustoCommandContext(tableName,commandContext.Operation),orderedColumns),_o1}(new(System.Collections.Generic.Dictionary$2(Kusto.Data.IntelliSense.KustoCommandContext,System.Collections.Generic.List$1(System.String)).ctor)));this.m_remoteColumnMappingsToTables.setItem(commandContext,columnsToTablesMapping)},UpdateDatabaseList:function(commandContext,clusterUriOrAlias,databaseNameOrAlias){var targetCluster=clusterUriOrAlias,dbNames,wildCardMatch;System.String.isNullOrEmpty(targetCluster)&&(targetCluster=this.Cluster!=null?this.Cluster.Alias:null);System.String.isNullOrEmpty(targetCluster)||this.OverridingDatabaseMapping.containsKey(commandContext)||this.m_remoteSchemaResolver!=null&&(dbNames=this.m_remoteSchemaResolver.Kusto$Data$IntelliSense$IKustoIntelliSenseSchemaResolver$ResolveDatabaseNames(targetCluster),Kusto.Cloud.Platform.Utils.ExtendedEnumerable.SafeFastAny$2(System.String,dbNames)&&!System.String.isNullOrEmpty(databaseNameOrAlias)&&Kusto.Cloud.Platform.Utils.ExtendedRegex.IsWildCardPattern(databaseNameOrAlias)&&(wildCardMatch=Kusto.Cloud.Platform.Utils.ExtendedRegex.TryTransformWildCardPatternToRegex(databaseNameOrAlias),wildCardMatch!=null&&(dbNames=System.Linq.Enumerable.from(dbNames,System.String).where(function(db){return wildCardMatch.isMatch(db)}))),Kusto.Cloud.Platform.Utils.ExtendedEnumerable.SafeFastAny$2(System.String,dbNames)?this.OverridingDatabaseMapping.setItem(commandContext,System.Linq.Enumerable.from(dbNames,System.String).select($asm.$.Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.f53).toList(System.String)):this.OverridingDatabaseMapping.setItem(commandContext,new(System.Collections.Generic.List$1(System.String).ctor)))},ResolveRemoteContext:function(commandContext,clusterUriOrAlias,databaseNameOrAlias,remoteTableContext){var match,hasClusterReference,hasDatabaseReference;return(clusterUriOrAlias.v=\"\",databaseNameOrAlias.v=\"\",remoteTableContext.v=\"\",System.String.isNullOrEmpty(commandContext))?!1:(match=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_remoteContextRegex.match(commandContext),!match.getSuccess())?!1:(hasClusterReference=!System.String.isNullOrEmpty(match.getGroups().getByName(\"HasClusterReference\").toString()),hasClusterReference?Kusto.Cloud.Platform.Text.StringLiteral.TryParseStringLiteral(match.getGroups().getByName(\"Cluster\").toString(),clusterUriOrAlias):(clusterUriOrAlias.v=this.Cluster!=null?this.Cluster.Alias:\"\",clusterUriOrAlias.v==null&&(clusterUriOrAlias.v=\"\")),Kusto.Cloud.Platform.Text.StringLiteral.TryParseStringLiteral(match.getGroups().getByName(\"Database\").toString(),databaseNameOrAlias),hasDatabaseReference=!System.String.isNullOrEmpty(match.getGroups().getByName(\"HasDatabaseReference\").toString()),remoteTableContext.v=match.getGroups().getByName(\"Context\").toString(),!hasDatabaseReference&&System.String.isNullOrEmpty(databaseNameOrAlias.v)&&(!hasClusterReference||System.String.isNullOrEmpty(clusterUriOrAlias.v)))?!1:!0},Initialize:function(){Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.prototype.Initialize.call(this);this.ContextConnection=\"\";this.Cluster==null||System.String.isNullOrWhiteSpace(this.Cluster.Alias)||(this.ContextConnection=\"cluster('\"+(this.Cluster.Alias||\"\")+\"')\");this.Database==null||System.String.isNullOrWhiteSpace(this.Database.Name)||(this.ContextConnection=(this.ContextConnection||\"\")+\".database('\"+(this.DatabaseSchema.Database.Name||\"\")+\"')\");this.OverridingColumnMapping=new(System.Collections.Generic.Dictionary$2(Kusto.Data.IntelliSense.KustoCommandContext,System.Collections.Generic.List$1(System.String)).ctor);this.ColumnMappingsToTables=new(System.Collections.Generic.Dictionary$2(Kusto.Data.IntelliSense.KustoCommandContext,System.Collections.Generic.List$1(System.String)).ctor);this.ColumnMappingsToWildcardedTables=new(System.Collections.Generic.Dictionary$2(Kusto.Data.IntelliSense.KustoCommandContext,System.Collections.Generic.List$1(System.String)).ctor);this.TableNames=new(System.Collections.Generic.List$1(System.String).ctor);this.FunctionMappings=new(System.Collections.Generic.Dictionary$2(System.String,System.Tuple$2(System.String,System.Text.RegularExpressions.Regex)).ctor);this.CommandRules=new(System.Collections.Generic.List$1(Kusto.Data.IntelliSense.IntelliSenseRule).ctor);this.GeneralRules=new(System.Collections.Generic.List$1(Kusto.Data.IntelliSense.IntelliSenseRule).ctor);this.QueryParametersRules=new(System.Collections.Generic.List$1(Kusto.Data.IntelliSense.IntelliSenseRule).ctor)},LoadRules:function(){var $t,localDatabases,rule,pluginOptions;this.ColumnMappingsToTables=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.MapColumnsToTables(this.Tables);this.OverridingColumnMapping=new(System.Collections.Generic.Dictionary$2(Kusto.Data.IntelliSense.KustoCommandContext,System.Collections.Generic.List$1(System.String)).ctor);this.ColumnMappingsToWildcardedTables=new(System.Collections.Generic.Dictionary$2(Kusto.Data.IntelliSense.KustoCommandContext,System.Collections.Generic.List$1(System.String)).ctor);this.OverridingDatabaseMapping=new(System.Collections.Generic.Dictionary$2(Kusto.Data.IntelliSense.KustoCommandContext,System.Collections.Generic.List$1(System.String)).ctor);this.OverridingTablesMapping=new(System.Collections.Generic.Dictionary$2(Kusto.Data.IntelliSense.KustoCommandContext,System.Collections.Generic.List$1(System.String)).ctor);this.AddClientDirectiveRules();this.AddFindOperator();this.GeneralRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.RuleKind.YieldOperatorsAfterPipe,$t.MatchingRegex=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_afterPipeRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Operator,Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_operatorOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.GeneralRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.RuleKind.YieldSummarizeOperatorOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.m_commandsRequestingAggregators,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.FunctionAggregation,Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_aggregateOperationOptions),$t.RequiredKeywords=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_operatorsRequestingAggregators,$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpaceAfterBracketPolicy,$t));this.GeneralRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.RuleKind.YieldDatabaseFunctionOption,$t.MatchingRegex=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_clusterFunctionRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Database,Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_databaseFunctionOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpaceStepBackPolicy,$t));Kusto.Cloud.Platform.Utils.ExtendedEnumerable.SafeFastAny$2(System.String,this.m_availableClusters)&&this.GeneralRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.RuleKind.YieldClusterNamesOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_startOfCommandWithClusterRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Service,System.Linq.Enumerable.from(this.m_availableClusters,System.String).select($asm.$.Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.f54).ToArray(System.String)),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.NullApplyPolicy,$t));localDatabases=new(System.Collections.Generic.Dictionary$2(Kusto.Data.IntelliSense.KustoCommandContext,System.Collections.Generic.List$1(System.String)).ctor);Kusto.Cloud.Platform.Utils.ExtendedEnumerable.SafeFastAny$2(Kusto.Data.IntelliSense.KustoIntelliSenseDatabaseEntity,this.Databases)&&localDatabases.add(Kusto.Data.IntelliSense.KustoCommandContext.Empty,System.Linq.Enumerable.from(this.Databases,Kusto.Data.IntelliSense.KustoIntelliSenseDatabaseEntity).select($asm.$.Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.f55).toList(System.String));this.GeneralRules.add(($t=new Kusto.Data.IntelliSense.ContextualRegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.RuleKind.YieldDatabaseNamesOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_startOfCommandWithDatabaseRegex,$t.ContextualOptions=localDatabases,$t.OverrideOptions=this.OverridingDatabaseMapping,$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.NullApplyPolicy,$t.OptionsKind=Kusto.Data.IntelliSense.OptionKind.Database,$t));this.GeneralRules.add(($t=new Kusto.Data.IntelliSense.ContextualRegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.RuleKind.YieldTableNamesForRemoteQueryOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_databaseFunctionInFindRegex,$t.ContextualOptions=null,$t.OverrideOptions=this.OverridingTablesMapping,$t.OptionsKind=Kusto.Data.IntelliSense.OptionKind.Table,$t.RequiredKeywords=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_findKeywords,$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendCommaPolicy,$t));this.GeneralRules.add(($t=new Kusto.Data.IntelliSense.ContextualRegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.RuleKind.YieldTableNamesForRemoteQueryOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_databaseFunctionRegex,$t.ContextualOptions=null,$t.OverrideOptions=this.OverridingTablesMapping,$t.OptionsKind=Kusto.Data.IntelliSense.OptionKind.Table,$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendPipePolicy,$t));Kusto.Cloud.Platform.Utils.ExtendedEnumerable.SafeFastAny$2(Kusto.Data.IntelliSense.KustoIntelliSenseTableEntity,this.Tables)&&(this.TableNames=System.Linq.Enumerable.from(this.Tables,Kusto.Data.IntelliSense.KustoIntelliSenseTableEntity).where($asm.$.Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.f56).select($asm.$.Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.f49).orderBy($asm.$.Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.f57).toList(System.String),rule=($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.RuleKind.YieldTableNames,$t.MatchingRegex=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_startOfLineWithSpaceOrAfterJoinRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Table,this.TableNames),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendPipePolicy,$t),this.GeneralRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.RuleKind.YieldTableNamesForFindIn,$t.MatchingRegex=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_findInStartOrContinueListRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Table,this.TableNames),$t.RequiredKeywords=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_findKeywords,$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.NullApplyPolicy,$t)),Kusto.Cloud.Platform.Utils.ExtendedEnumerable.SafeFastAny$2(Kusto.Data.IntelliSense.KustoIntelliSenseFunctionEntity,this.Functions)&&(rule.AdditionalOptions=System.Array.init([new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.FunctionServerSide,System.Linq.Enumerable.from(this.Functions,Kusto.Data.IntelliSense.KustoIntelliSenseFunctionEntity).select($asm.$.Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.f58).orderBy($asm.$.Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.f33).ToArray(System.String))],Kusto.Data.IntelliSense.CompletionOptionCollection),rule.AfterApplyPolicies=System.Linq.Enumerable.from(this.Functions,Kusto.Data.IntelliSense.KustoIntelliSenseFunctionEntity).toDictionary($asm.$.Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.f58,$asm.$.Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.f59,System.String,Kusto.Data.IntelliSense.ApplyPolicy)),this.GeneralRules.add(rule),this.DefaultRule=rule);Kusto.Cloud.Platform.Utils.ExtendedEnumerable.SafeFastAny$2(Kusto.Data.IntelliSense.KustoIntelliSenseTableEntity,this.Tables)&&this.AddColumnRules();this.GeneralRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.RuleKind.YieldTimespanOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_agoContextRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Literal,Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_timespanOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.MoveAfterTheBracketPolicy,$t));this.GeneralRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.RuleKind.YieldTimespanOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_nowContextRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Literal,Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_negativeTimespanOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.MoveAfterTheBracketPolicy,$t));this.GeneralRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.RuleKind.YieldKindFlavorsForJoin,$t.MatchingRegex=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_joinFlavorsForJoin_Regex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.OptionKind,Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_joinFlavorsOptions),$t.RequiredKeywords=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_joinKeywords,$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendJoinClauseWithOpenningBracketPolicy,$t));this.GeneralRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.RuleKind.YieldPostJoinOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_joinRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.None,Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_postJoinOptions),$t.RequiredKeywords=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_joinKeywords,$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t.AfterApplyPolicies=this.s_afterjoinOperatorApplyPolicies,$t));this.GeneralRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.RuleKind.YieldRenderOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_renderRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.OptionRender,Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_renderOptions),$t.RequiredKeywords=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_renderKeywords,$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.GeneralRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.RuleKind.YieldRenderKindKeywordOption,$t.MatchingRegex=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_renderMultiChartsRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.OptionRender,Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_kindKeywordOptions),$t.RequiredKeywords=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_renderKeywords,$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.NullApplyPolicy,$t));this.GeneralRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.RuleKind.YieldRenderKindOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_renderKindOptionsRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.OptionRender,Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_renderKindOptions),$t.RequiredKeywords=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_renderKeywords,$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.GeneralRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.RuleKind.YieldNumericScalarOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_topOrLimitOrTakeOrSampleRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Literal,Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_numericScalarsOptions),$t.RequiredKeywords=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_topLimitTakeSampleKeywords,$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.GeneralRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.RuleKind.YieldParseKeywordKindsOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_parseKindChoose_Regex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.OptionKind,Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_kindChooseKeywordOptions),$t.RequiredKeywords=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_parseKeywords,$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.GeneralRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.RuleKind.YieldWithKeywordOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_parseWith_Regex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_withKeywordOptions),$t.RequiredKeywords=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_parseKeywords,$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.GeneralRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.RuleKind.YieldStarOption,$t.MatchingRegex=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_parseStarOption_Regex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_parseStarOption),$t.RequiredKeywords=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_parseKeywords,$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.GeneralRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.RuleKind.YieldParseTypesKeywordOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_parseTypesSuggest_Regex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.DataType,Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_parseSuggestedTypesKeywordOptions),$t.RequiredKeywords=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_parseKeywords,$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.GeneralRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.RuleKind.YieldTopNestedOfKeywordOption,$t.MatchingRegex=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_operatorContextForTopNestedAndTopHitters,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.None,Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_ofKeywordOptions),$t.RequiredKeywords=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_topNestedKeywords,$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.GeneralRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.RuleKind.YieldTopNestedOfKeywordOption,$t.MatchingRegex=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_operatorContextForTopNestedAndTopHitters,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.None,Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_ofKeywordOptions),$t.RequiredKeywords=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_topHittersKeywords,$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.GeneralRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.RuleKind.YieldTopNestedOfKeywordOption,$t.MatchingRegex=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_operatorContextForSampleDistinct,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.None,Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_ofKeywordOptions),$t.RequiredKeywords=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_sampleDistinctKeywords,$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.GeneralRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.RuleKind.YieldTopNestedKeywordOption,$t.MatchingRegex=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_topNestedKeywordPrefixRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Operator,Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_topNestedKeywords),$t.RequiredKeywords=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_topNestedKeywords,$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.GeneralRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.RuleKind.YieldTopHittersKeywordOption,$t.MatchingRegex=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_topHittersKeywordPrefixRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Operator,Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_topHittersKeywords),$t.RequiredKeywords=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_topHittersKeywords,$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.GeneralRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.RuleKind.YieldTopNestedOthersOption,$t.MatchingRegex=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_topNestedWithOthersOption,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.OptionKind,Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_withOthersKeywordOptions),$t.RequiredKeywords=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_topNestedKeywords,$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.GeneralRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.RuleKind.YieldByKeywordOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_yieldByKeywordRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_byKeywordOptions),$t.RequiredKeywords=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_operatorsUsingByKeywordKeywords,$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.GeneralRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.RuleKind.YieldAscendingDescendingOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_topNestedAscendingDescendingRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_ascDescKeywordOptions),$t.RequiredKeywords=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_topNestedKeywords,$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.GeneralRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.RuleKind.YieldAscendingDescendingOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_topOrOrderAscendingDescendingRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_ascDescOrNullsLastNullsFirstKeywordOptions),$t.RequiredKeywords=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_topSortOrderKeywords,$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.GeneralRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.RuleKind.YieldNullsFirstNullsLastOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_topTopNestedSortOrderByAscDescRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_nullsLastFirstKeywordOptions),$t.RequiredKeywords=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_topTopNestedSortOrderKeywords,$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.Cluster!=null&&Kusto.Cloud.Platform.Utils.ExtendedEnumerable.SafeFastAny$2(Kusto.Data.IntelliSense.KustoIntelliSensePluginEntity,this.Cluster.Plugins)&&(pluginOptions=System.Linq.Enumerable.from(this.Cluster.Plugins,Kusto.Data.IntelliSense.KustoIntelliSensePluginEntity).select($asm.$.Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.f60).orderBy($asm.$.Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.f61).ToArray(System.String),this.GeneralRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.RuleKind.YieldEvaluateOperatorOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_evaluateRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.FunctionScalar,pluginOptions),$t.RequiredKeywords=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_evaluateKeywords,$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpaceAfterBracketPolicy,$t.AfterApplyPolicies=this.s_afterEvaluatePluginPolicies,$t)));this.GeneralRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.RuleKind.YieldMakeSeriesOperatorOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_makeSeriesRequestingAggregatorsRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.FunctionAggregation,Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_makeSeriesAggregateOperationOptions),$t.RequiredKeywords=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_makeSeriesKeywords,$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpaceAfterBracketPolicy,$t));this.GeneralRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.RuleKind.YieldMakeSeriesOperatorForDefaultOrOn,$t.MatchingRegex=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_makeSeriesBeforeDefaultOrOnRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Literal,Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_makeSeriesDefaultOrOnOptions),$t));this.GeneralRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.RuleKind.YieldMakeSeriesOperatorForOn,$t.MatchingRegex=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_makeSeriesBeforeOnRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Literal,Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_makeSeriesOnOptions),$t));this.GeneralRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.RuleKind.YieldMakeSeriesOperatorForRange,$t.MatchingRegex=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_makeSeriesBeforeRangeRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Literal,Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_makeSeriesInRangeOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpaceStepBackPolicy,$t));this.GeneralRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.RuleKind.YieldMakeSeriesOperatorForBy,$t.MatchingRegex=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_makeSeriesBeforeByRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Literal,Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_byKeywordOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.GeneralRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.RuleKind.YieldSearchKindOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_searchKind_Regex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.OptionKind,Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_searchKindOptions),$t.RequiredKeywords=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_searchKeywords,$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.AddRangeOperator();Kusto.Cloud.Platform.Utils.ExtendedEnumerable.SafeFastAny$2(Kusto.Data.IntelliSense.KustoIntelliSenseFunctionEntity,this.Functions)&&(this.FunctionMappings=System.Linq.Enumerable.from(this.Functions,Kusto.Data.IntelliSense.KustoIntelliSenseFunctionEntity).toDictionary($asm.$.Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.f62,$asm.$.Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.f63,System.String,System.Tuple$2(System.String,System.Text.RegularExpressions.Regex)));this.AddQueryParameterRule(this.m_queryParameters)},AddClientDirectiveRules:function(){var $t;this.m_allowClientDirectives&&(this.GeneralRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.RuleKind.YieldClientDirectivesOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_clientDirective_Regex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.ClientDirective,Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_clientDirectivesOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t)),Kusto.Cloud.Platform.Utils.ExtendedEnumerable.SafeFastAny$2(System.String,this.m_availableClusters)&&this.GeneralRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.RuleKind.YieldClientDirective_ConnectOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_clientDirectiveConnect_Regex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Service,System.Linq.Enumerable.from(this.m_availableClusters,System.String).select($asm.$.Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.f64)),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.NullApplyPolicy,$t)))},AddColumnRules:function(){var $t,columns=System.Linq.Enumerable.from(this.Tables,Kusto.Data.IntelliSense.KustoIntelliSenseTableEntity).selectMany($asm.$.Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.f65).ToArray(System.Object),columnNamesWithStringTypes,matchingTokens,afterApplyPolicies,columnNamesWithNonStringTypes,columnNamesWithTypeDateTime;System.Linq.Enumerable.from(columns,System.Object).count()!==0&&(this.GeneralRules.add(($t=new Kusto.Data.IntelliSense.ContextualRegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForFilterInFind,$t.MatchingRegex=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_operatorContextForFilterColumnInFindRegex,$t.ContextualOptions=this.ColumnMappingsToTables,$t.OverrideOptions=this.OverridingColumnMapping,$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t.RequiredKeywords=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_findKeywords,$t.OptionsKind=Kusto.Data.IntelliSense.OptionKind.Column,$t.AdditionalOptions=System.Array.init([new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Column,System.Array.init([\"*\"],System.String))],Kusto.Data.IntelliSense.CompletionOptionCollection),$t)),this.GeneralRules.add(($t=new Kusto.Data.IntelliSense.ContextualRegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.RuleKind.YieldPostSearchOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_searchContextRegex,$t.ContextualOptions=this.ColumnMappingsToTables,$t.OverrideOptions=this.OverridingColumnMapping,$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t.RequiredKeywords=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_searchKeywords,$t.OptionsKind=Kusto.Data.IntelliSense.OptionKind.Column,$t.AdditionalOptions=System.Array.init([new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Literal,Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_searchLiteralsOptions,1),new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.None,Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_searchInKeywordOptions,1),new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.FunctionScalar,Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_extendOperationOptions),new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_kindKeywordOptions)],Kusto.Data.IntelliSense.CompletionOptionCollection),$t.AfterApplyPolicies=this.s_afterSearchApplyPolicies,$t)),this.GeneralRules.add(($t=new Kusto.Data.IntelliSense.ContextualRegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.RuleKind.YieldPostSearchKindOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_searchAfterKindContextRegex,$t.ContextualOptions=this.ColumnMappingsToTables,$t.OverrideOptions=this.OverridingColumnMapping,$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t.RequiredKeywords=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_searchKeywords,$t.OptionsKind=Kusto.Data.IntelliSense.OptionKind.Column,$t.AdditionalOptions=System.Array.init([new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Literal,Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_searchLiteralsOptions,1),new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.None,Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_searchInKeywordOptions,1),new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.FunctionScalar,Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_extendOperationOptions)],Kusto.Data.IntelliSense.CompletionOptionCollection),$t.AfterApplyPolicies=this.s_afterSearchApplyPolicies,$t)),this.GeneralRules.add(($t=new Kusto.Data.IntelliSense.ContextualRegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.RuleKind.YieldInsideSearchOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_searchMoreContextRegex,$t.ContextualOptions=this.ColumnMappingsToTables,$t.OverrideOptions=this.OverridingColumnMapping,$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t.RequiredKeywords=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_searchKeywords,$t.OptionsKind=Kusto.Data.IntelliSense.OptionKind.Column,$t.AdditionalOptions=System.Array.init([new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Literal,Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_searchLiteralsOptions,1),new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.FunctionScalar,Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_extendOperationOptions)],Kusto.Data.IntelliSense.CompletionOptionCollection),$t.AfterApplyPolicies=this.s_afterSearchApplyPolicies,$t)),this.GeneralRules.add(($t=new Kusto.Data.IntelliSense.ContextualRegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForFilter,$t.MatchingRegex=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_operatorContextForFilterColumnRegex,$t.ContextualOptions=this.ColumnMappingsToTables,$t.OverrideOptions=this.OverridingColumnMapping,$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t.RequiredKeywords=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_filterKeywords,$t.OptionsKind=Kusto.Data.IntelliSense.OptionKind.Column,$t.AdditionalOptions=System.Array.init([new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Column,System.Array.init([\"*\"],System.String))],Kusto.Data.IntelliSense.CompletionOptionCollection),$t)),this.GeneralRules.add(($t=new Kusto.Data.IntelliSense.ContextualRegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForProjectInFind,$t.MatchingRegex=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_operatorContextForFindProject,$t.ContextualOptions=this.ColumnMappingsToTables,$t.OverrideOptions=this.OverridingColumnMapping,$t.OptionsKind=Kusto.Data.IntelliSense.OptionKind.Column,$t.RequiredKeywords=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_findKeywords,$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.NullApplyPolicy,$t.AdditionalOptions=System.Array.init([new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Column,System.Array.init([\"pack(*)\"],System.String))],Kusto.Data.IntelliSense.CompletionOptionCollection),$t)),this.GeneralRules.add(($t=new Kusto.Data.IntelliSense.ContextualRegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForProject,$t.MatchingRegex=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_operatorContextForProject,$t.ContextualOptions=this.ColumnMappingsToTables,$t.OverrideOptions=this.OverridingColumnMapping,$t.RequiredKeywords=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_projectKeywords,$t.OptionsKind=Kusto.Data.IntelliSense.OptionKind.Column,$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t)),this.GeneralRules.add(($t=new Kusto.Data.IntelliSense.ContextualRegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForProjectAway,$t.MatchingRegex=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_operatorContextForProjectAway,$t.ContextualOptions=this.ColumnMappingsToTables,$t.OverrideOptions=this.OverridingColumnMapping,$t.RequiredKeywords=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_projectAwayKeywords,$t.OptionsKind=Kusto.Data.IntelliSense.OptionKind.Column,$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t)),this.GeneralRules.add(($t=new Kusto.Data.IntelliSense.ContextualRegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForProjectRename,$t.MatchingRegex=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_operatorContextForProjectRename,$t.ContextualOptions=this.ColumnMappingsToTables,$t.OverrideOptions=this.OverridingColumnMapping,$t.RequiredKeywords=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_projectRenameKeywords,$t.OptionsKind=Kusto.Data.IntelliSense.OptionKind.Column,$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t)),this.GeneralRules.add(($t=new Kusto.Data.IntelliSense.ContextualRegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesAndFunctionsForExtend,$t.MatchingRegex=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_singleParamFunctionsColumnContextRegex,$t.ContextualOptions=this.ColumnMappingsToTables,$t.OverrideOptions=this.OverridingColumnMapping,$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.MoveAfterTheBracketPolicy,$t.AdditionalOptions=System.Array.init([new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.FunctionScalar,Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_extendOperationOptions)],Kusto.Data.IntelliSense.CompletionOptionCollection),$t.OptionsKind=Kusto.Data.IntelliSense.OptionKind.Column,$t.AfterApplyPolicies=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_afterFunctionsApplyPolicies,$t)),this.GeneralRules.add(($t=new Kusto.Data.IntelliSense.ContextualRegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForTwoParamFunctions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_twoParamFunctionsColumnContextRegex,$t.ContextualOptions=this.ColumnMappingsToTables,$t.OverrideOptions=this.OverridingColumnMapping,$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendCommaPolicy,$t.OptionsKind=Kusto.Data.IntelliSense.OptionKind.Column,$t.AdditionalOptions=System.Array.init([new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.FunctionScalar,Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_extendOperationOptions)],Kusto.Data.IntelliSense.CompletionOptionCollection),$t)),this.GeneralRules.add(($t=new Kusto.Data.IntelliSense.ContextualRegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForThreeParamFunctions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_threeParamFunctionsColumnContextRegex,$t.ContextualOptions=this.ColumnMappingsToTables,$t.OverrideOptions=this.OverridingColumnMapping,$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendDoubleCommaPolicy,$t.OptionsKind=Kusto.Data.IntelliSense.OptionKind.Column,$t.AdditionalOptions=System.Array.init([new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.FunctionScalar,Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_extendOperationOptions)],Kusto.Data.IntelliSense.CompletionOptionCollection),$t)),this.GeneralRules.add(($t=new Kusto.Data.IntelliSense.ContextualRegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForManyParamFunctions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_manyParamFunctionsColumnContextRegex,$t.ContextualOptions=this.ColumnMappingsToTables,$t.OverrideOptions=this.OverridingColumnMapping,$t.OptionsKind=Kusto.Data.IntelliSense.OptionKind.Column,$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendCommaPolicy,$t)),this.GeneralRules.add(($t=new Kusto.Data.IntelliSense.ContextualRegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesAndFunctionsForExtend,$t.MatchingRegex=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_operatorContextForExtend_ColumnAndFunctionRegex,$t.ContextualOptions=this.ColumnMappingsToTables,$t.OverrideOptions=this.OverridingColumnMapping,$t.RequiredKeywords=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_projectExtendKeywords,$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpaceAfterBracketPolicy,$t.OptionsKind=Kusto.Data.IntelliSense.OptionKind.Column,$t.AdditionalOptions=System.Array.init([new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.FunctionScalar,Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_extendOperationOptions)],Kusto.Data.IntelliSense.CompletionOptionCollection),$t)),this.GeneralRules.add(($t=new Kusto.Data.IntelliSense.ContextualRegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForJoin,$t.MatchingRegex=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_entitiesForJoin_ColumnsRegex,$t.ContextualOptions=this.ColumnMappingsToTables,$t.OverrideOptions=this.OverridingColumnMapping,$t.RequiredKeywords=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_joinKeywords,$t.OptionsKind=Kusto.Data.IntelliSense.OptionKind.Column,$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t)),this.GeneralRules.add(($t=new Kusto.Data.IntelliSense.ContextualRegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForOrdering,$t.MatchingRegex=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_topSortOrderReduceByRegex,$t.ContextualOptions=this.ColumnMappingsToTables,$t.OverrideOptions=this.OverridingColumnMapping,$t.RequiredKeywords=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_topSortOrderReduceKeywords,$t.OptionsKind=Kusto.Data.IntelliSense.OptionKind.Column,$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t)),this.GeneralRules.add(($t=new Kusto.Data.IntelliSense.ContextualRegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForOrdering,$t.MatchingRegex=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_topNestedSuggestingColumnsRegex,$t.ContextualOptions=this.ColumnMappingsToTables,$t.OverrideOptions=this.OverridingColumnMapping,$t.RequiredKeywords=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_topNestedKeywords,$t.OptionsKind=Kusto.Data.IntelliSense.OptionKind.Column,$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t)),this.GeneralRules.add(($t=new Kusto.Data.IntelliSense.ContextualRegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForOrdering,$t.MatchingRegex=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_topHittersSuggestingColumnsRegex,$t.ContextualOptions=this.ColumnMappingsToTables,$t.OverrideOptions=this.OverridingColumnMapping,$t.RequiredKeywords=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_topHittersKeywords,$t.OptionsKind=Kusto.Data.IntelliSense.OptionKind.Column,$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t)),this.GeneralRules.add(($t=new Kusto.Data.IntelliSense.ContextualRegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesAndFunctionsForExtend,$t.MatchingRegex=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_sampleDistinctSuggestingColumnsRegex,$t.ContextualOptions=this.ColumnMappingsToTables,$t.AdditionalOptions=System.Array.init([new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.FunctionScalar,Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_extendOperationOptions)],Kusto.Data.IntelliSense.CompletionOptionCollection),$t.OverrideOptions=this.OverridingColumnMapping,$t.RequiredKeywords=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_sampleDistinctKeywords,$t.OptionsKind=Kusto.Data.IntelliSense.OptionKind.Column,$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t)),this.GeneralRules.add(($t=new Kusto.Data.IntelliSense.ContextualRegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.RuleKind.YieldKindFlavorsForReduceBy,$t.MatchingRegex=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_reduceByColumnContextRegex,$t.ContextualOptions=this.ColumnMappingsToTables,$t.OverrideOptions=this.OverridingColumnMapping,$t.RequiredKeywords=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_reduceKeywords,$t.OptionsKind=Kusto.Data.IntelliSense.OptionKind.Column,$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t)),this.GeneralRules.add(($t=new Kusto.Data.IntelliSense.ContextualRegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForParse,$t.MatchingRegex=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_parseColumnContextRegex,$t.ContextualOptions=this.ColumnMappingsToTables,$t.OverrideOptions=this.OverridingColumnMapping,$t.RequiredKeywords=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_parseKeywords,$t.OptionsKind=Kusto.Data.IntelliSense.OptionKind.Column,$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t)),this.GeneralRules.add(($t=new Kusto.Data.IntelliSense.ContextualRegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForRender,$t.MatchingRegex=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_renderTimePivotColumnContextRegex,$t.ContextualOptions=this.ColumnMappingsToTables,$t.OverrideOptions=this.OverridingColumnMapping,$t.RequiredKeywords=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_renderKeywords,$t.OptionsKind=Kusto.Data.IntelliSense.OptionKind.Column,$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t)),this.GeneralRules.add(($t=new Kusto.Data.IntelliSense.ContextualRegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForDiffPatternsPluginSplitParameter,$t.MatchingRegex=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_diffPatternsPluginSplitParameterRegex,$t.ContextualOptions=this.ColumnMappingsToTables,$t.OverrideOptions=this.OverridingColumnMapping,$t.RequiredKeywords=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_evaluateKeywords,$t.OptionsKind=Kusto.Data.IntelliSense.OptionKind.Column,$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.NullApplyPolicy,$t)),this.GeneralRules.add(($t=new Kusto.Data.IntelliSense.ContextualRegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForMakeSeries,$t.MatchingRegex=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_makeSeriesByRegex,$t.ContextualOptions=this.ColumnMappingsToTables,$t.OverrideOptions=this.OverridingColumnMapping,$t.RequiredKeywords=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_makeSeriesKeywords,$t.OptionsKind=Kusto.Data.IntelliSense.OptionKind.Column,$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.NullApplyPolicy,$t)),columnNamesWithStringTypes=System.Linq.Enumerable.from(columns,System.Object).where($asm.$.Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.f66).select($asm.$.Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.f67),Kusto.Cloud.Platform.Utils.ExtendedEnumerable.SafeFastAny$2(System.String,columnNamesWithStringTypes)&&(columnNamesWithStringTypes=columnNamesWithStringTypes.union(System.Linq.Enumerable.from(this.Tables,Kusto.Data.IntelliSense.KustoIntelliSenseTableEntity).select($asm.$.Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.f68)),matchingTokens=new(System.Collections.Generic.HashSet$1(System.String).$ctor1)(columnNamesWithStringTypes),afterApplyPolicies=$asm.$.Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.f69(new(System.Collections.Generic.Dictionary$2(System.String,Kusto.Data.IntelliSense.ApplyPolicy).ctor)),this.GeneralRules.add(($t=new Kusto.Data.IntelliSense.ContextualTokensWithRegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.RuleKind.YieldStringComparisonOptions,$t.GroupNameToUseAfterMatch=\"MatchingString\",$t.MatchingTokens=matchingTokens,$t.MatchingRegex=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_filteredColumnRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.FunctionFilter,Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_stringOperatorOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.StringComparisonPolicy,$t.RequiredKeywords=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_filterKeywords,$t.AfterApplyPolicies=afterApplyPolicies,$t))),columnNamesWithNonStringTypes=System.Linq.Enumerable.from(columns,System.Object).where($asm.$.Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.f70).select($asm.$.Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.f67),Kusto.Cloud.Platform.Utils.ExtendedEnumerable.SafeFastAny$2(System.String,columnNamesWithNonStringTypes)&&this.GeneralRules.add(($t=new Kusto.Data.IntelliSense.ContextualTokensWithRegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.RuleKind.YieldNumericComparisonOptions,$t.GroupNameToUseAfterMatch=\"MatchingString\",$t.MatchingTokens=new(System.Collections.Generic.HashSet$1(System.String).$ctor1)(columnNamesWithNonStringTypes),$t.MatchingRegex=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_filteredColumnRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.FunctionFilter,Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_numericOperatorOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t.RequiredKeywords=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_filterKeywords,$t)),columnNamesWithTypeDateTime=System.Linq.Enumerable.from(columns,System.Object).where($asm.$.Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.f71).select($asm.$.Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.f67),Kusto.Cloud.Platform.Utils.ExtendedEnumerable.SafeFastAny$2(System.String,columnNamesWithTypeDateTime)&&this.GeneralRules.add(($t=new Kusto.Data.IntelliSense.ContextualTokensWithRegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.RuleKind.YieldDateTimeOperatorsOptions,$t.GroupNameToUseAfterMatch=\"MatchingString\",$t.MatchingTokens=new(System.Collections.Generic.HashSet$1(System.String).$ctor1)(columnNamesWithTypeDateTime),$t.MatchingRegex=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_filterPredicateRightValueRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.FunctionScalar,Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_datetimeOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpaceAfterBracketPolicy,$t.RequiredKeywords=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_filterKeywords,$t)))},SetQueryParametersRule:function(queryParameters){this.Locker;this.QueryParametersRules.clear();this.AddQueryParameterRule(queryParameters)},AddQueryParameterRule:function(queryParameters){var $t,$t1;queryParameters!=null&&System.Linq.Enumerable.from(queryParameters,System.String).any()&&this.QueryParametersRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.RuleKind.YieldQueryParameters,$t.MatchingRegex=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_queryParametersRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Parameter,queryParameters),$t.DefaultAfterApplyPolicy=($t1=new Kusto.Data.IntelliSense.ApplyPolicy,$t1.Text=\"}\",$t1),$t))},AddRangeOperator:function(){var $t;this.GeneralRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.RuleKind.YieldRangeFromOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_rangeFromRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_rangeFromOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.GeneralRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.RuleKind.YieldRangeFromToOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_rangeFromToRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_rangeFromToOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.GeneralRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.RuleKind.YieldRangeFromToStepOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_rangeFromToStepRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_rangeFromToStepOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t))},AddFindOperator:function(){var $t;this.GeneralRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.RuleKind.YieldPostFindOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_findContextRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.None,Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_findWhereInOptions),$t.RequiredKeywords=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_findKeywords,$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t.AfterApplyPolicies=this.s_afterFindApplyPolicies,$t));this.GeneralRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.RuleKind.YieldPostFindInOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_findInRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.None,Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_postFindInOptions),$t.RequiredKeywords=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_findKeywords,$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t.AfterApplyPolicies=this.s_afterFindInApplyPolicies,$t));this.GeneralRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.RuleKind.YieldEndOrContinueFindInOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_FindInEndOrContinueListRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.None,Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_findInEndOrContinueOptions),$t.RequiredKeywords=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_findKeywords,$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t.AfterApplyPolicies=this.s_afterFindInEndOrContinuePolicies,$t));this.GeneralRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.RuleKind.YieldPostFindInListOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_findWhereRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.None,Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_findInPostListOptions),$t.RequiredKeywords=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_findKeywords,$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.GeneralRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.RuleKind.YieldFindProjectSmartOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_findProjectSmartRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.None,System.Array.init([\"|\"],System.String)),$t.RequiredKeywords=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_findKeywords,$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t))},RegisterCommandEntities:function(commandContext,extendedEntities,replaceEntities){var context=new Kusto.Data.IntelliSense.KustoCommandContext(commandContext.Context),columnMappingsToTables=this.ColumnMappingsToTables;if(this.m_remoteColumnMappingsToTables.containsKey(commandContext)){var cluster={},database={},remoteTableContext={};this.ResolveRemoteContext(commandContext.Context,cluster,database,remoteTableContext)&&(context=new Kusto.Data.IntelliSense.KustoCommandContext(remoteTableContext.v));columnMappingsToTables=this.m_remoteColumnMappingsToTables.getItem(commandContext)}replaceEntities||columnMappingsToTables.containsKey(context)&&extendedEntities.AddRange(columnMappingsToTables.getItem(context));this.OverridingColumnMapping.setItem(commandContext,System.Linq.Enumerable.from(extendedEntities,System.String).orderBy($asm.$.Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.f57).toList(System.String))},ResolveEntitiesFromCommand:function(input,entitiesList,knownEntities){var $t,result={v:Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.ResolveResult.None},command=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_removeStringLiteralsSurroundedBySpacesRegex.replace(input,\" \"),unionCommandSegments,commandClauses,unifiedEntities,clause,clauseEntities;if(command=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_removeCommentsRegex.replace(command,\"\"),unionCommandSegments=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_lastCommandSegmentRegex.match(command),unionCommandSegments.getSuccess()&&(command=unionCommandSegments.getGroups().getByName(\"LastSegment\").toString()),commandClauses=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.ParseCommandClauses(command),System.Linq.Enumerable.from(commandClauses,System.String).count()===1)return this.ResolveEntitiesFromClause(entitiesList,knownEntities,result,command);unifiedEntities=new(System.Collections.Generic.HashSet$1(System.String).ctor);$t=Bridge.getEnumerator(commandClauses,System.String);try{while($t.moveNext())clause=$t.Current,clauseEntities=new(System.Collections.Generic.List$1(System.String).ctor),result.v=this.ResolveEntitiesFromClause(clauseEntities,knownEntities,result,clause),unifiedEntities.unionWith(clauseEntities)}finally{Bridge.is($t,System.IDisposable)&&$t.System$IDisposable$Dispose()}return entitiesList.AddRange(unifiedEntities),result.v},InjectFunctionsAsLetStatementsIfNeeded:function(input,usedFunctions){var $t,funcitonStatementsBuilder,funcitonAdditions,moreFunctions;if(Kusto.Cloud.Platform.Utils.ExtendedEnumerable.SafeFastAny$1(System.Collections.Generic.KeyValuePair$2(System.String,System.Tuple$2(System.String,System.Text.RegularExpressions.Regex)),this.FunctionMappings)){funcitonStatementsBuilder=new System.Text.StringBuilder;$t=Bridge.getEnumerator(this.FunctionMappings);try{while($t.moveNext()){var kvp=$t.Current,funcName=kvp.key,isFuncPresentRegex=kvp.value.Item2,funcExpression=kvp.value.Item1;!usedFunctions.contains(funcName)&&isFuncPresentRegex.isMatch(input)&&(funcitonStatementsBuilder.appendLine(funcExpression),usedFunctions.add(funcName))}}finally{Bridge.is($t,System.IDisposable)&&$t.System$IDisposable$Dispose()}funcitonStatementsBuilder.getLength()>0&&(funcitonAdditions=funcitonStatementsBuilder.toString(),moreFunctions=this.InjectFunctionsAsLetStatementsIfNeeded(funcitonAdditions,usedFunctions),input=(moreFunctions||\"\")+(input||\"\"))}return input},ResolveEntitiesFromClause:function(entitiesList,knownEntities,result,input){var statements=this.InjectFunctionsAsLetStatementsIfNeeded(input,new(System.Collections.Generic.HashSet$1(System.String).ctor)),analyzeResult=this.AnalyzeStatementsImpl(statements,!1),command=analyzeResult.Command,opEntitiesMap;return System.String.isNullOrWhiteSpace(command)?result.v:(opEntitiesMap=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.BuildOpEntitiesMap(command),result.v=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.HandleRangeEntities(entitiesList,result.v,opEntitiesMap,knownEntities),result.v=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.HandlePrintEntities(entitiesList,result.v,opEntitiesMap,knownEntities),result.v=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.HandleProjectEntities(entitiesList,result.v,opEntitiesMap,knownEntities),result.v=this.HandleFindEntities(entitiesList,result.v,opEntitiesMap,knownEntities),result.v=this.HandleSearchEntities(entitiesList,result.v,opEntitiesMap,knownEntities),result.v=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.HandleExtendEntities(entitiesList,result.v,opEntitiesMap,knownEntities),result.v=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.HandleMvexpandEntities(entitiesList,result.v,opEntitiesMap,knownEntities),result.v=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.HandleSummarizeEntities(entitiesList,result.v,opEntitiesMap,knownEntities),result.v=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.HandleMakeSeriesEntities(entitiesList,result.v,opEntitiesMap,knownEntities),result.v=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.HandleTopNestedEntities(entitiesList,result.v,opEntitiesMap,knownEntities),result.v=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.HandleReduceByEntities(entitiesList,result.v,opEntitiesMap,knownEntities),result.v=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.HandleParseEntities(entitiesList,result.v,opEntitiesMap,knownEntities),result.v=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.HandleGetSchemaEntities(entitiesList,result.v,opEntitiesMap,knownEntities),result.v=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.HandleSampleDistinctEntities(entitiesList,result.v,opEntitiesMap,knownEntities),result.v===Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.ResolveResult.ReplaceEntities?knownEntities=entitiesList:result.v===Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.ResolveResult.AppendEntities&&(knownEntities=Kusto.Cloud.Platform.Utils.ExtendedEnumerable.SafeFastNone$2(System.String,knownEntities)?entitiesList:System.Linq.Enumerable.from(knownEntities,System.String).union(entitiesList).toList(System.String)),result.v=this.HandleProjectRenameEntities(entitiesList,result.v,opEntitiesMap,knownEntities),result.v=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.HandleProjectAwayEntities(entitiesList,result.v,opEntitiesMap,knownEntities),result.v)},HandleFindEntities:function(entitiesList,result,opEntitiesMap,knownEntities){var $t,$t1,$t2,list={v:null},wasAdded,hasPipe,projectionMatch,projectedList,projectedListCopy,entities,knownProjectedEntities,entity,entity1,withsourceMatch,tableNameColumn,entity2;if(!opEntitiesMap.tryGetValue(\"find\",list))return result;if(wasAdded=!1,hasPipe=System.String.endsWith(list.v,\"|\"),list.v=Kusto.Cloud.Platform.Utils.ExtendedString.TrimEnd(list.v,\"|\"),hasPipe){if(projectionMatch=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_findProjectionRegex.match(list.v),projectionMatch.getSuccess()){if(projectedList=projectionMatch.getGroups().getByName(\"projectedList\").getValue(),projectedListCopy=projectedList,projectedList=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_packRgx.replace(projectedList,\"\"),Bridge.referenceEquals(projectedList,projectedListCopy)||(wasAdded=!!(wasAdded|Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.AddFieldIfNotPresent(entitiesList,\"pack_\"))),entities=new(System.Collections.Generic.List$1(System.String).ctor),Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.ResolveEntitiesFromList(entities,projectedList)){knownProjectedEntities=Kusto.Cloud.Platform.Utils.ExtendedEnumerable.IntersectWith(System.String,entities,knownEntities);$t=Bridge.getEnumerator(knownProjectedEntities,System.String);try{while($t.moveNext())entity=$t.Current,wasAdded=!!(wasAdded|Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.AddFieldIfNotPresent(entitiesList,entity))}finally{Bridge.is($t,System.IDisposable)&&$t.System$IDisposable$Dispose()}}}else{if(knownEntities!=null){$t1=Bridge.getEnumerator(knownEntities,System.String);try{while($t1.moveNext())entity1=$t1.Current,wasAdded=!!(wasAdded|Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.AddFieldIfNotPresent(entitiesList,entity1))}finally{Bridge.is($t1,System.IDisposable)&&$t1.System$IDisposable$Dispose()}}wasAdded=!!(wasAdded|Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.AddFieldIfNotPresent(entitiesList,\"pack_\"))}withsourceMatch=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_withsourceExtractRegex.match(list.v);tableNameColumn=withsourceMatch.getSuccess()?withsourceMatch.getGroups().getByName(\"tableNameColumn\").getValue():\"source_\";wasAdded=!!(wasAdded|Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.AddFieldIfNotPresent(entitiesList,tableNameColumn));projectionMatch.getSuccess()||(wasAdded=!!(wasAdded|Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.AddFieldIfNotPresent(entitiesList,\"pack_\")))}else if(knownEntities!=null){$t2=Bridge.getEnumerator(knownEntities,System.String);try{while($t2.moveNext())entity2=$t2.Current,wasAdded=!!(wasAdded|Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.AddFieldIfNotPresent(entitiesList,entity2))}finally{Bridge.is($t2,System.IDisposable)&&$t2.System$IDisposable$Dispose()}}return wasAdded&&(result=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.ResolveResult.ReplaceEntities),result},HandleSearchEntities:function(entitiesList,result,opEntitiesMap,knownEntities){var $t,list={v:null},wasAdded,entity;if(!opEntitiesMap.tryGetValue(\"search\",list))return result;if(wasAdded=!1,knownEntities!=null){$t=Bridge.getEnumerator(knownEntities,System.String);try{while($t.moveNext())entity=$t.Current,wasAdded=!!(wasAdded|Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.AddFieldIfNotPresent(entitiesList,entity))}finally{Bridge.is($t,System.IDisposable)&&$t.System$IDisposable$Dispose()}}return wasAdded&&(result=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.ResolveResult.ReplaceEntities),result},HandleProjectRenameEntities:function(entitiesList,result,opEntitiesMap,knownEntities){var $t,$t1,list={v:null},isOriginalEntitiesListEmpty,pair,tuple,targetName,sourceName,field;if(!opEntitiesMap.tryGetValue(\"project-rename\",list))return result;var removedEntities=new(System.Collections.Generic.List$1(System.String).ctor),wasChanged=!1,entities=System.String.split(list.v,System.Array.init([44],System.Char).map(function(i){return String.fromCharCode(i)}),null,1);if(Kusto.Cloud.Platform.Utils.ExtendedEnumerable.SafeFastNone$1(System.String,entities))return result;isOriginalEntitiesListEmpty=Kusto.Cloud.Platform.Utils.ExtendedEnumerable.SafeFastNone$1(System.String,entitiesList);$t=Bridge.getEnumerator(entities);try{while($t.moveNext())(pair=$t.Current,tuple=System.String.split(pair,System.Array.init([61],System.Char).map(function(i){return String.fromCharCode(i)}),null,1),tuple.length===2)&&((targetName=Kusto.Data.IntelliSense.ExpressionEntityParser.UnescapeEntityName(tuple[System.Array.index(0,tuple)]),sourceName=Kusto.Data.IntelliSense.ExpressionEntityParser.UnescapeEntityName(tuple[System.Array.index(1,tuple)]),System.String.isNullOrEmpty(targetName)||System.String.isNullOrEmpty(sourceName)||System.String.equals(targetName,sourceName,4))||(removedEntities.add(sourceName),entitiesList.contains(sourceName)&&(entitiesList.remove(sourceName),wasChanged=!0),entitiesList.contains(targetName)||(Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.AddEscapedEntityName(entitiesList,targetName),wasChanged=!0)))}finally{Bridge.is($t,System.IDisposable)&&$t.System$IDisposable$Dispose()}if(System.Linq.Enumerable.from(removedEntities,System.String).any()&&isOriginalEntitiesListEmpty&&Kusto.Cloud.Platform.Utils.ExtendedEnumerable.SafeFastAny$2(System.String,knownEntities)){$t1=Bridge.getEnumerator(System.Linq.Enumerable.from(knownEntities,System.String).except(removedEntities).ToArray(System.String));try{while($t1.moveNext())field=$t1.Current,Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.AddEscapedEntityName(entitiesList,field)}finally{Bridge.is($t1,System.IDisposable)&&$t1.System$IDisposable$Dispose()}}return wasChanged&&(result=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.ResolveResult.ReplaceEntities),result},AnalyzeCommand$1:function(statement,cachedReference){var input=this.InjectFunctionsAsLetStatementsIfNeeded(statement,new(System.Collections.Generic.HashSet$1(System.String).ctor)),result;return(cachedReference!=null&&cachedReference.ContextCache!=null&&(this.ContextCache=new(System.Collections.Generic.Dictionary$2(System.Int32,Kusto.Data.IntelliSense.KustoCommandContext).$ctor1)(cachedReference.ContextCache)),System.String.indexOf(input,String.fromCharCode(59))<0)?(result=new Kusto.Data.IntelliSense.AnalyzedCommand,result.Command=statement,result.Context=this.ResolveContextFromCommand(input),result):this.AnalyzeStatementsImpl(input,!0)},AnalyzeCommand:function(analyzedCommand,appendingPart){var $t,appendedCommand;return System.String.isNullOrWhiteSpace(appendingPart)?analyzedCommand:analyzedCommand==null||System.String.isNullOrEmpty(analyzedCommand.Command)?this.AnalyzeCommand$1(appendingPart,null):(appendedCommand=(analyzedCommand.Command||\"\")+(appendingPart||\"\"),System.String.indexOf(appendingPart,String.fromCharCode(59))>=0||System.String.endsWith(analyzedCommand.Command.trim(),\";\")||Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_nonDefaultContextKeywordsRegex.isMatch(appendingPart))?this.AnalyzeCommand$1(appendedCommand,null):($t=new Kusto.Data.IntelliSense.AnalyzedCommand,$t.Command=appendedCommand,$t.Context=analyzedCommand.Context,$t)},ResolveContextFromCommand:function(command){var $t,commandWithoutStringLiterals,hashCode,keyword,contextMatchRegex,defaultContextMatcher,commandContext;if(System.String.isNullOrWhiteSpace(command))return Kusto.Data.IntelliSense.KustoCommandContext.Empty;if(commandWithoutStringLiterals=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_removeStringLiteralsSurroundedBySpacesRegex.replace(command,\" \"),commandWithoutStringLiterals=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_removeCommentsRegex.replace(commandWithoutStringLiterals,\"\"),commandWithoutStringLiterals=commandWithoutStringLiterals.trim(),hashCode=Bridge.getHashCode(commandWithoutStringLiterals),this.m_contextCache.containsKey(hashCode))return this.m_contextCache.getItem(hashCode);var tableContext=\"\",contextOperation=Kusto.Data.IntelliSense.ContextOperation.Intersect,matchesKeywords=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_nonDefaultContextKeywordsRegex.matches(commandWithoutStringLiterals),lastMatch=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.GetLatestMatch(matchesKeywords),isFind=!1,isSearch=!1;return lastMatch!=null&&(keyword=lastMatch.getGroups().get(0).toString(),contextMatchRegex={},Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_commandContextRegexes.tryGetValue(keyword,contextMatchRegex)&&(tableContext=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.ResolveContextUsingRegex(commandWithoutStringLiterals,contextMatchRegex.v,lastMatch.getIndex())),isFind=Bridge.referenceEquals(keyword,\"find\"),isSearch=Bridge.referenceEquals(keyword,\"search\"),isSearch&&!System.String.isNullOrEmpty(tableContext)&&(contextOperation=Kusto.Data.IntelliSense.ContextOperation.Union)),isFind&&Bridge.referenceEquals(tableContext,\"\")&&(tableContext=\"database('*')\"),System.String.isNullOrEmpty(tableContext)&&(isFind?tableContext=\"*\":(defaultContextMatcher={Item1:Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_commandDefaultContext,Item2:null},tableContext=($t=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.ResolveContextUsingRegex(commandWithoutStringLiterals,defaultContextMatcher,0),$t!=null?$t:\"\"),isSearch&&System.String.equals(tableContext,\"search\")&&(tableContext=\"*\",contextOperation=Kusto.Data.IntelliSense.ContextOperation.Union))),commandContext=System.String.isNullOrEmpty(tableContext)?Kusto.Data.IntelliSense.KustoCommandContext.Empty:new Kusto.Data.IntelliSense.KustoCommandContext(tableContext,contextOperation),this.m_contextCache.setItem(hashCode,commandContext),commandContext},AnalyzeStatementsImpl:function(statements,requireContext){var result=new Kusto.Data.IntelliSense.AnalyzedCommand,letStatements=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.ResolveLetExpressions(statements),expression,replaceRegex;if(result.Command=Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.FindLastStatement(statements),(requireContext||letStatements.Count>0)&&(result.Context=this.ResolveContextFromCommand(result.Command)),letStatements.Count===0)return result;while(letStatements.containsKey(result.Context.Context))expression=letStatements.getItem(result.Context.Context),replaceRegex=new System.Text.RegularExpressions.Regex.ctor(\"\\\\b\"+(result.Context.Context||\"\")+\"\\\\b(\\\\(.*?\\\\))?\"),result.Command=replaceRegex.replace(result.Command,expression),letStatements.remove(result.Context.Context),result.Context=this.ResolveContextFromCommand(expression);return result},GetKnownEntities:function(command,context,mapOfOriginallyKnownEntities,knownEntities,originallyKnownEntities){var $t,$t1,$t2,rule={};return this.TryMatchSpecificRule(command,context,Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForFilterInFind,rule)?(knownEntities.v=($t=System.String,System.Linq.Enumerable.from(rule.v.GetOptions(context),$t).toList($t)),mapOfOriginallyKnownEntities.containsKey(context)||mapOfOriginallyKnownEntities.setItem(context,knownEntities.v),originallyKnownEntities.v=mapOfOriginallyKnownEntities.getItem(context),!0):this.TryMatchSpecificRule((command||\"\")+\" project \",context,Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForProjectInFind,rule)?(knownEntities.v=($t1=System.String,System.Linq.Enumerable.from(rule.v.GetOptions(context),$t1).toList($t1)),mapOfOriginallyKnownEntities.containsKey(context)||mapOfOriginallyKnownEntities.setItem(context,knownEntities.v),originallyKnownEntities.v=mapOfOriginallyKnownEntities.getItem(context),!0):(command=(command||\"\")+\" | project \",this.TryMatchSpecificRule(command,context,Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForProject,rule))?(knownEntities.v=($t2=System.String,System.Linq.Enumerable.from(rule.v.GetOptions(context),$t2).toList($t2)),mapOfOriginallyKnownEntities.containsKey(context)||mapOfOriginallyKnownEntities.setItem(context,knownEntities.v),originallyKnownEntities.v=mapOfOriginallyKnownEntities.getItem(context),!0):!1},LoadCommandToolTips:function(){var $t,toolTipCommands=new(System.Collections.Generic.List$1(Kusto.Data.IntelliSense.IntelliSenseCommandTip).ctor),command,parameters,command1,parameters1,command2,parameters2,command3,parameters3,command4,parameters4,command5,parameters5,command6,parameters6,command7,parameters7,command8,parameters8,command9,parameters9,command10,parameters10,command11,parameters11,command12,parameters12,command13,parameters13,command14,parameters14,command15,parameters15,command16,parameters16,command17,parameters17,command18,command19,parameters18,command20,parameters19,command21,parameters20;this.CommandToolTips=toolTipCommands;command=($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTip,$t.Name=\"tostring\",$t.Summary=\"Converts the given value to string\",$t.Usage=\"... | extend str = <i>tostring<\\/i>(Column1)\",$t);parameters=new(System.Collections.Generic.List$1(Kusto.Data.IntelliSense.IntelliSenseCommandTipParameter).ctor);command.Parameters=parameters;parameters.add(($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTipParameter,$t.DataType=\"T\",$t.Name=\"value\",$t.Description=\"The value to convert to string\",$t));toolTipCommands.add(command);command1=($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTip,$t.Name=\"strlen\",$t.Summary=\"Returns the length of the given string\",$t.Usage=\"... | extend length = <i>strlen<\\/i>(Column1)\",$t);parameters1=new(System.Collections.Generic.List$1(Kusto.Data.IntelliSense.IntelliSenseCommandTipParameter).ctor);command1.Parameters=parameters1;parameters1.add(($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTipParameter,$t.DataType=\"string\",$t.Name=\"value\",$t.Description=\"The string being measured for length\",$t));toolTipCommands.add(command1);command2=($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTip,$t.Name=\"hash\",$t.Summary=\"Returns the xxhash value of a scalar value\",$t.Usage=\"... | extend hash = <i>hash<\\/i>(Column1, 100)\",$t);parameters2=new(System.Collections.Generic.List$1(Kusto.Data.IntelliSense.IntelliSenseCommandTipParameter).ctor);command2.Parameters=parameters2;parameters2.add(($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTipParameter,$t.DataType=\"Every scalar type <\\/b><i>except<\\/i><b> Dynamic\",$t.Name=\"target\",$t.Description=\"The value the hash is calculated on\",$t));parameters2.add(($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTipParameter,$t.DataType=\"long\",$t.Name=\"modulo\",$t.Description=\"The modulo value to be applied on the hash result\",$t));toolTipCommands.add(command2);command3=($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTip,$t.Name=\"iff\",$t.Summary=\"Returns one of two values, depending on whether the Boolean expression evaluates to true or false\",$t.Usage=\"... | extend val = <i>iff<\\/i>(strlen(Column1) > 10, 'long', 'short')\",$t);parameters3=new(System.Collections.Generic.List$1(Kusto.Data.IntelliSense.IntelliSenseCommandTipParameter).ctor);command3.Parameters=parameters3;parameters3.add(($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTipParameter,$t.DataType=\"bool\",$t.Name=\"expression\",$t.Description=\"The Boolean expression you want to evaluate\",$t));parameters3.add(($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTipParameter,$t.DataType=\"T\",$t.Name=\"trueValue\",$t.Description=\" Returned if 'expression' evaluates to True\",$t));parameters3.add(($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTipParameter,$t.DataType=\"T\",$t.Name=\"falseValue\",$t.Description=\"Returned if 'expression' evaluates to False\",$t));toolTipCommands.add(command3);command4=($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTip,$t.Name=\"extract\",$t.Summary=\"Produces a scalar using a regular expression (<a href=https://re2.googlecode.com/hg/doc/syntax.html>RE2 reference<\\/a>)\",$t.Usage=\"... | extend number = <i>extract<\\/i>(@'(\\\\d+)', 1, Column1, typeof(int))\",$t);parameters4=new(System.Collections.Generic.List$1(Kusto.Data.IntelliSense.IntelliSenseCommandTipParameter).ctor);command4.Parameters=parameters4;parameters4.add(($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTipParameter,$t.DataType=\"string\",$t.Name=\"regex\",$t.Description=\"The regular expression to be applied\",$t));parameters4.add(($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTipParameter,$t.DataType=\"int\",$t.Name=\"groupIndex\",$t.Description=\"The index of the matching group (1 = 1st matching group in regex, 2 = 2nd matching group, etc.)\",$t));parameters4.add(($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTipParameter,$t.DataType=\"column\",$t.Name=\"columnName\",$t.Description=\"Specify column to operate on (can be calculated column)\",$t));parameters4.add(($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTipParameter,$t.DataType=\"typename typeof(T)\",$t.Name=\"type\",$t.Description=\"Optional type to convert the result to\",$t.Optional=!0,$t));toolTipCommands.add(command4);command5=($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTip,$t.Name=\"replace\",$t.Summary=\"Replace a string with another string using a regular expression (<a href=https://re2.googlecode.com/hg/doc/syntax.html>RE2 reference<\\/a>)\",$t.Usage=\"... | replace str = <i>replace<\\/i>(@'foo', @'bar', Column1)\",$t);parameters5=new(System.Collections.Generic.List$1(Kusto.Data.IntelliSense.IntelliSenseCommandTipParameter).ctor);command5.Parameters=parameters5;parameters5.add(($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTipParameter,$t.DataType=\"string\",$t.Name=\"matchingPattern\",$t.Description=\"String or regular expression to be applied for matching\",$t));parameters5.add(($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTipParameter,$t.DataType=\"string\",$t.Name=\"rewritePattern\",$t.Description=\"String or regular expression to be used for rewrite (\\\\1 = 1st matching group in regex, \\\\2 = 2nd matching group, etc.)\",$t));parameters5.add(($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTipParameter,$t.DataType=\"column\",$t.Name=\"columnName\",$t.Description=\"Specify column to operate on (can be calculated column)\",$t));toolTipCommands.add(command5);command6=($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTip,$t.Name=\"extractjson\",$t.Summary=\"Produces a scalar using a JSONPath expression (<a href=http://goessner.net/articles/JsonPath/>JSONPath reference<\\/a>)\",$t.Usage=\"... | extend number = <I>extractjson<\\/I>(@'$.Object.Property', Column1, typeof(int))\",$t);parameters6=new(System.Collections.Generic.List$1(Kusto.Data.IntelliSense.IntelliSenseCommandTipParameter).ctor);command6.Parameters=parameters6;parameters6.add(($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTipParameter,$t.DataType=\"string\",$t.Name=\"jsonPath\",$t.Description=\"The JSON Path expression to be used\",$t));parameters6.add(($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTipParameter,$t.DataType=\"column\",$t.Name=\"columnName\",$t.Description=\"Specify column to operate on (can be calculated column)\",$t));parameters6.add(($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTipParameter,$t.DataType=\"typename typeof(T)\",$t.Name=\"type\",$t.Description=\"Optional type to convert the result to\",$t.Optional=!0,$t));toolTipCommands.add(command6);command7=($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTip,$t.Name=\"parsejson\",$t.Summary=\"Converts a JSON string into a value of type 'dynamic' (an object), whose properties can be further accessed using dot or bracket notation\",$t.Usage=\"... | extend obj = <I>parsejson<\\/I>(Column1)\",$t);parameters7=new(System.Collections.Generic.List$1(Kusto.Data.IntelliSense.IntelliSenseCommandTipParameter).ctor);command7.Parameters=parameters7;parameters7.add(($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTipParameter,$t.DataType=\"string\",$t.Name=\"columnName\",$t.Description=\"Any valid query expression that returns a string (e.g. a column name)\",$t));toolTipCommands.add(command7);command8=($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTip,$t.Name=\"toupper\",$t.Summary=\"Converts the given string to upper case\",$t.Usage=\"... | extend upper = <I>topupper<\\/I>(Column1)\",$t);parameters8=new(System.Collections.Generic.List$1(Kusto.Data.IntelliSense.IntelliSenseCommandTipParameter).ctor);command8.Parameters=parameters8;parameters8.add(($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTipParameter,$t.DataType=\"string\",$t.Name=\"value\",$t.Description=\"The string to be converted to upper case\",$t));toolTipCommands.add(command8);command9=($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTip,$t.Name=\"tolower\",$t.Summary=\"Converts the given string to lower case\",$t.Usage=\"... | extend lower = <I>tolower<\\/I>(Column1)\",$t);parameters9=new(System.Collections.Generic.List$1(Kusto.Data.IntelliSense.IntelliSenseCommandTipParameter).ctor);command9.Parameters=parameters9;parameters9.add(($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTipParameter,$t.DataType=\"string\",$t.Name=\"value\",$t.Description=\"The string to be converted to lower case\",$t));toolTipCommands.add(command9);command10=($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTip,$t.Name=\"substring\",$t.Summary=\"Retrieves a substring from the given string\",$t.Usage=\"... | extend substr = <I>substring<\\/I>(Column1,1,3)\",$t);parameters10=new(System.Collections.Generic.List$1(Kusto.Data.IntelliSense.IntelliSenseCommandTipParameter).ctor);command10.Parameters=parameters10;parameters10.add(($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTipParameter,$t.DataType=\"string\",$t.Name=\"value\",$t.Description=\"The string to be substringed\",$t));parameters10.add(($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTipParameter,$t.DataType=\"long\",$t.Name=\"startIndex\",$t.Description=\"The zero-based starting character position of a substring in this instance\",$t));parameters10.add(($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTipParameter,$t.DataType=\"long\",$t.Name=\"count\",$t.Description=\"The number of characters in the substring\",$t.Optional=!0,$t));toolTipCommands.add(command10);command11=($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTip,$t.Name=\"split\",$t.Summary=\"Retrieves a string array that contains the substrings of the given source string that are delimited by the given delimiter\",$t.Usage='... | extend split = <I>split<\\/I>(Column1,\";\")',$t);parameters11=new(System.Collections.Generic.List$1(Kusto.Data.IntelliSense.IntelliSenseCommandTipParameter).ctor);command11.Parameters=parameters11;parameters11.add(($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTipParameter,$t.DataType=\"string\",$t.Name=\"source\",$t.Description=\"The string to be splitted\",$t));parameters11.add(($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTipParameter,$t.DataType=\"string\",$t.Name=\"delimiter\",$t.Description=\"The delimiter on which the split will be based on\",$t));parameters11.add(($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTipParameter,$t.DataType=\"integer\",$t.Name=\"index\",$t.Description=\"The index of the requested substring\",$t.Optional=!0,$t));toolTipCommands.add(command11);command12=($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTip,$t.Name=\"strcat\",$t.Summary=\"Concatenates several strings together (up-to 16 parameters)\",$t.Usage=\"... | extend s = <I>strcat<\\/I>('KU', 'S', 'TO')\",$t);parameters12=new(System.Collections.Generic.List$1(Kusto.Data.IntelliSense.IntelliSenseCommandTipParameter).ctor);command12.Parameters=parameters12;parameters12.add(($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTipParameter,$t.DataType=\"string\",$t.Name=\"value\",$t.Description=\"First part\",$t));parameters12.add(($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTipParameter,$t.DataType=\"string\",$t.Name=\"values\",$t.Description=\"Other parts\",$t.IsArgsArray=!0,$t.Optional=!0,$t));toolTipCommands.add(command12);command13=($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTip,$t.Name=\"countof\",$t.Summary=\"Returns the number of pattern matches in the given string\",$t.Usage=\"... | extend matches = <i>countof<\\/i>(Expression, Pattern, Type)\",$t);parameters13=new(System.Collections.Generic.List$1(Kusto.Data.IntelliSense.IntelliSenseCommandTipParameter).ctor);command13.Parameters=parameters13;parameters13.add(($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTipParameter,$t.DataType=\"string\",$t.Name=\"Expression\",$t.Description=\"The string to match the pattern to\",$t));parameters13.add(($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTipParameter,$t.DataType=\"string\",$t.Name=\"Pattern\",$t.Description=\"The pattern to match the expression to. Can be a regular expression\",$t));parameters13.add(($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTipParameter,$t.DataType=\"string\",$t.Name=\"Type\",$t.Description=\"For substring count leave empty or specifiy 'normal', for regular expression count specify 'regex'\",$t));toolTipCommands.add(command13);command14=($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTip,$t.Name=\"percentile\",$t.Summary=\"Returns the estimated value for the given percentile over source values\",$t.Usage=\"... | summarize <i>percentile<\\/i>(source, percent) ...\",$t);parameters14=new(System.Collections.Generic.List$1(Kusto.Data.IntelliSense.IntelliSenseCommandTipParameter).ctor);command14.Parameters=parameters14;parameters14.add(($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTipParameter,$t.DataType=\"numeric <\\/b><i>or<\\/i><b> DateTime <\\/b><i>or<\\/i><b> TimeSpan\",$t.Name=\"Source\",$t.Description=\"Range of values over which to estimate percentile\",$t));parameters14.add(($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTipParameter,$t.DataType=\"real\",$t.Name=\"percent\",$t.Description=\"Value in the range [0..100] giving the percentile to estimate\",$t));toolTipCommands.add(command14);command15=($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTip,$t.Name=\"percentiles\",$t.Summary=\"Returns the estimated value for each of the given percentiles over source values\",$t.Usage=\"... | summarize <i>percentiles<\\/i>(source, percent, ...) ...\",$t);parameters15=new(System.Collections.Generic.List$1(Kusto.Data.IntelliSense.IntelliSenseCommandTipParameter).ctor);command15.Parameters=parameters15;parameters15.add(($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTipParameter,$t.DataType=\"numeric <\\/b><i>or<\\/i><b> DateTime <\\/b><i>or<\\/i><b> TimeSpan\",$t.Name=\"Source\",$t.Description=\"Range of values over which to estimate percentile\",$t));parameters15.add(($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTipParameter,$t.DataType=\"real\",$t.Name=\"percent\",$t.Description=\"Value in the range [0..100] giving the percentile to estimate\",$t.IsArgsArray=!0,$t));toolTipCommands.add(command15);command16=($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTip,$t.Name=\"percentilew\",$t.Summary=\"Returns the estimated value for the given percentile over weighted source values\",$t.Usage=\"... | summarize <i>percentilew<\\/i>(source, weight, percent) ...\",$t);parameters16=new(System.Collections.Generic.List$1(Kusto.Data.IntelliSense.IntelliSenseCommandTipParameter).ctor);command16.Parameters=parameters16;parameters16.add(($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTipParameter,$t.DataType=\"numeric <\\/b><i>or<\\/i><b> DateTime <\\/b><i>or<\\/i><b> TimeSpan\",$t.Name=\"Source\",$t.Description=\"Range of values over which to estimate percentile\",$t));parameters16.add(($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTipParameter,$t.DataType=\"integer\",$t.Name=\"Weight\",$t.Description=\"Range of weights to give to each source value\",$t));parameters16.add(($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTipParameter,$t.DataType=\"real\",$t.Name=\"percent\",$t.Description=\"Value in the range [0..100] giving the percentile to estimate\",$t));toolTipCommands.add(command16);command17=($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTip,$t.Name=\"percentilesw\",$t.Summary=\"Returns the estimated value for each of the given percentiles over weighted source values\",$t.Usage=\"... | summarize <i>percentilesw<\\/i>(source, weight, percent, ...) ...\",$t);parameters17=new(System.Collections.Generic.List$1(Kusto.Data.IntelliSense.IntelliSenseCommandTipParameter).ctor);command17.Parameters=parameters17;parameters17.add(($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTipParameter,$t.DataType=\"numeric <\\/b><i>or<\\/i><b> DateTime <\\/b><i>or<\\/i><b> TimeSpan\",$t.Name=\"Source\",$t.Description=\"Range of values over which to estimate percentile\",$t));parameters17.add(($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTipParameter,$t.DataType=\"integer\",$t.Name=\"Weight\",$t.Description=\"Range of weights to give to each source value\",$t));parameters17.add(($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTipParameter,$t.DataType=\"real\",$t.Name=\"percent\",$t.Description=\"Value in the range [0..100] giving the percentile to estimate\",$t.IsArgsArray=!0,$t));toolTipCommands.add(command17);command18=($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTip,$t.Name=\"ingestion_time\",$t.Summary=\"returns a datetime value specifying when the record was first available for query\",$t.Usage=\"... | extend length = <i>ingestiontime<\\/i>()\",$t);command18.Parameters=new(System.Collections.Generic.List$1(Kusto.Data.IntelliSense.IntelliSenseCommandTipParameter).ctor);toolTipCommands.add(command18);command19=($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTip,$t.Name=\"countif\",$t.Summary=\"Returns the number of rows that matches the predicate\",$t.Usage=\"... | summarize <i>countif<\\/i>(Predicate)\",$t);parameters18=new(System.Collections.Generic.List$1(Kusto.Data.IntelliSense.IntelliSenseCommandTipParameter).ctor);command19.Parameters=parameters18;parameters18.add(($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTipParameter,$t.DataType=\"boolean\",$t.Name=\"Predicate\",$t.Description=\"Boolean expression used as predicate\",$t));toolTipCommands.add(command19);command20=($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTip,$t.Name=\"dcountif\",$t.Summary=\"Returns the number of unique values of Expression in rows that matches the predicate\",$t.Usage=\"... | summarize <i>dcountif<\\/i>(Expression, Predicate, Accuracy)\",$t);parameters19=new(System.Collections.Generic.List$1(Kusto.Data.IntelliSense.IntelliSenseCommandTipParameter).ctor);command20.Parameters=parameters19;parameters19.add(($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTipParameter,$t.DataType=\"T\",$t.Name=\"Expression\",$t.Description=\"The unique values to count\",$t));parameters19.add(($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTipParameter,$t.DataType=\"boolean\",$t.Name=\"Predicate\",$t.Description=\"Boolean expression used as predicate\",$t));parameters19.add(($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTipParameter,$t.DataType=\"integer\",$t.Name=\"Accuracy\",$t.Description=\"Optional. Controls the balance between speed and accuracy\",$t));toolTipCommands.add(command20);command21=($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTip,$t.Name=\"sumif\",$t.Summary=\"Returns the sum of rows that matches the predicate\",$t.Usage=\"... | summarize <i>sumif<\\/i>(Predicate, Column)\",$t);parameters20=new(System.Collections.Generic.List$1(Kusto.Data.IntelliSense.IntelliSenseCommandTipParameter).ctor);command21.Parameters=parameters20;parameters20.add(($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTipParameter,$t.DataType=\"boolean\",$t.Name=\"Predicate\",$t.Description=\"Boolean expression used as predicate\",$t));parameters20.add(($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTipParameter,$t.DataType=\"numeric <\\/b><i>or<\\/i><b> DateTime <\\/b><i>or<\\/i><b> TimeSpan\",$t.Name=\"Column\",$t.Description=\"Column or other scalar funciton to calculate the sum of\",$t));toolTipCommands.add(command21)}}});Bridge.define(\"$AnonymousType$1\",$asm,{$kind:\"anonymous\",ctors:{ctor:function(name,parentTableName,typeCode){this.Name=name;this.ParentTableName=parentTableName;this.TypeCode=typeCode}},methods:{equals:function(o){return Bridge.is(o,$asm.$AnonymousType$1)?Bridge.equals(this.Name,o.Name)&&Bridge.equals(this.ParentTableName,o.ParentTableName)&&Bridge.equals(this.TypeCode,o.TypeCode):!1},getHashCode:function(){return Bridge.addHash([7550196186,this.Name,this.ParentTableName,this.TypeCode])},toJSON:function(){return{Name:this.Name,ParentTableName:this.ParentTableName,TypeCode:this.TypeCode}}},statics:{methods:{$metadata:function(){return{m:[{a:2,n:\"Name\",t:16,rt:System.String,g:{a:2,n:\"get_Name\",t:8,rt:System.String,fg:\"Name\"},fn:\"Name\"},{a:2,n:\"ParentTableName\",t:16,rt:System.String,g:{a:2,n:\"get_ParentTableName\",t:8,rt:System.String,fg:\"ParentTableName\"},fn:\"ParentTableName\"},{a:2,n:\"TypeCode\",t:16,rt:Kusto.Data.IntelliSense.EntityDataType,g:{a:2,n:\"get_TypeCode\",t:8,rt:Kusto.Data.IntelliSense.EntityDataType,fg:\"TypeCode\",box:function($v){return Bridge.box($v,Kusto.Data.IntelliSense.EntityDataType,System.Enum.toStringFn(Kusto.Data.IntelliSense.EntityDataType))}},fn:\"TypeCode\"}]}}}}});Bridge.ns(\"Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider\",$asm.$);Bridge.apply($asm.$.Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider,{f1:function(f){return\"-\"+(f||\"\")},f2:function(_o1){return _o1.add(\"series_stats\",System.Array.init([\"min\",\"min_idx\",\"max\",\"max_idx\",\"avg\",\"stdev\",\"variance\"],System.String)),_o1.add(\"series_fit_line\",System.Array.init([\"rsquare\",\"slope\",\"variance\",\"rvariance\",\"interception\",\"line_fit\"],System.String)),_o1.add(\"series_fit_2lines\",System.Array.init([\"rsquare\",\"split_idx\",\"variance\",\"rvariance\",\"line_fit\",\"right_rsquare\",\"right_slope\",\"right_interception\",\"right_variance\",\"right_rvariance\",\"left_rsquare\",\"left_slope\",\"left_interception\",\"left_variance\",\"left_rvariance\"],System.String)),_o1.add(\"series_periods_detect\",System.Array.init([\"periods\",\"scores\"],System.String)),_o1.add(\"series_periods_validate\",System.Array.init([\"periods\",\"scores\"],System.String)),_o1},f3:function(func){return func},f4:function(func){return Kusto.Data.IntelliSense.ApplyPolicy.AppendSpaceStepBackPolicy},f5:function(_o9){return _o9.add(\"filter\"),_o9.add(\"where\"),_o9},f6:function(_o10){return _o10.add(\"project\"),_o10},f7:function(_o11){return _o11.add(\"project-away\"),_o11},f8:function(_o12){return _o12.add(\"project-rename\"),_o12},f9:function(_o13){return _o13.add(\"project\"),_o13.add(\"extend\"),_o13},f10:function(_o14){return _o14.add(\"join\"),_o14},f11:function(_o15){return _o15.add(\"top\"),_o15.add(\"top-hitters\"),_o15.add(\"order\"),_o15.add(\"sort\"),_o15.add(\"reduce\"),_o15.add(\"top-nested\"),_o15},f12:function(_o16){return _o16.add(\"top\"),_o16.add(\"top-hitters\"),_o16.add(\"order\"),_o16.add(\"sort\"),_o16.add(\"reduce\"),_o16.add(\"top-nested\"),_o16.add(\"render\"),_o16},f13:function(_o17){return _o17.add(\"top\"),_o17.add(\"order\"),_o17.add(\"sort\"),_o17},f14:function(_o18){return _o18.add(\"top\"),_o18.add(\"top-hitters\"),_o18.add(\"order\"),_o18.add(\"sort\"),_o18.add(\"top-nested\"),_o18},f15:function(_o19){return _o19.add(\"reduce\"),_o19},f16:function(_o20){return _o20.add(\"parse\"),_o20},f17:function(_o21){return _o21.add(\"render\"),_o21},f18:function(_o22){return _o22.add(\"top\"),_o22.add(\"limit\"),_o22.add(\"take\"),_o22.add(\"top-nested\"),_o22.add(\"top-hitters\"),_o22.add(\"sample\"),_o22.add(\"sample-distinct\"),_o22},f19:function(_o23){return _o23.add(\"evaluate\"),_o23},f20:function(_o24){return _o24.add(\"summarize\"),_o24},f21:function(_o25){return _o25.add(\"distinct\"),_o25},f22:function(_o26){return _o26.add(\"top-nested\"),_o26},f23:function(_o27){return _o27.add(\"top-hitters\"),_o27},f24:function(_o28){return _o28.add(\"sample-distinct\"),_o28},f25:function(_o29){return _o29.add(\"top-nested\"),_o29.add(\"top-hitters\"),_o29.add(\"summarize\"),_o29.add(\"distinct\"),_o29},f26:function(_o30){return _o30.add(\"database\"),_o30},f27:function(_o31){return _o31.add(\"find\"),_o31},f28:function(_o32){return _o32.add(\"search\"),_o32},f29:function(_o33){return _o33.add(\"make-series\"),_o33},f30:function(_o34){return _o34.add(\"cnt\",\"count\"),_o34.add(\"percentiles\",\"percentile\"),_o34.add(\"percentilew\",\"percentile\"),_o34.add(\"percentilesw\",\"percentile\"),_o34.add(\"makelist\",\"list\"),_o34.add(\"makeset\",\"set\"),_o34.add(\"make_list\",\"list\"),_o34.add(\"make_set\",\"set\"),_o34.add(\"make_dictionary\",\"dictionary\"),_o34.add(\"make_bag\",\"bag\"),_o34},f31:function(_o35){return _o35.add(\"join\"),_o35.add(\"project\"),_o35.add(\"summarize\"),_o35.add(\"reduce\"),_o35.add(\"getschema\"),_o35.add(\"distinct\"),_o35},f32:function(_o36){return _o36.add(\"join\",{Item1:Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_commandContext_Join,Item2:null}),_o36.add(\".show\",{Item1:Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_commandContext_Show,Item2:Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_showCommandFixRegex}),_o36.add(\"range\",{Item1:Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_commandContext_Range,Item2:null}),_o36.add(\"toscalar\",{Item1:Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_commandContext_ToScalar,Item2:null}),_o36.add(\"{\",{Item1:Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_commandContext_Callable,Item2:null}),_o36.add(\"let\",{Item1:Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_commandContext_Let,Item2:null}),_o36.add(\"union\",{Item1:Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_commandContext_Union,Item2:null}),_o36.add(\"find\",{Item1:Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_commandContext_Find,Item2:null}),_o36.add(\"search\",{Item1:Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_commandContext_Search,Item2:null}),_o36.add(\"#connect\",{Item1:Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_commandContext_ConnectDirective,Item2:null}),_o36},f33:function(s){return s},f34:function(s){return System.Text.RegularExpressions.Regex.escape(s)},f35:function(_o37){return _o37.add(new System.Text.RegularExpressions.Regex.ctor(\"\\\\blet\\\\s+(?<LetExpressionName>\\\\w+)\\\\s*=.*?\\\\{(?<Expression>.+?)\\\\}\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions)),_o37.add(new System.Text.RegularExpressions.Regex.ctor(\"\\\\blet\\\\s+(?<LetExpressionName>\\\\w+)\\\\s*=\\\\s*(?<Expression>.+?);\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions)),_o37},f36:function(c){return c.Name},f37:function(c){return c},f38:function(m){return(m.getGroups().get(1).getValue()||\"\")+\" \"+(m.getGroups().get(3).getValue()||\"\")},f39:function(_o2){return _o2.add(\"kind=\",Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy),_o2.add(\"(\",Kusto.Data.IntelliSense.ApplyPolicy.AppendJoinClauseWithoutOpenningBracketPolicy),_o2},f40:function(_o3){var $t;return _o3.add(\"timechart\",($t=new Kusto.Data.IntelliSense.ApplyPolicy,$t.Text=\" with 'cats' \",$t)),_o3.add(\"barchart\",($t=new Kusto.Data.IntelliSense.ApplyPolicy,$t.Text=\" with 'dogs' \",$t)),_o3},f41:function(_o4){var $t;return _o4.add(\"autocluster\",($t=new Kusto.Data.IntelliSense.ApplyPolicy,$t.Text=\"()\",$t.OffsetToken=\")\",$t.OffsetPosition=0,$t)),_o4.add(\"diffpatterns\",($t=new Kusto.Data.IntelliSense.ApplyPolicy,$t.Text='(\"split= \")',$t.OffsetToken=\"=\",$t.OffsetPosition=2,$t)),_o4.add(\"basket\",($t=new Kusto.Data.IntelliSense.ApplyPolicy,$t.Text=\"()\",$t.OffsetToken=\")\",$t.OffsetPosition=0,$t)),_o4.add(\"extractcolumns\",($t=new Kusto.Data.IntelliSense.ApplyPolicy,$t.Text=\"()\",$t.OffsetToken=\")\",$t.OffsetPosition=0,$t)),_o4},f42:function(_o5){return _o5.add(\"where\",Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy),_o5.add(\"in\",Kusto.Data.IntelliSense.ApplyPolicy.AppendFindInClausePolicy),_o5},f43:function(_o6){return _o6.add(\"(\",Kusto.Data.IntelliSense.ApplyPolicy.AppendFindInClauseWithoutOpenningBracketPolicy),_o6},f44:function(_o7){var $t;return _o7.add(\")\",($t=new Kusto.Data.IntelliSense.ApplyPolicy,$t.Text=\" where \",$t)),_o7.add(\",\",Kusto.Data.IntelliSense.ApplyPolicy.AppendFindInClauseWithoutOpenningBracketPolicy),_o7},f45:function(_o8){return _o8.add('\"\"',Kusto.Data.IntelliSense.ApplyPolicy.AppendSpaceStepBackPolicy),_o8.add(\"kind=\",Kusto.Data.IntelliSense.ApplyPolicy.NullApplyPolicy),_o8.add(\"in\",Kusto.Data.IntelliSense.ApplyPolicy.AppendSearchInClausePolicy),_o8},f46:function(kvp){return kvp.value},f47:function(f){return f.toLowerCase()},f48:function(vals){return vals},f49:function(t){return t.Name},f50:function(t){return t.value},f51:function(db){return db.Tables},f52:function(t){return System.Linq.Enumerable.from(t.Columns,Kusto.Data.IntelliSense.KustoIntelliSenseColumnEntity).select($asm.$.Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.f36)},f53:function(n){return\"'\"+(n||\"\")+\"'\"},f54:function(c){return\"'\"+(c||\"\")+\"'\"},f55:function(db){return\"'\"+(db.Name||\"\")+\"'\"},f56:function(t){return!t.IsInvisible},f57:function(n){return n},f58:function(f){return f.CallName},f59:function(f){return Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy},f60:function(p){return(p.Name||\"\")+\"()\"},f61:function(p){return p},f62:function(f){return f.Name},f63:function(f){return{Item1:Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_removeCommentsRegex.replace(f.Expression,\"\"),Item2:new System.Text.RegularExpressions.Regex.ctor(\"\\\\b\"+(f.Name||\"\")+\"\\\\b\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.DefaultRegexOptions)}},f64:function(c){return\"cluster('\"+(c||\"\")+\"')\"},f65:function(t){return System.Linq.Enumerable.from(t.Columns,Kusto.Data.IntelliSense.KustoIntelliSenseColumnEntity).select(function(c){return new $asm.$AnonymousType$1(c.Name,t.Name,c.TypeCode)})},f66:function(c){return c.TypeCode===Kusto.Data.IntelliSense.EntityDataType.String},f67:function(e){return Kusto.Data.IntelliSense.ContextualTokensWithRegexIntelliSenseRule.GetHashStringForContextAndToken(e.ParentTableName,e.Name)},f68:function(t){return Kusto.Data.IntelliSense.ContextualTokensWithRegexIntelliSenseRule.GetHashStringForContextAndToken(t.Name,\"*\")},f69:function(_o1){return _o1.add(\"in\",Kusto.Data.IntelliSense.ApplyPolicy.AppendStringLiteralArrayPolicy),_o1.add(\"!in\",Kusto.Data.IntelliSense.ApplyPolicy.AppendStringLiteralArrayPolicy),_o1},f70:function(c){return c.TypeCode!==Kusto.Data.IntelliSense.EntityDataType.String},f71:function(c){return c.TypeCode===Kusto.Data.IntelliSense.EntityDataType.DateTime}});Bridge.define(\"Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider\",{inherits:[Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase],statics:{fields:{s_dmRuleKinds:null,s_ingestionQueueTypes:null,s_clearIngestionSupportedQueuesTypes:null,s_lineWithDotBeginningRegex:null,s_showCommandRegex:null,s_showClusterCommandRegex:null,s_showClusterSettingsCommandRegex:null,s_showClusterSettingsVersionsCommandRegex:null,s_showClusterSettingsWithEncryptedSecretsCommandRegex:null,s_showPrincipalRolesCommandRegex:null,s_alterCommandRegex:null,s_alterClusterSettingsCommandRegex:null,s_alterClusterSettingsFromCommandRegex:null,s_alterMergeCommandRegex:null,s_alterObtainerQueuesCommandRegex:null,s_addOrAlterlterEventHubIngestionSourceCommandRegex:null,s_createCommandRegex:null,s_dropCommandRegex:null,s_addCommandRegex:null,s_addOrAlterCommandRegex:null,s_addDataObtainerCommandRegex:null,s_addDataObtainerInitializeCommandRegex:null,s_addDataObtainerInitializeWithCommandRegex:null,s_getCommandRegex:null,s_getIngestionQueuesCommandRegex:null,s_getIngestionQueuesTypeCommandRegex:null,s_flushCommandRegex:null,s_initializeCommandRegex:null,s_initializeClusterConfigCommandRegex:null,s_initializeClusterConfigEncryptionCommandRegex:null,s_resetCommandRegex:null,s_setCommandRegex:null,s_showPurgesCommandRegex:null,s_showPurgesFromCommandRegex:null,s_showPurgesToCommandRegex:null,s_purgeTableCommandRegex:null,s_purgeMaterializedViewTableCommandRegex:null,s_purgeTableInDatabaseCommandRegex:null,s_purgeTableRecordsInDatabaseCommandRegex:null,s_purgeRetryCommandRegex:null,s_purgesFromRetryCommandRegex:null,s_purgesToRetryCommandRegex:null,s_cancelPurgeCommandRegex:null,s_cancelAllPurgeCommandRegex:null,s_refeshPolicyCacheRegex:null,s_clearCommandRegex:null,s_clearIngestionQueuesCommandRegex:null,s_adminOperationOptions:null,s_showCommandOptions:null,s_showClustersKeywordOptions:null,s_showClusterSettingsKeywordOptions:null,s_showClusterSettingsVersionsKeywordOptions:null,s_showClusterSettingsWithEncryptedSecretsOption:null,s_showPrincipalRolesKeywordOptions:null,s_alterClusterSettingsFromKeywordOptions:null,s_alterCommandOptions:null,s_createCommandOptions:null,s_dropCommandOptions:null,s_addCommandOptions:null,s_addOrAlterCommandOptions:null,s_addDataObtainerCommandOptions:null,s_addDataObtainerInitializeCommandOptions:null,s_addDataObtainerInitializeWithCommandOptions:null,s_getCommandOptions:null,s_getIngestionQueuesCommandOptions:null,s_getIngestionQueuesTypeCommandOptions:null,s_flushCommandOptions:null,s_initializeCommandOptions:null,s_initializeClusterConfigurationCommandOptions:null,s_initializeClusterConfigurationEncryptionCommandOptions:null,s_resetCommandOptions:null,s_setCommandOptions:null,s_alterObtainerQueuesOptions:null,s_addOrAlterEventHubIngestionSourceOptions:null,s_showPurgeCommandOptions:null,s_purgeFromCommandOptions:null,s_showPurgeToCommandOptions:null,s_purgeTableCommandOptions:null,s_purgeMaterializedViewTableCommandOptions:null,s_purgeTableInDatabaseCommandOptions:null,s_purgeTableRecordsInDatabaseCommandOptions:null,s_purgeRetryCommandOptions:null,s_purgeFromRetryCommandOptions:null,s_purgeToRetryCommandOptions:null,s_showPurgeCancelCommandOptions:null,s_showPurgeCancelAllCommandsOptions:null,s_refeshPolicyCacheOptions:null,s_clearCommandOptions:null},ctors:{init:function(){this.s_dmRuleKinds=System.Enum.getNames(Kusto.Data.DmSettingsType);this.s_ingestionQueueTypes=System.Linq.Enumerable.from(System.Enum.getNames(Kusto.Data.IngestionQueueType),System.String).select($asm.$.Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider.f1).ToArray(System.String);this.s_clearIngestionSupportedQueuesTypes=System.Linq.Enumerable.from($asm.$.Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider.f2(new(System.Collections.Generic.List$1(Kusto.Data.IngestionQueueType).ctor)),Kusto.Data.IngestionQueueType).select($asm.$.Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider.f3).ToArray(System.String);this.s_lineWithDotBeginningRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_showCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.show\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_showClusterCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.show\\\\s+cluster\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_showClusterSettingsCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.show\\\\s+cluster\\\\s+settings\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_showClusterSettingsVersionsCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.show\\\\s+cluster\\\\s+settings\\\\s+\\\\S+\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_showClusterSettingsWithEncryptedSecretsCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.show\\\\s+cluster\\\\s+settings\\\\s+\\\\S+\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_showPrincipalRolesCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.show\\\\s+principal\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_alterCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.alter\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_alterClusterSettingsCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.alter\\\\s+cluster\\\\s+settings\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_alterClusterSettingsFromCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.alter\\\\s+cluster\\\\s+settings\\\\s+\\\\S+\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_alterMergeCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.alter-merge\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_alterObtainerQueuesCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.(alter|alter-merge|drop)\\\\s+obtainer\\\\s+\\\\S+\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_addOrAlterlterEventHubIngestionSourceCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.add-or-alter\\\\s+eventhub\\\\s+ingestion\\\\s+source\\\\s+\\\\S+\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_createCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.create\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_dropCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.drop\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_addCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.add\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_addOrAlterCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.add-or-alter\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_addDataObtainerCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.add\\\\s+data\\\\s+obtainer\\\\s+\\\\S+\\\\s+\\\\S+\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_addDataObtainerInitializeCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.add\\\\s+data\\\\s+obtainer\\\\s+\\\\S+\\\\s+\\\\S+\\\\s+initialize\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_addDataObtainerInitializeWithCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.add\\\\s+data\\\\s+obtainer\\\\s+\\\\S+\\\\s+\\\\S+\\\\s+initialize\\\\s+with\\\\s+\\\\S+\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_getCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.get\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_getIngestionQueuesCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.(get|show)\\\\s+ingestion\\\\s+queues\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_getIngestionQueuesTypeCommandRegex=new System.Text.RegularExpressions.Regex.ctor('^\\\\s*\\\\.(get|show)\\\\s+ingestion\\\\s+queues\\\\s+\"(.*?)\"\\\\s+$',Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_flushCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.flush\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_initializeCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.initialize\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_initializeClusterConfigCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.initialize\\\\s+cluster\\\\s+configuration\\\\s+\\\\S+\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_initializeClusterConfigEncryptionCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.initialize\\\\s+cluster\\\\s+configuration\\\\s+\\\\S+\\\\s+encryption\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_resetCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.reset\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_setCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.set\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_showPurgesCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.show\\\\s+purges\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_showPurgesFromCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.show\\\\s+purges\\\\s+from\\\\s+\\\\S+\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_showPurgesToCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.show\\\\s+purges\\\\s+from\\\\s+\\\\S+\\\\s+to\\\\s+\\\\S+\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_purgeTableCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.purge\\\\s+table\\\\s+\\\\S+\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_purgeMaterializedViewTableCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.purge\\\\s+materialized-view\\\\s+\\\\S+\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_purgeTableInDatabaseCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.purge\\\\s+table\\\\s+\\\\S+\\\\s+in\\\\s+database\\\\s+\\\\S+\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_purgeTableRecordsInDatabaseCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.purge\\\\s+(table|materialized-view)\\\\s+\\\\S+\\\\s+records\\\\s+in\\\\s+database\\\\s+\\\\S+\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_purgeRetryCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.retry\\\\s+purges\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_purgesFromRetryCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.retry\\\\s+purges\\\\s+from\\\\s+\\\\S+\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_purgesToRetryCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.retry\\\\s+purges\\\\s+from\\\\s+\\\\S+\\\\s+to\\\\s+\\\\S+\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_cancelPurgeCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.cancel\\\\s+purge\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_cancelAllPurgeCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.cancel\\\\s+all\\\\s+purges\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_refeshPolicyCacheRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.refresh\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_clearCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.clear\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_clearIngestionQueuesCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.clear\\\\s+ingestion\\\\s+queues\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_adminOperationOptions=System.Array.init([\"show\",\"get\",\"alter\",\"alter-merge\",\"add\",\"add-or-alter\",\"create\",\"drop\",\"flush\",\"initialize\",\"reset\",\"set\",\"purge table\",\"purge materialized-view\",\"retry purge\",\"retry purges\",\"cancel purge\",\"cancel all purges\",\"refresh\",\"clear\"],System.String);this.s_showCommandOptions=System.Array.init([\"version\",\"diagnostics\",\"cluster\",\"query service uri\",\"lagging queues\",\"ingestion queues\",\"ingestion source types\",\"ingestion resources\",\"ingestions status tables\",\"Geneva ingestion sources settings\",\"EventHub ingestion sources settings\",\"EventGrid ingestion sources settings\",\"principal\",\"purges\"],System.String);this.s_showClustersKeywordOptions=System.Array.init([\"principals\",\"settings\",\"monitoring\"],System.String);this.s_showClusterSettingsKeywordOptions=Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider.s_dmRuleKinds;this.s_showClusterSettingsVersionsKeywordOptions=System.Array.init([\"version\",\"versions\"],System.String);this.s_showClusterSettingsWithEncryptedSecretsOption=System.Array.init([\"with encrypted secrets\"],System.String);this.s_showPrincipalRolesKeywordOptions=System.Array.init([\"roles\",\"@'principal' roles\"],System.String);this.s_alterClusterSettingsFromKeywordOptions=System.Array.init([\"from\"],System.String);this.s_alterCommandOptions=System.Array.init([\"cluster settings\",\"aggregator storage accounts\",\"obtainer\",\"obtainers\",\"Geneva ingestion source\"],System.String);this.s_createCommandOptions=System.Array.init([\"tempstorage\",\"ingestions status table\"],System.String);this.s_dropCommandOptions=System.Array.init([\"cluster admins\",\"cluster users\",\"cluster ingestors\",\"obtainer\",\"aggregator storage accounts\",\"obtainers\",\"Geneva ingestion source\"],System.String);this.s_addCommandOptions=System.Array.init([\"ingestion interval for\",\"data obtainer\",\"cluster admins\",\"cluster users\"],System.String);this.s_addOrAlterCommandOptions=System.Array.init([\"eventhub ingestion source\"],System.String);this.s_addDataObtainerCommandOptions=System.Array.init([\"initialize\"],System.String);this.s_addDataObtainerInitializeCommandOptions=System.Array.init([\"with\"],System.String);this.s_addDataObtainerInitializeWithCommandOptions=System.Array.init([\"encryption certificate\"],System.String);this.s_getCommandOptions=System.Array.init([\"lagging queues\",\"ingestion queues\",\"source containers\",\"ingestion resources\",\"ingestions status tables\"],System.String);this.s_getIngestionQueuesCommandOptions=System.Linq.Enumerable.from(System.Array.init([\"lengths\",\"withsas\"],System.String),System.String).concat(Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider.s_ingestionQueueTypes).ToArray(System.String);this.s_getIngestionQueuesTypeCommandOptions=System.Array.init([\"withsas\",\"withencryptedkeys\"],System.String);this.s_flushCommandOptions=System.Array.init([\"configuration\"],System.String);this.s_initializeCommandOptions=System.Array.init([\"cluster configuration\"],System.String);this.s_initializeClusterConfigurationCommandOptions=System.Array.init([\"encryption\"],System.String);this.s_initializeClusterConfigurationEncryptionCommandOptions=System.Array.init([\"certificate\"],System.String);this.s_resetCommandOptions=System.Array.init([\"cluster configuration\"],System.String);this.s_setCommandOptions=System.Array.init([\"cluster as secondary\"],System.String);this.s_alterObtainerQueuesOptions=System.Array.init([System.Enum.toString(Kusto.Data.IngestionQueueType,Kusto.Data.IngestionQueueType.InternalQueue),System.Enum.toString(Kusto.Data.IngestionQueueType,Kusto.Data.IngestionQueueType.InputQueue)],System.String);this.s_addOrAlterEventHubIngestionSourceOptions=System.Array.init([\"settings with (Configuration='', EncryptionCertificateThumbprint='')\"],System.String);this.s_showPurgeCommandOptions=System.Array.init([\"from\",\"<OperationId>\",\"in database <DatabaseName>\"],System.String);this.s_purgeFromCommandOptions=System.Array.init([\"to\",\"in database <DatabaseName>\"],System.String);this.s_showPurgeToCommandOptions=System.Array.init([\"in database <DatabaseName>\"],System.String);this.s_purgeTableCommandOptions=System.Array.init([\"in database\",\"records in database\"],System.String);this.s_purgeMaterializedViewTableCommandOptions=System.Array.init([\"records in database\"],System.String);this.s_purgeTableInDatabaseCommandOptions=System.Array.init([\"allrecords\"],System.String);this.s_purgeTableRecordsInDatabaseCommandOptions=System.Array.init([\"<| where\"],System.String);this.s_purgeRetryCommandOptions=System.Array.init([\"from\",\"dryrun\"],System.String);this.s_purgeFromRetryCommandOptions=System.Array.init([\"to\",\"dryrun\"],System.String);this.s_purgeToRetryCommandOptions=System.Array.init([\"dryrun\"],System.String);this.s_showPurgeCancelCommandOptions=System.Array.init([\"<OperationId>\"],System.String);this.s_showPurgeCancelAllCommandsOptions=System.Array.init([\"in database\"],System.String);this.s_refeshPolicyCacheOptions=System.Array.init([\"policy cache\"],System.String);this.s_clearCommandOptions=System.Array.init([\"ingestion queues\"],System.String)}}},ctors:{ctor:function(connectionContext){connectionContext===void 0&&(connectionContext=null);var $t;this.$initialize();Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.ctor.call(this);this.Locker;(this.CommandRules==null||this.GeneralRules==null)&&this.LoadRulesUnderLock();this.CommandToolTips==null&&this.LoadCommandToolTips();this.ContextConnection=($t=connectionContext,$t!=null?$t:\"\")}},methods:{LoadRulesUnderLock:function(){var $t,$t1;this.CommandRules=new(System.Collections.Generic.List$1(Kusto.Data.IntelliSense.IntelliSenseRule).ctor);this.GeneralRules=new(System.Collections.Generic.List$1(Kusto.Data.IntelliSense.IntelliSenseRule).ctor);this.QueryParametersRules=new(System.Collections.Generic.List$1(Kusto.Data.IntelliSense.IntelliSenseRule).ctor);this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.DMRuleKind.YieldAdminCommandsOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider.s_lineWithDotBeginningRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider.s_adminOperationOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.DMRuleKind.YieldShowCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider.s_showCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider.s_showCommandOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.DMRuleKind.YieldShowClustersKeywordOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider.s_showClusterCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider.s_showClustersKeywordOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.DMRuleKind.YieldShowClustersSettingsKeywordOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider.s_showClusterSettingsCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider.s_showClusterSettingsKeywordOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.DMRuleKind.YieldShowClustersSettingsVersionKeywordOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider.s_showClusterSettingsVersionsCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider.s_showClusterSettingsVersionsKeywordOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.DMRuleKind.YieldShowClustersSettingsVersionKeywordOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider.s_showClusterSettingsWithEncryptedSecretsCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider.s_showClusterSettingsWithEncryptedSecretsOption),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.DMRuleKind.YieldShowPrincipalRolesCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider.s_showPrincipalRolesCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider.s_showPrincipalRolesKeywordOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.DMRuleKind.YieldAlterCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider.s_alterCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider.s_alterCommandOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.DMRuleKind.YieldAlterMergeCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider.s_alterMergeCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider.s_alterCommandOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.DMRuleKind.YieldAlterObtainerQueuesOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider.s_alterObtainerQueuesCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider.s_alterObtainerQueuesOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.DMRuleKind.YieldAddOrAlterEventHubIngestionSourceSettingsOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider.s_addOrAlterlterEventHubIngestionSourceCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider.s_addOrAlterEventHubIngestionSourceOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.DMRuleKind.YieldAlterClustersSettingsKeywordOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider.s_alterClusterSettingsCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider.s_showClusterSettingsKeywordOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.DMRuleKind.YieldAlterClustersSettingsFromKeywordOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider.s_alterClusterSettingsFromCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider.s_alterClusterSettingsFromKeywordOptions),$t.DefaultAfterApplyPolicy=($t1=new Kusto.Data.IntelliSense.ApplyPolicy,$t1.Text=\" @''\",$t1),$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.DMRuleKind.YieldCreateCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider.s_createCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider.s_createCommandOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.DMRuleKind.YieldDropCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider.s_dropCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider.s_dropCommandOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.DMRuleKind.YieldAddCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider.s_addCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider.s_addCommandOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.DMRuleKind.YieldAddOrAlterCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider.s_addOrAlterCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider.s_addOrAlterCommandOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.DMRuleKind.YieldAddDataObtainerKeyworkOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider.s_addDataObtainerCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider.s_addDataObtainerCommandOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.DMRuleKind.YieldAddDataObtainerInitializeKeyworkOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider.s_addDataObtainerInitializeCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider.s_addDataObtainerInitializeCommandOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.DMRuleKind.YieldAddDataObtainerInitializeWithKeyworkOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider.s_addDataObtainerInitializeWithCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider.s_addDataObtainerInitializeWithCommandOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.DMRuleKind.YieldGetCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider.s_getCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider.s_getCommandOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.DMRuleKind.YieldGetIngestionQueuesCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider.s_getIngestionQueuesCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider.s_getIngestionQueuesCommandOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.DMRuleKind.YieldGetIngestionQueuesTypeCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider.s_getIngestionQueuesTypeCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider.s_getIngestionQueuesTypeCommandOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.DMRuleKind.YieldFlushCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider.s_flushCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider.s_flushCommandOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.DMRuleKind.YieldInitializeCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider.s_initializeCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider.s_initializeCommandOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.DMRuleKind.YieldInitializeClusterConfigCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider.s_initializeClusterConfigCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider.s_initializeClusterConfigurationCommandOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.DMRuleKind.YieldInitializeClusterConfigEncryptionCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider.s_initializeClusterConfigEncryptionCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider.s_initializeClusterConfigurationEncryptionCommandOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.DMRuleKind.YieldResetCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider.s_resetCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider.s_resetCommandOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.DMRuleKind.YieldSetCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider.s_setCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider.s_setCommandOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.DMRuleKind.YieldPurgeShowCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider.s_showPurgesCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider.s_showPurgeCommandOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.DMRuleKind.YieldPurgeShowCommandFromKeywordOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider.s_showPurgesFromCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider.s_purgeFromCommandOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.DMRuleKind.YieldPurgeShowCommandToKeywordOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider.s_showPurgesToCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider.s_showPurgeToCommandOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.DMRuleKind.YieldPurgeTableCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider.s_purgeTableCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider.s_purgeTableCommandOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.DMRuleKind.YieldPurgeMaterializedViewTableCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider.s_purgeMaterializedViewTableCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider.s_purgeMaterializedViewTableCommandOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.DMRuleKind.YieldPurgeTableInDatabaseCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider.s_purgeTableInDatabaseCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider.s_purgeTableInDatabaseCommandOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.DMRuleKind.YieldPurgeTableRecordsInDatabaseCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider.s_purgeTableRecordsInDatabaseCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider.s_purgeTableRecordsInDatabaseCommandOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.DMRuleKind.YieldPurgeRetryCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider.s_purgeRetryCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider.s_purgeRetryCommandOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.DMRuleKind.YieldPurgeShowCommandFromKeywordOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider.s_purgesFromRetryCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider.s_purgeFromRetryCommandOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.DMRuleKind.YieldPurgeRetryCommandToKeywordOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider.s_purgesToRetryCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider.s_purgeToRetryCommandOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.DMRuleKind.YieldPurgeCancelCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider.s_cancelPurgeCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider.s_showPurgeCancelCommandOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.DMRuleKind.YieldPurgeCancelAllCommandsOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider.s_cancelAllPurgeCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider.s_showPurgeCancelAllCommandsOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.DMRuleKind.RefreshPolicyCacheCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider.s_refeshPolicyCacheRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider.s_refeshPolicyCacheOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.DMRuleKind.YieldClearCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider.s_clearCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider.s_clearCommandOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.DMRuleKind.YieldClearIngestionQueuesCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider.s_clearIngestionQueuesCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider.s_clearIngestionSupportedQueuesTypes),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t))},AnalyzeCommand$1:function(statement,cachedReference){var $t;return $t=new Kusto.Data.IntelliSense.AnalyzedCommand,$t.Command=statement,$t.Context=Kusto.Data.IntelliSense.KustoCommandContext.Empty,$t},AnalyzeCommand:function(command,appendingPart){var $t;return $t=new Kusto.Data.IntelliSense.AnalyzedCommand,$t.Command=(command.Command||\"\")+(appendingPart||\"\"),$t.Context=Kusto.Data.IntelliSense.KustoCommandContext.Empty,$t},ResetState:function(){},LoadCommandToolTips:function(){this.CommandToolTips=new(System.Collections.Generic.List$1(Kusto.Data.IntelliSense.IntelliSenseCommandTip).ctor)},UpdateProviderAvailableEntities:function(command,commandContext){}}});Bridge.ns(\"Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider\",$asm.$);Bridge.apply($asm.$.Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider,{f1:function(a){return'\"'+(a||\"\")+'\"'},f2:function(_o1){return _o1.add(Kusto.Data.IngestionQueueType.AggregatedReadyForImportQueue),_o1.add(Kusto.Data.IngestionQueueType.ReadyForAggregationQueue),_o1.add(Kusto.Data.IngestionQueueType.SecuredReadyForAggregationQueue),_o1.add(Kusto.Data.IngestionQueueType.All),_o1},f3:function(a){return'\"'+(System.Enum.toString(Kusto.Data.IngestionQueueType,a)||\"\")+'\"'}});Bridge.define(\"Kusto.Data.IntelliSense.RegexIntelliSenseRule\",{inherits:[Kusto.Data.IntelliSense.IntelliSenseRule],props:{MatchingRegex:null,Options:null,AdditionalOptions:null,RequiresFullCommand:{get:function(){return!1}},IsContextual:{get:function(){return!1}}},methods:{IsMatch:function(context,input){var isMatch=this.MatchingRegex.isMatch(input);return isMatch?!0:!1},GetOptions:function(context){var result=this.Options.Values;return Kusto.Cloud.Platform.Utils.ExtendedEnumerable.SafeFastNone$2(Kusto.Data.IntelliSense.CompletionOptionCollection,this.AdditionalOptions)?result:System.Linq.Enumerable.from(result,System.String).union(System.Linq.Enumerable.from(this.AdditionalOptions,Kusto.Data.IntelliSense.CompletionOptionCollection).selectMany($asm.$.Kusto.Data.IntelliSense.RegexIntelliSenseRule.f1))},GetCompletionOptions:function(context){var sortedCollections;return Kusto.Cloud.Platform.Utils.ExtendedEnumerable.SafeFastNone$2(Kusto.Data.IntelliSense.CompletionOptionCollection,this.AdditionalOptions)?this.Options.GetCompletionOptions():(sortedCollections=System.Linq.Enumerable.from(Bridge.fn.bind(this,$asm.$.Kusto.Data.IntelliSense.RegexIntelliSenseRule.f2)(new(System.Collections.Generic.List$1(Kusto.Data.IntelliSense.CompletionOptionCollection).ctor)),Kusto.Data.IntelliSense.CompletionOptionCollection).concat(this.AdditionalOptions).orderByDescending($asm.$.Kusto.Data.IntelliSense.RegexIntelliSenseRule.f3),sortedCollections.selectMany($asm.$.Kusto.Data.IntelliSense.RegexIntelliSenseRule.f4))}}});Bridge.ns(\"Kusto.Data.IntelliSense.RegexIntelliSenseRule\",$asm.$);Bridge.apply($asm.$.Kusto.Data.IntelliSense.RegexIntelliSenseRule,{f1:function(o){return o.Values},f2:function(_o1){return _o1.add(this.Options),_o1},f3:function(o){return o.Priority},f4:function(c){return c.GetCompletionOptions()}});Bridge.define(\"Kusto.UT.IntelliSenseRulesTests.RemoteSchemaResolverMock\",{inherits:[Kusto.Data.IntelliSense.IKustoIntelliSenseSchemaResolver],$kind:\"nested class\",fields:{s_dbMap:null,s_clusterDatabasesMap:null},alias:[\"ResolveDatabaseNames\",\"Kusto$Data$IntelliSense$IKustoIntelliSenseSchemaResolver$ResolveDatabaseNames\",\"ResolveDatabaseSchema\",\"Kusto$Data$IntelliSense$IKustoIntelliSenseSchemaResolver$ResolveDatabaseSchema\",\"ResolveDatabaseSchema$1\",\"Kusto$Data$IntelliSense$IKustoIntelliSenseSchemaResolver$ResolveDatabaseSchema$1\"],ctors:{ctor:function(){var $t,dbSchema,context,key;this.$initialize();this.s_dbMap=new(System.Collections.Generic.Dictionary$2(System.String,Kusto.Data.IntelliSense.KustoIntelliSenseDatabaseEntity).ctor);this.s_clusterDatabasesMap=new(System.Collections.Generic.Dictionary$2(System.String,System.Collections.Generic.List$1(System.String)).ctor);dbSchema=Kusto.UT.IntelliSenseRulesTests.GenerateKustoEntities(null,null);$t=Bridge.getEnumerator(System.Array.init([{Item1:\"\",Item2:\"db1\"},{Item1:\"other\",Item2:\"db2\"}],System.Tuple$2(System.String,System.String)));try{while($t.moveNext())context=$t.Current,key=(context.Item1||\"\")+\":\"+(context.Item2||\"\"),this.s_dbMap.setItem(key,System.Linq.Enumerable.from(dbSchema.Databases,Kusto.Data.IntelliSense.KustoIntelliSenseDatabaseEntity).first()),this.s_clusterDatabasesMap.containsKey(context.Item1)||this.s_clusterDatabasesMap.setItem(context.Item1,new(System.Collections.Generic.List$1(System.String).ctor)),this.s_clusterDatabasesMap.getItem(context.Item1).add(context.Item2)}finally{Bridge.is($t,System.IDisposable)&&$t.System$IDisposable$Dispose()}}},methods:{ResolveDatabaseNames:function(clusterUriOrAlias){var result={};return this.s_clusterDatabasesMap.tryGetValue(clusterUriOrAlias,result),result.v},ResolveDatabaseSchema:function(clusterUriOrAlias,databaseNameOrAlias){var key=(clusterUriOrAlias||\"\")+\":\"+(databaseNameOrAlias||\"\");return this.s_dbMap.containsKey(key)?this.s_dbMap.getItem(key):null},ResolveDatabaseSchema$1:function(clusterUriOrAlias,databaseNameOrAlias,tableName){var key=(clusterUriOrAlias||\"\")+\":\"+(databaseNameOrAlias||\"\"),databases=System.Linq.Enumerable.from(this.s_dbMap,System.Collections.Generic.KeyValuePair$2(System.String,Kusto.Data.IntelliSense.KustoIntelliSenseDatabaseEntity)).where(function(db){return System.String.startsWith(db.key,(clusterUriOrAlias||\"\")+\":\")}),keyMatcher,dbMatcher,tableMatcher,result;return(Kusto.Cloud.Platform.Utils.ExtendedEnumerable.SafeFastAny$2(System.Collections.Generic.KeyValuePair$2(System.String,Kusto.Data.IntelliSense.KustoIntelliSenseDatabaseEntity),databases)&&(Kusto.Cloud.Platform.Utils.ExtendedRegex.IsWildCardPattern(databaseNameOrAlias)?(keyMatcher=Kusto.Cloud.Platform.Utils.ExtendedRegex.TryTransformWildCardPatternToRegex(key),dbMatcher=Kusto.Cloud.Platform.Utils.ExtendedRegex.TryTransformWildCardPatternToRegex(databaseNameOrAlias),dbMatcher!=null&&(databases=databases.where(function(db){return keyMatcher.isMatch(db.key)||dbMatcher.isMatch(db.value.Name)||dbMatcher.isMatch(db.value.Alias)}))):databases=databases.where(function(db){return System.String.equals(key,db.key,5)||System.String.equals(databaseNameOrAlias,db.value.Name,5)||System.String.equals(databaseNameOrAlias,db.value.Alias,5)})),Kusto.Cloud.Platform.Utils.ExtendedEnumerable.SafeFastNone$2(System.Collections.Generic.KeyValuePair$2(System.String,Kusto.Data.IntelliSense.KustoIntelliSenseDatabaseEntity),databases))?null:(tableMatcher=null,System.String.isNullOrEmpty(tableName)||Kusto.Cloud.Platform.Utils.ExtendedRegex.IsWildCardPattern(tableName)&&(tableMatcher=Kusto.Cloud.Platform.Utils.ExtendedRegex.TryTransformWildCardPatternToRegex(tableName)),result=databases.select(function(db){var filteredDb=new Kusto.Data.IntelliSense.KustoIntelliSenseDatabaseEntity;return filteredDb.Name=db.value.Name,filteredDb.Alias=db.value.Alias,filteredDb.Tables=System.Linq.Enumerable.from(db.value.Tables,Kusto.Data.IntelliSense.KustoIntelliSenseTableEntity).where(function(t){return System.String.isNullOrEmpty(tableName)||tableMatcher==null&&Bridge.referenceEquals(tableName,t.Name)||tableMatcher!=null&&tableMatcher.isMatch(t.Name)}),filteredDb.Functions=db.value.Functions,filteredDb.IsInitialized=db.value.IsInitialized,filteredDb}),Kusto.Cloud.Platform.Utils.ExtendedEnumerable.SafeFastNone$2(Kusto.Data.IntelliSense.KustoIntelliSenseDatabaseEntity,result))?null:result}}});Bridge.define(\"Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider\",{inherits:[Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider],statics:{fields:{s_showCommandRegex:null,s_setCommandRegex:null,s_addCommandRegex:null,s_alterCommandRegex:null,s_alterMergeCommandRegex:null,s_deleteCommandRegex:null,s_createCommandRegex:null,s_dropCommandRegex:null,s_moveCommandRegex:null,s_attachCommandRegex:null,s_replaceCommandRegex:null,s_ingestionDuplicationCommandRegex:null,s_createOrAlterCommandRegex:null,s_purgeCommandRegex:null,s_purgeCleanupCommandRegex:null,s_runCommandRegex:null,s_suspendCommandRegex:null,s_createDatabaseCommandRegex:null,s_createDatabaseCommandEndingRegex:null,s_showDatabaseCommandRegex:null,s_showBasicAuthCommandRegex:null,s_showDatabasePrincipalsCommandRegex:null,s_showDatabasesCommandRegex:null,s_showClusterCommandRegex:null,s_showPrincipalCommandRegex:null,s_showFabricCommandRegex:null,s_suspendFabricNodeCommandRegex:null,s_suspendFabricNodeCommandWithDurationRegex:null,s_addClusterAdminsUsersViewersDatabaseCreatorsBlockedPrincipalsCommandRegex:null,s_setClusterAdminsUsersViewersDatabaseCreatorsBlockedPrincipalsCommandRegex:null,s_addClusterBlockedPrincipalsCommandRegex:null,s_setClusterAdminsNoneCommandRegex:null,s_setClusterUsersNoneCommandRegex:null,s_setClusterViewersNoneCommandRegex:null,s_setClusterDatabaseCreatorsNoneCommandRegex:null,s_dropClusterAdminsUsersViewersDatabaseCreatorsCommandRegex:null,s_showTableOptionsCommandRegex:null,s_setDatabaseCommandRegex:null,s_addDatabaseCommandRegex:null,s_dropDatabaseCommandRegex:null,s_anySimpleSyntaxActionTableCommandRegex:null,s_anySimpleSyntaxActionFunctionCommandRegex:null,s_dropExtentTagsCommandRegex:null,s_alterExtentTagsCommandRegex:null,s_attachExtentsCommandRegex:null,s_attachExtentsIntoTableCommandRegex:null,s_attachExtentsIntoSpecifiedTableCommandRegex:null,s_moveExtentsCommandRegex:null,s_moveSpecifiedExtentsCommandRegex:null,s_moveExtentsFromSpecifiedTableCommandRegex:null,s_moveExtentsFromTableCommandRegex:null,s_moveExtentsToTableCommandRegex:null,s_replaceExtentsCommandRegex:null,s_replaceExtentsInTableCommandRegex:null,s_showExtentsInSpecifiedEntityCommandRegex:null,s_showExtentsInSpecifiedEntityWithTagFiltersCommandRegex:null,s_dropExtentTagsFromTableCommandRegex:null,s_setDatabaseAdminsUsersViewersPrettyNameCommandRegex:null,s_addDatabaseAdminsUsersViewersCommandRegex:null,s_dropDatabasePropertyCommandRegex:null,s_setTableAdminsCommandRegex:null,s_addTableAdminsCommandRegex:null,s_createTableEntitiesCommandRegex:null,s_alterTableEntitiesCommandRegex:null,s_alterMergeTableEntitiesCommandRegex:null,s_dropTableEntitiesCommandRegex:null,s_deleteTableEntitiesCommandRegex:null,s_dropTableColumnsSyntaxCommandRegex:null,s_alterFunctionEntitiesCommandRegex:null,s_setDatabaseAdminsNoneCommandRegex:null,s_setDatabaseUsersNoneCommandRegex:null,s_setDatabaseViewersNoneCommandRegex:null,s_setDatabaseIngestorsNoneCommandRegex:null,s_setTableAdminsNoneCommandRegex:null,s_setTableIngestorsNoneCommandRegex:null,s_appendTableCommandRegex:null,s_setOrAppendReplaceTableCommandRegex:null,s_clusterPolicyRegex:null,s_alterDatabaseRegex:null,s_databasePolicyRegex:null,s_tablePolicyRegex:null,s_columnPolicyRegex:null,s_policyCommandOnDatabase:null,s_policyCommand:null,s_alterMultiplePoliciesRegex:null,s_deleteMultiplePoliciesRegex:null,s_exportCommandRegex:null,s_exportCommandWithModifiersToRegex:null,s_exportCommandNoModifiersToRegex:null,s_duplicateIngestionIntoRegex:null,s_purgeWhatIfRegex:null,s_purgeWithPropertiesRegex:null,s_purgeTableRegex:null,s_purgeSpecifiedTableRegex:null,s_alterMergePolicyRetentionRegex:null,s_alterMergePolicyRetentionSoftDeleteDefinedRegex:null,s_alterMergePolicyRetentionOptionsRegex:null,s_createRowstoreCommandRegex:null,s_createRowstoreCommandEndingRegex:null,s_adminOperationOptions:null,s_showCommandOptions:null,s_clusterShowKeywordOptions:null,s_tableShowKeywordOptions:null,s_setAddCommandsOptions:null,s_dropCommandsOptions:null,s_runCommandOptions:null,s_suspendCommandOptions:null,s_attachCommandsOptions:null,s_moveCommandsOptions:null,s_replaceCommandsOptions:null,s_dropExtentTagsCommandsOptions:null,s_attachExtentsCommandsOptions:null,s_attachExtentsIntoSpecifedTableCommandsOptions:null,s_moveExtentsCommandsOptions:null,s_moveSpecifiedExtentsCommandsOptions:null,s_moveExtentsFromTableCommandsOptions:null,s_showExtentsByEntityCommandsOptions:null,s_showExtentsByEntityWithTagFiltersCommandsOptions:null,s_replaceExtentsCommandsOptions:null,s_alterCommandOptions:null,s_alterMergeAndDeleteCommandOptions:null,s_createCommandOptions:null,s_setUsersAdminsPrettyNameKeywordOptions:null,s_addSetDropUsersAdminsKeywordOptions:null,s_dropDatabaseKeywordOptions:null,s_setUsersAdminsViewersDatabaseCreatorsKeywordOptions:null,s_addDropUsersAdminsViewersDbCreatorsBlockedKeywordOptions:null,s_addClusterBlockedPrincipalsApplicationKeywordOptions:null,s_showBasicAuthUsersKeywordOptions:null,s_AddSetAdminsKeywordOptions:null,s_createTableEntitiesKeywordOptions:null,s_alterTableEntitiesKeywordOptions:null,s_alterMergeTableEntitiesKeywordOptions:null,s_dropTableEntitiesKeywordOptions:null,s_deleteTableEntitiesKeywordOptions:null,s_alterFunctionEntitiesKeywordOptions:null,s_DropColumnsSyntaxKeywordOptions:null,s_setNoneKeywordOptions:null,s_clusterPoliciesOptions:null,s_databasePoliciesOptions:null,s_tablePoliciesOptions:null,s_columnPoliciesOptions:null,s_multiplePoliciesOptions:null,s_multipleDeletionPoliciesOptions:null,s_databasePersistencyOptions:null,s_rowstorePersistencyOptions:null,s_ifNotExistsOptions:null,s_policyKeywordOptions:null,s_principalsPolicySchemaAndExtentsKeywordOptions:null,s_databasesShowKeywordOptions:null,s_exportFileFormatOptions:null,s_exportCommandOptions:null,s_alterDatabaseCommandOptions:null,s_duplicateIngestionCommandsOptions:null,s_purgeWhatIfCommandOptions:null,s_purgeTableCommandsOptions:null,s_purgeCleanupCommandsOptions:null,s_purgeCommandsOptions:null,s_purgeWithPropertiesCommandsOptions:null,s_showPrincipalKeywordOptions:null,s_showFabricKeywordOptions:null,s_alterMergePolicyRetentionOptions:null,s_alterMergePolicyRetentionSoftDeleteDefinedOptions:null,s_timeSpanPolicyOptions:null,s_createOrAlterOptions:null,s_suspendFabricNodeOptions:null,s_suspendFabricNodeOptionalOptions:null},ctors:{init:function(){this.s_showCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.show\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_setCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.set\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_addCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.add\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_alterCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.alter\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_alterMergeCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.alter-merge\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_deleteCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.delete\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_createCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.create\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_dropCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.drop\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_moveCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.move\\\\s+(async\\\\s+)?$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_attachCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.attach\\\\s+(async\\\\s+)?$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_replaceCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.replace\\\\s+(async\\\\s+)?$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_ingestionDuplicationCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.dup-next-(failed-)?ingest\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_createOrAlterCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.create-or-alter\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_purgeCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.purge\\\\s+(async\\\\s+)?$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_purgeCleanupCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.purge-cleanup\\\\s+(async\\\\s+)?$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_runCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.run\\\\s+(async\\\\s+)?$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_suspendCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.suspend\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_createDatabaseCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.create\\\\s+database\\\\s+\\\\w+\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_createDatabaseCommandEndingRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.create\\\\s+database\\\\s+\\\\w+\\\\s+(persist\\\\s+\\\\(.+\\\\)|volatile)\\\\s$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_showDatabaseCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.show\\\\s+database\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_showBasicAuthCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.show\\\\s+basicauth\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_showDatabasePrincipalsCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.show\\\\s+database\\\\s+(\\\\w+|(\\\\[.+?\\\\]))\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_showDatabasesCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.show\\\\s+databases\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_showClusterCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.show\\\\s+cluster\\\\s$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_showPrincipalCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.show\\\\s+principal\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_showFabricCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.show\\\\s+fabric\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_suspendFabricNodeCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.suspend\\\\s+fabric\\\\s+node\\\\s+\\\\S+\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_suspendFabricNodeCommandWithDurationRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.suspend\\\\s+fabric\\\\s+node\\\\s+\\\\S+\\\\s+for\\\\s+\\\\d+\\\\w+\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_addClusterAdminsUsersViewersDatabaseCreatorsBlockedPrincipalsCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.add\\\\s+cluster\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_setClusterAdminsUsersViewersDatabaseCreatorsBlockedPrincipalsCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.set\\\\s+cluster\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_addClusterBlockedPrincipalsCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.add\\\\s+cluster\\\\s+blockedprincipals\\\\s+('(.*?)'|\\\"(.*?)\\\")\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_setClusterAdminsNoneCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.set\\\\s+cluster\\\\s+admins\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_setClusterUsersNoneCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.set\\\\s+cluster\\\\s+users\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_setClusterViewersNoneCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.set\\\\s+cluster\\\\s+viewers\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_setClusterDatabaseCreatorsNoneCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.set\\\\s+cluster\\\\s+databasecreators\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_dropClusterAdminsUsersViewersDatabaseCreatorsCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.drop\\\\s+cluster\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_showTableOptionsCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.show\\\\s+table\\\\s+\\\\w+\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_setDatabaseCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.set\\\\s+database\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_addDatabaseCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.add\\\\s+database\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_dropDatabaseCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.drop\\\\s+database\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_anySimpleSyntaxActionTableCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.(show|create|add|set|alter|alter-merge|drop|delete)\\\\s+table\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_anySimpleSyntaxActionFunctionCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.(show|alter|drop)\\\\s+function\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_dropExtentTagsCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.drop\\\\s+extent\\\\s+tags\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_alterExtentTagsCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.alter\\\\s+extent\\\\s+tags\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_attachExtentsCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.attach\\\\s+(async\\\\s+)?extents\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_attachExtentsIntoTableCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.attach\\\\s+(async\\\\s+)?extents\\\\s+into\\\\s+table\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_attachExtentsIntoSpecifiedTableCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.attach\\\\s+(async\\\\s+)?extents\\\\s+into\\\\s+table\\\\s+\\\\S+\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_moveExtentsCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.move\\\\s+(async\\\\s+)?extents\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_moveSpecifiedExtentsCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.move\\\\s+(async\\\\s+)?extents\\\\s+([A-Za-z0-9(),.-]+)\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_moveExtentsFromSpecifiedTableCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.move\\\\s+(async\\\\s+)?extents\\\\s+([A-Za-z0-9(),.-]+)\\\\s+from\\\\s+table\\\\s+\\\\S+\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_moveExtentsFromTableCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.move\\\\s+(async\\\\s+)?extents\\\\s+([A-Za-z0-9(),.-]+)\\\\s+from\\\\s+table\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_moveExtentsToTableCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.move\\\\s+(async\\\\s+)?extents\\\\s+([A-Za-z0-9(),.-]+)\\\\s+from\\\\s+table\\\\s+\\\\S+\\\\s+to\\\\s+table\\\\s+$|^\\\\s*\\\\.move\\\\s+(async\\\\s+)?extents\\\\s+to\\\\s+table\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_replaceExtentsCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.replace\\\\s+(async\\\\s+)?extents\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_replaceExtentsInTableCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.replace\\\\s+(async\\\\s+)?extents\\\\s+in\\\\s+table\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_showExtentsInSpecifiedEntityCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.show\\\\s+(database|table)\\\\s+\\\\S+\\\\s+extents\\\\s+(hot\\\\s+)?$|^\\\\s*\\\\.show\\\\s+cluster\\\\s+extents\\\\s+(hot\\\\s+)?$|^\\\\s*\\\\.show\\\\s+tables\\\\s+\\\\([^)]+\\\\)\\\\s+extents\\\\s+(hot\\\\s+)?$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_showExtentsInSpecifiedEntityWithTagFiltersCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.show\\\\s+((database\\\\s+\\\\S+)|(table\\\\s+\\\\S+)|(tables\\\\s+\\\\([^)]+\\\\))|(cluster))\\\\s+extents\\\\s+(hot\\\\s+)?where\\\\s+tags\\\\s+((has|!has|contains|!contains)\\\\s+\\\\S+\\\\s+and\\\\s+tags\\\\s+)*$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_dropExtentTagsFromTableCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.drop\\\\s+extent\\\\s+tags\\\\s+from\\\\s+table\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_setDatabaseAdminsUsersViewersPrettyNameCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.set\\\\s+database\\\\s+\\\\w+\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_addDatabaseAdminsUsersViewersCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.add\\\\s+database\\\\s+\\\\w+\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_dropDatabasePropertyCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.drop\\\\s+database\\\\s+\\\\S+\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_setTableAdminsCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.set\\\\s+table\\\\s+\\\\w+\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_addTableAdminsCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.add\\\\s+table\\\\s+\\\\w+\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_createTableEntitiesCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.create\\\\s+table\\\\s+\\\\w+\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_alterTableEntitiesCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.alter\\\\s+table\\\\s+\\\\w+\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_alterMergeTableEntitiesCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.alter-merge\\\\s+table\\\\s+\\\\w+\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_dropTableEntitiesCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.drop\\\\s+table\\\\s+\\\\w+\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_deleteTableEntitiesCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.delete\\\\s+table\\\\s+\\\\w+\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_dropTableColumnsSyntaxCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.drop\\\\s+table\\\\s+\\\\w+\\\\s+columns\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_alterFunctionEntitiesCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.alter\\\\s+function\\\\s+\\\\w+\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_setDatabaseAdminsNoneCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.set\\\\s+database\\\\s+\\\\w+\\\\s+admins\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_setDatabaseUsersNoneCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.set\\\\s+database\\\\s+\\\\w+\\\\s+users\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_setDatabaseViewersNoneCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.set\\\\s+database\\\\s+\\\\w+\\\\s+viewers\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_setDatabaseIngestorsNoneCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.set\\\\s+database\\\\s+\\\\w+\\\\s+ingestors\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_setTableAdminsNoneCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.set\\\\s+table\\\\s+\\\\w+\\\\s+admins\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_setTableIngestorsNoneCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.set\\\\s+table\\\\s+\\\\w+\\\\s+ingestors\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_appendTableCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.append\\\\s+(async\\\\s+)?$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_setOrAppendReplaceTableCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.(set-or-append|set-or-replace)\\\\s+(async\\\\s+)?$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_clusterPolicyRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.(show|alter|alter-merge|delete)\\\\s+cluster\\\\s+policy\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_alterDatabaseRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.alter\\\\s+database\\\\s+\\\\S+\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_databasePolicyRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.(show|alter|alter-merge|delete)\\\\s+database\\\\s+\\\\S+\\\\s+policy\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_tablePolicyRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.(show|alter|alter-merge|delete)\\\\s+table\\\\s+\\\\S+\\\\s+policy\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_columnPolicyRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.(show|alter|alter-merge|delete)\\\\s+column\\\\s+\\\\S+\\\\s+policy\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_policyCommandOnDatabase=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.(show|alter|alter-merge|delete)\\\\s+database\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_policyCommand=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.(alter|alter-merge|delete)\\\\s+column\\\\s+\\\\S+\\\\s+$|^\\\\s*\\\\.(alter|alter-merge|delete)\\\\s+cluster\\\\s+$|^\\\\s*\\\\.(alter-merge|delete)\\\\s+database\\\\s+\\\\S+\\\\s+$|^\\\\s*\\\\.show\\\\s+column\\\\s+\\\\S+\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_alterMultiplePoliciesRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.alter\\\\s+policies\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_deleteMultiplePoliciesRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.delete\\\\s+policies\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_exportCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.export\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_exportCommandWithModifiersToRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.export\\\\s+(async|async compressed|compressed)\\\\s+to\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_exportCommandNoModifiersToRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.export\\\\s+to\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_duplicateIngestionIntoRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.dup-next-(failed-)?ingest\\\\s+into\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_purgeWhatIfRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.purge\\\\s+(async\\\\s+)?whatif\\\\s*=\\\\s*$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_purgeWithPropertiesRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.purge\\\\s+(async\\\\s+)?whatif\\\\s*=\\\\s*\\\\S+\\\\s+(maxRecords\\\\s*=\\\\s*\\\\d+\\\\s+)?$|^\\\\s*\\\\.purge\\\\s+(async\\\\s+)?maxRecords\\\\s*=\\\\s*\\\\d+\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_purgeTableRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.purge\\\\s+(async\\\\s+)?(whatif\\\\s*=\\\\s*\\\\S+\\\\s+)?(maxRecords\\\\s*=\\\\s*\\\\d+\\\\s+)?table\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_purgeSpecifiedTableRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.purge\\\\s+(async\\\\s+)?(whatif\\\\s*=\\\\s*\\\\S+\\\\s+)?(maxRecords\\\\s*=\\\\s*\\\\d+\\\\s+)?table\\\\s+\\\\S+\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_alterMergePolicyRetentionRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.(alter-merge)\\\\s+(database|table)\\\\s+\\\\S+\\\\s+policy\\\\s+retention\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_alterMergePolicyRetentionSoftDeleteDefinedRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.(alter-merge)\\\\s+(database|table)\\\\s+\\\\S+\\\\s+policy\\\\s+retention\\\\s+softdelete\\\\s*=\\\\s*\\\\S+\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_alterMergePolicyRetentionOptionsRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.(alter-merge)\\\\s+(database|table)\\\\s+\\\\S+\\\\s+policy\\\\s+retention\\\\s+((softdelete\\\\s*=\\\\s*\\\\S+\\\\s+harddelete)|((soft|hard)delete))\\\\s*=\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_createRowstoreCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.create\\\\s+rowstore\\\\s+\\\\w+\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_createRowstoreCommandEndingRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.create\\\\s+rowstore\\\\s+\\\\w+\\\\s+(writeaheadlog\\\\s+\\\\(.+\\\\)|volatile)\\\\s$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_adminOperationOptions=System.Array.init([\"show\",\"alter\",\"alter-merge\",\"append\",\"attach\",\"suspend\",\"create\",\"delete\",\"detach\",\"drop\",\"rename\",\"set-or-append\",\"set-or-replace\",\"set\",\"export\",\"move\",\"replace\",\"create-or-alter\",\"dup-next-ingest\",\"dup-next-failed-ingest\",\"seal table\",\"purge\",\"purge-cleanup\",\"run\"],System.String);this.s_showCommandOptions=System.Linq.Enumerable.from(System.Array.init([\"basicauth\",\"cache\",\"capacity\",\"cluster\",\"column\",\"database\",\"databases\",\"diagnostics\",\"extentcontainers\",\"fabric\",\"function\",\"functions\",\"ingestion failures\",\"journal\",\"memory\",\"operations\",\"schema\",\"table\",\"tables\",\"version\",\"queries\",\"commands\",\"commands-and-queries\",\"principal\",\"rowstores\",\"rowstore\",\"rowstore transactions\",\"rowstore seals\",\"external tables\",\"external table\",\"continuous-exports\",\"continuous-export\",\"stored_query_results\"],System.String),System.String).orderBy($asm.$.Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.f1).ToArray(System.String);this.s_clusterShowKeywordOptions=System.Array.init([\"principals\",\"policy\",\"extents\",\"monitoring\",\"journal\",\"blockedprincipals\",\"databases\",\" \"],System.String);this.s_tableShowKeywordOptions=System.Array.init([\"principals\",\"policy\",\"extents\",\"ingestion csv mappings\",\"ingestion json mappings\",\"ingestion avro mappings\",\"ingestion apacheavro mappings\",\"ingestion parquet mappings\",\"ingestion orc mappings\",\"ingestion w3clogfile mappings\",\"ingestion mappings\",\"rowstores\",\"rowstore_references\",\" \"],System.String);this.s_setAddCommandsOptions=System.Array.init([\"database\",\"cluster\",\"table\",\"async\"],System.String);this.s_dropCommandsOptions=System.Array.init([\"database\",\"cluster\",\"table\",\"tables\",\"function\",\"column\",\"extent tags\",\"extent\",\"extents\",\"rowstore\",\"external table\",\"continuous-export\"],System.String);this.s_runCommandOptions=System.Array.init([\"continuous-export\"],System.String);this.s_suspendCommandOptions=System.Array.init([\"fabric node\"],System.String);this.s_attachCommandsOptions=System.Array.init([\"extents\"],System.String);this.s_moveCommandsOptions=System.Array.init([\"extents\"],System.String);this.s_replaceCommandsOptions=System.Array.init([\"extents\"],System.String);this.s_dropExtentTagsCommandsOptions=System.Array.init([\"from table\"],System.String);this.s_attachExtentsCommandsOptions=System.Array.init([\"into table\",\"by metadata\"],System.String);this.s_attachExtentsIntoSpecifedTableCommandsOptions=System.Array.init([\"by metadata\"],System.String);this.s_moveExtentsCommandsOptions=System.Array.init([\"all\",\"(GUID,...,GUID)\",\"to table\"],System.String);this.s_moveSpecifiedExtentsCommandsOptions=System.Array.init([\"from table\"],System.String);this.s_moveExtentsFromTableCommandsOptions=System.Array.init([\"to table\"],System.String);this.s_showExtentsByEntityCommandsOptions=System.Array.init([\"hot\",\"where tags\"],System.String);this.s_showExtentsByEntityWithTagFiltersCommandsOptions=System.Array.init([\"has\",\"!has\",\"contains\",\"!contains\"],System.String);this.s_replaceExtentsCommandsOptions=System.Array.init([\"in table\"],System.String);this.s_alterCommandOptions=System.Array.init([\"cluster\",\"column\",\"database\",\"function\",\"table\",\"policies\",\"extent tags\",\"external table\"],System.String);this.s_alterMergeAndDeleteCommandOptions=System.Array.init([\"cluster\",\"column\",\"database\",\"table\"],System.String);this.s_createCommandOptions=System.Array.init([\"database\",\"function\",\"table\",\"rowstore\",\"external table\"],System.String);this.s_setUsersAdminsPrettyNameKeywordOptions=System.Array.init([\"users\",\"admins\",\"viewers\",\"ingestors\",\"monitors\",\"prettyname\"],System.String);this.s_addSetDropUsersAdminsKeywordOptions=System.Array.init([\"users\",\"admins\",\"viewers\",\"ingestors\",\"monitors\"],System.String);this.s_dropDatabaseKeywordOptions=System.Array.init([\"users\",\"admins\",\"viewers\",\"ingestors\",\"monitors\",\"prettyname\"],System.String);this.s_setUsersAdminsViewersDatabaseCreatorsKeywordOptions=System.Array.init([\"users\",\"admins\",\"viewers\",\"databasecreators\"],System.String);this.s_addDropUsersAdminsViewersDbCreatorsBlockedKeywordOptions=System.Array.init([\"users\",\"admins\",\"viewers\",\"databasecreators\",\"blockedprincipals\"],System.String);this.s_addClusterBlockedPrincipalsApplicationKeywordOptions=System.Array.init([\"application\",\"user\",\"period\",\"reason\"],System.String);this.s_showBasicAuthUsersKeywordOptions=System.Array.init([\"users\"],System.String);this.s_AddSetAdminsKeywordOptions=System.Array.init([\"admins\",\"ingestors\"],System.String);this.s_createTableEntitiesKeywordOptions=System.Array.init([\"ingestion csv mapping\",\"ingestion json mapping\",\"ingestion avro mapping\",\"ingestion apacheavro mapping\",\"ingestion parquet mapping\",\"ingestion orc mapping\",\"ingestion w3clogfile mapping\"],System.String);this.s_alterTableEntitiesKeywordOptions=System.Array.init([\"ingestion csv mapping\",\"ingestion json mapping\",\"ingestion avro mapping\",\"ingestion apacheavro mapping\",\"ingestion parquet mapping\",\"ingestion orc mapping\",\"ingestion w3clogfile mapping\",\"docstring\",\"folder\",\"column-docstrings\",\"policy\"],System.String);this.s_alterMergeTableEntitiesKeywordOptions=System.Array.init([\"column-docstrings\",\"policy\"],System.String);this.s_dropTableEntitiesKeywordOptions=System.Array.init([\"admins\",\"ingestors\",\"columns\",\"ingestion csv mapping\",\"ingestion json mapping\",\"ingestion avro mapping\",\"ingestion apacheavro mapping\",\"ingestion parquet mapping\",\"ingestion orc mapping\",\"ingestion w3clogfile mapping\"],System.String);this.s_deleteTableEntitiesKeywordOptions=System.Array.init([\"policy\"],System.String);this.s_alterFunctionEntitiesKeywordOptions=System.Array.init([\"docstring\",\"folder\"],System.String);this.s_DropColumnsSyntaxKeywordOptions=System.Array.init([\"(COLUMN1,COLUMN2)\"],System.String);this.s_setNoneKeywordOptions=System.Array.init([\"none\"],System.String);this.s_clusterPoliciesOptions=System.Array.init([\"caching\",\"capacity\",\"rowstore\",\"callout\",\"query_weak_consistency\",\"streamingingestion\"],System.String);this.s_databasePoliciesOptions=System.Array.init([\"caching\",\"encoding\",\"merge\",\"retention\",\"sharding\",\"streamingingestion\",\"ingestionbatching\"],System.String);this.s_tablePoliciesOptions=System.Array.init([\"caching\",\"encoding\",\"merge\",\"ingestiontime\",\"retention\",\"roworder\",\"update\",\"sharding\",\"streamingingestion\",\"restricted_view_access\",\"ingestionbatching\",\"partitioning\"],System.String);this.s_columnPoliciesOptions=System.Array.init([\"caching\",\"encoding\"],System.String);this.s_multiplePoliciesOptions=System.Array.init([\"of retention\",\"of encoding\"],System.String);this.s_multipleDeletionPoliciesOptions=System.Array.init([\"of retention\"],System.String);this.s_databasePersistencyOptions=System.Array.init([\"persist\",\"volatile\"],System.String);this.s_rowstorePersistencyOptions=System.Array.init([\"writeaheadlog\",\"volatile\"],System.String);this.s_ifNotExistsOptions=System.Array.init([\"ifnotexists\",\" \"],System.String);this.s_policyKeywordOptions=System.Array.init([\"policy\"],System.String);this.s_principalsPolicySchemaAndExtentsKeywordOptions=System.Array.init([\"principals\",\"policy\",\"schema\",\"extents\",\"journal\",\"purge operations\",\" \"],System.String);this.s_databasesShowKeywordOptions=System.Array.init([\"identity\",\"policies\",\"datastats\",\" \"],System.String);this.s_exportFileFormatOptions=System.Array.init([\"csv\",\"tsv\",\"json\",\"sql\",\"parquet\"],System.String);this.s_exportCommandOptions=System.Array.init([\"async compressed\",\"async\",\"compressed\",\" \"],System.String);this.s_alterDatabaseCommandOptions=System.Array.init([\"policy\",\"persist metadata\",\"prettyname\"],System.String);this.s_duplicateIngestionCommandsOptions=System.Array.init([\"into\"],System.String);this.s_purgeWhatIfCommandOptions=System.Array.init([\"info\",\"stats\",\"purge\",\"retain\"],System.String);this.s_purgeTableCommandsOptions=System.Array.init([\"records\"],System.String);this.s_purgeCleanupCommandsOptions=System.Array.init([\"until=\"],System.String);this.s_purgeCommandsOptions=System.Array.init([\"whatif =\",\"maxRecords =\",\"table\"],System.String);this.s_purgeWithPropertiesCommandsOptions=System.Array.init([\"table\"],System.String);this.s_showPrincipalKeywordOptions=System.Array.init([\"access\",\"roles\",\"@'principal' roles\"],System.String);this.s_showFabricKeywordOptions=System.Array.init([\"clocks\",\"locks\",\"cache\",\"nodes\",\"services\"],System.String);this.s_alterMergePolicyRetentionOptions=System.Array.init([\"softdelete\",\"harddelete\"],System.String);this.s_alterMergePolicyRetentionSoftDeleteDefinedOptions=System.Array.init([\"harddelete\"],System.String);this.s_timeSpanPolicyOptions=System.Array.init([\"1d\",\"7d\",\"30d\",\"90d\",\"365d\"],System.String);this.s_createOrAlterOptions=System.Array.init([\"function\",\"continuous-export\"],System.String);this.s_suspendFabricNodeOptions=System.Array.init([\"for\"],System.String);this.s_suspendFabricNodeOptionalOptions=System.Array.init([\"reason\"],System.String)}}},fields:{s_afterCreateDatabaseApplyPolicies:null,s_afterAlterDatabaseApplyPolicies:null,s_afterCreateRowStoreApplyPolicies:null,s_afterExportFile:null},ctors:{init:function(){this.s_afterCreateDatabaseApplyPolicies=$asm.$.Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.f2(new(System.Collections.Generic.Dictionary$2(System.String,Kusto.Data.IntelliSense.ApplyPolicy).ctor));this.s_afterAlterDatabaseApplyPolicies=$asm.$.Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.f3(new(System.Collections.Generic.Dictionary$2(System.String,Kusto.Data.IntelliSense.ApplyPolicy).ctor));this.s_afterCreateRowStoreApplyPolicies=$asm.$.Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.f4(new(System.Collections.Generic.Dictionary$2(System.String,Kusto.Data.IntelliSense.ApplyPolicy).ctor));this.s_afterExportFile=$asm.$.Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.f5(new(System.Collections.Generic.Dictionary$2(System.String,Kusto.Data.IntelliSense.ApplyPolicy).ctor))},$ctor1:function(cluster,schema,queryParameters,availableClusters,schemaResolver,allowQueryParameters,allowClientDirectives){queryParameters===void 0&&(queryParameters=null);availableClusters===void 0&&(availableClusters=null);schemaResolver===void 0&&(schemaResolver=null);allowQueryParameters===void 0&&(allowQueryParameters=!1);allowClientDirectives===void 0&&(allowClientDirectives=!1);this.$initialize();Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.$ctor1.call(this,cluster,schema,queryParameters,availableClusters,schemaResolver,allowQueryParameters,allowClientDirectives);this.LoadRules$1()},ctor:function(other){this.$initialize();Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.ctor.call(this,other);this.LoadRules$1()}},methods:{Clone$1:function(){return new Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.ctor(this)},LoadRules$1:function(){Kusto.Cloud.Platform.Utils.ExtendedEnumerable.SafeFastAny$2(System.String,this.TableNames)&&this.AddTableControlCommands();Kusto.Cloud.Platform.Utils.ExtendedEnumerable.SafeFastAny$2(System.String,this.FunctionNames)&&this.AddFunctionControlCommands();this.AddControlCommandKeywords();this.AddPolicyControlCommands();this.AddMultiplePoliciesControlCommands();this.DeleteMultiplePoliciesControlCommands();this.AddPermissionsControlCommands();this.AddDatabaseCreateCommands();this.AddExportControlCommand();this.AddSuspendNodeControlCommand();Kusto.Cloud.Platform.Utils.ExtendedEnumerable.SafeFastAny$2(Kusto.Data.IntelliSense.KustoIntelliSenseDatabaseEntity,this.Databases)&&this.AddDatabaseControlCommands(this.Databases);this.AddDatabasesShowControlCommands();this.AddAddDropControlCommandKeywords();this.AddRowStoreControlCommands()},AddDatabaseCreateCommands:function(){var $t;this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldDatabaseCreatePersistencyOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_createDatabaseCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_databasePersistencyOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t.AfterApplyPolicies=this.s_afterCreateDatabaseApplyPolicies,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldCreateIfNotExistsOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_createDatabaseCommandEndingRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_ifNotExistsOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t))},AddControlCommandKeywords:function(){var $t;this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldAdminCommandsOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_lineWithDotBeginningRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Command,Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_adminOperationOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldShowCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_showCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_showCommandOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldShowPrincipalCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_showPrincipalCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_showPrincipalKeywordOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldShowFabricOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_showFabricCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_showFabricKeywordOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t))},AddExportControlCommand:function(){var $t,$t1;this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldExportCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_exportCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_exportCommandOptions),$t.DefaultAfterApplyPolicy=($t1=new Kusto.Data.IntelliSense.ApplyPolicy,$t1.Text=\" to \",$t1),$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldExportCommandWithModifiersAndOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_exportCommandWithModifiersToRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_exportFileFormatOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t.AfterApplyPolicies=this.s_afterExportFile,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldExportCommandNoModifiersAndOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_exportCommandNoModifiersToRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_exportFileFormatOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t.AfterApplyPolicies=this.s_afterExportFile,$t))},AddSuspendNodeControlCommand:function(){var $t;this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldSuspendNodeControlCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_suspendFabricNodeCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_suspendFabricNodeOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldSuspendNodeControlCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_suspendFabricNodeCommandWithDurationRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_suspendFabricNodeOptionalOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t))},AddPermissionsControlCommands:function(){var $t;this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldShowBasicAuthOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_showBasicAuthCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_showBasicAuthUsersKeywordOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldShowClusterPrincipalsOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_showClusterCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_clusterShowKeywordOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldSetClusterAdminsUsersViewersDatabaseCreatorsOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_setClusterAdminsUsersViewersDatabaseCreatorsBlockedPrincipalsCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_setUsersAdminsViewersDatabaseCreatorsKeywordOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldAddClusterAdminsUsersViewersDatabaseCreatorsBlockedPrincipalsOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_addClusterAdminsUsersViewersDatabaseCreatorsBlockedPrincipalsCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_addDropUsersAdminsViewersDbCreatorsBlockedKeywordOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldDropClusterAdminsUsersViewersDatabaseCreatorsBlockedPrincipalsOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_dropClusterAdminsUsersViewersDatabaseCreatorsCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_addDropUsersAdminsViewersDbCreatorsBlockedKeywordOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldAddClusterBlockedPrincipalsOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_addClusterBlockedPrincipalsCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_addClusterBlockedPrincipalsApplicationKeywordOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldSetClusterUsersNoneOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_setClusterUsersNoneCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_setNoneKeywordOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldSetClusterAdminsNoneOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_setClusterAdminsNoneCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_setNoneKeywordOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldSetClusterViewersNoneOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_setClusterViewersNoneCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_setNoneKeywordOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldSetClusterDatabaseCreatorsNoneOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_setClusterDatabaseCreatorsNoneCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_setNoneKeywordOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t))},AddPolicyControlCommands:function(){var $t;this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldPoliciesOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_policyCommand,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_policyKeywordOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldClusterPoliciesOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_clusterPolicyRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Policy,Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_clusterPoliciesOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldDatabasePoliciesOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_databasePolicyRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Policy,Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_databasePoliciesOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldTablePoliciesOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_tablePolicyRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Policy,Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_tablePoliciesOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldColumnPoliciesOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_columnPolicyRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Policy,Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_columnPoliciesOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t))},AddMultiplePoliciesControlCommands:function(){var $t;this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldMultiplePoliciesOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_alterMultiplePoliciesRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Policy,Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_multiplePoliciesOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t))},DeleteMultiplePoliciesControlCommands:function(){var $t;this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldDeleteMultiplePoliciesOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_deleteMultiplePoliciesRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Policy,Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_multipleDeletionPoliciesOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t))},AddDatabasesShowControlCommands:function(){var $t;this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldShowDatabasesOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_showDatabasesCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Policy,Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_databasesShowKeywordOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t))},AddDatabaseControlCommands:function(databases){var $t,orderedDatabases;this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldShowDatabasePrincipalsPoliciesAndSchemaOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_showDatabasePrincipalsCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_principalsPolicySchemaAndExtentsKeywordOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldSetDatabaseAdminsUsersViewersPrettyNameOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_setDatabaseAdminsUsersViewersPrettyNameCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_setUsersAdminsPrettyNameKeywordOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldAddDatabaseAdminsUsersViewersOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_addDatabaseAdminsUsersViewersCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_addSetDropUsersAdminsKeywordOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldDropDatabaseOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_dropDatabasePropertyCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_dropDatabaseKeywordOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldSetDatabaseUsersNoneOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_setDatabaseUsersNoneCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_setNoneKeywordOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldSetDatabaseAdminsNoneOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_setDatabaseAdminsNoneCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_setNoneKeywordOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldSetDatabaseViewersNoneOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_setDatabaseViewersNoneCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_setNoneKeywordOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldSetDatabaseIngestorsNoneOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_setDatabaseIngestorsNoneCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_setNoneKeywordOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));orderedDatabases=System.Linq.Enumerable.from(databases,Kusto.Data.IntelliSense.KustoIntelliSenseDatabaseEntity).select($asm.$.Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.f6).orderBy($asm.$.Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.f7).ToArray(System.String);this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldDatabaseNames,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_showDatabaseCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Database,orderedDatabases),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldDatabaseNames,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_setDatabaseCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Database,orderedDatabases),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldDatabaseNames,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_addDatabaseCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Database,orderedDatabases),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldDatabaseNames,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_dropDatabaseCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Database,orderedDatabases),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldDatabaseNames,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_policyCommandOnDatabase,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Database,orderedDatabases),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldAlterDatabaseCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_alterDatabaseRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_alterDatabaseCommandOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t.AfterApplyPolicies=this.s_afterAlterDatabaseApplyPolicies,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldAlterMergePolicyRetentionOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_alterMergePolicyRetentionRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_alterMergePolicyRetentionOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendAssignmentPolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldAlterMergePolicyRetentionSoftDeleteDefinedOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_alterMergePolicyRetentionSoftDeleteDefinedRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_alterMergePolicyRetentionSoftDeleteDefinedOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendAssignmentPolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldAlterTimeSpanPolicyOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_alterMergePolicyRetentionOptionsRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_timeSpanPolicyOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t))},AddTableControlCommands:function(){var $t,$t1;this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldTableNamesForAdminOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_appendTableCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Table,this.TableNames),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldTableNamesForAdminOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_setOrAppendReplaceTableCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Table,this.TableNames),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldShowTableEntitiesOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_showTableOptionsCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_tableShowKeywordOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldTableNamesForAdminOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_anySimpleSyntaxActionTableCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Table,this.TableNames),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldDropExtentTagsOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_dropExtentTagsCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_dropExtentTagsCommandsOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldTableNamesForAdminOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_dropExtentTagsFromTableCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Table,this.TableNames),$t.DefaultAfterApplyPolicy=($t1=new Kusto.Data.IntelliSense.ApplyPolicy,$t1.Text=\" (@'')\",$t1.OffsetPosition=-2,$t1),$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldAlterExtentTagsOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_alterExtentTagsCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Command,System.Array.init([\"(@'') <| \"],System.String)),$t.DefaultAfterApplyPolicy=($t1=new Kusto.Data.IntelliSense.ApplyPolicy,$t1.Text=\"\",$t1.OffsetPosition=-6,$t1),$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldAttachExtentsOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_attachExtentsCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_attachExtentsCommandsOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldTableNamesForAdminOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_attachExtentsIntoTableCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Table,this.TableNames),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldAttachExtentsIntoTableOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_attachExtentsIntoSpecifiedTableCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_attachExtentsIntoSpecifedTableCommandsOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldMoveExtentsOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_moveExtentsCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_moveExtentsCommandsOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldMoveSpecifiedExtentsOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_moveSpecifiedExtentsCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_moveSpecifiedExtentsCommandsOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldTableNamesForAdminOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_moveExtentsFromTableCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Table,this.TableNames),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldMoveExtentsToTableOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_moveExtentsFromSpecifiedTableCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_moveExtentsFromTableCommandsOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldTableNamesForAdminOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_moveExtentsToTableCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Table,this.TableNames),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldShowExtentsByEntityOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_showExtentsInSpecifiedEntityCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_showExtentsByEntityCommandsOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldShowExtentsByEntityWithTagsFiltersOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_showExtentsInSpecifiedEntityWithTagFiltersCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_showExtentsByEntityWithTagFiltersCommandsOptions),$t.DefaultAfterApplyPolicy=($t1=new Kusto.Data.IntelliSense.ApplyPolicy,$t1.Text=\" @''\",$t1.OffsetPosition=-1,$t1),$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldReplaceExtentsOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_replaceExtentsCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_replaceExtentsCommandsOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldTableNamesForAdminOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_replaceExtentsInTableCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Table,this.TableNames),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldSetTableAdminsOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_setTableAdminsCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_AddSetAdminsKeywordOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldAddTableAdminsOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_addTableAdminsCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_AddSetAdminsKeywordOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldCreateTableEntitiesOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_createTableEntitiesCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_createTableEntitiesKeywordOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldAlterTableEntitiesOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_alterTableEntitiesCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_alterTableEntitiesKeywordOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldAlterTableEntitiesOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_alterMergeTableEntitiesCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_alterMergeTableEntitiesKeywordOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldDropTableEntitiesOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_dropTableEntitiesCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_dropTableEntitiesKeywordOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldDeleteTableEntitiesOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_deleteTableEntitiesCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_deleteTableEntitiesKeywordOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldDropTableColumnsSyntaxOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_dropTableColumnsSyntaxCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_DropColumnsSyntaxKeywordOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldSetTableAdminsNoneOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_setTableAdminsNoneCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_setNoneKeywordOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldSetTableIngestorsNoneOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_setTableIngestorsNoneCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_setNoneKeywordOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldTableNamesForAdminOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_duplicateIngestionIntoRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Table,this.TableNames),$t.DefaultAfterApplyPolicy=($t1=new Kusto.Data.IntelliSense.ApplyPolicy,$t1.Text=\" to h@''\",$t1.OffsetPosition=-1,$t1),$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldPurgeWhatIfOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_purgeWhatIfRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_purgeWhatIfCommandOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldPurgeWithPropertiesOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_purgeWithPropertiesRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_purgeWithPropertiesCommandsOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldTableNamesForAdminOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_purgeTableRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Table,this.TableNames),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldPurgeTableOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_purgeSpecifiedTableRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_purgeTableCommandsOptions),$t.DefaultAfterApplyPolicy=($t1=new Kusto.Data.IntelliSense.ApplyPolicy,$t1.Text=\" <|\",$t1),$t))},AddRowStoreControlCommands:function(){var $t;this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldRowStoreCreatePersistencyOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_createRowstoreCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_rowstorePersistencyOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t.AfterApplyPolicies=this.s_afterCreateRowStoreApplyPolicies,$t))},AddFunctionControlCommands:function(){var $t;this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldFunctionNamesForAdminOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_anySimpleSyntaxActionFunctionCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.ExpressionFunction,this.FunctionNames),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldAlterFunctionEntitiesOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_alterFunctionEntitiesCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_alterFunctionEntitiesKeywordOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t))},AddAddDropControlCommandKeywords:function(){var $t,$t1;this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldSetCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_setCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_setAddCommandsOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldAddCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_addCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_setAddCommandsOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldDropCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_dropCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_dropCommandsOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldMoveCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_moveCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_moveCommandsOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldAttachCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_attachCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_attachCommandsOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldReplaceCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_replaceCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_replaceCommandsOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldAlterCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_alterCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_alterCommandOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldAlterMergeCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_alterMergeCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_alterMergeAndDeleteCommandOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldDeleteCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_deleteCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_alterMergeAndDeleteCommandOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldCreateCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_createCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_createCommandOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldCreateOrAlterOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_createOrAlterCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_createOrAlterOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldIngestionDuplicationOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_ingestionDuplicationCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_duplicateIngestionCommandsOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldPurgeOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_purgeCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_purgeCommandsOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldPurgeCleanupOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_purgeCleanupCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_purgeCleanupCommandsOptions),$t.DefaultAfterApplyPolicy=($t1=new Kusto.Data.IntelliSense.ApplyPolicy,$t1.Text=\" datetime()\",$t1.OffsetPosition=-1,$t1),$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldRunCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_runCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_runCommandOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldRunCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_suspendCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_suspendCommandOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t))}}});Bridge.ns(\"Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider\",$asm.$);Bridge.apply($asm.$.Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider,{f1:function(s){return s},f2:function(_o1){var $t;return _o1.add(\"volatile\",Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy),_o1.add(\"persist\",($t=new Kusto.Data.IntelliSense.ApplyPolicy,$t.Text=\" (h@'', h@'') \",$t.OffsetPosition=-9,$t)),_o1},f3:function(_o2){var $t;return _o2.add(\"policy\",Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy),_o2.add(\"persist metadata\",($t=new Kusto.Data.IntelliSense.ApplyPolicy,$t.Text=\" h'' \",$t.OffsetPosition=-2,$t)),_o2},f4:function(_o3){var $t;return _o3.add(\"volatile\",Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy),_o3.add(\"writeaheadlog\",($t=new Kusto.Data.IntelliSense.ApplyPolicy,$t.Text=\" (h@'', h@'') \",$t.OffsetPosition=-9,$t)),_o3},f5:function(_o4){var $t;return _o4.add(\"csv\",($t=new Kusto.Data.IntelliSense.ApplyPolicy,$t.Text=\" (h@'')\",$t.OffsetPosition=-2,$t)),_o4.add(\"tsv\",($t=new Kusto.Data.IntelliSense.ApplyPolicy,$t.Text=\" (h@'')\",$t.OffsetPosition=-2,$t)),_o4.add(\"json\",($t=new Kusto.Data.IntelliSense.ApplyPolicy,$t.Text=\" (h@'')\",$t.OffsetPosition=-2,$t)),_o4.add(\"sql\",Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy),_o4},f6:function(db){return Kusto.Data.Common.CslSyntaxGenerator.NormalizeDatabaseName(db.Name)},f7:function(n){return n}})});"],"mappings":"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","names":["$asm","globals","kustoContext","data","$step","$task1","$taskResult1","$jumpFromFinally","$tcs","$returnValue","res","dataAsCsl","query","results","$t","$async_e","$asyncBody","$async_e1","items","result","item","seriesName","anomalyColumns","anomalySeriesMap","$t1","valueData","anomalyColumn","anomalyData","anomalyPointsCount","i","valuePoint","anomalyPoint","a","a1","anomalyColumnsHashset","valueColumn","d","$me","r","maxPointsPerChartError","maxPointsPerChartWarning","maxSeriesPerChartError","maxSeriesPerChartWarning","maxDatetimePeriodError","table","argumentColumnType","argumentRestrictions","seriesColumns","accumulateResults","xColumn","yColumns","chartProps","metaData","baseSeriesName","tableSchema","allColumns","seriesList","col","dataColumns","unusedColumns","argumentData","lastValues","isTableValidForCharting","tempDataIndex","firstDataIndex","index","emptySeries","seriesStatistics","stats","partialEmptySeries","r1","options","dataSource","yColumnsToResolve","argumentType","isTimechart","isLinechart","isLikelyTimechart","expectedArgTypes","expectedArgType","type","considerDateTimeAndTimeSpanAsNumeric","columnsToExclude","columnName","schema","n","columnsToExcludeDefined","amountToSkip","argType","dataGroups","dg","serieDataItems","argData","prevItem","currentDistance","gapLength","mod","j","newItem","distances","maxGroup","initialDistance","$e1","ts","limits","error","minValue","maxValue","seriesCount","dataPoints","value","arr","collection","isFirstElement","prev","idx","sequenceType","sorted","currentGroup","maxGroupCount","maxGroupValue","prevNum","num","diff","start","end","distance","dataIsSeries","columns","column","isY","isX","columnType","isSeries","propertyColumns","rowIdx","accumulate","argumentDataColumnIndex","$t2","argumentValue","argumentActualType","values","dataItem","cellValue","lastValue","argumentDateTime","argumentNumeric","argumentString","argumentProperties","p","properties","kvp","o","s","count","hasPrevValue","baseSeriesNameBuilder","columnValue","point","obj","resolvedColumnTypes","firstNumericColumnIndex","geoJSONPointCandidateColumns","geoColumnsPredefined","columnId","columnFirstValue","geojsonPoint","seriesOrArgumentDataIndex","geoColumnIndex","seriesDefaultIndex","startIndex","seriesIndices","yIndexes","isNotInSeries","isNotInYs","indexesToExclude","nonStringIndex","dt","resultAsTimeSpan","considerDateTimeAndTimeSpanAsDouble","valueAsArr","resolvedValueType","val","hasTimeSpanValues","hasDateTimeValues","hasNumericValues","colIndex","_","b","c","colName","colType","requestedType","geospatialColumnIndexes","rowIndex","longitudeValue","latitudeValue","includeColName","name","maxLen","other","literal","_discard1","isHidden","str","_discard2","multiLineLiteral","ret","ret1","str1","str2","input","T","hidden","quote","twiceQuoteLen","ch","ranges","range","orderedRanges","firstItem","begin","rangeGroupA","rangeGroupB","intersectedTimeRanges","rangeFromA","rangeFromB","intersectedStart","intersectedEnd","to","culture","inputTime","utcTime","t1","t2","firstStart","firstEnd","secondStart","secondEnd","datetime","highBound","lowBound","date","timeSpan","dateTime","sb","g","f","e","year","month","day","hour","minute","second","fraction","ticks","y400","y100","y4","y1","leapYear","days","m","seconds","secondsLong","additionTicks","milliseconds","millisecondsLong","microseconds","TicksPerMicrosecond","MicrosecondsPerMillisecond","nanoseconds","NanosecondsPerTick","NanosecondsPerMillisecond","_o1","TSource","source","maxCount","asICollectionT","asICollection","equalityComparer","basicComparison","sortedCollection1","sortedCollection2","predicate","enumerator1","enumerator2","that","length1","length2","sequence","asArrayT","asIReadOnlyCollectionT","delimiter","maxTake","nullString","estimatedStringSize","elementPrefix","elementPostfix","customElementToString","toStringRes","toStringRes1","$toString","displayStringBuilder","itemsPassed","enumerator","TCollection","first","collectionEnumerable","asIReadOnlyCollection","list","comparer","TKey","keySelector","collections","TR","isFirst","transform","typeOfT","list1","list2","t","itemToAdd","checkBaseTypes","genType","x","wildcardPattern","regexString","regex","otherAsRegex","replacement","replacesCount","match","format","args","args2","arg","arg2","argStr","formatProvider","lhs","rhs","position","before","after","allowWhitespace","offsetFirstEquality","cmd","slash","text","nextNewLine","hasPrecedingText","prefix","comparison","justOne","suffix","openning","closing","currentPos","chars","substring","what","me","length","comparisonType","delimiterIndex","delimiters","delimitersIndex","isNextChar_slashN","resultBuilder","c_space","c_quotes","replacements","shouldReplace","_o2","_o3","threadStaticStringBuilder","capacity","maxBuilderSize","appendText","parser","commands","queryFormatted","databaseName","forceNormalization","virtualClusterName","functionName","forceNormalizeFunctionName","tableName","forceNormalizeTableName","jobName","forceNormalizeColumnName","rowStoreName","workloadGroupName","encryptionScope","token","dummy","flag","ignoreCase","ignoreInts","reti","rules","command","commandContext","lastPart","keywordFromCommand","hasKeywordMatch","keyword","statements","delimeter","trimDelimeter","currentStatementStart","eofString","len","balancedChar","recursionChars","firstWordAfterPipe","parts","last","rule","analyzedCommand","isCommand","ruleKind","queryParameters","kind","priority","selectedOption","policy","firstCommand","partValue","level","part","rulesProvider","mapOfKnownEntities","mapOfOriginallyKnownEntities","commandBuilder","context","operatorContext","knownEntities","originallyKnownEntities","commandPart","opRegex","linqParts","separator","traits","wasHandled","isFirstTime","cp","processedStart","startRelativeIndex","startAbsoluteIndex","funcPrefix","endRelativeIndex","endAbsoluteIndex","boddy","funcSuffix","boddy1","assumeJoinStartedWithBracket","remainingText","joinStartMatch","relativePosition","joinOpPart","joinEndMatch","tabLength","bracketClosed","joinInnerPart","onJoinPart","hasBracket","shouldCloseBracket","openBrackets","closeBrackets","parseMode","previousCandidate","tokens","allowQueryParameters","indexer","recognizedTokens","commandParts","commentsParts","clientDirectivesPositions","tokenToRemove","invalidTokens","currentEnd","refernceCommand","prevPart","tableContext","calculatedColumns","availableTableColumns","newCalculatedColumns","prevCalculatedColumns","calculatedColumnTokens","letVariables","canUseReference","state","referencePart","offset","capturedTokens","clonedToken","wasFullyResolved","letVariable","target","recognizedTokenList","textTokens","tokenKind","tokensCount","newTokenLen","tokenText","tokenText1","unrecognizedTokens","tokenStart","prefixText","prefixToken","suffixText","suffixToken","startTextIndex","endTextIndex","y","ct","scanStart","endOfArray","terminators","escaping","foundTerminators","escapeSequence","regexList","tokenList","$t3","commentRegex","matches","indexQueryParameters","partText","bracketItem","bracketToken","isTokenEnd","skipRanges","tokenLookupState","tokenBuilder","tokenPosition","commandPartPosition","bracketsStack","isInsideTokenLookupSkipRange","isInsideCommentRange","isAfterWhiteSpace","canStartNewPart","size","rIndex","currentSkipRange","searchForTokens","rangeStart","rangeEnd","tokensInRange","tokenSuffix","ifVerbatim","slp","i1","slp1","i2","qpp","slp2","newSlp","comment","r2","queryWithoutLeadingComments","commandWithoutLeadingComments","requestContent","requestContentWithoutLeadingComments","isAdminCommand","lines","line","directiveWithoutLeadingComments","parsedCommands","newCommand","wasFound","previouslyParsedCommand","commandLength","mode","endOfStream","expectedNewLine","absolutePositionBias","signature","parenStart","topic","key","option","markdownSource","shortDescription","longDescription","examples","url","typeName","typeCode","generateImplicitEntities","entities","parse","closingBracket","closingBracket1","startToken","multipleColumnsResultsCount","startFunctionName","currentChar","added","funcName","endIndex","tokenLen","entity","entityName","entity_part","indexOfAssignment","indexOfStartingBracket","indexOfEndingBracket","entityName1","entitiesList","op","argList","$arguments","parameters","boldElement","parameters1","operation","db","cluster","database","allFlags","flags","intersections","partResult","$enumerator","visualizationResult","visualizationKind","ysplit","tableIndex","intellisenseTests","parserTests","expected","actual","errorMessage","message","condition","availableClusters","clusterSchema","queriesAndResults","testCase","actualResult","expectedResult","expectedTokens","tokens_2","tokens_21","tokens_3","fullValidation","requestsAndExpectedApiKinds","request","expectedFields","entititesList","entity1","intelliSenseProvider","testPatterns","patternsWithLet","testPattern","failMessage","expectedRule","failMessage1","testPattern1","matchingSuccess","databases","i3","table1","columns1","i4","tables","functions","expectedOptions","unionOfAllColumns","additionalOptions","additionalOptionsIncludingIn","additionalOptionsIncludingKind","actualOptions","existingFields","resolvedEntities","command1","entities1","resolvedEntities1","result1","command2","entities2","resolvedEntities2","result2","flatten","finalEntitiesList","entitiesResolveResult","isAdditionalColumns","filterKeyword","containsKeyword","policiesCommands","policyCommand","expectedMatchingRule","matchingRule","contextMatch","accounts","services","connectionContext","statement","cachedReference","appendingPart","accountNames","servicesNames","servicesAndOptionsTokens","alterServicesAndOptionsTokens","removeServicesAndOptionsTokens","toolTipCommands","command3","command4","command5","command6","command7","command8","command9","command10","command11","command12","command13","command14","command15","command16","command17","command18","command19","command20","command21","command22","command23","command24","command25","internalCmDocumentationRoot","externalCmDocumentationRoot","account","service","contextWithoutOpertaion","contextualOptionsCollection","sortedCollections","matchedString","resultsUnordered","clauses","clause","operatorEntitiesMap","pipeParts","opAnRest","opEntitiesMap","wasAdded","parsedColumnsString","parsedColumns","columnCandidate","lastPipePart","entitites","field","fields","safeKnownEntities","field1","changed","extendedColumnName","convertedMatch","inputColumn","explicitlySpecifiedResultColumnCount","resultEntities","resultSuffixes","argName","generatedName","generateImplicitColumnNames","argMinMaxEntities","parsedEntities","correctedOp","preserveNames","parsedEntity","arg0","regexExpression","en","correctedField","fieldname","fieldReplaced","argCount","wildCardMatch","matchingEntities","fieldname1","fieldname2","escapedField","matchesKeywords","lastMatch","contextMatchRegex","startat","matchingRegex","transformationRegex","letStatement","letMatch","letMatches","variable","databaseSchema","schemaResolver","allowClientDirectives","commandEntities","outputColumns","remoteColumnMappingsToTables","dbNames","localWildcardedTablesColumns","performUnion","contextParts","columnMappingsToTables","mapping","partDbs","intersection","contextWithNoOperation","kustoCommandContextPart","clusterUriOrAlias","databaseNameOrAlias","remoteContext","matchedTables","matchedTableNames","entitiesTables","dbSchemas","allTables","columnsToTablesMapping","orderedColumns","targetCluster","remoteTableContext","hasClusterReference","hasDatabaseReference","localDatabases","pluginOptions","columnNamesWithStringTypes","matchingTokens","afterApplyPolicies","columnNamesWithNonStringTypes","columnNamesWithTypeDateTime","extendedEntities","replaceEntities","unionCommandSegments","commandClauses","unifiedEntities","clauseEntities","usedFunctions","funcitonStatementsBuilder","funcitonAdditions","moreFunctions","isFuncPresentRegex","funcExpression","analyzeResult","hasPipe","projectionMatch","projectedList","projectedListCopy","knownProjectedEntities","withsourceMatch","tableNameColumn","entity2","isOriginalEntitiesListEmpty","pair","tuple","targetName","sourceName","removedEntities","wasChanged","appendedCommand","commandWithoutStringLiterals","hashCode","defaultContextMatcher","contextOperation","isFind","isSearch","requireContext","letStatements","expression","replaceRegex","parameters2","parameters3","parameters4","parameters5","parameters6","parameters7","parameters8","parameters9","parameters10","parameters11","parameters12","parameters13","parameters14","parameters15","parameters16","parameters17","parameters18","parameters19","parameters20","parentTableName","$v","func","_o9","_o10","_o11","_o12","_o13","_o14","_o15","_o16","_o17","_o18","_o19","_o20","_o21","_o22","_o23","_o24","_o25","_o26","_o27","_o28","_o29","_o30","_o31","_o32","_o33","_o34","_o35","_o36","_o37","_o4","_o5","_o6","_o7","_o8","vals","isMatch","dbSchema","keyMatcher","dbMatcher","tableMatcher","filteredDb","orderedDatabases"],"sourceRoot":"","file":"../lib/monaco/min/vs/language/kusto/kusto.javascript.client.min.js"}